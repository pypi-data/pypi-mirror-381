"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright 2020-2020 Exactpro (Exactpro Systems Limited)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class RuleID(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.int
    def __init__(
        self,
        *,
        id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___RuleID = RuleID

@typing.final
class RuleRelation(google.protobuf.message.Message):
    """
    Relation used to filter income and outcome messages to related rules.
    To configure this param please setup it on rule creation phase.
    Related rules sends and receives messages only from pins with same value in attributes.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RELATION_FIELD_NUMBER: builtins.int
    relation: builtins.str
    def __init__(
        self,
        *,
        relation: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["relation", b"relation"]) -> None: ...

global___RuleRelation = RuleRelation

@typing.final
class RuleInfo(google.protobuf.message.Message):
    """
    id: RuleID - id of rule generated by simulator side
    class_name: String - name of rule's class
    alias: String - attribute used to filter messages to specific rules
    relation: RuleRelation - attribute used to filter messages to specific rules
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    CLASS_NAME_FIELD_NUMBER: builtins.int
    ALIAS_FIELD_NUMBER: builtins.int
    RELATION_FIELD_NUMBER: builtins.int
    class_name: builtins.str
    alias: builtins.str
    @property
    def id(self) -> global___RuleID: ...
    @property
    def relation(self) -> global___RuleRelation: ...
    def __init__(
        self,
        *,
        id: global___RuleID | None = ...,
        class_name: builtins.str = ...,
        alias: builtins.str = ...,
        relation: global___RuleRelation | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "relation", b"relation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["alias", b"alias", "class_name", b"class_name", "id", b"id", "relation", b"relation"]) -> None: ...

global___RuleInfo = RuleInfo

@typing.final
class RulesInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFO_FIELD_NUMBER: builtins.int
    @property
    def info(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RuleInfo]: ...
    def __init__(
        self,
        *,
        info: collections.abc.Iterable[global___RuleInfo] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["info", b"info"]) -> None: ...

global___RulesInfo = RulesInfo

@typing.final
class TouchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ArgsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    ARGS_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___RuleID: ...
    @property
    def args(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        id: global___RuleID | None = ...,
        args: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["args", b"args", "id", b"id"]) -> None: ...

global___TouchRequest = TouchRequest
