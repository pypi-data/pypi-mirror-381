{
  "description": "### Description\n\n- **Jira Ticket**: [GLU-XXXX]\n- **Summary**: Introduce unified client abstractions for AI, GitHub, Jira, and local Git operations; refactor all CLI\ncommands and generators to use these clients; add end-to-end pexpect tests.\n- **Implementation details**:\n  - Created `ChatClient` in `glu/ai.py` to select and invoke AI models.\n  - Added `GithubClient` (`glu/gh.py`), `JiraClient` (`glu/jira.py`), and `GitClient` (`glu/local.py`) to encapsulate\nGitHub API calls, Jira interactions, and Git workflows.\n  - Refactored PR and ticket CLI commands (`glu/cli/pr.py`, `glu/cli/ticket.py`) to obtain and use these clients instead\nof direct helper functions.\n  - Updated all `generate_*` functions to accept client objects and standardized prompt construction.\n  - Bumped package version to 2.0.2, added `pytest`, `pexpect`, and `pytest-mock` to dev dependencies.\n  - Extended `.github/workflows/cicd.yml` to run pytest; updated `.gitignore` and config path for test fixtures.\n  - Added comprehensive integration tests (`tests/test_prs.py`, `tests/test_tickets.py`) using pexpect and fake clients.\n\n### Changes\n\n- glu/ai.py\n  - Introduce `ChatClient`; remove direct `BaseChatModel` imports and `_get_chat_model`.\n  - Refactor `generate_description`, `generate_ticket`, `generate_commit_message`, and `generate_branch_name` to use\n`ChatClient`.\n- glu/gh.py\n  - Add `GithubClient`, refactor `prompt_for_reviewers` to use it; remove raw `Github` usage.\n- glu/jira.py\n  - Add `JiraClient`, `get_jira_client`, and adjust user/project lookups; remove legacy helpers.\n- glu/local.py\n  - Add `GitClient`, wrap git diff, commit, branch, push, and sync operations; remove scattered helpers.\n- glu/cli/pr.py & glu/cli/ticket.py\n  - Acquire and wire up AI/GitHub/Jira/Git clients; simplify command flows accordingly.\n- glu/config.py\n  - Adjust `config_path()` to load test config when `GLU_TEST` is set.\n- pyproject.toml & uv.lock\n  - Bump version to 2.0.2; add `pexpect`, `pytest`, `pytest-mock` to dev extras.\n- .github/workflows/cicd.yml\n  - Add `pytest` step.\n- .gitignore\n  - Ignore `tests/data/config.toml`.\n- tests/\n  - Add fake client implementations and fixtures in `conftest.py`; include AI prompt fixtures and diff sample; implement\nfull-flow pexpect tests for `glu pr` and `glu ticket`.\n\n### Test Plan\n\n1. CI now runs `pytest`; new integration tests exercise full `glu pr create` and `glu ticket create` flows via pexpect\nunder `GLU_TEST`.\n2. Fake clients simulate Git, GitHub, Jira, and AI responses without real network calls.\n3. Ensure no new environment variables required beyond existing CLIENT_API_KEYS and `GLU_TEST=1` in CI.\n\n### Dependencies\n\n- Added (dev):\n  - pexpect >=4.9.0\n  - pytest >=8.4.0\n\n### Future Enhancements / Open questions / Risks / Technical Debt\n\n- Consider adding support for more AI providers (e.g., Glean when available).\n- Potential duplication in client initialization patterns could be consolidated.\n- Error handling could be further unified (e.g., retries in API clients).\n- Removing remaining legacy helpers in future major version.\n\n### Checklist\n\n- [ ] Code has been linted and adheres to the project's coding style guidelines.\n- [ ] Tests have been added or modified for all new features and bug fixes.\n- [ ] All FIXMEs have been addressed.\n- [ ] Code changes or additions do not introduce significant performance issues.\n- [ ] If necessary, documentation has been updated.\n- [ ] I have sufficiently commented my code to guide reviewers.\n- [ ] I have selected reviewers who are knowledgeable about the code changes.\n- [ ] Breaking changes: code remains backward compatible or documented steps provided."
}