[build-system]
requires = [
    "setuptools>=64.0.0",
    "setuptools-scm>=8.0.0",
    "wheel>=0.37.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "py-github-analyzer"
version = "1.0.0"
description = "Advanced GitHub repository analyzer with AI-optimized code extraction and metadata generation"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Han Jun-hee", email = "createbrain2heart@gmail.com"}
]
maintainers = [
    {name = "Han Jun-hee", email = "createbrain2heart@gmail.com"}
]
keywords = [
    "github", "analyzer", "repository", "code", "extraction", 
    "metadata", "ai", "development", "automation", "git"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Archiving",
    "Topic :: Utilities",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Framework :: AsyncIO",
    "Natural Language :: English",
    "Natural Language :: Korean",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "urllib3>=1.26.0,<3.0.0",
    "httpx>=0.24.0",
    "aiofiles>=0.8.0",
    "asyncio-throttle>=1.0.2",
    "certifi>=2022.5.18.1",
    "charset-normalizer>=2.0.0",
    "idna>=2.8",
    "rich>=13.0.0"
]
dynamic = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage[toml]>=7.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.22.0",
    "myst-parser>=1.0.0",
]
performance = [
    "orjson>=3.8.0",
    "lz4>=4.0.0",
    "uvloop>=0.17.0; sys_platform != 'win32'",
]
all = [
    "httpx>=0.24.0",
    "aiofiles>=0.8.0",
    "asyncio-throttle>=1.0.2",
    "orjson>=3.8.0",
    "lz4>=4.0.0",
    "uvloop>=0.17.0; sys_platform != 'win32'",
]
full = [
    "httpx>=0.24.0",
    "aiofiles>=0.8.0",
    "asyncio-throttle>=1.0.2",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "coverage[toml]>=7.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "orjson>=3.8.0",
    "lz4>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/creatorjun/github-analyzer"
Documentation = "https://github.com/creatorjun/github-analyzer#readme"
Repository = "https://github.com/creatorjun/github-analyzer.git"
"Bug Tracker" = "https://github.com/creatorjun/github-analyzer/issues"
"Feature Requests" = "https://github.com/creatorjun/github-analyzer/discussions"
Changelog = "https://github.com/creatorjun/github-analyzer/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/creatorjun/github-analyzer"
Download = "https://pypi.org/project/py-github-analyzer/"

[project.scripts]
py-github-analyzer = "py_github_analyzer.cli:main"
pga = "py_github_analyzer.cli:main"

[project.entry-points."console_scripts"]
py-github-analyzer = "py_github_analyzer.cli:main"
pga = "py_github_analyzer.cli:main"

# ============================================================================
# Tool Configuration
# ============================================================================

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["."]
include = ["py_github_analyzer*"]
exclude = ["tests*", "docs*", "examples*", "scripts*"]

[tool.setuptools.package-data]
py_github_analyzer = [
    "py.typed",
    "*.json",
    "*.yaml",
    "*.yml", 
    "*.toml",
]

[tool.setuptools.exclude-package-data]
"*" = [
    "*.pyc",
    "*.pyo",
    "*~",
    "*.bak",
    "*.swp",
    ".DS_Store",
    "*.egg-info/*",
]

# ============================================================================
# Black (Code Formatting)
# ============================================================================
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# ============================================================================
# isort (Import Sorting)
# ============================================================================
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["py_github_analyzer", "tests"]
skip = [".gitignore", ".dockerignore"]
skip_glob = ["**/migrations/*.py"]
known_first_party = ["py_github_analyzer"]

# ============================================================================
# MyPy (Type Checking)
# ============================================================================
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "httpx.*", 
    "aiofiles.*",
    "pytest.*",
]
ignore_missing_imports = true

# ============================================================================
# Pytest (Testing)
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=py_github_analyzer",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "async_test: marks tests as async tests",
]
asyncio_mode = "auto"

# ============================================================================
# Coverage (Code Coverage)
# ============================================================================
[tool.coverage.run]
source = ["py_github_analyzer"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/distutils/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# Bandit (Security Linting)
# ============================================================================
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

# ============================================================================
# Version Management (if using setuptools-scm)
# ============================================================================
[tool.setuptools_scm]
write_to = "py_github_analyzer/_version.py"
write_to_template = "__version__ = '{version}'\n"