# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.assets_with_includes_response import AssetsWithIncludesResponse
from ..types.file_with_media_links_include import FileWithMediaLinksInclude
from ..types.include_total_count import IncludeTotalCount
from ..types.request_after_opaque_cursor import RequestAfterOpaqueCursor
from ..types.request_page_size import RequestPageSize
from ..types.uuid_ import Uuid
from ..types.version_stack_children_response import VersionStackChildrenResponse
from ..types.version_stack_copy_response import VersionStackCopyResponse
from ..types.version_stack_response import VersionStackResponse
from ..types.version_stack_with_includes_response import VersionStackWithIncludesResponse
from ..types.version_stacks_with_includes_response import VersionStacksWithIncludesResponse
from .raw_client import AsyncRawVersionStacksClient, RawVersionStacksClient
from .types.version_stack_copy_params_data import VersionStackCopyParamsData
from .types.version_stack_create_params_data import VersionStackCreateParamsData
from .types.version_stack_move_params_data import VersionStackMoveParamsData
from .types.version_stack_reorder_params_data import VersionStackReorderParamsData

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VersionStacksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawVersionStacksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawVersionStacksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawVersionStacksClient
        """
        return self._raw_client

    def list(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStacksWithIncludesResponse:
        """
        List version stacks in a given folder.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.list.
              <br><br>
              Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStacksWithIncludesResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.version_stacks.list(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="media_links",
            after="<opaque_cursor>",
            page_size=10,
            include_total_count=False,
        )
        """
        _response = self._raw_client.list(
            account_id,
            folder_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: VersionStackCreateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackWithIncludesResponse:
        """
        Create a new Version Stack under the parent folder.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.create.
              <br><br>
              Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : VersionStackCreateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackWithIncludesResponse
            Created

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.version_stacks import VersionStackCreateParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.version_stacks.create(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=VersionStackCreateParamsData(
                file_ids=[
                    "42ea4547-c102-4f10-afc7-712c1aa0cf44",
                    "77776eea-0d9e-486d-8880-7b63f5e5d83b",
                ],
            ),
        )
        """
        _response = self._raw_client.create(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    def index(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssetsWithIncludesResponse:
        """
        List the children (files) in a given version stack.
        <br><br>
        Use the `include` query parameter to selectively include additional properties in the response.
        <br><br>
        This endpoint has been added to `Current Version` of the API.
        <br><br>
        Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.index.
        <br><br>
        Note: if you include `media_links.original` and the user does not have permission to download files
        in the corresponding project, then this endpoint will respond with a `403 Forbidden` error.
        If the content is inaccessible because watermarking is required for this user and isn't supported by
        the requested media_links, then the request will succeed but the unsupported media links will be set to null.
        Similarly, if a requested transcode link does not exist for a particular file (e.g. including
        `media_links.video_h264_180` on a static image file) or transoding process hasn't finished
        (i.e. the file's `status` is "uploaded" rather than "transcoded"), then the a media link will also be set to
        null in the response payload. In short, the client must handle null media links gracefully.
        <br><br>
        Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssetsWithIncludesResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.version_stacks.index(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="media_links",
            after="<opaque_cursor>",
            page_size=10,
            include_total_count=False,
        )
        """
        _response = self._raw_client.index(
            account_id,
            version_stack_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    def copy(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        data: typing.Optional[VersionStackCopyParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackCopyResponse:
        """
        Copy version stack.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.copy.
              <br><br>
              Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        data : typing.Optional[VersionStackCopyParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackCopyResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.version_stacks import VersionStackCopyParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.version_stacks.copy(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=VersionStackCopyParamsData(
                parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
            ),
        )
        """
        _response = self._raw_client.copy(account_id, version_stack_id, data=data, request_options=request_options)
        return _response.data

    def move(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        data: VersionStackMoveParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackResponse:
        """
        Move version stack to a folder.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.move.
              <br><br>
              Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        data : VersionStackMoveParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.version_stacks import VersionStackMoveParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.version_stacks.move(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=VersionStackMoveParamsData(
                parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
            ),
        )
        """
        _response = self._raw_client.move(account_id, version_stack_id, data=data, request_options=request_options)
        return _response.data

    def reorder(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        data: typing.Optional[VersionStackReorderParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackChildrenResponse:
        """
        Reorder version stack children. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        data : typing.Optional[VersionStackReorderParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackChildrenResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.version_stacks import VersionStackReorderParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.version_stacks.reorder(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=VersionStackReorderParamsData(
                move_to="top",
                target_file_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
            ),
        )
        """
        _response = self._raw_client.reorder(account_id, version_stack_id, data=data, request_options=request_options)
        return _response.data


class AsyncVersionStacksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawVersionStacksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawVersionStacksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawVersionStacksClient
        """
        return self._raw_client

    async def list(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStacksWithIncludesResponse:
        """
        List version stacks in a given folder.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.list.
              <br><br>
              Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStacksWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.version_stacks.list(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="media_links",
                after="<opaque_cursor>",
                page_size=10,
                include_total_count=False,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            account_id,
            folder_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: VersionStackCreateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackWithIncludesResponse:
        """
        Create a new Version Stack under the parent folder.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.create.
              <br><br>
              Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : VersionStackCreateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackWithIncludesResponse
            Created

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.version_stacks import VersionStackCreateParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.version_stacks.create(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=VersionStackCreateParamsData(
                    file_ids=[
                        "42ea4547-c102-4f10-afc7-712c1aa0cf44",
                        "77776eea-0d9e-486d-8880-7b63f5e5d83b",
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    async def index(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        after: typing.Optional[RequestAfterOpaqueCursor] = None,
        page_size: typing.Optional[RequestPageSize] = None,
        include_total_count: typing.Optional[IncludeTotalCount] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssetsWithIncludesResponse:
        """
        List the children (files) in a given version stack.
        <br><br>
        Use the `include` query parameter to selectively include additional properties in the response.
        <br><br>
        This endpoint has been added to `Current Version` of the API.
        <br><br>
        Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.index.
        <br><br>
        Note: if you include `media_links.original` and the user does not have permission to download files
        in the corresponding project, then this endpoint will respond with a `403 Forbidden` error.
        If the content is inaccessible because watermarking is required for this user and isn't supported by
        the requested media_links, then the request will succeed but the unsupported media links will be set to null.
        Similarly, if a requested transcode link does not exist for a particular file (e.g. including
        `media_links.video_h264_180` on a static image file) or transoding process hasn't finished
        (i.e. the file's `status` is "uploaded" rather than "transcoded"), then the a media link will also be set to
        null in the response payload. In short, the client must handle null media links gracefully.
        <br><br>
        Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        after : typing.Optional[RequestAfterOpaqueCursor]
            Opaque Cursor query param for requests returning paginated results.
            <br/>
            NOTE: this value is auto-generated and included as part of links from a previous response. It is not intended to be human readable.

        page_size : typing.Optional[RequestPageSize]


        include_total_count : typing.Optional[IncludeTotalCount]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssetsWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.version_stacks.index(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="media_links",
                after="<opaque_cursor>",
                page_size=10,
                include_total_count=False,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.index(
            account_id,
            version_stack_id,
            include=include,
            after=after,
            page_size=page_size,
            include_total_count=include_total_count,
            request_options=request_options,
        )
        return _response.data

    async def copy(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        data: typing.Optional[VersionStackCopyParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackCopyResponse:
        """
        Copy version stack.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.copy.
              <br><br>
              Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        data : typing.Optional[VersionStackCopyParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackCopyResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.version_stacks import VersionStackCopyParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.version_stacks.copy(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=VersionStackCopyParamsData(
                    parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.copy(
            account_id, version_stack_id, data=data, request_options=request_options
        )
        return _response.data

    async def move(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        data: VersionStackMoveParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackResponse:
        """
        Move version stack to a folder.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Version-Stacks/operation/version_stacks.move.
              <br><br>
              Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        data : VersionStackMoveParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.version_stacks import VersionStackMoveParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.version_stacks.move(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=VersionStackMoveParamsData(
                    parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.move(
            account_id, version_stack_id, data=data, request_options=request_options
        )
        return _response.data

    async def reorder(
        self,
        account_id: Uuid,
        version_stack_id: Uuid,
        *,
        data: typing.Optional[VersionStackReorderParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionStackChildrenResponse:
        """
        Reorder version stack children. <br><br>Rate Limits: 10 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        version_stack_id : Uuid


        data : typing.Optional[VersionStackReorderParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionStackChildrenResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.version_stacks import VersionStackReorderParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.version_stacks.reorder(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                version_stack_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=VersionStackReorderParamsData(
                    move_to="top",
                    target_file_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.reorder(
            account_id, version_stack_id, data=data, request_options=request_options
        )
        return _response.data
