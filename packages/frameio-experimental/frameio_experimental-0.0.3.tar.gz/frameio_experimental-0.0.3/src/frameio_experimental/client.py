# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import FrameioExperimentalEnvironment

if typing.TYPE_CHECKING:
    from .accounts.client import AccountsClient, AsyncAccountsClient
    from .collections.client import AsyncCollectionsClient, CollectionsClient
    from .custom_actions.client import AsyncCustomActionsClient, CustomActionsClient
    from .files.client import AsyncFilesClient, FilesClient
    from .folders.client import AsyncFoldersClient, FoldersClient
    from .metadata.client import AsyncMetadataClient, MetadataClient
    from .metadata_fields.client import AsyncMetadataFieldsClient, MetadataFieldsClient
    from .version_stacks.client import AsyncVersionStacksClient, VersionStacksClient


class FrameioExperimental:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FrameioExperimentalEnvironment
        The environment to use for requests from the client. from .environment import FrameioExperimentalEnvironment



        Defaults to FrameioExperimentalEnvironment.DEFAULT



    api_version : typing.Optional[typing.Literal["experimental"]]
    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from frameio_experimental import FrameioExperimental

    client = FrameioExperimental(
        api_version="YOUR_API_VERSION",
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FrameioExperimentalEnvironment = FrameioExperimentalEnvironment.DEFAULT,
        api_version: typing.Optional[typing.Literal["experimental"]] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_version=api_version,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._custom_actions: typing.Optional[CustomActionsClient] = None
        self._accounts: typing.Optional[AccountsClient] = None
        self._files: typing.Optional[FilesClient] = None
        self._metadata: typing.Optional[MetadataClient] = None
        self._folders: typing.Optional[FoldersClient] = None
        self._version_stacks: typing.Optional[VersionStacksClient] = None
        self._metadata_fields: typing.Optional[MetadataFieldsClient] = None
        self._collections: typing.Optional[CollectionsClient] = None

    @property
    def custom_actions(self):
        if self._custom_actions is None:
            from .custom_actions.client import CustomActionsClient  # noqa: E402

            self._custom_actions = CustomActionsClient(client_wrapper=self._client_wrapper)
        return self._custom_actions

    @property
    def accounts(self):
        if self._accounts is None:
            from .accounts.client import AccountsClient  # noqa: E402

            self._accounts = AccountsClient(client_wrapper=self._client_wrapper)
        return self._accounts

    @property
    def files(self):
        if self._files is None:
            from .files.client import FilesClient  # noqa: E402

            self._files = FilesClient(client_wrapper=self._client_wrapper)
        return self._files

    @property
    def metadata(self):
        if self._metadata is None:
            from .metadata.client import MetadataClient  # noqa: E402

            self._metadata = MetadataClient(client_wrapper=self._client_wrapper)
        return self._metadata

    @property
    def folders(self):
        if self._folders is None:
            from .folders.client import FoldersClient  # noqa: E402

            self._folders = FoldersClient(client_wrapper=self._client_wrapper)
        return self._folders

    @property
    def version_stacks(self):
        if self._version_stacks is None:
            from .version_stacks.client import VersionStacksClient  # noqa: E402

            self._version_stacks = VersionStacksClient(client_wrapper=self._client_wrapper)
        return self._version_stacks

    @property
    def metadata_fields(self):
        if self._metadata_fields is None:
            from .metadata_fields.client import MetadataFieldsClient  # noqa: E402

            self._metadata_fields = MetadataFieldsClient(client_wrapper=self._client_wrapper)
        return self._metadata_fields

    @property
    def collections(self):
        if self._collections is None:
            from .collections.client import CollectionsClient  # noqa: E402

            self._collections = CollectionsClient(client_wrapper=self._client_wrapper)
        return self._collections


class AsyncFrameioExperimental:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FrameioExperimentalEnvironment
        The environment to use for requests from the client. from .environment import FrameioExperimentalEnvironment



        Defaults to FrameioExperimentalEnvironment.DEFAULT



    api_version : typing.Optional[typing.Literal["experimental"]]
    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from frameio_experimental import AsyncFrameioExperimental

    client = AsyncFrameioExperimental(
        api_version="YOUR_API_VERSION",
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FrameioExperimentalEnvironment = FrameioExperimentalEnvironment.DEFAULT,
        api_version: typing.Optional[typing.Literal["experimental"]] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_version=api_version,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._custom_actions: typing.Optional[AsyncCustomActionsClient] = None
        self._accounts: typing.Optional[AsyncAccountsClient] = None
        self._files: typing.Optional[AsyncFilesClient] = None
        self._metadata: typing.Optional[AsyncMetadataClient] = None
        self._folders: typing.Optional[AsyncFoldersClient] = None
        self._version_stacks: typing.Optional[AsyncVersionStacksClient] = None
        self._metadata_fields: typing.Optional[AsyncMetadataFieldsClient] = None
        self._collections: typing.Optional[AsyncCollectionsClient] = None

    @property
    def custom_actions(self):
        if self._custom_actions is None:
            from .custom_actions.client import AsyncCustomActionsClient  # noqa: E402

            self._custom_actions = AsyncCustomActionsClient(client_wrapper=self._client_wrapper)
        return self._custom_actions

    @property
    def accounts(self):
        if self._accounts is None:
            from .accounts.client import AsyncAccountsClient  # noqa: E402

            self._accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        return self._accounts

    @property
    def files(self):
        if self._files is None:
            from .files.client import AsyncFilesClient  # noqa: E402

            self._files = AsyncFilesClient(client_wrapper=self._client_wrapper)
        return self._files

    @property
    def metadata(self):
        if self._metadata is None:
            from .metadata.client import AsyncMetadataClient  # noqa: E402

            self._metadata = AsyncMetadataClient(client_wrapper=self._client_wrapper)
        return self._metadata

    @property
    def folders(self):
        if self._folders is None:
            from .folders.client import AsyncFoldersClient  # noqa: E402

            self._folders = AsyncFoldersClient(client_wrapper=self._client_wrapper)
        return self._folders

    @property
    def version_stacks(self):
        if self._version_stacks is None:
            from .version_stacks.client import AsyncVersionStacksClient  # noqa: E402

            self._version_stacks = AsyncVersionStacksClient(client_wrapper=self._client_wrapper)
        return self._version_stacks

    @property
    def metadata_fields(self):
        if self._metadata_fields is None:
            from .metadata_fields.client import AsyncMetadataFieldsClient  # noqa: E402

            self._metadata_fields = AsyncMetadataFieldsClient(client_wrapper=self._client_wrapper)
        return self._metadata_fields

    @property
    def collections(self):
        if self._collections is None:
            from .collections.client import AsyncCollectionsClient  # noqa: E402

            self._collections = AsyncCollectionsClient(client_wrapper=self._client_wrapper)
        return self._collections


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: FrameioExperimentalEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
