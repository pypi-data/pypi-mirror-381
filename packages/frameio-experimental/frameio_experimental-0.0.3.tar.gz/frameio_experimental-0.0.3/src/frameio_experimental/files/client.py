# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.file_copy_response import FileCopyResponse
from ..types.file_remote_upload_response import FileRemoteUploadResponse
from ..types.file_response import FileResponse
from ..types.file_upload_status_response import FileUploadStatusResponse
from ..types.file_with_includes_response import FileWithIncludesResponse
from ..types.file_with_media_links_include import FileWithMediaLinksInclude
from ..types.uuid_ import Uuid
from .raw_client import AsyncRawFilesClient, RawFilesClient
from .types.file_copy_params_data import FileCopyParamsData
from .types.file_create_remote_upload_params_data import FileCreateRemoteUploadParamsData
from .types.file_import_params_data import FileImportParamsData
from .types.file_move_params_data import FileMoveParamsData
from .types.file_update_params_data import FileUpdateParamsData

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFilesClient
        """
        return self._raw_client

    def show(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileWithIncludesResponse:
        """
        Show file details.
        <br><br>
        This endpoint has been added to `Current Version` of the API.
        <br><br>
        Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.show.
        <br><br>
        Use the `include` query parameter to selectively include additional properties in the response.
        <br><br>
        Note: if you include `media_links.original` and the user does not have permission to download the file
        then this endpoint will respond with a `403 Forbidden` error. If the content is inaccessible because
        watermarking is required for this user and isn't supported by the requested media_links, then the request will
        succeed but the unsupported media links will be set to null.
        Similarly, if a requested transcode link does not exist for a particular file (e.g. including
        `media_links.video_h264_180` on a static image file) or transoding process hasn't completed
        (i.e. the file's `status` is "uploaded" rather than "transcoded"), then the link will also be set to null in
        the response payload. In short, the client must handle null media links gracefully.
        <br><br>
        Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileWithIncludesResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.show(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            include="media_links",
        )
        """
        _response = self._raw_client.show(account_id, file_id, include=include, request_options=request_options)
        return _response.data

    def update(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: FileUpdateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update file details.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.update.
              <br><br>
              Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : FileUpdateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.files import FileUpdateParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.update(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FileUpdateParamsData(
                name="asset.png",
            ),
        )
        """
        _response = self._raw_client.update(account_id, file_id, data=data, request_options=request_options)
        return _response.data

    def copy(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: typing.Optional[FileCopyParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileCopyResponse:
        """
        Copy file.
            <br><br>
            This endpoint has been added to `Current Version` of the API.
            <br><br>
            Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.copy.
            <br><br>
            Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : typing.Optional[FileCopyParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileCopyResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.files import FileCopyParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.copy(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FileCopyParamsData(
                parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
            ),
        )
        """
        _response = self._raw_client.copy(account_id, file_id, data=data, request_options=request_options)
        return _response.data

    def move(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: FileMoveParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Move file to a folder or version_stack.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.move.
              <br><br>
              Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : FileMoveParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.files import FileMoveParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.move(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FileMoveParamsData(
                parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
            ),
        )
        """
        _response = self._raw_client.move(account_id, file_id, data=data, request_options=request_options)
        return _response.data

    def show_file_upload_status(
        self, account_id: Uuid, file_id: Uuid, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FileUploadStatusResponse:
        """
        Show file upload status details.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.show_file_upload_status.
              <br><br>
              Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileUploadStatusResponse
            OK

        Examples
        --------
        from frameio_experimental import FrameioExperimental

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.show_file_upload_status(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
        )
        """
        _response = self._raw_client.show_file_upload_status(account_id, file_id, request_options=request_options)
        return _response.data

    def import_file(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FileImportParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Import a file from a storage location configured on the account. <br><br>Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FileImportParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Accepted

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.files import FileImportParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.import_file(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FileImportParamsData(
                key="uploads/08091b0f-a541-42f5-a059-5e8c4afecc12/original.png",
                name="asset.png",
                storage_location="123e4567-e89b-12d3-a456-426614174000",
            ),
        )
        """
        _response = self._raw_client.import_file(account_id, folder_id, data=data, request_options=request_options)
        return _response.data

    def create_remote_upload(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FileCreateRemoteUploadParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileRemoteUploadResponse:
        """
        Create new file under parent folder through remote upload.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.create_remote_upload.
              <br><br>
              Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FileCreateRemoteUploadParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileRemoteUploadResponse
            Accepted

        Examples
        --------
        from frameio_experimental import FrameioExperimental
        from frameio_experimental.files import FileCreateRemoteUploadParamsData

        client = FrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )
        client.files.create_remote_upload(
            account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            data=FileCreateRemoteUploadParamsData(
                name="asset.png",
                source_url="https://upload.wikimedia.org/wikipedia/commons/e/e1/White_Pixel_1x1.png",
            ),
        )
        """
        _response = self._raw_client.create_remote_upload(
            account_id, folder_id, data=data, request_options=request_options
        )
        return _response.data


class AsyncFilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFilesClient
        """
        return self._raw_client

    async def show(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        include: typing.Optional[FileWithMediaLinksInclude] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileWithIncludesResponse:
        """
        Show file details.
        <br><br>
        This endpoint has been added to `Current Version` of the API.
        <br><br>
        Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.show.
        <br><br>
        Use the `include` query parameter to selectively include additional properties in the response.
        <br><br>
        Note: if you include `media_links.original` and the user does not have permission to download the file
        then this endpoint will respond with a `403 Forbidden` error. If the content is inaccessible because
        watermarking is required for this user and isn't supported by the requested media_links, then the request will
        succeed but the unsupported media links will be set to null.
        Similarly, if a requested transcode link does not exist for a particular file (e.g. including
        `media_links.video_h264_180` on a static image file) or transoding process hasn't completed
        (i.e. the file's `status` is "uploaded" rather than "transcoded"), then the link will also be set to null in
        the response payload. In short, the client must handle null media links gracefully.
        <br><br>
        Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        include : typing.Optional[FileWithMediaLinksInclude]


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileWithIncludesResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.show(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                include="media_links",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.show(account_id, file_id, include=include, request_options=request_options)
        return _response.data

    async def update(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: FileUpdateParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update file details.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.update.
              <br><br>
              Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : FileUpdateParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.files import FileUpdateParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.update(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FileUpdateParamsData(
                    name="asset.png",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(account_id, file_id, data=data, request_options=request_options)
        return _response.data

    async def copy(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: typing.Optional[FileCopyParamsData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileCopyResponse:
        """
        Copy file.
            <br><br>
            This endpoint has been added to `Current Version` of the API.
            <br><br>
            Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.copy.
            <br><br>
            Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : typing.Optional[FileCopyParamsData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileCopyResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.files import FileCopyParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.copy(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FileCopyParamsData(
                    parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.copy(account_id, file_id, data=data, request_options=request_options)
        return _response.data

    async def move(
        self,
        account_id: Uuid,
        file_id: Uuid,
        *,
        data: FileMoveParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Move file to a folder or version_stack.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.move.
              <br><br>
              Rate Limits: 100 calls per 1.00 minute(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        data : FileMoveParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.files import FileMoveParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.move(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FileMoveParamsData(
                    parent_id="2e426fe0-f965-4594-8b2b-b4dff1dc00ec",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.move(account_id, file_id, data=data, request_options=request_options)
        return _response.data

    async def show_file_upload_status(
        self, account_id: Uuid, file_id: Uuid, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FileUploadStatusResponse:
        """
        Show file upload status details.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.show_file_upload_status.
              <br><br>
              Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        file_id : Uuid


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileUploadStatusResponse
            OK

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.show_file_upload_status(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                file_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.show_file_upload_status(account_id, file_id, request_options=request_options)
        return _response.data

    async def import_file(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FileImportParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Import a file from a storage location configured on the account. <br><br>Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FileImportParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Accepted

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.files import FileImportParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.import_file(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FileImportParamsData(
                    key="uploads/08091b0f-a541-42f5-a059-5e8c4afecc12/original.png",
                    name="asset.png",
                    storage_location="123e4567-e89b-12d3-a456-426614174000",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.import_file(
            account_id, folder_id, data=data, request_options=request_options
        )
        return _response.data

    async def create_remote_upload(
        self,
        account_id: Uuid,
        folder_id: Uuid,
        *,
        data: FileCreateRemoteUploadParamsData,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileRemoteUploadResponse:
        """
        Create new file under parent folder through remote upload.
              <br><br>
              This endpoint has been added to `Current Version` of the API.
              <br><br>
              Please see https://developer.adobe.com/frameio/api/current/#tag/Files/operation/files.create_remote_upload.
              <br><br>
              Rate Limits: 5 calls per 1 second(s) per account

        Parameters
        ----------
        account_id : Uuid


        folder_id : Uuid


        data : FileCreateRemoteUploadParamsData

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileRemoteUploadResponse
            Accepted

        Examples
        --------
        import asyncio

        from frameio_experimental import AsyncFrameioExperimental
        from frameio_experimental.files import FileCreateRemoteUploadParamsData

        client = AsyncFrameioExperimental(
            api_version="YOUR_API_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.create_remote_upload(
                account_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                folder_id="b2702c44-c6da-4bb6-8bbd-be6e547ccf1b",
                data=FileCreateRemoteUploadParamsData(
                    name="asset.png",
                    source_url="https://upload.wikimedia.org/wikipedia/commons/e/e1/White_Pixel_1x1.png",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_remote_upload(
            account_id, folder_id, data=data, request_options=request_options
        )
        return _response.data
