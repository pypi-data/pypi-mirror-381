from typing import overload


class Vertex:
    def __init__(self, id: int, ready_time: float, due_time: float, service_time: float, demand: float, cost: float) -> None: ...

class Edge:
    def __init__(self, cost: float, time: float) -> None: ...

class Graph:
    def set_edge(self, source: int, target: int, edge: Edge) -> bool: ...

    def set_vertex(self, vertex: Vertex) -> bool: ...

    def get_edge(self, source: int, target: int) -> Edge: ...

    def get_vertex(self, vertex_id: int) -> Vertex: ...

class Context:
    @overload
    def __init__(self, vertices_num: int) -> None: ...

    @overload
    def __init__(self, vertices_num: int, source: int, target: int, capacity: float) -> None: ...

    @property
    def graph(self) -> Graph: ...

    @property
    def capacity(self) -> float: ...

    @capacity.setter
    def capacity(self, arg: float, /) -> None: ...

    @property
    def cost_threshold(self) -> float: ...

    @cost_threshold.setter
    def cost_threshold(self, arg: float, /) -> None: ...

    @property
    def max_paths(self) -> int: ...

    @max_paths.setter
    def max_paths(self, arg: int, /) -> None: ...

class Result:
    @property
    def cost(self) -> float: ...

    @property
    def path(self) -> list[int]: ...

class LabelingParams:
    def __init__(self, ng_neighbor_size: int, exact_bounding: bool, bounding_t_delta: float) -> None: ...

class PulsingParams:
    def __init__(self, exact_bounding: bool, bounding_t_delta: float) -> None: ...

def labeling(context: Context, params: LabelingParams) -> list[Result]: ...

def pulsing(context: Context, params: PulsingParams) -> list[Result]: ...
