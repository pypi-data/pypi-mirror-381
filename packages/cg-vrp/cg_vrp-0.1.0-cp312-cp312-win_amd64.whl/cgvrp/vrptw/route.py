from cgvrp.vrptw.problem import vertex_id

from enum import Enum
from typing import List

class RouteSource(str, Enum):
    """
    Enumeration to identify the origin of a route.

    This helps track whether a route was generated by an initial heuristic
    (like artificial variables or Clarke-Wright) or by the pricing subproblem.
    """

    ARTIFICIAL = "Artificial"
    CW_SAVINGS = "CW_Savings"
    PRICER = "Pricer"
    

class Route:
    """
    Represents a single vehicle route.

    Contains the sequence of visited vertices (path), the total cost of the route,
    and its origin (source).
    """

    def __init__(self,
                 source: RouteSource,
                 cost: float,
                 path: List[vertex_id], 
                 ) -> None:
        self.source = source
        self.cost = cost
        self.path = path
        self.visit_count: dict[vertex_id, int] = {}
        for u in self.path:
            self.visit_count[u] = self.visit_count.get(u, 0) + 1
    
    def __str__(self) -> str:
        path_str = " -> ".join(map(str, self.path))
        return f"Route: [Path: {path_str}], [Distance Cost: {self.cost:.2f}]"
