init_files = {'lin_01_inite.sh': 'curl -LsSf https://astral.sh/uv/install.sh | sh\r\nuv init \r\nuv add fetchx\r\nuv lock --upgrade\r\nuv run python -c "import fetchx.init"\r\n', 'lin_02_jupyter.sh': 'echo "##################################################"\r\necho "####  The very first start may take a minute  ####"\r\necho "####  To use Jupyter please open web browser  ####"\r\necho "####          http://localhost:8888/          ####"\r\necho "##################################################"\r\nuv add jupyter\r\nuv run --with jupyter jupyter lab', 'lin_03_main.sh': 'uv run main.py', 'lin_04_shell.sh': 'uv run python', 'lin_05_clean.sh': 'uv cache clean\r\nuv cache prune', 'tutorial_01.ipynb': '{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "aa3f7ce3-88e7-4968-910c-eb36535ebf58",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# first we need to import the library\\n",\n    "import fetchx as fx\\n",\n    "# second lets import \\"fetch\\", \\"fetch_setup\\", \\"translate_fetch\\", \\"null\\" and \\"call\\" functions\\n",\n    "from fetchx import *\\n",\n    "\\n",\n    "print(f\'fetchx was successfully imported. Functions \\"fetch\\", \\"call\\", \\"afetch\\" and \\"acall\\" can be used now.\')\\n",\n    "print(f\'Let\\\\\'s see the default setup:\')\\n",\n    "\\n",\n    "# get a link to the fetch setup object\\n",\n    "setup = fetch_setup()\\n",\n    "print(setup)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "a5fc0458-f6cb-45af-9a7f-90bbde3a6485",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets modify fetch behavior\\n",\n    "# we will set recommended minimal timeout to 10 seconds which should be enough\\n",\n    "setup[\\"timeout\\"] = 10\\n",\n    "# in case of http errors please do not throw errors and try to handle it\\n",\n    "setup[\\"fail_strategy\\"] = \\"try_to_compensate\\"\\n",\n    "# set verbose_level to max. We want the fetch/call to explain everything what it is doing\\n",\n    "setup[\\"verbose_level\\"] = 3 if __debug__ else 0\\n",\n    "# and add a new default http header which will be sent with every request\\n",\n    "setup[\\"headers\\"].update({\\"X-My-Custom-Header\\": \\"value\\"})\\n",\n    "# lets check if default fetch setup was modified properly\\n",\n    "print(fetch_setup())"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "492fa2ee-27fb-4b80-babd-cb6a2b3689c2",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# Try to download html from the example.com server\\n",\n    "response = fetch(\\"http://example.com\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "c6b9415b-3f2a-4a46-b1ac-9732df90f35b",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# print html text\\n",\n    "print(response.text)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "8f600b29-89bf-48de-8ebd-da068b003b47",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# Lets try to reach some non existing web page\\n",\n    "# Since verbose level is set to max, we can take a look under the hood\\n",\n    "# to see what the fetch function is doing\\n",\n    "response = fetch(\\"http://www.somenonexistingwebpage.net\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "f7c04031-6012-438c-938c-87de0b369eeb",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# Because setup[\\"raise_exception_on_error\\"] is set to False no error was triggered\\n",\n    "# even if the web page does not exist and there must have been a network error\\n",\n    "# We can inspect the response in a greater detail\\n",\n    "print(f\'response.http_status_code = {response.status_code}\')\\n",\n    "print(f\'response.content_type = {response.content_type}\')\\n",\n    "print(f\'response.data_type = \\"{response.data_type}\\"\')\\n",\n    "print(f\'response.content = {response.content}\')"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "ceb47b46-5d46-44b4-87d0-d8e54555390c",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets create a local copy of the setup\\n",\n    "custom_setup = fetch_setup(duplicate=True)\\n",\n    "# this time if there is an http error we want the script to fail fast \\n",\n    "custom_setup[\\"fail_strategy\\"] = \\"fail_fast\\"\\n",\n    "# since we have updated local copy of the setup we have to pass\\n",\n    "# it to the fetch function using \\"setup=\\" parameter\\n",\n    "response = fetch(\\"http://www.somenonexistingwebpage.net\\", setup=custom_setup)\\n",\n    "# this will trigger an error"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "3b4b3915-1801-418c-9e52-8043e7efe5fb",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets download svg file from wikipedia\\n",\n    "response = fetch(\\"https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "4cf237dd-8818-4dee-b3f8-c4ddc86e01dd",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can display a content\\n",\n    "# content object is always accessible\\n",\n    "response.content"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "638c7643-c50b-4742-a4ac-11ca6107751a",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can display a text since response is a valid text\\n",\n    "response.text"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "464b5615-357b-4287-84d2-4b9fb6ff3e3f",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# unfortunately we cannot play with a binary stream, since the returned data are not binary\\n",\n    "response.binary\\n",\n    "# this will trigger an error"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "afcaf63e-66bf-4acc-a41a-7da28b0732da",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we cannot play with json either, because the response is not a dict or list\\n",\n    "response.json\\n",\n    "# this will trigger an error"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "91edf6db-96a4-4a37-a735-9739a468ce32",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can save response as a text\\n",\n    "response.save_text(\\"./google.svg\\")\\n",\n    "# take a look into the folder. You should see them there in a few seconds"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "2d8ad7f8-6f38-46d2-b933-775466aded72",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# but we cannot save its binary representation since the returned data are not binary or as a json\\n",\n    "response.save_binary(\\"./google.svg.bin\\")\\n",\n    "response.save_json(\\"./google.svg.json\\")\\n",\n    "# this will trigger an error"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "59a7ec4a-fea6-4cfe-a30d-5981fd0b4ba5",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "setup = fetch_setup()\\n",\n    "setup[\\"verbose_level\\"] = 1\\n",\n    "# lets download some binary data\\n",\n    "response = fetch(\\"https://upload.wikimedia.org/wikipedia/commons/b/b9/First-google-logo.gif\\")"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "4b62c171-b0c3-40b7-b52f-88a31ecd7c9e",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# now we can play with a binary stram\\n",\n    "response.binary"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "ee3a9db0-10ec-499d-a301-b21ee0c0cc05",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# and we can as well save binary data to google.gif\\n",\n    "response.save_binary(\\"./google.gif\\")\\n",\n    "# take a look into the folder. You should see the google.gif there in a few seconds"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "c7263edf-dda5-4a07-b76e-85ede1c985eb",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Python 3 (ipykernel)",\n   "language": "python",\n   "name": "python3"\n  },\n  "language_info": {\n   "codemirror_mode": {\n    "name": "ipython",\n    "version": 3\n   },\n   "file_extension": ".py",\n   "mimetype": "text/x-python",\n   "name": "python",\n   "nbconvert_exporter": "python",\n   "pygments_lexer": "ipython3",\n   "version": "3.13.7"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}\n', 'tutorial_02.ipynb': '{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "aa3f7ce3-88e7-4968-910c-eb36535ebf58",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# first we need to import the library\\n",\n    "from fetchx import *"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "b967be5c-4182-42f7-8ab4-44d4c48da338",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# get link to the fetch setup object and print the setup\\n",\n    "setup = fetch_setup()\\n",\n    "print(setup)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "a5fc0458-f6cb-45af-9a7f-90bbde3a6485",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets modify fetch behavior\\n",\n    "# we will set recommended minimal timeout to 10 seconds which should be enough\\n",\n    "setup[\\"timeout\\"] = 10\\n",\n    "# set verbose_level to max. We want the fetch/call to explain everything what it is doing\\n",\n    "setup[\\"verbose_level\\"] = 1\\n",\n    "# lets check if default fetch setup was modified properly\\n",\n    "print(fetch_setup())"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "cdb93a92-f75d-4a94-9695-e18866fb838e",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "response = fetch(\\"https://api.restful-api.dev/objects\\", {\\n",\n    "  \\"headers\\": {\\n",\n    "    \\"accept\\": \\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\\",\\n",\n    "    \\"cache-control\\": \\"no-cache\\",\\n",\n    "    \\"pragma\\": \\"no-cache\\",\\n",\n    "    \\"priority\\": \\"u=0, i\\",\\n",\n    "    \\"sec-fetch-user\\": \\"?1\\",\\n",\n    "    \\"upgrade-insecure-requests\\": \\"1\\"\\n",\n    "  },\\n",\n    "  \\"body\\": null,\\n",\n    "  \\"method\\": \\"GET\\",\\n",\n    "  \\"mode\\": \\"cors\\",\\n",\n    "  \\"credentials\\": \\"omit\\"\\n",\n    "})"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "685f9b3f-569f-41d1-8b1d-6ff420bc8730",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# lets print out the very first object\\n",\n    "print(f\'content-type: {response.data_type}\')\\n",\n    "print(f\'data-type: {response.content_type}\')\\n",\n    "print(response.json[0])"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "a4490d1e-5d54-4448-9b34-1183bf62fbee",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can parse json into the json object\\n",\n    "json_object = response.json.parse()\\n",\n    "print(json_object[0].name)\\n",\n    "print(json_object[0].data.color)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "282f8190-6ca8-44e0-ad20-e25b929700bf",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# we can translate fetch to the call method which is more intuitive and uses more pythonic approach\\n",\n    "t = translate_fetch(\\"https://api.restful-api.dev/objects\\", {\\n",\n    "  \\"headers\\": {\\n",\n    "    \\"accept\\": \\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\\",\\n",\n    "    \\"cache-control\\": \\"no-cache\\",\\n",\n    "    \\"pragma\\": \\"no-cache\\",\\n",\n    "    \\"priority\\": \\"u=0, i\\",\\n",\n    "    \\"sec-fetch-user\\": \\"?1\\",\\n",\n    "    \\"upgrade-insecure-requests\\": \\"1\\"\\n",\n    "  },\\n",\n    "  \\"body\\": null,\\n",\n    "  \\"method\\": \\"GET\\",\\n",\n    "  \\"mode\\": \\"cors\\",\\n",\n    "  \\"credentials\\": \\"omit\\"\\n",\n    "})\\n",\n    "print(t)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "85827971-559f-4f86-a4ca-3edf91a0635b",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# adding new object via POST method\\n",\n    "url = \\"https://api.restful-api.dev/objects\\"\\n",\n    "method = \\"POST\\"\\n",\n    "body = {\\n",\n    "   \\"name\\": \\"Apple MacBook Pro 16\\",\\n",\n    "   \\"data\\": {\\n",\n    "      \\"year\\": 2019,\\n",\n    "      \\"price\\": 1849.99,\\n",\n    "      \\"CPU model\\": \\"Intel Core i9\\",\\n",\n    "      \\"Hard disk size\\": \\"1 TB\\"\\n",\n    "   }\\n",\n    "}\\n",\n    "new_object = call(url, method, body)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "1966fd7b-46f7-4e4d-8dff-96286b5276c7",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# update the object\\n",\n    "url = f\\"https://api.restful-api.dev/objects/{new_object[\'id\']}\\"\\n",\n    "method = \\"PUT\\"\\n",\n    "body = {\\n",\n    "   \\"name\\": \\"Apple MacBook Pro 16\\",\\n",\n    "   \\"data\\": {\\n",\n    "      \\"year\\": 2019,\\n",\n    "      \\"price\\": 2049.99,\\n",\n    "      \\"CPU model\\": \\"Intel Core i9\\",\\n",\n    "      \\"Hard disk size\\": \\"1 TB\\",\\n",\n    "      \\"color\\": \\"silver\\"\\n",\n    "   }\\n",\n    "}\\n",\n    "new_object = call(url, method, body)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "5b923798-4a28-498f-8d9f-6a5681c39b61",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# update object using PATCH\\n",\n    "url = f\\"https://api.restful-api.dev/objects/{new_object[\'id\']}\\"\\n",\n    "method = \\"PATCH\\"\\n",\n    "body = {\\n",\n    "   \\"name\\": \\"Apple MacBook Pro 16 (Updated Name)\\"\\n",\n    "}\\n",\n    "response = call(url, method, body)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "6faf6e43-12a1-4076-a2a2-62d3cfb036fc",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# delete object\\n",\n    "url = f\\"https://api.restful-api.dev/objects/{new_object[\'id\']}\\"\\n",\n    "method = \\"DELETE\\"\\n",\n    "response = call(url, method)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "fc94e9df-f3bb-4c7c-b206-1934e16ae7eb",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "import asyncio\\n",\n    "from fetchx import *\\n",\n    "\\n",\n    "# create download tasks\\n",\n    "tasks = []\\n",\n    "for i in range(0, 10):\\n",\n    "    custom_setup = fetch_setup(duplicate=True)\\n",\n    "    custom_setup[\\"verbose_level\\"] = 2\\n",\n    "    custom_setup[\\"thread\\"] = i\\n",\n    "    tasks.append(\\n",\n    "        afetch(\\n",\n    "            \\"https://upload.wikimedia.org/wikipedia/commons/b/b9/First-google-logo.gif\\",\\n",\n    "            setup=custom_setup\\n",\n    "        )\\n",\n    "    )\\n",\n    "\\n",\n    "# run download tasks in parallel\\n",\n    "await asyncio.gather(*tasks)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "83193872-d873-4a44-9f78-9598f56cf977",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Python 3 (ipykernel)",\n   "language": "python",\n   "name": "python3"\n  },\n  "language_info": {\n   "codemirror_mode": {\n    "name": "ipython",\n    "version": 3\n   },\n   "file_extension": ".py",\n   "mimetype": "text/x-python",\n   "name": "python",\n   "nbconvert_exporter": "python",\n   "pygments_lexer": "ipython3",\n   "version": "3.13.7"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}\n', 'win_01_init.bat': 'powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex" && set Path=C:\\Users\\User\\.local\\bin;%Path% && uv init && uv add fetchx && uv run python -c "import fetchx.init"\r\npause', 'win_02_jupyter.bat': '@echo off\r\nECHO ##################################################\r\nECHO ####  The very first start may take a minute  ####\r\nECHO ####  To use Jupyter please open web browser  ####\r\nECHO ####          http://localhost:8888/          ####\r\nECHO ##################################################\r\nIF NOT EXIST init.json (\r\n    ECHO {"jupyter": true} > init.json\r\n    ECHO.\r\n    ECHO Jupyter initialization will start in a few seconds\r\n    ECHO.\r\n    timeout 9\r\n)\r\nuv add jupyter\r\nrem uv add jupyter_contrib_nbextensions\r\nrem uv add jupyter-autocomplete\r\nuv run --with jupyter jupyter lab\r\npause', 'win_03_main.bat': '@echo off\r\nuv run main.py\r\npause', 'win_04_shell.bat': '@echo off\r\nECHO ##################################################\r\nECHO ####         Type following commands:         ####\r\nECHO ##################################################\r\nECHO.\r\nECHO from uurest import *\r\nECHO print(fetch_setup())\r\nECHO fetch("http://www.somenonexistingwebpage.net")\r\nECHO response = fetch("https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg")\r\nECHO fetch_setup()["verbose_level"] = 1\r\nECHO response.save_text("./google_logo.svg")\r\nECHO response = fetch(\'https://fakestoreapi.com/products\')\r\nECHO print(response)\r\nECHO response.json["itemList"][0]\r\nECHO.\r\nuv run python', 'win_05_clean.bat': '@echo off\r\nuv cache clean\r\nuv cache prune\r\ndel pyproject.toml\r\ndel readme.md\r\ndel uv.lock\r\ndel .python-version\r\ndel init.json\r\nrmdir .venv /s /q\r\nrmdir .ipynb_checkpoints /s /q\r\npause'}
