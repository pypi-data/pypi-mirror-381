#####################################################################
# NOTE: THIS FILE IS AUTOGENERATED BY GENERATE_TYPES.PY. DO NOT EDIT!
#####################################################################
from typing import Optional, List
from google.protobuf.timestamp_pb2 import Timestamp
from google.protobuf.duration_pb2 import Duration
# API imports
from ..base import Datatype
from ...dsl.compiler.registry import register_data 


@register_data
class Response(Datatype):
    
    from enum import Enum
    class ResponseStatus(int, Enum):
        '''Responses for RPC functions'''
        OK = 0 
        '''Command received'''
        IN_PROGRESS = 1 
        '''Command in progress'''
        COMPLETED = 2 
        '''Command finished without error'''
        CANCELLED = 3 
        '''The following are gRPC base status codes, more info can be found at: https://grpc.github.io/grpc/core/md_doc_statuscodes.html To translate a gRPC error code to a SteelEagle response code, add 2 to its enum value'''
        UNKNOWN = 4 
        
        INVALID_ARGUMENT = 5 
        
        DEADLINE_EXCEEDED = 6 
        
        NOT_FOUND = 7 
        
        ALREADY_EXISTS = 8 
        
        PERMISSION_DENIED = 9 
        
        RESOURCE_EXHAUSTED = 10 
        
        FAILED_PRECONDITION = 11 
        
        ABORTED = 12 
        
        OUT_OF_RANGE = 13 
        
        UNIMPLEMENTED = 14 
        
        INTERNAL = 15 
        
        UNAVAILABLE = 16 
        
        DATA_LOSS = 17 
        
        UNAUTHENTICATED = 18 
        

    status: ResponseStatus
    

    response_string: Optional[str]
    '''Detailed message on reason for response'''

    timestamp: Timestamp
    

@register_data
class Pose(Datatype):
    '''Angular offsets or poses in 3 dimensions [degrees]'''

    pitch: Optional[float]
    

    roll: Optional[float]
    

    yaw: Optional[float]
    

@register_data
class Velocity(Datatype):
    '''Representation of the speed in 3-dimensions [meters/s]'''

    x_vel: Optional[float]
    '''Forward/north velocity'''

    y_vel: Optional[float]
    '''Right/east velocity'''

    z_vel: Optional[float]
    '''Up velocity'''

    angular_vel: Optional[float]
    '''Angular velocity [degrees/s]'''

@register_data
class Position(Datatype):
    '''Position offset relative to home or current location [meters]'''

    x: Optional[float]
    '''Forward/north offset'''

    y: Optional[float]
    '''Right/east offset'''

    z: Optional[float]
    '''Up offset'''

    angle: Optional[float]
    '''Angular offset [degrees]'''

@register_data
class Location(Datatype):
    '''Location in global coordinates [latitude, longitude]'''

    latitude: Optional[float]
    

    longitude: Optional[float]
    

    altitude: Optional[float]
    '''Above MSL [meters]'''

    heading: Optional[float]
    

