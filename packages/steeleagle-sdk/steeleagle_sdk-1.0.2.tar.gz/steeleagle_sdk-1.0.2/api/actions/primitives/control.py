###############################################################
# NOTE: THIS FILE IS GENERATED BY GENERATE_API.PY. DO NOT EDIT!
###############################################################
from typing import Optional, List
import google.protobuf as protobuf
# API imports
from ...base import Action, Datatype
from ....dsl.compiler.registry import register_action
from ..native import run_unary, run_streaming, payload_from_action
# Protobuf imports
from ....protocol.services import control_service_pb2
from ....protocol.services import control_service_pb2_grpc
# Type imports
from ...datatypes import control as params
from ...datatypes import common as common

# Static stub object to be set at file import time
STUB: control_service_pb2_grpc.ControlStub = None

'''Used for low-level control of a vehicle'''

@register_action
class Connect(Action):
    '''Connects to the vehicle'''

    async def execute(self):
        req = control_service_pb2.ConnectRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.Connect, req, metadata=metadata)

@register_action
class Disconnect(Action):
    '''Disconnects from the vehicle'''

    async def execute(self):
        req = control_service_pb2.DisconnectRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.Disconnect, req, metadata=metadata)

@register_action
class Arm(Action):
    '''Order the vehicle to arm'''

    async def execute(self):
        req = control_service_pb2.ArmRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.Arm, req, metadata=metadata)

@register_action
class Disarm(Action):
    '''Order the vehicle to disarm'''

    async def execute(self):
        req = control_service_pb2.DisarmRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.Disarm, req, metadata=metadata)

@register_action
class Joystick(Action):
    '''Send a joystick velocity target that the vehicle will actuate towards, along with an actuation duration'''
    velocity: common.Velocity
    '''Target velocity to move towards'''
    duration: Optional[protobuf.duration_pb2.Duration]
    '''Time of actuation (defaults to 1s), after which the vehicle will Hold'''

    async def execute(self):
        req = control_service_pb2.JoystickRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.Joystick, req, metadata=metadata)

@register_action
class TakeOff(Action):
    '''Order the vehicle to take off'''
    take_off_altitude: float
    '''Take off height in relative altitude [meters]'''

    async def execute(self):
        req = control_service_pb2.TakeOffRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.TakeOff, req, metadata=metadata)

@register_action
class Land(Action):
    '''Land the vehicle at its current position'''

    async def execute(self):
        req = control_service_pb2.LandRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.Land, req, metadata=metadata)

@register_action
class Hold(Action):
    '''Order the vehicle to hold/loiter'''

    async def execute(self):
        req = control_service_pb2.HoldRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.Hold, req, metadata=metadata)

@register_action
class Kill(Action):
    '''Emergency shutdown of the vehicle motors'''

    async def execute(self):
        req = control_service_pb2.KillRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.Kill, req, metadata=metadata)

@register_action
class SetHome(Action):
    '''Changes the home destination for the vehicle'''
    location: common.Location
    '''New home location'''

    async def execute(self):
        req = control_service_pb2.SetHomeRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.SetHome, req, metadata=metadata)

@register_action
class ReturnToHome(Action):
    '''Return to the vehicle home destination'''

    async def execute(self):
        req = control_service_pb2.ReturnToHomeRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.ReturnToHome, req, metadata=metadata)

@register_action
class SetGlobalPosition(Action):
    '''Transit the vehicle to a target global position, expressed in global coordinates'''
    location: common.Location
    '''Target location'''
    from enum import Enum
    class AltitudeMode(int, Enum):
        
        ABSOLUTE = 0 
        '''Meters above Mean Sea Level'''
        RELATIVE = 1 
        '''Meters above takeoff location'''
    altitude_mode: Optional[AltitudeMode]
    '''Determines whether the drone will consider altitude as meters above MSL (Mean Sea Level), or relative to its takeoff location (default ABSOLUTE)'''
    from enum import Enum
    class HeadingMode(int, Enum):
        
        TO_TARGET = 0 
        '''Orient towards the target location'''
        HEADING_START = 1 
        '''Orient towards the given heading'''
    heading_mode: Optional[HeadingMode]
    '''Determines how the drone will orient during transit (default TO_TARGET)'''
    max_velocity: Optional[common.Velocity]
    '''Maximum velocity during transit, north_vel determines horizontal velocity, up_vel determines vertical velocity, and angular_vel determines angular velocity (default 5 m/s)'''

    async def execute(self):
        req = control_service_pb2.SetGlobalPositionRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.SetGlobalPosition, req, metadata=metadata)

@register_action
class SetRelativePosition(Action):
    '''Transit the vehicle to a target position relative to the global ENU (East, North, Up) or vehicle frame of  reference, in meters'''
    position: common.Position
    '''Target position'''
    max_velocity: Optional[common.Velocity]
    '''Maximum velocity during transit, x_vel determines horizontal velocity, up_vel determines vertical velocity, and angular_vel determines angular velocity'''
    from enum import Enum
    class ReferenceFrame(int, Enum):
        
        BODY = 0 
        '''Vehicle reference frame'''
        ENU = 1 
        '''Global (East, North, Up) reference frame'''
    frame: Optional[ReferenceFrame]
    '''Frame of reference'''

    async def execute(self):
        req = control_service_pb2.SetRelativePositionRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.SetRelativePosition, req, metadata=metadata)

@register_action
class SetVelocity(Action):
    '''Transit the vehicle at a target velocity in the global ENU (East, North, Up) or vehicle frame of reference,  in meters per second'''
    velocity: common.Velocity
    '''Target velocity'''
    from enum import Enum
    class ReferenceFrame(int, Enum):
        
        BODY = 0 
        '''Vehicle reference frame'''
        ENU = 1 
        '''Global (East, North, Up) reference frame'''
    frame: Optional[ReferenceFrame]
    '''Frame of reference'''

    async def execute(self):
        req = control_service_pb2.SetVelocityRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.SetVelocity, req, metadata=metadata)

@register_action
class SetHeading(Action):
    '''Sets the heading of the vehicle'''
    location: common.Location
    '''Target heading or global location to look at'''
    from enum import Enum
    class HeadingMode(int, Enum):
        
        TO_TARGET = 0 
        '''Orient towards the target location'''
        HEADING_START = 1 
        '''Orient towards the given heading'''
    heading_mode: Optional[HeadingMode]
    '''Determines how the drone will orient'''

    async def execute(self):
        req = control_service_pb2.SetHeadingRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.SetHeading, req, metadata=metadata)

@register_action
class SetGimbalPose(Action):
    '''Set the pose of the target gimbal'''
    gimbal_id: int
    '''ID of the target gimbal'''
    pose: common.Pose
    '''Target pose'''
    from enum import Enum
    class PoseMode(int, Enum):
        
        ANGLE = 0 
        '''Absolute angle'''
        OFFSET = 1 
        '''Offset from current'''
        VELOCITY = 2 
        '''Rotational velocities'''
    mode: Optional[PoseMode]
    '''Specifies how to interpret the target pose'''

    async def execute(self):
        req = control_service_pb2.SetGimbalPoseRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_streaming(STUB.SetGimbalPose, req, metadata=metadata)

@register_action
class ConfigureImagingSensorStream(Action):
    '''Set the vehicle video stream parameters'''
    configurations: List[params.ImagingSensorConfiguration]
    '''List of configurations to be updated'''

    async def execute(self):
        req = control_service_pb2.ConfigureImagingSensorStreamRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.ConfigureImagingSensorStream, req, metadata=metadata)

@register_action
class ConfigureTelemetryStream(Action):
    '''Set the vehicle telemetry stream parameters'''
    frequency: int
    '''Target frequency of telemetry generation, in Hz'''

    async def execute(self):
        req = control_service_pb2.ConfigureTelemetryStreamRequest()
        ParseDict(payload_from_action(self), req)
        metadata = [
            ('identity', 'internal')
        ]
        return await run_unary(STUB.ConfigureTelemetryStream, req, metadata=metadata)

