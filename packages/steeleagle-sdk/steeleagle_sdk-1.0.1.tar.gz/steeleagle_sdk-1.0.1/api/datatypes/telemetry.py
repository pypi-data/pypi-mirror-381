#####################################################################
# NOTE: THIS FILE IS AUTOGENERATED BY GENERATE_TYPES.PY. DO NOT EDIT!
#####################################################################
from typing import Optional, List
import google.protobuf as protobuf
# API imports
from ..base import Datatype
from ...dsl.compiler.registry import register_data 

# Type imports
from ..datatypes import common as common
from ..datatypes import duration as duration
from ..datatypes import timestamp as timestamp

@register_data
class TelemetryStreamInfo(Datatype):
    

    current_frequency: int
    '''Current frequency of telemetry messages, in Hz'''

    max_frequency: int
    '''Maximum frequency of telemetry messages, in Hz'''

    uptime: protobuf.Duration
    '''Uptime of the stream'''

@register_data
class BatteryInfo(Datatype):
    

    percentage: int
    '''Battery level [0-100]%'''

@register_data
class GPSInfo(Datatype):
    

    satellites: int
    '''Number of satellites used in GPS fix'''

@register_data
class CommsInfo(Datatype):
    
    pass


@register_data
class VehicleInfo(Datatype):
    

    name: str
    '''The vehicle that this telemetry corresponds to'''

    model: str
    '''Model of the vehicle'''

    manufacturer: str
    '''Manufacturer of the vehicle'''
    from enum import Enum
    class MotionStatus(int, Enum):
        
        MOTORS_OFF = 0 
        
        RAMPING_UP = 1 
        
        IDLE = 2 
        
        IN_TRANSIT = 3 
        
        RAMPING_DOWN = 4 
        

    motion_status: MotionStatus
    '''Current status of the vehicle'''

    battery_info: BatteryInfo
    '''Battery info for the vehicle'''

    gps_info: GPSInfo
    '''GPS sensor info for the vehicle'''

    comms_info: CommsInfo
    '''Communications info for the vehicle'''

@register_data
class SetpointInfo(Datatype):
    

    position_body_sp: common.Position
    '''Default to all zeros local position setpoint'''

    position_enu_sp: common.Position
    

    global_sp: common.Location
    

    velocity_body_sp: common.Velocity
    

    velocity_enu_sp: common.Velocity
    

@register_data
class PositionInfo(Datatype):
    

    home: common.Location
    '''Global position that will be used when returning home'''

    global_position: common.Location
    '''Current global position of the vehicle'''

    relative_position: common.Position
    '''Current local position of the vehicle in the global ENU (East, North, Up) coordinate frame, relative to take off position'''

    velocity_enu: common.Velocity
    '''Current velocity of the vehicle in the global ENU (East, North, Up) coordinate frame'''

    velocity_body: common.Velocity
    '''Current velocity of the vehicle in the body (forward, right, up) coordinate frame'''

    setpoint_info: SetpointInfo
    '''Info on the current vehicle setpoint'''

@register_data
class GimbalStatus(Datatype):
    

    id: int
    '''ID of the gimbal'''

    pose_body: common.Pose
    '''Current pose in the body reference frame'''

    pose_enu: common.Pose
    '''Current pose in the ENU reference frame'''

@register_data
class GimbalInfo(Datatype):
    

    num_gimbals: int
    '''Number of connected gimbals'''

    gimbals: List[GimbalStatus]
    '''List of connected gimbals'''

@register_data
class ImagingSensorStatus(Datatype):
    

    id: int
    '''ID of the imaging sensor'''
    from enum import Enum
    class ImagingSensorType(int, Enum):
        '''Data related to imaging sensors'''
        UNKNOWN_IMAGING_SENSOR_TYPE = 0 
        
        RGB = 1 
        
        STEREO = 2 
        
        THERMAL = 3 
        
        NIGHT = 4 
        
        LIDAR = 5 
        
        RGBD = 6 
        
        TOF = 7 
        
        RADAR = 8 
        

    type: ImagingSensorType
    '''Type of the imaging sensor'''

    active: bool
    '''Indicates whether the imaging sensor is currently streaming'''

    supports_secondary: bool
    '''Indicates whether the imaging sensor supports background streaming'''

    current_fps: int
    '''Current streaming frames per second'''

    max_fps: int
    '''Maximum streaming frames per second'''

    h_res: int
    '''Horizontal resolution'''

    v_res: int
    '''Vertical resolution'''

    channels: int
    '''Number of image channels'''

    h_fov: int
    '''Horizontal FOV'''

    v_fov: int
    '''Vertical FOV'''

    gimbal_mounted: bool
    '''Indicates if imaging sensor is gimbal mounted'''

    gimbal_id: int
    '''Indicates which gimbal the imaging sensor is mounted on'''

@register_data
class ImagingSensorStreamStatus(Datatype):
    

    stream_capacity: int
    '''The total number of allowed simultaneously streaming cameras'''

    num_streams: int
    '''The total number of currently streaming cameras'''

    primary_cam: int
    '''ID of the primary camera'''

    secondary_cams: List[int]
    '''IDs of the secondary active cameras'''

@register_data
class ImagingSensorInfo(Datatype):
    

    stream_status: ImagingSensorStreamStatus
    '''Status of current imaging sensor streams'''

    sensors: List[ImagingSensorStatus]
    '''List of connected imaging sensors'''

@register_data
class AlertInfo(Datatype):
    
    from enum import Enum
    class BatteryWarning(int, Enum):
        
        NONE = 0 
        '''The vehicle is above 30% battery'''
        LOW = 1 
        '''The vehicle is below 30% battery'''
        CRITICAL = 2 
        '''The vehicle is below 15% battery'''

    battery_warning: BatteryWarning
    '''Battery warnings'''
    from enum import Enum
    class GPSWarning(int, Enum):
        
        NO_GPS_WARNING = 0 
        '''GPS readings are nominal and a fix has been achieved'''
        WEAK_SIGNAL = 1 
        '''Weak GPS fix, expect errant global position data'''
        NO_FIX = 2 
        '''No GPS fix'''

    gps_warning: GPSWarning
    '''GPS warnings'''
    from enum import Enum
    class MagnetometerWarning(int, Enum):
        
        NO_MAGNETOMETER_WARNING = 0 
        '''Magnetometer readings are nominal'''
        PERTURBATION = 1 
        '''The vehicle is experiencing magnetic perturbations'''

    magnetometer_warning: MagnetometerWarning
    '''Magnetometer warnings'''
    from enum import Enum
    class ConnectionWarning(int, Enum):
        
        NO_CONNECTION_WARNING = 0 
        '''Connection to remote server is nominal'''
        DISCONNECTED = 1 
        '''Contact has been lost with the remote server'''
        WEAK_CONNECTION = 2 
        '''Connection is experiencing interference or is weak'''

    connection_warning: ConnectionWarning
    '''Connection warnings'''
    from enum import Enum
    class CompassWarning(int, Enum):
        
        NO_COMPASS_WARNING = 0 
        '''Absolute heading is nominal'''
        WEAK_HEADING_LOCK = 1 
        '''Absolute heading is available but may be incorrect'''
        NO_HEADING_LOCK = 2 
        '''No absolute heading available from the vehicle'''

    compass_warning: CompassWarning
    '''Compass warnings'''

@register_data
class DriverTelemetry(Datatype):
    '''Telemetry message for the vehicle, originated from the driver module'''

    timestamp: protobuf.Timestamp
    '''Timestamp of message'''

    telemetry_stream_info: TelemetryStreamInfo
    '''Info about current telemetry stream'''

    vehicle_info: VehicleInfo
    '''The vehicle that this telemetry corresponds to'''

    position_info: PositionInfo
    '''Positional info about the vehicle'''

    gimbal_info: GimbalInfo
    '''Status on attached gimbals and their orientations'''

    imaging_sensor_info: ImagingSensorInfo
    '''Information about the vehicle imaging sensors'''

    alert_info: AlertInfo
    '''Enumeration of vehicle warnings'''

@register_data
class Frame(Datatype):
    '''Imaging sensor frame data streamed from the driver module'''

    timestamp: protobuf.Timestamp
    '''Capture timestamp of the frame'''

    data: bytes
    '''Raw bytes representing the frame'''

    h_res: int
    '''Horizontal frame resolution in pixels'''

    v_res: int
    '''Vertical frame resolution in pixels'''

    d_res: int
    '''Depth resolution in pixels'''

    channels: int
    '''Number of channels'''

    id: int
    '''Frame ID for future correlation'''

@register_data
class MissionInfo(Datatype):
    

    name: str
    '''Mission name'''

    hash: int
    '''Mission hash to establish version uniqueness'''

    age: protobuf.Timestamp
    '''Timestamp of upload'''
    from enum import Enum
    class MissionExecState(int, Enum):
        '''Data related to the current mission'''
        READY = 0 
        '''Mission is ready to be executed'''
        IN_PROGRESS = 1 
        '''Mission is in progress'''
        PAUSED = 2 
        '''Mission is paused'''
        COMPLETED = 3 
        '''Mission has been completed'''
        CANCELED = 4 
        '''Mission was cancelled'''

    exec_state: MissionExecState
    '''Execution state of the mission'''

    task_state: str
    '''Task state of the mission (plaintext), if active'''

@register_data
class MissionTelemetry(Datatype):
    '''Telemetry message for the mission, originated from the mission module'''

    timestamp: protobuf.Timestamp
    '''Timestamp of message'''

    telemetry_stream_info: TelemetryStreamInfo
    '''Info about the current telemetry stream'''

    mission_info: List[MissionInfo]
    '''Info about the current mission states'''

