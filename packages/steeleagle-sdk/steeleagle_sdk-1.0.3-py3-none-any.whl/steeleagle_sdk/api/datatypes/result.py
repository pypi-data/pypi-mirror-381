#####################################################################
# NOTE: THIS FILE IS AUTOGENERATED BY GENERATE_TYPES.PY. DO NOT EDIT!
#####################################################################
from typing import Optional, List
import google.protobuf as protobuf
# API imports
from ..base import Datatype
from ...dsl.compiler.registry import register_data 

# Type imports
from ..datatypes import common as common

@register_data
class BoundingBox(Datatype):
    '''Defines the upper left and lower right corners of a detected object in an image frame. Origin (0,0) is the top left corner of the input image. (image_height, image_width) is the bottom right corner. Also the class and confidence threshold associated with the box.'''

    y_min: float
    '''wrt to image size'''

    x_min: float
    '''wrt to image size'''

    y_max: float
    '''wrt to image size'''

    x_max: float
    '''wrt to image size'''

    class_name: str
    

    confidence: float
    

@register_data
class HSV(Datatype):
    '''Color filter represented by hue, saturation, and value Uses OpenCV ranges: https://docs.opencv.org/4.x/df/d9d/tutorial_py_colorspaces.html'''

    h: int
    '''hue range is [0,179]'''

    s: int
    '''saturation range is [0,255]'''

    v: int
    '''value range is [0,255]'''

@register_data
class Detection(Datatype):
    

    detection_id: int
    '''Can be multiple objects per frame'''

    class_name: str
    

    score: float
    

    bbox: BoundingBox
    

    hsv_filter_passed: bool
    

@register_data
class DetectionResult(Datatype):
    

    detections: List[Detection]
    

@register_data
class AvoidanceResult(Datatype):
    

    actuation_vector: float
    '''Actuation vector towards safe area'''

@register_data
class SLAMResult(Datatype):
    

    relative_position: common.Position
    

    global_position: common.Location
    

@register_data
class ComputeResult(Datatype):
    

    timestamp: protobuf.timestamp_pb2.Timestamp
    '''Inference timestamp'''

    engine_name: str
    

    detection_result: DetectionResult
    

    avoidance_result: AvoidanceResult
    

    slam_result: SLAMResult
    

    generic_result: str
    '''JSON result'''

@register_data
class FrameResult(Datatype):
    '''Compute results generated by datasink modules'''

    type: str
    

    frame_id: int
    '''For correlation'''

    result: List[ComputeResult]
    

