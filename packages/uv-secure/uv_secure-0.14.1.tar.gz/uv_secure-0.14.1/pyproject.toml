[project]
name = "uv-secure"
version = "0.14.1"
description = "Scan your uv.lock file for dependencies with known vulnerabilities"
readme = "README.md"
authors = [
    { name = "Owen Lamont", email = "owenrlamont@gmail.com" }
]
requires-python = ">=3.10"
keywords = [
  "uv", "uv.lock", "vulnerabilities"
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Libraries",
]

dependencies = [
    "anyio>=4.7.0",
    "asyncer>=0.0.8",
    "hishel>=0.1.1",
    "httpx>=0.28.1",
    "humanize>=4.11.0",
    "inflect>=7.4.0",
    "packaging>=25.0",
    "pydantic[email]>=2.10.3",
    "rich>=13.9.4",
    "stamina>=25.1.0",
    "tomli; python_version < '3.11'",
    "typer>=0.15.1",
]

[project.optional-dependencies]
faster-async = [
    "winloop>=0.1.8; sys_platform == 'win32'",
    "uvloop>=0.21.0; sys_platform != 'win32'"
]

[project.scripts]
uv-secure = "uv_secure.run:app"

[project.urls]
Repository = "https://github.com/owenlamont/uv-secure"
Releases = "https://github.com/owenlamont/uv-secure/releases"

[build-system]
requires = ["uv_build>=0.7.19,<0.8.0"]
build-backend = "uv_build"

[tool.coverage.paths]
source = [
  "src",
  "/Users/runner/work/uv-secure/uv-secure/src",
  "/home/runner/work/uv-secure/uv-secure/src",
  "C:/a/uv-secure/uv-secure/src",
  "D:/a/uv-secure/uv-secure/src"
]
tests = [
  "tests",
  "/Users/runner/work/uv-secure/uv-secure/tests",
  "/home/runner/work/uv-secure/uv-secure/tests",
  "C:/a/uv-secure/uv-secure/tests",
  "D:/a/uv-secure/uv-secure/tests"
]

[tool.hatch.version]
path = "src/uv_secure/__version__.py"

[tool.mypy]
plugins = [
  "pydantic.mypy"
]

files = ["src", "tests"]

ignore_missing_imports = false
follow_imports = "silent"

check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
filterwarnings = [
    "error",
]
testpaths = ["tests"]

[tool.ruff]

line-length = 88
indent-width = 4

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true
line-ending = "lf"

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
select = [
    "A",
    "ASYNC",
    "B",
    "C4",
    "D",
    "E",
    "ERA",
    "F",
    "FURB",
    "I",
    "ISC",
    "N",
    "PERF",
    "PT",
    "PTH",
    "Q",
    "S",
    "RET",
    "RUF",
    "SIM",
    "TID",
    "UP"
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D202", # No blank lines allowed after function docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D214", # Section is over-indented
    "D215", # Section underline is over-indented
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    "D415", # First line should end with a period, question mark, or exclamation
    "D416", # Section name should end with a colon
    "D417", # Missing argument descriptions in the docstring
    "D418", # Function/ Method decorated with @overload shouldn't contain a docstring
    "E203", # Whitespace before ':' (fights ruff format)
    "ISC001", # Implicitly concatenated string literals on one line
]

[tool.ruff.lint.per-file-ignores]
"tests/uv_secure/package_info/test_dependency_file_parser.py" = ["E501"]
"tests/**" = ["D102", "D103", "S101"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "B905", # Enforce strict argument on zip - but don't autofix as strict=False
]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
case-sensitive = false
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
order-by-type = false
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]
split-on-trailing-comma=false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.rumdl]
line-length = 88
disable = []
exclude = []
respect-gitignore = true

[tool.rumdl.MD004]
style = "dash"

[tool.rumdl.MD013]
line_length = 88
code_blocks = false
tables = true
headings = true
strict = false
stern = false

[tool.rumdl.MD029]
style = "ordered"

[tool.rumdl.MD035]
style = "---"

[tool.typos]

[tool.uv-secure.vulnerability_criteria]
aliases = true
desc = true
check_direct_dependencies_only = true

[tool.uv-secure.maintainability_criteria]
max_package_age = "P730D"
forbid_yanked = true
forbid_archived = true
forbid_deprecated = true
forbid_quarantined = true
check_direct_dependencies_only = true

[dependency-groups]
dev = [
    "coverage>=7.6.9",
    "freezegun>=1.5.1",
    "mypy>=1.17.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "pytest-httpx>=0.35.0",
    "pytest-mock>=3.14.0",
]
