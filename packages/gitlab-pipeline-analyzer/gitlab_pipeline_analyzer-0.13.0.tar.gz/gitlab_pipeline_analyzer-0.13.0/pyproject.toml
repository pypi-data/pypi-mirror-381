[project]
name = "gitlab-pipeline-analyzer"
version = "0.13.0"
description = "FastMCP server for analyzing GitLab CI/CD pipeline failures"
authors = [{ name = "Siarhei Skuratovich", email = "sOraCool@gmail.com" }]
license = "MIT"
readme = "README.md"
keywords = ["gitlab", "ci/cd", "pipeline", "analysis", "mcp", "fastmcp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
]
dependencies = [
    "fastmcp>=2.11.1",
    "python-gitlab>=6.2.0",
    "httpx>=0.28.1",
    "pydantic>=2.11.7",
    "typing-extensions>=4.14.1",
    "aiosqlite>=0.20.0",
]
requires-python = ">=3.10"

[project.scripts]
gitlab-analyzer = "gitlab_analyzer.mcp.servers.server:main"
gitlab-analyzer-http = "gitlab_analyzer.mcp.servers.http_server:main"
gitlab-analyzer-sse = "gitlab_analyzer.mcp.servers.sse_server:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.7",
    "mypy>=1.17.1",
    "tox>=4.28.4",
    "bandit[toml]>=1.8.6",
    "pre-commit>=4.2.0",
    "build>=1.3.0",
    "twine>=6.1.0",
    "types-requests>=2.32.4.20250611",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autobuild>=2021.3.14",
    "sphinxcontrib-mermaid>=0.9.2",
]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = { find = { where = ["src"] } }
package-dir = { "" = "src" }

# Ruff configuration
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10 for compatibility
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "E4",  # pycodestyle errors
    "E7",  # pycodestyle errors
    "E9",  # pycodestyle errors
    "F",   # Pyflakes
    "W",   # pycodestyle warnings
    "B",   # flake8-bugbear
    "I",   # isort
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]

ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise-without-from-inside-except
    "UP017", # Use datetime.UTC alias (not available in Python 3.10)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Allow unused imports in __init__.py files

[tool.ruff.lint.isort]
known-first-party = ["gitlab_analyzer"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
# Make less strict initially
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "fastmcp"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fastmcp.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydantic.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "httpx"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "httpx.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "gitlab"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "gitlab.*"
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "test_*.py", "*_test.py"]
skips = [
    "B101",
    "B113",
    "B608", # Skip SQL injection warnings for trusted table names (already marked with # nosec B608)
] # Skip assert_used test, request_without_timeout (we have timeouts), and hardcoded_sql_expressions

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=gitlab_analyzer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=65",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def main\\(\\):",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "bandit[toml]>=1.8.6",
    "build>=1.3.0",
    "mypy>=1.17.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.7",
    "tox>=4.28.4",
    "twine>=6.1.0",
    "types-requests>=2.32.4.20250611",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autobuild>=2021.3.14",
    "sphinxcontrib-mermaid>=0.9.2",
]
