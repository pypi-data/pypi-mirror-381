# Modern Python packaging configuration for nostr-tools
# This file defines build system, project metadata, and development dependencies

[build-system]
# Build backend configuration - uses setuptools with dynamic versioning
# Constrain setuptools to avoid Metadata-Version 2.4 compatibility issues with older twine
requires = ["setuptools>=68.0,<75.0", "wheel", "setuptools-scm>=7.0"]
build-backend = "setuptools.build_meta"

[project]
name = "nostr-tools"
# Version is dynamically determined from git tags using setuptools-scm
dynamic = ["version"]
description = "A comprehensive Python library for Nostr protocol interactions"
readme = "README.md"
# Support Python 3.9+ for broader compatibility while maintaining modern features
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Bigbrotr", email = "hello@bigbrotr.com"}
]
maintainers = [
    {name = "Bigbrotr", email = "hello@bigbrotr.com"}
]

# Keywords for PyPI discoverability - focus on main use cases and technologies
keywords = [
    "nostr",
    "decentralized",
    "social",
    "protocol",
    "websocket",
    "cryptography",
    "bitcoin",
    "schnorr",
    "secp256k1",
    "relay",
    "lightning-network"
]

# PyPI classifiers for proper categorization and filtering
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Communications",
    "Topic :: Security :: Cryptography",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]

# Core runtime dependencies - minimal set required for basic functionality
dependencies = [
    # Cryptographic operations - secp256k1 for key generation and signing
    "secp256k1>=0.14.0,<1.0.0",
    # Bitcoin-style address encoding - bech32 for npub/nsec formats
    "bech32>=1.2.0,<2.0.0",
    # Async HTTP client for relay communication
    "aiohttp>=3.8.0,<4.0.0",
    # SOCKS proxy support for enhanced privacy
    "aiohttp-socks>=0.8.0,<1.0.0",
    # Backport typing features for Python 3.8 compatibility (if needed)
    "typing-extensions>=4.0.0; python_version<'3.9'",
]

[project.optional-dependencies]
# Development environment - includes all tools needed for contributing
# Version constraints are set for Python 3.9 compatibility while ensuring stability
dev = [
    # Testing framework and plugins
    "pytest>=7.4.0,<8.0.0",                 # Main testing framework (7.x for Python 3.9)
    "pytest-asyncio>=0.23.0,<0.24.0",       # Async test support
    "pytest-cov>=4.0.0,<5.0.0",             # Coverage reporting
    "pytest-mock>=3.12.0,<4.0.0",           # Mock object utilities
    "pytest-timeout>=2.1.0,<3.0.0",         # Test timeout handling
    "pytest-xdist>=3.3.0,<4.0.0",           # Parallel test execution

    # Code quality and static analysis
    "ruff>=0.4.0,<1.0.0",                   # Fast linter and formatter
    "mypy>=1.8.0,<2.0.0",                   # Static type checking
    "pre-commit>=3.5.0,<4.0.0",             # Git hooks for code quality

    # Build and packaging tools
    "build>=0.10.0,<2.0.0",                 # PEP 517 build tool
    "twine>=4.0.0,<6.0.0",                  # PyPI upload tool
    "setuptools-scm>=7.0.0,<9.0.0",         # Git-based versioning

    # Security scanning tools
    "bandit[toml]>=1.7.0,<2.0.0",           # Security vulnerability scanner
    "safety>=2.3.0,<4.0.0",                 # Known vulnerability checker
    "pip-audit>=2.6.0,<3.0.0",              # Dependency vulnerability scanner

    # Documentation generation
    "sphinx>=7.2.0,<8.0.0",                 # Documentation generator (7.x for Python 3.9)
    "sphinx-rtd-theme>=1.3.0,<4.0.0",       # Read the Docs theme
    "myst-parser>=0.19.0,<4.0.0",           # Markdown parser for Sphinx
    "sphinx-autodoc-typehints>=1.24.0,<3.0.0",
    "sphinxext-opengraph>=0.8.0,<1.0.0",
    "sphinx-design>=0.4.0,<1.0.0",
    "furo>=2025.7.19",

    # Performance profiling tools
    "pytest-benchmark>=4.0.0,<6.0.0",       # Performance benchmarking
    "memory-profiler>=0.60.0,<1.0.0",       # Memory usage profiling
]

# Minimal testing dependencies - for CI environments and quick testing
test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.23.0,<0.24.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-timeout>=2.1.0,<3.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",
]

# Security-focused dependency group - for security-specific CI jobs
security = [
    "bandit[toml]>=1.7.0,<2.0.0",
    "safety>=2.3.0,<4.0.0",
    "pip-audit>=2.6.0,<3.0.0",
]

# Documentation building dependencies - for docs-only environments
docs = [
    "sphinx>=7.2.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<4.0.0",
    "myst-parser>=0.19.0,<4.0.0",
    "sphinx-autodoc-typehints>=1.24.0,<3.0.0",
    "sphinxext-opengraph>=0.8.0,<1.0.0",
    "sphinx-design>=0.4.0,<1.0.0",
    "furo>=2025.7.19",
]

# Meta-group including all optional dependencies - for complete development setup
all = ["nostr-tools[dev,test,security,docs]"]

# Project URLs for PyPI and documentation discovery
[project.urls]
Homepage = "https://github.com/bigbrotr/nostr-tools"
Documentation = "https://bigbrotr.github.io/nostr-tools/"
Repository = "https://github.com/bigbrotr/nostr-tools.git"
"Bug Reports" = "https://github.com/bigbrotr/nostr-tools/issues"
"Source Code" = "https://github.com/bigbrotr/nostr-tools"
Changelog = "https://github.com/bigbrotr/nostr-tools/blob/main/CHANGELOG.md"
"Funding" = "https://github.com/sponsors/bigbrotr"

# Setuptools configuration for package discovery and building
[tool.setuptools]
zip-safe = false

# Package discovery configuration for src layout
[tool.setuptools.packages.find]
where = ["src"]
include = ["nostr_tools*"]
exclude = ["tests*", "docs*", "examples*", "*test*"]

# Dynamic versioning configuration using git tags
[tool.setuptools_scm]
# Version will be derived from git tags, with local version for dirty working trees
write_to = "src/nostr_tools/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "dirty-tag"

# Ruff configuration - modern Python linter and formatter
[tool.ruff]
# Target Python 3.9+ syntax and features
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Too complex (let developers decide)
]

# Directories to exclude from linting
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "src/nostr_tools/_version.py",  # Ignore autogenerated version file
]

# Import sorting configuration
[tool.ruff.lint.isort]
known-first-party = ["nostr_tools"]
force-single-line = true

# MyPy static type checking configuration
[tool.mypy]
# Target Python 3.9+ for type checking
python_version = "3.9"
# Strict type checking for high code quality
strict = true
# Show error codes for easier issue resolution
show_error_codes = true
# Pretty print errors for better readability
pretty = true
# Warn about unused ignores to keep comments clean
warn_unused_ignores = true

# Module-specific type checking configuration
[[tool.mypy.overrides]]
# Third-party modules without type stubs
module = [
    "secp256k1.*",
    "bech32.*",
    "aiohttp_socks.*",
    "importlib_metadata.*",
    "setuptools_scm.*",
    "nostr_tools._version",
]
ignore_missing_imports = true

# Test coverage configuration
[tool.coverage.run]
source = ["src/nostr_tools"]
branch = true
# Exclude test files and autogenerated files from coverage measurement
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "src/nostr_tools/_version.py",  # Autogenerated by setuptools-scm
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pytest configuration
[tool.pytest.ini_options]
# Test discovery patterns
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Useful command-line options by default
addopts = [
    "--strict-markers",     # Require all markers to be defined
    "--strict-config",      # Require all config options to be valid
    "--verbose",            # Verbose output for better debugging
    "--tb=short",          # Shorter traceback format
    "--cov=nostr_tools",   # Enable coverage for main package
    "--cov-report=term-missing",  # Show missing lines in terminal
    "--cov-report=html",   # Generate HTML coverage report
    "--cov-fail-under=80", # Fail if coverage below 80%
]

# Test markers for categorization
markers = [
    "unit: Unit tests - fast, no external dependencies",
    "integration: Integration tests - may require network access",
    "benchmark: Performance benchmark tests",
]

# Async test configuration
asyncio_mode = "auto"
