[project]
name = "umongo"
version = "4.0.0b3"
description = "sync/async MongoDB ODM"
readme = "README.rst"
license = { file = "LICENSE" }
authors = [
    { name = "Emmanuel Leblond", email = "emmanuel.leblond@gmail.com" },
    { name = "Jérôme Lafréchoux", email = "jerome@jolimont.fr" },
]
maintainers = [
  { name = "Jérôme Lafréchoux", email = "jerome@jolimont.fr" },
]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3 :: Only',
]
requires-python = ">=3.10"
dependencies = [
    "marshmallow>=4.0.1,<5.0",
    "pymongo>=3.7.0",
]

[project.urls]
Changelog = "https://umongo.readthedocs.io/en/latest/history.html"
Issues = "https://github.com/Scille/umongo/issues"
Source = "https://github.com/Scille/umongo/"

[project.optional-dependencies]
motor = [
    'motor>=3.1.1',
]
txmongo = [
    'txmongo>=19.2.0',
]
mongomock = [
    'mongomock',
]
tests = [
    "pytest",
    "pytest-cov",
]
dev = ["umongo[tests]", "tox", "pre-commit>=4.3,<5.0"]
docs = [
  "sphinx==8.2.3",
]

[build-system]
requires = ["flit_core<4"]
build-backend = "flit_core.buildapi"

[tool.flit.sdist]
include = [
  "docs/",
  "tests/",
  "CHANGELOG.rst",
  "CONTRIBUTING.rst",
  "tox.ini",
]
exclude = ["docs/_build/"]

[tool.ruff]
fix = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# use all checks available in ruff except the ones explicitly ignored below
select = ["ALL"]
ignore = [
    "A001",    # "variable name shadows a Python standard-library module"
    "A002",    # "argument name shadows a Python standard-library module"
    "ANN",     # skip annotation checks
    "ARG",     # unused arguments are common w/ interfaces
    "B007",  # TODO: Loop control variable not used within loop body"
    "B026",  # TODO: Star-arg unpacking after a keyword argument is strongly discouraged"
    "B904",  # TODO: raise from exc
    "COM",     # let formatter take care of commas
    "C901",    # don't enforce complexity level
    "D",       # don't require docstrings
    "DTZ001",  # TODO: `datetime.datetime()` called without a `tzinfo` argument
    "E501",    # TODO: E501 Line too long
    "EM",      # allow string messages in exceptions
    "ERA001",  # TODO: Found commented-out code"
    "FBT002",  # allow boolean default positional argument
    "FIX",     # allow "FIX" comments in code
    "INP001",  # allow Python files outside of packages
    "INT001",  # TODO: f-string is resolved before function call; consider `_("string %s") % arg`
    "N805",  # allow first method argument not to be self (can be cls)
    "N806",    # allow uppercase variable names for variables that are classes
    "N816",    # allow mixedcase variable names for variables in global scope
    "PERF203", # allow try-except within loops
    "PLR0912", # "Too many branches"
    "PLR0913", # "Too many arguments"
    "PLR0915", # "Too many statements"
    "PLR2004", # "Magic value used in comparison"
    "PLW0642",  # TODO: Reassigned `cls` variable in class method"
    "PLW1641",  # TODO: Object does not implement `__hash__` method
    "PLW2901",  # `for` loop variable `base` overwritten by assignment target
    "UP031",  # TODO: Use format specifiers instead of percent format
    "RET504",  # Unnecessary assignment"
    "RUF012",  # allow mutable class variables
    "S",       # allow asserts
    "SIM102",  # Sometimes nested ifs are more readable than if...and...
    "SIM105",  # "Use `contextlib.suppress(...)` instead of `try`-`except`-`pass`"
    "SIM108",  # sometimes if-else is more readable than a ternary
    "SLF001",  # allow private attribute access
    "TD",      # allow TODO comments to be whatever we want
    "TID252",  # TODO: Prefer absolute imports over relative imports from parent modules"
    "TRY003",  # allow long messages passed to exceptions
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "B018",  # allow useless expressions
    "PT007",   # ignore false positives due to https://github.com/astral-sh/ruff/issues/14743
    "PT012",  # TODO: `pytest.raises()` block should contain a single simple statement
]
"examples/*" = [
    "BLE001",  # allow blind exception catching
    "EXE001",  # allow shebang in non-executable file
    "T", # allow prints
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "testing", "marshmallow", "mongodb", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
testing = ["pytest"]
marshmallow = ["marshmallow"]
mongodb = ["bson", "pymongo", "motor", "txmongo", "mongomock"]

[tool.pytest.ini_options]
norecursedirs = ".git .tox docs env"
