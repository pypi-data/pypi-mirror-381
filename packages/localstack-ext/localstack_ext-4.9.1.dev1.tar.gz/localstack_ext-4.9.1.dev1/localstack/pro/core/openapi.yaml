openapi: 3.1.0
info:
  contact:
    email: info@localstack.cloud
    name: LocalStack Support
    url: https://www.localstack.cloud/contact
  summary: The LocalStack REST API exposes functionality related to diagnostics, health
    checks, plugins, initialisation hooks, service introspection, and more.
  termsOfService: https://www.localstack.cloud/legal/tos
  version: latest
  title: LocalStack REST API for Pro
externalDocs:
  description: LocalStack Documentation
  url: https://docs.localstack.cloud
tags:
  - description: Available in LocalStack Pro
    name: pro
servers:
  - url: http://{host}:{port}
    variables:
      port:
        default: '4566'
      host:
        default: 'localhost.localstack.cloud'
components:
  parameters:
    ServiceName:
      description: Service name
      in: path
      name: service
      required: true
      schema:
        type: string
  schemas:
    StateResult:
      type: object
      description: The result of a state save operation.
      properties:
        service:
          type: string
          description: The service name.
        status:
          type: string
          description: The status, ok or error.
        message:
          type: string
          description: An error message.
    LoadService:
      type: object
      description: Configuration for the service load operation
      properties:
        start:
          type: boolean
          description: Start the service after loading the state
          default: true
    FaultRule:
      type: object
      description: Each rule represents the conditions for a fault and its detrimental effects.
      additionalProperties: false
      properties:
        region:
          type: string
          description: Region name, e.g., 'ap-south-1'. If omitted, all regions are affected.
          pattern: "^[a-zA-Z0-9-]+$"
        service:
          type: string
          description: Name of the service, e.g., 'kinesis'. If omitted, all services are affected.
          pattern: "^[a-zA-Z0-9-_]+$"
        operation:
          type: string
          description: Name of the operation, e.g., 'PutRecord'. If omitted, all operations are affected.
          pattern: "^[a-zA-Z]+$"
        probability:
          type: number
          description: Probability of invoking this rule, e.g., 0.5. If omitted, 1.0 is used.
          minimum: 0
          maximum: 1
        description:
          type: string
          description: A description of this rule. This field has no effect.
          maxLength: 8192
        error:
          type: object
          additionalProperties: false
          properties:
            statusCode:
              type: integer
              description: HTTP status code to use in response, e.g., 503. If omitted, a default is used.
              minimum: 400
              maximum: 599
            code:
              type: string
              description: Descriptive error code used in response. If omitted, a default is used.
              pattern: "^[a-zA-Z0-9]+$"
    PodSaveRequest:
      additionalProperties: false
      properties:
        remote:
          type: object
        attributes:
          type: object
      type: object
    RemoteConfig:
      oneOf:
        - type: object
          description: Empty remote config. Targeting default LocalStack platform
          additionalProperties: false
        - type: object
          properties:
            remote:
              type: string
          required:
            - remote
    PodList:
      additionalProperties: false
      properties:
        cloudpods:
          items:
            additionalProperties: false
            properties:
              max_version:
                type: integer
              pod_name:
                type: string
              last_change:
                type:
                  - number
                  - 'null'
            required:
              - pod_name
              - max_version
            type: object
          type: array
      required:
        - cloudpods
      type: object
    PodVersions:
      type: object
      properties:
        versions:
          type: array
          items:
            type: object
            properties:
              created_at:
                type: integer
                description: Timestamp when the version was created.
              deleted:
                type: [ string, 'null' ]
                description: Deletion timestamp or null if not deleted.
              description:
                type: [ string, 'null' ]
                description: Description of the version.
              localstack_version:
                type: string
                description: Version of LocalStack used.
              services:
                type: array
                description: List of services associated with this version.
                items:
                  type: string
              storage_size:
                type: integer
                description: Size of storage used by this version.
              user:
                type: [ string, 'null' ]
                description: User associated with this version.
              user_id:
                type: string
                description: ID of the user associated with this version.
              version:
                type: integer
                description: Version number.
        remote_url:
          type: string
      required:
        - remote_url
    ReplicationJob:
      additionalProperties: false
      type: object
      properties:
        job_id:
          type: string
          description: The Id of the ReplicationJob.
        state:
          type: string
          description: State of the ReplicationJob.
        error_message:
          type: string
          description: Description of failure in case of failed replication.
        type:
          type: string
          description: Type of replication Job.
        replication_config:
          type: object
          description: configuration object for custom replication
    ReplicationSupportedResource:
      additionalProperties: false
      type: object
      properties:
        resource_type:
          type: string
          description: Type of resource
        policy_statements:
          type: array
          description: Required IAM permissions to replicate resource.
        service:
          type: string
          description: AWS service.
        identifier:
          type: string
          description: Resource property or properties used as identifier. In case there are multiple properties, join them with ':'. ie. `RepositoryName:<ImageTag[Optional]>` for ecr repository can be used as `my-repo` or `my-repo:latest`
    ReplicationConfigMock:
      type: object
      description: Mostly use for testing.
      properties:
        delay:
          type: number
          description: Number of seconds for mock replication job to take.
    ReplicationConfigSingle:
      type: object
      description: "Specify the AWS resource to replicate by providing either: (1) the complete `resource_arn`; OR (2) both `resource_type` and `resource_identifier` together. Do not specify both options simultaneously."
      properties:
          resource_arn:
            type: string
            description: "AWS ARN (Amazon Resource Name) of the resource to replicate. Example: arn:aws:iam::123456789012:role/MyRole"
          resource_type:
            type: string
            description: "Resource type in AWS CloudControl format. Example: AWS::IAM::Role"
          resource_identifier:
            type: string
            description: "CloudControl identifier for resource."

    ReplicationRequest:
      additionalProperties: false
      type: object
      required:
        - replication_type
        - source_aws_config
      properties:
        replication_type:
          type: string
          description: The type of replication job
          enum:
            - MOCK
            - SINGLE_RESOURCE
        source_aws_config:
          type: object
          description: Access credentials of source AWS account to describe the resource to replicate.
          required:
            - aws_access_key_id
            - aws_secret_access_key
            - region_name
          properties:
            aws_access_key_id:
              type: string
            aws_secret_access_key:
              type: string
            aws_session_token:
              type: string
            region_name:
              type: string
            endpoint_url:
              type: string
        target_aws_config:
          type: object
          description: Access credentials of target LocalStack instance to replicate the resource into.
          required:
            - aws_access_key_id
            - aws_secret_access_key
            - region_name
          properties:
            aws_access_key_id:
              type: string
            aws_secret_access_key:
              type: string
            aws_session_token:
              type: string
            region_name:
              type: string
            endpoint_url:
              type: string
          replication_job_config:
            description: Parameters for replication
            oneOf:
              - $ref: '#/components/schemas/ReplicationConfigMock'
              - $ref: '#/components/schemas/ReplicationConfigSingle'

    NetworkEffectsConfig:
      type: object
      description: Configuration for network effects.
      additionalProperties: false
      required:
        - latency
      properties:
        latency:
          type: integer
          description: Network latency in milliseconds. By default, 0 is used.
          minimum: 0
    PodRemote:
      type: object
      description: Details of a pod remote
      properties:
        name:
          type: string
          description: Name of the remote.
        protocols:
          type: array
          items:
            type: string
          description: Supported protocols of the remote.
        token:
          type: object
          description: The token for this remote.
        url:
          type: string
          description: URL of the remote server.
      example:
        name: "example_remote"
        protocols: [ "http", "https" ]
        url: "https://example.com"
    IamConfig:
      type: object
      description: IAM Config
      properties:
        state:
          type: string
          description: Engine state
          enum:
            - DISABLED
            - ENGINE_ONLY
            - SOFT_MODE
            - ENFORCED
          example: ENFORCED
        config_enforce_iam:
          type: boolean
          description: Whether the ENFORCE_IAM flag was set on startup of LocalStack.
          readOnly: true
          example: true
        config_iam_soft_mode:
          type: boolean
          description: Supported protocols of the remote.
          readOnly: true
          example: false
    ActionAndResource:
      type: object
      description: Action and resource access evaluation
      required:
        - action
        - resource
        - account
      properties:
        action:
          type: string
          description: iam action
        resource:
          type: string
          description: resource arn
        account:
          type: string
          description: account where the resource is deployed
        condition_keys:
          type: array
          items:
            type: string
          description: permission test evaluation
        description:
          type: string
          description: permission test evaluation
        access_level:
          type: string
          description: permission test evaluation
    CheckActionsRequest:
      type: object
      description: check actions request
      required:
        - access_key_id
        - region_name
        - required_permission
      properties:
        access_key_id:
          type: string
          description: Access key id of the user/assumed role
        region_name:
          type: string
          description: region name for the current authenticated session
        required_permission:
          type: array
          description: list of resources and actions to verify user access
          items:
            type: object
            required:
              - action
              - resource
            properties:
              resource:
                type: string
                description: Arn of the resource to test against
              action:
                type: string
                description: action to test permission for
    CheckActionsResponse:
      type: object
      description: actions check response
      properties:
        allowed:
          type: boolean
          description: All of the actions in the request are allowed to be performed on the given resource
        implicit_deny:
          type: array
          items:
            $ref: '#/components/schemas/ActionAndResource'
          description: all actions from the request that resulted in an implicit deny
        explicit_deny:
          type: array
          items:
            $ref: '#/components/schemas/ActionAndResource'
          description: all actions from the request that resulted in an explicit deny
        explicit_allow:
          type: array
          items:
            $ref: '#/components/schemas/ActionAndResource'
          description: all actions from the request that explicitly allowed
        source_principal:
          type: object
          description: information about the source principal evaluated from the access key id
          properties:
            arn:
              type: string
              description: arn of the user or assumed role
            account:
              type: string
              description: account where the user permission were evaluated
        status_code:
          type: integer
          description: currently default values do not use for determining success or failures
        status_reason:
          type: string
          description: currently default values do not use for determining success or failures

paths:
  /_aws/cognito-idp/forgotPassword:
    get:
      description: Cognito forgot password endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
    post:
      description: Cognito forgot password endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
  /_aws/cognito-idp/login:
    get:
      description: Cognito login endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
    post:
      description: Cognito login endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
  /_aws/cognito-idp/logout:
    get:
      description: Cognito logout endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
    post:
      description: Cognito logout endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
  /_aws/cognito-idp/oauth2/authorize:
    get:
      description: Cognito OAuth 2.0 authorization endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/authorization-endpoint.html
      tags: [pro, aws]
  /_aws/cognito-idp/oauth2/token:
    post:
      description: Cognito OAuth 2.0 token endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/token-endpoint.html
      tags: [pro, aws]
  /_aws/cognito-idp/oauth2/revoke:
    post:
      description: Cognito OAuth 2.0 token revocation endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/revocation-endpoint.html
      tags: [pro, aws]
  /_aws/cognito-idp/oauth2/userInfo:
    get:
      description: Cognito OpenID Connect userInfo endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/userinfo-endpoint.html
      tags: [pro, aws]
  /_aws/cognito-idp/saml2/idpresponse:
    get:
      description: Cognito SAML 2.0 idpresponse endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/saml2-idpresponse-endpoint.html
      tags: [pro, aws]
    post:
      description: Cognito SAML 2.0 idpresponse endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/saml2-idpresponse-endpoint.html
      tags: [pro, aws]
  /_aws/cognito-idp/signup:
    get:
      description: Cognito signup endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
    post:
      description: Cognito signup endpoint
      externalDocs:
        url: https://docs.aws.amazon.com/cognito/latest/developerguide/hosted-UI-endpoints.html
      tags: [pro, aws]
  /_aws/iam/config:
    get:
      description: IAM config endpoint
      tags: [pro, aws]
      responses:
        200:
          description: Successful retrieval of configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamConfig'
    post:
      description: IAM config endpoint
      tags: [pro, aws]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IamConfig'
      responses:
        200:
          description: Successful setting of the new configuration.
        400:
          description: Bad request.
  /_aws/iam/check-actions-allowed:
    post:
      description: Test if the given actions are allowed on the specific resource
      tags: [pro, aws]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckActionsRequest'
      responses:
        200:
          description: Successful test. It is still required to inspect the response as it can be denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckActionsResponse'
  /_aws/iot/LocalStackIoTRootCA.pem:
    get:
      description: Retrieve certificate for LocalStack IoT root certificate authority
      tags: [pro, aws]
  /_aws/pinpoint/{application_id}/{reference_id}:
    get:
      description: Retrieve Pinpoint OTP code
      tags: [pro, aws]
      parameters:
        - name: application_id
          in: path
          required: true
          description: Pinpoint application ID
          schema:
            type: string
        - name: reference_id
          in: path
          required: true
          description: Reference ID that was used in SentOTPMessage
          schema:
            type: string
      responses:
        '200':
          description: OTP message details
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - AllowedAttempts
                  - CodeLength
                  - DestinationIdentity
                  - ReferenceId
                  - OriginationIdentity
                  - ValidityPeriod
                  - Attempts
                  - ApplicationId
                  - CreatedTimestamp
                  - Code
                properties:
                  AllowedAttempts:
                    type: integer
                    maximum: 5
                    description: Maximum number of allowed attempts for OTP validation.
                  BrandName:
                    type: string
                    description: Name of the brand that is associated with the OTP code.
                  CodeLength:
                    type: integer
                    minimum: 5
                    maximum: 8
                    description: Number of digits in the OTP code that was sent.
                  DestinationIdentity:
                    type: string
                    description: Phone number that the OTP code was sent to.
                  EntityId:
                    type: string
                    description: ID registered with the regulatory agency (India only).
                  Language:
                    type: string
                    description: Language used when sending the message.
                  OriginationIdentity:
                    type: string
                    description: Identity (e.g. short code) that is used to send the OTP code.
                  ReferenceId:
                    type: string
                    minLength: 1
                    maxLength: 48
                    description: Unique reference ID that was used in the SendOTPMessage request.
                  TemplateId:
                    type: string
                    description: ID that is registered with the regulatory agency (India only).
                  ValidityPeriod:
                    type: integer
                    maximum: 60
                    description: Time in minutes the OTP code is valid for.
                  Attempts:
                    type: string
                    minimum: 0
                    description: OTP validation attempts made so far.
                  ApplicationId:
                    type: string
                    description: Identifier of the Pinpoint Application.
                  CreatedTimestamp:
                    type: string
                    format: date-time
                    description: Timestamp of the SendOTPMessage request.
                  Code:
                    type: string
                    minLength: 5
                    maxLength: 8
                    description: One-time password.
  /_localstack/chaos/effects:
    post:
      summary: Configure network effects
      description: Network effects include things like latency, jitter, bandwidth throttling etc. which do not lead to an application-level fault/exception.
      operationId: set_network_effects
      tags: [pro, chaos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkEffectsConfig'
      responses:
        200:
          description: Successfully configured network effects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkEffectsConfig'
    get:
      summary: Get current network effects configuration
      tags: [pro, chaos]
      operationId: get_network_effects
      description: Retrieve the current configuration for network latency effects in Localstack Chaos.
      responses:
        200:
          description: Successful retrieval of configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkEffectsConfig'

  /_localstack/chaos/faults:
    get:
      summary: Get the current fault configuration
      description: Retrieve the list of currently configured fault rules.
      operationId: get_fault_rules
      tags: [pro, chaos]
      responses:
        200:
          description: Successful retrieval of current configuration.
          content:
            application/json:
              schema:
                type: array
                description: List of configured rules for faults.
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/FaultRule'
    post:
      summary: Set a new fault configuration
      description: Set a new set of fault rules. Overwrite the previous ones.
      operationId: set_fault_rules
      tags: [pro, chaos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: List of rules for faults.
              uniqueItems: true
              items:
                $ref: '#/components/schemas/FaultRule'
      responses:
        200:
          description: Successful retrieval of current configuration.
          content:
            application/json:
              schema:
                type: array
                description: List of configured rules for faults.
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/FaultRule'

    patch:
      summary: Add a new set of rules to the current configuration
      description: Add new rules to the existing fault configuration.
      operationId: add_fault_rules
      tags: [pro, chaos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: List of configured rules for faults to be added.
              uniqueItems: true
              items:
                $ref: '#/components/schemas/FaultRule'
      responses:
        200:
          description: Successful retrieval of current configuration.
          content:
            application/json:
              schema:
                type: array
                description: List of configured rules for faults.
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/FaultRule'

    delete:
      summary: Delete a set of rules from the configuration
      description: Remove rules from the fault configuration.
      operationId: delete_fault_rules
      tags: [pro, chaos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: List of configured rules for faults.
              uniqueItems: true
              items:
                $ref: '#/components/schemas/FaultRule'
      responses:
        200:
          description: Successful retrieval of current configuration.
          content:
            application/json:
              schema:
                type: array
                description: List of configured rules for faults.
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/FaultRule'

  /_localstack/cloudformation/deploy:
    get:
      description: UI to deploy and manage your CloudFormation stacks using public templates
      parameters:
        - name: templateURL
          in: query
          required: false
          description: URL to a CloudFormation template (JSON or YAML).
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: HTML page for CloudFormation deployment.
          content:
            text/html:
              schema:
                type: string
  /_localstack/pods:
    get:
      description: List cloud pods
      operationId: listPods
      tags: [pro, pods]
      parameters:
        - description: User ID of the pod creator. Special values like `me` are accepted.
          in: query
          name: creator
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteConfig"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PodList"
          description: "The list of Cloud Pods associated with a given identity"
  /_localstack/pods/environment:
    get:
      description: |
        Retrieves some information about the current environment, like LocalStack and Moto versions.
      tags: [pro, pods]
      responses:
        '200':
          description: A JSON object containing environment version information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  localstack_version:
                    type: string
                    description: Version of LocalStack.
                  localstack_ext_version:
                    type: string
                    description: Version of LocalStack Pro.
                  moto_ext_version:
                    type: string
                    description: Version of Moto used within LocalStack.
                  pro:
                    type: boolean
                    description: Indicates whether LocalStack PRO is activated.
  /_localstack/pods/remotes:
    get:
      description: Retrieves a list of all configured remotes.
      operationId: list_remotes
      tags: [pro, pods]
      responses:
        '200':
          description: A list of remotes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  remotes:
                    type: array
                    items:
                      $ref: '#/components/schemas/PodRemote'

  /_localstack/pods/remotes/{name}:
      get:
        summary: Get a specific remote
        description: Retrieves information about a specific remote by name.
        operationId: get_remote
        tags: [pro, pods]
        parameters:
          - name: name
            in: path
            required: true
            description: The name of the remote.
            schema:
              type: string
        responses:
          '200':
            description: Details of the remote.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PodRemote'
      post:
        summary: Create a new remote
        description: Creates a new remote with the specified name and configuration.
        operationId: create_remote
        tags: [pro, pods]
        parameters:
          - name: name
            in: path
            required: true
            description: The name of the new remote.
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  protocols:
                    type: array
                    items:
                      type: string
                    description: Supported protocols of the remote.
                  remote_url:
                    type: string
                    description: URL of the remote server.
        responses:
          '200':
            description: Remote created successfully.

      delete:
        summary: Delete a remote
        description: Deletes a remote with the specified name.
        operationId: delete_remote
        tags: [pro, pods]
        parameters:
          - name: name
            in: path
            required: true
            description: The name of the remote to delete.
            schema:
              type: string
        responses:
          '200':
            description: Remote deleted successfully.

  /_localstack/pods/state:
    get:
      description: Exports the current state of the LocalStack container into a zip file.
      tags: [pro, pods]
      parameters:
        - name: pod_name
          in: query
          description: The name of the pod to save. Defaults to a unique name based on the current timestamp.
          required: false
          schema:
            type: string
        - name: services
          in: query
          description: Comma-separated list of service names to include in the exported state.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A zip file containing the exported pod state.
          content:
            application/zip:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Specifies that the response is an attachment.
              schema:
                type: string
            Content-Length:
              description: The size of the zip file in bytes.
              schema:
                type: integer
            x-localstack-pod-services:
              description: Comma-separated list of services included in the pod state.
              schema:
                type: string
            x-localstack-pod-size:
              description: The size of the pod file in bytes.
              schema:
                type: integer
    post:
      description: Loads a pod state from a zip file and restores its services.
      tags: [pro, pods]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pod:
                  type: string
                  format: binary
              required:
                - pod
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Pod state loaded successfully.
          headers:
            Content-Length:
              description: Length of the pod in bytes.
              schema:
                type: integer
        '400':
          description: Bad request.
  /_localstack/pods/state/metamodel:
    get:
      description: Extract a metamodel representing the state of the current LocalStack session
      responses:
        "200":
          content:
            application/json: {}
          description:
            Metamodel representing the state of the current LocalStack
            session
      tags: [pro, pods]
  /_localstack/pods/{name}:
    delete:
      operationId: deletePod
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      - in: query
        name: local
        required: false
        description: If true, the pod will be deleted only from the local storage
        schema:
          type: string
      - in: header
        name: x-localstack-state-secret
        required: false
        description: A secret token for authenticating the request against the platform
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteConfig'
      responses:
        '200':
          description: OK
        '500':
          description: Deletion failed
      tags: [pro, pods]
    post:
      description: Create and register a cloud pod version
      operationId: savePod
      parameters:
        - description: Cloud pod name
          in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: local
          required: false
          schema:
            type: boolean
        - description: Cloud pod version
          in: query
          name: version
          required: false
          schema:
            type: string
        - in: header
          name: x-localstack-state-secret
          required: false
          description: A secret token for authenticating the request against the platform
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PodSaveRequest"
      responses:
        "200":
          content:
            application/x-ndjson: {}
          description: "The response is a sequence of JSON events, according to the schema, separated by a newline"
      tags: [pro, pods]
    put:
      description: Load a cloud pod version
      operationId: loadPod
      parameters:
        - in: path
          description: The name of the Cloud Pod to be loaded into the runtime
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: version
          description: The version of the Cloud Pod to be loaded into the runtime
          required: false
          schema:
            type: string
        - in: query
          name: merge
          description: Merge strategy to use when loading the pod
          required: false
          schema:
            type: string
        - in: query
          name: ignore_version_mismatches
          description: Ignores version mismatches between the pod and the current LocalStack
            version.
          required: false
          schema:
            type: string
        - in: header
          name: x-localstack-state-secret
          required: false
          description: A secret token for authenticating the request against the platform
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteConfig'
      responses:
        "200":
          content:
            application/x-ndjson: {}
          description: "The response is a sequence of JSON events, according to the schema, separated by a newline"
      tags: [pro, pods]
  /_localstack/pods/{name}/versions:
    get:
      description: List versions for a cloud pod
      operationId: getPodVersions
      parameters:
        - description: Cloud pod name
          in: path
          name: name
          required: true
          schema:
            type: string
        - in: header
          name: x-localstack-state-secret
          required: false
          description: A secret token for authenticating the request against the platform
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteConfig"
      responses:
        '200':
          description: A list of version details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PodVersions"
      tags: [pro, pods]
  /_localstack/replicator/jobs:
    get:
      tags: [pro, replicator]
      description: List of replication jobs
      operationId: listReplicationJobs
      responses:
        "200":
          description: List of replication jobs
          content:
            application/json:
              schema:
                additionalProperties: false
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationJob'
    post:
      tags: [pro, replicator]
      description: Submits a replication job
      operationId: createReplicationJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplicationRequest"

      responses:
        "200":
          description: Replication Job submitted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationJob'

  /_localstack/replicator/jobs/{job_id}:
    get:
      tags: [pro, replicator]
      description: Get replication job
      operationId: GetReplicationJob
      parameters:
        - description: Id of replication job
          in: path
          name: job_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Replication Job found
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ReplicationJob'
        "404":
          description: Replication job not found
          content:
            text/plain:
              schema:
                type: 'string'
  /_localstack/replicator/resources:
    get:
      tags: [pro, replicator]
      description: List supported resources for replication
      operationId: listSupportedResources
      responses:
        "200":
          description: List of resources available for replication
          content:
            aplication/json:
              schema:
                additionalProperties: false
                type: array
                items:
                  $ref: '#/components/schemas/ReplicationSupportedResource'



  /_localstack/stackinfo:
    get:
      description: Collect information used to populate the dashboard info.
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: false
                properties:
                  api_key:
                    type: string
                  duration_in_seconds:
                    type: integer
                  is_ci:
                    type: boolean
                  is_docker:
                    type: boolean
                  number_of_api_calls_error:
                    type: integer
                  number_of_api_calls_success:
                    type: integer
                  number_of_services:
                    type: integer
                  server_time_utc:
                    type: string
                  session_id:
                    type: string
                  system:
                    type: string
                  top_user_agent:
                    type: string
                  version:
                    type: string
                required:
                  - server_time_utc
                  - session_id
                  - api_key
                  - system
                  - version
                  - is_ci
                  - is_docker
                  - duration_in_seconds
                  - top_user_agent
                  - number_of_services
                  - number_of_api_calls_success
                  - number_of_api_calls_error
                type: object
          description: ""
      tags:
        - pro
  /_localstack/state/load:
    post:
      description: Load all service states. By default, it starts the services when loading their states.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadService'
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/StateResult'
          description: Successful or error is one of the status is 'error'
      tags: [pro, state]
  /_localstack/state/reset:
    post:
      description: Reset all service states
      responses:
        "200":
          description: Successful
      tags: [pro, state]
  /_localstack/state/save:
    post:
      description: Save all service states
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/StateResult'
          description: Successful or error is one of the status is 'error'
      tags: [pro, state]
  /_localstack/state/{service}/load:
    post:
      description: Load a service state. By default, it starts the service, if the service hasn't started yet.
      parameters:
        - $ref: "#/components/parameters/ServiceName"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadService'
      responses:
        "200":
          description: Successful
        500:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateResult'
      tags: [pro, state]
  /_localstack/state/{service}/reset:
    post:
      description: Reset a service state
      parameters:
        - $ref: "#/components/parameters/ServiceName"
      responses:
        "200":
          description: Successful
      tags: [pro, state]
  /_localstack/state/{service}/save:
    post:
      description: Save a service state
      parameters:
        - $ref: "#/components/parameters/ServiceName"
      responses:
        "200":
          description: Successful
        500:
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateResult'
      tags: [pro, state]
