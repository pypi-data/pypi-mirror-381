
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.capabilities
import moa.classifiers
import moa.classifiers.trees
import moa.core
import moa.options
import typing



class ClassifierWithFeatureImportance(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    featureImportanceLearnerOption: moa.options.ClassOption = ...
    doNotNormalizeFeatureScoreOption: com.github.javacliparser.FlagOption = ...
    windowSizeOption: com.github.javacliparser.IntOption = ...
    maxFeaturesDebugOption: com.github.javacliparser.IntOption = ...
    debugFileOption: com.github.javacliparser.FileOption = ...
    doNotOutputResultsToFileOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getCurrentFeatureImportances(self) -> typing.MutableSequence[float]: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class FeatureImportanceClassifier(moa.classifiers.Classifier):
    def getFeatureImportances(self, boolean: bool) -> typing.MutableSequence[float]: ...
    def getTopKFeatures(self, int: int, boolean: bool) -> typing.MutableSequence[int]: ...

class FeatureImportanceHoeffdingTree(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler, FeatureImportanceClassifier):
    treeLearnerOption: moa.options.ClassOption = ...
    featureImportanceOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def calcNodeCover(self, splitNode: moa.classifiers.trees.HoeffdingTree.SplitNode) -> float: ...
    def calcNodeDecreaseImpurity(self, splitNode: moa.classifiers.trees.HoeffdingTree.SplitNode) -> float: ...
    def getFeatureImportances(self, boolean: bool) -> typing.MutableSequence[float]: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getTopKFeatures(self, int: int, boolean: bool) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class FeatureImportanceHoeffdingTreeEnsemble(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler, FeatureImportanceClassifier):
    ensembleLearnerOption: moa.options.ClassOption = ...
    hoeffdingTreeFeatureImportanceOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def getFeatureImportances(self, boolean: bool) -> typing.MutableSequence[float]: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getTopKFeatures(self, int: int, boolean: bool) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.learners.featureanalysis")``.

    ClassifierWithFeatureImportance: typing.Type[ClassifierWithFeatureImportance]
    FeatureImportanceClassifier: typing.Type[FeatureImportanceClassifier]
    FeatureImportanceHoeffdingTree: typing.Type[FeatureImportanceHoeffdingTree]
    FeatureImportanceHoeffdingTreeEnsemble: typing.Type[FeatureImportanceHoeffdingTreeEnsemble]
