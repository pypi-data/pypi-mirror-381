
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.lang
import moa
import moa.classifiers
import moa.core
import moa.gui
import moa.learners.featureanalysis
import moa.options
import typing



class ChangeDetectorLearner(moa.classifiers.AbstractClassifier):
    driftDetectionMethodOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

_Learner__E = typing.TypeVar('_Learner__E', bound=moa.core.Example)  # <E>
class Learner(moa.MOAObject, moa.options.OptionHandler, moa.gui.AWTRenderable, typing.Generic[_Learner__E]):
    def getConfidenceForPrediction(self, e: _Learner__E, double: float) -> float: ...
    def getModel(self) -> moa.MOAObject: ...
    def getModelContext(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getModelMeasurements(self) -> typing.MutableSequence[moa.core.Measurement]: ...
    def getPredictionForInstance(self, e: _Learner__E) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getSublearners(self) -> typing.MutableSequence['Learner']: ...
    def getVotesForInstance(self, e: _Learner__E) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearning(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def setRandomSeed(self, int: int) -> None: ...
    def trainOnInstance(self, e: _Learner__E) -> None: ...
    def trainingHasStarted(self) -> bool: ...
    def trainingWeightSeenByModel(self) -> float: ...

_LearnerSemiSupervised__E = typing.TypeVar('_LearnerSemiSupervised__E', bound=moa.core.Example)  # <E>
class LearnerSemiSupervised(Learner[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]], typing.Generic[_LearnerSemiSupervised__E]):
    def getTrainingPrediction(self) -> com.yahoo.labs.samoa.instances.Prediction: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.learners")``.

    ChangeDetectorLearner: typing.Type[ChangeDetectorLearner]
    Learner: typing.Type[Learner]
    LearnerSemiSupervised: typing.Type[LearnerSemiSupervised]
    featureanalysis: moa.learners.featureanalysis.__module_protocol__
