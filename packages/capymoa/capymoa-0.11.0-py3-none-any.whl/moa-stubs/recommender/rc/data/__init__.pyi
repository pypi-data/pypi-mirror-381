
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import moa.recommender.rc.data.impl
import moa.recommender.rc.utils
import typing



class RecommenderData(java.io.Serializable):
    def addItem(self, int: int, list: java.util.List[int], list2: java.util.List[float]) -> None: ...
    def addUser(self, int: int, list: java.util.List[int], list2: java.util.List[float]) -> None: ...
    def attachUpdatable(self, updatable: moa.recommender.rc.utils.Updatable) -> None: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def countRatingsItem(self, int: int) -> int: ...
    def countRatingsUser(self, int: int) -> int: ...
    def disableUpdates(self, boolean: bool) -> None: ...
    def getAvgRatingItem(self, int: int) -> float: ...
    def getAvgRatingUser(self, int: int) -> float: ...
    def getGlobalMean(self) -> float: ...
    def getItems(self) -> java.util.Set[int]: ...
    def getMaxRating(self) -> float: ...
    def getMinRating(self) -> float: ...
    def getNumItems(self) -> int: ...
    def getNumRatings(self) -> int: ...
    def getNumUsers(self) -> int: ...
    def getRating(self, int: int, int2: int) -> float: ...
    def getRatingsItem(self, int: int) -> moa.recommender.rc.utils.SparseVector: ...
    def getRatingsUser(self, int: int) -> moa.recommender.rc.utils.SparseVector: ...
    def getUsers(self) -> java.util.Set[int]: ...
    def itemExists(self, int: int) -> bool: ...
    def ratingIterator(self) -> java.util.Iterator[moa.recommender.rc.utils.Rating]: ...
    def removeItem(self, int: int) -> None: ...
    def removeRating(self, int: int, int2: int) -> None: ...
    def removeUser(self, int: int) -> None: ...
    def setRating(self, int: int, int2: int, double: float) -> None: ...
    def userExists(self, int: int) -> bool: ...

class AbstractRecommenderData(RecommenderData):
    def __init__(self): ...
    def addItem(self, int: int, list: java.util.List[int], list2: java.util.List[float]) -> None: ...
    def addUser(self, int: int, list: java.util.List[int], list2: java.util.List[float]) -> None: ...
    def attachUpdatable(self, updatable: moa.recommender.rc.utils.Updatable) -> None: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def disableUpdates(self, boolean: bool) -> None: ...
    def removeItem(self, int: int) -> None: ...
    def removeRating(self, int: int, int2: int) -> None: ...
    def removeUser(self, int: int) -> None: ...
    def setRating(self, int: int, int2: int, double: float) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.recommender.rc.data")``.

    AbstractRecommenderData: typing.Type[AbstractRecommenderData]
    RecommenderData: typing.Type[RecommenderData]
    impl: moa.recommender.rc.data.impl.__module_protocol__
