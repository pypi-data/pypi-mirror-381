
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa
import moa.core
import moa.gui.visualization
import typing



class Cluster(moa.AbstractMOAObject):
    def __init__(self): ...
    def getCenter(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getGroundTruth(self) -> float: ...
    def getId(self) -> float: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getInfo(self) -> str: ...
    def getMeasureValue(self, string: str) -> str: ...
    def getWeight(self) -> float: ...
    def isGroundTruth(self) -> bool: ...
    def sample(self, random: java.util.Random) -> com.yahoo.labs.samoa.instances.Instance: ...
    def setGroundTruth(self, double: float) -> None: ...
    def setId(self, double: float) -> None: ...
    @typing.overload
    def setMeasureValue(self, string: str, double: float) -> None: ...
    @typing.overload
    def setMeasureValue(self, string: str, string2: str) -> None: ...

class Clustering(moa.AbstractMOAObject):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arrayList: java.util.ArrayList[moa.gui.visualization.DataPoint], double: float, int: int): ...
    @typing.overload
    def __init__(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance]): ...
    @typing.overload
    def __init__(self, clusterArray: typing.Union[typing.List[Cluster], jpype.JArray]): ...
    @typing.overload
    def __init__(self, autoExpandVector: moa.core.AutoExpandVector[Cluster]): ...
    def add(self, cluster: Cluster) -> None: ...
    @staticmethod
    def classValues(list: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> java.util.HashMap[int, int]: ...
    def dimension(self) -> int: ...
    def get(self, int: int) -> Cluster: ...
    def getClustering(self) -> moa.core.AutoExpandVector[Cluster]: ...
    def getClusteringCopy(self) -> moa.core.AutoExpandVector[Cluster]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMaxInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def remove(self, int: int) -> None: ...
    def size(self) -> int: ...

class Miniball:
    def __init__(self, int: int): ...
    def build(self) -> None: ...
    def center(self) -> typing.MutableSequence[float]: ...
    def check_in(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def clear(self) -> None: ...
    def nr_points(self) -> int: ...
    def nr_support_points(self) -> int: ...
    def radius(self) -> float: ...
    def squared_radius(self) -> float: ...

class SphereCluster(Cluster):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], double2: float): ...
    @typing.overload
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], double2: float, double3: float): ...
    @typing.overload
    def __init__(self, int: int, double: float, random: java.util.Random): ...
    @typing.overload
    def __init__(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], int: int): ...
    def combine(self, sphereCluster: 'SphereCluster') -> None: ...
    def getCenter(self) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getCenterDistance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    @typing.overload
    def getCenterDistance(self, sphereCluster: 'SphereCluster') -> float: ...
    @typing.overload
    def getDistanceVector(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getDistanceVector(self, sphereCluster: 'SphereCluster') -> typing.MutableSequence[float]: ...
    def getHullDistance(self, sphereCluster: 'SphereCluster') -> float: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getRadius(self) -> float: ...
    def getWeight(self) -> float: ...
    def merge(self, sphereCluster: 'SphereCluster') -> None: ...
    def overlapRadiusDegree(self, sphereCluster: 'SphereCluster') -> float: ...
    def overlapSave(self, sphereCluster: 'SphereCluster') -> bool: ...
    def sample(self, random: java.util.Random) -> com.yahoo.labs.samoa.instances.Instance: ...
    def setCenter(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def setRadius(self, double: float) -> None: ...
    def setWeight(self, double: float) -> None: ...

class CFCluster(SphereCluster):
    LS: typing.MutableSequence[float] = ...
    SS: typing.MutableSequence[float] = ...
    @typing.overload
    def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int): ...
    @typing.overload
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int): ...
    @typing.overload
    def __init__(self, cFCluster: 'CFCluster'): ...
    def add(self, cFCluster: 'CFCluster') -> None: ...
    @staticmethod
    def addVectors(doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def getCF(self) -> 'CFCluster': ...
    def getCenter(self) -> typing.MutableSequence[float]: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getN(self) -> float: ...
    def getRadius(self) -> float: ...
    def getWeight(self) -> float: ...
    def setN(self, double: float) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.cluster")``.

    CFCluster: typing.Type[CFCluster]
    Cluster: typing.Type[Cluster]
    Clustering: typing.Type[Clustering]
    Miniball: typing.Type[Miniball]
    SphereCluster: typing.Type[SphereCluster]
