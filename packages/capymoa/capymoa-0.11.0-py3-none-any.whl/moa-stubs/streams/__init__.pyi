
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import moa
import moa.capabilities
import moa.core
import moa.options
import moa.streams.clustering
import moa.streams.filters
import moa.streams.generators
import moa.streams.generators.cd
import moa.tasks
import typing



_ExampleStream__E = typing.TypeVar('_ExampleStream__E', bound=moa.core.Example)  # <E>
class ExampleStream(moa.MOAObject, moa.capabilities.CapabilitiesHandler, typing.Generic[_ExampleStream__E]):
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> _ExampleStream__E: ...
    def restart(self) -> None: ...

class FilteredQueueStream(moa.options.AbstractOptionHandler, ExampleStream):
    filtersOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def addToQueue(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class FilteredStream(moa.options.AbstractOptionHandler, ExampleStream):
    streamOption: moa.options.ClassOption = ...
    filtersOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class InstanceStream(ExampleStream[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]]): ...

class MultiFilteredStream(moa.options.AbstractOptionHandler, ExampleStream):
    streamOption: moa.options.ClassOption = ...
    filtersOption: com.github.javacliparser.ListOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class PartitioningStream(moa.options.AbstractOptionHandler, ExampleStream):
    streamOption: moa.options.ClassOption = ...
    partitionIndexOption: com.github.javacliparser.IntOption = ...
    numPartitionsOption: com.github.javacliparser.IntOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example[com.yahoo.labs.samoa.instances.Instance]: ...
    def restart(self) -> None: ...

class QueueStream(moa.options.AbstractOptionHandler, ExampleStream):
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    @typing.overload
    def measureByteSize(self) -> int: ...
    @typing.overload
    @staticmethod
    def measureByteSize(mOAObject: moa.MOAObject) -> int: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class ArffFileStream(moa.options.AbstractOptionHandler, InstanceStream, moa.streams.generators.cd.ConceptDriftGenerator, moa.capabilities.CapabilitiesHandler):
    arffFileOption: com.github.javacliparser.FileOption = ...
    classIndexOption: com.github.javacliparser.IntOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getEventsList(self) -> java.util.ArrayList[moa.streams.clustering.ClusterEvent]: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class ConceptDriftRealStream(moa.options.AbstractOptionHandler, InstanceStream, moa.capabilities.CapabilitiesHandler):
    streamOption: moa.options.ClassOption = ...
    driftstreamOption: moa.options.ClassOption = ...
    alphaOption: com.github.javacliparser.FloatOption = ...
    positionOption: com.github.javacliparser.IntOption = ...
    widthOption: com.github.javacliparser.IntOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class ConceptDriftStream(moa.options.AbstractOptionHandler, InstanceStream, moa.capabilities.CapabilitiesHandler):
    streamOption: moa.options.ClassOption = ...
    driftstreamOption: moa.options.ClassOption = ...
    alphaOption: com.github.javacliparser.FloatOption = ...
    positionOption: com.github.javacliparser.IntOption = ...
    widthOption: com.github.javacliparser.IntOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class ImbalancedStream(moa.options.AbstractOptionHandler, InstanceStream):
    streamOption: moa.options.ClassOption = ...
    classRatioOption: com.github.javacliparser.StringOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example[com.yahoo.labs.samoa.instances.Instance]: ...
    def restart(self) -> None: ...

class IrrelevantFeatureAppenderStream(moa.options.AbstractOptionHandler, InstanceStream):
    streamOption: moa.options.ClassOption = ...
    numNumericFeaturesOption: com.github.javacliparser.IntOption = ...
    numCategoricalFeaturesOption: com.github.javacliparser.IntOption = ...
    numValuesCategoricalFeatureOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example[com.yahoo.labs.samoa.instances.Instance]: ...
    def restart(self) -> None: ...

class MultiTargetInstanceStream(InstanceStream): ...

class BootstrappedStream(moa.options.AbstractOptionHandler, InstanceStream, MultiTargetInstanceStream):
    streamOption: moa.options.ClassOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example[com.yahoo.labs.samoa.instances.Instance]: ...
    def restart(self) -> None: ...

class CachedInstancesStream(moa.AbstractMOAObject, MultiTargetInstanceStream):
    def __init__(self, instances: com.yahoo.labs.samoa.instances.Instances): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class MultiLabelFilteredStream(moa.options.AbstractOptionHandler, MultiTargetInstanceStream):
    streamOption: moa.options.ClassOption = ...
    filtersOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.Example: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class MultiTargetArffFileStream(moa.options.AbstractOptionHandler, MultiTargetInstanceStream):
    arffFileOption: com.github.javacliparser.FileOption = ...
    outputAttributesOption: com.github.javacliparser.RangeOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class RecurrentConceptDriftStream(ConceptDriftStream):
    widthRecurrenceOption: com.github.javacliparser.IntOption = ...
    stabPeriodOption: com.github.javacliparser.IntOption = ...
    numRepOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.Example: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.streams")``.

    ArffFileStream: typing.Type[ArffFileStream]
    BootstrappedStream: typing.Type[BootstrappedStream]
    CachedInstancesStream: typing.Type[CachedInstancesStream]
    ConceptDriftRealStream: typing.Type[ConceptDriftRealStream]
    ConceptDriftStream: typing.Type[ConceptDriftStream]
    ExampleStream: typing.Type[ExampleStream]
    FilteredQueueStream: typing.Type[FilteredQueueStream]
    FilteredStream: typing.Type[FilteredStream]
    ImbalancedStream: typing.Type[ImbalancedStream]
    InstanceStream: typing.Type[InstanceStream]
    IrrelevantFeatureAppenderStream: typing.Type[IrrelevantFeatureAppenderStream]
    MultiFilteredStream: typing.Type[MultiFilteredStream]
    MultiLabelFilteredStream: typing.Type[MultiLabelFilteredStream]
    MultiTargetArffFileStream: typing.Type[MultiTargetArffFileStream]
    MultiTargetInstanceStream: typing.Type[MultiTargetInstanceStream]
    PartitioningStream: typing.Type[PartitioningStream]
    QueueStream: typing.Type[QueueStream]
    RecurrentConceptDriftStream: typing.Type[RecurrentConceptDriftStream]
    clustering: moa.streams.clustering.__module_protocol__
    filters: moa.streams.filters.__module_protocol__
    generators: moa.streams.generators.__module_protocol__
