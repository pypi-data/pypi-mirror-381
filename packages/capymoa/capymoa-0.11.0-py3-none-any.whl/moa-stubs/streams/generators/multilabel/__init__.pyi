
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import jpype
import moa.core
import moa.options
import moa.streams
import moa.tasks
import typing



class MetaMultilabelGenerator(moa.options.AbstractOptionHandler, moa.streams.MultiTargetInstanceStream):
    binaryGeneratorOption: moa.options.ClassOption = ...
    metaRandomSeedOption: com.github.javacliparser.IntOption = ...
    numLabelsOption: com.github.javacliparser.IntOption = ...
    skewOption: com.github.javacliparser.IntOption = ...
    labelCardinalityOption: com.github.javacliparser.FloatOption = ...
    labelCardinalityVarOption: com.github.javacliparser.FloatOption = ...
    labelCardinalityRatioOption: com.github.javacliparser.FloatOption = ...
    labelDependencyChangeRatioOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class MultilabelArffFileStream(moa.streams.ArffFileStream, moa.streams.MultiTargetInstanceStream):
    numLabelsOption: com.github.javacliparser.IntOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, int: int): ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.streams.generators.multilabel")``.

    MetaMultilabelGenerator: typing.Type[MetaMultilabelGenerator]
    MultilabelArffFileStream: typing.Type[MultilabelArffFileStream]
