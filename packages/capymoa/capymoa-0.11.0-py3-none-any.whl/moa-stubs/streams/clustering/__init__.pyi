
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import moa.cluster
import moa.core
import moa.options
import moa.streams
import moa.tasks
import typing



class ClusterEvent(java.util.EventObject):
    def __init__(self, object: typing.Any, long: int, string: str, string2: str): ...
    def getMessage(self) -> str: ...
    def getTimestamp(self) -> int: ...
    def getType(self) -> str: ...

class ClusterEventListener(java.util.EventListener):
    def changeCluster(self, clusterEvent: ClusterEvent) -> None: ...

class ClusteringStream(moa.options.AbstractOptionHandler, moa.streams.InstanceStream):
    decayHorizonOption: com.github.javacliparser.IntOption = ...
    decayThresholdOption: com.github.javacliparser.FloatOption = ...
    evaluationFrequencyOption: com.github.javacliparser.IntOption = ...
    numAttsOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDecayHorizon(self) -> int: ...
    def getDecayThreshold(self) -> float: ...
    def getEvaluationFrequency(self) -> int: ...

class FileStream(ClusteringStream):
    arffFileOption: com.github.javacliparser.FileOption = ...
    classIndexOption: com.github.javacliparser.IntOption = ...
    normalizeOption: com.github.javacliparser.FlagOption = ...
    removeAttributesOption: com.github.javacliparser.ListOption = ...
    keepNonNumericalAttrOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class RandomRBFGeneratorEvents(ClusteringStream):
    modelRandomSeedOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    numClusterOption: com.github.javacliparser.IntOption = ...
    numClusterRangeOption: com.github.javacliparser.IntOption = ...
    kernelRadiiOption: com.github.javacliparser.FloatOption = ...
    kernelRadiiRangeOption: com.github.javacliparser.FloatOption = ...
    densityRangeOption: com.github.javacliparser.FloatOption = ...
    speedOption: com.github.javacliparser.IntOption = ...
    speedRangeOption: com.github.javacliparser.IntOption = ...
    noiseLevelOption: com.github.javacliparser.FloatOption = ...
    noiseInClusterOption: com.github.javacliparser.FlagOption = ...
    eventFrequencyOption: com.github.javacliparser.IntOption = ...
    eventMergeSplitOption: com.github.javacliparser.FlagOption = ...
    eventDeleteCreateOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def addClusterChangeListener(self, clusterEventListener: typing.Union[ClusterEventListener, typing.Callable]) -> None: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getGeneratingClusters(self) -> moa.cluster.Clustering: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getMicroClustering(self) -> moa.cluster.Clustering: ...
    def getParameterString(self) -> str: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def removeClusterChangeListener(self, clusterEventListener: typing.Union[ClusterEventListener, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class SimpleCSVStream(ClusteringStream):
    csvFileOption: com.github.javacliparser.FileOption = ...
    splitCharOption: com.github.javacliparser.StringOption = ...
    classIndexOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.streams.clustering")``.

    ClusterEvent: typing.Type[ClusterEvent]
    ClusterEventListener: typing.Type[ClusterEventListener]
    ClusteringStream: typing.Type[ClusteringStream]
    FileStream: typing.Type[FileStream]
    RandomRBFGeneratorEvents: typing.Type[RandomRBFGeneratorEvents]
    SimpleCSVStream: typing.Type[SimpleCSVStream]
