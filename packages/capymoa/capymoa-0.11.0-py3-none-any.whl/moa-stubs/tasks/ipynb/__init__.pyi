
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import typing



class NotebookBuilder:
    def __init__(self): ...
    def addCode(self) -> 'NotebookCellBuilder': ...
    def addMarkdown(self) -> 'NotebookCellBuilder': ...
    def addRaw(self) -> 'NotebookCellBuilder': ...
    def build(self) -> str: ...
    def getCellByIndex(self, int: int) -> 'NotebookCellBuilder': ...
    def getLastCell(self) -> 'NotebookCellBuilder': ...

class NotebookCellBuilder:
    def addSource(self, string: str) -> 'NotebookCellBuilder': ...
    def build(self) -> java.lang.StringBuilder: ...

class OptionsString:
    def __init__(self, string: str): ...
    def createOptionsList(self) -> None: ...
    def generateOptionsString(self) -> str: ...
    def getClassFullName(self) -> str: ...
    def getClassShortName(self) -> str: ...
    def getInputString(self) -> str: ...

class CodeCellBuilder(NotebookCellBuilder): ...

class MarkDownCellBuilder(NotebookCellBuilder):
    def __init__(self): ...

class RawCellBuilder(NotebookCellBuilder):
    def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.tasks.ipynb")``.

    CodeCellBuilder: typing.Type[CodeCellBuilder]
    MarkDownCellBuilder: typing.Type[MarkDownCellBuilder]
    NotebookBuilder: typing.Type[NotebookBuilder]
    NotebookCellBuilder: typing.Type[NotebookCellBuilder]
    OptionsString: typing.Type[OptionsString]
    RawCellBuilder: typing.Type[RawCellBuilder]
