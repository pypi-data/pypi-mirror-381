
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import jpype
import moa.classifiers
import moa.core
import moa.learners
import moa.options
import typing



class AMRulesClassifierFunction: ...

class AMRulesLearner(moa.learners.Learner[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]]):
    def getCurrentError(self) -> float: ...

class AMRulesRegressorFunction(AMRulesLearner, moa.classifiers.Regressor): ...

class AdaptiveNodePredictor(moa.classifiers.AbstractClassifier, AMRulesRegressorFunction):
    def __init__(self): ...
    def getCurrentError(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class LowPassFilteredLearner(moa.classifiers.AbstractClassifier, AMRulesRegressorFunction):
    baseLearnerOption: moa.options.ClassOption = ...
    alphaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getCurrentError(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class Perceptron(moa.classifiers.AbstractClassifier, AMRulesRegressorFunction):
    constantLearningRatioDecayOption: com.github.javacliparser.FlagOption = ...
    learningRatioOption: com.github.javacliparser.FloatOption = ...
    learningRateDecayOption: com.github.javacliparser.FloatOption = ...
    fadingFactorOption: com.github.javacliparser.FloatOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    perceptronattributeStatistics: moa.core.DoubleVector = ...
    squaredperceptronattributeStatistics: moa.core.DoubleVector = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, perceptron: 'Perceptron'): ...
    def computeSD(self, double: float, double2: float, double3: float) -> float: ...
    def getCurrentError(self) -> float: ...
    def getInstancesSeen(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def getWeights(self) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def normalizeWeights(self) -> None: ...
    def normalizedInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def normalizedPrediction(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def prediction(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    def reset(self) -> None: ...
    def resetError(self) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def setInstancesSeen(self, int: int) -> None: ...
    def setLearningRatio(self, double: float) -> None: ...
    def setWeights(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def updateWeights(self, instance: com.yahoo.labs.samoa.instances.Instance, double: float) -> None: ...

class TargetMean(moa.classifiers.AbstractClassifier, AMRulesRegressorFunction):
    fadingErrorFactorOption: com.github.javacliparser.FloatOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, targetMean: 'TargetMean'): ...
    def getCurrentError(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def reset(self, double: float, double2: float) -> None: ...
    def resetError(self) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class FadingTargetMean(TargetMean, AMRulesRegressorFunction):
    fadingFactorOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.functions")``.

    AMRulesClassifierFunction: typing.Type[AMRulesClassifierFunction]
    AMRulesLearner: typing.Type[AMRulesLearner]
    AMRulesRegressorFunction: typing.Type[AMRulesRegressorFunction]
    AdaptiveNodePredictor: typing.Type[AdaptiveNodePredictor]
    FadingTargetMean: typing.Type[FadingTargetMean]
    LowPassFilteredLearner: typing.Type[LowPassFilteredLearner]
    Perceptron: typing.Type[Perceptron]
    TargetMean: typing.Type[TargetMean]
