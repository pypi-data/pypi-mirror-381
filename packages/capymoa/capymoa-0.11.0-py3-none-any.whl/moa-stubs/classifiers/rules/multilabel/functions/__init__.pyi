
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import jpype
import moa.classifiers
import moa.classifiers.multitarget
import moa.core
import moa.options
import typing



class AMRulesFunction:
    def resetWithMemory(self) -> None: ...
    def selectOutputsToLearn(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...

class AbstractAMRulesFunctionBasicMlLearner(moa.classifiers.multitarget.BasicMultiLabelLearner, AMRulesFunction):
    def __init__(self): ...
    def resetWithMemory(self) -> None: ...
    def selectOutputsToLearn(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...

class AdaptiveMultiTargetRegressor(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiTargetRegressor, AMRulesFunction):
    baseLearnerOption1: moa.options.ClassOption = ...
    baseLearnerOption2: moa.options.ClassOption = ...
    errorMeasurerOption: moa.options.ClassOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getPurposeString(self) -> str: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def resetWithMemory(self) -> None: ...
    def selectOutputsToLearn(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class DominantLabelsClassifier(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiLabelClassifier, AMRulesFunction):
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def resetWithMemory(self) -> None: ...
    def selectOutputsToLearn(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class StackedPredictor(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiTargetRegressor, AMRulesFunction):
    constantLearningRatioDecayOption: com.github.javacliparser.FlagOption = ...
    learningRatioOption: com.github.javacliparser.FloatOption = ...
    learningRatio2ndLayerOption: com.github.javacliparser.FloatOption = ...
    learningRateDecayOption: com.github.javacliparser.FloatOption = ...
    skipStackingOption: com.github.javacliparser.FlagOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    printWeightsOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def resetWithMemory(self) -> None: ...
    def selectOutputsToLearn(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class MultiLabelNaiveBayes(AbstractAMRulesFunctionBasicMlLearner, moa.classifiers.MultiLabelClassifier, AMRulesFunction):
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def resetWithMemory(self) -> None: ...

class MultiLabelPerceptronClassification(AbstractAMRulesFunctionBasicMlLearner, moa.classifiers.MultiLabelClassifier, AMRulesFunction):
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def resetWithMemory(self) -> None: ...

class MultiTargetMeanRegressor(AbstractAMRulesFunctionBasicMlLearner, moa.classifiers.MultiTargetRegressor, AMRulesFunction):
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def resetWithMemory(self) -> None: ...

class MultiTargetPerceptronRegressor(AbstractAMRulesFunctionBasicMlLearner, moa.classifiers.MultiTargetRegressor, AMRulesFunction):
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def resetWithMemory(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel.functions")``.

    AMRulesFunction: typing.Type[AMRulesFunction]
    AbstractAMRulesFunctionBasicMlLearner: typing.Type[AbstractAMRulesFunctionBasicMlLearner]
    AdaptiveMultiTargetRegressor: typing.Type[AdaptiveMultiTargetRegressor]
    DominantLabelsClassifier: typing.Type[DominantLabelsClassifier]
    MultiLabelNaiveBayes: typing.Type[MultiLabelNaiveBayes]
    MultiLabelPerceptronClassification: typing.Type[MultiLabelPerceptronClassification]
    MultiTargetMeanRegressor: typing.Type[MultiTargetMeanRegressor]
    MultiTargetPerceptronRegressor: typing.Type[MultiTargetPerceptronRegressor]
    StackedPredictor: typing.Type[StackedPredictor]
