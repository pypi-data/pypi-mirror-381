
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import moa.core
import moa.options
import typing



class MultiLabelSplitCriterion(moa.options.OptionHandler):
    def getBranchesSplitMerits(self, doubleVectorArray: typing.Union[typing.List[typing.MutableSequence[moa.core.DoubleVector]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getMeritOfSplit(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[typing.MutableSequence[moa.core.DoubleVector]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> float: ...

class MultiTargetVarianceRatio(moa.options.AbstractOptionHandler, MultiLabelSplitCriterion):
    def __init__(self): ...
    def getBranchSplitVarianceOutput(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getBranchesSplitMerits(self, doubleVectorArray: typing.Union[typing.List[typing.MutableSequence[moa.core.DoubleVector]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMeritOfSplit(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[typing.MutableSequence[moa.core.DoubleVector]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> float: ...

class MultilabelInformationGain(moa.options.AbstractOptionHandler, MultiLabelSplitCriterion):
    def __init__(self): ...
    def getBranchSplitEntropyOutput(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getBranchesSplitMerits(self, doubleVectorArray: typing.Union[typing.List[typing.MutableSequence[moa.core.DoubleVector]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMeritOfSplit(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[typing.MutableSequence[moa.core.DoubleVector]], jpype.JArray]) -> float: ...
    def getPurposeString(self) -> str: ...
    def getRangeOfMerit(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> float: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel.core.splitcriteria")``.

    MultiLabelSplitCriterion: typing.Type[MultiLabelSplitCriterion]
    MultiTargetVarianceRatio: typing.Type[MultiTargetVarianceRatio]
    MultilabelInformationGain: typing.Type[MultilabelInformationGain]
