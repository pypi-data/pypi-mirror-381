
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.lang
import jpype
import moa.core
import moa.options
import typing



class OutputAttributesSelector(moa.options.OptionHandler):
    def getNextOutputIndices(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray]) -> typing.MutableSequence[int]: ...

class EntropyThreshold(moa.options.AbstractOptionHandler, OutputAttributesSelector):
    thresholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getNextOutputIndices(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray]) -> typing.MutableSequence[int]: ...
    def getPurposeString(self) -> str: ...

class SelectAllOutputs(moa.options.AbstractOptionHandler, OutputAttributesSelector):
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getNextOutputIndices(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray]) -> typing.MutableSequence[int]: ...

class StdDevThreshold(moa.options.AbstractOptionHandler, OutputAttributesSelector):
    thresholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getNextOutputIndices(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray]) -> typing.MutableSequence[int]: ...

class VarianceThreshold(moa.options.AbstractOptionHandler, OutputAttributesSelector):
    thresholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getNextOutputIndices(self, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray]) -> typing.MutableSequence[int]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel.outputselectors")``.

    EntropyThreshold: typing.Type[EntropyThreshold]
    OutputAttributesSelector: typing.Type[OutputAttributesSelector]
    SelectAllOutputs: typing.Type[SelectAllOutputs]
    StdDevThreshold: typing.Type[StdDevThreshold]
    VarianceThreshold: typing.Type[VarianceThreshold]
