
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa
import moa.classifiers.rules.core.anomalydetection.probabilityfunctions
import moa.options
import typing



class AnomalyDetector(moa.options.OptionHandler):
    def copy(self) -> 'AnomalyDetector': ...
    def getAnomalyScore(self) -> float: ...
    def updateAndCheckAnomalyDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...

class AbstractAnomalyDetector(moa.options.AbstractOptionHandler, AnomalyDetector):
    def __init__(self): ...
    @typing.overload
    def copy(self) -> AnomalyDetector: ...
    @typing.overload
    @staticmethod
    def copy(mOAObject: moa.MOAObject) -> moa.MOAObject: ...
    def updateAndCheckAnomalyDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...

class AnomalinessRatioScore(AbstractAnomalyDetector):
    percentageAnomalousAttributesOption: com.github.javacliparser.FloatOption = ...
    univariateAnomalyprobabilityThresholdOption: com.github.javacliparser.FloatOption = ...
    minNumberInstancesOption: com.github.javacliparser.IntOption = ...
    probabilityFunctionOption: moa.options.ClassOption = ...
    anomalyScore: float = ...
    def __init__(self): ...
    def getAnomalyScore(self) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def updateAndCheckAnomalyDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...

class NoAnomalyDetection(AbstractAnomalyDetector):
    anomalyScore: float = ...
    def __init__(self): ...
    def getAnomalyScore(self) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def updateAndCheckAnomalyDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...

class OddsRatioScore(AbstractAnomalyDetector):
    minNumberInstancesOption: com.github.javacliparser.IntOption = ...
    thresholdOption: com.github.javacliparser.FloatOption = ...
    probabilityFunctionOption: moa.options.ClassOption = ...
    anomalyScore: float = ...
    def __init__(self): ...
    def getAnomalyScore(self) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def updateAndCheckAnomalyDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.core.anomalydetection")``.

    AbstractAnomalyDetector: typing.Type[AbstractAnomalyDetector]
    AnomalinessRatioScore: typing.Type[AnomalinessRatioScore]
    AnomalyDetector: typing.Type[AnomalyDetector]
    NoAnomalyDetection: typing.Type[NoAnomalyDetection]
    OddsRatioScore: typing.Type[OddsRatioScore]
    probabilityfunctions: moa.classifiers.rules.core.anomalydetection.probabilityfunctions.__module_protocol__
