
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import moa
import typing



class ErrorWeightedVote:
    def addVote(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], double2: float) -> None: ...
    def computeWeightedVote(self) -> typing.MutableSequence[float]: ...
    def copy(self) -> moa.MOAObject: ...
    def getNumberVotes(self) -> int: ...
    def getWeightedError(self) -> float: ...
    def getWeights(self) -> typing.MutableSequence[float]: ...

class Vote:
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], double2: float): ...
    def getError(self) -> float: ...
    def getVote(self) -> typing.MutableSequence[float]: ...
    def normalize(self) -> None: ...
    def setError(self, double: float) -> None: ...
    def setVote(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sumVoteDistrib(self) -> float: ...

class AbstractErrorWeightedVote(moa.AbstractMOAObject, ErrorWeightedVote):
    def __init__(self): ...
    def addVote(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], double2: float) -> None: ...
    def computeWeightedVote(self) -> typing.MutableSequence[float]: ...
    def getNumberVotes(self) -> int: ...
    def getWeightedError(self) -> float: ...
    def getWeights(self) -> typing.MutableSequence[float]: ...

class ExpNegErrorWeightedVote(AbstractErrorWeightedVote):
    def __init__(self): ...
    def computeWeightedVote(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...

class InverseErrorWeightedVote(AbstractErrorWeightedVote):
    def __init__(self): ...
    def computeWeightedVote(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...

class MinErrorWeightedVote(AbstractErrorWeightedVote):
    def __init__(self): ...
    def computeWeightedVote(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...

class OneMinusErrorWeightedVote(AbstractErrorWeightedVote):
    def __init__(self): ...
    def computeWeightedVote(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...

class UniformWeightedVote(AbstractErrorWeightedVote):
    def __init__(self): ...
    def computeWeightedVote(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.core.voting")``.

    AbstractErrorWeightedVote: typing.Type[AbstractErrorWeightedVote]
    ErrorWeightedVote: typing.Type[ErrorWeightedVote]
    ExpNegErrorWeightedVote: typing.Type[ExpNegErrorWeightedVote]
    InverseErrorWeightedVote: typing.Type[InverseErrorWeightedVote]
    MinErrorWeightedVote: typing.Type[MinErrorWeightedVote]
    OneMinusErrorWeightedVote: typing.Type[OneMinusErrorWeightedVote]
    UniformWeightedVote: typing.Type[UniformWeightedVote]
    Vote: typing.Type[Vote]
