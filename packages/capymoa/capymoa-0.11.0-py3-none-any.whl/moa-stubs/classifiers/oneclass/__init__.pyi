
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.io
import java.lang
import java.util
import jpype
import moa.classifiers
import moa.core
import typing



class Autoencoder(moa.classifiers.AbstractClassifier, moa.classifiers.Classifier, moa.classifiers.OneClassClassifier):
    hiddenLayerOption: com.github.javacliparser.IntOption = ...
    learningRateOption: com.github.javacliparser.FloatOption = ...
    thresholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getAnomalyScore(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def initialize(self, collection: typing.Union[java.util.Collection[com.yahoo.labs.samoa.instances.Instance], typing.Sequence[com.yahoo.labs.samoa.instances.Instance], typing.Set[com.yahoo.labs.samoa.instances.Instance]]) -> None: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class HSTreeNode(java.io.Serializable):
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], int: int, int2: int, random: java.util.Random): ...
    def score(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int) -> float: ...
    def updateMass(self, instance: com.yahoo.labs.samoa.instances.Instance, boolean: bool) -> None: ...
    def updateModel(self) -> None: ...

class HSTrees(moa.classifiers.AbstractClassifier, moa.classifiers.Classifier, moa.classifiers.OneClassClassifier):
    windowSizeOption: com.github.javacliparser.IntOption = ...
    numTreesOption: com.github.javacliparser.IntOption = ...
    maxDepthOption: com.github.javacliparser.IntOption = ...
    anomalyThresholdOption: com.github.javacliparser.FloatOption = ...
    sizeLimitOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getAnomalyScore(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def initialize(self, collection: typing.Union[java.util.Collection[com.yahoo.labs.samoa.instances.Instance], typing.Sequence[com.yahoo.labs.samoa.instances.Instance], typing.Set[com.yahoo.labs.samoa.instances.Instance]]) -> None: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class NearestNeighbourDescription(moa.classifiers.AbstractClassifier, moa.classifiers.Classifier, moa.classifiers.OneClassClassifier):
    neighbourhoodSizeOption: com.github.javacliparser.IntOption = ...
    thresholdOption: com.github.javacliparser.FloatOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance]): ...
    def getAnomalyScore(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def initialize(self, collection: typing.Union[java.util.Collection[com.yahoo.labs.samoa.instances.Instance], typing.Sequence[com.yahoo.labs.samoa.instances.Instance], typing.Set[com.yahoo.labs.samoa.instances.Instance]]) -> None: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.oneclass")``.

    Autoencoder: typing.Type[Autoencoder]
    HSTreeNode: typing.Type[HSTreeNode]
    HSTrees: typing.Type[HSTrees]
    NearestNeighbourDescription: typing.Type[NearestNeighbourDescription]
