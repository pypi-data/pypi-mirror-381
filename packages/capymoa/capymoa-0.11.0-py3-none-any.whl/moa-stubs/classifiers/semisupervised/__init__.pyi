
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.classifiers
import moa.classifiers.semisupervised.attributeSimilarity
import moa.core
import moa.options
import moa.tasks
import typing



class ClusterAndLabelClassifier(moa.classifiers.AbstractClassifier, moa.classifiers.SemiSupervisedLearner):
    clustererOption: moa.options.ClassOption = ...
    usePseudoLabelOption: com.github.javacliparser.FlagOption = ...
    debugModeOption: com.github.javacliparser.FlagOption = ...
    kNearestClusterOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def addInitialWarmupTrainingInstances(self) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnUnlabeledInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...

class SSLTaskTester(moa.classifiers.AbstractClassifier, moa.classifiers.SemiSupervisedLearner):
    def __init__(self): ...
    def addInitialWarmupTrainingInstances(self) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnUnlabeledInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...

class SelfTrainingClassifier(moa.classifiers.AbstractClassifier, moa.classifiers.SemiSupervisedLearner):
    learnerOption: moa.options.ClassOption = ...
    batchSizeOption: com.github.javacliparser.IntOption = ...
    thresholdChoiceOption: com.github.javacliparser.MultiChoiceOption = ...
    thresholdOption: com.github.javacliparser.FloatOption = ...
    horizonOption: com.github.javacliparser.IntOption = ...
    ratioThresholdOption: com.github.javacliparser.FloatOption = ...
    confidenceOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def addInitialWarmupTrainingInstances(self) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnUnlabeledInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...

class SelfTrainingIncrementalClassifier(moa.classifiers.AbstractClassifier, moa.classifiers.SemiSupervisedLearner):
    learnerOption: moa.options.ClassOption = ...
    thresholdChoiceOption: com.github.javacliparser.MultiChoiceOption = ...
    thresholdOption: com.github.javacliparser.FloatOption = ...
    horizonOption: com.github.javacliparser.IntOption = ...
    ratioThresholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def addInitialWarmupTrainingInstances(self) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnUnlabeledInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...

class SelfTrainingWeightingClassifier(moa.classifiers.AbstractClassifier, moa.classifiers.SemiSupervisedLearner):
    learnerOption: moa.options.ClassOption = ...
    equalWeightOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def addInitialWarmupTrainingInstances(self) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnUnlabeledInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.semisupervised")``.

    ClusterAndLabelClassifier: typing.Type[ClusterAndLabelClassifier]
    SSLTaskTester: typing.Type[SSLTaskTester]
    SelfTrainingClassifier: typing.Type[SelfTrainingClassifier]
    SelfTrainingIncrementalClassifier: typing.Type[SelfTrainingIncrementalClassifier]
    SelfTrainingWeightingClassifier: typing.Type[SelfTrainingWeightingClassifier]
    attributeSimilarity: moa.classifiers.semisupervised.attributeSimilarity.__module_protocol__
