
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import jpype
import moa.capabilities
import moa.classifiers
import moa.core
import typing



class MajorityClass(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class NoChange(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class Perceptron(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    learningRatioOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getNumberAttributes(self) -> int: ...
    def getNumberClasses(self) -> int: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def getWeights(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def isRandomizable(self) -> bool: ...
    def prediction(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int) -> float: ...
    def resetLearningImpl(self) -> None: ...
    def setWeights(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class SGD(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.classifiers.Regressor):
    lambdaRegularizationOption: com.github.javacliparser.FloatOption = ...
    learningRateOption: com.github.javacliparser.FloatOption = ...
    lossFunctionOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def getLambda(self) -> float: ...
    def getLearningRate(self) -> float: ...
    def getLossFunction(self) -> int: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def reset(self) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def setLambda(self, double: float) -> None: ...
    def setLearningRate(self, double: float) -> None: ...
    def setLossFunction(self, int: int) -> None: ...
    def toString(self) -> str: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class SGDMultiClass(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.classifiers.Regressor):
    lambdaRegularizationOption: com.github.javacliparser.FloatOption = ...
    learningRateOption: com.github.javacliparser.FloatOption = ...
    lossFunctionOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def getLambda(self) -> float: ...
    def getLearningRate(self) -> float: ...
    def getLossFunction(self) -> int: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def reset(self) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def setLambda(self, double: float) -> None: ...
    def setLearningRate(self, double: float) -> None: ...
    def setLossFunction(self, int: int) -> None: ...
    def toString(self) -> str: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int) -> None: ...

class SPegasos(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    lambdaRegularizationOption: com.github.javacliparser.FloatOption = ...
    lossFunctionOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def getLambda(self) -> float: ...
    def getLossFunction(self) -> int: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def reset(self) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def setLambda(self, double: float) -> None: ...
    def setLossFunction(self, int: int) -> None: ...
    def toString(self) -> str: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class AdaGrad(SGD):
    epsilonOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getEpsilon(self) -> float: ...
    def getPurposeString(self) -> str: ...
    def resetLearningImpl(self) -> None: ...
    def setEpsilon(self, double: float) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.functions")``.

    AdaGrad: typing.Type[AdaGrad]
    MajorityClass: typing.Type[MajorityClass]
    NoChange: typing.Type[NoChange]
    Perceptron: typing.Type[Perceptron]
    SGD: typing.Type[SGD]
    SGDMultiClass: typing.Type[SGDMultiClass]
    SPegasos: typing.Type[SPegasos]
