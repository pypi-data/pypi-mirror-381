
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.capabilities
import moa.classifiers
import moa.classifiers.core.attributeclassobservers
import moa.core
import typing



class NaiveBayes(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    @staticmethod
    def doNaiveBayesPrediction(instance: com.yahoo.labs.samoa.instances.Instance, doubleVector: moa.core.DoubleVector, autoExpandVector: moa.core.AutoExpandVector[moa.classifiers.core.attributeclassobservers.AttributeClassObserver]) -> typing.MutableSequence[float]: ...
    @staticmethod
    def doNaiveBayesPredictionLog(instance: com.yahoo.labs.samoa.instances.Instance, doubleVector: moa.core.DoubleVector, autoExpandVector: moa.core.AutoExpandVector[moa.classifiers.core.attributeclassobservers.AttributeClassObserver], autoExpandVector2: moa.core.AutoExpandVector[moa.classifiers.core.attributeclassobservers.AttributeClassObserver]) -> typing.MutableSequence[float]: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def manageMemory(self, int: int, int2: int) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class NaiveBayesMultinomial(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    laplaceCorrectionOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def totalSize(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.bayes")``.

    NaiveBayes: typing.Type[NaiveBayes]
    NaiveBayesMultinomial: typing.Type[NaiveBayesMultinomial]
