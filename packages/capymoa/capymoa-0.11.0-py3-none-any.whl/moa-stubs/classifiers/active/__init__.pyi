
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.classifiers
import moa.classifiers.active.budget
import moa.core
import moa.options
import typing



class ALClassifier(moa.classifiers.Classifier):
    def getLastLabelAcqReport(self) -> int: ...

class ALRandom(moa.classifiers.AbstractClassifier, ALClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    budgetManagerOption: moa.options.ClassOption = ...
    classifier: moa.classifiers.Classifier = ...
    budgetManager: moa.classifiers.active.budget.BudgetManager = ...
    def __init__(self): ...
    def getLastLabelAcqReport(self) -> int: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class ALUncertainty(moa.classifiers.AbstractClassifier, ALClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    activeLearningStrategyOption: com.github.javacliparser.MultiChoiceOption = ...
    budgetOption: com.github.javacliparser.FloatOption = ...
    fixedThresholdOption: com.github.javacliparser.FloatOption = ...
    stepOption: com.github.javacliparser.FloatOption = ...
    numInstancesInitOption: com.github.javacliparser.FloatOption = ...
    classifier: moa.classifiers.Classifier = ...
    lastLabelAcq: int = ...
    costLabeling: int = ...
    iterationControl: int = ...
    newThreshold: float = ...
    maxPosterior: float = ...
    accuracyBaseLearner: float = ...
    def __init__(self): ...
    def getLastLabelAcqReport(self) -> int: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.active")``.

    ALClassifier: typing.Type[ALClassifier]
    ALRandom: typing.Type[ALRandom]
    ALUncertainty: typing.Type[ALUncertainty]
    budget: moa.classifiers.active.budget.__module_protocol__
