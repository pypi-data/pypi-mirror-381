
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.lang
import moa
import typing



class InstanceConditionalTest(moa.AbstractMOAObject):
    def __init__(self): ...
    def branchForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...
    def describeConditionForBranch(self, int: int, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> str: ...
    def getAttsTestDependsOn(self) -> typing.MutableSequence[int]: ...
    def maxBranches(self) -> int: ...
    def resultKnownForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> bool: ...

class InstanceConditionalBinaryTest(InstanceConditionalTest):
    def __init__(self): ...
    def maxBranches(self) -> int: ...

class NominalAttributeMultiwayTest(InstanceConditionalTest):
    def __init__(self, int: int): ...
    def branchForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...
    def describeConditionForBranch(self, int: int, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> str: ...
    def getAttsTestDependsOn(self) -> typing.MutableSequence[int]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def maxBranches(self) -> int: ...

class NominalAttributeBinaryTest(InstanceConditionalBinaryTest):
    def __init__(self, int: int, int2: int): ...
    def branchForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...
    def describeConditionForBranch(self, int: int, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> str: ...
    def getAttsTestDependsOn(self) -> typing.MutableSequence[int]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getValue(self) -> float: ...

class NumericAttributeBinaryTest(InstanceConditionalBinaryTest):
    def __init__(self, int: int, double: float, boolean: bool): ...
    def branchForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...
    def describeConditionForBranch(self, int: int, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> str: ...
    def getAttsTestDependsOn(self) -> typing.MutableSequence[int]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getSplitValue(self) -> float: ...
    def getValue(self) -> float: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.core.conditionaltests")``.

    InstanceConditionalBinaryTest: typing.Type[InstanceConditionalBinaryTest]
    InstanceConditionalTest: typing.Type[InstanceConditionalTest]
    NominalAttributeBinaryTest: typing.Type[NominalAttributeBinaryTest]
    NominalAttributeMultiwayTest: typing.Type[NominalAttributeMultiwayTest]
    NumericAttributeBinaryTest: typing.Type[NumericAttributeBinaryTest]
