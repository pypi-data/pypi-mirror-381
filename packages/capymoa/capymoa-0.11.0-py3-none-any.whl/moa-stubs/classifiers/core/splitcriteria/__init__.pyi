
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.lang
import jpype
import moa.options
import typing



class SplitCriterion(moa.options.OptionHandler):
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class GiniSplitCriterion(moa.options.AbstractOptionHandler, SplitCriterion):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def computeGini(doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    @typing.overload
    @staticmethod
    def computeGini(doubleArray: typing.Union[typing.List[float], jpype.JArray], double2: float) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class InfoGainSplitCriterion(moa.options.AbstractOptionHandler, SplitCriterion):
    minBranchFracOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def computeEntropy(doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    @typing.overload
    @staticmethod
    def computeEntropy(doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    @staticmethod
    def numSubsetsGreaterThanFrac(doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], double2: float) -> int: ...

class VarianceReductionSplitCriterion(moa.options.AbstractOptionHandler, SplitCriterion):
    def __init__(self): ...
    @staticmethod
    def computeSD(doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class InfoGainSplitCriterionMultilabel(InfoGainSplitCriterion):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def computeEntropy(doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    @typing.overload
    @staticmethod
    def computeEntropy(doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class SDRSplitCriterion(VarianceReductionSplitCriterion):
    def __init__(self): ...
    @staticmethod
    def computeSD(doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.core.splitcriteria")``.

    GiniSplitCriterion: typing.Type[GiniSplitCriterion]
    InfoGainSplitCriterion: typing.Type[InfoGainSplitCriterion]
    InfoGainSplitCriterionMultilabel: typing.Type[InfoGainSplitCriterionMultilabel]
    SDRSplitCriterion: typing.Type[SDRSplitCriterion]
    SplitCriterion: typing.Type[SplitCriterion]
    VarianceReductionSplitCriterion: typing.Type[VarianceReductionSplitCriterion]
