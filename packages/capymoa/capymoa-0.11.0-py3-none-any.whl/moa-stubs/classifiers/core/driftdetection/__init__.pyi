
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.lang
import moa
import moa.options
import typing



class ADWIN(moa.AbstractMOAObject):
    DELTA: typing.ClassVar[float] = ...
    MAXBUCKETS: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    @typing.overload
    def __init__(self, int: int): ...
    def compressBuckets(self) -> None: ...
    def deleteElement(self) -> int: ...
    def getBucketsUsed(self) -> int: ...
    def getChange(self) -> bool: ...
    def getClock(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getDetect(self) -> bool: ...
    def getEstimation(self) -> float: ...
    def getEstimatorInfo(self) -> str: ...
    def getNumberDetections(self) -> int: ...
    def getTotal(self) -> float: ...
    def getVariance(self) -> float: ...
    def getWarning(self) -> bool: ...
    def getWidth(self) -> int: ...
    def getWidthT(self) -> float: ...
    def resetChange(self) -> None: ...
    def setClock(self, int: int) -> None: ...
    @typing.overload
    def setInput(self, double: float) -> bool: ...
    @typing.overload
    def setInput(self, double: float, double2: float) -> bool: ...
    def setW(self, int: int) -> None: ...

class ChangeDetector(moa.options.OptionHandler):
    def copy(self) -> 'ChangeDetector': ...
    def getChange(self) -> bool: ...
    def getDelay(self) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getEstimation(self) -> float: ...
    def getOutput(self) -> typing.MutableSequence[float]: ...
    def getWarningZone(self) -> bool: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class AbstractChangeDetector(moa.options.AbstractOptionHandler, ChangeDetector):
    def __init__(self): ...
    @typing.overload
    def copy(self) -> ChangeDetector: ...
    @typing.overload
    @staticmethod
    def copy(mOAObject: moa.MOAObject) -> moa.MOAObject: ...
    def getChange(self) -> bool: ...
    def getDelay(self) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getEstimation(self) -> float: ...
    def getOutput(self) -> typing.MutableSequence[float]: ...
    def getWarningZone(self) -> bool: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class ADWINChangeDetector(AbstractChangeDetector):
    deltaAdwinOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class CusumDM(AbstractChangeDetector):
    minNumInstancesOption: com.github.javacliparser.IntOption = ...
    deltaOption: com.github.javacliparser.FloatOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class DDM(AbstractChangeDetector):
    minNumInstancesOption: com.github.javacliparser.IntOption = ...
    warningLevelOption: com.github.javacliparser.FloatOption = ...
    outcontrolLevelOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class EDDM(AbstractChangeDetector):
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class EWMAChartDM(AbstractChangeDetector):
    minNumInstancesOption: com.github.javacliparser.IntOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class EnsembleDriftDetectionMethods(AbstractChangeDetector):
    minNumInstancesOption: com.github.javacliparser.IntOption = ...
    changeDetectorsOption: com.github.javacliparser.ListOption = ...
    predictionOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class GeometricMovingAverageDM(AbstractChangeDetector):
    minNumInstancesOption: com.github.javacliparser.IntOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    alphaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class HDDM_A_Test(AbstractChangeDetector):
    driftConfidenceOption: com.github.javacliparser.FloatOption = ...
    warningConfidenceOption: com.github.javacliparser.FloatOption = ...
    oneSidedTestOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getEstimation(self) -> float: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class HDDM_W_Test(AbstractChangeDetector):
    driftConfidenceOption: com.github.javacliparser.FloatOption = ...
    warningConfidenceOption: com.github.javacliparser.FloatOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    oneSidedTestOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def detectMeanIncrement(self, sampleInfo: 'HDDM_W_Test.SampleInfo', sampleInfo2: 'HDDM_W_Test.SampleInfo', double: float) -> bool: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def input(self, boolean: bool) -> None: ...
    @typing.overload
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...
    class SampleInfo:
        EWMA_Estimator: float = ...
        independentBoundedConditionSum: float = ...
        def __init__(self): ...

class PageHinkleyDM(AbstractChangeDetector):
    minNumInstancesOption: com.github.javacliparser.IntOption = ...
    deltaOption: com.github.javacliparser.FloatOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    alphaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class RDDM(AbstractChangeDetector):
    minNumInstancesOption: com.github.javacliparser.IntOption = ...
    warningLevelOption: com.github.javacliparser.FloatOption = ...
    driftLevelOption: com.github.javacliparser.FloatOption = ...
    maxSizeConceptOption: com.github.javacliparser.IntOption = ...
    minSizeStableConceptOption: com.github.javacliparser.IntOption = ...
    warnLimitOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def initialize(self) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class SEEDChangeDetector(AbstractChangeDetector):
    deltaSEEDOption: com.github.javacliparser.FloatOption = ...
    blockSizeSEEDOption: com.github.javacliparser.IntOption = ...
    epsilonPrimeSEEDOption: com.github.javacliparser.FloatOption = ...
    alphaSEEDOption: com.github.javacliparser.FloatOption = ...
    compressTermSEEDOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...
    class SEED:
        window: 'SEEDChangeDetector.SEEDWindow' = ...
        def __init__(self, sEEDChangeDetector: 'SEEDChangeDetector', double: float, int: int, double2: float, double3: float, int2: int): ...
        def addElement(self, double: float) -> None: ...
        def setInput(self, double: float) -> bool: ...
    class SEEDBlock:
        @typing.overload
        def __init__(self, sEEDChangeDetector: 'SEEDChangeDetector', int: int): ...
        @typing.overload
        def __init__(self, sEEDChangeDetector: 'SEEDChangeDetector', sEEDBlock: 'SEEDChangeDetector.SEEDBlock'): ...
        def add(self, double: float) -> None: ...
        def getBlockSize(self) -> int: ...
        def getItemCount(self) -> int: ...
        def getMean(self) -> float: ...
        def getNext(self) -> 'SEEDChangeDetector.SEEDBlock': ...
        def getPrevious(self) -> 'SEEDChangeDetector.SEEDBlock': ...
        def getTotal(self) -> float: ...
        def getVariance(self) -> float: ...
        def isFull(self) -> bool: ...
        def setBlockSize(self, int: int) -> None: ...
        def setItemCount(self, int: int) -> None: ...
        def setNext(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def setPrevious(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def setTotal(self, double: float) -> None: ...
        def setVariance(self, double: float) -> None: ...
    class SEEDWindow:
        @typing.overload
        def __init__(self, sEEDChangeDetector: 'SEEDChangeDetector', int: int): ...
        @typing.overload
        def __init__(self, sEEDChangeDetector: 'SEEDChangeDetector', int: int, int2: int, int3: int, double: float, double2: float, int4: int): ...
        def addBlockToHead(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def addBlockToTail(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def addTransaction(self, double: float) -> None: ...
        def checkHomogeneity(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> bool: ...
        def clear(self) -> None: ...
        def compressBlock(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def getBlockCount(self) -> int: ...
        def getBlockSize(self) -> int: ...
        def getEpsilonPrime(self) -> float: ...
        def getHead(self) -> 'SEEDChangeDetector.SEEDBlock': ...
        def getTail(self) -> 'SEEDChangeDetector.SEEDBlock': ...
        def getTotal(self) -> float: ...
        def getVariance(self) -> float: ...
        def getWidth(self) -> int: ...
        def removeBlock(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def setAlpha(self, double: float) -> None: ...
        def setBlockCount(self, int: int) -> None: ...
        def setBlockSize(self, int: int) -> None: ...
        def setCompressionTerm(self, int: int) -> None: ...
        def setEpsilonPrime(self, double: float) -> None: ...
        def setHead(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def setTail(self, sEEDBlock: 'SEEDChangeDetector.SEEDBlock') -> None: ...
        def setTotal(self, double: float) -> None: ...
        def setVariance(self, double: float) -> None: ...
        def setWidth(self, int: int) -> None: ...

class STEPD(AbstractChangeDetector):
    windowSizeOption: com.github.javacliparser.IntOption = ...
    alphaDriftOption: com.github.javacliparser.FloatOption = ...
    alphaWarningOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def initialize(self) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...

class SeqDrift1ChangeDetector(AbstractChangeDetector):
    deltaOption: com.github.javacliparser.FloatOption = ...
    deltaWarningOption: com.github.javacliparser.FloatOption = ...
    blockSeqDriftOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...
    class SeqDrift1(moa.AbstractMOAObject):
        DRIFT: typing.ClassVar[int] = ...
        WARNING: typing.ClassVar[int] = ...
        HOMOGENEOUS: typing.ClassVar[int] = ...
        INTERNAL_DRIFT: typing.ClassVar[int] = ...
        def __init__(self, seqDrift1ChangeDetector: 'SeqDrift1ChangeDetector', double: float, int: int, double2: float): ...
        def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def getEstimation(self) -> float: ...
        def getWidth(self) -> int: ...
        def setInput(self, double: float) -> bool: ...

class SeqDrift2ChangeDetector(AbstractChangeDetector):
    deltaSeqDrift2Option: com.github.javacliparser.FloatOption = ...
    blockSeqDrift2Option: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def input(self, double: float) -> None: ...
    def resetLearning(self) -> None: ...
    class Block:
        data: typing.MutableSequence[float] = ...
        total: float = ...
        def IsTested(self) -> bool: ...
        def add(self, double: float) -> None: ...
        def addAt(self, int: int, double: float) -> None: ...
        def setTested(self, boolean: bool) -> None: ...
    class Repository:
        def __init__(self, seqDrift2ChangeDetector: 'SeqDrift2ChangeDetector', int: int): ...
        @typing.overload
        def add(self, double: float) -> None: ...
        @typing.overload
        def add(self, double: float, boolean: bool) -> None: ...
        def addAt(self, int: int, double: float) -> None: ...
        def get(self, int: int) -> float: ...
        def getFirstBlockTotal(self) -> float: ...
        def getNumOfTests(self) -> int: ...
        def getSize(self) -> int: ...
        def getTotal(self) -> float: ...
        def markLastAddedBlock(self) -> None: ...
        def removeAll(self) -> None: ...
        def removeFirstBlock(self) -> None: ...
    class Reservoir:
        def __init__(self, seqDrift2ChangeDetector: 'SeqDrift2ChangeDetector', int: int, int2: int): ...
        def addElement(self, double: float) -> None: ...
        def clear(self) -> None: ...
        def copy(self, reservoir: 'SeqDrift2ChangeDetector.Reservoir') -> None: ...
        def get(self, int: int) -> float: ...
        def getSampleMean(self) -> float: ...
        def getSize(self) -> int: ...
        def getTotal(self) -> float: ...
        def setMaxSize(self, int: int) -> None: ...
    class SeqDrift2(moa.AbstractMOAObject):
        def __init__(self, seqDrift2ChangeDetector: 'SeqDrift2ChangeDetector', double: float, int: int): ...
        def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def getEstimation(self) -> float: ...
        def setInput(self, double: float) -> bool: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.core.driftdetection")``.

    ADWIN: typing.Type[ADWIN]
    ADWINChangeDetector: typing.Type[ADWINChangeDetector]
    AbstractChangeDetector: typing.Type[AbstractChangeDetector]
    ChangeDetector: typing.Type[ChangeDetector]
    CusumDM: typing.Type[CusumDM]
    DDM: typing.Type[DDM]
    EDDM: typing.Type[EDDM]
    EWMAChartDM: typing.Type[EWMAChartDM]
    EnsembleDriftDetectionMethods: typing.Type[EnsembleDriftDetectionMethods]
    GeometricMovingAverageDM: typing.Type[GeometricMovingAverageDM]
    HDDM_A_Test: typing.Type[HDDM_A_Test]
    HDDM_W_Test: typing.Type[HDDM_W_Test]
    PageHinkleyDM: typing.Type[PageHinkleyDM]
    RDDM: typing.Type[RDDM]
    SEEDChangeDetector: typing.Type[SEEDChangeDetector]
    STEPD: typing.Type[STEPD]
    SeqDrift1ChangeDetector: typing.Type[SeqDrift1ChangeDetector]
    SeqDrift2ChangeDetector: typing.Type[SeqDrift2ChangeDetector]
