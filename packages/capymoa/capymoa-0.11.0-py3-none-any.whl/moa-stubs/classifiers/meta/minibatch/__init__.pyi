
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import moa.capabilities
import moa.classifiers
import moa.core
import moa.options
import typing



class AdaptiveRandomForestMB(moa.classifiers.AbstractClassifierMiniBatch, moa.classifiers.MultiClassClassifier):
    treeLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    mFeaturesModeOption: com.github.javacliparser.MultiChoiceOption = ...
    mFeaturesPerTreeSizeOption: com.github.javacliparser.IntOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    driftDetectionMethodOption: moa.options.ClassOption = ...
    warningDetectionMethodOption: moa.options.ClassOption = ...
    disableWeightedVote: com.github.javacliparser.FlagOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    disableBackgroundLearnerOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSublearners(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstances(self, arrayList: java.util.ArrayList[com.yahoo.labs.samoa.instances.Instance]) -> None: ...

class LeveragingBagMB(moa.classifiers.AbstractClassifierMiniBatch, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    weightShrinkOption: com.github.javacliparser.FloatOption = ...
    deltaAdwinOption: com.github.javacliparser.FloatOption = ...
    outputCodesOption: com.github.javacliparser.FlagOption = ...
    leveraginBagAlgorithmOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getCapabilities(self) -> moa.capabilities.Capabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def getVotesForInstanceBinary(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstances(self, arrayList: java.util.ArrayList[com.yahoo.labs.samoa.instances.Instance]) -> None: ...

class OzaBagAdwinMB(moa.classifiers.AbstractClassifierMiniBatch, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getCapabilities(self) -> moa.capabilities.Capabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstances(self, arrayList: java.util.ArrayList[com.yahoo.labs.samoa.instances.Instance]) -> None: ...

class OzaBagMB(moa.classifiers.AbstractClassifierMiniBatch, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstances(self, arrayList: java.util.ArrayList[com.yahoo.labs.samoa.instances.Instance]) -> None: ...

class StreamingRandomPatchesMB(moa.classifiers.AbstractClassifierMiniBatch, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    subspaceModeOption: com.github.javacliparser.MultiChoiceOption = ...
    subspaceSizeOption: com.github.javacliparser.IntOption = ...
    trainingMethodOption: com.github.javacliparser.MultiChoiceOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    driftDetectionMethodOption: moa.options.ClassOption = ...
    warningDetectionMethodOption: moa.options.ClassOption = ...
    disableWeightedVote: com.github.javacliparser.FlagOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    disableBackgroundLearnerOption: com.github.javacliparser.FlagOption = ...
    TRAIN_RANDOM_SUBSPACES: typing.ClassVar[int] = ...
    TRAIN_RESAMPLING: typing.ClassVar[int] = ...
    TRAIN_RANDOM_PATCHES: typing.ClassVar[int] = ...
    def __init__(self): ...
    @staticmethod
    def allKCombinations(int: int, int2: int) -> java.util.ArrayList[java.util.ArrayList[int]]: ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getSublearners(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    @staticmethod
    def localRandomKCombinations(int: int, int2: int, int3: int, random: java.util.Random) -> java.util.ArrayList[java.util.ArrayList[int]]: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstances(self, arrayList: java.util.ArrayList[com.yahoo.labs.samoa.instances.Instance]) -> None: ...

class threadTesting(moa.classifiers.AbstractClassifierMiniBatch, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstances(self, arrayList: java.util.ArrayList[com.yahoo.labs.samoa.instances.Instance]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.meta.minibatch")``.

    AdaptiveRandomForestMB: typing.Type[AdaptiveRandomForestMB]
    LeveragingBagMB: typing.Type[LeveragingBagMB]
    OzaBagAdwinMB: typing.Type[OzaBagAdwinMB]
    OzaBagMB: typing.Type[OzaBagMB]
    StreamingRandomPatchesMB: typing.Type[StreamingRandomPatchesMB]
    threadTesting: typing.Type[threadTesting]
