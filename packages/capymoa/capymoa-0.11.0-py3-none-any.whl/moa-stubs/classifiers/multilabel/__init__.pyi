
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.io
import java.lang
import java.util
import jpype
import moa.classifiers
import moa.classifiers.multilabel.core
import moa.classifiers.multilabel.meta
import moa.classifiers.multilabel.trees
import moa.classifiers.trees
import moa.core
import moa.options
import typing



class MEKAClassifier(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiLabelLearner, moa.classifiers.MultiTargetRegressor, java.io.Serializable):
    baseLearnerOption: moa.options.WEKAClassOption = ...
    def __init__(self): ...
    def createWekaClassifier(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class MajorityLabelset(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiLabelLearner):
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getPurposeString(self) -> str: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class MultilabelHoeffdingTree(moa.classifiers.trees.HoeffdingTreeClassifLeaves, moa.classifiers.MultiLabelLearner, moa.classifiers.MultiTargetRegressor):
    def __init__(self): ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @staticmethod
    def getRelevantLabels(instance: com.yahoo.labs.samoa.instances.Instance) -> java.util.List[int]: ...
    @typing.overload
    def trainOnInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    @typing.overload
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    class MultilabelInactiveLearningNode(moa.classifiers.trees.HoeffdingTree.InactiveLearningNode):
        def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]): ...
        def learnFromInstance(self, instance: com.yahoo.labs.samoa.instances.Instance, hoeffdingTree: moa.classifiers.trees.HoeffdingTree) -> None: ...
    class MultilabelLearningNodeClassifier(moa.classifiers.trees.HoeffdingTreeClassifLeaves.LearningNodeClassifier):
        def __init__(self, multilabelHoeffdingTree: 'MultilabelHoeffdingTree', doubleArray: typing.Union[typing.List[float], jpype.JArray], classifier: moa.classifiers.Classifier, multilabelHoeffdingTree2: 'MultilabelHoeffdingTree'): ...
        def describeSubtree(self, hoeffdingTree: moa.classifiers.trees.HoeffdingTree, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def disableAttribute(self, int: int) -> None: ...
        def getClassVotes(self, instance: com.yahoo.labs.samoa.instances.Instance, hoeffdingTree: moa.classifiers.trees.HoeffdingTree) -> typing.MutableSequence[float]: ...
        def getClassifier(self) -> moa.classifiers.Classifier: ...
        def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance, hoeffdingTree: moa.classifiers.trees.HoeffdingTree) -> com.yahoo.labs.samoa.instances.Prediction: ...
        def learnFromInstance(self, instance: com.yahoo.labs.samoa.instances.Instance, hoeffdingTree: moa.classifiers.trees.HoeffdingTree) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.multilabel")``.

    MEKAClassifier: typing.Type[MEKAClassifier]
    MajorityLabelset: typing.Type[MajorityLabelset]
    MultilabelHoeffdingTree: typing.Type[MultilabelHoeffdingTree]
    core: moa.classifiers.multilabel.core.__module_protocol__
    meta: moa.classifiers.multilabel.meta.__module_protocol__
    trees: moa.classifiers.multilabel.trees.__module_protocol__
