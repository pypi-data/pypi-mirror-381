
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.io
import java.lang
import java.util
import jpype
import moa
import moa.classifiers
import moa.classifiers.rules.core
import moa.classifiers.rules.multilabel.attributeclassobservers
import moa.classifiers.rules.multilabel.core
import moa.classifiers.rules.multilabel.core.splitcriteria
import moa.core
import typing



class ISOUPTree(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiTargetRegressor, moa.classifiers.MultiTargetLearnerSemiSupervised):
    treeRoot: 'ISOUPTree.Node' = ...
    examplesSeen: moa.core.DoubleVector = ...
    sumOfValues: moa.core.DoubleVector = ...
    sumOfSquares: moa.core.DoubleVector = ...
    weightOfInputs: moa.core.DoubleVector = ...
    sumOfAttrValues: moa.core.DoubleVector = ...
    sumOfAttrSquares: moa.core.DoubleVector = ...
    maxID: int = ...
    targetWeights: moa.core.DoubleVector = ...
    gracePeriodOption: com.github.javacliparser.IntOption = ...
    splitConfidenceOption: com.github.javacliparser.FloatOption = ...
    tieThresholdOption: com.github.javacliparser.FloatOption = ...
    PageHinckleyAlphaOption: com.github.javacliparser.FloatOption = ...
    PageHinckleyThresholdOption: com.github.javacliparser.IntOption = ...
    alternateTreeFadingFactorOption: com.github.javacliparser.FloatOption = ...
    alternateTreeTMinOption: com.github.javacliparser.IntOption = ...
    alternateTreeTimeOption: com.github.javacliparser.IntOption = ...
    regressionTreeOption: com.github.javacliparser.FlagOption = ...
    learningRatioOption: com.github.javacliparser.FloatOption = ...
    learningRateDecayFactorOption: com.github.javacliparser.FloatOption = ...
    learningRatioConstOption: com.github.javacliparser.FlagOption = ...
    runAsPCTOption: com.github.javacliparser.FlagOption = ...
    doNotNormalizeOption: com.github.javacliparser.FlagOption = ...
    weightFile: com.github.javacliparser.FileOption = ...
    def __init__(self): ...
    def buildingModelTree(self) -> bool: ...
    def calcByteSize(self) -> int: ...
    def closeWriter(self) -> None: ...
    @staticmethod
    def computeHoeffdingBound(double: float, double2: float, double3: float) -> float: ...
    def computeSD(self, double: float, double2: float, double3: float) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getNormalizedError(self, instance: com.yahoo.labs.samoa.instances.Instance, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getPurposeString(self) -> str: ...
    def getTrainingPrediction(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def initWriter(self, string: str) -> None: ...
    def isRandomizable(self) -> bool: ...
    def loadWeights(self) -> None: ...
    def log(self, string: str) -> None: ...
    def newInputIndexes(self) -> java.util.List[int]: ...
    def newLeafModel(self) -> 'ISOUPTree.MultitargetPerceptron': ...
    def newNominalClassObserver(self) -> moa.classifiers.rules.multilabel.attributeclassobservers.NominalStatisticsObserver: ...
    def normalize(self) -> bool: ...
    @typing.overload
    def normalizeTargetValue(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int) -> float: ...
    @typing.overload
    def normalizeTargetValue(self, double: float, int: int) -> float: ...
    def normalizeTargetVector(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def normalizedInputVector(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def normalizedTargetVector(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def processInstance(self, instance: com.yahoo.labs.samoa.instances.Instance, node: 'ISOUPTree.Node', doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], boolean: bool, boolean2: bool) -> None: ...
    def resetLearningImpl(self) -> None: ...
    @staticmethod
    def scalarProduct(doubleVector: moa.core.DoubleVector, doubleVector2: moa.core.DoubleVector) -> float: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    class InnerNode(moa.classifiers.multilabel.trees.ISOUPTree.Node):
        def __init__(self, iSOUPTree: 'ISOUPTree'): ...
        def PageHinckleyTest(self, double: float, double2: float, int: int) -> bool: ...
        def calcByteSize(self) -> int: ...
        def disableChangeDetection(self) -> None: ...
        def getChild(self, int: int) -> 'ISOUPTree.Node': ...
        def getChildIndex(self, node: 'ISOUPTree.Node') -> int: ...
        def initializeAlternateTree(self, iSOUPTree: 'ISOUPTree') -> None: ...
        def numChildren(self) -> int: ...
        def restartChangeDetection(self) -> None: ...
        def setChild(self, int: int, node: 'ISOUPTree.Node') -> None: ...
    class LeafNode(moa.classifiers.multilabel.trees.ISOUPTree.Node):
        learningModel: 'ISOUPTree.MultitargetPerceptron' = ...
        learningWeight: float = ...
        errorP: moa.core.DoubleVector = ...
        errorM: moa.core.DoubleVector = ...
        inputIndexes: java.util.List = ...
        def __init__(self, iSOUPTree: 'ISOUPTree'): ...
        def calcByteSize(self) -> int: ...
        def checkForSplit(self) -> None: ...
        def describeSubtree(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def getBestSplitSuggestions(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion) -> typing.MutableSequence[moa.classifiers.rules.multilabel.core.AttributeExpansionSuggestion]: ...
        def getPrediction(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
        def getPredictionModel(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
        def getPredictionTargetMean(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
        def initializeInputIndexes(self) -> None: ...
        def learnFromInstance(self, instance: com.yahoo.labs.samoa.instances.Instance, doubleArray: typing.Union[typing.List[float], jpype.JArray], boolean: bool) -> None: ...
    class MultitargetPerceptron(java.io.Serializable):
        weights: typing.MutableSequence[typing.MutableSequence[float]] = ...
        @typing.overload
        def __init__(self, iSOUPTree: 'ISOUPTree', iSOUPTree2: 'ISOUPTree'): ...
        @typing.overload
        def __init__(self, iSOUPTree: 'ISOUPTree', iSOUPTree2: 'ISOUPTree', multitargetPerceptron: 'ISOUPTree.MultitargetPerceptron'): ...
        def calcByteSize(self) -> int: ...
        def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def getPurposeString(self) -> str: ...
        def initializeWeights(self) -> None: ...
        def normalizeWeights(self) -> None: ...
        def prediction(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> typing.MutableSequence[float]: ...
        def updatePerceptron(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
        def updateWeights(self, instance: com.yahoo.labs.samoa.instances.Instance, double: float) -> None: ...
    class Node(java.io.Serializable):
        ID: int = ...
        examplesSeen: moa.core.DoubleVector = ...
        sumOfValues: moa.core.DoubleVector = ...
        sumOfSquares: moa.core.DoubleVector = ...
        weightOfInputs: moa.core.DoubleVector = ...
        sumOfInputValues: moa.core.DoubleVector = ...
        sumOfInputSquares: moa.core.DoubleVector = ...
        def __init__(self, iSOUPTree: 'ISOUPTree'): ...
        def calcByteSize(self) -> int: ...
        def copyStatistics(self, node: 'ISOUPTree.Node') -> None: ...
        def describeSubtree(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def disableChangeDetection(self) -> None: ...
        def getChildIndex(self, node: 'ISOUPTree.Node') -> int: ...
        def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def getLevel(self) -> int: ...
        def getNumSubtrees(self) -> int: ...
        def getParent(self) -> 'ISOUPTree.Node': ...
        def getPrediction(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
        def restartChangeDetection(self) -> None: ...
        def setChild(self, int: int, node: 'ISOUPTree.Node') -> None: ...
        def setParent(self, innerNode: 'ISOUPTree.InnerNode') -> None: ...
    class SplitNode(moa.classifiers.multilabel.trees.ISOUPTree.InnerNode):
        predicate: moa.classifiers.rules.core.Predicate = ...
        def __init__(self, predicate: moa.classifiers.rules.core.Predicate, iSOUPTree: 'ISOUPTree'): ...
        def calcByteSize(self) -> int: ...
        def describeSubtree(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def getPrediction(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
        def instanceChildIndex(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...

class ISOUPTreeRF(ISOUPTree):
    subspaceSizeOption: com.github.javacliparser.MultiChoiceOption = ...
    subspaceSize: int = ...
    def __init__(self): ...
    def getFeatureScores(self) -> moa.core.DoubleVector: ...
    def getNodeFeatureScore(self, node: ISOUPTree.Node) -> moa.core.DoubleVector: ...
    def newInputIndexes(self) -> java.util.List[int]: ...
    def numRFAttrs(self) -> int: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.multilabel.trees")``.

    ISOUPTree: typing.Type[ISOUPTree]
    ISOUPTreeRF: typing.Type[ISOUPTreeRF]
