
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.awt
import java.awt.event
import java.awt.image
import java.lang
import java.util
import javax.swing
import jpype
import moa.cluster
import moa.clusterers.outliers
import moa.evaluation
import moa.gui.clustertab
import moa.gui.outliertab
import moa.streams.clustering
import typing



class AbstractGraphAxes(javax.swing.JPanel):
    def __init__(self): ...
    def setLowerXValue(self, double: float) -> None: ...
    def setMaxXValue(self, double: float) -> None: ...
    def setMaxYValue(self, double: float) -> None: ...
    def setMinXValue(self, double: float) -> None: ...
    def setUpperXValue(self, double: float) -> None: ...
    def setUpperYValue(self, double: float) -> None: ...
    def setXResolution(self, double: float) -> None: ...
    def setYResolution(self, double: float) -> None: ...

class AbstractGraphCanvas(javax.swing.JPanel):
    def __init__(self, abstractGraphAxes: AbstractGraphAxes, abstractGraphPlot: 'AbstractGraphPlot'): ...
    def getMaxXValue(self) -> float: ...
    def getMinXValue(self) -> float: ...
    def scaleXResolution(self, double: float) -> None: ...
    def scaleYResolution(self, double: float) -> None: ...
    def setMeasureSelected(self, int: int) -> None: ...
    @typing.overload
    def setPreferredSize(self) -> None: ...
    @typing.overload
    def setPreferredSize(self, dimension: java.awt.Dimension) -> None: ...
    @typing.overload
    def setSize(self) -> None: ...
    @typing.overload
    def setSize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setSize(self, dimension: java.awt.Dimension) -> None: ...
    def setStandardDeviationPainted(self, boolean: bool) -> None: ...
    def updateCanvas(self, boolean: bool) -> None: ...

class AbstractGraphPlot(javax.swing.JPanel):
    def __init__(self): ...
    def setMeasureSelected(self, int: int) -> None: ...

class ClusterPanel(javax.swing.JPanel):
    def __init__(self, sphereCluster: moa.cluster.SphereCluster, color: java.awt.Color, streamPanel: 'StreamPanel'): ...
    @typing.overload
    def contains(self, point: java.awt.Point) -> bool: ...
    @typing.overload
    def contains(self, int: int, int2: int) -> bool: ...
    def drawOnCanvas(self, graphics2D: java.awt.Graphics2D) -> None: ...
    def getClusterID(self) -> int: ...
    def getClusterLabel(self) -> int: ...
    def getSVGString(self, int: int) -> str: ...
    def highlight(self, boolean: bool) -> None: ...
    def isValidCluster(self) -> bool: ...
    def setDirection(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def updateLocation(self) -> None: ...
    def updateTooltip(self) -> None: ...

class DataPoint(com.yahoo.labs.samoa.instances.DenseInstance):
    def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, integer: int): ...
    def getDistance(self, dataPoint: 'DataPoint') -> float: ...
    def getInfo(self, int: int, int2: int) -> str: ...
    def getMeasureValue(self, string: str) -> str: ...
    def getNoiseLabel(self) -> float: ...
    def getTimestamp(self) -> int: ...
    def isNoise(self) -> bool: ...
    @typing.overload
    def setMeasureValue(self, string: str, double: float) -> None: ...
    @typing.overload
    def setMeasureValue(self, string: str, string2: str) -> None: ...
    def updateWeight(self, int: int, double: float) -> None: ...

class GraphAxes(javax.swing.JPanel):
    def __init__(self): ...
    def setMaxXValue(self, int: int) -> None: ...
    def setProcessFrequency(self, int: int) -> None: ...
    def setXMaxValue(self, int: int) -> None: ...
    def setXResolution(self, double: float) -> None: ...
    def setYMinMaxValues(self, double: float, double2: float) -> None: ...

class GraphCanvas(javax.swing.JPanel):
    def __init__(self): ...
    def forceAddEvents(self) -> None: ...
    def getMeasureSelected(self) -> int: ...
    def getProcessFrequency(self) -> int: ...
    def scaleXResolution(self, boolean: bool) -> None: ...
    def scaleYResolution(self, boolean: bool) -> None: ...
    def setClusterEventsList(self, arrayList: java.util.ArrayList[moa.streams.clustering.ClusterEvent]) -> None: ...
    def setGraph(self, measureCollection: moa.evaluation.MeasureCollection, measureCollection2: moa.evaluation.MeasureCollection, int: int, int2: int) -> None: ...
    def setViewport(self, jViewport: javax.swing.JViewport) -> None: ...
    @typing.overload
    def updateCanvas(self) -> None: ...
    @typing.overload
    def updateCanvas(self, boolean: bool) -> None: ...

class GraphCurve(javax.swing.JPanel):
    def __init__(self): ...
    def getPreferredSize(self) -> java.awt.Dimension: ...
    def setGraph(self, measureCollection: moa.evaluation.MeasureCollection, measureCollection2: moa.evaluation.MeasureCollection, int: int) -> None: ...
    def setYMinMaxValues(self, double: float, double2: float) -> None: ...

class InfoPanel(javax.swing.JPanel):
    def __init__(self, jFrame: javax.swing.JFrame): ...
    def updateInfo(self, string: str) -> None: ...

class OutlierPanel(javax.swing.JPanel):
    def __init__(self, myBaseOutlierDetector: moa.clusterers.outliers.MyBaseOutlierDetector, outlier: moa.clusterers.outliers.MyBaseOutlierDetector.Outlier, sphereCluster: moa.cluster.SphereCluster, color: java.awt.Color, streamOutlierPanel: 'StreamOutlierPanel'): ...
    @typing.overload
    def contains(self, point: java.awt.Point) -> bool: ...
    @typing.overload
    def contains(self, int: int, int2: int) -> bool: ...
    def drawOnCanvas(self, graphics2D: java.awt.Graphics2D) -> None: ...
    def getClusterID(self) -> int: ...
    def getClusterLabel(self) -> int: ...
    def getInfo(self) -> str: ...
    def getSVGString(self, int: int) -> str: ...
    def highlight(self, boolean: bool) -> None: ...
    def isValidCluster(self) -> bool: ...
    def setDirection(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def updateLocation(self) -> None: ...
    def updateTooltip(self) -> None: ...

class PointPanel(javax.swing.JPanel):
    @typing.overload
    def __init__(self, dataPoint: DataPoint, streamPanel: 'StreamPanel', double: float, double2: float): ...
    @typing.overload
    def __init__(self, dataPoint: DataPoint, streamPanel: 'StreamPanel', color: java.awt.Color): ...
    def drawOnCanvas(self, graphics2D: java.awt.Graphics2D) -> None: ...
    def getObjectInfo(self) -> str: ...
    @staticmethod
    def getPointColorbyClass(dataPoint: DataPoint, float: float) -> java.awt.Color: ...
    def getSVGString(self, int: int) -> str: ...
    @typing.overload
    def getToolTipText(self, mouseEvent: java.awt.event.MouseEvent) -> str: ...
    @typing.overload
    def getToolTipText(self) -> str: ...
    def highlight(self, boolean: bool) -> None: ...
    def updateLocation(self) -> None: ...

class RunOutlierVisualizer(java.lang.Runnable, java.awt.event.ActionListener, moa.streams.clustering.ClusterEventListener):
    initialPauseInterval: typing.ClassVar[int] = ...
    m_outlier: typing.MutableSequence[moa.clusterers.outliers.MyBaseOutlierDetector] = ...
    def __init__(self, outlierVisualTab: moa.gui.outliertab.OutlierVisualTab, outlierSetupTab: moa.gui.outliertab.OutlierSetupTab): ...
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    def changeCluster(self, clusterEvent: moa.streams.clustering.ClusterEvent) -> None: ...
    def exportCSV(self, string: str) -> None: ...
    @staticmethod
    def getCurrentTimestamp() -> int: ...
    @staticmethod
    def pause() -> None: ...
    def redraw(self) -> None: ...
    def redrawOnResize(self) -> None: ...
    @staticmethod
    def resume() -> None: ...
    def run(self) -> None: ...
    def setOutliersVisibility(self, boolean: bool) -> None: ...
    def setPointsVisibility(self, boolean: bool) -> None: ...
    def setSpeed(self, int: int) -> None: ...
    def setWaitWinFull(self, boolean: bool) -> None: ...
    def stop(self) -> None: ...
    def weka(self) -> None: ...

class RunVisualizer(java.lang.Runnable, java.awt.event.ActionListener, moa.streams.clustering.ClusterEventListener):
    initialPauseInterval: typing.ClassVar[int] = ...
    def __init__(self, clusteringVisualTab: moa.gui.clustertab.ClusteringVisualTab, clusteringSetupTab: moa.gui.clustertab.ClusteringSetupTab): ...
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    def changeCluster(self, clusterEvent: moa.streams.clustering.ClusterEvent) -> None: ...
    def drawClusterings(self, list: java.util.List[DataPoint], list2: java.util.List[DataPoint]) -> None: ...
    def exportCSV(self, string: str) -> None: ...
    @staticmethod
    def getCurrentTimestamp() -> int: ...
    @staticmethod
    def pause() -> None: ...
    def redraw(self) -> None: ...
    @staticmethod
    def resume() -> None: ...
    def run(self) -> None: ...
    def runVisual(self) -> None: ...
    def setGroundTruthVisibility(self, boolean: bool) -> None: ...
    def setMacroVisibility(self, boolean: bool) -> None: ...
    def setMicroLayerVisibility(self, boolean: bool) -> None: ...
    def setPointLayerVisibility(self, boolean: bool) -> None: ...
    def setSpeed(self, int: int) -> None: ...
    def stop(self) -> None: ...
    def weka(self) -> None: ...

class StreamOutlierPanel(javax.swing.JPanel, java.awt.event.ComponentListener):
    def __init__(self, color: java.awt.Color): ...
    def ApplyToCanvas(self, bufferedImage: java.awt.image.BufferedImage) -> None: ...
    def RedrawPointLayer(self) -> None: ...
    def applyDrawDecay(self, float: float, boolean: bool) -> None: ...
    def clearEvents(self) -> None: ...
    def clearPoints(self) -> None: ...
    def componentHidden(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentMoved(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentResized(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentShown(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def drawEvent(self, outlierEvent: 'OutlierEvent', boolean: bool) -> None: ...
    def drawOutliers(self, vector: java.util.Vector[moa.clusterers.outliers.MyBaseOutlierDetector.Outlier], color: java.awt.Color) -> None: ...
    def drawPoint(self, dataPoint: DataPoint, boolean: bool, boolean2: bool) -> None: ...
    def getActiveXDim(self) -> int: ...
    def getActiveYDim(self) -> int: ...
    def getHighlightedOutlierPanel(self) -> OutlierPanel: ...
    def repaintOutliers(self) -> None: ...
    def screenshot(self, string: str, boolean: bool, boolean2: bool) -> None: ...
    def setActiveXDim(self, int: int) -> None: ...
    def setActiveYDim(self, int: int) -> None: ...
    def setHighlightedOutlierPanel(self, outlierPanel: OutlierPanel) -> None: ...
    def setOutlierDetector(self, myBaseOutlierDetector: moa.clusterers.outliers.MyBaseOutlierDetector) -> None: ...
    def setOutliersVisibility(self, boolean: bool) -> None: ...
    def setPointsVisibility(self, boolean: bool) -> None: ...
    def setVisualizer(self, runOutlierVisualizer: RunOutlierVisualizer) -> None: ...
    def setZoom(self, int: int, int2: int, int3: int, jScrollPane: javax.swing.JScrollPane) -> None: ...

class StreamPanel(javax.swing.JPanel, java.awt.event.ComponentListener):
    def __init__(self): ...
    def applyDrawDecay(self, float: float) -> None: ...
    def componentHidden(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentMoved(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentResized(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentShown(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def drawGTClustering(self, clustering: moa.cluster.Clustering, list: java.util.List[DataPoint], color: java.awt.Color) -> None: ...
    def drawMacroClustering(self, clustering: moa.cluster.Clustering, list: java.util.List[DataPoint], color: java.awt.Color) -> None: ...
    def drawMicroClustering(self, clustering: moa.cluster.Clustering, list: java.util.List[DataPoint], color: java.awt.Color) -> None: ...
    def drawPoint(self, dataPoint: DataPoint) -> None: ...
    def getActiveXDim(self) -> int: ...
    def getActiveYDim(self) -> int: ...
    def getHighlightedClusterPanel(self) -> ClusterPanel: ...
    def screenshot(self, string: str, boolean: bool, boolean2: bool) -> None: ...
    def setActiveXDim(self, int: int) -> None: ...
    def setActiveYDim(self, int: int) -> None: ...
    def setGroundTruthLayerVisibility(self, boolean: bool) -> None: ...
    def setHighlightedClusterPanel(self, clusterPanel: ClusterPanel) -> None: ...
    def setMacroLayerVisibility(self, boolean: bool) -> None: ...
    def setMicroLayerVisibility(self, boolean: bool) -> None: ...
    def setPointVisibility(self, boolean: bool) -> None: ...
    def setZoom(self, int: int, int2: int, int3: int, jScrollPane: javax.swing.JScrollPane) -> None: ...

class WekaExplorer:
    def __init__(self, instances: com.yahoo.labs.samoa.instances.Instances): ...

class OutlierEvent: ...

class GraphMultiCurve(AbstractGraphPlot):
    def __init__(self): ...

class GraphScatter(AbstractGraphPlot):
    def __init__(self): ...
    def setGraph(self, measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], measureCollectionArray2: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], doubleArray: typing.Union[typing.List[float], jpype.JArray], colorArray: typing.Union[typing.List[java.awt.Color], jpype.JArray]) -> None: ...

class ParamGraphAxes(AbstractGraphAxes):
    def __init__(self): ...

class ParamGraphCanvas(AbstractGraphCanvas):
    def __init__(self): ...
    def getMaxXValue(self) -> float: ...
    def getMinXValue(self) -> float: ...
    def setGraph(self, measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], measureCollectionArray2: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], doubleArray: typing.Union[typing.List[float], jpype.JArray], colorArray: typing.Union[typing.List[java.awt.Color], jpype.JArray]) -> None: ...
    @typing.overload
    def setPreferredSize(self, dimension: java.awt.Dimension) -> None: ...
    @typing.overload
    def setPreferredSize(self) -> None: ...
    @typing.overload
    def setSize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setSize(self, dimension: java.awt.Dimension) -> None: ...
    @typing.overload
    def setSize(self) -> None: ...

class ProcessGraphAxes(AbstractGraphAxes):
    def __init__(self): ...
    def setProcessFrequency(self, int: int) -> None: ...

class ProcessGraphCanvas(AbstractGraphCanvas):
    def __init__(self): ...
    def getMaxXValue(self) -> float: ...
    def getMinProcessFrequency(self) -> int: ...
    def getMinXValue(self) -> float: ...
    def getProcessFrequencies(self) -> typing.MutableSequence[int]: ...
    def setGraph(self, measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], measureCollectionArray2: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray], int2: int, colorArray: typing.Union[typing.List[java.awt.Color], jpype.JArray]) -> None: ...
    @typing.overload
    def setPreferredSize(self, dimension: java.awt.Dimension) -> None: ...
    @typing.overload
    def setPreferredSize(self) -> None: ...
    @typing.overload
    def setSize(self, int: int, int2: int) -> None: ...
    @typing.overload
    def setSize(self, dimension: java.awt.Dimension) -> None: ...
    @typing.overload
    def setSize(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.gui.visualization")``.

    AbstractGraphAxes: typing.Type[AbstractGraphAxes]
    AbstractGraphCanvas: typing.Type[AbstractGraphCanvas]
    AbstractGraphPlot: typing.Type[AbstractGraphPlot]
    ClusterPanel: typing.Type[ClusterPanel]
    DataPoint: typing.Type[DataPoint]
    GraphAxes: typing.Type[GraphAxes]
    GraphCanvas: typing.Type[GraphCanvas]
    GraphCurve: typing.Type[GraphCurve]
    GraphMultiCurve: typing.Type[GraphMultiCurve]
    GraphScatter: typing.Type[GraphScatter]
    InfoPanel: typing.Type[InfoPanel]
    OutlierEvent: typing.Type[OutlierEvent]
    OutlierPanel: typing.Type[OutlierPanel]
    ParamGraphAxes: typing.Type[ParamGraphAxes]
    ParamGraphCanvas: typing.Type[ParamGraphCanvas]
    PointPanel: typing.Type[PointPanel]
    ProcessGraphAxes: typing.Type[ProcessGraphAxes]
    ProcessGraphCanvas: typing.Type[ProcessGraphCanvas]
    RunOutlierVisualizer: typing.Type[RunOutlierVisualizer]
    RunVisualizer: typing.Type[RunVisualizer]
    StreamOutlierPanel: typing.Type[StreamOutlierPanel]
    StreamPanel: typing.Type[StreamPanel]
    WekaExplorer: typing.Type[WekaExplorer]
