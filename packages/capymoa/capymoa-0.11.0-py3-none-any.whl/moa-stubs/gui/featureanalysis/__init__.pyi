
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.awt
import java.awt.event
import java.beans
import java.io
import javax.swing
import javax.swing.table
import jpype
import moa.gui
import moa.tasks
import typing
import weka.core
import weka.core.converters
import weka.filters
import weka.gui
import weka.gui.visualize



class AttributeSelectionPanel(javax.swing.JPanel):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool, boolean2: bool, boolean3: bool, boolean4: bool): ...
    def getPreferredScrollableViewportSize(self) -> java.awt.Dimension: ...
    def getSelectedAttributes(self) -> typing.MutableSequence[int]: ...
    def getSelectionModel(self) -> javax.swing.ListSelectionModel: ...
    def getTableModel(self) -> javax.swing.table.TableModel: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def setInstances(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...
    def setPreferredScrollableViewportSize(self, dimension: java.awt.Dimension) -> None: ...
    def setSelectedAttributes(self, booleanArray: typing.Union[typing.List[bool], jpype.JArray]) -> None: ...

class AttributeSummaryPanel(javax.swing.JPanel):
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def setAttribute(self, int: int) -> None: ...
    def setInstances(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...

class AttributeVisualizationPanel(weka.gui.visualize.PrintablePanel):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def calcGraph(self, int: int, int2: int) -> None: ...
    def getColorBox(self) -> javax.swing.JComboBox: ...
    def getColoringIndex(self) -> int: ...
    @typing.overload
    def getToolTipText(self) -> str: ...
    @typing.overload
    def getToolTipText(self, mouseEvent: java.awt.event.MouseEvent) -> str: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def paintComponent(self, graphics: java.awt.Graphics) -> None: ...
    def setAttribute(self, int: int) -> None: ...
    def setColoringIndex(self, int: int) -> None: ...
    def setInstances(self, instances: weka.core.Instances) -> None: ...

class FeatureAnalysisTabPanel(moa.gui.AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class FeatureImportanceDataModelPanel(javax.swing.JPanel):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool, boolean2: bool, boolean3: bool, boolean4: bool): ...
    def getPreferredScrollableViewportSize(self) -> java.awt.Dimension: ...
    def getSelectedAttributes(self) -> typing.MutableSequence[int]: ...
    def getSelectionModel(self) -> javax.swing.ListSelectionModel: ...
    def getTableModel(self) -> javax.swing.table.TableModel: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def setFeatureImportanceScores(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> None: ...
    def setInstances(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...
    def setPreferredScrollableViewportSize(self, dimension: java.awt.Dimension) -> None: ...
    def setSelectedAttributes(self, booleanArray: typing.Union[typing.List[bool], jpype.JArray]) -> None: ...

class FeatureImportanceGraph(javax.swing.JPanel):
    def __init__(self): ...
    def paintComponent(self, graphics: java.awt.Graphics) -> None: ...
    def setAttributeNames(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def setFeatureImportance(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> None: ...
    def setSelectedAttributeIndices(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...

class FeatureImportancePanel(weka.gui.AbstractPerspective):
    def acceptsInstances(self) -> bool: ...
    def copyClipBoardConfiguration(self) -> None: ...
    @staticmethod
    def getInstance() -> 'FeatureImportancePanel': ...
    def getWindowSize(self) -> int: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def runTask(self, task: moa.tasks.Task) -> None: ...
    @typing.overload
    def setInstances(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...
    @typing.overload
    def setInstances(self, instances: weka.core.Instances) -> None: ...
    def setParameters(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def setWindowSize(self, int: int) -> None: ...

class InstancesSummaryPanel(javax.swing.JPanel):
    def __init__(self): ...
    def getShowZeroInstancesAsUnknown(self) -> bool: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def setInstances(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...
    def setShowZeroInstancesAsUnknown(self, boolean: bool) -> None: ...

class LineAndScatterPanel(javax.swing.JPanel):
    def __init__(self): ...
    def getAttributeIndex(self) -> int: ...
    def getAttributeName(self) -> str: ...
    def getFeatureRangeEndIndex(self) -> int: ...
    def getFeatureRangeStartIndex(self) -> int: ...
    def getIntEndIndex(self) -> int: ...
    def getIntStartIndex(self) -> int: ...
    def getScreenSize(self) -> java.awt.Dimension: ...
    def getSelectedPlotItem(self) -> str: ...
    def getSelectedPlotTyeIndex(self) -> int: ...
    def paintAmplifiedPlot(self) -> None: ...
    def paintComponent(self, graphics: java.awt.Graphics) -> None: ...
    def setAttributeIndex(self, int: int) -> None: ...
    def setAttributeName(self, string: str) -> None: ...
    def setFeatureRange(self, string: str) -> None: ...
    def setFeatureRangeEndIndex(self, int: int) -> None: ...
    def setFeatureRangeStartIndex(self, int: int) -> None: ...
    def setInstances(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...
    def setIntEndIndex(self, int: int) -> None: ...
    def setIntStartIndex(self, int: int) -> None: ...
    def setSelectedPlotInfo(self, int: int, string: str, int2: int, string2: str) -> None: ...
    def setSelectedPlotItem(self, string: str) -> None: ...
    def visualizeAll(self) -> None: ...

class VisualizeFeaturesPanel(weka.gui.AbstractPerspective):
    def __init__(self): ...
    @typing.overload
    def addPropertyChangeListener(self, string: str, propertyChangeListener: typing.Union[java.beans.PropertyChangeListener, typing.Callable]) -> None: ...
    @typing.overload
    def addPropertyChangeListener(self, propertyChangeListener: typing.Union[java.beans.PropertyChangeListener, typing.Callable]) -> None: ...
    def endIndexValidation(self, int: int) -> bool: ...
    def featureRangeBoxSet(self, int: int, int2: int) -> None: ...
    def getInstances(self) -> com.yahoo.labs.samoa.instances.Instances: ...
    def instantiationComplete(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @typing.overload
    def removePropertyChangeListener(self, string: str, propertyChangeListener: typing.Union[java.beans.PropertyChangeListener, typing.Callable]) -> None: ...
    @typing.overload
    def removePropertyChangeListener(self, propertyChangeListener: typing.Union[java.beans.PropertyChangeListener, typing.Callable]) -> None: ...
    def saveInstancesToFile(self, abstractFileSaver: weka.core.converters.AbstractFileSaver, instances: weka.core.Instances) -> None: ...
    def saveWorkingInstancesToFileQ(self) -> None: ...
    @typing.overload
    def setInstances(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...
    @typing.overload
    def setInstances(self, instances: weka.core.Instances) -> None: ...
    def setInstancesFromFile2(self, string: str) -> None: ...
    def setInstancesFromFileQ(self) -> None: ...
    def setLog(self, logger: weka.gui.Logger) -> None: ...
    def startIndexValidation(self, int: int) -> bool: ...
    class PreprocessDefaults(weka.core.Defaults):
        ID: typing.ClassVar[str] = ...
        INITIAL_DIR_KEY: typing.ClassVar[weka.core.Settings.SettingKey] = ...
        INITIAL_DIR: typing.ClassVar[java.io.File] = ...
        UNDO_DIR_KEY: typing.ClassVar[weka.core.Settings.SettingKey] = ...
        UNDO_DIR: typing.ClassVar[java.io.File] = ...
        FILTER_KEY: typing.ClassVar[weka.core.Settings.SettingKey] = ...
        FILTER: typing.ClassVar[weka.filters.Filter] = ...
        ENABLE_UNDO_KEY: typing.ClassVar[weka.core.Settings.SettingKey] = ...
        ENABLE_UNDO: typing.ClassVar[bool] = ...
        ALWAYS_SEND_INSTANCES_TO_ALL_KEY: typing.ClassVar[weka.core.Settings.SettingKey] = ...
        ALWAYS_SEND_INSTANCES_TO_ALL: typing.ClassVar[bool] = ...
        def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.gui.featureanalysis")``.

    AttributeSelectionPanel: typing.Type[AttributeSelectionPanel]
    AttributeSummaryPanel: typing.Type[AttributeSummaryPanel]
    AttributeVisualizationPanel: typing.Type[AttributeVisualizationPanel]
    FeatureAnalysisTabPanel: typing.Type[FeatureAnalysisTabPanel]
    FeatureImportanceDataModelPanel: typing.Type[FeatureImportanceDataModelPanel]
    FeatureImportanceGraph: typing.Type[FeatureImportanceGraph]
    FeatureImportancePanel: typing.Type[FeatureImportancePanel]
    InstancesSummaryPanel: typing.Type[InstancesSummaryPanel]
    LineAndScatterPanel: typing.Type[LineAndScatterPanel]
    VisualizeFeaturesPanel: typing.Type[VisualizeFeaturesPanel]
