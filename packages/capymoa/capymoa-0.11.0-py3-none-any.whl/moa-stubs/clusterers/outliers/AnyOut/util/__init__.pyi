
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.clusterers.clustree
import typing



class DataObject:
    def __init__(self, int: int, instance: com.yahoo.labs.samoa.instances.Instance): ...
    def getClassLabel(self) -> int: ...
    def getFeatures(self) -> typing.MutableSequence[float]: ...
    def getId(self) -> int: ...
    def getInstance(self) -> com.yahoo.labs.samoa.instances.Instance: ...
    def getNrOfDimensions(self) -> int: ...
    def isOutiler(self) -> bool: ...
    def setId(self, int: int) -> None: ...
    def setOutiler(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class DataSet(java.lang.Iterable[DataObject]):
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, dataObject: DataObject): ...
    @typing.overload
    def addObject(self, dataObject: DataObject) -> None: ...
    @typing.overload
    def addObject(self, dataSet: 'DataSet') -> None: ...
    def clear(self) -> None: ...
    def getDataObjectArray(self) -> typing.MutableSequence[DataObject]: ...
    def getDataSetsPerClass(self) -> typing.MutableSequence['DataSet']: ...
    def getFeaturesAsArray(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getNrOfClasses(self) -> int: ...
    def getNrOfDimensions(self) -> int: ...
    def getObject(self, int: int) -> DataObject: ...
    def getVariances(self) -> typing.MutableSequence[float]: ...
    def iterator(self) -> java.util.Iterator[DataObject]: ...
    def manipulateIds(self) -> None: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...

class EMProjectedClustering:
    def __init__(self): ...
    def getEMClusteringVariances(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], int: int) -> typing.MutableSequence[typing.MutableSequence[int]]: ...
    def getEMClusteringVariancesBestChoice(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], int: int, int2: int) -> typing.MutableSequence[typing.MutableSequence[int]]: ...

class EMTopDownTreeBuilder:
    def __init__(self): ...
    def buildTree(self, dataSet: DataSet) -> moa.clusterers.clustree.Node: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.outliers.AnyOut.util")``.

    DataObject: typing.Type[DataObject]
    DataSet: typing.Type[DataSet]
    EMProjectedClustering: typing.Type[EMProjectedClustering]
    EMTopDownTreeBuilder: typing.Type[EMTopDownTreeBuilder]
