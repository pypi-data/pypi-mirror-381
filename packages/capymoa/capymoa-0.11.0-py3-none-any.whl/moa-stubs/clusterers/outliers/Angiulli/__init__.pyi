
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.clusterers.outliers
import moa.clusterers.outliers.utils.mtree
import typing



class ISBIndex:
    def __init__(self, double: float, int: int): ...
    def Insert(self, iSBNode: 'ISBIndex.ISBNode') -> None: ...
    def RangeSearch(self, iSBNode: 'ISBIndex.ISBNode', double: float) -> java.util.Vector['ISBIndex.ISBSearchResult']: ...
    def Remove(self, iSBNode: 'ISBIndex.ISBNode') -> None: ...
    class ISBNode:
        inst: com.yahoo.labs.samoa.instances.Instance = ...
        obj: 'StreamObj' = ...
        id: int = ...
        nOutlier: int = ...
        nInlier: int = ...
        def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, streamObj: 'StreamObj', long: int): ...
    class ISBSearchResult:
        node: 'ISBIndex.ISBNode' = ...
        distance: float = ...
        def __init__(self, iSBNode: 'ISBIndex.ISBNode', double: float): ...

class STORMBase(moa.clusterers.outliers.MyBaseOutlierDetector):
    waitWinFullOption: com.github.javacliparser.FlagOption = ...
    m_nBothInlierOutlier: int = ...
    m_nOnlyInlier: int = ...
    m_nOnlyOutlier: int = ...
    def __init__(self): ...
    def getStatistics(self) -> str: ...

class StreamObj(moa.clusterers.outliers.utils.mtree.DistanceFunctions.EuclideanCoordinate, java.lang.Comparable['StreamObj']):
    def __init__(self, *double: float): ...
    def compareTo(self, streamObj: 'StreamObj') -> int: ...
    def dimensions(self) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, int: int) -> float: ...
    def hashCode(self) -> int: ...

class Test:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class ApproxSTORM(STORMBase):
    radiusOption: com.github.javacliparser.FloatOption = ...
    kOption: com.github.javacliparser.IntOption = ...
    queryFreqOption: com.github.javacliparser.IntOption = ...
    pOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def Init(self) -> None: ...
    def getObjectInfo(self, object: typing.Any) -> str: ...
    class ISBNodeAppr(ISBIndex.ISBNode):
        count_after: int = ...
        count_before: int = ...
        fract_before: float = ...
        def __init__(self, approxSTORM: 'ApproxSTORM', instance: com.yahoo.labs.samoa.instances.Instance, streamObj: StreamObj, long: int, int: int): ...

class ExactSTORM(STORMBase):
    radiusOption: com.github.javacliparser.FloatOption = ...
    kOption: com.github.javacliparser.IntOption = ...
    queryFreqOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def Init(self) -> None: ...
    def getObjectInfo(self, object: typing.Any) -> str: ...
    class ISBNodeExact(ISBIndex.ISBNode):
        count_after: int = ...
        def __init__(self, exactSTORM: 'ExactSTORM', instance: com.yahoo.labs.samoa.instances.Instance, streamObj: StreamObj, long: int, int: int): ...
        def AddPrecNeigh(self, long: int) -> None: ...
        def CountPrecNeighs(self, long: int) -> int: ...
        def PrintPrecNeighs(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.outliers.Angiulli")``.

    ApproxSTORM: typing.Type[ApproxSTORM]
    ExactSTORM: typing.Type[ExactSTORM]
    ISBIndex: typing.Type[ISBIndex]
    STORMBase: typing.Type[STORMBase]
    StreamObj: typing.Type[StreamObj]
    Test: typing.Type[Test]
