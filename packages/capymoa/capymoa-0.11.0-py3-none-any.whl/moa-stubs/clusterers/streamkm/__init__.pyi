
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.cluster
import moa.clusterers
import typing



class BucketManager:
    def __init__(self, int: int, int2: int, int3: int, mTRandom: 'MTRandom'): ...

class CoresetCostTriple:
    def __init__(self, pointArray: typing.Union[typing.List['Point'], jpype.JArray], doubleArray: typing.Union[typing.List[float], jpype.JArray], double2: float): ...
    def getCoresetCentres(self) -> typing.MutableSequence['Point']: ...
    def getCoresetCost(self) -> float: ...
    def getRadii(self) -> typing.MutableSequence[float]: ...
    def setCoresetCentres(self, pointArray: typing.Union[typing.List['Point'], jpype.JArray]) -> None: ...
    def setCoresetCost(self, double: float) -> None: ...
    def setRadii(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...

class MTRandom(java.util.Random):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    @typing.overload
    def __init__(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]): ...
    @typing.overload
    def __init__(self, intArray: typing.Union[typing.List[int], jpype.JArray]): ...
    @typing.overload
    def __init__(self, long: int): ...
    @staticmethod
    def pack(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> typing.MutableSequence[int]: ...
    @typing.overload
    def setSeed(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    @typing.overload
    def setSeed(self, long: int) -> None: ...
    @typing.overload
    def setSeed(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...

class Point:
    @typing.overload
    def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int): ...
    @typing.overload
    def __init__(self, int: int): ...
    def clone(self) -> 'Point': ...
    def costOfPoint(self, int: int, pointArray: typing.Union[typing.List['Point'], jpype.JArray]) -> float: ...
    def costOfPointToCenter(self, point: 'Point') -> float: ...
    def determineClusterCentreKMeans(self, int: int, pointArray: typing.Union[typing.List['Point'], jpype.JArray]) -> int: ...
    def toCluster(self, double: float) -> moa.cluster.Cluster: ...

class StreamKM(moa.clusterers.AbstractClusterer):
    sizeCoresetOption: com.github.javacliparser.IntOption = ...
    numClustersOption: com.github.javacliparser.IntOption = ...
    lengthOption: com.github.javacliparser.IntOption = ...
    evaluateOption: com.github.javacliparser.FlagOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def lloydPlusPlus(self, int: int, int2: int, int3: int, pointArray: typing.Union[typing.List[Point], jpype.JArray]) -> CoresetCostTriple: ...
    def resetLearningImpl(self) -> None: ...
    def targetFunctionValue(self, int: int, int2: int, pointArray: typing.Union[typing.List[Point], jpype.JArray], pointArray2: typing.Union[typing.List[Point], jpype.JArray]) -> float: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class TreeCoreset:
    def __init__(self): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.streamkm")``.

    BucketManager: typing.Type[BucketManager]
    CoresetCostTriple: typing.Type[CoresetCostTriple]
    MTRandom: typing.Type[MTRandom]
    Point: typing.Type[Point]
    StreamKM: typing.Type[StreamKM]
    TreeCoreset: typing.Type[TreeCoreset]
