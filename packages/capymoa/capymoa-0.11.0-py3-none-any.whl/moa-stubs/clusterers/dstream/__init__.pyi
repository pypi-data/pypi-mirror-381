
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.cluster
import moa.clusterers
import moa.clusterers.macro
import typing



class CharacteristicVector:
    def __init__(self, int: int, int2: int, double: float, int3: int, boolean: bool, double2: float, double3: float): ...
    def densityWithNew(self, int: int, double: float) -> None: ...
    def getAttribute(self) -> int: ...
    def getCurrGridDensity(self, int: int, double: float) -> float: ...
    def getDensityTimeStamp(self) -> int: ...
    def getGridDensity(self) -> float: ...
    def getLabel(self) -> int: ...
    def getRemoveTime(self) -> int: ...
    def getUpdateTime(self) -> int: ...
    def isAttChanged(self) -> bool: ...
    def isDense(self, double: float) -> bool: ...
    def isSparse(self, double: float) -> bool: ...
    def isSporadic(self) -> bool: ...
    def isTransitional(self, double: float, double2: float) -> bool: ...
    def setDensityTimeStamp(self, int: int) -> None: ...
    def setGridDensity(self, double: float, int: int) -> None: ...
    def setLabel(self, int: int) -> None: ...
    def setRemoveTime(self, int: int) -> None: ...
    def setSporadic(self, boolean: bool) -> None: ...
    def setUpdateTime(self, int: int) -> None: ...
    def toString(self) -> str: ...
    def updateGridDensity(self, int: int, double: float, double2: float, double3: float) -> None: ...

class DensityGrid(moa.cluster.CFCluster):
    @typing.overload
    def __init__(self, intArray: typing.Union[typing.List[int], jpype.JArray]): ...
    @typing.overload
    def __init__(self, densityGrid: 'DensityGrid'): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCF(self) -> moa.cluster.CFCluster: ...
    def getCoordinates(self) -> typing.MutableSequence[int]: ...
    def getDimensions(self) -> int: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getNeighbours(self) -> java.util.ArrayList['DensityGrid']: ...
    def getRadius(self) -> float: ...
    def hashCode(self) -> int: ...
    def isVisited(self) -> bool: ...
    def setVisited(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class Dstream(moa.clusterers.AbstractClusterer):
    decayFactorOption: com.github.javacliparser.FloatOption = ...
    cmOption: com.github.javacliparser.FloatOption = ...
    clOption: com.github.javacliparser.FloatOption = ...
    betaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def adjustParameters(self) -> None: ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getCurrTime(self) -> int: ...
    def getDL(self) -> float: ...
    def getDM(self) -> float: ...
    def getDecayFactor(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def printDStreamState(self) -> None: ...
    def printGridClusters(self) -> None: ...
    def printGridList(self) -> None: ...
    def printInst(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class GridCluster(moa.clusterers.macro.NonConvexCluster):
    @typing.overload
    def __init__(self, cFCluster: moa.cluster.CFCluster, list: java.util.List[moa.cluster.CFCluster], int: int): ...
    @typing.overload
    def __init__(self, cFCluster: moa.cluster.CFCluster, list: java.util.List[moa.cluster.CFCluster], hashMap: java.util.HashMap[DensityGrid, bool], int: int): ...
    def absorbCluster(self, gridCluster: 'GridCluster') -> None: ...
    def addGrid(self, densityGrid: DensityGrid) -> None: ...
    def getClusterLabel(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getGrids(self) -> java.util.HashMap[DensityGrid, bool]: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getWeight(self) -> float: ...
    def isConnected(self) -> bool: ...
    @typing.overload
    def isInside(self, densityGrid: DensityGrid) -> bool: ...
    @typing.overload
    def isInside(self, densityGrid: DensityGrid, densityGrid2: DensityGrid) -> bool: ...
    def removeGrid(self, densityGrid: DensityGrid) -> None: ...
    def setClusterLabel(self, int: int) -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.dstream")``.

    CharacteristicVector: typing.Type[CharacteristicVector]
    DensityGrid: typing.Type[DensityGrid]
    Dstream: typing.Type[Dstream]
    GridCluster: typing.Type[GridCluster]
