
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import typing



class Budget:
    @typing.overload
    def doubleAddition(self) -> None: ...
    @typing.overload
    def doubleAddition(self, int: int) -> None: ...
    @typing.overload
    def doubleDivision(self) -> None: ...
    @typing.overload
    def doubleDivision(self, int: int) -> None: ...
    @typing.overload
    def doubleMultiplication(self) -> None: ...
    @typing.overload
    def doubleMultiplication(self, int: int) -> None: ...
    def hasMoreTime(self) -> bool: ...
    @typing.overload
    def integerAddition(self) -> None: ...
    @typing.overload
    def integerAddition(self, int: int) -> None: ...
    @typing.overload
    def integerDivision(self) -> None: ...
    @typing.overload
    def integerDivision(self, int: int) -> None: ...
    @typing.overload
    def integerMultiplication(self) -> None: ...
    @typing.overload
    def integerMultiplication(self, int: int) -> None: ...

class SimpleBudget(Budget):
    INT_ADD: typing.ClassVar[int] = ...
    INT_MULT: typing.ClassVar[int] = ...
    INT_DIV: typing.ClassVar[int] = ...
    DOUBLE_ADD: typing.ClassVar[int] = ...
    DOUBLE_MULT: typing.ClassVar[int] = ...
    DOUBLE_DIV: typing.ClassVar[int] = ...
    def __init__(self, int: int): ...
    @typing.overload
    def doubleAddition(self) -> None: ...
    @typing.overload
    def doubleAddition(self, int: int) -> None: ...
    @typing.overload
    def doubleDivision(self) -> None: ...
    @typing.overload
    def doubleDivision(self, int: int) -> None: ...
    @typing.overload
    def doubleMultiplication(self) -> None: ...
    @typing.overload
    def doubleMultiplication(self, int: int) -> None: ...
    def hasMoreTime(self) -> bool: ...
    @typing.overload
    def integerAddition(self) -> None: ...
    @typing.overload
    def integerAddition(self, int: int) -> None: ...
    @typing.overload
    def integerDivision(self) -> None: ...
    @typing.overload
    def integerDivision(self, int: int) -> None: ...
    @typing.overload
    def integerMultiplication(self) -> None: ...
    @typing.overload
    def integerMultiplication(self, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.clustree.util")``.

    Budget: typing.Type[Budget]
    SimpleBudget: typing.Type[SimpleBudget]
