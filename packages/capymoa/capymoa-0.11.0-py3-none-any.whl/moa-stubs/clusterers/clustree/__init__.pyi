
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.io
import java.lang
import jpype
import moa.cluster
import moa.clusterers
import moa.clusterers.clustree.util
import typing



class ClusKernel(moa.cluster.CFCluster):
    EPSILON: typing.ClassVar[float] = ...
    MIN_VARIANCE: typing.ClassVar[float] = ...
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int): ...
    @typing.overload
    def add(self, cFCluster: moa.cluster.CFCluster) -> None: ...
    @typing.overload
    def add(self, clusKernel: 'ClusKernel') -> None: ...
    def calcDistance(self, clusKernel: 'ClusKernel') -> float: ...
    def getCF(self) -> moa.cluster.CFCluster: ...
    def getCenter(self) -> typing.MutableSequence[float]: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getRadius(self) -> float: ...
    def getVarianceVector(self) -> typing.MutableSequence[float]: ...
    def getWeight(self) -> float: ...

class ClusTree(moa.clusterers.AbstractClusterer):
    horizonOption: com.github.javacliparser.IntOption = ...
    maxHeightOption: com.github.javacliparser.IntOption = ...
    breadthFirstStrategyOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def adjustParameters(self) -> None: ...
    def getClustering(self, long: int, int: int) -> moa.cluster.Clustering: ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getHeight(self) -> int: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getNumRootSplits(self) -> int: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def insert(self, clusKernel: ClusKernel, budget: moa.clusterers.clustree.util.Budget, long: int) -> None: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class Entry(java.io.Serializable):
    data: ClusKernel = ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, int: int, clusKernel: ClusKernel, long: int): ...
    def add(self, entry: 'Entry') -> None: ...
    def calcDistance(self, entry: 'Entry') -> float: ...
    def getChild(self) -> 'Node': ...
    def getNode(self) -> 'Node': ...
    def getParentEntry(self) -> 'Entry': ...
    def getTimestamp(self) -> int: ...
    def setChild(self, node: 'Node') -> None: ...
    def setNode(self, node: 'Node') -> None: ...
    def setParentEntry(self, entry: 'Entry') -> None: ...

class Node(java.io.Serializable):
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, entryArray: typing.Union[typing.List[Entry], jpype.JArray]): ...
    def addEntry(self, entry: Entry, long: int) -> None: ...
    def getEntries(self) -> typing.MutableSequence[Entry]: ...
    def nearestEntry(self, clusKernel: ClusKernel) -> Entry: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.clustree")``.

    ClusKernel: typing.Type[ClusKernel]
    ClusTree: typing.Type[ClusTree]
    Entry: typing.Type[Entry]
    Node: typing.Type[Node]
    util: moa.clusterers.clustree.util.__module_protocol__
