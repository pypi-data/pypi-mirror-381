
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.cluster
import moa.clusterers
import typing



class Clustream(moa.clusterers.AbstractClusterer):
    timeWindowOption: com.github.javacliparser.IntOption = ...
    maxNumKernelsOption: com.github.javacliparser.IntOption = ...
    kernelRadiFactorOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    @staticmethod
    def distanceIgnoreNaN(doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getName(self) -> str: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def isRandomizable(self) -> bool: ...
    @typing.overload
    @staticmethod
    def kMeans(int: int, list: java.util.List[moa.cluster.Cluster]) -> moa.cluster.Clustering: ...
    @typing.overload
    @staticmethod
    def kMeans(int: int, clusterArray: typing.Union[typing.List[moa.cluster.Cluster], jpype.JArray], list: java.util.List[moa.cluster.Cluster]) -> moa.cluster.Clustering: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class ClustreamKernel(moa.cluster.CFCluster):
    MIN_VARIANCE: typing.ClassVar[float] = ...
    classObserver: typing.MutableSequence[float] = ...
    ID_GENERATOR: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int, long: int, double: float, int2: int): ...
    @typing.overload
    def __init__(self, clustreamKernel: 'ClustreamKernel', double: float, int: int): ...
    def add(self, cFCluster: moa.cluster.CFCluster) -> None: ...
    def getCF(self) -> moa.cluster.CFCluster: ...
    def getCenter(self) -> typing.MutableSequence[float]: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getRadius(self) -> float: ...
    def getRelevanceStamp(self) -> float: ...
    def insert(self, instance: com.yahoo.labs.samoa.instances.Instance, long: int) -> None: ...
    @staticmethod
    def inverseError(double: float) -> float: ...
    def isEmpty(self) -> bool: ...

class WithKmeans(moa.clusterers.AbstractClusterer):
    timeWindowOption: com.github.javacliparser.IntOption = ...
    maxNumKernelsOption: com.github.javacliparser.IntOption = ...
    kernelRadiFactorOption: com.github.javacliparser.IntOption = ...
    kOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def adjustParameters(self) -> None: ...
    @typing.overload
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    @typing.overload
    def getClusteringResult(self, clustering: moa.cluster.Clustering) -> moa.cluster.Clustering: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getName(self) -> str: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def isRandomizable(self) -> bool: ...
    @staticmethod
    def kMeans_gta(int: int, clustering: moa.cluster.Clustering, clustering2: moa.cluster.Clustering) -> moa.cluster.Clustering: ...
    @staticmethod
    def kMeans_rand(int: int, clustering: moa.cluster.Clustering) -> moa.cluster.Clustering: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.clustream")``.

    Clustream: typing.Type[Clustream]
    ClustreamKernel: typing.Type[ClustreamKernel]
    WithKmeans: typing.Type[WithKmeans]
