
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.awt
import java.util
import moa.cluster
import moa.clusterers.macro.dbscan
import typing



class AbstractMacroClusterer:
    def __init__(self): ...
    def getClustering(self, clustering: moa.cluster.Clustering) -> moa.cluster.Clustering: ...

class ColorArray:
    mVisibleColors: typing.ClassVar[typing.MutableSequence['ColorObject']] = ...
    def __init__(self): ...
    @staticmethod
    def getColor(int: int) -> java.awt.Color: ...
    @staticmethod
    def getName(int: int) -> str: ...
    @staticmethod
    def getNumColors() -> float: ...

class ColorObject:
    def __init__(self, string: str, color: java.awt.Color): ...
    def getColor(self) -> java.awt.Color: ...
    def getName(self) -> str: ...

class IDenseMacroCluster:
    def getClustering(self) -> moa.cluster.Clustering: ...
    def getMicroClusters(self) -> java.util.List[moa.cluster.CFCluster]: ...

class IMacroClusterer:
    def getClustering(self, clustering: moa.cluster.Clustering) -> moa.cluster.Clustering: ...

class NonConvexCluster(moa.cluster.CFCluster, IDenseMacroCluster):
    def __init__(self, cFCluster: moa.cluster.CFCluster, list: java.util.List[moa.cluster.CFCluster]): ...
    def getCF(self) -> moa.cluster.CFCluster: ...
    def getClustering(self) -> moa.cluster.Clustering: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getMicroClusters(self) -> java.util.List[moa.cluster.CFCluster]: ...
    def getRadius(self) -> float: ...
    def insert(self, cFCluster: moa.cluster.CFCluster) -> None: ...
    def remove(self, cFCluster: moa.cluster.CFCluster) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.macro")``.

    AbstractMacroClusterer: typing.Type[AbstractMacroClusterer]
    ColorArray: typing.Type[ColorArray]
    ColorObject: typing.Type[ColorObject]
    IDenseMacroCluster: typing.Type[IDenseMacroCluster]
    IMacroClusterer: typing.Type[IMacroClusterer]
    NonConvexCluster: typing.Type[NonConvexCluster]
    dbscan: moa.clusterers.macro.dbscan.__module_protocol__
