
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.awt
import java.awt.event
import javax.swing
import jpype
import moa.clusterers.outliers
import moa.evaluation
import moa.gui
import moa.gui.visualization
import moa.streams.clustering
import typing



class OutlierAlgoPanel(javax.swing.JPanel, java.awt.event.ActionListener):
    def __init__(self): ...
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    def applyChanges(self) -> None: ...
    def getAlgorithm0ValueAsCLIString(self) -> str: ...
    def getAlgorithm1ValueAsCLIString(self) -> str: ...
    def getClusterer0(self) -> moa.clusterers.outliers.MyBaseOutlierDetector: ...
    def getClusterer1(self) -> moa.clusterers.outliers.MyBaseOutlierDetector: ...
    def getEditComponent(self, option: com.github.javacliparser.Option) -> javax.swing.JComponent: ...
    def getStream(self) -> moa.streams.clustering.ClusteringStream: ...
    def getStreamValueAsCLIString(self) -> str: ...
    def renderAlgoPanel(self) -> None: ...
    def setAlgorithm0ValueAsCLIString(self, string: str) -> None: ...
    def setAlgorithm1ValueAsCLIString(self, string: str) -> None: ...
    def setPanelTitle(self, string: str) -> None: ...
    def setStreamValueAsCLIString(self, string: str) -> None: ...

class OutlierEvalPanel(javax.swing.JPanel):
    def __init__(self): ...
    def getSelectedMeasures(self) -> typing.MutableSequence[moa.evaluation.MeasureCollection]: ...

class OutlierSetupTab(javax.swing.JPanel):
    def __init__(self): ...
    def addButtonActionListener(self, actionListener: typing.Union[java.awt.event.ActionListener, typing.Callable]) -> None: ...
    def getLogPanel(self) -> moa.gui.TextViewerPanel: ...
    def getMeasures(self) -> typing.MutableSequence[moa.evaluation.MeasureCollection]: ...
    def getOutlierer0(self) -> moa.clusterers.outliers.MyBaseOutlierDetector: ...
    def getOutlierer1(self) -> moa.clusterers.outliers.MyBaseOutlierDetector: ...
    def getStream0(self) -> moa.streams.clustering.ClusteringStream: ...
    def stopRun(self) -> None: ...
    def toggleRunMode(self) -> None: ...

class OutlierTabPanel(moa.gui.AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class OutlierVisualEvalPanel(javax.swing.JPanel):
    def __init__(self): ...
    def setMeasures(self, measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], actionListener: typing.Union[java.awt.event.ActionListener, typing.Callable]) -> None: ...
    @typing.overload
    def update(self, graphics: java.awt.Graphics) -> None: ...
    @typing.overload
    def update(self) -> None: ...

class OutlierVisualTab(javax.swing.JPanel, java.awt.event.ActionListener, java.awt.event.ComponentListener):
    def __init__(self): ...
    def GetSpeed(self) -> int: ...
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    def componentHidden(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentMoved(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentResized(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def componentShown(self, componentEvent: java.awt.event.ComponentEvent) -> None: ...
    def getEvalPanel(self) -> OutlierVisualEvalPanel: ...
    def getGraphCanvas(self) -> moa.gui.visualization.GraphCanvas: ...
    def getLeftStreamPanel(self) -> moa.gui.visualization.StreamOutlierPanel: ...
    def getOutliersVisibility(self) -> bool: ...
    def getPauseInterval(self) -> int: ...
    def getPointVisibility(self) -> bool: ...
    def getRightStreamPanel(self) -> moa.gui.visualization.StreamOutlierPanel: ...
    def getWaitWinFull(self) -> bool: ...
    def isEnabledDrawOutliers(self) -> bool: ...
    def isEnabledDrawPoints(self) -> bool: ...
    @typing.overload
    def repaint(self, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def repaint(self, long: int) -> None: ...
    @typing.overload
    def repaint(self, rectangle: java.awt.Rectangle) -> None: ...
    @typing.overload
    def repaint(self, long: int, int: int, int2: int, int3: int, int4: int) -> None: ...
    @typing.overload
    def repaint(self) -> None: ...
    def setDimensionComobBoxes(self, int: int) -> None: ...
    def setOutlierSetupTab(self, outlierSetupTab: OutlierSetupTab) -> None: ...
    def setPauseInterval(self, int: int) -> None: ...
    def setProcessedPointsCounter(self, int: int) -> None: ...
    def stopVisualizer(self) -> None: ...
    def toggleVisualizer(self, boolean: bool) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.gui.outliertab")``.

    OutlierAlgoPanel: typing.Type[OutlierAlgoPanel]
    OutlierEvalPanel: typing.Type[OutlierEvalPanel]
    OutlierSetupTab: typing.Type[OutlierSetupTab]
    OutlierTabPanel: typing.Type[OutlierTabPanel]
    OutlierVisualEvalPanel: typing.Type[OutlierVisualEvalPanel]
    OutlierVisualTab: typing.Type[OutlierVisualTab]
