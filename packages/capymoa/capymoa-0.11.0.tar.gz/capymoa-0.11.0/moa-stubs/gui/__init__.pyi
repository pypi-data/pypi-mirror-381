
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.github.javacliparser.gui
import java.awt
import java.awt.event
import java.io
import java.lang
import java.util
import javax.swing
import javax.swing.filechooser
import javax.swing.table
import jpype
import jpype.protocol
import moa.capabilities
import moa.clusterers
import moa.evaluation
import moa.evaluation.preview
import moa.gui.active
import moa.gui.clustertab
import moa.gui.colorGenerator
import moa.gui.conceptdrift
import moa.gui.experimentertab
import moa.gui.featureanalysis
import moa.gui.outliertab
import moa.gui.visualization
import moa.streams.clustering
import moa.tasks
import typing



class AWTRenderable:
    def getAWTRenderer(self) -> 'AWTRenderer': ...

class AWTRenderer:
    def renderAWTBox(self, graphics: java.awt.Graphics, int: int, int2: int, int3: int, int4: int) -> None: ...

class AbstractTabPanel(javax.swing.JPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class AuxiliarTaskManagerPanel(javax.swing.JPanel):
    MILLISECS_BETWEEN_REFRESH: typing.ClassVar[int] = ...
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def cancelSelectedTasks(self) -> None: ...
    def copyClipBoardConfiguration(self) -> None: ...
    def deleteSelectedTasks(self) -> None: ...
    def getSelectedTasks(self) -> typing.MutableSequence[moa.tasks.TaskThread]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def pauseSelectedTasks(self) -> None: ...
    def resumeSelectedTasks(self) -> None: ...
    def runTask(self, task: moa.tasks.Task) -> None: ...
    def saveLogSelectedTasks(self) -> None: ...
    def setPreviewPanel(self, previewPanel: 'PreviewPanel') -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def taskSelectionChanged(self) -> None: ...
    class ProgressCellRenderer(javax.swing.JProgressBar, javax.swing.table.TableCellRenderer):
        def __init__(self, auxiliarTaskManagerPanel: 'AuxiliarTaskManagerPanel'): ...
        @typing.overload
        def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, int: int, int2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, boolean: bool, boolean2: bool) -> None: ...
        def getTableCellRendererComponent(self, jTable: javax.swing.JTable, object: typing.Any, boolean: bool, boolean2: bool, int: int, int2: int) -> java.awt.Component: ...
        def revalidate(self) -> None: ...
        def validate(self) -> None: ...

class BatchCmd(moa.streams.clustering.ClusterEventListener):
    useMicroGT: bool = ...
    def __init__(self, abstractClusterer: moa.clusterers.AbstractClusterer, clusteringStream: moa.streams.clustering.ClusteringStream, measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], int: int): ...
    def changeCluster(self, clusterEvent: moa.streams.clustering.ClusterEvent) -> None: ...
    @staticmethod
    def exportCSV(string: str, arrayList: java.util.ArrayList[moa.streams.clustering.ClusterEvent], measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], int: int) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def run(self) -> None: ...
    @staticmethod
    def runBatch(clusteringStream: moa.streams.clustering.ClusteringStream, abstractClusterer: moa.clusterers.AbstractClusterer, booleanArray: typing.Union[typing.List[bool], jpype.JArray], int: int, string: str) -> None: ...

class ClassOptionSelectionPanel(javax.swing.JPanel):
    def __init__(self, class_: typing.Type[typing.Any], string: str, string2: str): ...
    def classChoiceChanged(self, object: typing.Any) -> None: ...
    def findSuitableClasses(self, class_: typing.Type[typing.Any]) -> typing.MutableSequence[typing.Type[typing.Any]]: ...
    def getChosenObjectCLIString(self, class_: typing.Type[typing.Any]) -> str: ...
    @staticmethod
    def setRequiredCapabilities(capabilityRequirement: moa.capabilities.CapabilityRequirement) -> None: ...
    @staticmethod
    def showSelectClassDialog(component: java.awt.Component, string: str, class_: typing.Type[typing.Any], string2: str, string3: str) -> str: ...

class ClassOptionWithListenerOptionEditComponent(com.github.javacliparser.gui.ClassOptionEditComponent):
    def __init__(self, option: com.github.javacliparser.Option): ...

class ClassOptionWithNamesSelectionPanel(javax.swing.JPanel):
    def __init__(self, class_: typing.Type[typing.Any], string: str, string2: str, stringArray: typing.Union[typing.List[str], jpype.JArray]): ...
    def classChoiceChanged(self, object: typing.Any) -> None: ...
    def findSuitableClasses(self, class_: typing.Type[typing.Any], stringArray: typing.Union[typing.List[str], jpype.JArray]) -> typing.MutableSequence[typing.Type[typing.Any]]: ...
    def getChosenObjectCLIString(self, class_: typing.Type[typing.Any]) -> str: ...
    @staticmethod
    def showSelectClassDialog(component: java.awt.Component, string: str, class_: typing.Type[typing.Any], string2: str, string3: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> str: ...

class EditableMultiChoiceOptionEditComponent(com.github.javacliparser.gui.MultiChoiceOptionEditComponent):
    def __init__(self, option: com.github.javacliparser.Option): ...
    def refresh(self) -> None: ...

class FileExtensionFilter(javax.swing.filechooser.FileFilter):
    def __init__(self, string: str): ...
    def accept(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> bool: ...
    def getDescription(self) -> str: ...

class GUI(javax.swing.JPanel):
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class GUIDefaults(java.io.Serializable):
    PROPERTY_FILE: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def get(string: str, string2: str) -> str: ...
    @staticmethod
    def getDefaultTabs() -> typing.MutableSequence[str]: ...
    @staticmethod
    def getFileChooserHeight() -> int: ...
    @staticmethod
    def getFileChooserWidth() -> int: ...
    @staticmethod
    def getFrameHeight() -> int: ...
    @staticmethod
    def getFrameWidth() -> int: ...
    @staticmethod
    def getInitialDirectory() -> str: ...
    @staticmethod
    def getMaxTabUndo() -> int: ...
    @staticmethod
    def getProperties() -> java.util.Properties: ...
    @staticmethod
    def getTabs() -> typing.MutableSequence[str]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class GUIUtils:
    def __init__(self): ...
    @staticmethod
    def showErrorDialog(component: java.awt.Component, string: str, string2: str) -> None: ...
    @staticmethod
    def showExceptionDialog(component: java.awt.Component, string: str, exception: java.lang.Exception) -> None: ...

class LineGraphViewPanel(javax.swing.JPanel):
    def __init__(self): ...

class LookAndFeel:
    KEY_LOOKANDFEEL: typing.ClassVar[str] = ...
    WINDOWS_LNF: typing.ClassVar[str] = ...
    CROSSPLATFORM_LNF: typing.ClassVar[str] = ...
    VALUE_SYSTEM: typing.ClassVar[str] = ...
    VALUE_CROSSPLATFORM: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def install() -> None: ...

class MultiLabelTaskManagerPanel(javax.swing.JPanel):
    MILLISECS_BETWEEN_REFRESH: typing.ClassVar[int] = ...
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def cancelSelectedTasks(self) -> None: ...
    def copyClipBoardConfiguration(self) -> None: ...
    def deleteSelectedTasks(self) -> None: ...
    def getSelectedTasks(self) -> typing.MutableSequence[moa.tasks.TaskThread]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def pauseSelectedTasks(self) -> None: ...
    def resumeSelectedTasks(self) -> None: ...
    def runTask(self, task: moa.tasks.Task) -> None: ...
    def saveLogSelectedTasks(self) -> None: ...
    def setPreviewPanel(self, previewPanel: 'PreviewPanel') -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def taskSelectionChanged(self) -> None: ...
    class ProgressCellRenderer(javax.swing.JProgressBar, javax.swing.table.TableCellRenderer):
        def __init__(self, multiLabelTaskManagerPanel: 'MultiLabelTaskManagerPanel'): ...
        @typing.overload
        def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, int: int, int2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, boolean: bool, boolean2: bool) -> None: ...
        def getTableCellRendererComponent(self, jTable: javax.swing.JTable, object: typing.Any, boolean: bool, boolean2: bool, int: int, int2: int) -> java.awt.Component: ...
        def revalidate(self) -> None: ...
        def validate(self) -> None: ...

class MultiTargetTaskManagerPanel(javax.swing.JPanel):
    MILLISECS_BETWEEN_REFRESH: typing.ClassVar[int] = ...
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def cancelSelectedTasks(self) -> None: ...
    def copyClipBoardConfiguration(self) -> None: ...
    def deleteSelectedTasks(self) -> None: ...
    def getSelectedTasks(self) -> typing.MutableSequence[moa.tasks.TaskThread]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def pauseSelectedTasks(self) -> None: ...
    def resumeSelectedTasks(self) -> None: ...
    def runTask(self, task: moa.tasks.Task) -> None: ...
    def saveLogSelectedTasks(self) -> None: ...
    def setPreviewPanel(self, previewPanel: 'PreviewPanel') -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def taskSelectionChanged(self) -> None: ...
    class ProgressCellRenderer(javax.swing.JProgressBar, javax.swing.table.TableCellRenderer):
        def __init__(self, multiTargetTaskManagerPanel: 'MultiTargetTaskManagerPanel'): ...
        @typing.overload
        def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, int: int, int2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, boolean: bool, boolean2: bool) -> None: ...
        def getTableCellRendererComponent(self, jTable: javax.swing.JTable, object: typing.Any, boolean: bool, boolean2: bool, int: int, int2: int) -> java.awt.Component: ...
        def revalidate(self) -> None: ...
        def validate(self) -> None: ...

class PreviewPanel(javax.swing.JPanel, moa.tasks.ResultPreviewListener):
    autoFreqStrings: typing.ClassVar[typing.MutableSequence[str]] = ...
    autoFreqTimeSecs: typing.ClassVar[typing.MutableSequence[int]] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, typePanel: 'PreviewPanel.TypePanel'): ...
    @typing.overload
    def __init__(self, typePanel: 'PreviewPanel.TypePanel', cDTaskManagerPanel: moa.gui.conceptdrift.CDTaskManagerPanel): ...
    def disableRefresh(self) -> None: ...
    def enableRefresh(self) -> None: ...
    def latestPreviewChanged(self) -> None: ...
    def refresh(self) -> None: ...
    def setTaskThreadToPreview(self, taskThread: moa.tasks.TaskThread) -> None: ...
    def updateAutoRefreshTimer(self) -> None: ...
    class TypePanel(java.lang.Enum['PreviewPanel.TypePanel']):
        CLASSIFICATION: typing.ClassVar['PreviewPanel.TypePanel'] = ...
        REGRESSION: typing.ClassVar['PreviewPanel.TypePanel'] = ...
        CONCEPT_DRIFT: typing.ClassVar['PreviewPanel.TypePanel'] = ...
        PREDICTIONINTERVAL: typing.ClassVar['PreviewPanel.TypePanel'] = ...
        def getMeasureCollection(self) -> moa.evaluation.MeasureCollection: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PreviewPanel.TypePanel': ...
        @staticmethod
        def values() -> typing.MutableSequence['PreviewPanel.TypePanel']: ...

class PreviewTableModel(javax.swing.table.AbstractTableModel):
    def __init__(self): ...
    def getColumnCount(self) -> int: ...
    def getColumnName(self, int: int) -> str: ...
    def getRowCount(self) -> int: ...
    def getValueAt(self, int: int, int2: int) -> typing.Any: ...
    def setPreview(self, preview: moa.evaluation.preview.Preview) -> None: ...
    def structureChanged(self) -> bool: ...
    def toString(self) -> str: ...

class RegressionTaskManagerPanel(javax.swing.JPanel):
    MILLISECS_BETWEEN_REFRESH: typing.ClassVar[int] = ...
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def cancelSelectedTasks(self) -> None: ...
    def copyClipBoardConfiguration(self) -> None: ...
    def deleteSelectedTasks(self) -> None: ...
    def getSelectedTasks(self) -> typing.MutableSequence[moa.tasks.TaskThread]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def pauseSelectedTasks(self) -> None: ...
    def resumeSelectedTasks(self) -> None: ...
    def runTask(self, task: moa.tasks.Task) -> None: ...
    def saveLogSelectedTasks(self) -> None: ...
    def setPreviewPanel(self, previewPanel: PreviewPanel) -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def taskSelectionChanged(self) -> None: ...
    class ProgressCellRenderer(javax.swing.JProgressBar, javax.swing.table.TableCellRenderer):
        def __init__(self, regressionTaskManagerPanel: 'RegressionTaskManagerPanel'): ...
        @typing.overload
        def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, int: int, int2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, boolean: bool, boolean2: bool) -> None: ...
        def getTableCellRendererComponent(self, jTable: javax.swing.JTable, object: typing.Any, boolean: bool, boolean2: bool, int: int, int2: int) -> java.awt.Component: ...
        def revalidate(self) -> None: ...
        def validate(self) -> None: ...

class SemiSupervisedTaskManagerPanel(javax.swing.JPanel):
    MILLISECS_BETWEEN_REFRESH: typing.ClassVar[int] = ...
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def cancelSelectedTasks(self) -> None: ...
    def copyClipBoardConfiguration(self) -> None: ...
    def deleteSelectedTasks(self) -> None: ...
    def getSelectedTasks(self) -> typing.MutableSequence[moa.tasks.TaskThread]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def pauseSelectedTasks(self) -> None: ...
    def resumeSelectedTasks(self) -> None: ...
    def runTask(self, task: moa.tasks.Task) -> None: ...
    def saveLogSelectedTasks(self) -> None: ...
    def setPreviewPanel(self, previewPanel: PreviewPanel) -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def taskSelectionChanged(self) -> None: ...
    class ProgressCellRenderer(javax.swing.JProgressBar, javax.swing.table.TableCellRenderer):
        def __init__(self, semiSupervisedTaskManagerPanel: 'SemiSupervisedTaskManagerPanel'): ...
        @typing.overload
        def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, int: int, int2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, boolean: bool, boolean2: bool) -> None: ...
        def getTableCellRendererComponent(self, jTable: javax.swing.JTable, object: typing.Any, boolean: bool, boolean2: bool, int: int, int2: int) -> java.awt.Component: ...
        def revalidate(self) -> None: ...
        def validate(self) -> None: ...

class TaskLauncher(javax.swing.JPanel):
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class TaskManagerPanel(javax.swing.JPanel):
    MILLISECS_BETWEEN_REFRESH: typing.ClassVar[int] = ...
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def cancelSelectedTasks(self) -> None: ...
    def copyClipBoardConfiguration(self) -> None: ...
    def deleteSelectedTasks(self) -> None: ...
    def getSelectedTasks(self) -> typing.MutableSequence[moa.tasks.TaskThread]: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def pauseSelectedTasks(self) -> None: ...
    def resumeSelectedTasks(self) -> None: ...
    def runTask(self, task: moa.tasks.Task) -> None: ...
    def saveLogSelectedTasks(self) -> None: ...
    def setPreviewPanel(self, previewPanel: PreviewPanel) -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def storeSelectedViewMode(self) -> None: ...
    def taskSelectionChanged(self) -> None: ...
    class ProgressCellRenderer(javax.swing.JProgressBar, javax.swing.table.TableCellRenderer):
        def __init__(self, taskManagerPanel: 'TaskManagerPanel'): ...
        @typing.overload
        def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, int: int, int2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, boolean: bool, boolean2: bool) -> None: ...
        def getTableCellRendererComponent(self, jTable: javax.swing.JTable, object: typing.Any, boolean: bool, boolean2: bool, int: int, int2: int) -> java.awt.Component: ...
        def revalidate(self) -> None: ...
        def validate(self) -> None: ...

class TaskTextViewerPanel(javax.swing.JPanel, java.awt.event.ActionListener):
    exportFileExtension: typing.ClassVar[str] = ...
    gridBagConstraints: java.awt.GridBagConstraints = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, typePanel: PreviewPanel.TypePanel, cDTaskManagerPanel: moa.gui.conceptdrift.CDTaskManagerPanel): ...
    def actionPerformed(self, actionEvent: java.awt.event.ActionEvent) -> None: ...
    def initVisualEvalPanel(self) -> None: ...
    def setGraph(self, string: str) -> None: ...
    @typing.overload
    def setText(self, object: typing.Any) -> None: ...
    @typing.overload
    def setText(self, preview: moa.evaluation.preview.Preview) -> None: ...
    @typing.overload
    def setText(self, failedTaskReport: moa.tasks.FailedTaskReport) -> None: ...

class TextViewerPanel(javax.swing.JPanel):
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def addText(self, string: str) -> None: ...
    def setText(self, string: str) -> None: ...

class WEKAClassOptionEditComponent(javax.swing.JPanel, com.github.javacliparser.gui.OptionEditComponent):
    def __init__(self, option: com.github.javacliparser.Option): ...
    def applyState(self) -> None: ...
    def editObject(self) -> None: ...
    def getEditedOption(self) -> com.github.javacliparser.Option: ...
    def setEditState(self, string: str) -> None: ...

class ALTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class AWTInteractiveRenderer(AWTRenderer):
    def mouseClicked(self, int: int, int2: int) -> None: ...

class AuxiliarTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class ClassificationTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class ConceptDriftTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class MultiLabelTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class MultiTargetTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class RegressionTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class ScriptingTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...

class SemiSupervisedTabPanel(AbstractTabPanel):
    def __init__(self): ...
    def getDescription(self) -> str: ...
    def getTabTitle(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.gui")``.

    ALTabPanel: typing.Type[ALTabPanel]
    AWTInteractiveRenderer: typing.Type[AWTInteractiveRenderer]
    AWTRenderable: typing.Type[AWTRenderable]
    AWTRenderer: typing.Type[AWTRenderer]
    AbstractTabPanel: typing.Type[AbstractTabPanel]
    AuxiliarTabPanel: typing.Type[AuxiliarTabPanel]
    AuxiliarTaskManagerPanel: typing.Type[AuxiliarTaskManagerPanel]
    BatchCmd: typing.Type[BatchCmd]
    ClassOptionSelectionPanel: typing.Type[ClassOptionSelectionPanel]
    ClassOptionWithListenerOptionEditComponent: typing.Type[ClassOptionWithListenerOptionEditComponent]
    ClassOptionWithNamesSelectionPanel: typing.Type[ClassOptionWithNamesSelectionPanel]
    ClassificationTabPanel: typing.Type[ClassificationTabPanel]
    ConceptDriftTabPanel: typing.Type[ConceptDriftTabPanel]
    EditableMultiChoiceOptionEditComponent: typing.Type[EditableMultiChoiceOptionEditComponent]
    FileExtensionFilter: typing.Type[FileExtensionFilter]
    GUI: typing.Type[GUI]
    GUIDefaults: typing.Type[GUIDefaults]
    GUIUtils: typing.Type[GUIUtils]
    LineGraphViewPanel: typing.Type[LineGraphViewPanel]
    LookAndFeel: typing.Type[LookAndFeel]
    MultiLabelTabPanel: typing.Type[MultiLabelTabPanel]
    MultiLabelTaskManagerPanel: typing.Type[MultiLabelTaskManagerPanel]
    MultiTargetTabPanel: typing.Type[MultiTargetTabPanel]
    MultiTargetTaskManagerPanel: typing.Type[MultiTargetTaskManagerPanel]
    PreviewPanel: typing.Type[PreviewPanel]
    PreviewTableModel: typing.Type[PreviewTableModel]
    RegressionTabPanel: typing.Type[RegressionTabPanel]
    RegressionTaskManagerPanel: typing.Type[RegressionTaskManagerPanel]
    ScriptingTabPanel: typing.Type[ScriptingTabPanel]
    SemiSupervisedTabPanel: typing.Type[SemiSupervisedTabPanel]
    SemiSupervisedTaskManagerPanel: typing.Type[SemiSupervisedTaskManagerPanel]
    TaskLauncher: typing.Type[TaskLauncher]
    TaskManagerPanel: typing.Type[TaskManagerPanel]
    TaskTextViewerPanel: typing.Type[TaskTextViewerPanel]
    TextViewerPanel: typing.Type[TextViewerPanel]
    WEKAClassOptionEditComponent: typing.Type[WEKAClassOptionEditComponent]
    active: moa.gui.active.__module_protocol__
    clustertab: moa.gui.clustertab.__module_protocol__
    colorGenerator: moa.gui.colorGenerator.__module_protocol__
    conceptdrift: moa.gui.conceptdrift.__module_protocol__
    experimentertab: moa.gui.experimentertab.__module_protocol__
    featureanalysis: moa.gui.featureanalysis.__module_protocol__
    outliertab: moa.gui.outliertab.__module_protocol__
    visualization: moa.gui.visualization.__module_protocol__
