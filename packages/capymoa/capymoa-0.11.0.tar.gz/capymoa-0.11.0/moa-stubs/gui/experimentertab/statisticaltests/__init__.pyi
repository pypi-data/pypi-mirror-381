
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import moa.gui.experimentertab
import typing



class CDF_Normal:
    def __init__(self): ...
    @staticmethod
    def normp(double: float) -> float: ...
    @staticmethod
    def xnormi(double: float) -> float: ...

class Fichero:
    def __init__(self): ...
    @staticmethod
    def AnadirtoFichero(string: str, string2: str) -> None: ...
    @staticmethod
    def escribeFichero(string: str, string2: str) -> None: ...
    @staticmethod
    def leeFichero(string: str) -> str: ...

class PValuePerTwoAlgorithm:
    algName1: str = ...
    algName2: str = ...
    PValue: float = ...
    def __init__(self, string: str, string2: str, double: float): ...
    @staticmethod
    def getIndex(arrayList: java.util.ArrayList['PValuePerTwoAlgorithm'], string: str, string2: str) -> int: ...
    def isSignicativeBetterThan(self, double: float) -> bool: ...

class Pareja(java.lang.Comparable):
    indice: float = ...
    valor: float = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float, double2: float): ...
    def compareTo(self, object: typing.Any) -> int: ...

class RankPerAlgorithm(java.lang.Comparable['RankPerAlgorithm']):
    algName: str = ...
    rank: float = ...
    def __init__(self, string: str, double: float): ...
    def compareTo(self, rankPerAlgorithm: 'RankPerAlgorithm') -> int: ...

class Relation:
    i: int = ...
    j: int = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    def toString(self) -> str: ...

class StatisticalTest:
    streams: java.util.List = ...
    def __init__(self, list: java.util.List[moa.gui.experimentertab.Stream]): ...
    def avgPerformance(self) -> None: ...
    def getFriedmanPValue(self) -> float: ...
    def getImanPValue(self) -> float: ...
    def getRankAlg(self) -> java.util.ArrayList[RankPerAlgorithm]: ...
    def holmTest(self) -> java.util.ArrayList[PValuePerTwoAlgorithm]: ...
    def nemenyiTest(self) -> java.util.ArrayList[PValuePerTwoAlgorithm]: ...
    def readCSV(self, string: str) -> None: ...
    def readData(self) -> None: ...
    def shafferTest(self) -> java.util.ArrayList[PValuePerTwoAlgorithm]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.gui.experimentertab.statisticaltests")``.

    CDF_Normal: typing.Type[CDF_Normal]
    Fichero: typing.Type[Fichero]
    PValuePerTwoAlgorithm: typing.Type[PValuePerTwoAlgorithm]
    Pareja: typing.Type[Pareja]
    RankPerAlgorithm: typing.Type[RankPerAlgorithm]
    Relation: typing.Type[Relation]
    StatisticalTest: typing.Type[StatisticalTest]
