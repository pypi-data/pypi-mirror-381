
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.util
import moa.options
import moa.streams.clustering
import moa.tasks
import typing



class ExperimenterTask(moa.tasks.AbstractTask):
    def __init__(self): ...

class ConceptDriftMainTask(ExperimenterTask):
    def __init__(self): ...
    def getEventsList(self) -> java.util.ArrayList[moa.streams.clustering.ClusterEvent]: ...

class EvaluateInterleavedChunks(ExperimenterTask):
    evaluatorOption: moa.options.ClassOption = ...
    instanceLimitOption: com.github.javacliparser.IntOption = ...
    chunkSizeOption: com.github.javacliparser.IntOption = ...
    timeLimitOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    maxMemoryOption: com.github.javacliparser.IntOption = ...
    memCheckFrequencyOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...

class EvaluateInterleavedTestThenTrain(ExperimenterTask):
    randomSeedOption: com.github.javacliparser.IntOption = ...
    evaluatorOption: moa.options.ClassOption = ...
    instanceLimitOption: com.github.javacliparser.IntOption = ...
    timeLimitOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    memCheckFrequencyOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...

class EvaluatePeriodicHeldOutTest(ExperimenterTask):
    evaluatorOption: moa.options.ClassOption = ...
    testSizeOption: com.github.javacliparser.IntOption = ...
    trainSizeOption: com.github.javacliparser.IntOption = ...
    trainTimeOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    cacheTestOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...

class EvaluatePrequential(ExperimenterTask):
    evaluatorOption: moa.options.ClassOption = ...
    instanceLimitOption: com.github.javacliparser.IntOption = ...
    timeLimitOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    memCheckFrequencyOption: com.github.javacliparser.IntOption = ...
    widthOption: com.github.javacliparser.IntOption = ...
    alphaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...

class EvaluatePrequentialCV(ExperimenterTask):
    evaluatorOption: moa.options.ClassOption = ...
    instanceLimitOption: com.github.javacliparser.IntOption = ...
    timeLimitOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    memCheckFrequencyOption: com.github.javacliparser.IntOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    validationMethodologyOption: com.github.javacliparser.MultiChoiceOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...

class EvaluateConceptDrift(ConceptDriftMainTask):
    evaluatorOption: moa.options.ClassOption = ...
    instanceLimitOption: com.github.javacliparser.IntOption = ...
    timeLimitOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.gui.experimentertab.tasks")``.

    ConceptDriftMainTask: typing.Type[ConceptDriftMainTask]
    EvaluateConceptDrift: typing.Type[EvaluateConceptDrift]
    EvaluateInterleavedChunks: typing.Type[EvaluateInterleavedChunks]
    EvaluateInterleavedTestThenTrain: typing.Type[EvaluateInterleavedTestThenTrain]
    EvaluatePeriodicHeldOutTest: typing.Type[EvaluatePeriodicHeldOutTest]
    EvaluatePrequential: typing.Type[EvaluatePrequential]
    EvaluatePrequentialCV: typing.Type[EvaluatePrequentialCV]
    ExperimenterTask: typing.Type[ExperimenterTask]
