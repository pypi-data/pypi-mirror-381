
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.awt
import java.awt.event
import javax.swing
import javax.swing.table
import jpype
import moa.evaluation
import moa.evaluation.preview
import moa.tasks
import moa.tasks.meta
import typing



class ALPreviewPanel(javax.swing.JPanel, moa.tasks.ResultPreviewListener):
    def __init__(self): ...
    def latestPreviewChanged(self) -> None: ...
    def setTaskThreadToPreview(self, aLTaskThread: moa.tasks.meta.ALTaskThread) -> None: ...

class ALTaskManagerPanel(javax.swing.JPanel):
    MILLISECS_BETWEEN_REFRESH: typing.ClassVar[int] = ...
    exportFileExtension: typing.ClassVar[str] = ...
    def __init__(self): ...
    def cancelSelectedTasks(self) -> None: ...
    def copyClipBoardConfiguration(self) -> None: ...
    def deleteSelectedTasks(self) -> None: ...
    def getSelectedTasks(self) -> typing.MutableSequence[moa.tasks.meta.ALTaskThread]: ...
    def pauseSelectedTasks(self) -> None: ...
    def resumeSelectedTasks(self) -> None: ...
    def runTask(self, aLMainTask: moa.tasks.meta.ALMainTask) -> None: ...
    def saveLogSelectedTasks(self) -> None: ...
    def setPreviewPanel(self, aLPreviewPanel: ALPreviewPanel) -> None: ...
    @typing.overload
    def setTaskString(self, string: str) -> None: ...
    @typing.overload
    def setTaskString(self, string: str, boolean: bool) -> None: ...
    def taskSelectionChanged(self) -> None: ...
    class ProgressCellRenderer(javax.swing.JProgressBar, javax.swing.table.TableCellRenderer):
        def __init__(self, aLTaskManagerPanel: 'ALTaskManagerPanel'): ...
        @typing.overload
        def firePropertyChange(self, string: str, byte: int, byte2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, double: float, double2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, float: float, float2: float) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, long: int, long2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, short: int, short2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, char: str, char2: str) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, int: int, int2: int) -> None: ...
        @typing.overload
        def firePropertyChange(self, string: str, boolean: bool, boolean2: bool) -> None: ...
        def getTableCellRendererComponent(self, jTable: javax.swing.JTable, object: typing.Any, boolean: bool, boolean2: bool, int: int, int2: int) -> java.awt.Component: ...
        def revalidate(self) -> None: ...
        def validate(self) -> None: ...

class ALTaskTextViewerPanel(javax.swing.JPanel):
    def __init__(self): ...
    def readCollection(self, previewCollection: moa.evaluation.preview.PreviewCollection[moa.evaluation.preview.Preview]) -> 'ALTaskTextViewerPanel.ParsedPreview': ...
    def setErrorText(self, failedTaskReport: moa.tasks.FailedTaskReport) -> None: ...
    def setGraph(self, preview: moa.evaluation.preview.Preview, colorArray: typing.Union[typing.List[java.awt.Color], jpype.JArray]) -> None: ...
    def setText(self, preview: moa.evaluation.preview.Preview) -> None: ...
    class ParsedPreview: ...

class MeasureOverview(javax.swing.JPanel):
    def __init__(self, measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], string: str, doubleArray: typing.Union[typing.List[float], jpype.JArray]): ...
    def setActionListener(self, actionListener: typing.Union[java.awt.event.ActionListener, typing.Callable]) -> None: ...
    @typing.overload
    def update(self, graphics: java.awt.Graphics) -> None: ...
    @typing.overload
    def update(self) -> None: ...
    @typing.overload
    def update(self, measureCollectionArray: typing.Union[typing.List[moa.evaluation.MeasureCollection], jpype.JArray], string: str, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.gui.active")``.

    ALPreviewPanel: typing.Type[ALPreviewPanel]
    ALTaskManagerPanel: typing.Type[ALTaskManagerPanel]
    ALTaskTextViewerPanel: typing.Type[ALTaskTextViewerPanel]
    MeasureOverview: typing.Type[MeasureOverview]
