
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa
import moa.cluster
import moa.clusterers.clustream
import moa.clusterers.clustree
import moa.clusterers.denstream
import moa.clusterers.dstream
import moa.clusterers.kmeanspm
import moa.clusterers.macro
import moa.clusterers.meta
import moa.clusterers.outliers
import moa.clusterers.streamkm
import moa.core
import moa.gui
import moa.options
import moa.tasks
import typing



class Clusterer(moa.MOAObject, moa.options.OptionHandler, moa.gui.AWTRenderable):
    def copy(self) -> 'Clusterer': ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelContext(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getModelMeasurements(self) -> typing.MutableSequence[moa.core.Measurement]: ...
    def getSubClusterers(self) -> typing.MutableSequence['Clusterer']: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def isRandomizable(self) -> bool: ...
    def keepClassLabel(self) -> bool: ...
    def resetLearning(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def setRandomSeed(self, int: int) -> None: ...
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainingHasStarted(self) -> bool: ...
    def trainingWeightSeenByModel(self) -> float: ...

class KMeans:
    def __init__(self): ...
    @staticmethod
    def gaussianMeans(clustering: moa.cluster.Clustering, clustering2: moa.cluster.Clustering) -> moa.cluster.Clustering: ...
    @staticmethod
    def kMeans(clusterArray: typing.Union[typing.List[moa.cluster.Cluster], jpype.JArray], list: java.util.List[moa.cluster.Cluster]) -> moa.cluster.Clustering: ...

class AbstractClusterer(moa.options.AbstractOptionHandler, Clusterer):
    evaluateMicroClusteringOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def adjustParameters(self) -> None: ...
    @staticmethod
    def contextIsCompatible(instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader, instancesHeader2: com.yahoo.labs.samoa.instances.InstancesHeader) -> bool: ...
    @typing.overload
    def copy(self) -> Clusterer: ...
    @typing.overload
    @staticmethod
    def copy(mOAObject: moa.MOAObject) -> moa.MOAObject: ...
    def getAWTRenderer(self) -> moa.gui.AWTRenderer: ...
    def getAttributeNameString(self, int: int) -> str: ...
    def getClassLabelString(self, int: int) -> str: ...
    def getClassNameString(self) -> str: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelContext(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getModelMeasurements(self) -> typing.MutableSequence[moa.core.Measurement]: ...
    def getNominalValueString(self, int: int, int2: int) -> str: ...
    def getPurposeString(self) -> str: ...
    def getSubClusterers(self) -> typing.MutableSequence[Clusterer]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def keepClassLabel(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearning(self) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def setRandomSeed(self, int: int) -> None: ...
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainingHasStarted(self) -> bool: ...
    def trainingWeightSeenByModel(self) -> float: ...

class ClusterGenerator(AbstractClusterer):
    timeWindowOption: com.github.javacliparser.IntOption = ...
    radiusDecreaseOption: com.github.javacliparser.FloatOption = ...
    radiusIncreaseOption: com.github.javacliparser.FloatOption = ...
    positionOffsetOption: com.github.javacliparser.FloatOption = ...
    clusterRemoveOption: com.github.javacliparser.FloatOption = ...
    joinClustersOption: com.github.javacliparser.FloatOption = ...
    clusterAddOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def isRandomizable(self) -> bool: ...
    def keepClassLabel(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def setSourceClustering(self, clustering: moa.cluster.Clustering) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class CobWeb(AbstractClusterer):
    acuityOption: com.github.javacliparser.FloatOption = ...
    cutoffOption: com.github.javacliparser.FloatOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    classifierPurposeString: typing.ClassVar[str] = ...
    def __init__(self): ...
    def getAcuity(self) -> float: ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getCutoff(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getSaveInstanceData(self) -> bool: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def graph(self) -> str: ...
    def isRandomizable(self) -> bool: ...
    def numberOfClusters(self) -> int: ...
    def resetLearningImpl(self) -> None: ...
    def setAcuity(self, double: float) -> None: ...
    def setCutoff(self, double: float) -> None: ...
    def setSaveInstanceData(self, boolean: bool) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class WekaClusteringAlgorithm(AbstractClusterer):
    horizonOption: com.github.javacliparser.IntOption = ...
    wekaAlgorithmOption: com.github.javacliparser.MultiChoiceOption = ...
    parameterOption: com.github.javacliparser.StringOption = ...
    def __init__(self): ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getDataset(self, int: int, int2: int) -> com.yahoo.labs.samoa.instances.Instances: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def keepClassLabel(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers")``.

    AbstractClusterer: typing.Type[AbstractClusterer]
    ClusterGenerator: typing.Type[ClusterGenerator]
    Clusterer: typing.Type[Clusterer]
    CobWeb: typing.Type[CobWeb]
    KMeans: typing.Type[KMeans]
    WekaClusteringAlgorithm: typing.Type[WekaClusteringAlgorithm]
    clustream: moa.clusterers.clustream.__module_protocol__
    clustree: moa.clusterers.clustree.__module_protocol__
    denstream: moa.clusterers.denstream.__module_protocol__
    dstream: moa.clusterers.dstream.__module_protocol__
    kmeanspm: moa.clusterers.kmeanspm.__module_protocol__
    macro: moa.clusterers.macro.__module_protocol__
    meta: moa.clusterers.meta.__module_protocol__
    outliers: moa.clusterers.outliers.__module_protocol__
    streamkm: moa.clusterers.streamkm.__module_protocol__
