
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa
import moa.cluster
import moa.clusterers
import moa.clusterers.outliers.AbstractC
import moa.clusterers.outliers.Angiulli
import moa.clusterers.outliers.AnyOut
import moa.clusterers.outliers.MCOD
import moa.clusterers.outliers.SimpleCOD
import moa.clusterers.outliers.utils
import typing



class TestSpeed:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class MyBaseOutlierDetector(moa.clusterers.AbstractClusterer):
    windowSizeOption: com.github.javacliparser.IntOption = ...
    outlierNotifier: 'MyBaseOutlierDetector.OutlierNotifier' = ...
    bStopAlgorithm: bool = ...
    def __init__(self): ...
    def GetOutliersFound(self) -> java.util.Set['MyBaseOutlierDetector.Outlier']: ...
    def PrintInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def PrintOutliers(self) -> None: ...
    def SetMessagePrinter(self, printMsg: 'MyBaseOutlierDetector.PrintMsg') -> None: ...
    def SetProgressInterval(self, int: int) -> None: ...
    def SetShowProgress(self, boolean: bool) -> None: ...
    def SetTrace(self, boolean: bool) -> None: ...
    def SetUserInfo(self, boolean: bool, boolean2: bool, printMsg: 'MyBaseOutlierDetector.PrintMsg', int: int) -> None: ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getInstanceValues(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getObjectInfo(self, object: typing.Any) -> str: ...
    def getOutliersResult(self) -> java.util.Vector['MyBaseOutlierDetector.Outlier']: ...
    def getStatistics(self) -> str: ...
    def getTimePerObj(self) -> float: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def isRandomizable(self) -> bool: ...
    def keepClassLabel(self) -> bool: ...
    def processNewInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    class Outlier(java.lang.Comparable['MyBaseOutlierDetector.Outlier']):
        id: int = ...
        inst: com.yahoo.labs.samoa.instances.Instance = ...
        obj: typing.Any = ...
        def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, long: int, object: typing.Any): ...
        def compareTo(self, outlier: 'MyBaseOutlierDetector.Outlier') -> int: ...
        def equals(self, object: typing.Any) -> bool: ...
    class OutlierNotifier:
        def __init__(self): ...
        def OnInlier(self, outlier: 'MyBaseOutlierDetector.Outlier') -> None: ...
        def OnOutlier(self, outlier: 'MyBaseOutlierDetector.Outlier') -> None: ...
    class PrintMsg:
        def print_(self, string: str) -> None: ...
        def printf(self, string: str, *object: typing.Any) -> None: ...
        def println(self, string: str) -> None: ...
    class ProgressInfo:
        def GetInterval(self) -> int: ...
        def ShowProgress(self, string: str) -> None: ...
    class StdPrintMsg(moa.clusterers.outliers.MyBaseOutlierDetector.PrintMsg):
        @typing.overload
        def __init__(self, myBaseOutlierDetector: 'MyBaseOutlierDetector'): ...
        @typing.overload
        def __init__(self, myBaseOutlierDetector: 'MyBaseOutlierDetector', string: str): ...
        def RedirectToDisplay(self) -> None: ...
        @typing.overload
        def RedirectToFile(self) -> None: ...
        @typing.overload
        def RedirectToFile(self, string: str) -> None: ...
        def print_(self, string: str) -> None: ...
        def printf(self, string: str, *object: typing.Any) -> None: ...
        def println(self, string: str) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.outliers")``.

    MyBaseOutlierDetector: typing.Type[MyBaseOutlierDetector]
    TestSpeed: typing.Type[TestSpeed]
    AbstractC: moa.clusterers.outliers.AbstractC.__module_protocol__
    Angiulli: moa.clusterers.outliers.Angiulli.__module_protocol__
    AnyOut: moa.clusterers.outliers.AnyOut.__module_protocol__
    MCOD: moa.clusterers.outliers.MCOD.__module_protocol__
    SimpleCOD: moa.clusterers.outliers.SimpleCOD.__module_protocol__
    utils: moa.clusterers.outliers.utils.__module_protocol__
