
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import jpype
import moa.clusterers.clustree
import moa.clusterers.outliers
import moa.clusterers.outliers.AnyOut.util
import typing



class AnyOut(moa.clusterers.outliers.MyBaseOutlierDetector):
    def __init__(self): ...
    def getObjectInfo(self, object: typing.Any) -> str: ...
    def getOptions(self) -> com.github.javacliparser.Options: ...
    def getPurposeString(self) -> str: ...
    def getStatistics(self) -> str: ...
    def resetLearningImpl(self) -> None: ...

class AnyOutCore(moa.clusterers.clustree.ClusTree):
    trainingSetSizeOption: com.github.javacliparser.IntOption = ...
    oScoreKOption: com.github.javacliparser.IntOption = ...
    confKOption: com.github.javacliparser.IntOption = ...
    confidenceChoiceOption: com.github.javacliparser.IntOption = ...
    UseMeanScoreOption: com.github.javacliparser.FlagOption = ...
    threshholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getConfidence(self, int: int) -> float: ...
    def getOutlierScore(self, int: int) -> float: ...
    def improveObjectOnce(self, int: int) -> None: ...
    def initObject(self, int: int, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def isOutlier(self, int: int) -> bool: ...
    def learnObject(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def moreImprovementsPossible(self, int: int, double: float) -> bool: ...
    def removeObject(self, int: int) -> None: ...
    def resetLearning(self) -> None: ...
    def train(self, dataSet: moa.clusterers.outliers.AnyOut.util.DataSet) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.outliers.AnyOut")``.

    AnyOut: typing.Type[AnyOut]
    AnyOutCore: typing.Type[AnyOutCore]
    util: moa.clusterers.outliers.AnyOut.util.__module_protocol__
