
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.clusterers.outliers
import moa.clusterers.outliers.utils.mtree
import typing



class ISBIndex:
    def __init__(self, double: float, int: int): ...
    def Insert(self, iSBNode: 'ISBIndex.ISBNode') -> None: ...
    def RangeSearch(self, iSBNode: 'ISBIndex.ISBNode', double: float) -> java.util.Vector['ISBIndex.ISBSearchResult']: ...
    def Remove(self, iSBNode: 'ISBIndex.ISBNode') -> None: ...
    class ISBNode(java.lang.Comparable['ISBIndex.ISBNode']):
        inst: com.yahoo.labs.samoa.instances.Instance = ...
        obj: 'StreamObj' = ...
        id: int = ...
        mc: 'MicroCluster' = ...
        Rmc: java.util.Set = ...
        count_after: int = ...
        nodeType: 'ISBIndex.ISBNode.NodeType' = ...
        nOutlier: int = ...
        nInlier: int = ...
        def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, streamObj: 'StreamObj', long: int): ...
        def AddPrecNeigh(self, iSBNode: 'ISBIndex.ISBNode') -> None: ...
        def CountPrecNeighs(self, long: int) -> int: ...
        def GetMinPrecNeigh(self, long: int) -> 'ISBIndex.ISBNode': ...
        def Get_nn_before(self) -> java.util.List['ISBIndex.ISBNode']: ...
        def InitNode(self) -> None: ...
        def RemovePrecNeigh(self, iSBNode: 'ISBIndex.ISBNode') -> None: ...
        def compareTo(self, iSBNode: 'ISBIndex.ISBNode') -> int: ...
        class NodeType(java.lang.Enum['ISBIndex.ISBNode.NodeType']):
            OUTLIER: typing.ClassVar['ISBIndex.ISBNode.NodeType'] = ...
            INLIER_MC: typing.ClassVar['ISBIndex.ISBNode.NodeType'] = ...
            INLIER_PD: typing.ClassVar['ISBIndex.ISBNode.NodeType'] = ...
            _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
            @typing.overload
            @staticmethod
            def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
            @typing.overload
            @staticmethod
            def valueOf(string: str) -> 'ISBIndex.ISBNode.NodeType': ...
            @staticmethod
            def values() -> typing.MutableSequence['ISBIndex.ISBNode.NodeType']: ...
    class ISBSearchResult:
        node: 'ISBIndex.ISBNode' = ...
        distance: float = ...
        def __init__(self, iSBNode: 'ISBIndex.ISBNode', double: float): ...

class MCODBase(moa.clusterers.outliers.MyBaseOutlierDetector):
    bWarning: bool = ...
    m_nBothInlierOutlier: int = ...
    m_nOnlyInlier: int = ...
    m_nOnlyOutlier: int = ...
    def __init__(self): ...
    def PrintEventQueue(self) -> None: ...
    def PrintMCSet(self, set: java.util.Set['MicroCluster']) -> None: ...
    def PrintNodeList(self, list: java.util.List[ISBIndex.ISBNode]) -> None: ...
    def PrintNodeSet(self, set: java.util.Set[ISBIndex.ISBNode]) -> None: ...
    def PrintNodeVector(self, vector: java.util.Vector[ISBIndex.ISBNode]) -> None: ...
    def PrintPD(self) -> None: ...
    def getObjectInfo(self, object: typing.Any) -> str: ...
    def getStatistics(self) -> str: ...

class MicroCluster(moa.clusterers.outliers.utils.mtree.DistanceFunctions.EuclideanCoordinate, java.lang.Comparable['MicroCluster']):
    mcc: ISBIndex.ISBNode = ...
    nodes: java.util.ArrayList = ...
    def __init__(self, iSBNode: ISBIndex.ISBNode): ...
    def AddNode(self, iSBNode: ISBIndex.ISBNode) -> None: ...
    def GetNodesCount(self) -> int: ...
    def RemoveNode(self, iSBNode: ISBIndex.ISBNode) -> None: ...
    def compareTo(self, microCluster: 'MicroCluster') -> int: ...
    def dimensions(self) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, int: int) -> float: ...

class StreamObj(moa.clusterers.outliers.utils.mtree.DistanceFunctions.EuclideanCoordinate, java.lang.Comparable['StreamObj']):
    def __init__(self, *double: float): ...
    def compareTo(self, streamObj: 'StreamObj') -> int: ...
    def dimensions(self) -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, int: int) -> float: ...
    def hashCode(self) -> int: ...

class Test:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class MCOD(MCODBase):
    radiusOption: com.github.javacliparser.FloatOption = ...
    kOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def Init(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.outliers.MCOD")``.

    ISBIndex: typing.Type[ISBIndex]
    MCOD: typing.Type[MCOD]
    MCODBase: typing.Type[MCODBase]
    MicroCluster: typing.Type[MicroCluster]
    StreamObj: typing.Type[StreamObj]
    Test: typing.Type[Test]
