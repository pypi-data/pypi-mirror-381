
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.cluster
import moa.clusterers
import moa.core
import moa.tasks
import typing



class Algorithm:
    algorithm: str = ...
    parameters: typing.MutableSequence['IParameter'] = ...
    clusterer: moa.clusterers.AbstractClusterer = ...
    attributes: typing.MutableSequence[com.yahoo.labs.samoa.instances.Attribute] = ...
    prediction: float = ...
    performanceMeasure: float = ...
    preventRemoval: bool = ...
    isDefault: bool = ...
    @typing.overload
    def __init__(self, algorithm: 'Algorithm', double: float, double2: float, boolean: bool, boolean2: bool, int: int): ...
    @typing.overload
    def __init__(self, algorithmConfiguration: 'AlgorithmConfiguration'): ...
    def adjustAlgorithm(self, boolean: bool, boolean2: bool, int: int) -> None: ...
    def getParamVector(self, int: int) -> typing.MutableSequence[float]: ...
    def init(self) -> None: ...

class EnsembleClustererAbstract(moa.clusterers.AbstractClusterer):
    bestModel: int = ...
    ensemble: java.util.ArrayList = ...
    candidateEnsemble: java.util.ArrayList = ...
    windowPoints: java.util.ArrayList = ...
    fileOption: com.github.javacliparser.FileOption = ...
    def __init__(self): ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def init(self) -> None: ...
    def isRandomizable(self) -> bool: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class IParameter:
    def copy(self) -> 'IParameter': ...
    def getCLIString(self) -> str: ...
    def getCLIValueString(self) -> str: ...
    def getParameter(self) -> str: ...
    def getValue(self) -> float: ...
    def sampleNewConfig(self, double: float, double2: float, int: int) -> None: ...

class TruncatedNormal:
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def sample(self) -> float: ...

class AlgorithmConfiguration: ...

class BooleanParameter(IParameter):
    @typing.overload
    def __init__(self, booleanParameter: 'BooleanParameter'): ...
    @typing.overload
    def __init__(self, parameterConfiguration: 'ParameterConfiguration'): ...
    def copy(self) -> 'BooleanParameter': ...
    def getCLIString(self) -> str: ...
    def getCLIValueString(self) -> str: ...
    def getParameter(self) -> str: ...
    def getRange(self) -> typing.MutableSequence[str]: ...
    def getValue(self) -> float: ...
    def sampleNewConfig(self, double: float, double2: float, int: int) -> None: ...

class CategoricalParameter(IParameter):
    @typing.overload
    def __init__(self, categoricalParameter: 'CategoricalParameter'): ...
    @typing.overload
    def __init__(self, parameterConfiguration: 'ParameterConfiguration'): ...
    def copy(self) -> 'CategoricalParameter': ...
    def getCLIString(self) -> str: ...
    def getCLIValueString(self) -> str: ...
    def getParameter(self) -> str: ...
    def getRange(self) -> typing.MutableSequence[str]: ...
    def getValue(self) -> float: ...
    def sampleNewConfig(self, double: float, double2: float, int: int) -> None: ...

class ConfStream(EnsembleClustererAbstract):
    def __init__(self): ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...

class IntegerParameter(IParameter):
    @typing.overload
    def __init__(self, integerParameter: 'IntegerParameter'): ...
    @typing.overload
    def __init__(self, parameterConfiguration: 'ParameterConfiguration'): ...
    def copy(self) -> 'IntegerParameter': ...
    def getCLIString(self) -> str: ...
    def getCLIValueString(self) -> str: ...
    def getParameter(self) -> str: ...
    def getValue(self) -> float: ...
    def sampleNewConfig(self, double: float, double2: float, int: int) -> None: ...
    def setValue(self, int: int) -> None: ...

class NumericalParameter(IParameter):
    @typing.overload
    def __init__(self, numericalParameter: 'NumericalParameter'): ...
    @typing.overload
    def __init__(self, parameterConfiguration: 'ParameterConfiguration'): ...
    def copy(self) -> 'NumericalParameter': ...
    def getCLIString(self) -> str: ...
    def getCLIValueString(self) -> str: ...
    def getParameter(self) -> str: ...
    def getValue(self) -> float: ...
    def sampleNewConfig(self, double: float, double2: float, int: int) -> None: ...

class OrdinalParameter(IParameter):
    @typing.overload
    def __init__(self, ordinalParameter: 'OrdinalParameter'): ...
    @typing.overload
    def __init__(self, parameterConfiguration: 'ParameterConfiguration'): ...
    def copy(self) -> 'OrdinalParameter': ...
    def getCLIString(self) -> str: ...
    def getCLIValueString(self) -> str: ...
    def getParameter(self) -> str: ...
    def getValue(self) -> float: ...
    def sampleNewConfig(self, double: float, double2: float, int: int) -> None: ...

class ParameterConfiguration: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.meta")``.

    Algorithm: typing.Type[Algorithm]
    AlgorithmConfiguration: typing.Type[AlgorithmConfiguration]
    BooleanParameter: typing.Type[BooleanParameter]
    CategoricalParameter: typing.Type[CategoricalParameter]
    ConfStream: typing.Type[ConfStream]
    EnsembleClustererAbstract: typing.Type[EnsembleClustererAbstract]
    IParameter: typing.Type[IParameter]
    IntegerParameter: typing.Type[IntegerParameter]
    NumericalParameter: typing.Type[NumericalParameter]
    OrdinalParameter: typing.Type[OrdinalParameter]
    ParameterConfiguration: typing.Type[ParameterConfiguration]
    TruncatedNormal: typing.Type[TruncatedNormal]
