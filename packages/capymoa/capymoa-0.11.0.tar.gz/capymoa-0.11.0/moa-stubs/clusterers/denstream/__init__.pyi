
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import jpype
import moa
import moa.cluster
import moa.clusterers
import typing



class MicroCluster(moa.cluster.CFCluster):
    @typing.overload
    def __init__(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int, long: int, double: float, timestamp: 'Timestamp'): ...
    @typing.overload
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], int: int, long: int, double2: float, timestamp: 'Timestamp'): ...
    @typing.overload
    def copy(self) -> 'MicroCluster': ...
    @typing.overload
    @staticmethod
    def copy(mOAObject: moa.MOAObject) -> moa.MOAObject: ...
    def getCF(self) -> moa.cluster.CFCluster: ...
    def getCenter(self) -> typing.MutableSequence[float]: ...
    def getCreationTime(self) -> int: ...
    def getInclusionProbability(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def getLastEditTimestamp(self) -> int: ...
    @typing.overload
    def getRadius(self) -> float: ...
    @typing.overload
    def getRadius(self, long: int) -> float: ...
    def getWeight(self) -> float: ...
    def insert(self, instance: com.yahoo.labs.samoa.instances.Instance, long: int) -> None: ...

class Timestamp(moa.AbstractMOAObject):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getTimestamp(self) -> int: ...
    def increase(self) -> None: ...
    def setTimestamp(self, long: int) -> None: ...

class WithDBSCAN(moa.clusterers.AbstractClusterer):
    horizonOption: com.github.javacliparser.IntOption = ...
    epsilonOption: com.github.javacliparser.FloatOption = ...
    betaOption: com.github.javacliparser.FloatOption = ...
    muOption: com.github.javacliparser.FloatOption = ...
    initPointsOption: com.github.javacliparser.IntOption = ...
    offlineOption: com.github.javacliparser.FloatOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    speedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def adjustParameters(self) -> None: ...
    def getClusteringResult(self) -> moa.cluster.Clustering: ...
    def getMicroClusteringResult(self) -> moa.cluster.Clustering: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getParameterString(self) -> str: ...
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def implementsMicroClusterer(self) -> bool: ...
    def initialDBScan(self) -> None: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.clusterers.denstream")``.

    MicroCluster: typing.Type[MicroCluster]
    Timestamp: typing.Type[Timestamp]
    WithDBSCAN: typing.Type[WithDBSCAN]
