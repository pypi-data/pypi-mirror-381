
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.awt
import java.util
import jpype
import moa.core
import moa.options
import moa.tasks
import typing



class ALTaskThread(moa.tasks.TaskThread):
    @typing.overload
    def __init__(self, task: moa.tasks.Task): ...
    @typing.overload
    def __init__(self, task: moa.tasks.Task, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]): ...
    def cancelTask(self) -> None: ...
    def pauseTask(self) -> None: ...
    def resumeTask(self) -> None: ...
    def run(self) -> None: ...

class MetaMainTask(moa.tasks.MainTask):
    def __init__(self): ...
    def getColorCoding(self) -> java.awt.Color: ...
    def getDisplayName(self) -> str: ...
    def getSubtaskLevel(self) -> int: ...
    def getSubtaskThreads(self) -> java.util.List[moa.tasks.TaskThread]: ...
    def isSubtask(self) -> bool: ...
    def setColorCoding(self, color: java.awt.Color) -> None: ...
    def setIsLastSubtaskOnLevel(self, booleanArray: typing.Union[typing.List[bool], jpype.JArray], boolean2: bool) -> None: ...
    def setNameSuffix(self, string: str) -> None: ...

class ALMainTask(MetaMainTask):
    def __init__(self): ...
    def getSubtaskThreads(self) -> java.util.List[ALTaskThread]: ...

class ALMultiParamTask(ALMainTask):
    prequentialEvaluationTaskOption: moa.options.ClassOptionWithListenerOption = ...
    variedParamNameOption: moa.options.EditableMultiChoiceOption = ...
    variedParamValuesOption: com.github.javacliparser.ListOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, colorArray: typing.Union[typing.List[java.awt.Color], jpype.JArray]): ...
    def getOptions(self) -> com.github.javacliparser.Options: ...
    def getPurposeString(self) -> str: ...
    def getSubtaskThreads(self) -> java.util.List[ALTaskThread]: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...
    def setPartitionIdx(self, int: int) -> None: ...

class ALPartitionEvaluationTask(ALMainTask):
    multiParamTaskOption: moa.options.ClassOption = ...
    numPartitionsOption: com.github.javacliparser.IntOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def getSubtaskThreads(self) -> java.util.List[ALTaskThread]: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...

class ALPrequentialEvaluationTask(ALMainTask):
    learnerOption: moa.options.ClassOption = ...
    streamOption: moa.options.ClassOption = ...
    evaluatorOption: moa.options.ClassOption = ...
    instanceLimitOption: com.github.javacliparser.IntOption = ...
    timeLimitOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    dumpFileOption: com.github.javacliparser.FileOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, color: java.awt.Color): ...
    def getPurposeString(self) -> str: ...
    def getSubtaskThreads(self) -> java.util.List[ALTaskThread]: ...
    def getTaskResultType(self) -> typing.Type[typing.Any]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.tasks.meta")``.

    ALMainTask: typing.Type[ALMainTask]
    ALMultiParamTask: typing.Type[ALMultiParamTask]
    ALPartitionEvaluationTask: typing.Type[ALPartitionEvaluationTask]
    ALPrequentialEvaluationTask: typing.Type[ALPrequentialEvaluationTask]
    ALTaskThread: typing.Type[ALTaskThread]
    MetaMainTask: typing.Type[MetaMainTask]
