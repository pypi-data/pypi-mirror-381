
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jpype
import moa
import moa.evaluation
import typing



class MeanPreviewCollection:
    def __init__(self, previewCollection: 'PreviewCollection'['PreviewCollection'['Preview']]): ...
    def getMeanPreviews(self) -> 'PreviewCollection'['Preview']: ...
    def getStdPreviews(self) -> 'PreviewCollection'['Preview']: ...

class Preview(moa.AbstractMOAObject):
    def __init__(self): ...
    def entryToString(self, int: int) -> str: ...
    def getData(self) -> java.util.List[typing.MutableSequence[float]]: ...
    def getEntryData(self, int: int) -> typing.MutableSequence[float]: ...
    def getMeasurementName(self, int: int) -> str: ...
    def getMeasurementNameCount(self) -> int: ...
    def getMeasurementNames(self) -> typing.MutableSequence[str]: ...
    def getTaskClass(self) -> typing.Type[typing.Any]: ...
    def numEntries(self) -> int: ...

class LearningCurve(Preview):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, class_: typing.Type[typing.Any]): ...
    def entryToString(self, int: int) -> str: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getEntryData(self, int: int) -> typing.MutableSequence[float]: ...
    def getEntryMeasurementCount(self, int: int) -> int: ...
    def getMeasurement(self, int: int, int2: int) -> float: ...
    def getMeasurementName(self, int: int) -> str: ...
    def getMeasurementNameCount(self) -> int: ...
    def getOrderingMeasurementName(self) -> str: ...
    def getTaskClass(self) -> typing.Type[typing.Any]: ...
    def headerToString(self) -> str: ...
    def insertEntry(self, learningEvaluation: moa.evaluation.LearningEvaluation) -> None: ...
    def numEntries(self) -> int: ...
    def setData(self, list: java.util.List[str], list2: java.util.List[typing.Union[typing.List[float], jpype.JArray]]) -> None: ...

_PreviewCollection__CollectionElementType = typing.TypeVar('_PreviewCollection__CollectionElementType', bound=Preview)  # <CollectionElementType>
class PreviewCollection(Preview, typing.Generic[_PreviewCollection__CollectionElementType]):
    @typing.overload
    def __init__(self, string: str, string2: str, class_: typing.Type[typing.Any]): ...
    @typing.overload
    def __init__(self, string: str, string2: str, class_: typing.Type[typing.Any], string3: str, doubleArray: typing.Union[typing.List[float], jpype.JArray]): ...
    @typing.overload
    def entryToString(self, int: int) -> str: ...
    @typing.overload
    def entryToString(self, int: int, int2: int) -> str: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getEntryData(self, int: int) -> typing.MutableSequence[float]: ...
    def getIndexName(self) -> str: ...
    def getMeasurementName(self, int: int) -> str: ...
    def getMeasurementNameCount(self) -> int: ...
    def getOrderingName(self) -> str: ...
    def getPreviews(self) -> java.util.List[_PreviewCollection__CollectionElementType]: ...
    def getTaskClass(self) -> typing.Type[typing.Any]: ...
    def getVariedParamName(self) -> str: ...
    def getVariedParamValues(self) -> typing.MutableSequence[float]: ...
    def headerToString(self) -> str: ...
    def numEntries(self) -> int: ...
    def setPreview(self, int: int, collectionElementType: _PreviewCollection__CollectionElementType) -> None: ...
    def toString(self) -> str: ...

class PreviewCollectionLearningCurveWrapper(Preview):
    def __init__(self, learningCurve: LearningCurve, class_: typing.Type[typing.Any]): ...
    def entryToString(self, int: int) -> str: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getEntryData(self, int: int) -> typing.MutableSequence[float]: ...
    def getLearningCurve(self) -> LearningCurve: ...
    def getMeasurementName(self, int: int) -> str: ...
    def getMeasurementNameCount(self) -> int: ...
    def getTaskClass(self) -> typing.Type[typing.Any]: ...
    def numEntries(self) -> int: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.evaluation.preview")``.

    LearningCurve: typing.Type[LearningCurve]
    MeanPreviewCollection: typing.Type[MeanPreviewCollection]
    Preview: typing.Type[Preview]
    PreviewCollection: typing.Type[PreviewCollection]
    PreviewCollectionLearningCurveWrapper: typing.Type[PreviewCollectionLearningCurveWrapper]
