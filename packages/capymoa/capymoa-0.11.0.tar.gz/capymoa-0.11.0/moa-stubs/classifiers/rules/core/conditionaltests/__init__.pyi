
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.lang
import moa.classifiers.core.conditionaltests
import moa.classifiers.rules.core
import typing



class NominalAttributeBinaryRulePredicate(moa.classifiers.core.conditionaltests.NominalAttributeBinaryTest, moa.classifiers.rules.core.Predicate):
    def __init__(self, int: int, int2: int): ...
    def evaluate(self, instance: com.yahoo.labs.samoa.instances.Instance) -> bool: ...
    def getAttributeIndex(self) -> int: ...
    @typing.overload
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int, instanceInformation: com.yahoo.labs.samoa.instances.InstanceInformation) -> None: ...
    def isEqualOrLess(self) -> bool: ...
    def negateCondition(self) -> None: ...
    def toString(self) -> str: ...

class NumericAttributeBinaryRulePredicate(moa.classifiers.core.conditionaltests.InstanceConditionalBinaryTest, moa.classifiers.rules.core.Predicate):
    def __init__(self, int: int, double: float, int2: int): ...
    def branchForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...
    def describeConditionForBranch(self, int: int, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> str: ...
    def evaluate(self, instance: com.yahoo.labs.samoa.instances.Instance) -> bool: ...
    def getAttributeIndex(self) -> int: ...
    def getAttsTestDependsOn(self) -> typing.MutableSequence[int]: ...
    @typing.overload
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int, instanceInformation: com.yahoo.labs.samoa.instances.InstanceInformation) -> None: ...
    def getSplitValue(self) -> float: ...
    def isEqual(self, numericAttributeBinaryRulePredicate: 'NumericAttributeBinaryRulePredicate') -> bool: ...
    def isEqualOrLess(self) -> bool: ...
    def isIncludedInRuleNode(self, numericAttributeBinaryRulePredicate: 'NumericAttributeBinaryRulePredicate') -> bool: ...
    def isUsingSameAttribute(self, numericAttributeBinaryRulePredicate: 'NumericAttributeBinaryRulePredicate') -> bool: ...
    def negateCondition(self) -> None: ...
    def setAttributeValue(self, numericAttributeBinaryRulePredicate: 'NumericAttributeBinaryRulePredicate') -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.core.conditionaltests")``.

    NominalAttributeBinaryRulePredicate: typing.Type[NominalAttributeBinaryRulePredicate]
    NumericAttributeBinaryRulePredicate: typing.Type[NumericAttributeBinaryRulePredicate]
