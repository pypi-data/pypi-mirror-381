
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import moa.classifiers.core.splitcriteria
import moa.options
import typing



class AMRulesSplitCriterion(moa.classifiers.core.splitcriteria.SplitCriterion):
    def computeBranchSplitMerits(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class SDRSplitCriterionAMRules(moa.classifiers.core.splitcriteria.SDRSplitCriterion, AMRulesSplitCriterion):
    def __init__(self): ...
    def computeBranchSplitMerits(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class VRSplitCriterion(moa.classifiers.core.splitcriteria.VarianceReductionSplitCriterion, AMRulesSplitCriterion):
    def __init__(self): ...
    def computeBranchSplitMerits(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...

class VarianceRatioSplitCriterion(moa.options.AbstractOptionHandler, AMRulesSplitCriterion):
    def __init__(self): ...
    def computeBranchSplitMerits(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class SDRSplitCriterionAMRulesNode(SDRSplitCriterionAMRules, AMRulesSplitCriterion):
    def __init__(self): ...
    def computeBranchSplitMerits(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def getMeritOfSplit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> float: ...
    def getRangeOfMerit(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.core.splitcriteria")``.

    AMRulesSplitCriterion: typing.Type[AMRulesSplitCriterion]
    SDRSplitCriterionAMRules: typing.Type[SDRSplitCriterionAMRules]
    SDRSplitCriterionAMRulesNode: typing.Type[SDRSplitCriterionAMRulesNode]
    VRSplitCriterion: typing.Type[VRSplitCriterion]
    VarianceRatioSplitCriterion: typing.Type[VarianceRatioSplitCriterion]
