
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.lang
import java.util
import jpype
import moa.classifiers.rules.featureranking.messages
import moa.classifiers.rules.multilabel.core
import moa.core
import moa.options
import typing



class FeatureRanking(moa.classifiers.rules.multilabel.core.ObserverMOAObject):
    def getFeatureRankings(self) -> moa.core.DoubleVector: ...

class AbstractFeatureRanking(moa.options.AbstractOptionHandler, FeatureRanking):
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getFeatureRankings(self) -> moa.core.DoubleVector: ...
    def update(self, observableMOAObject: moa.classifiers.rules.multilabel.core.ObservableMOAObject, object: typing.Any) -> None: ...

class BasicFeatureRanking(AbstractFeatureRanking):
    def __init__(self): ...
    def getFeatureRankings(self) -> moa.core.DoubleVector: ...
    def update(self, observableMOAObject: moa.classifiers.rules.multilabel.core.ObservableMOAObject, object: typing.Any) -> None: ...
    class RuleInformation:
        def __init__(self, basicFeatureRanking: 'BasicFeatureRanking'): ...
        def addMerit(self, int: int, double: float) -> None: ...
        def getAccumulatedMerit(self) -> moa.core.DoubleVector: ...

class MeritFeatureRanking(AbstractFeatureRanking, FeatureRanking):
    def __init__(self): ...
    def getAccumulated(self) -> moa.core.DoubleVector: ...
    def getFeatureRankings(self) -> moa.core.DoubleVector: ...
    def update(self, observableMOAObject: moa.classifiers.rules.multilabel.core.ObservableMOAObject, object: typing.Any) -> None: ...
    class RuleInformation:
        def __init__(self, meritFeatureRanking: 'MeritFeatureRanking'): ...
        def addNumLiterals(self) -> None: ...
        def getAccumulated(self) -> moa.core.DoubleVector: ...
        def getCurrent(self) -> moa.core.DoubleVector: ...
        def isFirstAfterExpansion(self) -> bool: ...
        def updateCurrent(self, doubleVector: moa.core.DoubleVector) -> None: ...

class NoFeatureRanking(AbstractFeatureRanking):
    def __init__(self): ...
    def getFeatureRankings(self) -> moa.core.DoubleVector: ...
    def update(self, observableMOAObject: moa.classifiers.rules.multilabel.core.ObservableMOAObject, object: typing.Any) -> None: ...

class WeightedMajorityFeatureRanking(AbstractFeatureRanking, FeatureRanking):
    meritThresholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getFeatureRankings(self) -> moa.core.DoubleVector: ...
    def update(self, observableMOAObject: moa.classifiers.rules.multilabel.core.ObservableMOAObject, object: typing.Any) -> None: ...
    class RuleInformation:
        def __init__(self, weightedMajorityFeatureRanking: 'WeightedMajorityFeatureRanking', int: int): ...
        def addLiteralAttribute(self, int: int) -> None: ...
        def getAttributeImportance(self, int: int) -> float: ...
        def getAttributesImportance(self) -> typing.MutableSequence[float]: ...
        def update(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], booleanArray: typing.Union[typing.List[bool], jpype.JArray], double2: float) -> java.util.List[int]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.featureranking")``.

    AbstractFeatureRanking: typing.Type[AbstractFeatureRanking]
    BasicFeatureRanking: typing.Type[BasicFeatureRanking]
    FeatureRanking: typing.Type[FeatureRanking]
    MeritFeatureRanking: typing.Type[MeritFeatureRanking]
    NoFeatureRanking: typing.Type[NoFeatureRanking]
    WeightedMajorityFeatureRanking: typing.Type[WeightedMajorityFeatureRanking]
    messages: moa.classifiers.rules.featureranking.messages.__module_protocol__
