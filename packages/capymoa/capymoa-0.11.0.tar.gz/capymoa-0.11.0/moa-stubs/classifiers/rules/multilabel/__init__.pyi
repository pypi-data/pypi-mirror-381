
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.classifiers
import moa.classifiers.rules.core.anomalydetection
import moa.classifiers.rules.multilabel.attributeclassobservers
import moa.classifiers.rules.multilabel.core
import moa.classifiers.rules.multilabel.core.voting
import moa.classifiers.rules.multilabel.errormeasurers
import moa.classifiers.rules.multilabel.functions
import moa.classifiers.rules.multilabel.inputselectors
import moa.classifiers.rules.multilabel.instancetransformers
import moa.classifiers.rules.multilabel.meta
import moa.classifiers.rules.multilabel.outputselectors
import moa.core
import moa.options
import typing



class AMRulesMultiLabelLearner(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiLabelLearner):
    splitConfidenceOption: com.github.javacliparser.FloatOption = ...
    tieThresholdOption: com.github.javacliparser.FloatOption = ...
    gracePeriodOption: com.github.javacliparser.IntOption = ...
    learnerOption: moa.options.ClassOption = ...
    unorderedRulesOption: com.github.javacliparser.FlagOption = ...
    dropOldRuleAfterExpansionOption: com.github.javacliparser.FlagOption = ...
    changeDetector: moa.options.ClassOption = ...
    anomalyDetector: moa.options.ClassOption = ...
    splitCriterionOption: moa.options.ClassOption = ...
    errorMeasurerOption: moa.options.ClassOption = ...
    weightedVoteOption: moa.options.ClassOption = ...
    numericObserverOption: moa.options.ClassOption = ...
    nominalObserverOption: moa.options.ClassOption = ...
    VerbosityOption: com.github.javacliparser.IntOption = ...
    outputSelectorOption: moa.options.ClassOption = ...
    inputSelectorOption: moa.options.ClassOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    featureRankingOption: moa.options.ClassOption = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    def PrintRuleSet(self) -> None: ...
    def getAttributesPercentage(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getVotes(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> moa.classifiers.rules.multilabel.core.voting.ErrorWeightedVoteMultiLabel: ...
    def isRandomizable(self) -> bool: ...
    def newErrorWeightedVote(self) -> moa.classifiers.rules.multilabel.core.voting.ErrorWeightedVoteMultiLabel: ...
    def resetLearningImpl(self) -> None: ...
    def setAttributesPercentage(self, double: float) -> None: ...
    def setObserver(self, observerMOAObject: typing.Union[moa.classifiers.rules.multilabel.core.ObserverMOAObject, typing.Callable]) -> None: ...
    def setRandomSeed(self, int: int) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class AMRulesMultiLabelLearnerSemiSuper(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiTargetLearnerSemiSupervised):
    splitConfidenceOption: com.github.javacliparser.FloatOption = ...
    tieThresholdOption: com.github.javacliparser.FloatOption = ...
    gracePeriodOption: com.github.javacliparser.IntOption = ...
    learnerOption: moa.options.ClassOption = ...
    unorderedRulesOption: com.github.javacliparser.FlagOption = ...
    dropOldRuleAfterExpansionOption: com.github.javacliparser.FlagOption = ...
    changeDetector: moa.options.ClassOption = ...
    anomalyDetector: moa.options.ClassOption = ...
    splitCriterionOption: moa.options.ClassOption = ...
    errorMeasurerOption: moa.options.ClassOption = ...
    weightedVoteOption: moa.options.ClassOption = ...
    numericObserverOption: moa.options.ClassOption = ...
    nominalObserverOption: moa.options.ClassOption = ...
    VerbosityOption: com.github.javacliparser.IntOption = ...
    outputSelectorOption: moa.options.ClassOption = ...
    inputSelectorOption: moa.options.ClassOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    featureRankingOption: moa.options.ClassOption = ...
    scoreThreshold: com.github.javacliparser.FloatOption = ...
    slidingWindowSize: com.github.javacliparser.IntOption = ...
    slidingWindowStep: com.github.javacliparser.IntOption = ...
    prediction: com.yahoo.labs.samoa.instances.Prediction = ...
    numberTotalExamples: int = ...
    hasModel: bool = ...
    anomalyDetector2: moa.classifiers.rules.core.anomalydetection.AnomalyDetector = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    def PrintRuleSet(self) -> None: ...
    def getAttributesPercentage(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getTrainingPrediction(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getVotes(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> moa.classifiers.rules.multilabel.core.voting.ErrorWeightedVoteMultiLabel: ...
    def isRandomizable(self) -> bool: ...
    def newErrorWeightedVote(self) -> moa.classifiers.rules.multilabel.core.voting.ErrorWeightedVoteMultiLabel: ...
    def resetLearningImpl(self) -> None: ...
    def setAttributesPercentage(self, double: float) -> None: ...
    def setObserver(self, observerMOAObject: typing.Union[moa.classifiers.rules.multilabel.core.ObserverMOAObject, typing.Callable]) -> None: ...
    def setRandomSeed(self, int: int) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class AMRulesMultiLabelClassifier(AMRulesMultiLabelLearner, moa.classifiers.MultiLabelClassifier):
    def __init__(self): ...
    def getPurposeString(self) -> str: ...

class AMRulesMultiTargetRegressor(AMRulesMultiLabelLearner, moa.classifiers.MultiTargetRegressor):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    def newErrorWeightedVote(self) -> moa.classifiers.rules.multilabel.core.voting.ErrorWeightedVoteMultiLabel: ...

class AMRulesMultiTargetRegressorSemiSuper(AMRulesMultiLabelLearnerSemiSuper, moa.classifiers.MultiTargetLearnerSemiSupervised):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, double: float): ...
    def getPurposeString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel")``.

    AMRulesMultiLabelClassifier: typing.Type[AMRulesMultiLabelClassifier]
    AMRulesMultiLabelLearner: typing.Type[AMRulesMultiLabelLearner]
    AMRulesMultiLabelLearnerSemiSuper: typing.Type[AMRulesMultiLabelLearnerSemiSuper]
    AMRulesMultiTargetRegressor: typing.Type[AMRulesMultiTargetRegressor]
    AMRulesMultiTargetRegressorSemiSuper: typing.Type[AMRulesMultiTargetRegressorSemiSuper]
    attributeclassobservers: moa.classifiers.rules.multilabel.attributeclassobservers.__module_protocol__
    core: moa.classifiers.rules.multilabel.core.__module_protocol__
    errormeasurers: moa.classifiers.rules.multilabel.errormeasurers.__module_protocol__
    functions: moa.classifiers.rules.multilabel.functions.__module_protocol__
    inputselectors: moa.classifiers.rules.multilabel.inputselectors.__module_protocol__
    instancetransformers: moa.classifiers.rules.multilabel.instancetransformers.__module_protocol__
    meta: moa.classifiers.rules.multilabel.meta.__module_protocol__
    outputselectors: moa.classifiers.rules.multilabel.outputselectors.__module_protocol__
