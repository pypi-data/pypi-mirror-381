
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.lang
import jpype
import moa
import moa.classifiers.rules.multilabel.core
import moa.classifiers.rules.multilabel.core.splitcriteria
import moa.core
import moa.options
import typing



class AttributeStatisticsObserver(moa.options.OptionHandler):
    def getBestEvaluatedSplitSuggestion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], int: int) -> moa.classifiers.rules.multilabel.core.AttributeExpansionSuggestion: ...
    def observeAttribute(self, double: float, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> None: ...

class SingleVector(moa.AbstractMOAObject):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]): ...
    @typing.overload
    def __init__(self, floatArray: typing.Union[typing.List[float], jpype.JArray]): ...
    @typing.overload
    def __init__(self, singleVector: 'SingleVector'): ...
    def addToValue(self, int: int, float: float) -> None: ...
    def addToValues(self, float: float) -> None: ...
    @typing.overload
    def addValues(self, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    @typing.overload
    def addValues(self, singleVector: 'SingleVector') -> None: ...
    def getArrayCopy(self) -> typing.MutableSequence[float]: ...
    def getArrayRef(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getSingleLineDescription(self, stringBuilder: java.lang.StringBuilder) -> None: ...
    @typing.overload
    def getSingleLineDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getValue(self, int: int) -> float: ...
    def maxIndex(self) -> int: ...
    def minWeight(self) -> float: ...
    def normalize(self) -> None: ...
    def numNonZeroEntries(self) -> int: ...
    def numValues(self) -> int: ...
    def scaleValues(self, float: float) -> None: ...
    def setValue(self, int: int, float: float) -> None: ...
    @typing.overload
    def subtractValues(self, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    @typing.overload
    def subtractValues(self, singleVector: 'SingleVector') -> None: ...
    def sumOfValues(self) -> float: ...

class NominalStatisticsObserver(AttributeStatisticsObserver): ...

class NumericStatisticsObserver(AttributeStatisticsObserver): ...

class MultiLabelBSTree(moa.options.AbstractOptionHandler, NumericStatisticsObserver):
    maxNodesOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getBestEvaluatedSplitSuggestion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], int: int) -> moa.classifiers.rules.multilabel.core.AttributeExpansionSuggestion: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def observeAttribute(self, double: float, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> None: ...

class MultiLabelBSTreeFloat(moa.options.AbstractOptionHandler, NumericStatisticsObserver):
    maxNodesOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getBestEvaluatedSplitSuggestion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], int: int) -> moa.classifiers.rules.multilabel.core.AttributeExpansionSuggestion: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def observeAttribute(self, double: float, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> None: ...

class MultiLabelBSTreePCT(moa.options.AbstractOptionHandler, NumericStatisticsObserver):
    maxNodesOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    @typing.overload
    def getBestEvaluatedSplitSuggestion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], int: int) -> moa.classifiers.rules.multilabel.core.AttributeExpansionSuggestion: ...
    @typing.overload
    def getBestEvaluatedSplitSuggestion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], int: int) -> moa.classifiers.rules.multilabel.core.AttributeExpansionSuggestion: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def observeAttribute(self, double: float, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> None: ...
    @typing.overload
    def observeAttribute(self, double: float, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], doubleVectorArray2: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> None: ...
    @staticmethod
    def roundToSignificantFigures(double: float, int: int) -> float: ...

class MultiLabelNominalAttributeObserver(moa.options.AbstractOptionHandler, NominalStatisticsObserver):
    def __init__(self): ...
    def getBestEvaluatedSplitSuggestion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray], int: int) -> moa.classifiers.rules.multilabel.core.AttributeExpansionSuggestion: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def observeAttribute(self, double: float, doubleVectorArray: typing.Union[typing.List[moa.core.DoubleVector], jpype.JArray]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel.attributeclassobservers")``.

    AttributeStatisticsObserver: typing.Type[AttributeStatisticsObserver]
    MultiLabelBSTree: typing.Type[MultiLabelBSTree]
    MultiLabelBSTreeFloat: typing.Type[MultiLabelBSTreeFloat]
    MultiLabelBSTreePCT: typing.Type[MultiLabelBSTreePCT]
    MultiLabelNominalAttributeObserver: typing.Type[MultiLabelNominalAttributeObserver]
    NominalStatisticsObserver: typing.Type[NominalStatisticsObserver]
    NumericStatisticsObserver: typing.Type[NumericStatisticsObserver]
    SingleVector: typing.Type[SingleVector]
