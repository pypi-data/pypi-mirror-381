
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.lang
import jpype
import moa
import typing



class ErrorWeightedVoteMultiLabel:
    def addVote(self, prediction: com.yahoo.labs.samoa.instances.Prediction, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def computeWeightedVote(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def copy(self) -> moa.MOAObject: ...
    def coversAllOutputs(self) -> bool: ...
    @typing.overload
    def getNumberVotes(self) -> int: ...
    @typing.overload
    def getNumberVotes(self, int: int) -> int: ...
    def getOutputAttributesErrors(self) -> typing.MutableSequence[float]: ...
    def getPrediction(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getWeightedError(self) -> float: ...
    def getWeights(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...

class MultiLabelVote:
    def __init__(self, prediction: com.yahoo.labs.samoa.instances.Prediction, double: float): ...
    def getError(self) -> float: ...
    def getVote(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def normalize(self) -> None: ...
    def setError(self, double: float) -> None: ...
    def setVote(self, prediction: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    def sumVoteDistrib(self) -> typing.MutableSequence[float]: ...

class AbstractErrorWeightedVoteMultiLabel(moa.AbstractMOAObject, ErrorWeightedVoteMultiLabel):
    def __init__(self): ...
    def addVote(self, prediction: com.yahoo.labs.samoa.instances.Prediction, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def computeWeightedVote(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def coversAllOutputs(self) -> bool: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getNumberVotes(self) -> int: ...
    @typing.overload
    def getNumberVotes(self, int: int) -> int: ...
    def getOutputAttributesErrors(self) -> typing.MutableSequence[float]: ...
    def getPrediction(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getWeightedError(self) -> float: ...
    def getWeights(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...

class FirstHitVoteMultiLabel(AbstractErrorWeightedVoteMultiLabel):
    def __init__(self): ...
    def computeWeightedVote(self) -> com.yahoo.labs.samoa.instances.Prediction: ...

class InverseErrorWeightedVoteMultiLabel(AbstractErrorWeightedVoteMultiLabel):
    def __init__(self): ...
    def computeWeightedVote(self) -> com.yahoo.labs.samoa.instances.Prediction: ...

class UniformWeightedVoteMultiLabel(AbstractErrorWeightedVoteMultiLabel):
    def __init__(self): ...
    def computeWeightedVote(self) -> com.yahoo.labs.samoa.instances.Prediction: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel.core.voting")``.

    AbstractErrorWeightedVoteMultiLabel: typing.Type[AbstractErrorWeightedVoteMultiLabel]
    ErrorWeightedVoteMultiLabel: typing.Type[ErrorWeightedVoteMultiLabel]
    FirstHitVoteMultiLabel: typing.Type[FirstHitVoteMultiLabel]
    InverseErrorWeightedVoteMultiLabel: typing.Type[InverseErrorWeightedVoteMultiLabel]
    MultiLabelVote: typing.Type[MultiLabelVote]
    UniformWeightedVoteMultiLabel: typing.Type[UniformWeightedVoteMultiLabel]
