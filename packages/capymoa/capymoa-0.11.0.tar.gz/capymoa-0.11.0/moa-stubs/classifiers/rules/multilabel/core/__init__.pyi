
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa
import moa.classifiers
import moa.classifiers.core.driftdetection
import moa.classifiers.rules.core
import moa.classifiers.rules.core.anomalydetection
import moa.classifiers.rules.featureranking.messages
import moa.classifiers.rules.multilabel.attributeclassobservers
import moa.classifiers.rules.multilabel.core.splitcriteria
import moa.classifiers.rules.multilabel.core.voting
import moa.classifiers.rules.multilabel.errormeasurers
import moa.classifiers.rules.multilabel.inputselectors
import moa.classifiers.rules.multilabel.instancetransformers
import moa.classifiers.rules.multilabel.outputselectors
import moa.core
import moa.options
import typing



class AttributeExpansionSuggestion(moa.AbstractMOAObject, java.lang.Comparable['AttributeExpansionSuggestion']):
    predicate: moa.classifiers.rules.core.Predicate = ...
    resultingNodeStatistics: typing.MutableSequence[typing.MutableSequence[moa.core.DoubleVector]] = ...
    merit: float = ...
    def __init__(self, predicate: moa.classifiers.rules.core.Predicate, doubleVectorArray: typing.Union[typing.List[typing.MutableSequence[moa.core.DoubleVector]], jpype.JArray], double2: float): ...
    def compareTo(self, attributeExpansionSuggestion: 'AttributeExpansionSuggestion') -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getMerit(self) -> float: ...
    def getPredicate(self) -> moa.classifiers.rules.core.Predicate: ...
    def getResultingNodeStatistics(self) -> typing.MutableSequence[typing.MutableSequence[moa.core.DoubleVector]]: ...
    def setPredicate(self, predicate: moa.classifiers.rules.core.Predicate) -> None: ...

class LearningLiteral(moa.options.AbstractOptionHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, intArray: typing.Union[typing.List[int], jpype.JArray]): ...
    @staticmethod
    def computeHoeffdingBound(double: float, double2: float, double3: float) -> float: ...
    def getAttributeMask(self) -> typing.MutableSequence[bool]: ...
    def getBestSuggestion(self) -> AttributeExpansionSuggestion: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getErrors(self) -> typing.MutableSequence[float]: ...
    def getExpandedLearningLiteral(self) -> 'LearningLiteral': ...
    def getInputsToLearn(self) -> typing.MutableSequence[int]: ...
    def getMeritInputAttributes(self) -> typing.MutableSequence[float]: ...
    def getOtherBranchLearningLiteral(self) -> 'LearningLiteral': ...
    def getOtherOutputsLearningLiteral(self) -> 'LearningLiteral': ...
    def getOutputsToLearn(self) -> typing.MutableSequence[int]: ...
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getStaticOutput(self, instanceInformation: com.yahoo.labs.samoa.instances.InstanceInformation) -> str: ...
    def getWeightSeenSinceExpansion(self) -> float: ...
    def setAnomalyDetector(self, anomalyDetector: moa.classifiers.rules.core.anomalydetection.AnomalyDetector) -> None: ...
    def setAttributesPercentage(self, double: float) -> None: ...
    def setChangeDetector(self, changeDetector: moa.classifiers.core.driftdetection.ChangeDetector) -> None: ...
    def setErrorMeasurer(self, multiLabelErrorMeasurer: moa.classifiers.rules.multilabel.errormeasurers.MultiLabelErrorMeasurer) -> None: ...
    def setInputAttributesSelector(self, inputAttributesSelector: moa.classifiers.rules.multilabel.inputselectors.InputAttributesSelector) -> None: ...
    def setInstanceInformation(self, instanceInformation: com.yahoo.labs.samoa.instances.InstanceInformation) -> None: ...
    def setInstanceTransformer(self, instanceTransformer: moa.classifiers.rules.multilabel.instancetransformers.InstanceTransformer) -> None: ...
    def setLearner(self, multiLabelLearner: moa.classifiers.MultiLabelLearner) -> None: ...
    def setNominalObserverOption(self, nominalStatisticsObserver: moa.classifiers.rules.multilabel.attributeclassobservers.NominalStatisticsObserver) -> None: ...
    def setNumericObserverOption(self, numericStatisticsObserver: moa.classifiers.rules.multilabel.attributeclassobservers.NumericStatisticsObserver) -> None: ...
    def setOutputAttributesSelector(self, outputAttributesSelector: moa.classifiers.rules.multilabel.outputselectors.OutputAttributesSelector) -> None: ...
    def setOutputsToLearn(self, intArray: typing.Union[typing.List[int], jpype.JArray]) -> None: ...
    def setRandomGenerator(self, random: java.util.Random) -> None: ...
    def setSplitCriterion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion) -> None: ...
    def trainOnInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    def tryToExpand(self, double: float, double2: float) -> bool: ...
    def updateAndCheckAnomalyDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...
    def updateAndCheckChange(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...

class Literal(moa.AbstractMOAObject):
    def __init__(self, predicate: moa.classifiers.rules.core.Predicate): ...
    def evaluate(self, instance: com.yahoo.labs.samoa.instances.Instance) -> bool: ...
    def getAttributeIndex(self) -> int: ...
    @typing.overload
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int, instanceInformation: com.yahoo.labs.samoa.instances.InstanceInformation) -> None: ...
    def toString(self) -> str: ...

class MultiLabelRuleSet(java.util.LinkedList['MultiLabelRule']):
    def __init__(self): ...

class ObservableMOAObject(moa.AbstractMOAObject):
    def __init__(self): ...
    def addObserver(self, observerMOAObject: typing.Union['ObserverMOAObject', typing.Callable]) -> None: ...
    @typing.overload
    def notify(self) -> None: ...
    @typing.overload
    def notify(self, observerMOAObject: typing.Union['ObserverMOAObject', typing.Callable], featureRankingMessage: moa.classifiers.rules.featureranking.messages.FeatureRankingMessage) -> None: ...
    @typing.overload
    def notifyAll(self) -> None: ...
    @typing.overload
    def notifyAll(self, featureRankingMessage: moa.classifiers.rules.featureranking.messages.FeatureRankingMessage) -> None: ...

class ObserverMOAObject:
    def update(self, observableMOAObject: ObservableMOAObject, object: typing.Any) -> None: ...

class LearningLiteralClassification(LearningLiteral):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, intArray: typing.Union[typing.List[int], jpype.JArray]): ...
    def getStaticOutput(self, instanceInformation: com.yahoo.labs.samoa.instances.InstanceInformation) -> str: ...
    def trainOnInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    def tryToExpand(self, double: float, double2: float) -> bool: ...

class LearningLiteralRegression(LearningLiteral):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, intArray: typing.Union[typing.List[int], jpype.JArray]): ...
    def getStaticOutput(self, instanceInformation: com.yahoo.labs.samoa.instances.InstanceInformation) -> str: ...
    def trainOnInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    def tryToExpand(self, double: float, double2: float) -> bool: ...

class MultiLabelRule(ObservableMOAObject):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, learningLiteral: LearningLiteral): ...
    def addObserver(self, observerMOAObject: typing.Union[ObserverMOAObject, typing.Callable]) -> None: ...
    def clearOtherOutputs(self) -> None: ...
    def getAnomalyScore(self) -> float: ...
    def getCurrentErrors(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getInputsCovered(self) -> typing.MutableSequence[int]: ...
    def getLearningNode(self) -> LearningLiteral: ...
    def getLiterals(self) -> java.util.List[Literal]: ...
    def getNewRuleFromOtherBranch(self) -> 'MultiLabelRule': ...
    def getNewRuleFromOtherOutputs(self) -> 'MultiLabelRule': ...
    def getOutputsCovered(self) -> typing.MutableSequence[int]: ...
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getRuleNumberID(self) -> int: ...
    def getWeightSeenSinceExpansion(self) -> float: ...
    def hasNewRuleFromOtherOutputs(self) -> bool: ...
    def isCovering(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...
    def setAnomalyDetector(self, anomalyDetector: moa.classifiers.rules.core.anomalydetection.AnomalyDetector) -> None: ...
    def setAttributesPercentage(self, double: float) -> None: ...
    def setChangeDetector(self, changeDetector: moa.classifiers.core.driftdetection.ChangeDetector) -> None: ...
    def setErrorMeasurer(self, multiLabelErrorMeasurer: moa.classifiers.rules.multilabel.errormeasurers.MultiLabelErrorMeasurer) -> None: ...
    def setInputAttributesSelector(self, inputAttributesSelector: moa.classifiers.rules.multilabel.inputselectors.InputAttributesSelector) -> None: ...
    def setInstanceTransformer(self, instanceTransformer: moa.classifiers.rules.multilabel.instancetransformers.InstanceTransformer) -> None: ...
    def setLearner(self, multiLabelLearner: moa.classifiers.MultiLabelLearner) -> None: ...
    def setNominalObserverOption(self, nominalStatisticsObserver: moa.classifiers.rules.multilabel.attributeclassobservers.NominalStatisticsObserver) -> None: ...
    def setNumericObserverOption(self, numericStatisticsObserver: moa.classifiers.rules.multilabel.attributeclassobservers.NumericStatisticsObserver) -> None: ...
    def setOutputAttributesSelector(self, outputAttributesSelector: moa.classifiers.rules.multilabel.outputselectors.OutputAttributesSelector) -> None: ...
    def setRandomGenerator(self, random: java.util.Random) -> None: ...
    def setRuleNumberID(self, int: int) -> None: ...
    def setSplitCriterion(self, multiLabelSplitCriterion: moa.classifiers.rules.multilabel.core.splitcriteria.MultiLabelSplitCriterion) -> None: ...
    def toString(self) -> str: ...
    def trainOnInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    def tryToExpand(self, double: float, double2: float) -> bool: ...
    def updateAnomalyDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...
    def updateChangeDetection(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> bool: ...

class MultiLabelRuleClassification(MultiLabelRule):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, learningLiteralClassification: LearningLiteralClassification): ...

class MultiLabelRuleRegression(MultiLabelRule):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, learningLiteralRegression: LearningLiteralRegression): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel.core")``.

    AttributeExpansionSuggestion: typing.Type[AttributeExpansionSuggestion]
    LearningLiteral: typing.Type[LearningLiteral]
    LearningLiteralClassification: typing.Type[LearningLiteralClassification]
    LearningLiteralRegression: typing.Type[LearningLiteralRegression]
    Literal: typing.Type[Literal]
    MultiLabelRule: typing.Type[MultiLabelRule]
    MultiLabelRuleClassification: typing.Type[MultiLabelRuleClassification]
    MultiLabelRuleRegression: typing.Type[MultiLabelRuleRegression]
    MultiLabelRuleSet: typing.Type[MultiLabelRuleSet]
    ObservableMOAObject: typing.Type[ObservableMOAObject]
    ObserverMOAObject: typing.Type[ObserverMOAObject]
    splitcriteria: moa.classifiers.rules.multilabel.core.splitcriteria.__module_protocol__
    voting: moa.classifiers.rules.multilabel.core.voting.__module_protocol__
