
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.options
import typing



class MultiLabelErrorMeasurer(moa.options.OptionHandler):
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction, double: float) -> None: ...
    @typing.overload
    def getCurrentError(self) -> float: ...
    @typing.overload
    def getCurrentError(self, int: int) -> float: ...
    def getCurrentErrors(self) -> typing.MutableSequence[float]: ...

class MultiTargetErrorMeasurer(MultiLabelErrorMeasurer): ...

class AbstractMultiLabelErrorMeasurer(moa.options.AbstractOptionHandler, MultiTargetErrorMeasurer):
    fadingErrorFactorOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction, double: float) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    @typing.overload
    def getCurrentError(self) -> float: ...
    @typing.overload
    def getCurrentError(self, int: int) -> float: ...
    def getCurrentErrors(self) -> typing.MutableSequence[float]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...

class AbstractMultiTargetErrorMeasurer(AbstractMultiLabelErrorMeasurer, MultiLabelErrorMeasurer):
    def __init__(self): ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction, double: float) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class MeanAbsoluteDeviationMT(AbstractMultiTargetErrorMeasurer):
    def __init__(self): ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction, double: float) -> None: ...
    @typing.overload
    def getCurrentError(self) -> float: ...
    @typing.overload
    def getCurrentError(self, int: int) -> float: ...
    def getCurrentErrors(self) -> typing.MutableSequence[float]: ...

class RelativeMeanAbsoluteDeviationMT(AbstractMultiTargetErrorMeasurer):
    def __init__(self): ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction, double: float) -> None: ...
    @typing.overload
    def getCurrentError(self) -> float: ...
    @typing.overload
    def getCurrentError(self, int: int) -> float: ...
    def getCurrentErrors(self) -> typing.MutableSequence[float]: ...

class RelativeRootMeanSquaredErrorMT(AbstractMultiTargetErrorMeasurer):
    def __init__(self): ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction, double: float) -> None: ...
    @typing.overload
    def getCurrentError(self) -> float: ...
    @typing.overload
    def getCurrentError(self, int: int) -> float: ...
    def getCurrentErrors(self) -> typing.MutableSequence[float]: ...

class RootMeanSquaredErrorMT(AbstractMultiTargetErrorMeasurer):
    def __init__(self): ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def addPrediction(self, prediction: com.yahoo.labs.samoa.instances.Prediction, prediction2: com.yahoo.labs.samoa.instances.Prediction, double: float) -> None: ...
    @typing.overload
    def getCurrentError(self) -> float: ...
    @typing.overload
    def getCurrentError(self, int: int) -> float: ...
    def getCurrentErrors(self) -> typing.MutableSequence[float]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.rules.multilabel.errormeasurers")``.

    AbstractMultiLabelErrorMeasurer: typing.Type[AbstractMultiLabelErrorMeasurer]
    AbstractMultiTargetErrorMeasurer: typing.Type[AbstractMultiTargetErrorMeasurer]
    MeanAbsoluteDeviationMT: typing.Type[MeanAbsoluteDeviationMT]
    MultiLabelErrorMeasurer: typing.Type[MultiLabelErrorMeasurer]
    MultiTargetErrorMeasurer: typing.Type[MultiTargetErrorMeasurer]
    RelativeMeanAbsoluteDeviationMT: typing.Type[RelativeMeanAbsoluteDeviationMT]
    RelativeRootMeanSquaredErrorMT: typing.Type[RelativeRootMeanSquaredErrorMT]
    RootMeanSquaredErrorMT: typing.Type[RootMeanSquaredErrorMT]
