
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import jpype
import moa.capabilities
import moa.classifiers
import moa.classifiers.core.driftdetection
import moa.core
import typing



class CAND(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    LARGER_P_POOL_10: typing.ClassVar[int] = ...
    LARGER_P_POOL_30: typing.ClassVar[int] = ...
    largerPool: com.github.javacliparser.MultiChoiceOption = ...
    numberOfMLPsToTrainOption: com.github.javacliparser.IntOption = ...
    numberOfLayersInEachMLP: com.github.javacliparser.IntOption = ...
    numberOfInstancesToTrainAllMLPsAtStartOption: com.github.javacliparser.IntOption = ...
    miniBatchSize: com.github.javacliparser.IntOption = ...
    useOneHotEncode: com.github.javacliparser.FlagOption = ...
    useNormalization: com.github.javacliparser.FlagOption = ...
    backPropLossThreshold: com.github.javacliparser.FloatOption = ...
    deviceTypeOption: com.github.javacliparser.MultiChoiceOption = ...
    doNotTrainEachMLPUsingASeparateThread: com.github.javacliparser.FlagOption = ...
    votesDumpFileName: com.github.javacliparser.StringOption = ...
    statsDumpFileName: com.github.javacliparser.StringOption = ...
    djlRandomSeed: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class MLP(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    OPTIMIZER_SGD: typing.ClassVar[int] = ...
    OPTIMIZER_RMSPROP: typing.ClassVar[int] = ...
    OPTIMIZER_RMSPROP_RESET: typing.ClassVar[int] = ...
    OPTIMIZER_ADAGRAD: typing.ClassVar[int] = ...
    OPTIMIZER_ADAGRAD_RESET: typing.ClassVar[int] = ...
    OPTIMIZER_ADAM: typing.ClassVar[int] = ...
    OPTIMIZER_ADAM_RESET: typing.ClassVar[int] = ...
    learningRateOption: com.github.javacliparser.FloatOption = ...
    backPropLossThreshold: com.github.javacliparser.FloatOption = ...
    optimizerTypeOption: com.github.javacliparser.MultiChoiceOption = ...
    useOneHotEncode: com.github.javacliparser.FlagOption = ...
    useNormalization: com.github.javacliparser.FlagOption = ...
    numberOfNeuronsInEachLayerInLog2: com.github.javacliparser.IntOption = ...
    numberOfLayers: com.github.javacliparser.IntOption = ...
    miniBatchSize: com.github.javacliparser.IntOption = ...
    deviceTypeOptionGPU: typing.ClassVar[int] = ...
    deviceTypeOptionCPU: typing.ClassVar[int] = ...
    deviceTypeOption: com.github.javacliparser.MultiChoiceOption = ...
    djlRandomSeed: com.github.javacliparser.IntOption = ...
    deltaForADWIN: float = ...
    lossEstimator: moa.classifiers.core.driftdetection.ADWIN = ...
    modelName: str = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    @staticmethod
    def getFeatureValuesArraySize(instance: com.yahoo.labs.samoa.instances.Instance, boolean: bool) -> int: ...
    def getLossEstimation(self) -> float: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @staticmethod
    def getNormalizedValue(double: float, double2: float, double3: float, long: int) -> float: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForFeatureValues(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForFeatureValues(self, instance: com.yahoo.labs.samoa.instances.Instance, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def initializeNetwork(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    @staticmethod
    def setFeatureValuesArray(instance: com.yahoo.labs.samoa.instances.Instance, doubleArray: typing.Union[typing.List[float], jpype.JArray], boolean: bool, boolean2: bool, normalizeInfoArray: typing.Union[typing.List['MLP.NormalizeInfo'], jpype.JArray], long: int) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnMiniBatch(self, miniBatch: 'MiniBatch', boolean: bool) -> None: ...
    class NormalizeInfo:
        def __init__(self): ...

class MiniBatch: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.deeplearning")``.

    CAND: typing.Type[CAND]
    MLP: typing.Type[MLP]
    MiniBatch: typing.Type[MiniBatch]
