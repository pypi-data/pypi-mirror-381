
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.capabilities
import moa.classifiers
import moa.core
import moa.options
import typing



class CSMOTE(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    neighborsOption: com.github.javacliparser.IntOption = ...
    thresholdOption: com.github.javacliparser.FloatOption = ...
    minSizeAllowedOption: com.github.javacliparser.IntOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def toString(self) -> str: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineAdaBoost(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineAdaC2(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    costPositiveOption: com.github.javacliparser.FloatOption = ...
    costNegativeOption: com.github.javacliparser.FloatOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineCSB2(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    costPositiveOption: com.github.javacliparser.FloatOption = ...
    costNegativeOption: com.github.javacliparser.FloatOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineRUSBoost(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    samplingRateOption: com.github.javacliparser.IntOption = ...
    algorithmImplementationOption: com.github.javacliparser.MultiChoiceOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineSMOTEBagging(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    samplingRateOption: com.github.javacliparser.IntOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineUnderOverBagging(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    samplingRateOption: com.github.javacliparser.IntOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class RebalanceStream(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    minInstanceLimitBatchOption: com.github.javacliparser.IntOption = ...
    maxInstanceLimitBatchOption: com.github.javacliparser.IntOption = ...
    minInstanceLimitResetBatchOption: com.github.javacliparser.IntOption = ...
    maxInstanceLimitResetBatchOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def toString(self) -> str: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.meta.imbalanced")``.

    CSMOTE: typing.Type[CSMOTE]
    OnlineAdaBoost: typing.Type[OnlineAdaBoost]
    OnlineAdaC2: typing.Type[OnlineAdaC2]
    OnlineCSB2: typing.Type[OnlineCSB2]
    OnlineRUSBoost: typing.Type[OnlineRUSBoost]
    OnlineSMOTEBagging: typing.Type[OnlineSMOTEBagging]
    OnlineUnderOverBagging: typing.Type[OnlineUnderOverBagging]
    RebalanceStream: typing.Type[RebalanceStream]
