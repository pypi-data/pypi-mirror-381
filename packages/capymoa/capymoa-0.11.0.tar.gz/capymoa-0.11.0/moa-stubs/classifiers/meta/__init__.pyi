
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.io
import java.lang
import java.math
import java.util
import jpype
import moa
import moa.capabilities
import moa.classifiers
import moa.classifiers.drift
import moa.classifiers.meta.AutoML
import moa.classifiers.meta.imbalanced
import moa.classifiers.meta.minibatch
import moa.core
import moa.options
import moa.tasks
import typing



class ADOB(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    pureBoostOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class AccuracyUpdatedEnsemble(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    learnerOption: moa.options.ClassOption = ...
    memberCountOption: com.github.javacliparser.IntOption = ...
    chunkSizeOption: com.github.javacliparser.IntOption = ...
    maxByteSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class AccuracyWeightedEnsemble(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    learnerOption: moa.options.ClassOption = ...
    memberCountOption: com.github.javacliparser.FloatOption = ...
    storedCountOption: com.github.javacliparser.FloatOption = ...
    chunkSizeOption: com.github.javacliparser.IntOption = ...
    numFoldsOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class AdaptiveRandomForest(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    treeLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    mFeaturesModeOption: com.github.javacliparser.MultiChoiceOption = ...
    mFeaturesPerTreeSizeOption: com.github.javacliparser.IntOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    numberOfJobsOption: com.github.javacliparser.IntOption = ...
    driftDetectionMethodOption: moa.options.ClassOption = ...
    warningDetectionMethodOption: moa.options.ClassOption = ...
    disableWeightedVote: com.github.javacliparser.FlagOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    disableBackgroundLearnerOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSublearners(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class AdaptiveRandomForestRegressor(moa.classifiers.AbstractClassifier, moa.classifiers.Regressor):
    treeLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    mFeaturesModeOption: com.github.javacliparser.MultiChoiceOption = ...
    mFeaturesPerTreeSizeOption: com.github.javacliparser.IntOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    driftDetectionMethodOption: moa.options.ClassOption = ...
    warningDetectionMethodOption: moa.options.ClassOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    disableBackgroundLearnerOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class BOLE(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    pureBoostOption: com.github.javacliparser.FlagOption = ...
    breakVotesOption: com.github.javacliparser.FlagOption = ...
    errorBoundOption: com.github.javacliparser.FloatOption = ...
    weightShiftOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class DACC(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    learnerOption: moa.options.ClassOption = ...
    memberCountOption: com.github.javacliparser.FloatOption = ...
    maturityOption: com.github.javacliparser.FloatOption = ...
    evaluationSizeOption: com.github.javacliparser.FloatOption = ...
    combinationOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def discardModel(self, int: int) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class DynamicWeightedMajority(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    periodOption: com.github.javacliparser.IntOption = ...
    betaOption: com.github.javacliparser.FloatOption = ...
    thetaOption: com.github.javacliparser.FloatOption = ...
    maxExpertsOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class HeterogeneousEnsembleAbstract(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baselearnersOption: com.github.javacliparser.ListOption = ...
    gracePerionOption: com.github.javacliparser.IntOption = ...
    activeClassifiersOption: com.github.javacliparser.IntOption = ...
    weightClassifiersOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getEnsembleSize(self) -> int: ...
    def getMemberCliString(self, int: int) -> str: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...

class LearnNSE(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    periodOption: com.github.javacliparser.IntOption = ...
    sigmoidSlopeOption: com.github.javacliparser.FloatOption = ...
    sigmoidCrossingPointOption: com.github.javacliparser.FloatOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    pruningStrategyOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class LeveragingBag(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    weightShrinkOption: com.github.javacliparser.FloatOption = ...
    deltaAdwinOption: com.github.javacliparser.FloatOption = ...
    outputCodesOption: com.github.javacliparser.FlagOption = ...
    leveraginBagAlgorithmOption: com.github.javacliparser.MultiChoiceOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def getVotesForInstanceBinary(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class LimAttClassifier(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    numAttributesOption: com.github.javacliparser.IntOption = ...
    weightShrinkOption: com.github.javacliparser.FloatOption = ...
    deltaAdwinOption: com.github.javacliparser.FloatOption = ...
    oddsOffsetOption: com.github.javacliparser.FloatOption = ...
    pruneOption: com.github.javacliparser.FlagOption = ...
    bigTreesOption: com.github.javacliparser.FlagOption = ...
    numEnsemblePruningOption: com.github.javacliparser.IntOption = ...
    adwinReplaceWorstClassifierOption: com.github.javacliparser.FlagOption = ...
    learningRatioOption: com.github.javacliparser.FloatOption = ...
    penaltyFactorOption: com.github.javacliparser.FloatOption = ...
    initialNumInstancesOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def getVotesForInstancePerceptron(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray], int2: int) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prediction(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], int: int) -> float: ...
    def predictionPruning(self, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], intArray: typing.Union[typing.List[int], jpype.JArray], int2: int) -> float: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnInstanceImplPerceptron(self, int: int, int2: int, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> None: ...
    class CombinationGenerator:
        def __init__(self, limAttClassifier: 'LimAttClassifier', int: int, int2: int): ...
        def getNext(self) -> typing.MutableSequence[int]: ...
        def getNumLeft(self) -> java.math.BigInteger: ...
        def getTotal(self) -> java.math.BigInteger: ...
        def hasMore(self) -> bool: ...
        def reset(self) -> None: ...

class MLCviaMTR(moa.classifiers.AbstractMultiLabelLearner, moa.classifiers.MultiLabelClassifier):
    regressorOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def setRandomSeed(self, int: int) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class OCBoost(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    smoothingOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineAccuracyUpdatedEnsemble(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    learnerOption: moa.options.ClassOption = ...
    memberCountOption: com.github.javacliparser.IntOption = ...
    windowSizeOption: com.github.javacliparser.FloatOption = ...
    maxByteSizeOption: com.github.javacliparser.IntOption = ...
    verboseOption: com.github.javacliparser.FlagOption = ...
    linearOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OnlineSmoothBoost(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    gammaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OzaBag(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler, moa.classifiers.Regressor):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OzaBagASHT(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    firstClassifierSizeOption: com.github.javacliparser.IntOption = ...
    useWeightOption: com.github.javacliparser.FlagOption = ...
    resetTreesOption: com.github.javacliparser.FlagOption = ...
    baseLearnerOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OzaBagAdwin(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OzaBoost(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    pureBoostOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class OzaBoostAdwin(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    pureBoostOption: com.github.javacliparser.FlagOption = ...
    deltaAdwinOption: com.github.javacliparser.FloatOption = ...
    outputCodesOption: com.github.javacliparser.FlagOption = ...
    sammeOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def getVotesForInstanceBinary(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class PEARL(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    treeLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    mFeaturesModeOption: com.github.javacliparser.MultiChoiceOption = ...
    mFeaturesPerTreeSizeOption: com.github.javacliparser.IntOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    numberOfJobsOption: com.github.javacliparser.IntOption = ...
    driftDetectionMethodOption: moa.options.ClassOption = ...
    warningDetectionMethodOption: moa.options.ClassOption = ...
    disableWeightedVote: com.github.javacliparser.FlagOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    disableBackgroundLearnerOption: com.github.javacliparser.FlagOption = ...
    treeRepoSizeOption: com.github.javacliparser.IntOption = ...
    candidatePoolSizeOption: com.github.javacliparser.IntOption = ...
    cdKappaOption: com.github.javacliparser.FloatOption = ...
    editDistanceOption: com.github.javacliparser.IntOption = ...
    lruQueueSize: com.github.javacliparser.IntOption = ...
    performanceEvalWindowSize: com.github.javacliparser.IntOption = ...
    enableStateGraph: com.github.javacliparser.FlagOption = ...
    lossyWindowSizeSizeOption: com.github.javacliparser.IntOption = ...
    candidateTreeReuseRate: com.github.javacliparser.FloatOption = ...
    reuseWindowSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPredictedClass(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    class DriftInfo:
        warningDetected: bool = ...
        driftDetected: bool = ...
        predictedClass: int = ...
        def __init__(self, pEARL: 'PEARL', boolean: bool, boolean2: bool, int: int): ...

class PairedLearners(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    stableLearnerOption: moa.options.ClassOption = ...
    reactiveLearnerOption: moa.options.ClassOption = ...
    windowSizeOption: com.github.javacliparser.IntOption = ...
    thresholdOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class RCD(moa.classifiers.drift.SingleClassifierDrift):
    statisticalTestOption: moa.options.ClassOption = ...
    similarityBetweenDistributionsOption: com.github.javacliparser.FloatOption = ...
    bufferSizeOption: com.github.javacliparser.IntOption = ...
    testFrequencyOption: com.github.javacliparser.IntOption = ...
    classifiersSizeOption: com.github.javacliparser.IntOption = ...
    threadSizeOption: com.github.javacliparser.IntOption = ...
    quantityClassifiersTestOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class RandomRules(moa.classifiers.AbstractClassifier, moa.classifiers.Regressor):
    VerbosityOption: com.github.javacliparser.IntOption = ...
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    numAttributesPercentageOption: com.github.javacliparser.FloatOption = ...
    useBaggingOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class SelfOptimisingKNearestLeaves(moa.classifiers.AbstractClassifier, moa.classifiers.Regressor):
    treeLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    disableSelfOptimisingOption: com.github.javacliparser.FlagOption = ...
    kOption: com.github.javacliparser.IntOption = ...
    mFeaturesModeOption: com.github.javacliparser.MultiChoiceOption = ...
    mFeaturesPerTreeSizeOption: com.github.javacliparser.IntOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    driftDetectionMethodOption: moa.options.ClassOption = ...
    warningDetectionMethodOption: moa.options.ClassOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    disableBackgroundLearnerOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class StreamingRandomPatches(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.capabilities.CapabilitiesHandler):
    baseLearnerOption: moa.options.ClassOption = ...
    ensembleSizeOption: com.github.javacliparser.IntOption = ...
    subspaceModeOption: com.github.javacliparser.MultiChoiceOption = ...
    subspaceSizeOption: com.github.javacliparser.IntOption = ...
    trainingMethodOption: com.github.javacliparser.MultiChoiceOption = ...
    lambdaOption: com.github.javacliparser.FloatOption = ...
    driftDetectionMethodOption: moa.options.ClassOption = ...
    warningDetectionMethodOption: moa.options.ClassOption = ...
    disableWeightedVote: com.github.javacliparser.FlagOption = ...
    disableDriftDetectionOption: com.github.javacliparser.FlagOption = ...
    disableBackgroundLearnerOption: com.github.javacliparser.FlagOption = ...
    TRAIN_RANDOM_SUBSPACES: typing.ClassVar[int] = ...
    TRAIN_RESAMPLING: typing.ClassVar[int] = ...
    TRAIN_RANDOM_PATCHES: typing.ClassVar[int] = ...
    def __init__(self): ...
    @staticmethod
    def allKCombinations(int: int, int2: int) -> java.util.ArrayList[java.util.ArrayList[int]]: ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getSublearners(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    @staticmethod
    def localRandomKCombinations(int: int, int2: int, int3: int, random: java.util.Random) -> java.util.ArrayList[java.util.ArrayList[int]]: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class TemporallyAugmentedClassifier(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.ClassOption = ...
    numOldLabelsOption: com.github.javacliparser.IntOption = ...
    labelDelayOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def addOldLabel(self, double: float) -> None: ...
    def extendWithOldLabels(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def initHeader(self, instances: com.yahoo.labs.samoa.instances.Instances) -> None: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def toString(self) -> str: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class WEKAClassifier(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    baseLearnerOption: moa.options.WEKAClassOption = ...
    widthOption: com.github.javacliparser.IntOption = ...
    widthInitOption: com.github.javacliparser.IntOption = ...
    sampleFrequencyOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def buildClassifier(self) -> None: ...
    def createWekaClassifier(self, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class WeightedMajorityAlgorithm(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier):
    learnerListOption: com.github.javacliparser.ListOption = ...
    betaOption: com.github.javacliparser.FloatOption = ...
    gammaOption: com.github.javacliparser.FloatOption = ...
    pruneOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def discardModel(self, int: int) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[moa.classifiers.Classifier]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class ADACC(DACC, moa.classifiers.MultiClassClassifier):
    tauSizeOption: com.github.javacliparser.IntOption = ...
    stabIndexSizeOption: com.github.javacliparser.FloatOption = ...
    equivIndexSizeOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class HeterogeneousEnsembleBlast(HeterogeneousEnsembleAbstract, moa.classifiers.MultiClassClassifier):
    windowSizeOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class HeterogeneousEnsembleBlastFadingFactors(HeterogeneousEnsembleAbstract, moa.classifiers.MultiClassClassifier):
    alphaOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class StreamingGradientBoostedRegression(moa.classifiers.meta.StreamingGradientBoostedTrees, moa.classifiers.Regressor):
    def __init__(self): ...

class StreamingGradientBoostedTrees(moa.classifiers.AbstractClassifier, moa.classifiers.MultiClassClassifier, moa.classifiers.Regressor):
    baseLearnerOption: moa.options.ClassOption = ...
    numberOfboostingIterations: com.github.javacliparser.IntOption = ...
    percentageOfAttributesForEachBoostingIteration: com.github.javacliparser.IntOption = ...
    learningRateOption: com.github.javacliparser.FloatOption = ...
    disableOneHotEncoding: com.github.javacliparser.FlagOption = ...
    multipleIterationByCeilingOfHessianTimesM: com.github.javacliparser.IntOption = ...
    randomlySkip1SthOfInstancesAtTraining: com.github.javacliparser.IntOption = ...
    useSquaredLossForClassification: com.github.javacliparser.FlagOption = ...
    randomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def correctlyClassifies(self, instance: com.yahoo.labs.samoa.instances.Instance) -> bool: ...
    def getCapabilities(self) -> moa.capabilities.Capabilities: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @staticmethod
    def getScoresWhenNullTree(int: int) -> typing.MutableSequence[float]: ...
    @staticmethod
    def getSubInstance(instance: com.yahoo.labs.samoa.instances.Instance, double: float, arrayList: java.util.ArrayList[int], boolean: bool, double2: float, boolean2: bool) -> com.yahoo.labs.samoa.instances.Instance: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    @typing.overload
    def measureByteSize(self) -> int: ...
    @typing.overload
    @staticmethod
    def measureByteSize(mOAObject: moa.MOAObject) -> int: ...
    @staticmethod
    def newBinaryClassInstance(instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def resetLearningImpl(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    class SGBT(moa.AbstractMOAObject):
        numberOfboostingIterations: com.github.javacliparser.IntOption = ...
        percentageOfAttributesForEachBoostingIteration: com.github.javacliparser.IntOption = ...
        learningRateOption: com.github.javacliparser.FloatOption = ...
        useOneHotEncoding: com.github.javacliparser.FlagOption = ...
        multipleIterationByCeilingOfHessianTimesM: com.github.javacliparser.IntOption = ...
        randomlySkip1SthOfInstancesAtTraining: com.github.javacliparser.IntOption = ...
        useSquaredLossForClassification: com.github.javacliparser.FlagOption = ...
        def __init__(self, classifier: moa.classifiers.Classifier, random: java.util.Random): ...
        def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
        def getRawScoreForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> moa.core.DoubleVector: ...
        def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
        def initEnsemble(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
        @typing.overload
        def measureByteSize(self) -> int: ...
        @typing.overload
        @staticmethod
        def measureByteSize(mOAObject: moa.MOAObject) -> int: ...
        def trainBoosterUsingSoftmaxCrossEntropyLoss(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
        def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
        class BoostingCommittee(java.io.Serializable):
            committeeSize: int = ...
            def __init__(self, classifier: moa.classifiers.Classifier, int: int): ...
            def getScoresForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
            def measureByteSize(self) -> int: ...
            @typing.overload
            def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
            @typing.overload
            def trainOnInstanceImpl(self, instanceArray: typing.Union[typing.List[com.yahoo.labs.samoa.instances.Instance], jpype.JArray], int: int, gradHessArray: typing.Union[typing.List['StreamingGradientBoostedTrees.SGBT.GradHess'], jpype.JArray]) -> None: ...
        class GradHess(java.io.Serializable):
            gradient: float = ...
            hessian: float = ...
            def __init__(self, double: float, double2: float): ...
        class Objective:
            def __init__(self): ...
            def computeDerivatives(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], boolean: bool, boolean2: bool) -> typing.MutableSequence['StreamingGradientBoostedTrees.SGBT.GradHess']: ...
            def transfer(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> typing.MutableSequence[float]: ...
        class SoftmaxCrossEntropy(moa.classifiers.meta.StreamingGradientBoostedTrees.SGBT.Objective, java.io.Serializable):
            def __init__(self): ...
            def computeDerivatives(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], boolean: bool, boolean2: bool) -> typing.MutableSequence['StreamingGradientBoostedTrees.SGBT.GradHess']: ...
            def transfer(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> typing.MutableSequence[float]: ...
        class SquaredError(moa.classifiers.meta.StreamingGradientBoostedTrees.SGBT.Objective, java.io.Serializable):
            def __init__(self): ...
            def computeDerivatives(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], boolean: bool, boolean2: bool) -> typing.MutableSequence['StreamingGradientBoostedTrees.SGBT.GradHess']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.meta")``.

    ADACC: typing.Type[ADACC]
    ADOB: typing.Type[ADOB]
    AccuracyUpdatedEnsemble: typing.Type[AccuracyUpdatedEnsemble]
    AccuracyWeightedEnsemble: typing.Type[AccuracyWeightedEnsemble]
    AdaptiveRandomForest: typing.Type[AdaptiveRandomForest]
    AdaptiveRandomForestRegressor: typing.Type[AdaptiveRandomForestRegressor]
    BOLE: typing.Type[BOLE]
    DACC: typing.Type[DACC]
    DynamicWeightedMajority: typing.Type[DynamicWeightedMajority]
    HeterogeneousEnsembleAbstract: typing.Type[HeterogeneousEnsembleAbstract]
    HeterogeneousEnsembleBlast: typing.Type[HeterogeneousEnsembleBlast]
    HeterogeneousEnsembleBlastFadingFactors: typing.Type[HeterogeneousEnsembleBlastFadingFactors]
    LearnNSE: typing.Type[LearnNSE]
    LeveragingBag: typing.Type[LeveragingBag]
    LimAttClassifier: typing.Type[LimAttClassifier]
    MLCviaMTR: typing.Type[MLCviaMTR]
    OCBoost: typing.Type[OCBoost]
    OnlineAccuracyUpdatedEnsemble: typing.Type[OnlineAccuracyUpdatedEnsemble]
    OnlineSmoothBoost: typing.Type[OnlineSmoothBoost]
    OzaBag: typing.Type[OzaBag]
    OzaBagASHT: typing.Type[OzaBagASHT]
    OzaBagAdwin: typing.Type[OzaBagAdwin]
    OzaBoost: typing.Type[OzaBoost]
    OzaBoostAdwin: typing.Type[OzaBoostAdwin]
    PEARL: typing.Type[PEARL]
    PairedLearners: typing.Type[PairedLearners]
    RCD: typing.Type[RCD]
    RandomRules: typing.Type[RandomRules]
    SelfOptimisingKNearestLeaves: typing.Type[SelfOptimisingKNearestLeaves]
    StreamingGradientBoostedRegression: typing.Type[StreamingGradientBoostedRegression]
    StreamingGradientBoostedTrees: typing.Type[StreamingGradientBoostedTrees]
    StreamingRandomPatches: typing.Type[StreamingRandomPatches]
    TemporallyAugmentedClassifier: typing.Type[TemporallyAugmentedClassifier]
    WEKAClassifier: typing.Type[WEKAClassifier]
    WeightedMajorityAlgorithm: typing.Type[WeightedMajorityAlgorithm]
    AutoML: moa.classifiers.meta.AutoML.__module_protocol__
    imbalanced: moa.classifiers.meta.imbalanced.__module_protocol__
    minibatch: moa.classifiers.meta.minibatch.__module_protocol__
