
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import moa
import moa.capabilities
import moa.classifiers.active
import moa.classifiers.bayes
import moa.classifiers.core
import moa.classifiers.deeplearning
import moa.classifiers.drift
import moa.classifiers.functions
import moa.classifiers.lazy
import moa.classifiers.meta
import moa.classifiers.multilabel
import moa.classifiers.multitarget
import moa.classifiers.oneclass
import moa.classifiers.predictioninterval
import moa.classifiers.rules
import moa.classifiers.semisupervised
import moa.classifiers.trees
import moa.core
import moa.gui
import moa.learners
import moa.options
import moa.tasks
import typing



class Classifier(moa.learners.Learner[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]]):
    def copy(self) -> 'Classifier': ...
    def correctlyClassifies(self, instance: com.yahoo.labs.samoa.instances.Instance) -> bool: ...
    @typing.overload
    def getConfidenceForPrediction(self, instance: com.yahoo.labs.samoa.instances.Instance, double: float) -> float: ...
    @typing.overload
    def getConfidenceForPrediction(self, e: moa.core.Example, double: float) -> float: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, e: moa.core.Example) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getSubClassifiers(self) -> typing.MutableSequence['Classifier']: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, e: moa.core.Example) -> typing.MutableSequence[float]: ...
    @typing.overload
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstance(self, e: moa.core.Example) -> None: ...

class MultiClassClassifier: ...

class Regressor: ...

class SemiSupervisedLearner(moa.learners.Learner[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]]):
    def addInitialWarmupTrainingInstances(self) -> None: ...
    def trainOnUnlabeledInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> int: ...

class AbstractClassifier(moa.options.AbstractOptionHandler, Classifier, moa.capabilities.CapabilitiesHandler):
    classifierRandom: java.util.Random = ...
    def __init__(self): ...
    @staticmethod
    def contextIsCompatible(instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader, instancesHeader2: com.yahoo.labs.samoa.instances.InstancesHeader) -> bool: ...
    @typing.overload
    def copy(self) -> Classifier: ...
    @typing.overload
    @staticmethod
    def copy(mOAObject: moa.MOAObject) -> moa.MOAObject: ...
    def correctlyClassifies(self, instance: com.yahoo.labs.samoa.instances.Instance) -> bool: ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getAWTRenderer(self) -> moa.gui.AWTRenderer: ...
    def getAttributeNameString(self, int: int) -> str: ...
    def getClassLabelString(self, int: int) -> str: ...
    def getClassNameString(self) -> str: ...
    @typing.overload
    def getConfidenceForPrediction(self, instance: com.yahoo.labs.samoa.instances.Instance, double: float) -> float: ...
    @typing.overload
    def getConfidenceForPrediction(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance], double: float) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getModel(self) -> moa.MOAObject: ...
    def getModelContext(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getModelMeasurements(self) -> typing.MutableSequence[moa.core.Measurement]: ...
    def getNominalValueString(self, int: int, int2: int) -> str: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getPurposeString(self) -> str: ...
    def getSubClassifiers(self) -> typing.MutableSequence[Classifier]: ...
    def getSublearners(self) -> typing.MutableSequence[moa.learners.Learner]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearning(self) -> None: ...
    def resetLearningImpl(self) -> None: ...
    def setModelContext(self, instancesHeader: com.yahoo.labs.samoa.instances.InstancesHeader) -> None: ...
    def setRandomSeed(self, int: int) -> None: ...
    @typing.overload
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainingHasStarted(self) -> bool: ...
    def trainingWeightSeenByModel(self) -> float: ...

class MultiLabelLearner(Classifier):
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, e: moa.core.Example) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class OneClassClassifier(MultiClassClassifier):
    def getAnomalyScore(self, instance: com.yahoo.labs.samoa.instances.Instance) -> float: ...
    def initialize(self, collection: typing.Union[java.util.Collection[com.yahoo.labs.samoa.instances.Instance], typing.Sequence[com.yahoo.labs.samoa.instances.Instance], typing.Set[com.yahoo.labs.samoa.instances.Instance]]) -> None: ...

class AbstractClassifierMiniBatch(AbstractClassifier, Classifier, moa.capabilities.CapabilitiesHandler):
    numberOfCoresOption: com.github.javacliparser.IntOption = ...
    batchSizeOption: com.github.javacliparser.IntOption = ...
    numOfCores: int = ...
    def __init__(self): ...
    def getPurposeString(self) -> str: ...
    def resetLearning(self) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnInstances(self, arrayList: java.util.ArrayList[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    def trainingHasEnded(self) -> None: ...

class AbstractMultiLabelLearner(AbstractClassifier, MultiLabelLearner):
    def __init__(self): ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    @typing.overload
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...
    @typing.overload
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class MultiLabelClassifier(MultiLabelLearner): ...

class MultiTargetLearnerSemiSupervised(MultiLabelLearner):
    @typing.overload
    def getPredictionForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> com.yahoo.labs.samoa.instances.Prediction: ...
    @typing.overload
    def getPredictionForInstance(self, e: moa.core.Example) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def getTrainingPrediction(self) -> com.yahoo.labs.samoa.instances.Prediction: ...
    def trainOnInstanceImpl(self, multiLabelInstance: com.yahoo.labs.samoa.instances.MultiLabelInstance) -> None: ...

class MultiTargetRegressor(MultiLabelLearner): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers")``.

    AbstractClassifier: typing.Type[AbstractClassifier]
    AbstractClassifierMiniBatch: typing.Type[AbstractClassifierMiniBatch]
    AbstractMultiLabelLearner: typing.Type[AbstractMultiLabelLearner]
    Classifier: typing.Type[Classifier]
    MultiClassClassifier: typing.Type[MultiClassClassifier]
    MultiLabelClassifier: typing.Type[MultiLabelClassifier]
    MultiLabelLearner: typing.Type[MultiLabelLearner]
    MultiTargetLearnerSemiSupervised: typing.Type[MultiTargetLearnerSemiSupervised]
    MultiTargetRegressor: typing.Type[MultiTargetRegressor]
    OneClassClassifier: typing.Type[OneClassClassifier]
    Regressor: typing.Type[Regressor]
    SemiSupervisedLearner: typing.Type[SemiSupervisedLearner]
    active: moa.classifiers.active.__module_protocol__
    bayes: moa.classifiers.bayes.__module_protocol__
    core: moa.classifiers.core.__module_protocol__
    deeplearning: moa.classifiers.deeplearning.__module_protocol__
    drift: moa.classifiers.drift.__module_protocol__
    functions: moa.classifiers.functions.__module_protocol__
    lazy: moa.classifiers.lazy.__module_protocol__
    meta: moa.classifiers.meta.__module_protocol__
    multilabel: moa.classifiers.multilabel.__module_protocol__
    multitarget: moa.classifiers.multitarget.__module_protocol__
    oneclass: moa.classifiers.oneclass.__module_protocol__
    predictioninterval: moa.classifiers.predictioninterval.__module_protocol__
    rules: moa.classifiers.rules.__module_protocol__
    semisupervised: moa.classifiers.semisupervised.__module_protocol__
    trees: moa.classifiers.trees.__module_protocol__
