
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.capabilities
import moa.classifiers
import moa.core
import moa.learners
import moa.options
import moa.tasks
import typing



class PredictionIntervalLearner(moa.learners.Learner[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]]):
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, e: moa.core.Example) -> typing.MutableSequence[float]: ...
    @typing.overload
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    @typing.overload
    def trainOnInstance(self, e: moa.core.Example) -> None: ...

class AdaptivePredictionInterval(moa.classifiers.AbstractClassifier, PredictionIntervalLearner):
    learnerOption: moa.options.ClassOption = ...
    confidenceLevelOption: com.github.javacliparser.FloatOption = ...
    scalarLimitOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getCapabilities(self) -> moa.capabilities.Capabilities: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    @typing.overload
    def trainOnInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    @typing.overload
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...

class MVEPredictionInterval(moa.classifiers.AbstractClassifier, PredictionIntervalLearner):
    learnerOption: moa.options.ClassOption = ...
    confidenceLevelOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getCapabilities(self) -> moa.capabilities.Capabilities: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getModelDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def getVotesForInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    @typing.overload
    def getVotesForInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> typing.MutableSequence[float]: ...
    def isRandomizable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def resetLearningImpl(self) -> None: ...
    @typing.overload
    def trainOnInstance(self, example: moa.core.Example[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    @typing.overload
    def trainOnInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...
    def trainOnInstanceImpl(self, instance: com.yahoo.labs.samoa.instances.Instance) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.predictioninterval")``.

    AdaptivePredictionInterval: typing.Type[AdaptivePredictionInterval]
    MVEPredictionInterval: typing.Type[MVEPredictionInterval]
    PredictionIntervalLearner: typing.Type[PredictionIntervalLearner]
