
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import java.util.concurrent
import jpype
import moa.options
import typing



class StatisticalTest(moa.options.OptionHandler, java.util.concurrent.Callable[float]):
    def set(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    def test(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> float: ...

class Cramer(moa.options.AbstractOptionHandler, StatisticalTest):
    confidenceLevelOption: com.github.javacliparser.FloatOption = ...
    replicatesOption: com.github.javacliparser.IntOption = ...
    kernelOption: com.github.javacliparser.MultiChoiceOption = ...
    maxMOption: com.github.javacliparser.FloatOption = ...
    kOption: com.github.javacliparser.IntOption = ...
    CRAMER: typing.ClassVar[int] = ...
    BAHR: typing.ClassVar[int] = ...
    LOG: typing.ClassVar[int] = ...
    FRACA: typing.ClassVar[int] = ...
    FRACB: typing.ClassVar[int] = ...
    def __init__(self): ...
    def call(self) -> float: ...
    @typing.overload
    def cramerTest(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> 'Cramer.CramerTest': ...
    @typing.overload
    def cramerTest(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance], double: float, int: int, string: str, boolean: bool, int2: int, double2: float, int3: int) -> 'Cramer.CramerTest': ...
    @typing.overload
    def cramerTest1(self, list: java.util.List[java.util.List[float]], list2: java.util.List[java.util.List[float]]) -> 'Cramer.CramerTest': ...
    @typing.overload
    def cramerTest1(self, list: java.util.List[java.util.List[float]], list2: java.util.List[java.util.List[float]], double: float, int: int, string: str, boolean: bool, int2: int, double2: float, int3: int) -> 'Cramer.CramerTest': ...
    @staticmethod
    def fileToInstances(string: str) -> java.util.List[com.yahoo.labs.samoa.instances.Instance]: ...
    @staticmethod
    def fileToMatrix(string: str) -> java.util.List[java.util.List[float]]: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def set(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    def test(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> float: ...
    class CramerTest:
        def __init__(self, cramer: 'Cramer', int: int, int2: int, int3: int, double: float, double2: float, double3: float, double4: float, double5: float, double6: float, doubleArray: typing.Union[typing.List[float], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray], doubleArray3: typing.Union[typing.List[float], jpype.JArray]): ...

class KNN(moa.options.AbstractOptionHandler, StatisticalTest):
    kValueOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def call(self) -> float: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def mtsknn(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> typing.MutableSequence[float]: ...
    def set(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> None: ...
    def test(self, list: java.util.List[com.yahoo.labs.samoa.instances.Instance], list2: java.util.List[com.yahoo.labs.samoa.instances.Instance]) -> float: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.classifiers.core.statisticaltests")``.

    Cramer: typing.Type[Cramer]
    KNN: typing.Type[KNN]
    StatisticalTest: typing.Type[StatisticalTest]
