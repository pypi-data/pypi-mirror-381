
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.google.common.hash
import com.yahoo.labs.samoa.instances
import java.lang
import java.util
import jpype
import moa.core
import moa.options
import moa.streams
import moa.tasks
import typing



class MultiLabelStreamFilter(moa.streams.MultiTargetInstanceStream):
    def setInputStream(self, exampleStream: moa.streams.ExampleStream[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]]) -> None: ...

class Selection:
    def __init__(self): ...
    @typing.overload
    def add(self, int: int) -> bool: ...
    @typing.overload
    def add(self, int: int, int2: int) -> bool: ...
    def getEnd(self, int: int) -> int: ...
    def getStart(self, int: int) -> int: ...
    def numEntries(self) -> int: ...
    def numValues(self) -> int: ...

class StreamFilter(moa.streams.ExampleStream):
    def filterInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def setInputStream(self, exampleStream: moa.streams.ExampleStream) -> None: ...

class AbstractMultiLabelStreamFilter(moa.options.AbstractOptionHandler, MultiLabelStreamFilter):
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...
    def setInputStream(self, exampleStream: moa.streams.ExampleStream[moa.core.Example[com.yahoo.labs.samoa.instances.Instance]]) -> None: ...

class AbstractStreamFilter(moa.options.AbstractOptionHandler, StreamFilter):
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def filterInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...
    def setInputStream(self, exampleStream: moa.streams.ExampleStream) -> None: ...

class AddNoiseFilter(AbstractStreamFilter):
    randomSeedOption: com.github.javacliparser.IntOption = ...
    attNoiseFractionOption: com.github.javacliparser.FloatOption = ...
    classNoiseFractionOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def filterInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...

class HashingTrickFilter(AbstractStreamFilter):
    dim: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hashVector(self, instance: com.yahoo.labs.samoa.instances.Instance, int: int, hashFunction: com.google.common.hash.HashFunction) -> typing.MutableSequence[float]: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def transformedInstance(self, instance: com.yahoo.labs.samoa.instances.Instance, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> com.yahoo.labs.samoa.instances.DenseInstance: ...

class NormalisationFilter(AbstractStreamFilter):
    def __init__(self): ...
    def filterInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...

class RBFFilter(AbstractStreamFilter):
    randomSeedOption: com.github.javacliparser.IntOption = ...
    numLatentOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...

class RandomProjectionFilter(AbstractStreamFilter):
    dim: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    @staticmethod
    def multiply(doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray2: typing.Union[typing.List[float], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def randomProjection(self, instance: com.yahoo.labs.samoa.instances.Instance, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray]) -> typing.MutableSequence[float]: ...
    def transformedInstance(self, instance: com.yahoo.labs.samoa.instances.Instance, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> com.yahoo.labs.samoa.instances.DenseInstance: ...

class ReLUFilter(AbstractStreamFilter):
    randomSeedOption: com.github.javacliparser.IntOption = ...
    numLatentOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def filterInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...

class RemoveDiscreteAttributeFilter(AbstractStreamFilter):
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...

class ReplacingMissingValuesFilter(AbstractStreamFilter):
    numericReplacementStrategyOption: com.github.javacliparser.MultiChoiceOption = ...
    nominalReplacementStrategyOption: com.github.javacliparser.MultiChoiceOption = ...
    numericalConstantValueOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    class MapUtil:
        def __init__(self): ...
        _sortByValue__K = typing.TypeVar('_sortByValue__K')  # <K>
        _sortByValue__V = typing.TypeVar('_sortByValue__V', bound=java.lang.Comparable)  # <V>
        @staticmethod
        def sortByValue(map: typing.Union[java.util.Map[_sortByValue__K, _sortByValue__V], typing.Mapping[_sortByValue__K, _sortByValue__V]]) -> java.util.Map[_sortByValue__K, _sortByValue__V]: ...

class SelectAttributesFilter(AbstractMultiLabelStreamFilter, MultiLabelStreamFilter):
    inputStringOption: com.github.javacliparser.StringOption = ...
    outputStringOption: com.github.javacliparser.StringOption = ...
    def __init__(self): ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...

class StandardisationFilter(AbstractStreamFilter):
    AlgorithmOption: com.github.javacliparser.MultiChoiceOption = ...
    WeightedOptionFloat: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def filterInstance(self, instance: com.yahoo.labs.samoa.instances.Instance) -> com.yahoo.labs.samoa.instances.Instance: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.streams.filters")``.

    AbstractMultiLabelStreamFilter: typing.Type[AbstractMultiLabelStreamFilter]
    AbstractStreamFilter: typing.Type[AbstractStreamFilter]
    AddNoiseFilter: typing.Type[AddNoiseFilter]
    HashingTrickFilter: typing.Type[HashingTrickFilter]
    MultiLabelStreamFilter: typing.Type[MultiLabelStreamFilter]
    NormalisationFilter: typing.Type[NormalisationFilter]
    RBFFilter: typing.Type[RBFFilter]
    RandomProjectionFilter: typing.Type[RandomProjectionFilter]
    ReLUFilter: typing.Type[ReLUFilter]
    RemoveDiscreteAttributeFilter: typing.Type[RemoveDiscreteAttributeFilter]
    ReplacingMissingValuesFilter: typing.Type[ReplacingMissingValuesFilter]
    SelectAttributesFilter: typing.Type[SelectAttributesFilter]
    Selection: typing.Type[Selection]
    StandardisationFilter: typing.Type[StandardisationFilter]
    StreamFilter: typing.Type[StreamFilter]
