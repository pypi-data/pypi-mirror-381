
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import com.yahoo.labs.samoa.instances
import java.lang
import moa.capabilities
import moa.core
import moa.options
import moa.streams
import moa.streams.generators.cd
import moa.streams.generators.multilabel
import moa.tasks
import typing



class AgrawalGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    functionOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    peturbFractionOption: com.github.javacliparser.FloatOption = ...
    balanceClassesOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class AssetNegotiationGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream):
    functionOption: com.github.javacliparser.IntOption = ...
    noisePercentage: com.github.javacliparser.FloatOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class HyperplaneGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    numClassesOption: com.github.javacliparser.IntOption = ...
    numAttsOption: com.github.javacliparser.IntOption = ...
    numDriftAttsOption: com.github.javacliparser.IntOption = ...
    magChangeOption: com.github.javacliparser.FloatOption = ...
    noisePercentageOption: com.github.javacliparser.IntOption = ...
    sigmaPercentageOption: com.github.javacliparser.IntOption = ...
    numberInstance: int = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class LEDGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    NUM_IRRELEVANT_ATTRIBUTES: typing.ClassVar[int] = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    noisePercentageOption: com.github.javacliparser.IntOption = ...
    suppressIrrelevantAttributesOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class MixedGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream):
    functionOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    balanceClassesOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class RandomRBFGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    modelRandomSeedOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    numClassesOption: com.github.javacliparser.IntOption = ...
    numAttsOption: com.github.javacliparser.IntOption = ...
    numCentroidsOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class RandomTreeGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    treeRandomSeedOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    numClassesOption: com.github.javacliparser.IntOption = ...
    numNominalsOption: com.github.javacliparser.IntOption = ...
    numNumericsOption: com.github.javacliparser.IntOption = ...
    numValsPerNominalOption: com.github.javacliparser.IntOption = ...
    maxTreeDepthOption: com.github.javacliparser.IntOption = ...
    firstLeafLevelOption: com.github.javacliparser.IntOption = ...
    leafFractionOption: com.github.javacliparser.FloatOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def prepareForUseImpl(self, taskMonitor: moa.tasks.TaskMonitor, objectRepository: typing.Union[moa.core.ObjectRepository, typing.Callable]) -> None: ...
    def restart(self) -> None: ...

class SEAGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    functionOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    balanceClassesOption: com.github.javacliparser.FlagOption = ...
    numInstancesConcept: com.github.javacliparser.IntOption = ...
    noisePercentageOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class STAGGERGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    functionOption: com.github.javacliparser.IntOption = ...
    balanceClassesOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class SineGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream):
    NUM_IRRELEVANT_ATTRIBUTES: typing.ClassVar[int] = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    functionOption: com.github.javacliparser.IntOption = ...
    suppressIrrelevantAttributesOption: com.github.javacliparser.FlagOption = ...
    balanceClassesOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class TextGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream):
    numAttsOption: com.github.javacliparser.IntOption = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def changeFreqWords(self, int: int) -> None: ...
    def changePolarity(self, int: int) -> None: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class WaveformGenerator(moa.options.AbstractOptionHandler, moa.streams.InstanceStream, moa.capabilities.CapabilitiesHandler):
    NUM_CLASSES: typing.ClassVar[int] = ...
    NUM_BASE_ATTRIBUTES: typing.ClassVar[int] = ...
    TOTAL_ATTRIBUTES_INCLUDING_NOISE: typing.ClassVar[int] = ...
    instanceRandomSeedOption: com.github.javacliparser.IntOption = ...
    addNoiseOption: com.github.javacliparser.FlagOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def estimatedRemainingInstances(self) -> int: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getHeader(self) -> com.yahoo.labs.samoa.instances.InstancesHeader: ...
    def getPurposeString(self) -> str: ...
    def hasMoreInstances(self) -> bool: ...
    def isRestartable(self) -> bool: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...
    def restart(self) -> None: ...

class HyperplaneGeneratorForRegression(HyperplaneGenerator):
    def __init__(self): ...
    def nextInstance(self) -> moa.core.InstanceExample: ...

class LEDGeneratorDrift(LEDGenerator):
    numberAttributesDriftOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...

class RandomRBFGeneratorDrift(RandomRBFGenerator):
    speedChangeOption: com.github.javacliparser.FloatOption = ...
    numDriftCentroidsOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...

class WaveformGeneratorDrift(WaveformGenerator):
    numberAttributesDriftOption: com.github.javacliparser.IntOption = ...
    def __init__(self): ...
    def defineImmutableCapabilities(self) -> moa.capabilities.ImmutableCapabilities: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    def getPurposeString(self) -> str: ...
    def nextInstance(self) -> moa.core.InstanceExample: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.streams.generators")``.

    AgrawalGenerator: typing.Type[AgrawalGenerator]
    AssetNegotiationGenerator: typing.Type[AssetNegotiationGenerator]
    HyperplaneGenerator: typing.Type[HyperplaneGenerator]
    HyperplaneGeneratorForRegression: typing.Type[HyperplaneGeneratorForRegression]
    LEDGenerator: typing.Type[LEDGenerator]
    LEDGeneratorDrift: typing.Type[LEDGeneratorDrift]
    MixedGenerator: typing.Type[MixedGenerator]
    RandomRBFGenerator: typing.Type[RandomRBFGenerator]
    RandomRBFGeneratorDrift: typing.Type[RandomRBFGeneratorDrift]
    RandomTreeGenerator: typing.Type[RandomTreeGenerator]
    SEAGenerator: typing.Type[SEAGenerator]
    STAGGERGenerator: typing.Type[STAGGERGenerator]
    SineGenerator: typing.Type[SineGenerator]
    TextGenerator: typing.Type[TextGenerator]
    WaveformGenerator: typing.Type[WaveformGenerator]
    WaveformGeneratorDrift: typing.Type[WaveformGeneratorDrift]
    cd: moa.streams.generators.cd.__module_protocol__
    multilabel: moa.streams.generators.multilabel.__module_protocol__
