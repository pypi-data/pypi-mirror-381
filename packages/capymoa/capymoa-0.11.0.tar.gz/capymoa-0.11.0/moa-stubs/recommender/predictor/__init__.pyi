
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.github.javacliparser
import java.io
import java.lang
import java.util
import moa.options
import moa.recommender.rc.data
import typing



class RatingPredictor(java.io.Serializable):
    def getData(self) -> moa.recommender.rc.data.RecommenderData: ...
    def predictRating(self, int: int, int2: int) -> float: ...
    def predictRatings(self, int: int, list: java.util.List[int]) -> java.util.List[float]: ...
    def train(self) -> None: ...

class BRISMFPredictor(moa.options.AbstractOptionHandler, RatingPredictor):
    featuresOption: com.github.javacliparser.IntOption = ...
    lRateOption: com.github.javacliparser.FloatOption = ...
    rFactorOption: com.github.javacliparser.FloatOption = ...
    iterationsOption: com.github.javacliparser.IntOption = ...
    dataOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def getData(self) -> moa.recommender.rc.data.RecommenderData: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def predictRating(self, int: int, int2: int) -> float: ...
    @typing.overload
    def predictRating(self, integer: int, integer2: int) -> float: ...
    def predictRatings(self, int: int, list: java.util.List[int]) -> java.util.List[float]: ...
    def train(self) -> None: ...

class BaselinePredictor(moa.options.AbstractOptionHandler, RatingPredictor):
    dataOption: moa.options.ClassOption = ...
    def __init__(self): ...
    def getData(self) -> moa.recommender.rc.data.RecommenderData: ...
    def getDescription(self, stringBuilder: java.lang.StringBuilder, int: int) -> None: ...
    @typing.overload
    def predictRating(self, int: int, int2: int) -> float: ...
    @typing.overload
    def predictRating(self, integer: int, integer2: int) -> float: ...
    def predictRatings(self, int: int, list: java.util.List[int]) -> java.util.List[float]: ...
    def train(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.recommender.predictor")``.

    BRISMFPredictor: typing.Type[BRISMFPredictor]
    BaselinePredictor: typing.Type[BaselinePredictor]
    RatingPredictor: typing.Type[RatingPredictor]
