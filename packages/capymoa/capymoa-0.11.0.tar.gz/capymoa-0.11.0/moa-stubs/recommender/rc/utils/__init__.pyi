
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import typing



class Hash:
    def __init__(self): ...
    @typing.overload
    def hashCode(self) -> int: ...
    @typing.overload
    @staticmethod
    def hashCode(int: int) -> int: ...

_Pair__T = typing.TypeVar('_Pair__T', bound=java.lang.Comparable)  # <T>
_Pair__U = typing.TypeVar('_Pair__U', bound=java.lang.Comparable)  # <U>
class Pair(java.io.Serializable, java.lang.Comparable['Pair'[_Pair__T, _Pair__U]], typing.Generic[_Pair__T, _Pair__U]):
    def __init__(self, t: _Pair__T, u: _Pair__U): ...
    def compareTo(self, pair: 'Pair'[_Pair__T, _Pair__U]) -> int: ...
    def getFirst(self) -> _Pair__T: ...
    def getSecond(self) -> _Pair__U: ...
    def setFirst(self, t: _Pair__T) -> None: ...
    def setSecond(self, u: _Pair__U) -> None: ...

class Rating:
    userID: int = ...
    itemID: int = ...
    rating: float = ...
    def __init__(self, int: int, int2: int, double: float): ...

class Updatable:
    def updateNewItem(self, int: int, list: java.util.List[int], list2: java.util.List[float]) -> None: ...
    def updateNewUser(self, int: int, list: java.util.List[int], list2: java.util.List[float]) -> None: ...
    def updateRemoveItem(self, int: int) -> None: ...
    def updateRemoveRating(self, int: int, int2: int) -> None: ...
    def updateRemoveUser(self, int: int) -> None: ...
    def updateSetRating(self, int: int, int2: int, double: float) -> None: ...

class Vector(java.io.Serializable):
    def __init__(self): ...
    def copy(self) -> 'Vector': ...
    def dotProduct(self, vector: 'Vector') -> float: ...
    def get(self, int: int) -> float: ...
    def getIdxs(self) -> java.util.Set[int]: ...
    def iterator(self) -> java.util.Iterator[Pair[int, float]]: ...
    def norm(self) -> float: ...
    def remove(self, int: int) -> None: ...
    def set(self, int: int, double: float) -> None: ...
    def size(self) -> int: ...

class DenseVector(Vector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arrayList: java.util.ArrayList[float]): ...
    def copy(self) -> Vector: ...
    def get(self, int: int) -> float: ...
    def getIdxs(self) -> java.util.Set[int]: ...
    def iterator(self) -> java.util.Iterator[Pair[int, float]]: ...
    def remove(self, int: int) -> None: ...
    def set(self, int: int, double: float) -> None: ...
    def size(self) -> int: ...
    class DenseVectorIterator(java.util.Iterator[Pair[int, float]]):
        def __init__(self, denseVector: 'DenseVector'): ...
        def hasNext(self) -> bool: ...
        def next(self) -> Pair[int, float]: ...
        def remove(self) -> None: ...

class SparseVector(Vector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, map: typing.Union[java.util.Map[int, float], typing.Mapping[int, float]]): ...
    def copy(self) -> 'SparseVector': ...
    def get(self, int: int) -> float: ...
    def getIdxs(self) -> java.util.Set[int]: ...
    def iterator(self) -> java.util.Iterator[Pair[int, float]]: ...
    def remove(self, int: int) -> None: ...
    def set(self, int: int, double: float) -> None: ...
    def size(self) -> int: ...
    class SparseVectorIterator(java.util.Iterator[Pair[int, float]]):
        def __init__(self, sparseVector: 'SparseVector'): ...
        def hasNext(self) -> bool: ...
        def next(self) -> Pair[int, float]: ...
        def remove(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("moa.recommender.rc.utils")``.

    DenseVector: typing.Type[DenseVector]
    Hash: typing.Type[Hash]
    Pair: typing.Type[Pair]
    Rating: typing.Type[Rating]
    SparseVector: typing.Type[SparseVector]
    Updatable: typing.Type[Updatable]
    Vector: typing.Type[Vector]
