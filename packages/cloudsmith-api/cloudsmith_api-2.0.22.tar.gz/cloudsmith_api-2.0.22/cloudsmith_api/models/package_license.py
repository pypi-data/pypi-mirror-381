# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class PackageLicense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_notes': 'str',
        'license_override': 'str',
        'license_url': 'str',
        'spdx_license': 'str'
    }

    attribute_map = {
        'license_notes': 'license_notes',
        'license_override': 'license_override',
        'license_url': 'license_url',
        'spdx_license': 'spdx_license'
    }

    def __init__(self, license_notes=None, license_override='None', license_url=None, spdx_license=None, _configuration=None):  # noqa: E501
        """PackageLicense - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._license_notes = None
        self._license_override = None
        self._license_url = None
        self._spdx_license = None
        self.discriminator = None

        if license_notes is not None:
            self.license_notes = license_notes
        if license_override is not None:
            self.license_override = license_override
        if license_url is not None:
            self.license_url = license_url
        self.spdx_license = spdx_license

    @property
    def license_notes(self):
        """Gets the license_notes of this PackageLicense.


        :return: The license_notes of this PackageLicense.
        :rtype: str
        """
        return self._license_notes

    @license_notes.setter
    def license_notes(self, license_notes):
        """Sets the license_notes of this PackageLicense.


        :param license_notes: The license_notes of this PackageLicense.
        :type: str
        """
        if (self._configuration.client_side_validation and
                license_notes is not None and len(license_notes) > 1000):
            raise ValueError("Invalid value for `license_notes`, length must be less than or equal to `1000`")  # noqa: E501

        self._license_notes = license_notes

    @property
    def license_override(self):
        """Gets the license_override of this PackageLicense.


        :return: The license_override of this PackageLicense.
        :rtype: str
        """
        return self._license_override

    @license_override.setter
    def license_override(self, license_override):
        """Sets the license_override of this PackageLicense.


        :param license_override: The license_override of this PackageLicense.
        :type: str
        """
        allowed_values = ["None", "Ignored", "Purchased"]  # noqa: E501
        if (self._configuration.client_side_validation and
                license_override not in allowed_values):
            raise ValueError(
                "Invalid value for `license_override` ({0}), must be one of {1}"  # noqa: E501
                .format(license_override, allowed_values)
            )

        self._license_override = license_override

    @property
    def license_url(self):
        """Gets the license_url of this PackageLicense.


        :return: The license_url of this PackageLicense.
        :rtype: str
        """
        return self._license_url

    @license_url.setter
    def license_url(self, license_url):
        """Sets the license_url of this PackageLicense.


        :param license_url: The license_url of this PackageLicense.
        :type: str
        """
        if (self._configuration.client_side_validation and
                license_url is not None and len(license_url) > 255):
            raise ValueError("Invalid value for `license_url`, length must be less than or equal to `255`")  # noqa: E501

        self._license_url = license_url

    @property
    def spdx_license(self):
        """Gets the spdx_license of this PackageLicense.


        :return: The spdx_license of this PackageLicense.
        :rtype: str
        """
        return self._spdx_license

    @spdx_license.setter
    def spdx_license(self, spdx_license):
        """Sets the spdx_license of this PackageLicense.


        :param spdx_license: The spdx_license of this PackageLicense.
        :type: str
        """
        if self._configuration.client_side_validation and spdx_license is None:
            raise ValueError("Invalid value for `spdx_license`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                spdx_license is not None and len(spdx_license) > 255):
            raise ValueError("Invalid value for `spdx_license`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                spdx_license is not None and len(spdx_license) < 1):
            raise ValueError("Invalid value for `spdx_license`, length must be greater than or equal to `1`")  # noqa: E501

        self._spdx_license = spdx_license

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageLicense):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageLicense):
            return True

        return self.to_dict() != other.to_dict()

