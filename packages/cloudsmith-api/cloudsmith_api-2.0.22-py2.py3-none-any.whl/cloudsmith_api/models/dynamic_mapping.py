# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class DynamicMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'claim_value': 'str',
        'service_account': 'str'
    }

    attribute_map = {
        'claim_value': 'claim_value',
        'service_account': 'service_account'
    }

    def __init__(self, claim_value=None, service_account=None, _configuration=None):  # noqa: E501
        """DynamicMapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._claim_value = None
        self._service_account = None
        self.discriminator = None

        self.claim_value = claim_value
        self.service_account = service_account

    @property
    def claim_value(self):
        """Gets the claim_value of this DynamicMapping.

        The OIDC token claim value that must be present in the token for it to successfully authenticate as the mapped `service_account`.  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.

        :return: The claim_value of this DynamicMapping.
        :rtype: str
        """
        return self._claim_value

    @claim_value.setter
    def claim_value(self, claim_value):
        """Sets the claim_value of this DynamicMapping.

        The OIDC token claim value that must be present in the token for it to successfully authenticate as the mapped `service_account`.  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.

        :param claim_value: The claim_value of this DynamicMapping.
        :type: str
        """
        if self._configuration.client_side_validation and claim_value is None:
            raise ValueError("Invalid value for `claim_value`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                claim_value is not None and len(claim_value) < 1):
            raise ValueError("Invalid value for `claim_value`, length must be greater than or equal to `1`")  # noqa: E501

        self._claim_value = claim_value

    @property
    def service_account(self):
        """Gets the service_account of this DynamicMapping.

        The service account associated with the provider setting and `claim_value`  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.

        :return: The service_account of this DynamicMapping.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this DynamicMapping.

        The service account associated with the provider setting and `claim_value`  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.

        :param service_account: The service_account of this DynamicMapping.
        :type: str
        """
        if self._configuration.client_side_validation and service_account is None:
            raise ValueError("Invalid value for `service_account`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                service_account is not None and len(service_account) < 1):
            raise ValueError("Invalid value for `service_account`, length must be greater than or equal to `1`")  # noqa: E501

        self._service_account = service_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DynamicMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DynamicMapping):
            return True

        return self.to_dict() != other.to_dict()

