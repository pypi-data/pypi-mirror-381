[build-system]
requires = ["setuptools>=64", "wheel", "build"]
build-backend = "setuptools.build_meta"

[project]
name = "lnpi_gridapi"
version = "1.0.7.1"
description = "Python client library for LNPI Grid API"
readme = "README.md"
license = "MIT"
authors = [
  { name = "Kelvin O. Lim", email = "lim.kelvino@gmail.com" },
]
maintainers = [
  { name = "Kelvin O. Lim", email = "lim.kelvino@gmail.com" },
]
keywords = [
    "grid",
    "api",
    "client",
    "medical",
    "research",
    "imaging",
    "clinical-trials"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: System :: Networking",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "pydantic>=1.10.0",
    "python-dateutil>=2.8.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
async = [
    "aiohttp>=3.8.0",
]
cli = [
    "click>=8.0.0",
    "rich>=12.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "flake8>=5.0.0",
    "pyinstaller>=5.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
all = [
    "aiohttp>=3.8.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "flake8>=5.0.0",
    "pyinstaller>=5.0.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/kelvinlim/grid_api"
#Documentation = "https://gridapi-python.readthedocs.io/"
#Repository = "https://github.com/gridapi/gridapi-python.git"
#Issues = "https://github.com/gridapi/gridapi-python/issues"
#Changelog = "https://github.com/gridapi/gridapi-python/blob/main/CHANGELOG.md"

[project.scripts]
gridapi = "gridapi.cli:main"

[tool.setuptools]
packages = ["gridapi", "gridapi.managers", "gridapi.models", "gridapi.query", "gridapi.utils"]

[tool.setuptools.package-data]
gridapi = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gridapi"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "click.*",
    "rich.*",
    "requests.*",
    "pydantic.*",
    "dateutil.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["gridapi"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
