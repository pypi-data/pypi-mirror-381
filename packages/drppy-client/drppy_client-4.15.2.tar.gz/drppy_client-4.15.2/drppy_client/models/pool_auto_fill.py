# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class PoolAutoFill(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acquire_pool': 'str',
        'create_parameters': 'dict(str, object)',
        'max_free': 'int',
        'min_free': 'int',
        'return_pool': 'str',
        'use_auto_fill': 'bool'
    }

    attribute_map = {
        'acquire_pool': 'AcquirePool',
        'create_parameters': 'CreateParameters',
        'max_free': 'MaxFree',
        'min_free': 'MinFree',
        'return_pool': 'ReturnPool',
        'use_auto_fill': 'UseAutoFill'
    }

    def __init__(self, acquire_pool=None, create_parameters=None, max_free=None, min_free=None, return_pool=None, use_auto_fill=None, _configuration=None):  # noqa: E501
        """PoolAutoFill - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._acquire_pool = None
        self._create_parameters = None
        self._max_free = None
        self._min_free = None
        self._return_pool = None
        self._use_auto_fill = None
        self.discriminator = None

        if acquire_pool is not None:
            self.acquire_pool = acquire_pool
        if create_parameters is not None:
            self.create_parameters = create_parameters
        if max_free is not None:
            self.max_free = max_free
        if min_free is not None:
            self.min_free = min_free
        if return_pool is not None:
            self.return_pool = return_pool
        if use_auto_fill is not None:
            self.use_auto_fill = use_auto_fill

    @property
    def acquire_pool(self):
        """Gets the acquire_pool of this PoolAutoFill.  # noqa: E501

        AcquirePool is the pool to draw machines from  # noqa: E501

        :return: The acquire_pool of this PoolAutoFill.  # noqa: E501
        :rtype: str
        """
        return self._acquire_pool

    @acquire_pool.setter
    def acquire_pool(self, acquire_pool):
        """Sets the acquire_pool of this PoolAutoFill.

        AcquirePool is the pool to draw machines from  # noqa: E501

        :param acquire_pool: The acquire_pool of this PoolAutoFill.  # noqa: E501
        :type: str
        """

        self._acquire_pool = acquire_pool

    @property
    def create_parameters(self):
        """Gets the create_parameters of this PoolAutoFill.  # noqa: E501

        CreateParameters are the parameters to apply to a create machine  # noqa: E501

        :return: The create_parameters of this PoolAutoFill.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._create_parameters

    @create_parameters.setter
    def create_parameters(self, create_parameters):
        """Sets the create_parameters of this PoolAutoFill.

        CreateParameters are the parameters to apply to a create machine  # noqa: E501

        :param create_parameters: The create_parameters of this PoolAutoFill.  # noqa: E501
        :type: dict(str, object)
        """

        self._create_parameters = create_parameters

    @property
    def max_free(self):
        """Gets the max_free of this PoolAutoFill.  # noqa: E501

        MaxFree is the maximum number of machines in the pool  # noqa: E501

        :return: The max_free of this PoolAutoFill.  # noqa: E501
        :rtype: int
        """
        return self._max_free

    @max_free.setter
    def max_free(self, max_free):
        """Sets the max_free of this PoolAutoFill.

        MaxFree is the maximum number of machines in the pool  # noqa: E501

        :param max_free: The max_free of this PoolAutoFill.  # noqa: E501
        :type: int
        """

        self._max_free = max_free

    @property
    def min_free(self):
        """Gets the min_free of this PoolAutoFill.  # noqa: E501

        MinFree is the minimum number of machines in the pool  # noqa: E501

        :return: The min_free of this PoolAutoFill.  # noqa: E501
        :rtype: int
        """
        return self._min_free

    @min_free.setter
    def min_free(self, min_free):
        """Sets the min_free of this PoolAutoFill.

        MinFree is the minimum number of machines in the pool  # noqa: E501

        :param min_free: The min_free of this PoolAutoFill.  # noqa: E501
        :type: int
        """

        self._min_free = min_free

    @property
    def return_pool(self):
        """Gets the return_pool of this PoolAutoFill.  # noqa: E501

        ReturnPool is the pool to return machines to  # noqa: E501

        :return: The return_pool of this PoolAutoFill.  # noqa: E501
        :rtype: str
        """
        return self._return_pool

    @return_pool.setter
    def return_pool(self, return_pool):
        """Sets the return_pool of this PoolAutoFill.

        ReturnPool is the pool to return machines to  # noqa: E501

        :param return_pool: The return_pool of this PoolAutoFill.  # noqa: E501
        :type: str
        """

        self._return_pool = return_pool

    @property
    def use_auto_fill(self):
        """Gets the use_auto_fill of this PoolAutoFill.  # noqa: E501

        UseAutoFill turns on or off the auto fill feature - NOT IMPLEMENTED  # noqa: E501

        :return: The use_auto_fill of this PoolAutoFill.  # noqa: E501
        :rtype: bool
        """
        return self._use_auto_fill

    @use_auto_fill.setter
    def use_auto_fill(self, use_auto_fill):
        """Sets the use_auto_fill of this PoolAutoFill.

        UseAutoFill turns on or off the auto fill feature - NOT IMPLEMENTED  # noqa: E501

        :param use_auto_fill: The use_auto_fill of this PoolAutoFill.  # noqa: E501
        :type: bool
        """

        self._use_auto_fill = use_auto_fill

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoolAutoFill, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolAutoFill):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoolAutoFill):
            return True

        return self.to_dict() != other.to_dict()
