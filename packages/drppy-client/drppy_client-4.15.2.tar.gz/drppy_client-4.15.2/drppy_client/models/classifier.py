# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class Classifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_continue': 'bool',
        'icon': 'str',
        'no_append': 'bool',
        'params': 'dict(str, object)',
        'placeholder': 'str',
        'regex': 'str',
        'test': 'str',
        'title': 'str'
    }

    attribute_map = {
        '_continue': 'Continue',
        'icon': 'Icon',
        'no_append': 'NoAppend',
        'params': 'Params',
        'placeholder': 'Placeholder',
        'regex': 'Regex',
        'test': 'Test',
        'title': 'Title'
    }

    def __init__(self, _continue=None, icon=None, no_append=None, params=None, placeholder=None, regex=None, test=None, title=None, _configuration=None):  # noqa: E501
        """Classifier - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__continue = None
        self._icon = None
        self._no_append = None
        self._params = None
        self._placeholder = None
        self._regex = None
        self._test = None
        self._title = None
        self.discriminator = None

        if _continue is not None:
            self._continue = _continue
        if icon is not None:
            self.icon = icon
        if no_append is not None:
            self.no_append = no_append
        if params is not None:
            self.params = params
        if placeholder is not None:
            self.placeholder = placeholder
        if regex is not None:
            self.regex = regex
        if test is not None:
            self.test = test
        if title is not None:
            self.title = title

    @property
    def _continue(self):
        """Gets the _continue of this Classifier.  # noqa: E501

        Continue defines if the classifier should continue  # noqa: E501

        :return: The _continue of this Classifier.  # noqa: E501
        :rtype: bool
        """
        return self.__continue

    @_continue.setter
    def _continue(self, _continue):
        """Sets the _continue of this Classifier.

        Continue defines if the classifier should continue  # noqa: E501

        :param _continue: The _continue of this Classifier.  # noqa: E501
        :type: bool
        """

        self.__continue = _continue

    @property
    def icon(self):
        """Gets the icon of this Classifier.  # noqa: E501

        Icon defines the icon to use for the classifier  # noqa: E501

        :return: The icon of this Classifier.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Classifier.

        Icon defines the icon to use for the classifier  # noqa: E501

        :param icon: The icon of this Classifier.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def no_append(self):
        """Gets the no_append of this Classifier.  # noqa: E501

        NoAppend defines if the elements should be appended  # noqa: E501

        :return: The no_append of this Classifier.  # noqa: E501
        :rtype: bool
        """
        return self._no_append

    @no_append.setter
    def no_append(self, no_append):
        """Sets the no_append of this Classifier.

        NoAppend defines if the elements should be appended  # noqa: E501

        :param no_append: The no_append of this Classifier.  # noqa: E501
        :type: bool
        """

        self._no_append = no_append

    @property
    def params(self):
        """Gets the params of this Classifier.  # noqa: E501

        Params are additional data for the classifier  # noqa: E501

        :return: The params of this Classifier.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Classifier.

        Params are additional data for the classifier  # noqa: E501

        :param params: The params of this Classifier.  # noqa: E501
        :type: dict(str, object)
        """

        self._params = params

    @property
    def placeholder(self):
        """Gets the placeholder of this Classifier.  # noqa: E501

        Placeholder defines a string placeholder  # noqa: E501

        :return: The placeholder of this Classifier.  # noqa: E501
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this Classifier.

        Placeholder defines a string placeholder  # noqa: E501

        :param placeholder: The placeholder of this Classifier.  # noqa: E501
        :type: str
        """

        self._placeholder = placeholder

    @property
    def regex(self):
        """Gets the regex of this Classifier.  # noqa: E501

        Regex defines a regex string for matching classifiers  # noqa: E501

        :return: The regex of this Classifier.  # noqa: E501
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Classifier.

        Regex defines a regex string for matching classifiers  # noqa: E501

        :param regex: The regex of this Classifier.  # noqa: E501
        :type: str
        """

        self._regex = regex

    @property
    def test(self):
        """Gets the test of this Classifier.  # noqa: E501

        Test defines a bash test to apply  # noqa: E501

        :return: The test of this Classifier.  # noqa: E501
        :rtype: str
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Classifier.

        Test defines a bash test to apply  # noqa: E501

        :param test: The test of this Classifier.  # noqa: E501
        :type: str
        """

        self._test = test

    @property
    def title(self):
        """Gets the title of this Classifier.  # noqa: E501

        Title defines the name of the classifier  # noqa: E501

        :return: The title of this Classifier.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Classifier.

        Title defines the name of the classifier  # noqa: E501

        :param title: The title of this Classifier.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Classifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Classifier):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Classifier):
            return True

        return self.to_dict() != other.to_dict()
