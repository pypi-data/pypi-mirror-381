# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class TaskStack(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_job': 'str',
        'current_task': 'int',
        'task_list': 'list[str]'
    }

    attribute_map = {
        'current_job': 'CurrentJob',
        'current_task': 'CurrentTask',
        'task_list': 'TaskList'
    }

    def __init__(self, current_job=None, current_task=None, task_list=None, _configuration=None):  # noqa: E501
        """TaskStack - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_job = None
        self._current_task = None
        self._task_list = None
        self.discriminator = None

        if current_job is not None:
            self.current_job = current_job
        if current_task is not None:
            self.current_task = current_task
        if task_list is not None:
            self.task_list = task_list

    @property
    def current_job(self):
        """Gets the current_job of this TaskStack.  # noqa: E501

        CurrentJob is the job that presents this task stack  # noqa: E501

        :return: The current_job of this TaskStack.  # noqa: E501
        :rtype: str
        """
        return self._current_job

    @current_job.setter
    def current_job(self, current_job):
        """Sets the current_job of this TaskStack.

        CurrentJob is the job that presents this task stack  # noqa: E501

        :param current_job: The current_job of this TaskStack.  # noqa: E501
        :type: str
        """

        self._current_job = current_job

    @property
    def current_task(self):
        """Gets the current_task of this TaskStack.  # noqa: E501

        CurrentTask is the index in the task list in a previous errored task.  # noqa: E501

        :return: The current_task of this TaskStack.  # noqa: E501
        :rtype: int
        """
        return self._current_task

    @current_task.setter
    def current_task(self, current_task):
        """Sets the current_task of this TaskStack.

        CurrentTask is the index in the task list in a previous errored task.  # noqa: E501

        :param current_task: The current_task of this TaskStack.  # noqa: E501
        :type: int
        """

        self._current_task = current_task

    @property
    def task_list(self):
        """Gets the task_list of this TaskStack.  # noqa: E501

        TaskList is the task list from a previous errored task.  # noqa: E501

        :return: The task_list of this TaskStack.  # noqa: E501
        :rtype: list[str]
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this TaskStack.

        TaskList is the task list from a previous errored task.  # noqa: E501

        :param task_list: The task_list of this TaskStack.  # noqa: E501
        :type: list[str]
        """

        self._task_list = task_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskStack, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskStack):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskStack):
            return True

        return self.to_dict() != other.to_dict()
