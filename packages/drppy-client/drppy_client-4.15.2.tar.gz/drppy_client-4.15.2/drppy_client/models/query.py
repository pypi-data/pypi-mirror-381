# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class Query(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'op': 'str',
        'value': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'op': 'Op',
        'value': 'Value'
    }

    def __init__(self, name=None, op=None, value=None, _configuration=None):  # noqa: E501
        """Query - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._op = None
        self._value = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if op is not None:
            self.op = op
        if value is not None:
            self.value = value

    @property
    def name(self):
        """Gets the name of this Query.  # noqa: E501

        Name is the field / parameter to lookup  # noqa: E501

        :return: The name of this Query.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Query.

        Name is the field / parameter to lookup  # noqa: E501

        :param name: The name of this Query.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def op(self):
        """Gets the op of this Query.  # noqa: E501

        Op is the operation to apply to the field Options are =,Eq,Re,Nin,In,Gt,...  # noqa: E501

        :return: The op of this Query.  # noqa: E501
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this Query.

        Op is the operation to apply to the field Options are =,Eq,Re,Nin,In,Gt,...  # noqa: E501

        :param op: The op of this Query.  # noqa: E501
        :type: str
        """

        self._op = op

    @property
    def value(self):
        """Gets the value of this Query.  # noqa: E501

        Value is the string value of the item to test. The operator will convert to the field type as needed.  # noqa: E501

        :return: The value of this Query.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Query.

        Value is the string value of the item to test. The operator will convert to the field type as needed.  # noqa: E501

        :param value: The value of this Query.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Query, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Query):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Query):
            return True

        return self.to_dict() != other.to_dict()
