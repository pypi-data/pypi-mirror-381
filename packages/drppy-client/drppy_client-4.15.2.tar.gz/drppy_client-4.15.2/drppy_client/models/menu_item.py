# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class MenuItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'filter': 'str',
        'group_by': 'list[str]',
        'has_flag': 'str',
        'has_object': 'str',
        'icon': 'str',
        'id': 'str',
        'overwrite': 'str',
        'title': 'str',
        'to': 'str'
    }

    attribute_map = {
        'color': 'Color',
        'filter': 'Filter',
        'group_by': 'GroupBy',
        'has_flag': 'HasFlag',
        'has_object': 'HasObject',
        'icon': 'Icon',
        'id': 'Id',
        'overwrite': 'Overwrite',
        'title': 'Title',
        'to': 'To'
    }

    def __init__(self, color=None, filter=None, group_by=None, has_flag=None, has_object=None, icon=None, id=None, overwrite=None, title=None, to=None, _configuration=None):  # noqa: E501
        """MenuItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._color = None
        self._filter = None
        self._group_by = None
        self._has_flag = None
        self._has_object = None
        self._icon = None
        self._id = None
        self._overwrite = None
        self._title = None
        self._to = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if filter is not None:
            self.filter = filter
        if group_by is not None:
            self.group_by = group_by
        if has_flag is not None:
            self.has_flag = has_flag
        if has_object is not None:
            self.has_object = has_object
        if icon is not None:
            self.icon = icon
        if id is not None:
            self.id = id
        if overwrite is not None:
            self.overwrite = overwrite
        if title is not None:
            self.title = title
        if to is not None:
            self.to = to

    @property
    def color(self):
        """Gets the color of this MenuItem.  # noqa: E501

        Color defines the color for this menu item  # noqa: E501

        :return: The color of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this MenuItem.

        Color defines the color for this menu item  # noqa: E501

        :param color: The color of this MenuItem.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def filter(self):
        """Gets the filter of this MenuItem.  # noqa: E501

        Filter to use on the MenuItem  # noqa: E501

        :return: The filter of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MenuItem.

        Filter to use on the MenuItem  # noqa: E501

        :param filter: The filter of this MenuItem.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def group_by(self):
        """Gets the group_by of this MenuItem.  # noqa: E501

        GroupBy is a list of subgroups for the menu item  # noqa: E501

        :return: The group_by of this MenuItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this MenuItem.

        GroupBy is a list of subgroups for the menu item  # noqa: E501

        :param group_by: The group_by of this MenuItem.  # noqa: E501
        :type: list[str]
        """

        self._group_by = group_by

    @property
    def has_flag(self):
        """Gets the has_flag of this MenuItem.  # noqa: E501

        HasFlag defines if there is a flag to test for showing the menu item  # noqa: E501

        :return: The has_flag of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._has_flag

    @has_flag.setter
    def has_flag(self, has_flag):
        """Sets the has_flag of this MenuItem.

        HasFlag defines if there is a flag to test for showing the menu item  # noqa: E501

        :param has_flag: The has_flag of this MenuItem.  # noqa: E501
        :type: str
        """

        self._has_flag = has_flag

    @property
    def has_object(self):
        """Gets the has_object of this MenuItem.  # noqa: E501

        HasObject defines if the object is really an object based menu item  # noqa: E501

        :return: The has_object of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._has_object

    @has_object.setter
    def has_object(self, has_object):
        """Sets the has_object of this MenuItem.

        HasObject defines if the object is really an object based menu item  # noqa: E501

        :param has_object: The has_object of this MenuItem.  # noqa: E501
        :type: str
        """

        self._has_object = has_object

    @property
    def icon(self):
        """Gets the icon of this MenuItem.  # noqa: E501

        Icon defines the icon for this menu item  # noqa: E501

        :return: The icon of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this MenuItem.

        Icon defines the icon for this menu item  # noqa: E501

        :param icon: The icon of this MenuItem.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this MenuItem.  # noqa: E501

        Id is the name of the MenuItem  # noqa: E501

        :return: The id of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MenuItem.

        Id is the name of the MenuItem  # noqa: E501

        :param id: The id of this MenuItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def overwrite(self):
        """Gets the overwrite of this MenuItem.  # noqa: E501

        Overwrite defines a set of things to overwrite  # noqa: E501

        :return: The overwrite of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this MenuItem.

        Overwrite defines a set of things to overwrite  # noqa: E501

        :param overwrite: The overwrite of this MenuItem.  # noqa: E501
        :type: str
        """

        self._overwrite = overwrite

    @property
    def title(self):
        """Gets the title of this MenuItem.  # noqa: E501

        Title is the title of the MenuItem  # noqa: E501

        :return: The title of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MenuItem.

        Title is the title of the MenuItem  # noqa: E501

        :param title: The title of this MenuItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def to(self):
        """Gets the to of this MenuItem.  # noqa: E501

        To is the destination route for viewing this menu item  # noqa: E501

        :return: The to of this MenuItem.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MenuItem.

        To is the destination route for viewing this menu item  # noqa: E501

        :param to: The to of this MenuItem.  # noqa: E501
        :type: str
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MenuItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MenuItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MenuItem):
            return True

        return self.to_dict() != other.to_dict()
