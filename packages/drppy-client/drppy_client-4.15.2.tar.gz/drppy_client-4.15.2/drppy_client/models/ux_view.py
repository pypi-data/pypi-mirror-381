# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class UxView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'airgap': 'bool',
        'applicable_roles': 'list[str]',
        'available': 'bool',
        'branding_image': 'str',
        'bulk_tabs': 'list[str]',
        'bundle': 'str',
        'classifiers': 'list[Classifier]',
        'columns': 'dict(str, list[str])',
        'created_at': 'datetime',
        'created_by': 'str',
        'description': 'str',
        'documentation': 'str',
        'endpoint': 'str',
        'errors': 'list[str]',
        'hide_edit_objects': 'list[str]',
        'id': 'str',
        'landing_page': 'str',
        'last_modified_at': 'datetime',
        'last_modified_by': 'str',
        'machine_fields': 'list[str]',
        'menu': 'list[MenuGroup]',
        'meta': 'Meta',
        'params': 'dict(str, object)',
        'params_restriction': 'list[str]',
        'profiles_restriction': 'list[str]',
        'read_only': 'bool',
        'show_activiation': 'bool',
        'stages_restriction': 'list[str]',
        'tasks_restriction': 'list[str]',
        'validated': 'bool',
        'workflows_restriction': 'list[str]'
    }

    attribute_map = {
        'airgap': 'Airgap',
        'applicable_roles': 'ApplicableRoles',
        'available': 'Available',
        'branding_image': 'BrandingImage',
        'bulk_tabs': 'BulkTabs',
        'bundle': 'Bundle',
        'classifiers': 'Classifiers',
        'columns': 'Columns',
        'created_at': 'CreatedAt',
        'created_by': 'CreatedBy',
        'description': 'Description',
        'documentation': 'Documentation',
        'endpoint': 'Endpoint',
        'errors': 'Errors',
        'hide_edit_objects': 'HideEditObjects',
        'id': 'Id',
        'landing_page': 'LandingPage',
        'last_modified_at': 'LastModifiedAt',
        'last_modified_by': 'LastModifiedBy',
        'machine_fields': 'MachineFields',
        'menu': 'Menu',
        'meta': 'Meta',
        'params': 'Params',
        'params_restriction': 'ParamsRestriction',
        'profiles_restriction': 'ProfilesRestriction',
        'read_only': 'ReadOnly',
        'show_activiation': 'ShowActiviation',
        'stages_restriction': 'StagesRestriction',
        'tasks_restriction': 'TasksRestriction',
        'validated': 'Validated',
        'workflows_restriction': 'WorkflowsRestriction'
    }

    def __init__(self, airgap=None, applicable_roles=None, available=None, branding_image=None, bulk_tabs=None, bundle=None, classifiers=None, columns=None, created_at=None, created_by=None, description=None, documentation=None, endpoint=None, errors=None, hide_edit_objects=None, id=None, landing_page=None, last_modified_at=None, last_modified_by=None, machine_fields=None, menu=None, meta=None, params=None, params_restriction=None, profiles_restriction=None, read_only=None, show_activiation=None, stages_restriction=None, tasks_restriction=None, validated=None, workflows_restriction=None, _configuration=None):  # noqa: E501
        """UxView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._airgap = None
        self._applicable_roles = None
        self._available = None
        self._branding_image = None
        self._bulk_tabs = None
        self._bundle = None
        self._classifiers = None
        self._columns = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self._documentation = None
        self._endpoint = None
        self._errors = None
        self._hide_edit_objects = None
        self._id = None
        self._landing_page = None
        self._last_modified_at = None
        self._last_modified_by = None
        self._machine_fields = None
        self._menu = None
        self._meta = None
        self._params = None
        self._params_restriction = None
        self._profiles_restriction = None
        self._read_only = None
        self._show_activiation = None
        self._stages_restriction = None
        self._tasks_restriction = None
        self._validated = None
        self._workflows_restriction = None
        self.discriminator = None

        if airgap is not None:
            self.airgap = airgap
        if applicable_roles is not None:
            self.applicable_roles = applicable_roles
        if available is not None:
            self.available = available
        if branding_image is not None:
            self.branding_image = branding_image
        if bulk_tabs is not None:
            self.bulk_tabs = bulk_tabs
        if bundle is not None:
            self.bundle = bundle
        if classifiers is not None:
            self.classifiers = classifiers
        if columns is not None:
            self.columns = columns
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if documentation is not None:
            self.documentation = documentation
        if endpoint is not None:
            self.endpoint = endpoint
        if errors is not None:
            self.errors = errors
        if hide_edit_objects is not None:
            self.hide_edit_objects = hide_edit_objects
        if id is not None:
            self.id = id
        if landing_page is not None:
            self.landing_page = landing_page
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if machine_fields is not None:
            self.machine_fields = machine_fields
        if menu is not None:
            self.menu = menu
        if meta is not None:
            self.meta = meta
        if params is not None:
            self.params = params
        if params_restriction is not None:
            self.params_restriction = params_restriction
        if profiles_restriction is not None:
            self.profiles_restriction = profiles_restriction
        if read_only is not None:
            self.read_only = read_only
        if show_activiation is not None:
            self.show_activiation = show_activiation
        if stages_restriction is not None:
            self.stages_restriction = stages_restriction
        if tasks_restriction is not None:
            self.tasks_restriction = tasks_restriction
        if validated is not None:
            self.validated = validated
        if workflows_restriction is not None:
            self.workflows_restriction = workflows_restriction

    @property
    def airgap(self):
        """Gets the airgap of this UxView.  # noqa: E501

        Airgap is not used.  Moved to license. Deprecated  # noqa: E501

        :return: The airgap of this UxView.  # noqa: E501
        :rtype: bool
        """
        return self._airgap

    @airgap.setter
    def airgap(self, airgap):
        """Sets the airgap of this UxView.

        Airgap is not used.  Moved to license. Deprecated  # noqa: E501

        :param airgap: The airgap of this UxView.  # noqa: E501
        :type: bool
        """

        self._airgap = airgap

    @property
    def applicable_roles(self):
        """Gets the applicable_roles of this UxView.  # noqa: E501

        ApplicableRoles defines the roles that this view shows up for. e.g. superuser means that it will be available for users with the superuser role.  # noqa: E501

        :return: The applicable_roles of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._applicable_roles

    @applicable_roles.setter
    def applicable_roles(self, applicable_roles):
        """Sets the applicable_roles of this UxView.

        ApplicableRoles defines the roles that this view shows up for. e.g. superuser means that it will be available for users with the superuser role.  # noqa: E501

        :param applicable_roles: The applicable_roles of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._applicable_roles = applicable_roles

    @property
    def available(self):
        """Gets the available of this UxView.  # noqa: E501

        Available tracks whether or not the model passed validation.  # noqa: E501

        :return: The available of this UxView.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this UxView.

        Available tracks whether or not the model passed validation.  # noqa: E501

        :param available: The available of this UxView.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def branding_image(self):
        """Gets the branding_image of this UxView.  # noqa: E501

        BrandingImage defines a files API path that should point to an image file. This replaces the RackN logo.  # noqa: E501

        :return: The branding_image of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._branding_image

    @branding_image.setter
    def branding_image(self, branding_image):
        """Sets the branding_image of this UxView.

        BrandingImage defines a files API path that should point to an image file. This replaces the RackN logo.  # noqa: E501

        :param branding_image: The branding_image of this UxView.  # noqa: E501
        :type: str
        """

        self._branding_image = branding_image

    @property
    def bulk_tabs(self):
        """Gets the bulk_tabs of this UxView.  # noqa: E501

        BulkTabs defines the tabs for this view  # noqa: E501

        :return: The bulk_tabs of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._bulk_tabs

    @bulk_tabs.setter
    def bulk_tabs(self, bulk_tabs):
        """Sets the bulk_tabs of this UxView.

        BulkTabs defines the tabs for this view  # noqa: E501

        :param bulk_tabs: The bulk_tabs of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._bulk_tabs = bulk_tabs

    @property
    def bundle(self):
        """Gets the bundle of this UxView.  # noqa: E501

        Bundle tracks the name of the store containing this object. This field is read-only, and cannot be changed via the API.  # noqa: E501

        :return: The bundle of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """Sets the bundle of this UxView.

        Bundle tracks the name of the store containing this object. This field is read-only, and cannot be changed via the API.  # noqa: E501

        :param bundle: The bundle of this UxView.  # noqa: E501
        :type: str
        """

        self._bundle = bundle

    @property
    def classifiers(self):
        """Gets the classifiers of this UxView.  # noqa: E501

        Classifiers is deprecated  # noqa: E501

        :return: The classifiers of this UxView.  # noqa: E501
        :rtype: list[Classifier]
        """
        return self._classifiers

    @classifiers.setter
    def classifiers(self, classifiers):
        """Sets the classifiers of this UxView.

        Classifiers is deprecated  # noqa: E501

        :param classifiers: The classifiers of this UxView.  # noqa: E501
        :type: list[Classifier]
        """

        self._classifiers = classifiers

    @property
    def columns(self):
        """Gets the columns of this UxView.  # noqa: E501

        Columns defines the custom colums for a MenuItem Id  # noqa: E501

        :return: The columns of this UxView.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this UxView.

        Columns defines the custom colums for a MenuItem Id  # noqa: E501

        :param columns: The columns of this UxView.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._columns = columns

    @property
    def created_at(self):
        """Gets the created_at of this UxView.  # noqa: E501

        CreatedAt is the time that this object was created.  # noqa: E501

        :return: The created_at of this UxView.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UxView.

        CreatedAt is the time that this object was created.  # noqa: E501

        :param created_at: The created_at of this UxView.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this UxView.  # noqa: E501

        CreatedBy stores the value of the user that created this object. Note: This value is stored ONLY if the object was created by a user which means that `currentUserName` needs to be populated in the authBlob  # noqa: E501

        :return: The created_by of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UxView.

        CreatedBy stores the value of the user that created this object. Note: This value is stored ONLY if the object was created by a user which means that `currentUserName` needs to be populated in the authBlob  # noqa: E501

        :param created_by: The created_by of this UxView.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this UxView.  # noqa: E501

        Description is a string for providing a simple description  # noqa: E501

        :return: The description of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UxView.

        Description is a string for providing a simple description  # noqa: E501

        :param description: The description of this UxView.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def documentation(self):
        """Gets the documentation of this UxView.  # noqa: E501

        Documentation is a string for providing additional in depth information.  # noqa: E501

        :return: The documentation of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this UxView.

        Documentation is a string for providing additional in depth information.  # noqa: E501

        :param documentation: The documentation of this UxView.  # noqa: E501
        :type: str
        """

        self._documentation = documentation

    @property
    def endpoint(self):
        """Gets the endpoint of this UxView.  # noqa: E501

        Endpoint tracks the owner of the object among DRP endpoints  # noqa: E501

        :return: The endpoint of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this UxView.

        Endpoint tracks the owner of the object among DRP endpoints  # noqa: E501

        :param endpoint: The endpoint of this UxView.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def errors(self):
        """Gets the errors of this UxView.  # noqa: E501

        If there are any errors in the validation process, they will be available here.  # noqa: E501

        :return: The errors of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this UxView.

        If there are any errors in the validation process, they will be available here.  # noqa: E501

        :param errors: The errors of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def hide_edit_objects(self):
        """Gets the hide_edit_objects of this UxView.  # noqa: E501

        HideEditObject defines a list of fields to hide when editting  # noqa: E501

        :return: The hide_edit_objects of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._hide_edit_objects

    @hide_edit_objects.setter
    def hide_edit_objects(self, hide_edit_objects):
        """Sets the hide_edit_objects of this UxView.

        HideEditObject defines a list of fields to hide when editting  # noqa: E501

        :param hide_edit_objects: The hide_edit_objects of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._hide_edit_objects = hide_edit_objects

    @property
    def id(self):
        """Gets the id of this UxView.  # noqa: E501

        Id is the Name of the Filter  # noqa: E501

        :return: The id of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UxView.

        Id is the Name of the Filter  # noqa: E501

        :param id: The id of this UxView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def landing_page(self):
        """Gets the landing_page of this UxView.  # noqa: E501

        LandingPage defines the default navigation route None or \"\" will open the system page. if it starts with http, it will navigate to the Overiew page. Otherwise, it will go to the machine's page.  # noqa: E501

        :return: The landing_page of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this UxView.

        LandingPage defines the default navigation route None or \"\" will open the system page. if it starts with http, it will navigate to the Overiew page. Otherwise, it will go to the machine's page.  # noqa: E501

        :param landing_page: The landing_page of this UxView.  # noqa: E501
        :type: str
        """

        self._landing_page = landing_page

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this UxView.  # noqa: E501

        LastModifiedAt is the time that this object was last modified.  # noqa: E501

        :return: The last_modified_at of this UxView.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this UxView.

        LastModifiedAt is the time that this object was last modified.  # noqa: E501

        :param last_modified_at: The last_modified_at of this UxView.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this UxView.  # noqa: E501

        LastModifiedBy stores the value of the user that last modified this object. NOTE: This value is populated ONLY if the object was modified by a user which means any actions done using machine tokens will not get tracked  # noqa: E501

        :return: The last_modified_by of this UxView.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this UxView.

        LastModifiedBy stores the value of the user that last modified this object. NOTE: This value is populated ONLY if the object was modified by a user which means any actions done using machine tokens will not get tracked  # noqa: E501

        :param last_modified_by: The last_modified_by of this UxView.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def machine_fields(self):
        """Gets the machine_fields of this UxView.  # noqa: E501

        MachineFields defines the fields for this view  # noqa: E501

        :return: The machine_fields of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._machine_fields

    @machine_fields.setter
    def machine_fields(self, machine_fields):
        """Sets the machine_fields of this UxView.

        MachineFields defines the fields for this view  # noqa: E501

        :param machine_fields: The machine_fields of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._machine_fields = machine_fields

    @property
    def menu(self):
        """Gets the menu of this UxView.  # noqa: E501

        Menu defines the menu elements.  # noqa: E501

        :return: The menu of this UxView.  # noqa: E501
        :rtype: list[MenuGroup]
        """
        return self._menu

    @menu.setter
    def menu(self, menu):
        """Sets the menu of this UxView.

        Menu defines the menu elements.  # noqa: E501

        :param menu: The menu of this UxView.  # noqa: E501
        :type: list[MenuGroup]
        """

        self._menu = menu

    @property
    def meta(self):
        """Gets the meta of this UxView.  # noqa: E501


        :return: The meta of this UxView.  # noqa: E501
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this UxView.


        :param meta: The meta of this UxView.  # noqa: E501
        :type: Meta
        """

        self._meta = meta

    @property
    def params(self):
        """Gets the params of this UxView.  # noqa: E501

        Params holds the values of parameters on the object.  The field is a key / value store of the parameters. The key is the name of a parameter.  The key is of type string. The value is the value of the parameter.  The type of the value is defined by the parameter object.  If the key doesn't reference a parameter, the type of the object can be anything.  The system will enforce the named parameter's value's type.  Go calls the \"anything\" parameters as \"interface {}\".  Hence, the type of this field is a map[string]interface{}.  # noqa: E501

        :return: The params of this UxView.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this UxView.

        Params holds the values of parameters on the object.  The field is a key / value store of the parameters. The key is the name of a parameter.  The key is of type string. The value is the value of the parameter.  The type of the value is defined by the parameter object.  If the key doesn't reference a parameter, the type of the object can be anything.  The system will enforce the named parameter's value's type.  Go calls the \"anything\" parameters as \"interface {}\".  Hence, the type of this field is a map[string]interface{}.  # noqa: E501

        :param params: The params of this UxView.  # noqa: E501
        :type: dict(str, object)
        """

        self._params = params

    @property
    def params_restriction(self):
        """Gets the params_restriction of this UxView.  # noqa: E501

        ParmsRestriction defines a list of restrictions for the parameter list  # noqa: E501

        :return: The params_restriction of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._params_restriction

    @params_restriction.setter
    def params_restriction(self, params_restriction):
        """Sets the params_restriction of this UxView.

        ParmsRestriction defines a list of restrictions for the parameter list  # noqa: E501

        :param params_restriction: The params_restriction of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._params_restriction = params_restriction

    @property
    def profiles_restriction(self):
        """Gets the profiles_restriction of this UxView.  # noqa: E501

        ProfilesRestriction defines a list of restrictions for the profile list  # noqa: E501

        :return: The profiles_restriction of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._profiles_restriction

    @profiles_restriction.setter
    def profiles_restriction(self, profiles_restriction):
        """Sets the profiles_restriction of this UxView.

        ProfilesRestriction defines a list of restrictions for the profile list  # noqa: E501

        :param profiles_restriction: The profiles_restriction of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._profiles_restriction = profiles_restriction

    @property
    def read_only(self):
        """Gets the read_only of this UxView.  # noqa: E501

        ReadOnly tracks if the store for this object is read-only. This flag is informational, and cannot be changed via the API.  # noqa: E501

        :return: The read_only of this UxView.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this UxView.

        ReadOnly tracks if the store for this object is read-only. This flag is informational, and cannot be changed via the API.  # noqa: E501

        :param read_only: The read_only of this UxView.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def show_activiation(self):
        """Gets the show_activiation of this UxView.  # noqa: E501

        ShowActiviation is not used.  Moved to license. Deprecated  # noqa: E501

        :return: The show_activiation of this UxView.  # noqa: E501
        :rtype: bool
        """
        return self._show_activiation

    @show_activiation.setter
    def show_activiation(self, show_activiation):
        """Sets the show_activiation of this UxView.

        ShowActiviation is not used.  Moved to license. Deprecated  # noqa: E501

        :param show_activiation: The show_activiation of this UxView.  # noqa: E501
        :type: bool
        """

        self._show_activiation = show_activiation

    @property
    def stages_restriction(self):
        """Gets the stages_restriction of this UxView.  # noqa: E501

        StagesRestriction defines a list of restrictions for the stage list  # noqa: E501

        :return: The stages_restriction of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._stages_restriction

    @stages_restriction.setter
    def stages_restriction(self, stages_restriction):
        """Sets the stages_restriction of this UxView.

        StagesRestriction defines a list of restrictions for the stage list  # noqa: E501

        :param stages_restriction: The stages_restriction of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._stages_restriction = stages_restriction

    @property
    def tasks_restriction(self):
        """Gets the tasks_restriction of this UxView.  # noqa: E501

        TasksRestriction defines a list of restrictions for the task list  # noqa: E501

        :return: The tasks_restriction of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._tasks_restriction

    @tasks_restriction.setter
    def tasks_restriction(self, tasks_restriction):
        """Sets the tasks_restriction of this UxView.

        TasksRestriction defines a list of restrictions for the task list  # noqa: E501

        :param tasks_restriction: The tasks_restriction of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._tasks_restriction = tasks_restriction

    @property
    def validated(self):
        """Gets the validated of this UxView.  # noqa: E501

        Validated tracks whether or not the model has been validated.  # noqa: E501

        :return: The validated of this UxView.  # noqa: E501
        :rtype: bool
        """
        return self._validated

    @validated.setter
    def validated(self, validated):
        """Sets the validated of this UxView.

        Validated tracks whether or not the model has been validated.  # noqa: E501

        :param validated: The validated of this UxView.  # noqa: E501
        :type: bool
        """

        self._validated = validated

    @property
    def workflows_restriction(self):
        """Gets the workflows_restriction of this UxView.  # noqa: E501

        WorkflowRestriction defines a list of restrictions for the workflow list  # noqa: E501

        :return: The workflows_restriction of this UxView.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflows_restriction

    @workflows_restriction.setter
    def workflows_restriction(self, workflows_restriction):
        """Sets the workflows_restriction of this UxView.

        WorkflowRestriction defines a list of restrictions for the workflow list  # noqa: E501

        :param workflows_restriction: The workflows_restriction of this UxView.  # noqa: E501
        :type: list[str]
        """

        self._workflows_restriction = workflows_restriction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UxView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UxView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UxView):
            return True

        return self.to_dict() != other.to_dict()
