# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class LicenseBundle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact': 'str',
        'contact_email': 'str',
        'contact_id': 'str',
        'endpoints': 'list[str]',
        'generation_version': 'str',
        'grantor': 'str',
        'grantor_email': 'str',
        'licenses': 'list[License]',
        'max_drp_version': 'str',
        'owner': 'str',
        'owner_email': 'str',
        'owner_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'contact': 'Contact',
        'contact_email': 'ContactEmail',
        'contact_id': 'ContactId',
        'endpoints': 'Endpoints',
        'generation_version': 'GenerationVersion',
        'grantor': 'Grantor',
        'grantor_email': 'GrantorEmail',
        'licenses': 'Licenses',
        'max_drp_version': 'MaxDrpVersion',
        'owner': 'Owner',
        'owner_email': 'OwnerEmail',
        'owner_id': 'OwnerId',
        'version': 'Version'
    }

    def __init__(self, contact=None, contact_email=None, contact_id=None, endpoints=None, generation_version=None, grantor=None, grantor_email=None, licenses=None, max_drp_version=None, owner=None, owner_email=None, owner_id=None, version=None, _configuration=None):  # noqa: E501
        """LicenseBundle - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact = None
        self._contact_email = None
        self._contact_id = None
        self._endpoints = None
        self._generation_version = None
        self._grantor = None
        self._grantor_email = None
        self._licenses = None
        self._max_drp_version = None
        self._owner = None
        self._owner_email = None
        self._owner_id = None
        self._version = None
        self.discriminator = None

        if contact is not None:
            self.contact = contact
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_id is not None:
            self.contact_id = contact_id
        if endpoints is not None:
            self.endpoints = endpoints
        if generation_version is not None:
            self.generation_version = generation_version
        if grantor is not None:
            self.grantor = grantor
        if grantor_email is not None:
            self.grantor_email = grantor_email
        if licenses is not None:
            self.licenses = licenses
        if max_drp_version is not None:
            self.max_drp_version = max_drp_version
        if owner is not None:
            self.owner = owner
        if owner_email is not None:
            self.owner_email = owner_email
        if owner_id is not None:
            self.owner_id = owner_id
        if version is not None:
            self.version = version

    @property
    def contact(self):
        """Gets the contact of this LicenseBundle.  # noqa: E501


        :return: The contact of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this LicenseBundle.


        :param contact: The contact of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def contact_email(self):
        """Gets the contact_email of this LicenseBundle.  # noqa: E501


        :return: The contact_email of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this LicenseBundle.


        :param contact_email: The contact_email of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_id(self):
        """Gets the contact_id of this LicenseBundle.  # noqa: E501


        :return: The contact_id of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this LicenseBundle.


        :param contact_id: The contact_id of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def endpoints(self):
        """Gets the endpoints of this LicenseBundle.  # noqa: E501


        :return: The endpoints of this LicenseBundle.  # noqa: E501
        :rtype: list[str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this LicenseBundle.


        :param endpoints: The endpoints of this LicenseBundle.  # noqa: E501
        :type: list[str]
        """

        self._endpoints = endpoints

    @property
    def generation_version(self):
        """Gets the generation_version of this LicenseBundle.  # noqa: E501


        :return: The generation_version of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._generation_version

    @generation_version.setter
    def generation_version(self, generation_version):
        """Sets the generation_version of this LicenseBundle.


        :param generation_version: The generation_version of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._generation_version = generation_version

    @property
    def grantor(self):
        """Gets the grantor of this LicenseBundle.  # noqa: E501


        :return: The grantor of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._grantor

    @grantor.setter
    def grantor(self, grantor):
        """Sets the grantor of this LicenseBundle.


        :param grantor: The grantor of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._grantor = grantor

    @property
    def grantor_email(self):
        """Gets the grantor_email of this LicenseBundle.  # noqa: E501


        :return: The grantor_email of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._grantor_email

    @grantor_email.setter
    def grantor_email(self, grantor_email):
        """Sets the grantor_email of this LicenseBundle.


        :param grantor_email: The grantor_email of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._grantor_email = grantor_email

    @property
    def licenses(self):
        """Gets the licenses of this LicenseBundle.  # noqa: E501


        :return: The licenses of this LicenseBundle.  # noqa: E501
        :rtype: list[License]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this LicenseBundle.


        :param licenses: The licenses of this LicenseBundle.  # noqa: E501
        :type: list[License]
        """

        self._licenses = licenses

    @property
    def max_drp_version(self):
        """Gets the max_drp_version of this LicenseBundle.  # noqa: E501

        MaxDrpVersion is the highest major/minor version to allow. For example, v4.3 would mean any v4.3.* release or previous.  # noqa: E501

        :return: The max_drp_version of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._max_drp_version

    @max_drp_version.setter
    def max_drp_version(self, max_drp_version):
        """Sets the max_drp_version of this LicenseBundle.

        MaxDrpVersion is the highest major/minor version to allow. For example, v4.3 would mean any v4.3.* release or previous.  # noqa: E501

        :param max_drp_version: The max_drp_version of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._max_drp_version = max_drp_version

    @property
    def owner(self):
        """Gets the owner of this LicenseBundle.  # noqa: E501


        :return: The owner of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this LicenseBundle.


        :param owner: The owner of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def owner_email(self):
        """Gets the owner_email of this LicenseBundle.  # noqa: E501


        :return: The owner_email of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this LicenseBundle.


        :param owner_email: The owner_email of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def owner_id(self):
        """Gets the owner_id of this LicenseBundle.  # noqa: E501


        :return: The owner_id of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this LicenseBundle.


        :param owner_id: The owner_id of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def version(self):
        """Gets the version of this LicenseBundle.  # noqa: E501


        :return: The version of this LicenseBundle.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LicenseBundle.


        :param version: The version of this LicenseBundle.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseBundle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseBundle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseBundle):
            return True

        return self.to_dict() != other.to_dict()
