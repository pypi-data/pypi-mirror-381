# coding: utf-8

"""
    DigitalRebar Provision Server

    # An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.15.0
    Contact: support@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class Template(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available': 'bool',
        'bundle': 'str',
        'contents': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'description': 'str',
        'end_delimiter': 'str',
        'endpoint': 'str',
        'errors': 'list[str]',
        'id': 'str',
        'last_modified_at': 'datetime',
        'last_modified_by': 'str',
        'meta': 'Meta',
        'read_only': 'bool',
        'start_delimiter': 'str',
        'validated': 'bool'
    }

    attribute_map = {
        'available': 'Available',
        'bundle': 'Bundle',
        'contents': 'Contents',
        'created_at': 'CreatedAt',
        'created_by': 'CreatedBy',
        'description': 'Description',
        'end_delimiter': 'EndDelimiter',
        'endpoint': 'Endpoint',
        'errors': 'Errors',
        'id': 'ID',
        'last_modified_at': 'LastModifiedAt',
        'last_modified_by': 'LastModifiedBy',
        'meta': 'Meta',
        'read_only': 'ReadOnly',
        'start_delimiter': 'StartDelimiter',
        'validated': 'Validated'
    }

    def __init__(self, available=None, bundle=None, contents=None, created_at=None, created_by=None, description=None, end_delimiter=None, endpoint=None, errors=None, id=None, last_modified_at=None, last_modified_by=None, meta=None, read_only=None, start_delimiter=None, validated=None, _configuration=None):  # noqa: E501
        """Template - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._available = None
        self._bundle = None
        self._contents = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self._end_delimiter = None
        self._endpoint = None
        self._errors = None
        self._id = None
        self._last_modified_at = None
        self._last_modified_by = None
        self._meta = None
        self._read_only = None
        self._start_delimiter = None
        self._validated = None
        self.discriminator = None

        if available is not None:
            self.available = available
        if bundle is not None:
            self.bundle = bundle
        self.contents = contents
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if end_delimiter is not None:
            self.end_delimiter = end_delimiter
        if endpoint is not None:
            self.endpoint = endpoint
        if errors is not None:
            self.errors = errors
        self.id = id
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if meta is not None:
            self.meta = meta
        if read_only is not None:
            self.read_only = read_only
        if start_delimiter is not None:
            self.start_delimiter = start_delimiter
        if validated is not None:
            self.validated = validated

    @property
    def available(self):
        """Gets the available of this Template.  # noqa: E501

        Available tracks whether or not the model passed validation.  # noqa: E501

        :return: The available of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Template.

        Available tracks whether or not the model passed validation.  # noqa: E501

        :param available: The available of this Template.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def bundle(self):
        """Gets the bundle of this Template.  # noqa: E501

        Bundle tracks the name of the store containing this object. This field is read-only, and cannot be changed via the API.  # noqa: E501

        :return: The bundle of this Template.  # noqa: E501
        :rtype: str
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """Sets the bundle of this Template.

        Bundle tracks the name of the store containing this object. This field is read-only, and cannot be changed via the API.  # noqa: E501

        :param bundle: The bundle of this Template.  # noqa: E501
        :type: str
        """

        self._bundle = bundle

    @property
    def contents(self):
        """Gets the contents of this Template.  # noqa: E501

        Contents is the raw template.  It must be a valid template according to text/template.  # noqa: E501

        :return: The contents of this Template.  # noqa: E501
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this Template.

        Contents is the raw template.  It must be a valid template according to text/template.  # noqa: E501

        :param contents: The contents of this Template.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def created_at(self):
        """Gets the created_at of this Template.  # noqa: E501

        CreatedAt is the time that this object was created.  # noqa: E501

        :return: The created_at of this Template.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Template.

        CreatedAt is the time that this object was created.  # noqa: E501

        :param created_at: The created_at of this Template.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Template.  # noqa: E501

        CreatedBy stores the value of the user that created this object. Note: This value is stored ONLY if the object was created by a user which means that `currentUserName` needs to be populated in the authBlob  # noqa: E501

        :return: The created_by of this Template.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Template.

        CreatedBy stores the value of the user that created this object. Note: This value is stored ONLY if the object was created by a user which means that `currentUserName` needs to be populated in the authBlob  # noqa: E501

        :param created_by: The created_by of this Template.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Template.  # noqa: E501

        Description is a string for providing a simple description  # noqa: E501

        :return: The description of this Template.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Template.

        Description is a string for providing a simple description  # noqa: E501

        :param description: The description of this Template.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def end_delimiter(self):
        """Gets the end_delimiter of this Template.  # noqa: E501

        EndDelimiter is an optional end delimiter.  # noqa: E501

        :return: The end_delimiter of this Template.  # noqa: E501
        :rtype: str
        """
        return self._end_delimiter

    @end_delimiter.setter
    def end_delimiter(self, end_delimiter):
        """Sets the end_delimiter of this Template.

        EndDelimiter is an optional end delimiter.  # noqa: E501

        :param end_delimiter: The end_delimiter of this Template.  # noqa: E501
        :type: str
        """

        self._end_delimiter = end_delimiter

    @property
    def endpoint(self):
        """Gets the endpoint of this Template.  # noqa: E501

        Endpoint tracks the owner of the object among DRP endpoints  # noqa: E501

        :return: The endpoint of this Template.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Template.

        Endpoint tracks the owner of the object among DRP endpoints  # noqa: E501

        :param endpoint: The endpoint of this Template.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def errors(self):
        """Gets the errors of this Template.  # noqa: E501

        If there are any errors in the validation process, they will be available here.  # noqa: E501

        :return: The errors of this Template.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Template.

        If there are any errors in the validation process, they will be available here.  # noqa: E501

        :param errors: The errors of this Template.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this Template.  # noqa: E501

        ID is a unique identifier for this template.  It cannot change once it is set.  # noqa: E501

        :return: The id of this Template.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Template.

        ID is a unique identifier for this template.  It cannot change once it is set.  # noqa: E501

        :param id: The id of this Template.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Template.  # noqa: E501

        LastModifiedAt is the time that this object was last modified.  # noqa: E501

        :return: The last_modified_at of this Template.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Template.

        LastModifiedAt is the time that this object was last modified.  # noqa: E501

        :param last_modified_at: The last_modified_at of this Template.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Template.  # noqa: E501

        LastModifiedBy stores the value of the user that last modified this object. NOTE: This value is populated ONLY if the object was modified by a user which means any actions done using machine tokens will not get tracked  # noqa: E501

        :return: The last_modified_by of this Template.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Template.

        LastModifiedBy stores the value of the user that last modified this object. NOTE: This value is populated ONLY if the object was modified by a user which means any actions done using machine tokens will not get tracked  # noqa: E501

        :param last_modified_by: The last_modified_by of this Template.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def meta(self):
        """Gets the meta of this Template.  # noqa: E501


        :return: The meta of this Template.  # noqa: E501
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Template.


        :param meta: The meta of this Template.  # noqa: E501
        :type: Meta
        """

        self._meta = meta

    @property
    def read_only(self):
        """Gets the read_only of this Template.  # noqa: E501

        ReadOnly tracks if the store for this object is read-only. This flag is informational, and cannot be changed via the API.  # noqa: E501

        :return: The read_only of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Template.

        ReadOnly tracks if the store for this object is read-only. This flag is informational, and cannot be changed via the API.  # noqa: E501

        :param read_only: The read_only of this Template.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def start_delimiter(self):
        """Gets the start_delimiter of this Template.  # noqa: E501

        StartDelimiter is an optional start delimiter.  # noqa: E501

        :return: The start_delimiter of this Template.  # noqa: E501
        :rtype: str
        """
        return self._start_delimiter

    @start_delimiter.setter
    def start_delimiter(self, start_delimiter):
        """Sets the start_delimiter of this Template.

        StartDelimiter is an optional start delimiter.  # noqa: E501

        :param start_delimiter: The start_delimiter of this Template.  # noqa: E501
        :type: str
        """

        self._start_delimiter = start_delimiter

    @property
    def validated(self):
        """Gets the validated of this Template.  # noqa: E501

        Validated tracks whether or not the model has been validated.  # noqa: E501

        :return: The validated of this Template.  # noqa: E501
        :rtype: bool
        """
        return self._validated

    @validated.setter
    def validated(self, validated):
        """Sets the validated of this Template.

        Validated tracks whether or not the model has been validated.  # noqa: E501

        :param validated: The validated of this Template.  # noqa: E501
        :type: bool
        """

        self._validated = validated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Template, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Template):
            return True

        return self.to_dict() != other.to_dict()
