from automesh import Voxels

remove = [0]
scale = [1, 1, 1]
translate = [0, 0, 0]
voxels = Voxels.from_npy("tests/input/letter_f_3d.npy", remove, scale, translate)


def line_by_line_equlity(gold_file: str, test_file: str) -> bool:
    """Opens and compares two ABAQUS files, gold and test, line by line.
    Ignores the specific automesh version that created the .inp file.
    Ignores the date and time stamp.
    """
    # with open("tests/input/letter_f_3d.inp") as gold, open(inp) as file:
    with open(gold_file) as gold, open(test_file) as file:
        # 1st line
        assert gold.readline() == file.readline()  # autotwin.automesh
        # 2nd line
        gold.readline()
        assert file.readline()[:11] == "** version "  # not check verion number
        # 3rd line
        gold.readline()
        assert file.readline()[:20] == "** autogenerated on "
        # Remaining lines
        line = file.readline()
        while line != "":
            assert gold.readline() == line
            line = file.readline()
        return True  # file successfully compared as equivalent
    return False  # some error occurred, files not compared


def test_smooth_laplace():
    fem = voxels.as_hexahedra()
    fem.smooth(method="Laplace")


def test_smooth_taubin():
    fem = voxels.as_hexahedra()
    fem.smooth(method="Taubin")


def test_write_inp():
    fem = voxels.as_hexahedra()
    inp = "target/letter_f_3d.inp"
    fem.write_inp(inp)
    gold_str = "tests/input/letter_f_3d.inp"
    assert line_by_line_equlity(gold_file=gold_str, test_file=inp)


def test_write_exo():
    fem = voxels.as_hexahedra()
    fem.write_exo("target/letter_f_3d.exo")


def test_write_inp_sparse():
    voxels = Voxels.from_spn(
        "tests/input/sparse.spn", [5, 5, 5], remove, scale, translate
    )  # local redefinition for this test
    fem = voxels.as_hexahedra()
    inp = "target/sparse.inp"
    fem.write_inp(inp)
    gold_str = "tests/input/sparse.inp"
    assert line_by_line_equlity(gold_file=gold_str, test_file=inp)


def test_write_mesh():
    fem = voxels.as_hexahedra()
    fem.write_mesh("target/letter_f_3d.mesh")


def test_write_metrics():
    fem = voxels.as_hexahedra()
    fem.write_metrics("target/letter_f_3d.csv")


def test_write_vtk():
    fem = voxels.as_hexahedra()
    fem.write_vtk("target/letter_f_3d.vtk")
