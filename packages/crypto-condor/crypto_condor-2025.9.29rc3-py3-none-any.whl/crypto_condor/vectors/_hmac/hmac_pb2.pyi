"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class HmacTest(google.protobuf.message.Message):
    """A single HMAC test vector."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    FLAGS_FIELD_NUMBER: builtins.int
    KEY_FIELD_NUMBER: builtins.int
    MSG_FIELD_NUMBER: builtins.int
    MAC_FIELD_NUMBER: builtins.int
    id: builtins.int
    """The test ID, unique in its set of vectors."""
    type: builtins.str
    """The type of test. One of: valid, invalid, acceptable."""
    comment: builtins.str
    """A comment on the test."""
    key: builtins.bytes
    """The symmetric key."""
    msg: builtins.bytes
    """The message to authenticate."""
    mac: builtins.bytes
    """The resulting MAC."""
    @property
    def flags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Flags that categorize this test."""

    def __init__(
        self,
        *,
        id: builtins.int = ...,
        type: builtins.str = ...,
        comment: builtins.str = ...,
        flags: collections.abc.Iterable[builtins.str] | None = ...,
        key: builtins.bytes = ...,
        msg: builtins.bytes = ...,
        mac: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "flags", b"flags", "id", b"id", "key", b"key", "mac", b"mac", "msg", b"msg", "type", b"type"]) -> None: ...

global___HmacTest = HmacTest

@typing.final
class HmacVectors(google.protobuf.message.Message):
    """A set of HMAC test vectors."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NotesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    SOURCE_FIELD_NUMBER: builtins.int
    SOURCE_DESC_FIELD_NUMBER: builtins.int
    SOURCE_URL_FIELD_NUMBER: builtins.int
    COMPLIANCE_FIELD_NUMBER: builtins.int
    NOTES_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    HASH_FIELD_NUMBER: builtins.int
    source: builtins.str
    """The source of the test vectors."""
    source_desc: builtins.str
    """Description of the source."""
    source_url: builtins.str
    """The URL of the source."""
    compliance: builtins.bool
    """Whether these are compliance test vectors or not."""
    hash: builtins.str
    """The hash function used."""
    @property
    def notes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """A dictionary of test flags and their description."""

    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___HmacTest]:
        """The test vectors."""

    def __init__(
        self,
        *,
        source: builtins.str = ...,
        source_desc: builtins.str = ...,
        source_url: builtins.str = ...,
        compliance: builtins.bool = ...,
        notes: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        tests: collections.abc.Iterable[global___HmacTest] | None = ...,
        hash: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["compliance", b"compliance", "hash", b"hash", "notes", b"notes", "source", b"source", "source_desc", b"source_desc", "source_url", b"source_url", "tests", b"tests"]) -> None: ...

global___HmacVectors = HmacVectors
