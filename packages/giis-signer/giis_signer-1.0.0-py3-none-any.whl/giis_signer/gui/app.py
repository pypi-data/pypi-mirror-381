"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è XML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import customtkinter as ctk
from tkinter import filedialog, messagebox
import os
import sys
import re
import logging
from pathlib import Path
from typing import Optional
from datetime import datetime

from giis_signer.cryptopro_signer import CryptoProSigner, CryptoProException
from giis_signer.xml_signer import XMLSigner, XMLSignerException
from giis_signer.gui.certificate_manager import CertificateManager, CertificateInfo
from giis_signer.gui.certificate_dialog import CertificateDialog
from giis_signer.gui.config import Config
from giis_signer.gui.toast import ToastManager


def get_log_file_path():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AppData\Local\GIIS-Signer –¥–ª—è –ª–æ–≥–æ–≤
    app_data = Path(os.getenv('LOCALAPPDATA', os.path.expanduser('~')))
    log_dir = app_data / 'GIIS-Signer' / 'logs'

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_dir.mkdir(parents=True, exist_ok=True)

    log_file = log_dir / f"giis-signer-gui_{datetime.now().strftime('%Y%m%d')}.log"
    return log_file


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–∞–ø–∫—É"""
    log_file = get_log_file_path()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

    logger = logging.getLogger(__name__)
    logger.info("="*60)
    logger.info("GIIS Signer GUI –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"–í–µ—Ä—Å–∏—è Python: {sys.version}")
    logger.info(f"–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {sys.executable}")
    logger.info(f"–õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
    logger.info("="*60)

    return logger


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
logger = setup_logging()


class GIISSignerApp(ctk.CTk):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è GIIS Signer
    """

    def __init__(self):
        super().__init__()

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.config = Config()
        logger.info("Config –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        self.certificate_manager = CertificateManager()
        logger.info("Certificate –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        self.selected_certificate: Optional[CertificateInfo] = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.title("GIIS D–ú–î–ö XML Signer")
        self.geometry("1000x700")
        logger.info("–û–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è toast-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞)
        self.toast = ToastManager(self)
        logger.info("Toast –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞ –µ—Å–ª–∏ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        saved_geometry = self.config.get_window_geometry()
        if saved_geometry:
            try:
                self.geometry(saved_geometry)
            except:
                pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
        ctk.set_appearance_mode(self.config.get_theme())

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._create_widgets()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        self._load_last_certificate()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.protocol("WM_DELETE_WINDOW", self._on_closing)

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        # === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
        header_frame = ctk.CTkFrame(self, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))

        title_label = ctk.CTkLabel(
            header_frame,
            text="GIIS D–ú–î–ö XML Signer",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(side="left")

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–æ–≥–∞
        log_button = ctk.CTkButton(
            header_frame,
            text="üìã –û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥",
            command=self._open_log,
            width=120
        )
        log_button.pack(side="right", padx=5)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã
        theme_button = ctk.CTkButton(
            header_frame,
            text="üåì –¢–µ–º–∞",
            command=self._toggle_theme,
            width=80
        )
        theme_button.pack(side="right", padx=5)

        # === –§—Ä–µ–π–º –≤—ã–±–æ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ===
        cert_frame = ctk.CTkFrame(self)
        cert_frame.pack(fill="x", padx=20, pady=10)

        cert_label = ctk.CTkLabel(
            cert_frame,
            text="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        cert_label.pack(side="left", padx=10, pady=10)

        self.cert_display_label = ctk.CTkLabel(
            cert_frame,
            text="–ù–µ –≤—ã–±—Ä–∞–Ω",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        self.cert_display_label.pack(side="left", padx=10, pady=10, fill="x", expand=True)

        select_cert_button = ctk.CTkButton(
            cert_frame,
            text="–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
            command=self._select_certificate,
            width=180
        )
        select_cert_button.pack(side="right", padx=10, pady=10)

        # === –ì–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å ===
        work_frame = ctk.CTkFrame(self)
        work_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—Ö–æ–¥–Ω–æ–π XML
        left_panel = ctk.CTkFrame(work_frame)
        left_panel.pack(side="left", fill="both", expand=True, padx=(0, 5))

        input_header = ctk.CTkFrame(left_panel, fg_color="transparent")
        input_header.pack(fill="x", padx=10, pady=10)

        input_label = ctk.CTkLabel(
            input_header,
            text="–í—Ö–æ–¥–Ω–æ–π XML:",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        input_label.pack(side="left")

        input_import_button = ctk.CTkButton(
            input_header,
            text="üìÇ –ò–º–ø–æ—Ä—Ç",
            command=self._import_file,
            width=100
        )
        input_import_button.pack(side="right", padx=2)

        input_clear_button = ctk.CTkButton(
            input_header,
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å",
            command=self._clear_input,
            width=100,
            fg_color="gray",
            hover_color="darkgray"
        )
        input_clear_button.pack(side="right", padx=2)

        # –ü–æ–ª–µ –¥–ª—è element_id
        element_id_frame = ctk.CTkFrame(left_panel, fg_color="transparent")
        element_id_frame.pack(fill="x", padx=10, pady=(0, 10))

        element_id_label = ctk.CTkLabel(
            element_id_frame,
            text="Element ID –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è:",
            font=ctk.CTkFont(size=12)
        )
        element_id_label.pack(side="left", padx=(0, 10))

        self.element_id_entry = ctk.CTkEntry(
            element_id_frame,
            placeholder_text="–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ XML (–Ω–∞–ø—Ä–∏–º–µ—Ä: body)"
        )
        self.element_id_entry.pack(side="left", fill="x", expand=True, padx=(0, 5))

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è element_id
        self.refresh_element_id_button = ctk.CTkButton(
            element_id_frame,
            text="üîÑ",
            command=self._refresh_element_id,
            width=30,
            state="disabled",
            fg_color="gray",
            hover_color="darkgray"
        )
        self.refresh_element_id_button.pack(side="left")

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è element_id –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
        self.element_id_entry.bind("<KeyRelease>", self._on_element_id_changed)

        self.input_textbox = ctk.CTkTextbox(left_panel, wrap="none")
        self.input_textbox.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è element_id
        self.input_textbox.bind("<<Modified>>", self._on_input_text_changed)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã—Ö–æ–¥–Ω–æ–π XML
        right_panel = ctk.CTkFrame(work_frame)
        right_panel.pack(side="right", fill="both", expand=True, padx=(5, 0))

        output_header = ctk.CTkFrame(right_panel, fg_color="transparent")
        output_header.pack(fill="x", padx=10, pady=10)

        output_label = ctk.CTkLabel(
            output_header,
            text="–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π XML:",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        output_label.pack(side="left")

        output_export_button = ctk.CTkButton(
            output_header,
            text="üíæ –≠–∫—Å–ø–æ—Ä—Ç",
            command=self._export_file,
            width=100
        )
        output_export_button.pack(side="right", padx=2)

        output_copy_button = ctk.CTkButton(
            output_header,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            command=self._copy_output,
            width=100
        )
        output_copy_button.pack(side="right", padx=2)

        output_clear_button = ctk.CTkButton(
            output_header,
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å",
            command=self._clear_output,
            width=100,
            fg_color="gray",
            hover_color="darkgray"
        )
        output_clear_button.pack(side="right", padx=2)

        self.output_textbox = ctk.CTkTextbox(right_panel, wrap="none")
        self.output_textbox.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # === –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π ===
        action_frame = ctk.CTkFrame(self, fg_color="transparent")
        action_frame.pack(fill="x", padx=20, pady=(10, 20))

        clear_all_button = ctk.CTkButton(
            action_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë",
            command=self._clear_all,
            width=150,
            fg_color="gray",
            hover_color="darkgray"
        )
        clear_all_button.pack(side="left", padx=5)

        sign_button = ctk.CTkButton(
            action_frame,
            text="‚úç –ü–æ–¥–ø–∏—Å–∞—Ç—å",
            command=self._sign_xml,
            width=200,
            height=40,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="green",
            hover_color="darkgreen"
        )
        sign_button.pack(side="right", padx=5)

    def _select_certificate(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        dialog = CertificateDialog(self, self.certificate_manager)
        self.wait_window(dialog)

        selected = dialog.get_selected_certificate()
        if selected:
            self.selected_certificate = selected
            self.cert_display_label.configure(
                text=selected.get_display_name(),
                text_color="green"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
            self.config.set_last_certificate_thumbprint(selected.thumbprint)

    def _load_last_certificate(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
        thumbprint = self.config.get_last_certificate_thumbprint()
        if thumbprint:
            cert = self.certificate_manager.find_certificate_by_thumbprint(thumbprint)
            if cert:
                self.selected_certificate = cert
                self.cert_display_label.configure(
                    text=cert.get_display_name(),
                    text_color="green"
                )

    def _extract_element_id(self, xml_content: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç element_id –∏–∑ XML –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É <ns:RequestData id="...">

        Args:
            xml_content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ XML

        Returns:
            element_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ id –≤ RequestData –∏–ª–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        # –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤–∏–¥–∞ id="–∑–Ω–∞—á–µ–Ω–∏–µ"
        pattern = r'<[^>]*:RequestData[^>]+id\s*=\s*["\']([^"\']+)["\']'
        match = re.search(pattern, xml_content)

        if match:
            return match.group(1)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ RequestData, –∏—â–µ–º –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å id
        pattern_generic = r'id\s*=\s*["\']([^"\']+)["\']'
        match = re.search(pattern_generic, xml_content)

        if match:
            return match.group(1)

        return None

    def _on_element_id_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è element_id –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –∏ –∏–∑ XML
        current_value = self.element_id_entry.get().strip()
        content = self.input_textbox.get("1.0", "end-1c").strip()

        if content:
            xml_value = self._extract_element_id(content)

            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å XML - –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            if current_value == xml_value:
                self.refresh_element_id_button.configure(
                    state="disabled",
                    fg_color="gray",
                    hover_color="darkgray"
                )
            else:
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è - –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                self.refresh_element_id_button.configure(
                    state="normal",
                    fg_color="green",
                    hover_color="darkgreen"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç XML - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            self.refresh_element_id_button.configure(
                state="disabled",
                fg_color="gray",
                hover_color="darkgray"
            )

    def _refresh_element_id(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ element_id –∏–∑ XML"""
        content = self.input_textbox.get("1.0", "end-1c").strip()

        if content:
            element_id = self._extract_element_id(content)
            if element_id:
                self.element_id_entry.delete(0, "end")
                self.element_id_entry.insert(0, element_id)

                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.refresh_element_id_button.configure(
                    state="disabled",
                    fg_color="gray",
                    hover_color="darkgray"
                )

                self.toast.success(f"Element ID –æ–±–Ω–æ–≤–ª–µ–Ω: {element_id}")
            else:
                self.toast.warning("Element ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ XML")
        else:
            self.toast.warning("–í–≤–µ–¥–∏—Ç–µ XML –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Element ID")

    def _on_input_text_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è element_id"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ Modified –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
        self.input_textbox.edit_modified(False)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        content = self.input_textbox.get("1.0", "end-1c").strip()

        # –ï—Å–ª–∏ –ø–æ–ª–µ element_id –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        if content and not self.element_id_entry.get():
            element_id = self._extract_element_id(content)
            if element_id:
                self.element_id_entry.delete(0, "end")
                self.element_id_entry.insert(0, element_id)

                # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
                self.refresh_element_id_button.configure(
                    state="disabled",
                    fg_color="gray",
                    hover_color="darkgray"
                )

    def _import_file(self):
        """–ò–º–ø–æ—Ä—Ç XML —Ñ–∞–π–ª–∞"""
        last_dir = self.config.get_last_input_dir()
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ XML —Ñ–∞–π–ª",
            initialdir=last_dir,
            filetypes=[("XML files", "*.xml"), ("All files", "*.*")]
        )

        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                    self.input_textbox.delete("1.0", "end")
                    self.input_textbox.insert("1.0", content)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                self.config.set_last_input_dir(os.path.dirname(filename))

                # –ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª—è–µ–º element_id
                element_id = self._extract_element_id(content)
                if element_id:
                    self.element_id_entry.delete(0, "end")
                    self.element_id_entry.insert(0, element_id)

                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
                    self.refresh_element_id_button.configure(
                        state="disabled",
                        fg_color="gray",
                        hover_color="darkgray"
                    )

                # Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
                filename_short = os.path.basename(filename)
                self.toast.success(f"–§–∞–π–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {filename_short}")

            except Exception as e:
                self.toast.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def _export_file(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ XML"""
        content = self.output_textbox.get("1.0", "end-1c")

        if not content.strip():
            self.toast.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        last_dir = self.config.get_last_output_dir()
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π XML",
            initialdir=last_dir,
            defaultextension=".xml",
            filetypes=[("XML files", "*.xml"), ("All files", "*.*")]
        )

        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                self.config.set_last_output_dir(os.path.dirname(filename))

                filename_short = os.path.basename(filename)
                self.toast.success(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename_short}")

            except Exception as e:
                self.toast.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def _copy_output(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        content = self.output_textbox.get("1.0", "end-1c")

        if not content.strip():
            self.toast.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        self.clipboard_clear()
        self.clipboard_append(content)
        self.toast.success("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")

    def _clear_input(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ"""
        self.input_textbox.delete("1.0", "end")
        self.element_id_entry.delete(0, "end")

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
        self.refresh_element_id_button.configure(
            state="disabled",
            fg_color="gray",
            hover_color="darkgray"
        )

    def _clear_output(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ"""
        self.output_textbox.delete("1.0", "end")

    def _clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –æ–±–∞ –ø–æ–ª—è"""
        self._clear_input()
        self._clear_output()

    def _sign_xml(self):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å XML –¥–æ–∫—É–º–µ–Ω—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        if not self.selected_certificate:
            self.toast.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π XML
        input_xml = self.input_textbox.get("1.0", "end-1c").strip()

        if not input_xml:
            self.toast.warning("–í–≤–µ–¥–∏—Ç–µ XML –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º element_id (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ "body")
        element_id = self.element_id_entry.get().strip()

        if not element_id:
            # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            element_id = self._extract_element_id(input_xml)
            if element_id:
                self.element_id_entry.delete(0, "end")
                self.element_id_entry.insert(0, element_id)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                element_id = "body"
                self.toast.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Element ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '{element_id}'")

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞
            signer = CryptoProSigner(thumbprint=self.selected_certificate.thumbprint)
            signer.find_certificate()

            # –°–æ–∑–¥–∞–µ–º XML –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞
            xml_signer = XMLSigner(signer)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
            signed_xml = xml_signer.sign_soap_request(
                input_xml,
                element_id=element_id,
                signature_element_name="CallerSignature"
            )

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.output_textbox.delete("1.0", "end")
            self.output_textbox.insert("1.0", signed_xml)

            self.toast.success(f"XML —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω! Element ID: {element_id}")

        except (CryptoProException, XMLSignerException) as e:
            self.toast.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {str(e)}", duration=5000)
        except Exception as e:
            self.toast.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", duration=5000)

    def _open_log(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞ –≤ –±–ª–æ–∫–Ω–æ—Ç–µ"""
        try:
            log_file = get_log_file_path()
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞: {log_file}")

            if not log_file.exists():
                self.toast.warning("–õ–æ–≥-—Ñ–∞–π–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –≤ –±–ª–æ–∫–Ω–æ—Ç–µ
            os.startfile(str(log_file))
            self.toast.info("–õ–æ–≥-—Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}", exc_info=True)
            self.toast.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–≥: {str(e)}")

    def _toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        current = ctk.get_appearance_mode()
        new_theme = "Light" if current == "Dark" else "Dark"
        ctk.set_appearance_mode(new_theme)
        self.config.set_theme(new_theme.lower())

    def _on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
        self.config.set_window_geometry(self.geometry())
        self.destroy()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = GIISSignerApp()
    app.mainloop()


if __name__ == "__main__":
    main()
