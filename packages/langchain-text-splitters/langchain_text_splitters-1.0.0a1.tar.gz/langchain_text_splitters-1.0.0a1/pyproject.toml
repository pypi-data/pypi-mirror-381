[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
authors = []
requires-python = ">=3.10.0,<4.0.0"
dependencies = [
    "langchain-core>=1.0.0a6,<2.0.0",
]
name = "langchain-text-splitters"
version = "1.0.0a1"
description = "LangChain text splitting utilities"
readme = "README.md"

[project.license]
text = "MIT"

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain/tree/master/libs/text-splitters"
"Release Notes" = "https://github.com/langchain-ai/langchain/releases?q=tag%3A%22langchain-text-splitters%3D%3D0%22&expanded=true"
repository = "https://github.com/langchain-ai/langchain"

[dependency-groups]
lint = [
    "ruff>=0.13.1,<0.14.0",
    "langchain-core",
]
typing = [
    "mypy>=1.18.1,<1.19.0",
    "lxml-stubs>=0.5.1,<1.0.0",
    "types-requests>=2.31.0.20240218,<3.0.0.0",
    "tiktoken>=0.8.0,<1.0.0",
    "beautifulsoup4>=4.13.5,<5.0.0",
]
dev = [
    "jupyter<2.0.0,>=1.0.0",
    "langchain-core",
]
test = [
    "pytest>=8.0.0,<9.0.0",
    "freezegun>=1.2.2,<2.0.0",
    "pytest-mock>=3.10.0,<4.0.0",
    "pytest-watcher>=0.3.4,<1.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "pytest-socket>=0.7.0,<1.0.0",
    "pytest-xdist<4.0.0,>=3.6.1",
    "langchain-core",
]
test_integration = [
    "spacy>=3.8.7,<4.0.0",
    "thinc>=8.3.6,<9.0.0",
    "nltk>=3.9.1,<4.0.0",
    "transformers>=4.51.3,<5.0.0",
    "sentence-transformers>=3.0.1,<4.0.0",
    "scipy>=1.7.0,<2.0.0; python_version >= \"3.12\" and python_version < \"3.13\"",
    "scipy>=1.14.1,<2.0.0; python_version >= \"3.13\"",
    "tiktoken>=0.8.0,<1.0.0",
    "en-core-web-sm",
]

[tool.uv.sources.langchain-core]
path = "../core"
editable = true

[tool.uv.sources.en-core-web-sm]
url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl"

[tool.mypy]
plugins = [
    "pydantic.mypy",
]
strict = true
enable_error_code = "deprecated"
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "konlpy",
    "nltk",
]
ignore_missing_imports = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "ANN401",
    "C90",
    "C901",
    "COM812",
    "FIX002",
    "ISC001",
    "PERF203",
    "PLR2004",
    "PLR0915",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "RUF012",
    "S112",
    "TC001",
    "TC002",
    "TC003",
    "TD002",
    "TD003",
]
unfixable = [
    "B028",
    "PLW1510",
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "langchain_core.load.serializable.Serializable",
    "langchain_core.runnables.base.RunnableSerializable",
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "langchain_core.utils.pydantic.pre_init",
    "pydantic.field_validator",
    "pydantic.v1.root_validator",
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-var-parameters = true

[tool.ruff.lint.per-file-ignores]
"scripts/**" = [
    "D1",
    "INP001",
    "S311",
]
"tests/**" = [
    "D1",
    "PLR2004",
    "S101",
    "S311",
    "SLF001",
]

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5"
markers = [
    "requires: mark tests as requiring a specific library",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
