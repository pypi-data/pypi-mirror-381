# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from goodmem_client.models.memory_chunk_response import MemoryChunkResponse
from typing import Optional, Set
from typing_extensions import Self

class ChunkReference(BaseModel):
    """
    Reference to a memory chunk with pointer to its parent memory
    """ # noqa: E501
    result_set_id: StrictStr = Field(description="Result set ID that produced this chunk", alias="resultSetId")
    chunk: MemoryChunkResponse
    memory_index: StrictInt = Field(description="Index of the chunk's memory in the client's memories array", alias="memoryIndex")
    relevance_score: Union[StrictFloat, StrictInt] = Field(description="Relevance score for this chunk (0.0 to 1.0)", alias="relevanceScore")
    __properties: ClassVar[List[str]] = ["resultSetId", "chunk", "memoryIndex", "relevanceScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChunkReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chunk
        if self.chunk:
            _dict['chunk'] = self.chunk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChunkReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resultSetId": obj.get("resultSetId"),
            "chunk": MemoryChunkResponse.from_dict(obj["chunk"]) if obj.get("chunk") is not None else None,
            "memoryIndex": obj.get("memoryIndex"),
            "relevanceScore": obj.get("relevanceScore")
        })
        return _obj


