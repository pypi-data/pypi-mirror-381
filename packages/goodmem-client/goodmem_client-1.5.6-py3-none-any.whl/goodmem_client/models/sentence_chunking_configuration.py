# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from goodmem_client.models.length_measurement import LengthMeasurement
from typing import Optional, Set
from typing_extensions import Self

class SentenceChunkingConfiguration(BaseModel):
    """
    Sentence-based chunking strategy with language detection support
    """ # noqa: E501
    max_chunk_size: StrictInt = Field(description="Maximum size of a chunk", alias="maxChunkSize")
    min_chunk_size: StrictInt = Field(description="Minimum size before creating a new chunk", alias="minChunkSize")
    enable_language_detection: Optional[StrictBool] = Field(default=None, description="Whether to detect language for better segmentation", alias="enableLanguageDetection")
    length_measurement: LengthMeasurement = Field(alias="lengthMeasurement")
    __properties: ClassVar[List[str]] = ["maxChunkSize", "minChunkSize", "enableLanguageDetection", "lengthMeasurement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SentenceChunkingConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if enable_language_detection (nullable) is None
        # and model_fields_set contains the field
        if self.enable_language_detection is None and "enable_language_detection" in self.model_fields_set:
            _dict['enableLanguageDetection'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SentenceChunkingConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxChunkSize": obj.get("maxChunkSize"),
            "minChunkSize": obj.get("minChunkSize"),
            "enableLanguageDetection": obj.get("enableLanguageDetection"),
            "lengthMeasurement": obj.get("lengthMeasurement")
        })
        return _obj


