# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goodmem_client.models.chunking_configuration import ChunkingConfiguration

class TestChunkingConfiguration(unittest.TestCase):
    """ChunkingConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChunkingConfiguration:
        """Test ChunkingConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChunkingConfiguration`
        """
        model = ChunkingConfiguration()
        if include_optional:
            return ChunkingConfiguration(
                var_none = goodmem_client.models.no_chunking_configuration.NoChunkingConfiguration(),
                recursive = goodmem_client.models.recursive_chunking_configuration.RecursiveChunkingConfiguration(
                    chunk_size = 1000, 
                    chunk_overlap = 200, 
                    separators = ["\n\n", "\n", ".", " "], 
                    keep_strategy = 'KEEP_NONE', 
                    separator_is_regex = False, 
                    length_measurement = 'CHARACTER_COUNT', ),
                sentence = goodmem_client.models.sentence_chunking_configuration.SentenceChunkingConfiguration(
                    max_chunk_size = 1000, 
                    min_chunk_size = 100, 
                    enable_language_detection = True, 
                    length_measurement = 'CHARACTER_COUNT', )
            )
        else:
            return ChunkingConfiguration(
        )
        """

    def testChunkingConfiguration(self):
        """Test ChunkingConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
