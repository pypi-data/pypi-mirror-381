# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goodmem_client.models.list_rerankers_response import ListRerankersResponse

class TestListRerankersResponse(unittest.TestCase):
    """ListRerankersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListRerankersResponse:
        """Test ListRerankersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListRerankersResponse`
        """
        model = ListRerankersResponse()
        if include_optional:
            return ListRerankersResponse(
                rerankers = [
                    goodmem_client.models.reranker_response.RerankerResponse(
                        reranker_id = '550e8400-e29b-41d4-a716-446655440000', 
                        display_name = 'BGE Cross-Encoder Reranker', 
                        description = 'BAAI BGE reranker for cross-encoder semantic ranking', 
                        provider_type = 'OPENAI', 
                        endpoint_url = 'http://bge.reranker.goodmem.ai:8010', 
                        api_path = '/rerank', 
                        model_identifier = 'BAAI/bge-reranker-base', 
                        supported_modalities = [
                            'TEXT'
                            ], 
                        labels = {"environment": "production", "team": "search"}, 
                        version = '1.0.0', 
                        monitoring_endpoint = 'https://monitoring.example.com/rerankers/status', 
                        owner_id = '550e8400-e29b-41d4-a716-446655440000', 
                        created_at = 1617293472000, 
                        updated_at = 1617293472000, 
                        created_by_id = '550e8400-e29b-41d4-a716-446655440000', 
                        updated_by_id = '550e8400-e29b-41d4-a716-446655440000', )
                    ]
            )
        else:
            return ListRerankersResponse(
                rerankers = [
                    goodmem_client.models.reranker_response.RerankerResponse(
                        reranker_id = '550e8400-e29b-41d4-a716-446655440000', 
                        display_name = 'BGE Cross-Encoder Reranker', 
                        description = 'BAAI BGE reranker for cross-encoder semantic ranking', 
                        provider_type = 'OPENAI', 
                        endpoint_url = 'http://bge.reranker.goodmem.ai:8010', 
                        api_path = '/rerank', 
                        model_identifier = 'BAAI/bge-reranker-base', 
                        supported_modalities = [
                            'TEXT'
                            ], 
                        labels = {"environment": "production", "team": "search"}, 
                        version = '1.0.0', 
                        monitoring_endpoint = 'https://monitoring.example.com/rerankers/status', 
                        owner_id = '550e8400-e29b-41d4-a716-446655440000', 
                        created_at = 1617293472000, 
                        updated_at = 1617293472000, 
                        created_by_id = '550e8400-e29b-41d4-a716-446655440000', 
                        updated_by_id = '550e8400-e29b-41d4-a716-446655440000', )
                    ],
        )
        """

    def testListRerankersResponse(self):
        """Test ListRerankersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
