# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goodmem_client.models.embedder_creation_request import EmbedderCreationRequest

class TestEmbedderCreationRequest(unittest.TestCase):
    """EmbedderCreationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EmbedderCreationRequest:
        """Test EmbedderCreationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EmbedderCreationRequest`
        """
        model = EmbedderCreationRequest()
        if include_optional:
            return EmbedderCreationRequest(
                validate = None,
                display_name = 'OpenAI Ada-2',
                description = 'OpenAI's text embedding model with 1536 dimensions',
                provider_type = 'OPENAI',
                endpoint_url = 'https://api.openai.com/v1',
                api_path = '/embeddings',
                model_identifier = 'text-embedding-3-small',
                dimensionality = 1536,
                max_sequence_length = 8192,
                supported_modalities = ["TEXT", "IMAGE"],
                credentials = 'sk-1234567890abcdef',
                labels = {"environment": "production", "team": "nlp"},
                version = '1.0.0',
                monitoring_endpoint = 'https://monitoring.example.com/embedders/status',
                owner_id = '550e8400-e29b-41d4-a716-446655440000'
            )
        else:
            return EmbedderCreationRequest(
                display_name = 'OpenAI Ada-2',
                provider_type = 'OPENAI',
                endpoint_url = 'https://api.openai.com/v1',
                model_identifier = 'text-embedding-3-small',
                dimensionality = 1536,
                credentials = 'sk-1234567890abcdef',
        )
        """

    def testEmbedderCreationRequest(self):
        """Test EmbedderCreationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
