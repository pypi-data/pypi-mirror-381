# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goodmem_client.models.list_spaces_response import ListSpacesResponse

class TestListSpacesResponse(unittest.TestCase):
    """ListSpacesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListSpacesResponse:
        """Test ListSpacesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListSpacesResponse`
        """
        model = ListSpacesResponse()
        if include_optional:
            return ListSpacesResponse(
                spaces = [
                    goodmem_client.models.space.Space(
                        space_id = '550e8400-e29b-41d4-a716-446655440000', 
                        name = 'Research Project Space', 
                        labels = {"project": "AI Research", "team": "NLP Group"}, 
                        embedder_id = '550e8400-e29b-41d4-a716-446655440000', 
                        created_at = 1651483320000, 
                        updated_at = 1651483320000, 
                        owner_id = '550e8400-e29b-41d4-a716-446655440000', 
                        created_by_id = '550e8400-e29b-41d4-a716-446655440000', 
                        updated_by_id = '550e8400-e29b-41d4-a716-446655440000', 
                        public_read = False, )
                    ],
                next_token = 'eyJzdGFydCI6MjAsIm93bmVySWQiOiJiMzMwM2QwYS0...'
            )
        else:
            return ListSpacesResponse(
        )
        """

    def testListSpacesResponse(self):
        """Test ListSpacesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
