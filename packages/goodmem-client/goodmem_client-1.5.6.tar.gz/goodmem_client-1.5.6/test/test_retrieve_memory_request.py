# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goodmem_client.models.retrieve_memory_request import RetrieveMemoryRequest

class TestRetrieveMemoryRequest(unittest.TestCase):
    """RetrieveMemoryRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RetrieveMemoryRequest:
        """Test RetrieveMemoryRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RetrieveMemoryRequest`
        """
        model = RetrieveMemoryRequest()
        if include_optional:
            return RetrieveMemoryRequest(
                message = 'How do I implement vector search?',
                context = [{"text":"Focus on implementation details"},{"binary":{"contentType":"image/png","data":"base64data..."}}],
                space_keys = [{"spaceId":"550e8400-e29b-41d4-a716-446655440000","embedderWeights":[{"embedderId":"550e8400-e29b-41d4-a716-446655440001","weight":1.5}]}],
                requested_size = 10,
                fetch_memory = True,
                fetch_memory_content = False,
                post_processor = goodmem_client.models.post_processor.PostProcessor(
                    name = 'ChatPostProcessor', 
                    config = {"model":"gpt-4","temperature":0.7,"maxTokens":1000}, )
            )
        else:
            return RetrieveMemoryRequest(
                message = 'How do I implement vector search?',
                space_keys = [{"spaceId":"550e8400-e29b-41d4-a716-446655440000","embedderWeights":[{"embedderId":"550e8400-e29b-41d4-a716-446655440001","weight":1.5}]}],
        )
        """

    def testRetrieveMemoryRequest(self):
        """Test RetrieveMemoryRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
