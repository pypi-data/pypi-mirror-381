# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MemoryChunkResponse(BaseModel):
    """
    Memory chunk information
    """ # noqa: E501
    chunk_id: StrictStr = Field(description="Unique identifier of the memory chunk", alias="chunkId")
    memory_id: StrictStr = Field(description="ID of the memory this chunk belongs to", alias="memoryId")
    chunk_sequence_number: StrictInt = Field(description="Sequence number of this chunk within the memory", alias="chunkSequenceNumber")
    chunk_text: StrictStr = Field(description="The text content of this chunk", alias="chunkText")
    vector_status: StrictStr = Field(description="Status of vector processing for this chunk", alias="vectorStatus")
    start_offset: Optional[StrictInt] = Field(default=None, description="Start offset of this chunk in the original content", alias="startOffset")
    end_offset: Optional[StrictInt] = Field(default=None, description="End offset of this chunk in the original content", alias="endOffset")
    created_at: StrictInt = Field(description="Creation timestamp (milliseconds since epoch)", alias="createdAt")
    updated_at: StrictInt = Field(description="Last update timestamp (milliseconds since epoch)", alias="updatedAt")
    created_by_id: StrictStr = Field(description="ID of the user who created the chunk", alias="createdById")
    updated_by_id: StrictStr = Field(description="ID of the user who last updated the chunk", alias="updatedById")
    __properties: ClassVar[List[str]] = ["chunkId", "memoryId", "chunkSequenceNumber", "chunkText", "vectorStatus", "startOffset", "endOffset", "createdAt", "updatedAt", "createdById", "updatedById"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MemoryChunkResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_offset (nullable) is None
        # and model_fields_set contains the field
        if self.start_offset is None and "start_offset" in self.model_fields_set:
            _dict['startOffset'] = None

        # set to None if end_offset (nullable) is None
        # and model_fields_set contains the field
        if self.end_offset is None and "end_offset" in self.model_fields_set:
            _dict['endOffset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MemoryChunkResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chunkId": obj.get("chunkId"),
            "memoryId": obj.get("memoryId"),
            "chunkSequenceNumber": obj.get("chunkSequenceNumber"),
            "chunkText": obj.get("chunkText"),
            "vectorStatus": obj.get("vectorStatus"),
            "startOffset": obj.get("startOffset"),
            "endOffset": obj.get("endOffset"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "createdById": obj.get("createdById"),
            "updatedById": obj.get("updatedById")
        })
        return _obj


