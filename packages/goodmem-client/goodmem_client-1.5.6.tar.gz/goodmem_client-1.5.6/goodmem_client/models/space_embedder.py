# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class SpaceEmbedder(BaseModel):
    """
    Associates an embedder with a space, including retrieval configuration.
    """ # noqa: E501
    space_id: StrictStr = Field(description="The unique identifier for the space.", alias="spaceId")
    embedder_id: StrictStr = Field(description="The unique identifier for the embedder.", alias="embedderId")
    default_retrieval_weight: Union[StrictFloat, StrictInt] = Field(description="The default weight for this embedder during retrieval operations.", alias="defaultRetrievalWeight")
    created_at: StrictInt = Field(description="Timestamp when this association was created (milliseconds since epoch).", alias="createdAt")
    updated_at: StrictInt = Field(description="Timestamp when this association was last updated (milliseconds since epoch).", alias="updatedAt")
    created_by_id: StrictStr = Field(description="The ID of the user who created this association.", alias="createdById")
    updated_by_id: StrictStr = Field(description="The ID of the user who last updated this association.", alias="updatedById")
    __properties: ClassVar[List[str]] = ["spaceId", "embedderId", "defaultRetrievalWeight", "createdAt", "updatedAt", "createdById", "updatedById"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpaceEmbedder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpaceEmbedder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spaceId": obj.get("spaceId"),
            "embedderId": obj.get("embedderId"),
            "defaultRetrievalWeight": obj.get("defaultRetrievalWeight"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "createdById": obj.get("createdById"),
            "updatedById": obj.get("updatedById")
        })
        return _obj


