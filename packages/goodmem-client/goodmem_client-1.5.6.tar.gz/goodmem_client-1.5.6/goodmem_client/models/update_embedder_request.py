# coding: utf-8

"""
    GoodMem API

    API for interacting with the GoodMem service, providing vector-based memory storage and retrieval with multiple embedder support. The service enables creation of memory spaces, storing memories with vector representations, and efficient similarity-based retrieval.

    The version of the OpenAPI document: v1
    Contact: support@goodmem.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from goodmem_client.models.modality import Modality
from typing import Optional, Set
from typing_extensions import Self

class UpdateEmbedderRequest(BaseModel):
    """
    Request body for updating an existing Embedder. Only fields that should be updated need to be included.
    """ # noqa: E501
    validate_label_strategy: Optional[Dict[str, Any]] = Field(default=None, alias="validateLabelStrategy")
    display_name: Optional[StrictStr] = Field(default=None, description="User-facing name of the embedder", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="Description of the embedder")
    endpoint_url: Optional[StrictStr] = Field(default=None, description="API endpoint URL", alias="endpointUrl")
    api_path: Optional[StrictStr] = Field(default=None, description="API path for embeddings request", alias="apiPath")
    model_identifier: Optional[StrictStr] = Field(default=None, description="Model identifier", alias="modelIdentifier")
    dimensionality: Optional[StrictInt] = Field(default=None, description="Output vector dimensions")
    max_sequence_length: Optional[StrictInt] = Field(default=None, description="Maximum input sequence length", alias="maxSequenceLength")
    supported_modalities: Optional[List[Modality]] = Field(default=None, description="Supported content modalities", alias="supportedModalities")
    credentials: Optional[StrictStr] = Field(default=None, description="API credentials")
    replace_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Replace all existing labels with these (mutually exclusive with mergeLabels)", alias="replaceLabels")
    merge_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Merge these labels with existing ones (mutually exclusive with replaceLabels)", alias="mergeLabels")
    version: Optional[StrictStr] = Field(default=None, description="Version information")
    monitoring_endpoint: Optional[StrictStr] = Field(default=None, description="Monitoring endpoint URL", alias="monitoringEndpoint")
    __properties: ClassVar[List[str]] = ["validateLabelStrategy", "displayName", "description", "endpointUrl", "apiPath", "modelIdentifier", "dimensionality", "maxSequenceLength", "supportedModalities", "credentials", "replaceLabels", "mergeLabels", "version", "monitoringEndpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateEmbedderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if endpoint_url (nullable) is None
        # and model_fields_set contains the field
        if self.endpoint_url is None and "endpoint_url" in self.model_fields_set:
            _dict['endpointUrl'] = None

        # set to None if api_path (nullable) is None
        # and model_fields_set contains the field
        if self.api_path is None and "api_path" in self.model_fields_set:
            _dict['apiPath'] = None

        # set to None if model_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.model_identifier is None and "model_identifier" in self.model_fields_set:
            _dict['modelIdentifier'] = None

        # set to None if dimensionality (nullable) is None
        # and model_fields_set contains the field
        if self.dimensionality is None and "dimensionality" in self.model_fields_set:
            _dict['dimensionality'] = None

        # set to None if max_sequence_length (nullable) is None
        # and model_fields_set contains the field
        if self.max_sequence_length is None and "max_sequence_length" in self.model_fields_set:
            _dict['maxSequenceLength'] = None

        # set to None if supported_modalities (nullable) is None
        # and model_fields_set contains the field
        if self.supported_modalities is None and "supported_modalities" in self.model_fields_set:
            _dict['supportedModalities'] = None

        # set to None if credentials (nullable) is None
        # and model_fields_set contains the field
        if self.credentials is None and "credentials" in self.model_fields_set:
            _dict['credentials'] = None

        # set to None if replace_labels (nullable) is None
        # and model_fields_set contains the field
        if self.replace_labels is None and "replace_labels" in self.model_fields_set:
            _dict['replaceLabels'] = None

        # set to None if merge_labels (nullable) is None
        # and model_fields_set contains the field
        if self.merge_labels is None and "merge_labels" in self.model_fields_set:
            _dict['mergeLabels'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if monitoring_endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.monitoring_endpoint is None and "monitoring_endpoint" in self.model_fields_set:
            _dict['monitoringEndpoint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateEmbedderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "validateLabelStrategy": obj.get("validateLabelStrategy"),
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "endpointUrl": obj.get("endpointUrl"),
            "apiPath": obj.get("apiPath"),
            "modelIdentifier": obj.get("modelIdentifier"),
            "dimensionality": obj.get("dimensionality"),
            "maxSequenceLength": obj.get("maxSequenceLength"),
            "supportedModalities": obj.get("supportedModalities"),
            "credentials": obj.get("credentials"),
            "replaceLabels": obj.get("replaceLabels"),
            "mergeLabels": obj.get("mergeLabels"),
            "version": obj.get("version"),
            "monitoringEndpoint": obj.get("monitoringEndpoint")
        })
        return _obj


