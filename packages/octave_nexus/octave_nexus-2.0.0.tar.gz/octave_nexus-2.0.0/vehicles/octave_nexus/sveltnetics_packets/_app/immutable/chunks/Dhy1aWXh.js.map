{"version":3,"file":"Dhy1aWXh.js","sources":["../../../../../../src/lib/taverns/numerals/add_zeroes.js","../../../../../../src/lib/taverns/APT/Octas_to_APT.js","../../../../../../src/lib/taverns/numerals/decimal/is_string.js","../../../../../../src/lib/taverns/numerals/remove_leading_zeroes.js","../../../../../../src/lib/taverns/APT/APT_to_Octas.js","../../../../../../src/lib/trinkets/Amount_Field/Trinket.svelte"],"sourcesContent":["\n\n/*\n\timport { add_zeroes } from '$lib/taverns/numerals/add_zeroes.js'\n\tadd_zeroes ({\n\t\tfractional: \"1234567\"\n\t})\n*/\n\n/*\n\tThis add zeroes to the back of the number\n\tuntil there are 8 zeroes.\n*/\n\n//\n//\n//  1234567 -> 1234570\n//\t1234 -> 12340000\n//\n//\nexport const add_zeroes = ({ \n\tfractional,\n\tpart = \"back\",\n\tuntil = 8\n}) => {\n\t// console.log ({ fractional, part, until })\n\t\n\tif (part === \"back\") {\n\t\tconst zeroes = until - fractional.length;\n\t\tfor (let E = 1; E <= zeroes; E++) {\n\t\t\tfractional = fractional + \"0\";\n\t\t}\n\t\t\n\t\treturn fractional;\n\t}\n\telse {\n\t\n\t\t//\n\t\t//\n\t\t//\tAdd to beginning\n\t\t//\n\t\t//\n\t\tconst zeroes = until - fractional.length;\n\t\t\n\t\t// console.log (`Add ${ zeroes } zeroes`);\n\t\t\n\t\tfor (let E = 1; E <= zeroes; E++) {\n\t\t\tfractional = \"0\" + fractional;\n\t\t}\n\t\t\n\t\treturn fractional;\n\t}\n}","\n\n/*\n\timport { ask_convert_Octas_to_APT } from '$lib/taverns/APT/Octas_to_APT.js'\n\tconst APT = ask_convert_Octas_to_APT ({ Octas: \"1\" })\n*/\n\n//\n//\tOctas: \n//\t\t      1 ->  0.00000001 \n//\t\t     10 ->  0.00000010\n//\t\t    100 ->  0.00000100\n//\n//    1000,0000 ->  0.1\n//\t  9999,9999 ->  0.99999999\n//\n//\t1,0000,0000 ->  1.0\n// 11,0000,0000 -> 11.0\n//\n//\n\nimport { add_zeroes } from '$lib/taverns/numerals/add_zeroes.js'\nimport { assert_is_natural_numeral_string } from '$lib/taverns/numerals/natural/is_string'\n\nconst divide_at_eight = (digit) => {\n\tconst part1 = digit.slice (0, digit.length - 8);\n    const part2 = digit.slice (digit.length - 8);\n    return [ part1, part2 ];\n}\n\nexport const ask_convert_Octas_to_APT = ({ Octas }) => {\n\tassert_is_natural_numeral_string (Octas);\n\t\n\t//\n\t//\n\t//\tIf length <= 8\n\t//\n\t//\n\tif (Octas.length <= 8) {\n\t\tOctas = add_zeroes ({\n\t\t\tfractional: Octas,\n\t\t\tuntil: 9,\n\t\t\tpart: \"front\"\n\t\t})\n\t}\n\t\n\tconst divided = divide_at_eight (Octas);\n\t\n\treturn divided [0] + \".\" + divided [1];\n\t\n\treturn Octas;\n}","\n\n/*\n\timport { is_decimal_digit_string } from '$lib/taverns/numerals/decimal/is_string'\n*/\n\nconst valid_characters = \"01234567890.\"\n\nexport const is_decimal_digit_string = (digit) => {\n\tif (typeof digit !== \"string\") {\n\t\tthrow new Error (`Digit amount needs to be a string, however received: \"${ typeof digit }\".`)\n\t}\n\t\n\tif (digit.length === 0) {\n\t\tthrow new Error (`Digit amount needs to be a string of length >= 1`)\n\t}\n\t\n\t//\n\t//\n\t//\tAssert has exclusively characters: 01234567890\n\t//\n\t//\n\tconst last = digit.length - 1;\n\tfor (let E = 0; E <= last; E++) {\n\t\tif (valid_characters.includes (digit [E]) !== true) {\n\t\t\tthrow new Error (`Digit glyphs need to be one of ${ valid_characters }, however at index ${ E }, received: \"${ digit [E] }\".`)\n\t\t}\n\t}\n}","\n\n\n/*\n\timport { remove_leading_zeroes } from '$lib/taverns/numerals/remove_leading_zeroes.js'\n\tremove_leading_zeroes ({ Digits });\n\n*/\n\n/*\n\tThis removes zeroes from the left\n\tuntil a non-zero is found.\n*/\n\nimport { assert_is_natural_numeral_string } from '$lib/taverns/numerals/natural/is_string'\n\n//\n//\t 01234567 -> 1234567\n//  001234567 -> 1234567\n//\n//\n//\treturns \"0\" if every digit is a zero\n//\nexport const remove_leading_zeroes = ({ Digits }) => {\n\tassert_is_natural_numeral_string (Digits)\n\t\n\tlet integer_as_string_end = Digits.length - 1;\n\tlet found_non_zero_1 = \"no\";\n\t\n\tlet proceeds = \"\"\n\tfor (\n\t\tlet E = 0; \n\t\tE <= integer_as_string_end;\n\t\tE++\n\t) {\n\t\tif (Digits [E] !== \"0\") {\n\t\t\tfound_non_zero_1 = \"yes\"\n\t\t}\n\t\tif (found_non_zero_1 === \"yes\") {\n\t\t\tproceeds += Digits [E]\n\t\t}\n\t}\n\t\n\tif (proceeds.length === 0) {\n\t\treturn \"0\"\n\t}\n\t\n\treturn proceeds;\n}","\n\n/*\n\timport { ask_convert_APT_to_Octas } from '$lib/taverns/APT/APT_to_Octas.js'\n\tconst Octas = await ask_convert_APT_to_Octas ({ APT })\n*/\n\n//\n// APT: 1 \t\t\t=== 1,0000,0000 Octas\n// APT: 0.1\t\t\t===   1000,0000 Octas\n// APT: 0.01\t\t===    100,0000 Octas\n// APT: 0.001\t\t===     10,0000 Octas\n// APT: 0.0001\t\t===      1,0000 Octas\n// APT: 0.00001\t\t===        1000 Octas\n//\n\n////\n//\n//\tHighest:\n//\n//\n//\tLowest:\n//\t\tAPT: 0.00000001\t-> 1 Octa\n//\n////\n\nimport { is_decimal_digit_string } from '$lib/taverns/numerals/decimal/is_string'\nimport { assert_is_natural_numeral_string } from '$lib/taverns/numerals/natural/is_string'\n\nimport { add_zeroes } from '$lib/taverns/numerals/add_zeroes.js'\nimport { remove_leading_zeroes } from '$lib/taverns/numerals/remove_leading_zeroes.js'\nimport { remove_fractional_zeroes } from '$lib/taverns/numerals/remove_fractional_zeroes.js'\n\nexport const ask_convert_APT_to_Octas = ({ APT }) => {\n\tis_decimal_digit_string (APT)\n\t\n\tif (APT.includes (\".\") !== true) {\n\t\treturn remove_leading_zeroes ({\n\t\t\tDigits: APT + \"00000000\"\n\t\t})\n\t}\n\t\n\tconst pair = APT.split (\".\")\n\tif (pair.length !== 2) {\n\t\tthrow new Error (`The APT amount wasn't two parts after gettings the parts around the decimal.`)\n\t}\n\t\n\t\n\tconst pair_fractional = add_zeroes ({ fractional: pair [1] })\n\tif (pair_fractional.length >= 9) {\n\t\tthrow new Error (`The APT amount after the decimal can't be more than 8 digits.`)\n\t}\n\t\n\t//\n\t//\tAdd zeroes should ensure that \n\t//\n\t//\n\t\n\tif (pair_fractional.length !== 8) {\n\t\tthrow new Error (`The APT amount after the decimal was not 8 digits.`)\n\t}\n\tconsole.log ({ pair, pair_fractional })\n\t\n\tconst squeeze = pair [0] + pair_fractional;\n\tconsole.log ({ squeeze });\n\t\n\t\n\tconst without_leading_zeroes = remove_leading_zeroes ({ Digits: squeeze })\n\treturn without_leading_zeroes;\n}\n\n\n//","\n\n\n<script>\n\n/*\t\n\timport Amount_Field from '$lib/trinkets/Amount_Field/Trinket.svelte'\n\t\n\t\n\tlet amount_field = \"\"\n\t\n\tconst on_amount_change = ({ \n\t\teffects,\n\t\tactual_amount_of_Octas\n\t}) => {\n\t\tif (effects.problems === \"\") {\n\t\t\t\n\t\t}\n\t}\n\t\n\tconst on_amount_prepare = () => {\n\t\tamount_field.modify_octas ();\n\t}\n\t\n\t<Amount_Field \n\t\tbind:this={ amount_field }\n\t\ton_change={ on_amount_change }\n\t\ton_prepare={ on_amount_prepare }\n\t/>\n*/\n\n////\n//\nimport { onMount, onDestroy } from 'svelte';\n//\nimport { has_field } from '$lib/taverns/procedures/object/has_field'\n//\n//\nimport { build_truck } from '$lib/trucks'\n//\nimport Problem_Alert from '$lib/trinkets/Alerts/Problem.svelte'\nimport Alert_Info from '$lib/trinkets/Alerts/Info.svelte'\n//\nimport { ask_convert_APT_to_Octas } from '$lib/taverns/APT/APT_to_Octas.js'\nimport { ask_convert_Octas_to_APT } from '$lib/taverns/APT/Octas_to_APT.js'\nimport { assert_is_natural_numeral_string } from '$lib/taverns/numerals/natural/is_string'\nimport { parse_with_commas } from '$lib/taverns/numbers/parse_with_commas'\nimport { remove_leading_zeroes } from '$lib/taverns/numerals/remove_leading_zeroes.js'\n//\n//\nimport { Octas_string_is_permitted } from './Screenplays/Octas_string_is_permitted.js'\n//\n////\n\nexport let on_change = () => {}\nexport let on_prepare = () => {}\n\nexport let display_sci_note_estimate = \"no\"\n\nconst trucks = {}\nconst placeholders = Object.freeze ({\n\t\"APT\": \"Amount of APT\",\n\t\"Octas\": \"Amount of Octas\"\n})\n\n$: amount = \"\"\n$: currency = \"APT\"\n$: placeholder = placeholders [\"Octas\"]\n$: actual_amount_of_Octas = \"\"\n\n\n\nlet effects = {\n\tsci_note_estimate_of_Octas: \"\",\t\n\tproblem: \"\"\n}\n\n$: {\n\tlet _amount = amount;\n\tconsole.log (\"amount changed\")\n\teffect_change ()\n}\n$: {\n\tlet _currency = currency;\n\tconsole.log (\"currency changed\")\n\teffect_change ()\n}\n$: {\n\tlet _actual_amount_of_Octas = actual_amount_of_Octas;\n\tcalculate_exponent ()\n}\n\n\n\nconst change_amount = ({ Octas }) => {\n\tconsole.log (\"change_amount:\", { Octas });\n\t\n\tassert_is_natural_numeral_string (Octas);\n\tactual_amount_of_Octas = remove_leading_zeroes ({ Digits: Octas });;\n\t\n\teffects.problem = ``\n\t\n\ton_change ({\n\t\teffects,\n\t\tactual_amount_of_Octas,\n\t\t\n\t\tamount,\n\t\tcurrency\n\t})\n}\n\n\nlet first_input_occurred = \"no\"\nconst amount_field_on_key_up = () => {\n\tfirst_input_occurred = \"yes\"\n}\n\n\nconst effect_change = async () => {\n\teffects.problem = \"\"\n\tactual_amount_of_Octas = \"\" \n\t\n\tplaceholder = placeholders [ currency ]\n\t\n\ttry {\n\t\tif (currency === \"APT\") {\n\t\t\tconst Octas_as_string = await ask_convert_APT_to_Octas ({ \n\t\t\t\tAPT: amount.toString ()\n\t\t\t});\n\t\t\tchange_amount ({ Octas: Octas_as_string });\n\t\t\treturn;\n\t\t}\n\t\telse if (currency === \"Octas\") {\n\t\t\tconst Octas_as_string = amount.toString ();\n\t\t\tchange_amount ({ Octas: Octas_as_string });\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\teffects.problem = `Currency \"${currency}\" was not accounted for.`\n\t\t}\n\t}\n\tcatch (exception) {\n\t\tif (amount.length !== 0) {\n\t\t\tconsole.error (exception);\n\t\t}\n\t\t\n\t\teffects.problem = exception.message;\n\t}\n\t\n\ton_change ({\n\t\teffects,\n\t\tactual_amount_of_Octas,\n\t\t\n\t\tamount,\n\t\tcurrency\n\t})\n}\n\nlet prepared = \"no\"\nonMount (async () => {\n\tprepared = \"yes\"\n\tawait on_prepare ();\n})\n\n\n\t\nexport const modify = ({ Octas }) => {\n\tif (currency === \"APT\") {\n\t\tconst APT = ask_convert_Octas_to_APT ({ Octas })\n\t\tamount = APT\n\t}\n\telse {\n\t\tamount = Octas;\n\t}\n\t\n\tchange_amount ({ Octas });\n}\n\n\nonDestroy (() => {})\n\nconst calculate_exponent = () => {1\n\ttry {\n\t\tlet exponent = parseFloat (actual_amount_of_Octas).toExponential () \n\t\tif (exponent === \"NaN\") {\n\t\t\treturn \"\"\n\t\t}\n\t\t\n\t\treturn exponent;\n\t}\n\tcatch (exception) {\n\t\tconsole.error (exception)\n\t}\n\n\treturn \"\"\n}\n\n\n\n</script>\n\n{#if prepared === \"yes\"}\n<div>\n\t<div>\t\t\n\t\t<div \n\t\t\t_class=\"input-group input-group-divider grid-cols-[auto_1fr_auto]\"\n\t\t\tstyle=\"\n\t\t\t\tpadding: 2px;\n\t\t\t\tdisplay: flex;\n\t\t\t\"\n\t\t>\n\t\t\t<label \n\t\t\t\tclass=\"label\"\n\t\t\t\tstyle=\"\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\"\n\t\t\t>\n\t\t\t\t<input \n\t\t\t\t\tmonitor=\"amount field\"\n\t\t\t\t\tamount_field\n\t\t\t\t\t\n\t\t\t\t\tbind:value={ amount }\n\t\t\t\t\ton:keyup={ amount_field_on_key_up }\n\t\t\t\t\t\n\t\t\t\t\tstyle=\"padding: 10px 20px; text-align: right;\"\n\t\t\t\t\tclass=\"input\" \n\t\t\t\t\t\n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tplaceholder={ placeholder }\n\t\t\t\t/>\n\t\t\t</label>\n\n\t\t\t<label \n\t\t\t\tstyle=\"\n\t\t\t\t\twidth: 3cm;\n\t\t\t\t\tborder-radius: 8px;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\n\t\t\t\t\tmargin-left: 0.1cm;\n\t\t\t\t\"\n\t\t\t\tclass=\"label\"\n\t\t\t>\n\t\t\t\t<select \n\t\t\t\t\tmonitor=\"currency chooser\"\n\t\t\t\t\tcurrency_chooser\n\t\t\t\t\n\t\t\t\t\tbind:value={ currency }\n\t\t\t\t\t\n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\theight: 100%;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\"\n\t\t\t\t\tclass=\"select\"\n\t\t\t\t>\n\t\t\t\t\t<option>APT</option>\n\t\t\t\t\t<option>Octas</option>\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t</div>\n\t</div>\n\n\t\n\t<div\n\t\tstyle=\"\n\n\t\t\t\n\t\t\t// display: flex;\n\t\t\t// flex-wrap: wrap;\n\t\t\t// justify-content: space-between;\n\t\t\t// flex-direction: wrap;\n\t\t\t\n\t\t\twidth: 100%;\n\t\t\tmargin: 4px 0;\n\t\t\"\n\t>\n\t\t{#if display_sci_note_estimate === \"yes\" }\n\t\t<span \n\t\t\tclass=\"badge variant-soft\"\n\t\t\tstyle=\"\n\t\t\t\t// display: grid;\n\t\t\t\t// grid-template-columns: repeat(auto-fit, minmax(6cm, 1fr));\n\t\t\t\t// gap: 4px;\n\t\t\t\t\n\t\t\t\t// flex: 1 1 50%;\n\t\t\t\t\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\n\t\t\t\tposition: relative;\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\twhite-space: break-spaces;\n\t\t\t\tpadding: 0.25cm 0.5cm;\n\t\t\t\"\n\t\t>\n\t\t\t<span>Sci Note Estimate</span>\n\t\t\t<div>\n\t\t\t\t<span \n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1em;\n\t\t\t\t\t\twhite-space: preserve;\n\t\t\t\t\t\tword-wrap: anywhere;\n\t\t\t\t\t\tmargin: 4px;\n\t\t\t\t\t\"\n\t\t\t\t>{ calculate_exponent (actual_amount_of_Octas) }</span>\n\t\t\t\t<span \n\t\t\t\t\tclass=\"badge variant-filled-surface\"\n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1.1em;\n\t\t\t\t\t\"\n\t\t\t\t>Octas</span>\n\t\t\t</div>\n\t\t</span>\n\t\t<div style=\"height: 6px; width: 6px\"></div>\n\t\t{/if}\n\t\t\n\t\t<span \n\t\t\tclass=\"badge variant-soft\"\n\t\t\tstyle=\"\n\t\t\t\t// display: grid;\n\t\t\t\t// grid-template-columns: repeat(auto-fit, minmax(6cm, 1fr));\n\t\t\t\t// gap: 4px;\n\t\t\t\t\n\t\t\t\t// flex: 1 1 50%;\n\t\t\t\t\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\n\t\t\t\tposition: relative;\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\twhite-space: break-spaces;\n\t\t\t\tpadding: 0.25cm 0.5cm;\n\t\t\t\"\n\t\t>\n\t\t\t<span><b>Actual Amount</b></span>\n\t\t\t<div>\n\t\t\t\t<span \n\t\t\t\t\tmonitor=\"actual amount of octas\"\n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1em;\n\t\t\t\t\t\twhite-space: preserve;\n\t\t\t\t\t\tword-wrap: anywhere;\n\t\t\t\t\t\tmargin: 4px;\n\t\t\t\t\t\"\n\t\t\t\t>{ parse_with_commas (actual_amount_of_Octas) }</span>\n\t\t\t\t<span \n\t\t\t\t\tclass=\"badge variant-filled-surface\"\n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1.1em;\n\t\t\t\t\t\"\n\t\t\t\t>Octas</span>\n\t\t\t</div>\n\t\t</span>\n\t\t\n\t\t<div style=\"height: 0.25cm\"></div>\n\t\t\n\t\t<aside class=\"alert variant-filled-surface\">\n\t\t\t<div class=\"alert-message\"\n\t\t\t\tstyle=\"\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\"\n\t\t\t>\n\t\t\t\t<p>\"<b>Actual Amount</b>\" is calculated from the number provided and is the amount used.</p>\t\t\t\t\n\t\t\t</div>\n\t\t</aside>\n\t</div>\n\t\n\t{#if effects.problem.length >= 1 }\n\t<Problem_Alert \n\t\ttext={ effects.problem }\n\t/>\n\t{/if}\n</div>\n{/if}"],"names":["add_zeroes","fractional","part","until","zeroes","E","divide_at_eight","digit","part1","part2","ask_convert_Octas_to_APT","Octas","assert_is_natural_numeral_string","divided","valid_characters","is_decimal_digit_string","last","remove_leading_zeroes","Digits","integer_as_string_end","found_non_zero_1","proceeds","ask_convert_APT_to_Octas","APT","pair","pair_fractional","squeeze","t7_value","parse_with_commas","ctx","if_block0","create_if_block_2","if_block1","create_if_block_1","add_render_callback","select","insert_hydration","target","div6","anchor","append_hydration","div1","div0","label0","input","label1","option0","option1","div5","span3","span0","div2","span1","span2","div3","aside","current","dirty","set_data","t7","t2_value","t2","problem_alert_changes","if_block","create_if_block","on_change","on_prepare","display_sci_note_estimate","$$props","placeholders","effects","change_amount","$$invalidate","actual_amount_of_Octas","amount","currency","amount_field_on_key_up","effect_change","placeholder","Octas_as_string","exception","prepared","onMount","modify","onDestroy","calculate_exponent","exponent","select_value"],"mappings":"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"}