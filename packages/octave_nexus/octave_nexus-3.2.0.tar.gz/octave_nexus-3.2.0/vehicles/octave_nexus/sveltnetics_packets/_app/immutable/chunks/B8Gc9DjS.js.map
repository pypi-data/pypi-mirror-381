{"version":3,"file":"B8Gc9DjS.js","sources":["../../../../../../src/lib/taverns/numerals/commas/add.js","../../../../../../src/lib/taverns/numbers/parse_with_commas.js"],"sourcesContent":["\n/*\n\timport { add_commas } from '$lib/taverns/numerals/commas/add'\n\tadd_commas (1234512345)\n*/\n\n/*\n\t[ ] Comma every 4 like music :)\n*/\n\n/*\n\tTODO: 1,0000,0000\n*/\n\n//\n//\t.123456 = .12345,6\n//\t.1234567 = .1234567\t\n//\nconst parse_decimal_part = (part, { commas_every, with_line_breaks }) => {\n\tif (!part) return '';\n\n\t// Add trailing zeros if less than 5 digits\n\t// part = part.padEnd (5, '0');\n\n\t// Format the decimal part with commas commas_every 3 digits from the end\n\tlet result = '';\n\tlet length = part.length;\n\n\tconst last_index = part.length - 1;\n\tfor (let i = 0; i <= last_index; i++) {\n\t\tlet position_from_end = i + 1;\n\n\t\tresult = result + part [i];\n\n\t\tif (position_from_end % commas_every === 0 && i !== 0 && i !== last_index) {\n\t\t\tresult = result + ',';\n\t\t}\n\t}\n\n\treturn result;\n}\n\nconst parse_integer_part = (part, { commas_every, line_break_every, with_line_breaks }) => {\n\tlet result = '';\n\tlet length = part.length;\n\n\tconst last_index = 0;\n\tfor (let i = length - 1; i >= last_index; i--) {\n\t\tlet position_from_end = length - i;\n\t\tresult = part [i] + result;\n\n\t\tif (with_line_breaks === \"yes\") {\n\t\t\tif (with_line_breaks === \"yes\" && position_from_end % 25 === 0 && i !== 0) {\n\t\t\t\tresult = '\\n' + result;\n\t\t\t}\n\t\t\telse if (position_from_end % commas_every === 0 && i !== 0 && i !== last_index) {\n\t\t\t\tresult = ' ' + result;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (position_from_end % commas_every === 0 && i !== 0 && i !== last_index) {\n\t\t\t\tresult = ',' + result;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nexport const add_commas = (number, choices = {}) => {\n\tconst with_line_breaks = choices.with_line_breaks || \"no\";\n\tconst commas_every = choices.commas_every || 5;\n\tconst line_break_every = choices.line_break_every || 25;\n\t\n\tlet is_negative = \"no\"\n\tlet actual_number = \"\";\n\tif (\n\t\ttypeof number === \"number\" ||\n\t\ttypeof number === \"bigint\"\n\t) {\n\t\tactual_number = number.toString ()\n\t\t\n\t\t/*\t\n\t\t\tReturn the scientific notation if\n\t\t\thas an \"e\" in it.\n\t\t*/\n\t\tlet lower_case_number = actual_number.toLowerCase ();\n\t\tif (lower_case_number.indexOf (\"e\") >= 0) {\n\t\t\treturn actual_number;\n\t\t}\n\t}\n\telse if (typeof number === \"string\") {\n\t\tactual_number = number\n\t}\n\telse {\n\t\tthrow new Error (`Type \"${ typeof number }\" of digit \"${ number }\" was not prepared for.`);\n\t}\n\t\n\tif (actual_number [0] === \"-\") {\n\t\tactual_number = actual_number.substring (1)\n\t\tis_negative = \"yes\"\n\t}\n\t\n\t\n\tlet [ integer_part, decimal_part ] = actual_number.toString ().split('.');\n\t/* console.log ({\n\t\tactual_number,\n\t\tinteger_part, \n\t\tdecimal_part\n\t}) */\n\n\t// Parse both integer and decimal parts\n\tlet parsed_integer_part = parse_integer_part (integer_part, { \n\t\tcommas_every, \n\t\twith_line_breaks, \n\t\tline_break_every \n\t});\n\tlet parsed_decimal_part = parse_decimal_part (decimal_part, { \n\t\tcommas_every, \n\t\twith_line_breaks \n\t});\n\n\tlet flip = is_negative === \"yes\" ? \"-\" : \"\";\n\t\n\tif (parsed_decimal_part === '') {\n\t\treturn flip + parsed_integer_part;\n\t}\n\n\t// Combine integer and decimal parts\n\treturn `${ flip }${ parsed_integer_part }.${ parsed_decimal_part }`;\n}\n\n","\n/*\n\timport { parse_with_commas } from '$lib/taverns/numbers/parse_with_commas'\n\tparse_with_commas (1234512345)\n*/\n\n/*\n\tTODO: 1,0000,0000\n*/\n\n\nimport { add_commas } from '$lib/taverns/numerals/commas/add'\n\n\nimport { check_roomies_truck } from '$lib/Versies/Trucks'\n\t\n\nexport const parse_with_commas = (number, choices = {}) => {\n\tconst commas_every = check_roomies_truck ().freight.commas_every;\n\tchoices.commas_every = commas_every\n\t\n\treturn add_commas (number, choices)\n}\n\n"],"names":["parse_decimal_part","part","commas_every","with_line_breaks","result","last_index","position_from_end","parse_integer_part","line_break_every","length","i","add_commas","number","choices","is_negative","actual_number","integer_part","decimal_part","parsed_integer_part","parsed_decimal_part","flip","parse_with_commas","check_roomies_truck"],"mappings":"6BAkBA,MAAMA,EAAqB,CAACC,EAAM,CAAE,aAAAC,EAAc,iBAAAC,CAAgB,IAAO,CACxE,GAAI,CAACF,EAAM,MAAO,GAMlB,IAAIG,EAAS,GACAH,EAAK,OAElB,MAAMI,EAAaJ,EAAK,OAAS,EACjC,QAAS,EAAI,EAAG,GAAKI,EAAY,IAAK,CACrC,IAAIC,EAAoB,EAAI,EAE5BF,EAASA,EAASH,EAAM,CAAC,EAErBK,EAAoBJ,IAAiB,GAAK,IAAM,GAAK,IAAMG,IAC9DD,EAASA,EAAS,IAErB,CAEC,OAAOA,CACR,EAEMG,EAAqB,CAACN,EAAM,CAAE,aAAAC,EAAc,iBAAAM,EAAkB,iBAAAL,CAAgB,IAAO,CAC1F,IAAIC,EAAS,GACTK,EAASR,EAAK,OAElB,MAAMI,EAAa,EACnB,QAASK,EAAID,EAAS,EAAGC,GAAKL,EAAYK,IAAK,CAC9C,IAAIJ,EAAoBG,EAASC,EACjCN,EAASH,EAAMS,CAAC,EAAIN,EAEhBD,IAAqB,MACpBA,IAAqB,OAASG,EAAoB,KAAO,GAAKI,IAAM,EACvEN,EAAS;AAAA,EAAOA,EAERE,EAAoBJ,IAAiB,GAAKQ,IAAM,GAAKA,IAAML,IACnED,EAAS,IAAMA,GAIZE,EAAoBJ,IAAiB,GAAKQ,IAAM,GAAKA,IAAML,IAC9DD,EAAS,IAAMA,EAGnB,CAEC,OAAOA,CACR,EAEaO,EAAa,CAACC,EAAQC,EAAU,KAAO,CACnD,MAAMV,EAAmBU,EAAQ,kBAAoB,KAC/CX,EAAeW,EAAQ,cAAgB,EACvCL,EAAmBK,EAAQ,kBAAoB,GAErD,IAAIC,EAAc,KACdC,EAAgB,GACpB,GACC,OAAOH,GAAW,UAClB,OAAOA,GAAW,UASlB,GAPAG,EAAgBH,EAAO,SAAQ,EAMPG,EAAc,YAAc,EAC9B,QAAS,GAAG,GAAK,EACtC,OAAOA,UAGA,OAAOH,GAAW,SAC1BG,EAAgBH,MAGhB,OAAM,IAAI,MAAO,SAAU,OAAOA,CAAM,eAAiBA,CAAQ,yBAAwB,EAGtFG,EAAe,CAAC,IAAM,MACzBA,EAAgBA,EAAc,UAAW,CAAC,EAC1CD,EAAc,OAIf,GAAI,CAAEE,EAAcC,CAAc,EAAGF,EAAc,SAAW,EAAC,MAAM,GAAG,EAQpEG,EAAsBX,EAAoBS,EAAc,CAC3D,aAAAd,EACA,iBAAAC,EACA,iBAAAK,CACF,CAAE,EACGW,EAAsBnB,EAAoBiB,EAAc,CAC3D,aAAAf,EACA,iBAAAC,CACF,CAAE,EAEGiB,EAAON,IAAgB,MAAQ,IAAM,GAEzC,OAAIK,IAAwB,GACpBC,EAAOF,EAIR,GAAIE,CAAM,GAAGF,CAAmB,IAAMC,CAAmB,EACjE,ECjHaE,EAAoB,CAACT,EAAQC,EAAU,KAAO,CAC1D,MAAMX,EAAeoB,IAAuB,QAAQ,aACpD,OAAAT,EAAQ,aAAeX,EAEhBS,EAAYC,EAAQC,CAAO,CACnC"}