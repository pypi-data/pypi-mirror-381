import{parser as o}from"@lezer/json";import{LRLanguage as a,indentNodeProp as s,continuedIndent as r,foldNodeProp as i,foldInside as c,LanguageSupport as d}from"@codemirror/language";var f=()=>n=>{try{JSON.parse(n.state.doc.toString())}catch(e){if(!(e instanceof SyntaxError))throw e;let t=g(e,n.state.doc);return[{from:t,message:e.message,severity:"error",to:t}]}return[]};function g(n,e){let t;return(t=n.message.match(/at position (\d+)/))?Math.min(+t[1],e.length):(t=n.message.match(/at line (\d+) column (\d+)/))?Math.min(e.line(+t[1]).from+ +t[2]-1,e.length):0}var m=a.define({name:"json",parser:o.configure({props:[s.add({Object:r({except:/^\s*\}/}),Array:r({except:/^\s*\]/})}),i.add({"Object Array":c})]}),languageData:{closeBrackets:{brackets:["[","{",'"']},indentOnInput:/^\s*[\}\]]$/}});function l(){return new d(m)}export{l as json,m as jsonLanguage,f as jsonParseLinter};
