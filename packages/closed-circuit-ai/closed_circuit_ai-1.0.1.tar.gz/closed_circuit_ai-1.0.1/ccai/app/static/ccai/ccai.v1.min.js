// src/components/app.jsx
import { Fragment as Fragment4, jsx as jsx7, jsxs as jsxs5 } from "react/jsx-runtime";

// src/components/header.jsx
import { jsx, jsxs } from "react/jsx-runtime";
var Header = ({ theme, persistenceEverSynced, providerStatus, providerIsSynced, providerEverSynced }) => {
  const toggleTheme = () => {
    const newTheme = theme === "dark" ? "light" : "dark";
    window.setTheme(newTheme);
  };
  return /* @__PURE__ */ jsxs("header", { className: "flex flex-row justify-between items-center p-2 border-b", children: [
    /* @__PURE__ */ jsx("div", { className: "text-smaller-2 text-muted nowrap", children: "closed-circuit-ai" }),
    /* @__PURE__ */ jsxs("div", { className: "flex flex-row justify-end items-center gap-1", children: [
      /* @__PURE__ */ jsx(
        "div",
        {
          className: "flex flex-row justify-center items-center width-6 height-6 opacity-50",
          style: { visibility: providerStatus === "connected" && providerIsSynced && persistenceEverSynced ? "hidden" : "visible" },
          title: `persistenceEverSynced: ${persistenceEverSynced}
providerStatus: ${providerStatus}
providerIsSynced: ${providerIsSynced}
providerEverSynced: ${providerEverSynced}`,
          children: /* @__PURE__ */ jsx("i", { className: "fa-solid fa-bolt fa-fade line-height-inherit scale-80" })
        }
      ),
      /* @__PURE__ */ jsx("button", { className: "flex flex-row justify-center items-center width-6 height-6 overflow-hidden", onClick: toggleTheme, children: (() => {
        if (theme === "dark") {
          return /* @__PURE__ */ jsx("i", { className: "fa-solid fa-sun line-height-inherit scale-80" });
        } else {
          return /* @__PURE__ */ jsx("i", { className: "fa-solid fa-moon line-height-inherit scale-80" });
        }
      })() })
    ] })
  ] });
};

// src/components/tabs.jsx
import { Fragment as Fragment2, jsx as jsx4, jsxs as jsxs4 } from "react/jsx-runtime";

// src/components/tab.jsx
import { jsx as jsx2, jsxs as jsxs2 } from "react/jsx-runtime";
var Tab = ({ tabId, tabIndex, isActive, selectTab, closeTab, reorderTab }) => {
  const onDragStart = (event) => {
    event.dataTransfer.effectAllowed = "move";
    event.dataTransfer.setData("dragIndex", tabIndex);
  };
  const onDragOver = (event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
  };
  const onDrop = (event) => {
    event.preventDefault();
    const dragIndex = parseInt(event.dataTransfer.getData("dragIndex"), 10);
    const rect = event.currentTarget.getBoundingClientRect();
    const right = event.clientX > rect.left + rect.width / 2;
    const dropIndex = tabIndex + (right ? 1 : 0);
    if (dragIndex !== dropIndex) {
      reorderTab(dragIndex, dropIndex);
    }
  };
  return /* @__PURE__ */ jsxs2(
    "div",
    {
      className: `flex-1 flex flex-row justify-between items-center gap-2 px-2 py-3 tab-max-width overflow-hidden cursor-pointer ${isActive ? "bg active" : "text-muted inactive"}`,
      style: { containerType: "inline-size" },
      onClick: () => selectTab(tabId),
      draggable: "true",
      onDragStart,
      onDragOver,
      onDrop,
      children: [
        /* @__PURE__ */ jsx2("div", { title: tabId, className: "nowrap overflow-hidden ellipsis text-direction-rtl text-align-left", style: { fontSize: "clamp(2px, 12cqw, 1rem)" }, children: (() => {
          const lastSlash = tabId.lastIndexOf("/");
          if (lastSlash === -1) {
            return /* @__PURE__ */ jsx2("span", { children: tabId });
          }
          const directory = tabId.substring(0, lastSlash + 1);
          const filename = tabId.substring(lastSlash + 1);
          return /* @__PURE__ */ jsxs2("span", { className: "text-direction-ltr unicode-bidi-plaintext", children: [
            /* @__PURE__ */ jsx2("span", { className: "text-muted", style: { fontSize: "clamp(1px, 8cqw, 0.875rem)" }, children: directory }),
            /* @__PURE__ */ jsx2("span", { children: filename })
          ] });
        })() }),
        /* @__PURE__ */ jsx2(
          "button",
          {
            className: "flex flex-row justify-center items-center width-4 height-4 overflow-hidden border-transparent",
            onClick: (event) => {
              closeTab(tabId);
              event.stopPropagation();
            },
            children: /* @__PURE__ */ jsx2("i", { className: "fa-solid fa-xmark line-height-inherit scale-80" })
          }
        )
      ]
    }
  );
};

// src/components/tabs-dialog.jsx
import { jsx as jsx3, jsxs as jsxs3 } from "react/jsx-runtime";
import { Fragment } from "react";
import { Dialog, VisuallyHidden } from "radix-ui";
var TabsDialog = ({ tabsOrder, workspacePath, workspaceFiles, workspaceLoadedAt, openTab, reloadWorkspace }) => {
  return /* @__PURE__ */ jsxs3(Dialog.Root, { children: [
    /* @__PURE__ */ jsx3(Dialog.Trigger, { asChild: true, children: /* @__PURE__ */ jsx3("button", { className: "flex flex-row justify-center items-center width-6 height-6 overflow-hidden", children: /* @__PURE__ */ jsx3("i", { className: "fa-solid fa-plus line-height-inherit scale-80" }) }) }),
    /* @__PURE__ */ jsxs3(Dialog.Portal, { children: [
      /* @__PURE__ */ jsx3(Dialog.Overlay, { className: "dialog-overlay" }),
      /* @__PURE__ */ jsxs3(
        Dialog.Content,
        {
          className: "dialog-content flex flex-col gap-2 p-2",
          onCloseAutoFocus: (event) => {
            setTimeout(() => {
              if (document.activeElement instanceof HTMLElement) document.activeElement.blur();
            }, 0);
          },
          children: [
            /* @__PURE__ */ jsx3(Dialog.Title, { asChild: true, children: /* @__PURE__ */ jsx3("div", { className: "nowrap overflow-hidden ellipsis mr-6", children: workspacePath }) }),
            /* @__PURE__ */ jsx3(VisuallyHidden.Root, { asChild: true, children: /* @__PURE__ */ jsx3(Dialog.Description, { asChild: true, children: /* @__PURE__ */ jsx3("div", {}) }) }),
            /* @__PURE__ */ jsxs3("p", { children: [
              "Last refresh at: ",
              workspaceLoadedAt ? new Date(workspaceLoadedAt).toLocaleString() : ""
            ] }),
            /* @__PURE__ */ jsx3("div", { children: /* @__PURE__ */ jsxs3("button", { onClick: reloadWorkspace, className: "flex flex-row items-center gap-1 p-1 overflow-hidden", children: [
              /* @__PURE__ */ jsx3("i", { className: "fa-solid fa-arrows-rotate line-height-inherit scale-80" }),
              /* @__PURE__ */ jsx3("div", { children: "Refresh" })
            ] }) }),
            /* @__PURE__ */ jsx3(
              "div",
              {
                className: "gap-2 overflow-hidden-auto",
                style: {
                  display: "grid",
                  gridTemplateColumns: "auto 1fr",
                  maxHeight: "300px"
                },
                children: (workspaceFiles || []).map((fileId) => {
                  const isActiveTab = tabsOrder.includes(fileId);
                  return /* @__PURE__ */ jsxs3(Fragment, { children: [
                    /* @__PURE__ */ jsx3(Dialog.Close, { asChild: true, children: /* @__PURE__ */ jsx3(
                      "button",
                      {
                        className: `flex flex-row justify-center items-center width-6 height-6 overflow-hidden ${isActiveTab ? "text-muted active" : "inactive"}`,
                        onClick: () => openTab(fileId),
                        disabled: isActiveTab,
                        children: (() => {
                          if (isActiveTab) {
                            return /* @__PURE__ */ jsx3("i", { className: "fa-solid fa-check line-height-inherit scale-80" });
                          } else {
                            return /* @__PURE__ */ jsx3("i", { className: "fa-solid fa-plus line-height-inherit scale-80" });
                          }
                        })()
                      }
                    ) }),
                    /* @__PURE__ */ jsx3(
                      "div",
                      {
                        title: fileId,
                        className: `min-0 nowrap overflow-hidden ellipsis ${isActiveTab ? "text-muted active" : "inactive"}`,
                        children: fileId
                      }
                    )
                  ] }, fileId);
                })
              }
            ),
            /* @__PURE__ */ jsx3(Dialog.Close, { asChild: true, children: /* @__PURE__ */ jsx3(
              "button",
              {
                className: "dialog-close flex flex-row justify-center items-center width-4 height-4 overflow-hidden border-transparent",
                "aria-label": "close",
                children: /* @__PURE__ */ jsx3("i", { className: "fa-solid fa-xmark line-height-inherit scale-80" })
              }
            ) })
          ]
        }
      )
    ] })
  ] });
};

// src/components/tabs.jsx
import { Fragment as Fragment3 } from "react";
var Tabs = ({
  persistenceEverSynced,
  providerEverSynced,
  tabsOrder,
  activeTabId,
  workspacePath,
  workspaceFiles,
  workspaceLoadedAt,
  selectTab,
  closeTab,
  openTab,
  reorderTab,
  reloadWorkspace
}) => {
  return /* @__PURE__ */ jsx4("div", { className: "flex flex-row gap-2 border-b", children: (() => {
    if (!persistenceEverSynced || !providerEverSynced || !tabsOrder) {
      return /* @__PURE__ */ jsx4("div", { className: "px-2 py-3", children: /* @__PURE__ */ jsx4("div", { children: "\xA0" }) });
    }
    return /* @__PURE__ */ jsxs4(Fragment2, { children: [
      tabsOrder.map((tabId, tabIndex) => {
        const isActive = tabId === activeTabId;
        return /* @__PURE__ */ jsx4(
          Tab,
          {
            tabId,
            tabIndex,
            isActive,
            selectTab,
            closeTab,
            reorderTab
          },
          tabId
        );
      }),
      /* @__PURE__ */ jsx4("div", { className: "flex flex-row items-center p-2", children: /* @__PURE__ */ jsx4(
        TabsDialog,
        {
          tabsOrder,
          workspacePath,
          workspaceFiles,
          workspaceLoadedAt,
          openTab,
          reloadWorkspace
        }
      ) })
    ] });
  })() });
};

// src/components/tabs-content.jsx
import { jsx as jsx6 } from "react/jsx-runtime";

// src/components/tab-frame.jsx
import { jsx as jsx5 } from "react/jsx-runtime";
var TabFrame = ({ url, isActive }) => {
  return /* @__PURE__ */ jsx5(
    "iframe",
    {
      src: url,
      className: "absolute width-percent-100 height-percent-100 inset-0 border-none",
      style: {
        visibility: isActive ? "visible" : "hidden",
        zIndex: isActive ? 1 : 0,
        pointerEvents: isActive ? "auto" : "none"
      }
    }
  );
};

// src/components/tabs-content.jsx
var TabsContent = ({ persistenceEverSynced, providerEverSynced, tabsOrderStable, activeTabId }) => {
  return /* @__PURE__ */ jsx6("div", { className: "flex-1 min-0 relative bg", children: (() => {
    if (!persistenceEverSynced || !providerEverSynced || !tabsOrderStable) {
      return /* @__PURE__ */ jsx6("div", { children: "\xA0" });
    }
    return tabsOrderStable.map((tabId) => {
      const url = `${window.location.origin}/workspace/${encodeURI(tabId)}`;
      const isActive = tabId === activeTabId;
      return /* @__PURE__ */ jsx6(TabFrame, { url, isActive }, tabId);
    });
  })() });
};

// src/hooks/theme.jsx
import { useLayoutEffect, useState } from "react";
var useTheme = () => {
  const [theme, setTheme] = useState(null);
  useLayoutEffect(() => {
    const onTheme = (e) => setTheme(e.detail);
    window.addEventListener("theme", onTheme);
    setTheme(window.theme);
    return () => window.removeEventListener("theme", onTheme);
  }, []);
  return theme;
};

// src/hooks/fade.jsx
import { useEffect } from "react";
var useFadeIn = () => {
  useEffect(() => {
    document.getElementById("root").classList.remove("preload");
  }, []);
};

// src/components/app.jsx
import { useEffect as useEffect2, useState as useState2, Fragment as Fragment5 } from "react";
import { v4 as uuidv4 } from "uuid";
import * as Y from "yjs";
import { WebsocketProvider } from "y-websocket";
import { IndexeddbPersistence } from "y-indexeddb";
var docId = "ccai";
var wsProtocol = window.location.protocol === "https:" ? "wss:" : "ws:";
var wsUrl = `${wsProtocol}//${window.location.host}/documents`;
var App = () => {
  const theme = useTheme();
  useFadeIn();
  const [yDoc, setYDoc] = useState2(null);
  const [yData, setYData] = useState2(null);
  const [yPersistence, setYPersistence] = useState2(null);
  const [persistenceEverSynced, setPersistenceEverSynced] = useState2(false);
  const [yProvider, setYProvider] = useState2(null);
  const [providerStatus, setProviderStatus] = useState2("");
  const [providerIsSynced, setProviderIsSynced] = useState2(false);
  const [providerEverSynced, setProviderEverSynced] = useState2(false);
  const [yTabs, setYTabs] = useState2(null);
  const [tabsOrder, setTabsOrder] = useState2(null);
  const [tabsOrderStable, setTabsOrderStable] = useState2(null);
  const [activeTabId, setActiveTabId] = useState2(null);
  const [workspacePath, setWorkspacePath] = useState2(null);
  const [workspaceFiles, setWorkspaceFiles] = useState2(null);
  const [workspaceLoadedAt, setWorkspaceLoadedAt] = useState2(null);
  const [yRequests, setYRequests] = useState2(null);
  const [yRequestsOrder, setYRequestsOrder] = useState2(null);
  useEffect2(() => {
    let yDoc2 = null;
    let yData2 = null;
    let yDataObserver = null;
    let yPersistence2 = null;
    let yProvider2 = null;
    const init = () => {
      yDoc2 = new Y.Doc();
      setYDoc(yDoc2);
      yData2 = yDoc2.getMap("data");
      setYData(yData2);
      yPersistence2 = new IndexeddbPersistence(docId, yDoc2);
      setYPersistence(yPersistence2);
      yPersistence2.once("synced", () => {
        setPersistenceEverSynced(true);
        let dataId = yData2.get("id");
        const updateTabsOrder = () => {
          const updatedTabsOrder = yData2.get("tabs_order");
          setTabsOrder(updatedTabsOrder);
          if (!updatedTabsOrder) {
            setTabsOrderStable(null);
            setActiveTabId(null);
            return;
          }
          setTabsOrderStable((prev) => {
            if (!prev) return [...updatedTabsOrder];
            const keepTabs = prev.filter((id) => updatedTabsOrder.includes(id));
            const newTabs = updatedTabsOrder.filter((id) => !prev.includes(id));
            return [...keepTabs, ...newTabs];
          });
          setActiveTabId((prev) => {
            if (prev) return prev;
            return updatedTabsOrder[0];
          });
        };
        yDataObserver = (event) => {
          if (event.keysChanged.has("id")) {
            const updatedDataId = yData2.get("id");
            if (!dataId) {
              dataId = updatedDataId;
            } else {
              console.log("ccai: clearing database");
              setProviderEverSynced(false);
              setPersistenceEverSynced(false);
              yData2.unobserve(yDataObserver);
              yDataObserver = null;
              yData2 = null;
              setYData(null);
              yProvider2.destroy();
              yProvider2 = null;
              setYProvider(null);
              const _yDoc = yDoc2;
              yDoc2 = null;
              setYDoc(null);
              const clearDataPromise = yPersistence2.clearData();
              yPersistence2 = null;
              setYPersistence(null);
              clearDataPromise.finally(() => {
                _yDoc.destroy();
                init();
              });
              return;
            }
          }
          if (event.keysChanged.has("tabs")) setYTabs(yData2.get("tabs"));
          if (event.keysChanged.has("tabs_order")) updateTabsOrder();
          if (event.keysChanged.has("workspace_path")) setWorkspacePath(yData2.get("workspace_path"));
          if (event.keysChanged.has("workspace_files")) setWorkspaceFiles(yData2.get("workspace_files"));
          if (event.keysChanged.has("workspace_loaded_at")) setWorkspaceLoadedAt(yData2.get("workspace_loaded_at"));
          if (event.keysChanged.has("requests")) setYRequests(yData2.get("requests"));
          if (event.keysChanged.has("requests_order")) setYRequestsOrder(yData2.get("requests_order"));
        };
        yData2.observe(yDataObserver);
        setYTabs(yData2.get("tabs"));
        updateTabsOrder();
        setWorkspacePath(yData2.get("workspace_path"));
        setWorkspaceFiles(yData2.get("workspace_files"));
        setWorkspaceLoadedAt(yData2.get("workspace_loaded_at"));
        setYRequests(yData2.get("requests"));
        setYRequestsOrder(yData2.get("requests_order"));
        yProvider2 = new WebsocketProvider(wsUrl, docId, yDoc2);
        setYProvider(yProvider2);
        yProvider2.on("status", (status) => {
          setProviderStatus(status?.status || "");
        });
        yProvider2.on("sync", (isSynced) => {
          setProviderIsSynced(isSynced);
          if (isSynced) setProviderEverSynced(true);
        });
        yProvider2.awareness.setLocalStateField("user", { color: "#0064BAFF" });
      });
    };
    init();
    return () => {
      if (yData2 && yDataObserver) yData2.unobserve(yDataObserver);
      if (yProvider2) yProvider2.destroy();
      if (yPersistence2) yPersistence2.destroy();
      if (yDoc2) yDoc2.destroy();
    };
  }, []);
  const selectTab = (tabId) => {
    setActiveTabId(tabId);
  };
  const closeTab = (tabId) => {
    const updatedTabsOrder = tabsOrder.filter((id) => id !== tabId);
    if (tabId === activeTabId) {
      const currentIndex = tabsOrder.indexOf(tabId);
      const newIndex = Math.min(currentIndex, updatedTabsOrder.length - 1);
      const newActiveTab = updatedTabsOrder[newIndex];
      setActiveTabId(newActiveTab);
    }
    yData.set("tabs_order", updatedTabsOrder);
  };
  const reorderTab = (dragIndex, dropIndex) => {
    const updatedTabsOrder = [...tabsOrder];
    const [removed] = updatedTabsOrder.splice(dragIndex, 1);
    dropIndex = dragIndex < dropIndex ? dropIndex - 1 : dropIndex;
    updatedTabsOrder.splice(dropIndex, 0, removed);
    yData.set("tabs_order", updatedTabsOrder);
  };
  const openTab = (tabId) => {
    const yTab = yTabs.get(tabId);
    if (!yTab) return;
    yData.set("tabs_order", [...tabsOrder, tabId]);
    setActiveTabId(tabId);
  };
  const reloadWorkspace = () => {
    yDoc.transact(() => {
      const id = uuidv4();
      const request = new Y.Map(Object.entries({
        "id": id,
        "type": "reload_workspace",
        "priority": 0
      }));
      yRequests.set(id, request);
      yRequestsOrder.push([id]);
    });
  };
  return /* @__PURE__ */ jsxs5(Fragment4, { children: [
    /* @__PURE__ */ jsx7(
      Header,
      {
        theme,
        persistenceEverSynced,
        providerStatus,
        providerIsSynced,
        providerEverSynced
      }
    ),
    /* @__PURE__ */ jsx7(
      Tabs,
      {
        persistenceEverSynced,
        providerEverSynced,
        tabsOrder,
        activeTabId,
        workspacePath,
        workspaceFiles,
        workspaceLoadedAt,
        selectTab,
        closeTab,
        openTab,
        reorderTab,
        reloadWorkspace
      }
    ),
    /* @__PURE__ */ jsx7(
      TabsContent,
      {
        persistenceEverSynced,
        providerEverSynced,
        tabsOrderStable,
        activeTabId
      }
    )
  ] });
};

// src/components/notebook/app.jsx
import { jsx as jsx13 } from "react/jsx-runtime";

// src/components/notebook/notebook.jsx
import { Fragment as Fragment8, jsx as jsx12, jsxs as jsxs9 } from "react/jsx-runtime";

// src/components/notebook/cell.jsx
import { Fragment as Fragment7, jsx as jsx10, jsxs as jsxs7 } from "react/jsx-runtime";

// src/components/codemirror.jsx
import { jsx as jsx8 } from "react/jsx-runtime";
import { useLayoutEffect as useLayoutEffect2, useRef } from "react";
import { yCollab } from "y-codemirror.next";
import { Compartment, EditorState } from "@codemirror/state";
import {
  crosshairCursor,
  drawSelection,
  dropCursor,
  EditorView,
  highlightActiveLine,
  highlightActiveLineGutter,
  highlightSpecialChars,
  keymap,
  lineNumbers,
  rectangularSelection
} from "@codemirror/view";
import { bracketMatching, defaultHighlightStyle, foldGutter, foldKeymap, HighlightStyle, indentOnInput, syntaxHighlighting } from "@codemirror/language";
import { python } from "@codemirror/lang-python";
import { markdown } from "@codemirror/lang-markdown";
import { javascript } from "@codemirror/lang-javascript";
import { json } from "@codemirror/lang-json";
import { defaultKeymap, history, historyKeymap, indentWithTab } from "@codemirror/commands";
import { highlightSelectionMatches, searchKeymap } from "@codemirror/search";
import { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from "@codemirror/autocomplete";
import { lintKeymap } from "@codemirror/lint";
import { tags as t } from "@lezer/highlight";
var codemirrorDark = () => {
  const theme = EditorView.theme(
    {
      "&": {
        backgroundColor: "#1E1F22",
        color: "#BCBEC4"
      },
      ".cm-gutters": {
        backgroundColor: "rgba(50, 50, 50, 0.1)",
        color: "#4B5059",
        borderRightColor: "transparent"
      },
      ".cm-content": {
        caretColor: "#CED0D6"
      },
      ".cm-cursor, .cm-dropCursor": {
        borderLeftColor: "#CED0D6"
      },
      ".cm-activeLine": {
        backgroundColor: "rgba(100, 100, 100, 0.1)"
      },
      ".cm-activeLineGutter": {
        backgroundColor: "rgba(100, 100, 100, 0.1)"
      },
      "&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection": {
        background: "rgba(255, 255, 255, 0.1) !important"
      },
      "& .cm-selectionMatch": {
        backgroundColor: "rgba(255, 255, 255, 0.2)"
      },
      ".cm-foldPlaceholder": {
        backgroundColor: "#BCBEC4",
        borderColor: "#BCBEC4"
      }
    },
    { dark: true }
  );
  const highlightStyle = HighlightStyle.define([
    { tag: [t.atom], color: "#C77DBB" },
    { tag: [t.number], color: "#2AACB8" },
    { tag: [t.comment], color: "#7A7E85" },
    { tag: [t.string], color: "#6AAB73" },
    { tag: [t.variableName], color: "#BCBEC4" },
    { tag: [t.operator], color: "#BCBEC4" },
    { tag: [t.meta], color: "#B3AE60" },
    { tag: [t.className], color: "#BCBEC4" },
    { tag: [t.propertyName], color: "#C77DBB" },
    { tag: [t.keyword], color: "#CF8E6D" },
    { tag: [t.tagName], color: "#D5B778" },
    { tag: [t.typeName], color: "#16BAAC" }
  ]);
  return [theme, syntaxHighlighting(highlightStyle)];
};
var CodeMirror = ({ yText, yUndoManager, awareness, language, theme, className, style, focus, onFocus, onBlur, onKeyDown }) => {
  const elementRef = useRef(null);
  const stateRef = useRef(null);
  const viewRef = useRef(null);
  const themeCompartmentRef = useRef(null);
  useLayoutEffect2(() => {
    if (!yText || !yUndoManager || !awareness) return;
    const themeCompartment = new Compartment();
    themeCompartmentRef.current = themeCompartment;
    const extensions = [
      lineNumbers({
        formatNumber: (line) => {
          return String(line).padStart(2, "\xA0");
        }
      }),
      highlightActiveLineGutter(),
      highlightSpecialChars(),
      history(),
      foldGutter(),
      drawSelection(),
      dropCursor(),
      EditorState.allowMultipleSelections.of(true),
      indentOnInput(),
      syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
      bracketMatching(),
      closeBrackets(),
      autocompletion(),
      rectangularSelection(),
      crosshairCursor(),
      highlightActiveLine(),
      highlightSelectionMatches(),
      keymap.of([
        indentWithTab,
        ...closeBracketsKeymap,
        ...defaultKeymap,
        ...searchKeymap,
        ...historyKeymap,
        ...foldKeymap,
        ...completionKeymap,
        ...lintKeymap
      ]),
      EditorView.updateListener.of((update) => {
        if (update.focusChanged && update.view.hasFocus && onFocus) onFocus(update);
        if (update.focusChanged && !update.view.hasFocus && onBlur) onBlur(update);
      }),
      EditorView.lineWrapping,
      yCollab(yText, awareness, { yUndoManager }),
      themeCompartment.of(theme === "light" ? [] : codemirrorDark())
    ];
    switch (language) {
      case "python":
        extensions.push(python());
        break;
      case "markdown":
        extensions.push(markdown());
        break;
      case "javascript":
        extensions.push(javascript({ jsx: true }));
        break;
      case "json":
        extensions.push(json());
        break;
      default:
        break;
    }
    const state = EditorState.create({
      doc: yText.toString(),
      extensions
    });
    stateRef.current = state;
    const view = new EditorView({ state, parent: elementRef.current });
    viewRef.current = view;
    if (focus) {
      view.focus();
      view.dispatch({ selection: { anchor: 0 } });
    }
    return () => {
      view.destroy();
      viewRef.current = null;
      stateRef.current = null;
      themeCompartmentRef.current = null;
    };
  }, [yText, yUndoManager, awareness, language, theme, focus, onFocus, onBlur]);
  useLayoutEffect2(() => {
    if (!stateRef.current || !viewRef.current || !themeCompartmentRef.current) return;
    viewRef.current.dispatch({
      effects: themeCompartmentRef.current.reconfigure(
        theme === "light" ? [] : codemirrorDark()
      )
    });
  }, [theme]);
  return /* @__PURE__ */ jsx8("div", { ref: elementRef, className: ["cm-container", className].filter(Boolean).join(" "), style, onKeyDown });
};

// src/components/notebook/output.jsx
import { Fragment as Fragment6, jsx as jsx9, jsxs as jsxs6 } from "react/jsx-runtime";

// src/components/dom-parser.jsx
import { createElement } from "react";
var parseDom = (node, index = 0, components2 = {}) => {
  if (node.nodeType === Node.TEXT_NODE) {
    return node.textContent;
  }
  if (node.nodeType === Node.ELEMENT_NODE) {
    const tag = node.tagName.toLowerCase();
    const props = { key: index };
    Array.from(node.attributes).forEach((attr) => {
      if (attr.name === "class") {
        props["className"] = attr.value;
      } else {
        props[attr.name] = attr.value;
      }
    });
    if (components2[tag]) {
      return createElement(components2[tag], {
        ...props,
        content: node.textContent
      });
    }
    const children = Array.from(node.childNodes).map((child, i) => parseDom(child, i, components2));
    return createElement(tag, props, ...children);
  }
  return null;
};

// src/components/code-highlight.jsx
import { createElement as createElement2, memo, useMemo } from "react";
import hljs from "highlight.js";
hljs.configure({
  languages: [
    "plaintext",
    "markdown",
    "shell",
    "python",
    "json",
    "javascript",
    "typescript",
    "java",
    "csharp",
    "cpp"
  ]
});
var parser = new DOMParser();
var languageRegex = /\blang(?:uage)?-([\w-]+)\b/i;
var CodeHighlight = memo(({ content, className }) => {
  if (typeof content !== "string") return;
  const language = useMemo(() => {
    const match = languageRegex.exec(className);
    if (match) {
      if (hljs.getLanguage(match[1])) return match[1];
      else return "no-highlight";
    } else {
      return null;
    }
  }, [className]);
  const result = language ? hljs.highlight(content, { language, ignoreIllegals: true }) : hljs.highlightAuto(content);
  const doc = parser.parseFromString(result.value, "text/html");
  const elements = Array.from(doc.body.childNodes).map((node, i) => parseDom(node, i));
  return createElement2("code", { className }, ...elements);
});

// src/components/ansi.jsx
import { memo as memo2, createElement as createElement3 } from "react";
import Convert from "ansi-to-html";
var convert = new Convert({
  escapeXML: true,
  newline: true,
  colors: {
    0: "#000000FF",
    1: "#CD3131FF",
    2: "#0DBC79FF",
    3: "#E5E510FF",
    4: "#2472C8FF",
    5: "#BC3FBCFF",
    6: "#11A8CDFF",
    7: "#E5E5E5FF",
    8: "#666666FF",
    9: "#F14C4CFF",
    10: "#23D18BFF",
    11: "#F5F543FF",
    12: "#3B8EEAFF",
    13: "#D670D6FF",
    14: "#29B8DBFF",
    15: "#FFFFFFFF"
  }
});
var domToReact = (node, index = 0) => {
  if (node.nodeType === Node.TEXT_NODE) {
    return node.textContent;
  }
  if (node.nodeType === Node.ELEMENT_NODE) {
    const tag = node.tagName.toLowerCase();
    const props = { key: index };
    Array.from(node.attributes).forEach((attr) => {
      if (attr.name === "class") {
        props["className"] = attr.value;
      } else if (attr.name === "style") {
        const styleObj = {};
        attr.value.split(";").forEach((rule) => {
          const [property, value] = rule.split(":").map((s) => s.trim());
          if (property && value) {
            const camelProp = property.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());
            styleObj[camelProp] = value;
          }
        });
        props["style"] = styleObj;
      } else {
        props[attr.name] = attr.value;
      }
    });
    const children = Array.from(node.childNodes).map((child, i) => domToReact(child, i));
    return createElement3(tag, props, ...children);
  }
  return null;
};
var Ansi = memo2(({ content, className }) => {
  if (typeof content !== "string") return;
  const html = convert.toHtml(content);
  const parser3 = new DOMParser();
  const doc = parser3.parseFromString(html, "text/html");
  const elements = Array.from(doc.body.childNodes).map((node, i) => domToReact(node, i));
  return createElement3("div", { className: ["ansi", className].filter(Boolean).join(" ") }, ...elements);
});

// src/components/notebook/output.jsx
import { useEffect as useEffect3, useRef as useRef2, useState as useState3 } from "react";
var HtmlOutput = ({ content, className }) => {
  const elementRef = useRef2(null);
  useEffect3(() => {
    if (elementRef.current && content) {
      const div = document.createElement("div");
      div.innerHTML = content;
      elementRef.current.appendChild(div);
      return () => {
        if (elementRef.current && div) {
          elementRef.current.removeChild(div);
        }
      };
    }
  }, [content]);
  return /* @__PURE__ */ jsx9("div", { ref: elementRef, className });
};
var JavascriptOutput = ({ content, className }) => {
  const elementRef = useRef2(null);
  const [shouldRun, setShouldRun] = useState3(false);
  useEffect3(() => {
    if (elementRef.current && content && shouldRun) {
      const scriptElement = document.createElement("script");
      scriptElement.textContent = content;
      elementRef.current.appendChild(scriptElement);
      return () => {
        if (elementRef.current && scriptElement) {
          elementRef.current.removeChild(scriptElement);
        }
      };
    }
  }, [content, shouldRun]);
  return /* @__PURE__ */ jsxs6(Fragment6, { children: [
    /* @__PURE__ */ jsxs6("div", { className: `${shouldRun ? "opacity-50" : "opacity-100"}`, children: [
      /* @__PURE__ */ jsx9("pre", { children: /* @__PURE__ */ jsx9(CodeHighlight, { content: "// Javascript", className: "language-javascript" }) }),
      /* @__PURE__ */ jsx9("pre", { children: /* @__PURE__ */ jsx9(CodeHighlight, { content, className: "language-javascript" }) }),
      !shouldRun && /* @__PURE__ */ jsx9("div", { className: "py-1", children: /* @__PURE__ */ jsx9("button", { className: "px-2", onClick: () => setShouldRun(true), children: "Run" }) })
    ] }),
    /* @__PURE__ */ jsx9("div", { ref: elementRef, className })
  ] });
};
var CellOutput = ({ output }) => {
  return /* @__PURE__ */ jsx9("div", { className: "overflow-hidden px-2", children: (() => {
    if (output.output_type === "display_data" || output.output_type === "execute_result") {
      const data = output.data || {};
      if (data["text/html"]) {
        return /* @__PURE__ */ jsx9(HtmlOutput, { content: data["text/html"] });
      }
      if (data["text/javascript"] || data["application/javascript"]) {
        return /* @__PURE__ */ jsx9(JavascriptOutput, { content: data["text/javascript"] || data["application/javascript"] });
      }
      if (data["image/png"]) {
        return /* @__PURE__ */ jsx9("img", { src: `data:image/png;base64,${data["image/png"]}` });
      }
      if (data["application/json"]) {
        return /* @__PURE__ */ jsx9("pre", { children: /* @__PURE__ */ jsx9(CodeHighlight, { content: data["application/json"], className: "language-json" }) });
      }
      if (data["text/plain"]) {
        return /* @__PURE__ */ jsx9("p", { children: data["text/plain"] });
      }
      return /* @__PURE__ */ jsx9("pre", { children: /* @__PURE__ */ jsx9(CodeHighlight, { content: JSON.stringify(data, null, 2), className: "language-json" }) });
    }
    if (output.output_type === "stream") {
      return /* @__PURE__ */ jsx9("pre", { children: /* @__PURE__ */ jsx9(CodeHighlight, { content: output.text, className: "language-plaintext" }) });
    }
    if (output.output_type === "error") {
      return /* @__PURE__ */ jsxs6(Fragment6, { children: [
        /* @__PURE__ */ jsx9("pre", { children: /* @__PURE__ */ jsx9(CodeHighlight, { content: `${output.ename}: ${output.evalue}`, className: "language-plaintext" }) }),
        /* @__PURE__ */ jsx9(Ansi, { content: (output.traceback || []).join("\n") })
      ] });
    }
    return /* @__PURE__ */ jsx9("pre", { children: /* @__PURE__ */ jsx9(CodeHighlight, { content: JSON.stringify(output, null, 2), className: "language-json" }) });
  })() });
};

// src/components/notebook/cell.jsx
import { useLayoutEffect as useLayoutEffect3, useState as useState4, useRef as useRef3, memo as memo3 } from "react";
import { Progress } from "radix-ui";
import * as Y2 from "yjs";
var Cell = memo3(({
  theme,
  yProvider,
  notebookId: notebookId2,
  yRequests,
  yCells,
  cellsOrder,
  yNotebookRequests,
  cellId,
  cellIndex,
  resizeAnnounce,
  executeCell,
  deleteCell,
  reorderCell
}) => {
  const [yCell, setYCell] = useState4(null);
  const [ySource, setYSource] = useState4(null);
  const [source, setSource] = useState4(null);
  const [ySourceUndoManager, setYSourceUndoManager] = useState4(null);
  const [pendingExecuteRequests, setPendingExecuteRequests] = useState4(null);
  const [cellType, setCellType] = useState4(null);
  const [executionSource, setExecutionSource] = useState4(null);
  const [executionCount, setExecutionCount] = useState4(null);
  const [metadata, setMetadata] = useState4(null);
  const [outputs, setOutputs] = useState4(null);
  const containerRef = useRef3(null);
  const [initialized, setInitialized] = useState4(false);
  const valid = notebookId2 && yRequests && yCells && cellsOrder && yNotebookRequests && cellId && cellIndex != null && yCell && ySource;
  useLayoutEffect3(() => {
    const initialized2 = notebookId2 && yRequests && yCells && yNotebookRequests && cellId;
    setInitialized(initialized2);
    if (!initialized2) return;
    const yCell2 = yCells.get(cellId);
    setYCell(yCell2);
    if (!yCell2) return;
    const ySource2 = yCell2.get("source");
    setYSource(ySource2);
    const ySourceObserver = () => {
      setSource(ySource2.toString());
    };
    let ySourceUndoManager2 = null;
    if (ySource2) {
      ySource2.observe(ySourceObserver);
      setSource(ySource2.toString());
      ySourceUndoManager2 = new Y2.UndoManager(ySource2);
    }
    setYSourceUndoManager(ySourceUndoManager2);
    const updatePendingRequests = () => {
      setPendingExecuteRequests(yNotebookRequests.toArray().filter((requestId) => {
        const yRequest = yRequests.get(requestId);
        return yRequest && yRequest.get("type") === "execute_cell" && yRequest.get("notebook_id") === notebookId2 && yRequest.get("cell_id") === cellId;
      }));
    };
    const yNotebookRequestsObserver = () => {
      updatePendingRequests();
    };
    yNotebookRequests.observe(yNotebookRequestsObserver);
    updatePendingRequests();
    const yCellObserver = (event) => {
      if (event.keysChanged.has("cell_type")) setCellType(yCell2.get("cell_type"));
      if (event.keysChanged.has("execution_source")) setExecutionSource(yCell2.get("execution_source"));
      if (event.keysChanged.has("execution_count")) setExecutionCount(yCell2.get("execution_count"));
      if (event.keysChanged.has("metadata")) setMetadata(yCell2.get("metadata"));
      if (event.keysChanged.has("outputs")) setOutputs(yCell2.get("outputs"));
    };
    yCell2.observe(yCellObserver);
    setCellType(yCell2.get("cell_type"));
    setExecutionSource(yCell2.get("execution_source"));
    setExecutionCount(yCell2.get("execution_count"));
    setMetadata(yCell2.get("metadata"));
    setOutputs(yCell2.get("outputs"));
    return () => {
      yCell2.unobserve(yCellObserver);
      yNotebookRequests.unobserve(yNotebookRequestsObserver);
      if (ySource2) ySourceUndoManager2.destroy();
    };
  }, [notebookId2, yRequests, yCells, yNotebookRequests, cellId]);
  useLayoutEffect3(() => {
    if (!resizeAnnounce) return;
    const resizeObserver = new ResizeObserver(resizeAnnounce);
    resizeObserver.observe(containerRef.current);
    return () => {
      resizeObserver.disconnect();
    };
  }, [resizeAnnounce]);
  return /* @__PURE__ */ jsx10("div", { ref: containerRef, className: "flex flex-col shrink-0 mr-2 mb-2 border", children: (() => {
    if (!initialized) return /* @__PURE__ */ jsx10("div", { className: "p-2", children: "\xA0" });
    if (!valid) return /* @__PURE__ */ jsx10("div", { className: "p-2", children: "Invalid cell." });
    return /* @__PURE__ */ jsxs7(Fragment7, { children: [
      /* @__PURE__ */ jsxs7("div", { className: "flex flex-row justify-between items-center gap-2 p-2", children: [
        /* @__PURE__ */ jsxs7("div", { className: "flex flex-row items-center gap-2", children: [
          /* @__PURE__ */ jsxs7("div", { children: [
            "[",
            executionCount != null ? executionCount : "\xA0",
            "]:"
          ] }),
          /* @__PURE__ */ jsxs7(
            "button",
            {
              className: "flex flex-row items-center gap-1 p-1 overflow-hidden text-smaller-2",
              onClick: () => executeCell(cellId),
              style: source !== executionSource ? { boxShadow: "0px 0px 2px 1px rgba(255, 140, 0, 0.3)" } : {},
              children: [
                /* @__PURE__ */ jsx10("i", { className: "fa-solid fa-play line-height-inherit scale-80" }),
                /* @__PURE__ */ jsx10("div", { children: "Execute" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxs7("div", { className: "flex flex-row items-center gap-2 overflow-hidden", children: [
          /* @__PURE__ */ jsxs7("button", { className: "flex flex-row items-center gap-1 p-1 overflow-hidden text-smaller-2", onClick: () => deleteCell(cellId, cellIndex), children: [
            /* @__PURE__ */ jsx10("i", { className: "fa-solid fa-trash-can line-height-inherit scale-80" }),
            /* @__PURE__ */ jsx10("div", { children: "Delete" })
          ] }),
          /* @__PURE__ */ jsxs7("div", { className: "flex flex-col justify-center items-center gap-1px", children: [
            /* @__PURE__ */ jsx10(
              "button",
              {
                className: "flex flex-row justify-center items-center width-4 height-4 overflow-hidden text-smaller-6",
                onClick: () => reorderCell(cellId, cellIndex, cellIndex - 1),
                disabled: cellIndex === 0,
                children: /* @__PURE__ */ jsx10("i", { className: "fa-solid fa-caret-up" })
              }
            ),
            /* @__PURE__ */ jsx10(
              "button",
              {
                className: "flex flex-row justify-center items-center width-4 height-4 overflow-hidden text-smaller-6",
                onClick: () => reorderCell(cellId, cellIndex, cellIndex + 1),
                disabled: cellIndex === cellsOrder.length - 1,
                children: /* @__PURE__ */ jsx10("i", { className: "fa-solid fa-caret-down" })
              }
            )
          ] })
        ] })
      ] }),
      (() => {
        if (pendingExecuteRequests.length > 0) {
          return /* @__PURE__ */ jsx10(Progress.Root, { className: "progress-bar-root height-1px", value: null, children: /* @__PURE__ */ jsx10(Progress.Indicator, { className: "progress-bar-indicator progress-bar-shimmer" }) });
        } else {
          return /* @__PURE__ */ jsx10("div", { className: "height-1px", style: { background: "var(--color-border)" } });
        }
      })(),
      /* @__PURE__ */ jsx10(
        CodeMirror,
        {
          yText: ySource,
          yUndoManager: ySourceUndoManager,
          awareness: yProvider.awareness,
          language: "python",
          theme,
          className: `cm-min-height-10vh ${outputs?.length ? "cm-border-b" : "cm-border-none"}`
        }
      ),
      /* @__PURE__ */ jsx10("div", { className: "flex flex-col", children: (outputs || []).map((output, index) => {
        return /* @__PURE__ */ jsx10(CellOutput, { output }, output.metadata.id);
      }) })
    ] });
  })() });
});

// src/components/notebook/file-sync-dialog.jsx
import { jsx as jsx11, jsxs as jsxs8 } from "react/jsx-runtime";
import { Dialog as Dialog2, VisuallyHidden as VisuallyHidden2 } from "radix-ui";
var FileSyncDialog = ({ notebookId: notebookId2, notebookAbsPath, notebookSyncedAt, disabled, saveNotebook, reloadNotebook }) => {
  return /* @__PURE__ */ jsxs8(Dialog2.Root, { children: [
    /* @__PURE__ */ jsx11(Dialog2.Trigger, { asChild: true, disabled, children: /* @__PURE__ */ jsxs8("button", { className: "flex flex-row items-center gap-1 p-1 overflow-hidden text-smaller-2", children: [
      /* @__PURE__ */ jsx11("i", { className: "fa-solid fa-file-code line-height-inherit scale-80" }),
      /* @__PURE__ */ jsx11("div", { children: "File Sync" })
    ] }) }),
    /* @__PURE__ */ jsxs8(Dialog2.Portal, { children: [
      /* @__PURE__ */ jsx11(Dialog2.Overlay, { className: "dialog-overlay" }),
      /* @__PURE__ */ jsxs8(
        Dialog2.Content,
        {
          className: "dialog-content flex flex-col gap-2 p-2",
          onCloseAutoFocus: (event) => {
            setTimeout(() => {
              if (document.activeElement instanceof HTMLElement) document.activeElement.blur();
            }, 0);
          },
          children: [
            /* @__PURE__ */ jsx11(Dialog2.Title, { asChild: true, children: /* @__PURE__ */ jsx11("div", { className: "nowrap overflow-hidden ellipsis mr-6", children: notebookId2 }) }),
            /* @__PURE__ */ jsx11(VisuallyHidden2.Root, { asChild: true, children: /* @__PURE__ */ jsx11(Dialog2.Description, { asChild: true, children: /* @__PURE__ */ jsx11("div", {}) }) }),
            /* @__PURE__ */ jsxs8("p", { children: [
              "Last synced at: ",
              notebookSyncedAt ? new Date(notebookSyncedAt).toLocaleString() : ""
            ] }),
            /* @__PURE__ */ jsx11("p", { children: notebookAbsPath }),
            /* @__PURE__ */ jsxs8("div", { className: "flex flex-row gap-2", children: [
              /* @__PURE__ */ jsxs8("button", { onClick: saveNotebook, className: "flex flex-row items-center gap-1 px-2 py-1 overflow-hidden", children: [
                /* @__PURE__ */ jsx11("i", { className: "fa-solid fa-floppy-disk line-height-inherit scale-80" }),
                /* @__PURE__ */ jsx11("div", { children: "Save to File" })
              ] }),
              /* @__PURE__ */ jsxs8("button", { onClick: reloadNotebook, className: "flex flex-row items-center gap-1 px-2 py-1 overflow-hidden", children: [
                /* @__PURE__ */ jsx11("i", { className: "fa-solid fa-triangle-exclamation line-height-inherit scale-80" }),
                /* @__PURE__ */ jsx11("div", { children: "Reload File" })
              ] })
            ] }),
            /* @__PURE__ */ jsxs8("div", { className: "flex flex-row text-smaller-1 text-muted", children: [
              /* @__PURE__ */ jsx11("div", { className: "px-2", children: /* @__PURE__ */ jsx11("i", { className: "fa-solid fa-info line-height-inherit scale-80" }) }),
              /* @__PURE__ */ jsxs8("p", { className: "px-2", children: [
                "A workspace .ipynb file is loaded and transformed into a CRDT object, once, upon discovery. Use the options above to synchronize them by either ",
                /* @__PURE__ */ jsx11("strong", { children: "updating the file" }),
                ", or ",
                /* @__PURE__ */ jsx11("strong", { children: "reloading from the file" }),
                "."
              ] })
            ] }),
            /* @__PURE__ */ jsx11(Dialog2.Close, { asChild: true, children: /* @__PURE__ */ jsx11(
              "button",
              {
                className: "dialog-close flex flex-row justify-center items-center width-4 height-4 overflow-hidden border-transparent",
                "aria-label": "close",
                children: /* @__PURE__ */ jsx11("i", { className: "fa-solid fa-xmark line-height-inherit scale-80" })
              }
            ) })
          ]
        }
      )
    ] })
  ] });
};

// src/hooks/autoscroll.jsx
import { useEffect as useEffect4, useRef as useRef4, useCallback } from "react";
var useAutoScroll = (containerRef) => {
  const pinnedRef = useRef4(null);
  const pinnedTimeoutRef = useRef4(null);
  const isBottomRef = useRef4(null);
  const prevTopRef = useRef4(null);
  const isActiveRef = useRef4(null);
  const timeoutRef = useRef4(null);
  const animationRef = useRef4(null);
  const timestampRef = useRef4(null);
  const pinMs = 1e3;
  const timeoutMs = 1e3;
  const autoScrollSpeed = 0.5;
  const bottomPixels = 5;
  const maxDelta = 1e3;
  const autoScrollAnimation = useCallback((timestamp) => {
    animationRef.current = null;
    const prevTimestamp = timestampRef.current || timestamp;
    const delta = Math.min(timestamp - prevTimestamp, maxDelta) * 1e-3;
    timestampRef.current = timestamp;
    const container = containerRef.current;
    const scrollBottom = container.scrollHeight - container.scrollTop - container.clientHeight;
    if (scrollBottom > 1) {
      container.scrollTop += Math.min(Math.max(scrollBottom * autoScrollSpeed * delta, 1), scrollBottom);
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    } else {
      if (!timeoutRef.current) {
        timeoutRef.current = setTimeout(() => {
          isActiveRef.current = false;
          cancelAnimationFrame(animationRef.current);
          timeoutRef.current = null;
        }, timeoutMs);
      }
    }
    animationRef.current = requestAnimationFrame(autoScrollAnimation);
  }, [containerRef]);
  const onContainerScroll = useCallback(() => {
    const container = containerRef.current;
    const scrollBottom = container.scrollHeight - container.scrollTop - container.clientHeight;
    isBottomRef.current = scrollBottom < bottomPixels;
    const prevTop = prevTopRef.current;
    prevTopRef.current = container.scrollTop;
    if (prevTop && container.scrollTop < prevTop) {
      if (pinnedRef.current) {
        pinnedRef.current = false;
        clearTimeout(pinnedTimeoutRef.current);
        pinnedTimeoutRef.current = null;
      }
      if (isActiveRef.current) {
        isActiveRef.current = false;
        cancelAnimationFrame(animationRef.current);
        if (timeoutRef.current) {
          clearTimeout(timeoutRef.current);
          timeoutRef.current = null;
        }
      }
      isBottomRef.current = false;
    }
  }, [containerRef]);
  const onContainerResize = useCallback(() => {
    if (pinnedRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    } else if (!isActiveRef.current && isBottomRef.current) {
      isActiveRef.current = true;
      animationRef.current = requestAnimationFrame(autoScrollAnimation);
    }
  }, [containerRef, autoScrollAnimation]);
  const hardScroll = useCallback(() => {
    if (isActiveRef.current) {
      isActiveRef.current = false;
      cancelAnimationFrame(animationRef.current);
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    }
    pinnedRef.current = true;
    if (pinnedTimeoutRef.current) clearTimeout(pinnedTimeoutRef.current);
    pinnedTimeoutRef.current = setTimeout(() => {
      pinnedTimeoutRef.current = null;
      pinnedRef.current = false;
      isActiveRef.current = true;
      animationRef.current = requestAnimationFrame(autoScrollAnimation);
    }, pinMs);
    containerRef.current.scrollTop = containerRef.current.scrollHeight;
    isBottomRef.current = true;
  }, [containerRef, autoScrollAnimation]);
  useEffect4(() => {
    const resizeObserver = new ResizeObserver(onContainerResize);
    resizeObserver.observe(containerRef.current);
    return () => {
      resizeObserver.disconnect();
      if (pinnedTimeoutRef.current) clearTimeout(pinnedTimeoutRef.current);
      if (isActiveRef.current) {
        isActiveRef.current = false;
        cancelAnimationFrame(animationRef.current);
        if (timeoutRef.current) {
          clearTimeout(timeoutRef.current);
          timeoutRef.current = null;
        }
      }
    };
  }, [containerRef, onContainerResize]);
  return {
    onContainerScroll,
    onContainerResize,
    hardScroll
  };
};

// src/components/notebook/notebook.jsx
import { useEffect as useEffect5, useRef as useRef5, useState as useState5, useCallback as useCallback2 } from "react";
import { v4 as uuidv42 } from "uuid";
import * as Y3 from "yjs";
var Notebook = ({
  theme,
  yDoc,
  yProvider,
  persistenceEverSynced,
  providerStatus,
  providerIsSynced,
  providerEverSynced,
  sessionId,
  notebookId: notebookId2,
  yNotebook,
  yRequests,
  yRequestsOrder
}) => {
  const [yCells, setYCells] = useState5(null);
  const [yCellsOrder, setYCellsOrder] = useState5(null);
  const [cellsOrder, setCellsOrder] = useState5(null);
  const [yNotebookRequests, setYNotebookRequests] = useState5(null);
  const [pendingRequests, setPendingRequests] = useState5(null);
  const [notebookFilename, setNotebookFilename] = useState5(null);
  const [notebookAbsPath, setNotebookAbsPath] = useState5(null);
  const [notebookSyncedAt, setNotebookSyncedAt] = useState5(null);
  const cellsContainerRef = useRef5(null);
  const { onContainerScroll, onContainerResize, hardScroll } = useAutoScroll(cellsContainerRef);
  const [initialized, setInitialized] = useState5(false);
  const synced = persistenceEverSynced && providerEverSynced;
  const valid = yDoc && yProvider && notebookId2 && yNotebook && yRequests && yRequestsOrder && yCells && yCellsOrder && yNotebookRequests;
  useEffect5(() => {
    const initialized2 = synced && notebookId2 && yRequests && yRequestsOrder;
    setInitialized(initialized2);
    if (!initialized2) return;
    if (!yNotebook) return;
    const yCells2 = yNotebook.get("cells");
    setYCells(yCells2);
    const yCellsOrder2 = yNotebook.get("cells_order");
    setYCellsOrder(yCellsOrder2);
    const yCellsOrderObserver = () => {
      setCellsOrder(yCellsOrder2.toArray());
    };
    if (yCellsOrder2) {
      yCellsOrder2.observe(yCellsOrderObserver);
      setCellsOrder(yCellsOrder2.toArray());
    }
    const yNotebookRequests2 = yNotebook.get("requests");
    setYNotebookRequests(yNotebookRequests2);
    const updatePendingRequests = () => {
      setPendingRequests(yNotebookRequests2.toArray().filter((requestId) => {
        const yRequest = yRequests.get(requestId);
        return yRequest && yRequest.get("notebook_id") === notebookId2;
      }));
    };
    const yNotebookRequestsObserver = () => {
      updatePendingRequests();
    };
    if (yNotebookRequests2) {
      yNotebookRequests2.observe(yNotebookRequestsObserver);
      updatePendingRequests();
    }
    const yNotebookObserver = (event) => {
      if (event.keysChanged.has("filename")) setNotebookFilename(yNotebook.get("filename"));
      if (event.keysChanged.has("abs_path")) setNotebookAbsPath(yNotebook.get("abs_path"));
      if (event.keysChanged.has("synced_at")) setNotebookSyncedAt(yNotebook.get("synced_at"));
    };
    yNotebook.observe(yNotebookObserver);
    setNotebookFilename(yNotebook.get("filename"));
    setNotebookAbsPath(yNotebook.get("abs_path"));
    setNotebookSyncedAt(yNotebook.get("synced_at"));
    return () => {
      yNotebook.unobserve(yNotebookObserver);
      if (yNotebookRequests2) yNotebookRequests2.unobserve(yNotebookRequestsObserver);
      if (yCellsOrder2) yCellsOrder2.unobserve(yCellsOrderObserver);
    };
  }, [synced, notebookId2, yNotebook, yRequests, yRequestsOrder]);
  const createCell = () => {
    yDoc.transact(() => {
      const id = uuidv42();
      const cell = new Y3.Map(Object.entries({
        id,
        cell_type: "code",
        execution_source: null,
        execution_count: null,
        metadata: {},
        source: new Y3.Text(),
        outputs: []
      }));
      yCells.set(id, cell);
      yCellsOrder.push([id]);
    });
    hardScroll();
  };
  const executeCell = useCallback2((cellId) => {
    yDoc.transact(() => {
      const id = uuidv42();
      const request = new Y3.Map(Object.entries({
        "id": id,
        "type": "execute_cell",
        "priority": 0,
        "session_id": sessionId,
        "notebook_id": notebookId2,
        "cell_id": cellId
      }));
      yRequests.set(id, request);
      yRequestsOrder.push([id]);
      yNotebookRequests.push([id]);
    });
  }, [yDoc, sessionId, notebookId2, yRequests, yRequestsOrder, yNotebookRequests]);
  const deleteCell = useCallback2((cellId, cellIndex) => {
    yDoc.transact(() => {
      yCells.delete(cellId);
      yCellsOrder.delete(cellIndex, 1);
    });
  }, [yDoc, yCells, yCellsOrder]);
  const reorderCell = useCallback2((cellId, cellIndex, destinationCellIndex) => {
    yDoc.transact(() => {
      yCellsOrder.delete(cellIndex, 1);
      yCellsOrder.insert(destinationCellIndex, [cellId]);
    });
  }, [yDoc, yCellsOrder]);
  const saveNotebook = () => {
    yDoc.transact(() => {
      const id = uuidv42();
      const request = new Y3.Map(Object.entries({
        "id": id,
        "type": "save_notebook",
        "priority": 0,
        "session_id": sessionId,
        "notebook_id": notebookId2
      }));
      yRequests.set(id, request);
      yRequestsOrder.push([id]);
      yNotebookRequests.push([id]);
    });
  };
  const reloadNotebook = () => {
    yDoc.transact(() => {
      const id = uuidv42();
      const request = new Y3.Map(Object.entries({
        "id": id,
        "type": "reload_notebook",
        "priority": 0,
        "session_id": sessionId,
        "notebook_id": notebookId2
      }));
      yRequests.set(id, request);
      yRequestsOrder.push([id]);
      yNotebookRequests.push([id]);
    });
  };
  return /* @__PURE__ */ jsxs9(Fragment8, { children: [
    /* @__PURE__ */ jsxs9("div", { className: "flex flex-row justify-between items-center p-2 bg-header overflow-hidden scrollbar-stable border-b", children: [
      /* @__PURE__ */ jsxs9("div", { className: "flex flex-row min-width-0 items-center gap-1 px-2 overflow-hidden", children: [
        /* @__PURE__ */ jsxs9("div", { className: "flex-1 nowrap overflow-hidden ellipsis", title: `${notebookFilename}`, children: [
          /* @__PURE__ */ jsx12("span", { className: "text-muted text-smaller-2", children: "Notebook: " }),
          notebookFilename
        ] }),
        /* @__PURE__ */ jsx12(
          "div",
          {
            className: "flex flex-row justify-center items-center width-6 height-6 opacity-50",
            style: { visibility: providerStatus === "connected" && providerIsSynced && persistenceEverSynced ? "hidden" : "visible" },
            title: `persistenceEverSynced: ${persistenceEverSynced}
providerStatus: ${providerStatus}
providerIsSynced: ${providerIsSynced}
providerEverSynced: ${providerEverSynced}`,
            children: /* @__PURE__ */ jsx12("i", { className: "fa-solid fa-bolt fa-fade line-height-inherit scale-80" })
          }
        )
      ] }),
      /* @__PURE__ */ jsxs9("div", { className: "flex flex-row gap-2", children: [
        /* @__PURE__ */ jsxs9("button", { className: "flex flex-row items-center gap-1 p-1 overflow-hidden text-smaller-2", onClick: createCell, disabled: !initialized || !valid, children: [
          /* @__PURE__ */ jsx12("i", { className: "fa-solid fa-plus line-height-inherit scale-80" }),
          /* @__PURE__ */ jsx12("div", { children: "Add Cell" })
        ] }),
        /* @__PURE__ */ jsx12(
          FileSyncDialog,
          {
            notebookId: notebookId2,
            notebookAbsPath,
            notebookSyncedAt,
            disabled: !initialized || !valid,
            saveNotebook,
            reloadNotebook
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsx12(
      "div",
      {
        ref: cellsContainerRef,
        className: "flex-1 flex flex-col min-0 gap-2 py-4 pl-4 mobile-pl-1 overflow-hidden-auto scrollbar-stable mask-top-2",
        onScroll: onContainerScroll,
        children: (() => {
          if (!initialized) {
            return /* @__PURE__ */ jsx12("div", { children: "\xA0" });
          }
          if (!valid) {
            return /* @__PURE__ */ jsx12("div", { children: "Invalid notebook." });
          }
          return cellsOrder.map((cellId, index) => {
            const isLast = index === cellsOrder.length - 1;
            return /* @__PURE__ */ jsx12(
              Cell,
              {
                theme,
                yProvider,
                notebookId: notebookId2,
                yRequests,
                yCells,
                cellsOrder,
                yNotebookRequests,
                cellId,
                cellIndex: index,
                resizeAnnounce: isLast ? onContainerResize : null,
                executeCell,
                deleteCell,
                reorderCell
              },
              cellId
            );
          });
        })()
      }
    )
  ] });
};

// src/components/notebook/app.jsx
import { useEffect as useEffect6, useState as useState6 } from "react";
import * as Y4 from "yjs";
import { WebsocketProvider as WebsocketProvider2 } from "y-websocket";
import { IndexeddbPersistence as IndexeddbPersistence2 } from "y-indexeddb";
var docId2 = "ccai";
var notebookId = decodeURI(window.location.pathname.replace(/^\/workspace\//, ""));
var wsProtocol2 = window.location.protocol === "https:" ? "wss:" : "ws:";
var wsUrl2 = `${wsProtocol2}//${window.location.host}/documents`;
var NotebookApp = () => {
  const theme = useTheme();
  useFadeIn();
  const [yDoc, setYDoc] = useState6(null);
  const [yData, setYData] = useState6(null);
  const [yPersistence, setYPersistence] = useState6(null);
  const [persistenceEverSynced, setPersistenceEverSynced] = useState6(false);
  const [yProvider, setYProvider] = useState6(null);
  const [providerStatus, setProviderStatus] = useState6("");
  const [providerIsSynced, setProviderIsSynced] = useState6(false);
  const [providerEverSynced, setProviderEverSynced] = useState6(false);
  const [sessionId, setSessionId] = useState6(null);
  const [yNotebooks, setYNotebooks] = useState6(null);
  const [yNotebook, setYNotebook] = useState6(null);
  const [yRequests, setYRequests] = useState6(null);
  const [yRequestsOrder, setYRequestsOrder] = useState6(null);
  useEffect6(() => {
    let yDoc2 = null;
    let yData2 = null;
    let yDataObserver = null;
    let yPersistence2 = null;
    let yProvider2 = null;
    const init = () => {
      yDoc2 = new Y4.Doc();
      setYDoc(yDoc2);
      yData2 = yDoc2.getMap("data");
      setYData(yData2);
      yPersistence2 = new IndexeddbPersistence2(docId2, yDoc2);
      setYPersistence(yPersistence2);
      yPersistence2.once("synced", () => {
        setPersistenceEverSynced(true);
        let dataId = yData2.get("id");
        const updateNotebooks = () => {
          const yNotebooks2 = yData2.get("notebooks");
          setYNotebooks(yNotebooks2);
          if (yNotebooks2) {
            setYNotebook(yNotebooks2.get(notebookId));
          }
        };
        yDataObserver = (event) => {
          if (event.keysChanged.has("id")) {
            const updatedDataId = yData2.get("id");
            if (!dataId) {
              dataId = updatedDataId;
            } else {
              console.log("notebook: clearing database");
              setProviderEverSynced(false);
              setPersistenceEverSynced(false);
              setYNotebook(null);
              yData2.unobserve(yDataObserver);
              yDataObserver = null;
              yData2 = null;
              setYData(null);
              yProvider2.destroy();
              yProvider2 = null;
              setYProvider(null);
              const _yDoc = yDoc2;
              yDoc2 = null;
              setYDoc(null);
              const clearDataPromise = yPersistence2.clearData();
              yPersistence2 = null;
              setYPersistence(null);
              clearDataPromise.finally(() => {
                _yDoc.destroy();
                init();
              });
              return;
            }
          }
          if (event.keysChanged.has("session_id")) setSessionId(yData2.get("session_id"));
          if (event.keysChanged.has("notebooks")) updateNotebooks();
          if (event.keysChanged.has("requests")) setYRequests(yData2.get("requests"));
          if (event.keysChanged.has("requests_order")) setYRequestsOrder(yData2.get("requests_order"));
        };
        yData2.observe(yDataObserver);
        setSessionId(yData2.get("session_id"));
        updateNotebooks();
        setYRequests(yData2.get("requests"));
        setYRequestsOrder(yData2.get("requests_order"));
        yProvider2 = new WebsocketProvider2(wsUrl2, docId2, yDoc2);
        setYProvider(yProvider2);
        yProvider2.on("status", (status) => {
          setProviderStatus(status?.status || "");
        });
        yProvider2.on("sync", (isSynced) => {
          setProviderIsSynced(isSynced);
          if (isSynced) setProviderEverSynced(true);
        });
        yProvider2.awareness.setLocalStateField("user", { color: "#0064BAFF" });
      });
    };
    init();
    return () => {
      if (yData2 && yDataObserver) yData2.unobserve(yDataObserver);
      if (yProvider2) yProvider2.destroy();
      if (yPersistence2) yPersistence2.destroy();
      if (yDoc2) yDoc2.destroy();
    };
  }, []);
  return /* @__PURE__ */ jsx13(
    Notebook,
    {
      theme,
      yDoc,
      yProvider,
      persistenceEverSynced,
      providerStatus,
      providerIsSynced,
      providerEverSynced,
      sessionId,
      notebookId,
      yNotebook,
      yRequests,
      yRequestsOrder
    },
    notebookId
  );
};

// src/components/markdown.jsx
import { memo as memo4, createElement as createElement4 } from "react";
import MarkdownIt from "markdown-it";
var md = new MarkdownIt({ breaks: true });
var parser2 = new DOMParser();
var components = {
  "code": CodeHighlight
};
var Markdown = memo4(({ content, className }) => {
  if (typeof content !== "string") return;
  const html = md.render(content);
  const doc = parser2.parseFromString(html, "text/html");
  const elements = Array.from(doc.body.childNodes).map((node, i) => parseDom(node, i, components));
  return createElement4("div", { className: ["markdown", className].filter(Boolean).join(" ") }, ...elements);
});

// src/components/content-indicator.jsx
import { jsx as jsx14 } from "react/jsx-runtime";
import { useEffect as useEffect7, useState as useState7, useRef as useRef6 } from "react";
var exponentialSaturation = (value, sensitivity = 1e-3) => {
  return 100 * (1 - Math.exp(-sensitivity * value));
};
var ContentIndicator = ({ contentLength }) => {
  const contentLengthRef = useRef6(null);
  const timeoutRef = useRef6(null);
  const [visible, setVisible] = useState7(false);
  useEffect7(() => {
    if (!contentLength) return;
    if (!contentLengthRef.current) {
      contentLengthRef.current = contentLength;
      return;
    }
    if (contentLength === contentLengthRef.current) return;
    contentLengthRef.current = contentLength;
    setVisible(true);
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
    const idleDelay = 1e3;
    timeoutRef.current = setTimeout(() => {
      timeoutRef.current = null;
      setVisible(false);
    }, idleDelay);
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, [contentLength]);
  return /* @__PURE__ */ jsx14(
    "div",
    {
      className: `height-1px bg-content-indicator-bar transition-width-100-opacity-1000 ${visible ? "opacity-75" : "opacity-0"}`,
      style: { width: `${exponentialSaturation(contentLength).toFixed(2)}%` }
    }
  );
};
export {
  Ansi,
  App,
  CodeHighlight,
  CodeMirror,
  ContentIndicator,
  Markdown,
  NotebookApp,
  useAutoScroll,
  useFadeIn,
  useTheme
};
