// src/components/app.jsx
import { jsx as jsx5, jsxs as jsxs4 } from "react/jsx-runtime";

// src/components/conversation.jsx
import { Fragment as Fragment2, jsx as jsx2, jsxs as jsxs2 } from "react/jsx-runtime";

// src/components/node.jsx
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { useLayoutEffect, useState, useRef, memo } from "react";
import { Collapsible } from "radix-ui";
import { CodeMirror, CodeHighlight, Markdown, ContentIndicator } from "ccai";
import { v4 as uuidv4 } from "uuid";
import * as Y from "yjs";
var Node = memo(({
  theme,
  yDoc,
  yProvider,
  conversationId,
  yRequests,
  yRequestsOrder,
  yConversation,
  yNodes,
  yConversationRequests,
  nodeId,
  parentNodeId,
  isLast,
  resizeAnnounce
}) => {
  const [yNode, setYNode] = useState(null);
  const [yParent, setYParent] = useState(null);
  const [ySiblings, setYSiblings] = useState(null);
  const [siblings, setSiblings] = useState(null);
  const [siblingIndex, setSiblingIndex] = useState(null);
  const [yContent, setYContent] = useState(null);
  const [content, setContent] = useState(null);
  const [toolContentOpen, setToolContentOpen] = useState(false);
  const [yReasoningContent, setYReasoningContent] = useState(null);
  const [reasoningContent, setReasoningContent] = useState(null);
  const [reasoningContentOpen, setReasoningContentOpen] = useState(false);
  const [yToolCalls, setYToolCalls] = useState(null);
  const [toolCalls, setToolCalls] = useState(null);
  const [toolCallsOpen, setToolCallsOpen] = useState(false);
  const [yEditorContent, setYEditorContent] = useState(null);
  const [yEditorContentUndoManager, setYEditorContentUndoManager] = useState(null);
  const [yEditorReasoningContent, setYEditorReasoningContent] = useState(null);
  const [yEditorReasoningContentUndoManager, setYEditorReasoningContentUndoManager] = useState(null);
  const [yEditorToolCalls, setYEditorToolCalls] = useState(null);
  const [yEditorToolCallsUndoManager, setYEditorToolCallsUndoManager] = useState(null);
  const [isEditing, setIsEditing] = useState(null);
  const [role, setRole] = useState(null);
  const [totalTokens, setTotalTokens] = useState(null);
  const [predictedN, setPredictedN] = useState(null);
  const [predictedMs, setPredictedMs] = useState(null);
  const [predictedNPerS, setPredictedNPerS] = useState(null);
  const containerRef = useRef(null);
  const [initialized, setInitialized] = useState(false);
  const valid = nodeId && parentNodeId && conversationId && yConversation && yNodes && yConversationRequests && yRequests && yRequestsOrder && yNode && yParent && ySiblings;
  useLayoutEffect(() => {
    const initialized2 = nodeId && parentNodeId && yNodes;
    setInitialized(initialized2);
    if (!initialized2) return;
    const yNode2 = yNodes.get(nodeId);
    setYNode(yNode2);
    if (!yNode2) return;
    const yParent2 = yNodes.get(parentNodeId);
    setYParent(yParent2);
    if (!yParent2) return;
    const ySiblings2 = yParent2.get("children");
    setYSiblings(ySiblings2);
    if (!ySiblings2) return;
    const ySiblingsObserver = () => {
      setSiblings(ySiblings2.toArray());
    };
    ySiblings2.observe(ySiblingsObserver);
    setSiblings(ySiblings2.toArray());
    const yParentObserver = (event) => {
      if (event.keysChanged.has("child_index")) setSiblingIndex(yParent2.get("child_index"));
    };
    yParent2.observe(yParentObserver);
    setSiblingIndex(yParent2.get("child_index"));
    const yContent2 = yNode2.get("content");
    setYContent(yContent2);
    let yContentObserver = null;
    if (yContent2) {
      yContentObserver = () => {
        setContent(yContent2.toString());
      };
      yContent2.observe(yContentObserver);
      setContent(yContent2.toString());
    }
    const yReasoningContent2 = yNode2.get("reasoning_content");
    setYReasoningContent(yReasoningContent2);
    let yReasoningContentObserver = null;
    if (yReasoningContent2) {
      yReasoningContentObserver = () => {
        setReasoningContent(yReasoningContent2.toString());
      };
      yReasoningContent2.observe(yReasoningContentObserver);
      setReasoningContent(yReasoningContent2.toString());
    }
    const yToolCalls2 = yNode2.get("tool_calls");
    setYToolCalls(yToolCalls2);
    let yToolCallsObserver = null;
    if (yToolCalls2) {
      yToolCallsObserver = () => {
        setToolCalls(yToolCalls2.toString());
      };
      yToolCalls2.observe(yToolCallsObserver);
      setToolCalls(yToolCalls2.toString());
    }
    const yEditorContent2 = yNode2.get("editor_content");
    setYEditorContent(yEditorContent2);
    let yEditorContentUndoManager2 = null;
    if (yEditorContent2) {
      yEditorContentUndoManager2 = new Y.UndoManager(yEditorContent2);
      setYEditorContentUndoManager(yEditorContentUndoManager2);
    }
    const yEditorReasoningContent2 = yNode2.get("editor_reasoning_content");
    setYEditorReasoningContent(yEditorReasoningContent2);
    let yEditorReasoningContentUndoManager2 = null;
    if (yEditorReasoningContent2) {
      yEditorReasoningContentUndoManager2 = new Y.UndoManager(yEditorReasoningContent2);
      setYEditorReasoningContentUndoManager(yEditorReasoningContentUndoManager2);
    }
    const yEditorToolCalls2 = yNode2.get("editor_tool_calls");
    setYEditorToolCalls(yEditorToolCalls2);
    let yEditorToolCallsUndoManager2 = null;
    if (yEditorToolCalls2) {
      yEditorToolCallsUndoManager2 = new Y.UndoManager(yEditorToolCalls2);
      setYEditorToolCallsUndoManager(yEditorToolCallsUndoManager2);
    }
    const updatePredictedStats = () => {
      const predictedN2 = yNode2.get("predicted_n");
      const predictedMs2 = yNode2.get("predicted_ms");
      const predictedNPerS2 = predictedN2 && predictedMs2 ? (predictedN2 / (predictedMs2 / 1e3)).toFixed(1) : null;
      setPredictedN(predictedN2);
      setPredictedMs(predictedMs2);
      setPredictedNPerS(predictedNPerS2);
    };
    const yNodeObserver = (event) => {
      if (event.keysChanged.has("editing")) setIsEditing(yNode2.get("editing"));
      if (event.keysChanged.has("role")) setRole(yNode2.get("role"));
      if (event.keysChanged.has("total_tokens")) setTotalTokens(yNode2.get("total_tokens"));
      if (event.keysChanged.has("predicted_n") || event.keysChanged.has("predicted_ms")) updatePredictedStats();
    };
    yNode2.observe(yNodeObserver);
    setIsEditing(yNode2.get("editing"));
    setRole(yNode2.get("role"));
    setTotalTokens(yNode2.get("total_tokens"));
    updatePredictedStats();
    return () => {
      yNode2.unobserve(yNodeObserver);
      if (yEditorToolCallsUndoManager2) yEditorToolCallsUndoManager2.destroy();
      if (yEditorReasoningContentUndoManager2) yEditorReasoningContentUndoManager2.destroy();
      if (yEditorContentUndoManager2) yEditorContentUndoManager2.destroy();
      if (yToolCallsObserver) yToolCalls2.unobserve(yToolCallsObserver);
      if (yReasoningContentObserver) yReasoningContent2.unobserve(yReasoningContentObserver);
      if (yContentObserver) yContent2.unobserve(yContentObserver);
      yParent2.unobserve(yParentObserver);
      ySiblings2.unobserve(ySiblingsObserver);
    };
  }, [nodeId, parentNodeId, yNodes]);
  useLayoutEffect(() => {
    if (!resizeAnnounce || isEditing) return;
    const resizeObserver = new ResizeObserver(resizeAnnounce);
    resizeObserver.observe(containerRef.current);
    return () => {
      resizeObserver.disconnect();
    };
  }, [resizeAnnounce, isEditing]);
  const beginEdit = () => {
    yDoc.transact(() => {
      yNode.set("editing", true);
      if (yContent) {
        yEditorContent.delete(0, yEditorContent.length);
        yEditorContent.insert(0, yContent.toString());
      }
      if (yReasoningContent) {
        yEditorReasoningContent.delete(0, yEditorReasoningContent.length);
        yEditorReasoningContent.insert(0, yReasoningContent.toString());
      }
      if (yToolCalls) {
        yEditorToolCalls.delete(0, yEditorToolCalls.length);
        yEditorToolCalls.insert(0, yToolCalls.toString());
      }
    });
  };
  const submitEdit = () => {
    yDoc.transact(() => {
      yNode.set("editing", false);
      const twinId = uuidv4();
      const yTwin = new Y.Map(Object.entries({
        id: twinId,
        role,
        content: yEditorContent ? new Y.Text(yEditorContent.toString()) : null,
        reasoning_content: yEditorReasoningContent ? new Y.Text(yEditorReasoningContent.toString()) : null,
        tool_calls: yEditorToolCalls ? new Y.Text(yEditorToolCalls.toString()) : null,
        parent: parentNodeId,
        children: new Y.Array(),
        child_index: null,
        editing: false,
        editor_content: yEditorContent ? new Y.Text() : null,
        editor_reasoning_content: yEditorReasoningContent ? new Y.Text() : null,
        editor_tool_calls: yEditorToolCalls ? new Y.Text() : null,
        completion_tokens: null,
        prompt_tokens: null,
        total_tokens: null,
        prompt_n: null,
        prompt_ms: null,
        predicted_n: null,
        predicted_ms: null
      }));
      yNodes.set(twinId, yTwin);
      ySiblings.push([twinId]);
      yParent.set("child_index", ySiblings.length - 1);
      const id = uuidv4();
      const request = new Y.Map(Object.entries({
        id,
        type: "chat",
        priority: 0,
        conversation_id: conversationId,
        node_id: twinId
      }));
      yRequests.set(id, request);
      yRequestsOrder.push([id]);
      yConversationRequests.push([id]);
      if (yEditorContent) {
        yEditorContent.delete(0, yEditorContent.length);
      }
      if (yEditorReasoningContent) {
        yEditorReasoningContent.delete(0, yEditorReasoningContent.length);
      }
      if (yEditorToolCalls) {
        yEditorToolCalls.delete(0, yEditorToolCalls.length);
      }
    });
  };
  const cancelEdit = () => {
    yDoc.transact(() => {
      yNode.set("editing", false);
      if (yEditorContent) {
        yEditorContent.delete(0, yEditorContent.length);
      }
      if (yEditorReasoningContent) {
        yEditorReasoningContent.delete(0, yEditorReasoningContent.length);
      }
      if (yEditorToolCalls) {
        yEditorToolCalls.delete(0, yEditorToolCalls.length);
      }
    });
  };
  const nextSibling = () => {
    if (siblingIndex >= ySiblings.length - 1) return;
    yParent.set("child_index", siblingIndex + 1);
  };
  const previousSibling = () => {
    if (siblingIndex <= 0) return;
    yParent.set("child_index", siblingIndex - 1);
  };
  return /* @__PURE__ */ jsx("div", { ref: containerRef, className: "flex flex-col shrink-0 gap-2 width-percent-100 content-max-width align-self-center mb-4", children: (() => {
    if (!initialized) return /* @__PURE__ */ jsx("div", { children: "\xA0" });
    if (!valid) return /* @__PURE__ */ jsx("div", { children: "Invalid data." });
    const isUser = role === "user";
    const isAssistant = role === "assistant";
    const isTool = role === "tool";
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: "flex flex-col",
        style: {
          width: isUser && !isEditing ? "80%" : "100%",
          alignSelf: isUser && !isEditing ? "end" : "auto"
        },
        children: [
          isUser && /* @__PURE__ */ jsx("div", { className: "px-2 text-smaller-4 text-muted", children: "User" }),
          /* @__PURE__ */ jsxs("div", { className: ["flex flex-col mr-2 overflow-hidden", isUser && !isEditing && "bg-panel border-rounded"].filter(Boolean).join(" "), children: [
            !isEditing && reasoningContent && /* @__PURE__ */ jsxs(Collapsible.Root, { open: reasoningContentOpen, onOpenChange: setReasoningContentOpen, className: "mb-4 border border-rounded", children: [
              /* @__PURE__ */ jsx(Collapsible.Trigger, { asChild: true, children: /* @__PURE__ */ jsxs("div", { className: "flex flex-row justify-between items-center p-2 cursor-pointer", children: [
                /* @__PURE__ */ jsx("div", { className: "nowrap overflow-hidden ellipsis", children: "Thinking" }),
                /* @__PURE__ */ jsx("div", { className: "flex-1 px-2", children: /* @__PURE__ */ jsx(ContentIndicator, { contentLength: reasoningContent.length }) }),
                /* @__PURE__ */ jsx("div", { children: reasoningContentOpen ? /* @__PURE__ */ jsx("i", { className: "fa-solid fa-caret-up" }) : /* @__PURE__ */ jsx("i", { className: "fa-solid fa-caret-down" }) })
              ] }) }),
              /* @__PURE__ */ jsx(Collapsible.Content, { className: "collapsible-content", children: /* @__PURE__ */ jsx("div", { className: "p-2", children: reasoningContent }) })
            ] }),
            !isEditing && content && !isTool && /* @__PURE__ */ jsx(Markdown, { content, className: isUser ? "p-3" : "px-2" }),
            !isEditing && content && isTool && /* @__PURE__ */ jsxs(Collapsible.Root, { open: toolContentOpen, onOpenChange: setToolContentOpen, className: "border border-rounded", children: [
              /* @__PURE__ */ jsx(Collapsible.Trigger, { asChild: true, children: /* @__PURE__ */ jsxs("div", { className: "flex flex-row justify-between items-center p-2 cursor-pointer", children: [
                /* @__PURE__ */ jsx("div", { className: "nowrap overflow-hidden ellipsis", children: "Tool Results" }),
                /* @__PURE__ */ jsx("div", { className: "flex-1 px-2", children: /* @__PURE__ */ jsx(ContentIndicator, { contentLength: content.length }) }),
                /* @__PURE__ */ jsx("div", { children: toolContentOpen ? /* @__PURE__ */ jsx("i", { className: "fa-solid fa-caret-up" }) : /* @__PURE__ */ jsx("i", { className: "fa-solid fa-caret-down" }) })
              ] }) }),
              /* @__PURE__ */ jsx(Collapsible.Content, { className: "collapsible-content", children: /* @__PURE__ */ jsx("pre", { className: "p-2", children: /* @__PURE__ */ jsx(CodeHighlight, { content, className: "language-json" }) }) })
            ] }),
            !isEditing && toolCalls && /* @__PURE__ */ jsxs(Collapsible.Root, { open: toolCallsOpen, onOpenChange: setToolCallsOpen, className: "border border-rounded", children: [
              /* @__PURE__ */ jsx(Collapsible.Trigger, { asChild: true, children: /* @__PURE__ */ jsxs("div", { className: "flex flex-row justify-between items-center p-2 cursor-pointer", children: [
                /* @__PURE__ */ jsx("div", { className: "nowrap overflow-hidden ellipsis", children: "Tool Calls" }),
                /* @__PURE__ */ jsx("div", { className: "flex-1 px-2", children: /* @__PURE__ */ jsx(ContentIndicator, { contentLength: toolCalls.length }) }),
                /* @__PURE__ */ jsx("div", { children: toolCallsOpen ? /* @__PURE__ */ jsx("i", { className: "fa-solid fa-caret-up" }) : /* @__PURE__ */ jsx("i", { className: "fa-solid fa-caret-down" }) })
              ] }) }),
              /* @__PURE__ */ jsx(Collapsible.Content, { className: "collapsible-content", children: /* @__PURE__ */ jsx("pre", { className: "p-2", children: /* @__PURE__ */ jsx(CodeHighlight, { content: toolCalls, className: "language-json" }) }) })
            ] }),
            isEditing && !isUser && yEditorReasoningContent && /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx("div", { className: "text-smaller-4 text-muted", children: "Reasoning Content:" }),
              /* @__PURE__ */ jsx(
                CodeMirror,
                {
                  yText: yEditorReasoningContent,
                  yUndoManager: yEditorReasoningContentUndoManager,
                  awareness: yProvider.awareness,
                  language: "markdown",
                  theme,
                  className: "cm-min-height-10vh cm-border"
                }
              )
            ] }),
            isEditing && yEditorContent && /* @__PURE__ */ jsxs(Fragment, { children: [
              !isUser && /* @__PURE__ */ jsx("div", { className: "text-smaller-4 text-muted mt-3", children: "Content:" }),
              /* @__PURE__ */ jsx(
                CodeMirror,
                {
                  yText: yEditorContent,
                  yUndoManager: yEditorContentUndoManager,
                  awareness: yProvider.awareness,
                  language: "markdown",
                  theme,
                  className: "cm-min-height-10vh cm-border",
                  focus: true
                }
              )
            ] }),
            isEditing && !isUser && yEditorToolCalls && /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx("div", { className: "text-smaller-4 text-muted mt-3", children: "Tool Calls:" }),
              /* @__PURE__ */ jsx(
                CodeMirror,
                {
                  yText: yEditorToolCalls,
                  yUndoManager: yEditorToolCallsUndoManager,
                  awareness: yProvider.awareness,
                  language: "json",
                  theme,
                  className: "cm-min-height-10vh cm-border"
                }
              )
            ] })
          ] }),
          isUser && /* @__PURE__ */ jsxs("div", { className: "flex flex-row justify-end items-center mr-2 pt-1 pr-3", children: [
            isEditing && /* @__PURE__ */ jsxs("div", { className: "flex flex-row justify-end items-center gap-1 text-smaller-4", children: [
              /* @__PURE__ */ jsx("button", { className: "flex flex-row items-center gap-1 p-1 overflow-hidden border border-rounded", onClick: cancelEdit, children: /* @__PURE__ */ jsx("div", { children: "Cancel" }) }),
              /* @__PURE__ */ jsxs("button", { className: "flex flex-row items-center gap-1 p-1 overflow-hidden border border-rounded", onClick: submitEdit, children: [
                /* @__PURE__ */ jsx("i", { className: "fa-solid fa-code-branch line-height-inherit scale-80" }),
                /* @__PURE__ */ jsx("div", { children: "Submit" })
              ] })
            ] }),
            !isEditing && /* @__PURE__ */ jsxs("div", { className: "flex flex-row justify-end items-center gap-1 overflow-hidden text-smaller-4 opacity-50 hover-opacity-100", children: [
              /* @__PURE__ */ jsxs("button", { className: "flex flex-row items-center gap-1 p-1 overflow-hidden border border-rounded", onClick: beginEdit, children: [
                /* @__PURE__ */ jsx("i", { className: "fa-solid fa-code-branch line-height-inherit scale-80" }),
                /* @__PURE__ */ jsx("div", { children: "Edit" })
              ] }),
              /* @__PURE__ */ jsxs("div", { className: "flex flex-row items-center gap-1 border border-rounded", children: [
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "flex flex-row item-center p-1 overflow-hidden border-none",
                    onClick: previousSibling,
                    disabled: siblingIndex <= 0,
                    children: /* @__PURE__ */ jsx("i", { className: "fa-solid fa-chevron-left line-height-inherit scale-80" })
                  }
                ),
                /* @__PURE__ */ jsxs("div", { className: "nowrap", children: [
                  siblingIndex + 1,
                  " / ",
                  siblings.length
                ] }),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "flex flex-row item-center p-1 overflow-hidden border-none",
                    onClick: nextSibling,
                    disabled: siblingIndex >= siblings.length - 1,
                    children: /* @__PURE__ */ jsx("i", { className: "fa-solid fa-chevron-right line-height-inherit scale-80" })
                  }
                )
              ] })
            ] })
          ] }),
          isAssistant && isLast && !isEditing && /* @__PURE__ */ jsx("div", { className: "flex flex-row justify-end items-center mr-2 pr-2", children: /* @__PURE__ */ jsxs(
            "div",
            {
              className: "nowrap overflow-hidden text-smaller-8 text-muted opacity-50 user-select-none",
              style: { visibility: totalTokens ? "visible" : "hidden" },
              title: `~${predictedNPerS ? predictedNPerS : "?"} tokens per second`,
              children: [
                totalTokens ? totalTokens : "?",
                " tokens"
              ]
            }
          ) })
        ]
      }
    );
  })() });
});

// src/components/conversation.jsx
import { useLayoutEffect as useLayoutEffect2, useState as useState2, useRef as useRef2, useCallback } from "react";
import { Progress } from "radix-ui";
import { CodeMirror as CodeMirror2, useAutoScroll } from "ccai";
import { v4 as uuidv42 } from "uuid";
import * as Y2 from "yjs";
var Conversation = ({
  theme,
  yDoc,
  yProvider,
  persistenceEverSynced,
  providerStatus,
  providerIsSynced,
  providerEverSynced,
  yConversations,
  conversationId,
  yRequests,
  yRequestsOrder,
  sidebarCollapsed,
  collapseSidebar,
  expandSidebar
}) => {
  const [yConversation, setYConversation] = useState2(null);
  const [yNodes, setYNodes] = useState2(null);
  const [nodesOrder, setNodesOrder] = useState2(null);
  const [yPrompt, setYPrompt] = useState2(null);
  const [yPromptUndoManager, setYPromptUndoManager] = useState2(null);
  const [promptFocused, setPromptFocused] = useState2(null);
  const [yLabel, setYLabel] = useState2(null);
  const [label, setLabel] = useState2(null);
  const [yLabelUndoManager, setYLabelUndoManager] = useState2(null);
  const [isEditingLabel, setIsEditingLabel] = useState2(false);
  const [yConversationRequests, setYConversationRequests] = useState2(null);
  const [pendingRequests, setPendingRequests] = useState2(null);
  const [pendingLabelRequests, setPendingLabelRequests] = useState2(null);
  const nodesContainerRef = useRef2(null);
  const { onContainerScroll, onContainerResize, hardScroll } = useAutoScroll(nodesContainerRef);
  const [initialized, setInitialized] = useState2(false);
  const synced = persistenceEverSynced && providerEverSynced;
  const valid = yDoc && yProvider && yConversations && conversationId && yRequests && yRequestsOrder && yConversation && yNodes && yPrompt && yLabel && yConversationRequests;
  useLayoutEffect2(() => {
    const initialized2 = synced && yConversations && yRequests && yRequestsOrder;
    setInitialized(initialized2);
    if (!initialized2 || !conversationId) return;
    const yConversation2 = yConversations.get(conversationId);
    setYConversation(yConversation2);
    if (!yConversation2) return;
    const yNodes2 = yConversation2.get("nodes");
    setYNodes(yNodes2);
    const updateNodesOrder = () => {
      const ids = [];
      const yRoot = yNodes2.get("root");
      let yNode = yRoot;
      while (yNode) {
        const yParent = yNode;
        const siblings = yParent.get("children");
        if (!siblings || !siblings.length) break;
        const siblingIndex = yParent.get("child_index");
        if (typeof siblingIndex !== "number") break;
        if (siblingIndex < 0 || siblingIndex >= siblings.length) break;
        const nodeId = siblings.get(siblingIndex);
        yNode = yNodes2.get(nodeId);
        ids.push(nodeId);
      }
      setNodesOrder(ids);
    };
    const yNodesObserver = (events) => {
      let shouldUpdateNodesOrder = false;
      for (const event of events) {
        if (event.keysChanged?.has("children")) shouldUpdateNodesOrder = true;
        if (event.keysChanged?.has("child_index")) shouldUpdateNodesOrder = true;
      }
      if (shouldUpdateNodesOrder) updateNodesOrder();
    };
    if (yNodes2) {
      yNodes2.observeDeep(yNodesObserver);
      updateNodesOrder();
    }
    const yPrompt2 = yConversation2.get("prompt");
    setYPrompt(yPrompt2);
    let yPromptUndoManager2 = null;
    if (yPrompt2) {
      yPromptUndoManager2 = new Y2.UndoManager(yPrompt2);
    }
    setYPromptUndoManager(yPromptUndoManager2);
    const yLabel2 = yConversation2.get("label");
    setYLabel(yLabel2);
    const yLabelObserver = () => {
      setLabel(yLabel2.toString());
    };
    if (yLabel2) {
      yLabel2.observe(yLabelObserver);
      setLabel(yLabel2.toString());
    }
    let yLabelUndoManager2 = null;
    if (yLabel2) {
      yLabelUndoManager2 = new Y2.UndoManager(yLabel2);
    }
    setYLabelUndoManager(yLabelUndoManager2);
    const yConversationRequests2 = yConversation2.get("requests");
    setYConversationRequests(yConversationRequests2);
    const updatePendingRequests = () => {
      setPendingRequests(yConversationRequests2.toArray().filter((requestId) => {
        const yRequest = yRequests.get(requestId);
        return yRequest && yRequest.get("type") === "chat";
      }));
      setPendingLabelRequests(yConversationRequests2.toArray().filter((requestId) => {
        const yRequest = yRequests.get(requestId);
        return yRequest && yRequest.get("type") === "label";
      }));
    };
    const yConversationRequestsObserver = () => {
      updatePendingRequests();
    };
    if (yConversationRequests2) {
      yConversationRequests2.observe(yConversationRequestsObserver);
      updatePendingRequests();
    }
    hardScroll();
    return () => {
      if (yConversationRequests2) yConversationRequests2.unobserve(yConversationRequestsObserver);
      if (yLabelUndoManager2) yLabelUndoManager2.destroy();
      if (yLabel2) yLabel2.unobserve(yLabelObserver);
      if (yPromptUndoManager2) yPromptUndoManager2.destroy();
      if (yNodes2) yNodes2.unobserveDeep(yNodesObserver);
    };
  }, [synced, yConversations, conversationId, yRequests, yRequestsOrder, hardScroll]);
  const submitPrompt = () => {
    yDoc.transact(() => {
      const prompt = yPrompt.toString();
      if (prompt.trim() === "") return;
      const parentId = nodesOrder.length === 0 ? "root" : nodesOrder[nodesOrder.length - 1];
      const yParentNode = yNodes.get(parentId);
      const yParentNodeChildren = yParentNode.get("children");
      const nodeId = uuidv42();
      const yNode = new Y2.Map(Object.entries({
        id: nodeId,
        role: "user",
        content: new Y2.Text(yPrompt.toString()),
        reasoning_content: null,
        tool_calls: null,
        parent: parentId,
        children: new Y2.Array(),
        child_index: null,
        editing: false,
        editor_content: new Y2.Text(),
        editor_reasoning_content: null,
        editor_tool_calls: null,
        completion_tokens: null,
        prompt_tokens: null,
        total_tokens: null,
        prompt_n: null,
        prompt_ms: null,
        predicted_n: null,
        predicted_ms: null
      }));
      yNodes.set(nodeId, yNode);
      yParentNodeChildren.push([nodeId]);
      yParentNode.set("child_index", yParentNodeChildren.length - 1);
      const id = uuidv42();
      const yRequest = new Y2.Map(Object.entries({
        id,
        type: "chat",
        priority: 0,
        conversation_id: conversationId,
        node_id: nodeId
      }));
      yRequests.set(id, yRequest);
      yRequestsOrder.push([id]);
      yConversationRequests.push([id]);
      if (parentId === "root") {
        const labelRequestId = uuidv42();
        const yLabelRequest = new Y2.Map(Object.entries({
          id: labelRequestId,
          type: "label",
          priority: -100,
          conversation_id: conversationId,
          node_id: nodeId
        }));
        yRequests.set(labelRequestId, yLabelRequest);
        yRequestsOrder.push([labelRequestId]);
        yConversationRequests.push([labelRequestId]);
      }
      yPrompt.delete(0, yPrompt.length);
    });
    hardScroll();
  };
  const cancelRequests = () => {
    yDoc.transact(() => {
      for (const requestId of pendingRequests) {
        yRequests.delete(requestId);
        for (let i = 0; i < yRequestsOrder.length; i++) {
          if (requestId === yRequestsOrder.get(i)) {
            yRequestsOrder.delete(i, 1);
            break;
          }
        }
        for (let i = 0; i < yConversationRequests.length; i++) {
          if (requestId === yConversationRequests.get(i)) {
            yConversationRequests.delete(i, 1);
            break;
          }
        }
      }
    });
  };
  const cancelLabelRequests = () => {
    yDoc.transact(() => {
      for (const requestId of pendingLabelRequests) {
        yRequests.delete(requestId);
        for (let i = 0; i < yRequestsOrder.length; i++) {
          if (requestId === yRequestsOrder.get(i)) {
            yRequestsOrder.delete(i, 1);
            break;
          }
        }
        for (let i = 0; i < yConversationRequests.length; i++) {
          if (requestId === yConversationRequests.get(i)) {
            yConversationRequests.delete(i, 1);
            break;
          }
        }
      }
    });
  };
  const beginLabelEdit = useCallback(() => {
    setIsEditingLabel(true);
  }, []);
  const endLabelEdit = useCallback(() => {
    setIsEditingLabel(false);
  }, []);
  const onPromptFocus = useCallback(() => {
    setPromptFocused(true);
  }, []);
  const onPromptBlur = useCallback(() => {
    setPromptFocused(false);
  }, []);
  const toggleSidebar = () => {
    if (!sidebarCollapsed) {
      collapseSidebar();
    } else {
      expandSidebar();
    }
  };
  return /* @__PURE__ */ jsxs2("div", { className: "flex-1 flex flex-col min-0", children: [
    /* @__PURE__ */ jsxs2("div", { className: "flex flex-row justify-between items-center gap-2 bg-header border-b", children: [
      /* @__PURE__ */ jsxs2("div", { className: "flex flex-row items-center min-width-0 gap-2", children: [
        /* @__PURE__ */ jsx2("div", { className: "flex flex-row items-center gap-2 pl-2 text-muted", children: /* @__PURE__ */ jsx2(
          "button",
          {
            className: "flex flex-row justify-center items-center width-6 height-6 overflow-hidden text-smaller-4",
            onClick: toggleSidebar,
            children: !sidebarCollapsed ? /* @__PURE__ */ jsx2("i", { className: "fa-solid fa-caret-left" }) : /* @__PURE__ */ jsx2("i", { className: "fa-solid fa-caret-right" })
          }
        ) }),
        (() => {
          if (!initialized || !valid) {
            return /* @__PURE__ */ jsx2("div", { className: "p-2", children: "\xA0" });
          }
          return /* @__PURE__ */ jsxs2(Fragment2, { children: [
            (() => {
              if (isEditingLabel) {
                return /* @__PURE__ */ jsx2(
                  CodeMirror2,
                  {
                    yText: yLabel,
                    yUndoManager: yLabelUndoManager,
                    awareness: yProvider.awareness,
                    language: "",
                    theme,
                    className: "flex-1 cm-max-height-65px cm-border-r",
                    style: { minWidth: "150px" },
                    focus: true,
                    onBlur: endLabelEdit,
                    onKeyDown: (event) => {
                      if (event.key === "Escape" && !event.defaultPrevented) {
                        endLabelEdit();
                      }
                    }
                  }
                );
              } else {
                return /* @__PURE__ */ jsx2(
                  "div",
                  {
                    className: `flex-1 py-2 nowrap overflow-hidden ellipsis ${label ? "opacity-100" : "opacity-50"}`,
                    style: { minWidth: "50px" },
                    title: `${label || ""}`,
                    onClick: beginLabelEdit,
                    children: label || "unlabeled"
                  }
                );
              }
            })(),
            /* @__PURE__ */ jsx2(
              "div",
              {
                className: "flex flex-row justify-center items-center width-4 height-4",
                style: { visibility: !pendingLabelRequests.length ? "hidden" : "visible" },
                children: /* @__PURE__ */ jsx2("i", { className: "fa-solid fa-circle line-height-inherit faded-pulse" })
              }
            ),
            /* @__PURE__ */ jsx2(
              "button",
              {
                className: "flex flex-row items-center p-1 overflow-hidden text-smaller-6",
                onClick: cancelLabelRequests,
                disabled: !pendingLabelRequests.length,
                style: { visibility: !pendingLabelRequests.length ? "hidden" : "visible" },
                children: "Cancel Label"
              }
            )
          ] });
        })()
      ] }),
      /* @__PURE__ */ jsx2("div", { className: "flex flex-row items-center gap-2 p-2", children: /* @__PURE__ */ jsx2(
        "div",
        {
          className: "flex flex-row justify-center items-center width-6 height-6 opacity-50",
          style: { visibility: providerStatus === "connected" && providerIsSynced && persistenceEverSynced ? "hidden" : "visible" },
          title: `persistenceEverSynced: ${persistenceEverSynced}
providerStatus: ${providerStatus}
providerIsSynced: ${providerIsSynced}
providerEverSynced: ${providerEverSynced}`,
          children: /* @__PURE__ */ jsx2("i", { className: "fa-solid fa-bolt fa-fade line-height-inherit scale-80" })
        }
      ) })
    ] }),
    /* @__PURE__ */ jsx2(
      "div",
      {
        ref: nodesContainerRef,
        className: "flex-1 flex flex-col min-0 pl-4 mobile-pl-1 overflow-hidden-auto scrollbar-stable mask-top-2",
        onScroll: onContainerScroll,
        children: (() => {
          if (!initialized) return /* @__PURE__ */ jsxs2(Fragment2, { children: [
            /* @__PURE__ */ jsx2("div", { className: "py-2 mt-2", children: "Waiting for connection." }),
            /* @__PURE__ */ jsx2("div", { className: "py-1 text-smaller-2 text-muted", children: "Ensure the server is running (check the notebook tab)." })
          ] });
          if (!conversationId) return /* @__PURE__ */ jsx2("div", { className: "py-2 mt-2", children: "No selection." });
          if (!valid) return /* @__PURE__ */ jsx2("div", { className: "py-2 mt-2", children: "Invalid data." });
          return /* @__PURE__ */ jsxs2(Fragment2, { children: [
            /* @__PURE__ */ jsx2("div", { className: "flex-grow-spacer-4" }),
            (() => {
              let parentNodeId = "root";
              return nodesOrder.map((nodeId, index) => {
                const isLast = index === nodesOrder.length - 1;
                const element = /* @__PURE__ */ jsx2(
                  Node,
                  {
                    theme,
                    yDoc,
                    yProvider,
                    conversationId,
                    yRequests,
                    yRequestsOrder,
                    yConversation,
                    yNodes,
                    yConversationRequests,
                    nodeId,
                    parentNodeId,
                    isLast,
                    resizeAnnounce: isLast ? onContainerResize : null
                  },
                  nodeId
                );
                parentNodeId = nodeId;
                return element;
              });
            })(),
            /* @__PURE__ */ jsx2("div", { className: "flex-spacer-4" })
          ] });
        })()
      }
    ),
    (() => {
      if (!initialized || !valid) return;
      return /* @__PURE__ */ jsxs2(Fragment2, { children: [
        (() => {
          if (pendingRequests.length > 0) {
            return /* @__PURE__ */ jsx2(Progress.Root, { className: "progress-bar-root height-1px", value: null, children: /* @__PURE__ */ jsx2(Progress.Indicator, { className: "progress-bar-indicator progress-bar-shimmer" }) });
          } else {
            return /* @__PURE__ */ jsx2("div", { className: "height-1px", style: { background: "var(--color-border)" } });
          }
        })(),
        /* @__PURE__ */ jsx2("div", { className: "flex flex-col pl-4 mobile-pl-1 pt-1 footer-max-height overflow-hidden-auto scrollbar-stable", children: /* @__PURE__ */ jsx2("div", { className: "flex flex-col width-percent-100 content-max-width align-self-center", children: /* @__PURE__ */ jsx2(
          CodeMirror2,
          {
            yText: yPrompt,
            yUndoManager: yPromptUndoManager,
            awareness: yProvider.awareness,
            language: "markdown",
            theme,
            className: "cm-min-height-10vh mr-2 cm-border",
            onFocus: onPromptFocus,
            onBlur: onPromptBlur
          }
        ) }) }),
        /* @__PURE__ */ jsx2("div", { className: "flex flex-col pl-4 mobile-pl-1 overflow-hidden scrollbar-stable", children: /* @__PURE__ */ jsx2("div", { className: "flex flex-row justify-end width-percent-100 content-max-width align-self-center", children: /* @__PURE__ */ jsx2(
          "div",
          {
            className: "mr-3 nowrap text-smaller-8 text-muted opacity-50 user-select-none pointer-events-none",
            style: { visibility: promptFocused ? "visible" : "hidden" },
            children: "Esc + Tab"
          }
        ) }) }),
        /* @__PURE__ */ jsx2("div", { className: "flex flex-col pt-1 pb-2 pl-4 mobile-pl-1 overflow-hidden scrollbar-stable", children: /* @__PURE__ */ jsxs2("div", { className: "flex flex-row justify-between items-center width-percent-100 content-max-width align-self-center", children: [
          /* @__PURE__ */ jsx2("div", { className: "flex flex-row" }),
          /* @__PURE__ */ jsxs2("div", { className: "flex flex-row justify-end items-center gap-2 mr-2", children: [
            /* @__PURE__ */ jsx2(
              "button",
              {
                className: `flex flex-row items-center p-1 overflow-hidden text-smaller-6 ${!pendingRequests.length ? "opacity-10" : "opacity-100"}`,
                onClick: cancelRequests,
                disabled: !pendingRequests.length,
                children: "Cancel"
              }
            ),
            /* @__PURE__ */ jsx2("button", { className: "flex flex-row items-center p-2 overflow-hidden text-larger-2", onClick: submitPrompt, children: /* @__PURE__ */ jsx2("i", { className: "fa-solid fa-paper-plane" }) })
          ] })
        ] }) })
      ] });
    })()
  ] });
};

// src/components/conversation-list.jsx
import { jsx as jsx4 } from "react/jsx-runtime";

// src/components/conversation-list-item.jsx
import { Fragment as Fragment3, jsx as jsx3, jsxs as jsxs3 } from "react/jsx-runtime";
import { useLayoutEffect as useLayoutEffect3, useState as useState3, memo as memo2 } from "react";
var ConversationListItem = memo2(({ yConversations, conversationId, isSelected, selectConversation, deleteConversation }) => {
  const [yConversation, setYConversation] = useState3(null);
  const [yLabel, setYLabel] = useState3(null);
  const [label, setLabel] = useState3(null);
  const [yConversationRequests, setYConversationRequests] = useState3(null);
  const [pendingRequests, setPendingRequests] = useState3(null);
  const [initialized, setInitialized] = useState3(false);
  const valid = conversationId && yConversations && yConversation && yLabel && yConversationRequests;
  useLayoutEffect3(() => {
    const initialized2 = conversationId && yConversations;
    setInitialized(initialized2);
    if (!initialized2) return;
    const yConversation2 = yConversations.get(conversationId);
    setYConversation(yConversation2);
    if (!yConversation2) return;
    const yLabel2 = yConversation2.get("label");
    setYLabel(yLabel2);
    const yLabelObserver = () => {
      setLabel(yLabel2.toString());
    };
    if (yLabel2) {
      yLabel2.observe(yLabelObserver);
      setLabel(yLabel2.toString());
    }
    const yConversationRequests2 = yConversation2.get("requests");
    setYConversationRequests(yConversationRequests2);
    const yConversationRequestsObserver = () => {
      setPendingRequests(yConversationRequests2.toArray());
    };
    if (yConversationRequests2) {
      yConversationRequests2.observe(yConversationRequestsObserver);
      setPendingRequests(yConversationRequests2.toArray());
    }
    return () => {
      if (yConversationRequests2) yConversationRequests2.unobserve(yConversationRequestsObserver);
      if (yLabel2) yLabel2.unobserve(yLabelObserver);
    };
  }, [conversationId, yConversations]);
  return /* @__PURE__ */ jsxs3(
    "div",
    {
      className: `flex flex-row items-center min-width-0 shrink-0 gap-1 px-2 py-1 cursor-pointer ${isSelected ? "bg-panel selected" : "unselected"}`,
      onClick: () => selectConversation(conversationId),
      children: [
        (() => {
          if (!initialized || !valid) return /* @__PURE__ */ jsx3("div", { children: "\xA0" });
          return /* @__PURE__ */ jsxs3(Fragment3, { children: [
            /* @__PURE__ */ jsx3("div", { className: `flex-1 nowrap overflow-hidden ellipsis ${label ? "opacity-100" : "opacity-50"}`, title: `${label || ""}`, children: label || "unlabeled" }),
            pendingRequests.length > 0 && /* @__PURE__ */ jsx3("div", { className: "flex flex-row justify-center items-center width-4 height-4", children: /* @__PURE__ */ jsx3("i", { className: "fa-solid fa-circle line-height-inherit faded-pulse" }) })
          ] });
        })(),
        /* @__PURE__ */ jsx3(
          "button",
          {
            className: "flex flex-row justify-center items-center width-4 height-4 overflow-hidden border-transparent",
            onClick: (event) => {
              event.stopPropagation();
              deleteConversation(conversationId);
            },
            children: /* @__PURE__ */ jsx3("i", { className: "fa-solid fa-xmark line-height-inherit scale-80" })
          }
        )
      ]
    }
  );
});

// src/components/conversation-list.jsx
import { useLayoutEffect as useLayoutEffect4, useState as useState4 } from "react";
var ConversationList = ({
  persistenceEverSynced,
  providerEverSynced,
  yConversations,
  yConversationsOrder,
  selectedConversationId,
  selectConversation,
  deleteConversation
}) => {
  const [conversationsOrder, setConversationsOrder] = useState4(null);
  const [initialized, setInitialized] = useState4(false);
  const synced = persistenceEverSynced && providerEverSynced;
  const valid = yConversations && yConversationsOrder;
  useLayoutEffect4(() => {
    const initialized2 = synced && yConversations && yConversationsOrder;
    setInitialized(initialized2);
    if (!initialized2) return;
    const yConversationsOrderObserver = () => {
      setConversationsOrder(yConversationsOrder.toArray().reverse());
    };
    yConversationsOrder.observe(yConversationsOrderObserver);
    setConversationsOrder(yConversationsOrder.toArray().reverse());
    return () => {
      yConversationsOrder.unobserve(yConversationsOrderObserver);
    };
  }, [synced, yConversations, yConversationsOrder]);
  return /* @__PURE__ */ jsx4("div", { className: "flex-1 flex flex-col min-0 overflow-hidden-auto", children: (() => {
    if (!initialized) return /* @__PURE__ */ jsx4("div", { className: "p-2", children: "\xA0" });
    if (!valid) return /* @__PURE__ */ jsx4("div", { className: "p-2", children: "Invalid data." });
    return conversationsOrder.map((conversationId, index) => {
      const isSelected = conversationId === selectedConversationId;
      return /* @__PURE__ */ jsx4(
        ConversationListItem,
        {
          yConversations,
          conversationId,
          isSelected,
          selectConversation,
          deleteConversation
        },
        conversationId
      );
    });
  })() });
};

// src/components/app.jsx
import { useEffect, useState as useState5, useCallback as useCallback2 } from "react";
import { useTheme, useFadeIn } from "ccai";
import { v4 as uuidv43 } from "uuid";
import * as Y3 from "yjs";
import { WebsocketProvider } from "y-websocket";
import { IndexeddbPersistence } from "y-indexeddb";
var appId = "chat";
var docId = "chat";
var wsProtocol = window.location.protocol === "https:" ? "wss:" : "ws:";
var wsUrl = `${wsProtocol}//${window.location.host}/kernel/${appId}/documents`;
var App = () => {
  const theme = useTheme();
  useFadeIn();
  const [yDoc, setYDoc] = useState5(null);
  const [yData, setYData] = useState5(null);
  const [yPersistence, setYPersistence] = useState5(null);
  const [persistenceEverSynced, setPersistenceEverSynced] = useState5(false);
  const [yProvider, setYProvider] = useState5(null);
  const [providerStatus, setProviderStatus] = useState5("");
  const [providerIsSynced, setProviderIsSynced] = useState5(false);
  const [providerEverSynced, setProviderEverSynced] = useState5(false);
  const [yConversations, setYConversations] = useState5(null);
  const [yConversationsOrder, setYConversationsOrder] = useState5(null);
  const [selectedConversationId, setSelectedConversationId] = useState5(null);
  const [yRequests, setYRequests] = useState5(null);
  const [yRequestsOrder, setYRequestsOrder] = useState5(null);
  const [sidebarCollapsed, setSidebarCollapsed] = useState5(false);
  useEffect(() => {
    let yDoc2 = null;
    let yData2 = null;
    let yDataObserver = null;
    let yPersistence2 = null;
    let yProvider2 = null;
    const init = () => {
      yDoc2 = new Y3.Doc();
      setYDoc(yDoc2);
      yData2 = yDoc2.getMap("data");
      setYData(yData2);
      yPersistence2 = new IndexeddbPersistence(docId, yDoc2);
      setYPersistence(yPersistence2);
      yPersistence2.once("synced", () => {
        setPersistenceEverSynced(true);
        let dataId = yData2.get("id");
        yDataObserver = (event) => {
          if (event.keysChanged.has("id")) {
            const updatedDataId = yData2.get("id");
            if (!dataId) {
              dataId = updatedDataId;
            } else {
              console.log("chat: clearing database");
              setProviderEverSynced(false);
              setPersistenceEverSynced(false);
              setSelectedConversationId(null);
              yData2.unobserve(yDataObserver);
              yDataObserver = null;
              yData2 = null;
              setYData(null);
              yProvider2.destroy();
              yProvider2 = null;
              setYProvider(null);
              const _yDoc = yDoc2;
              yDoc2 = null;
              setYDoc(null);
              const clearDataPromise = yPersistence2.clearData();
              yPersistence2 = null;
              setYPersistence(null);
              clearDataPromise.finally(() => {
                _yDoc.destroy();
                init();
              });
              return;
            }
          }
          if (event.keysChanged.has("conversations")) setYConversations(yData2.get("conversations"));
          if (event.keysChanged.has("conversations_order")) setYConversationsOrder(yData2.get("conversations_order"));
          if (event.keysChanged.has("requests")) setYRequests(yData2.get("requests"));
          if (event.keysChanged.has("requests_order")) setYRequestsOrder(yData2.get("requests_order"));
        };
        yData2.observe(yDataObserver);
        setYConversations(yData2.get("conversations"));
        setYConversationsOrder(yData2.get("conversations_order"));
        setYRequests(yData2.get("requests"));
        setYRequestsOrder(yData2.get("requests_order"));
        yProvider2 = new WebsocketProvider(wsUrl, docId, yDoc2);
        setYProvider(yProvider2);
        yProvider2.on("status", (status) => {
          setProviderStatus(status?.status || "");
        });
        yProvider2.on("sync", (isSynced) => {
          setProviderIsSynced(isSynced);
          if (isSynced) setProviderEverSynced(true);
        });
        yProvider2.awareness.setLocalStateField("user", { color: "#0064BAFF" });
      });
    };
    init();
    return () => {
      if (yData2 && yDataObserver) yData2.unobserve(yDataObserver);
      if (yProvider2) yProvider2.destroy();
      if (yPersistence2) yPersistence2.destroy();
      if (yDoc2) yDoc2.destroy();
    };
  }, []);
  const createConversation = useCallback2(() => {
    yDoc.transact(() => {
      const rootNodeId = "root";
      const rootNode = new Y3.Map(Object.entries({
        id: rootNodeId,
        role: null,
        content: null,
        reasoning_content: null,
        tool_calls: null,
        parent: null,
        children: new Y3.Array(),
        child_index: null,
        editing: null,
        editor_content: null,
        editor_reasoning_content: null,
        editor_tool_calls: null,
        completion_tokens: null,
        prompt_tokens: null,
        total_tokens: null,
        prompt_n: null,
        prompt_ms: null,
        predicted_n: null,
        predicted_ms: null
      }));
      const conversationId = uuidv43();
      const conversation = new Y3.Map(Object.entries({
        id: conversationId,
        nodes: new Y3.Map(Object.entries({
          [rootNodeId]: rootNode
        })),
        prompt: new Y3.Text(),
        label: new Y3.Text(),
        requests: new Y3.Array()
      }));
      yConversations.set(conversationId, conversation);
      yConversationsOrder.push([conversationId]);
      setSelectedConversationId(conversationId);
    });
  }, [yDoc, yConversations, yConversationsOrder]);
  const selectConversation = useCallback2((conversationId) => {
    setSelectedConversationId(conversationId);
  }, []);
  const deleteConversation = useCallback2((conversationId) => {
    yDoc.transact(() => {
      yConversations.delete(conversationId);
      for (let i = 0; i < yConversationsOrder.length; i++) {
        if (conversationId === yConversationsOrder.get(i)) {
          yConversationsOrder.delete(i, 1);
          break;
        }
      }
      setSelectedConversationId((prev) => {
        if (prev === conversationId) return null;
        else return prev;
      });
    });
  }, [yDoc, yConversations, yConversationsOrder]);
  const collapseSidebar = useCallback2(() => {
    setSidebarCollapsed(true);
  }, []);
  const expandSidebar = useCallback2(() => {
    setSidebarCollapsed(false);
  }, []);
  return /* @__PURE__ */ jsxs4("div", { className: "flex-1 flex flex-row min-0", children: [
    /* @__PURE__ */ jsxs4("div", { className: "flex flex-col min-0 sidebar-width sidebar-max-width border-r", style: { display: sidebarCollapsed ? "none" : "flex" }, children: [
      /* @__PURE__ */ jsx5("div", { className: "flex flex-col p-2 sidebar-button-max-width overflow-hidden", style: { containerType: "inline-size" }, children: /* @__PURE__ */ jsxs4(
        "button",
        {
          className: "flex flex-row justify-center items-center gap-1 p-2 overflow-hidden",
          style: { fontSize: "clamp(0.5rem, 12cqw, 1rem)" },
          onClick: createConversation,
          disabled: !persistenceEverSynced || !providerEverSynced || !yDoc || !yConversations || !yConversationsOrder,
          children: [
            /* @__PURE__ */ jsx5("i", { className: "fa-solid fa-plus line-height-inherit scale-80" }),
            /* @__PURE__ */ jsx5("div", { children: "New Chat" })
          ]
        }
      ) }),
      /* @__PURE__ */ jsx5(
        ConversationList,
        {
          persistenceEverSynced,
          providerEverSynced,
          yConversations,
          yConversationsOrder,
          selectedConversationId,
          selectConversation,
          deleteConversation
        }
      )
    ] }),
    /* @__PURE__ */ jsx5(
      Conversation,
      {
        theme,
        yDoc,
        yProvider,
        persistenceEverSynced,
        providerStatus,
        providerIsSynced,
        providerEverSynced,
        yConversations,
        conversationId: selectedConversationId,
        yRequests,
        yRequestsOrder,
        sidebarCollapsed,
        collapseSidebar,
        expandSidebar
      },
      selectedConversationId
    )
  ] });
};
export {
  App
};
