from pathlib import Path
import json

SCAFFOLD = {
    "data/raw": None,
    "data/labels": None,
    "models": None,
    "runs": None,
    "notebooks": {"README.md": "# Notebooks\n"},
    "scripts": None,
    "modelcub.yaml": "project: your-project\nimages: data/raw\nlabels: data/labels\nmodels_dir: models\n",
    "README.md": "# Your ModelCub Project\n\nRun:\n\n```\nmodelcub about\n```\n",
}

GITIGNORE = """# Generated by modelcub init
__pycache__/
.venv/
runs/
models/
*.pt
*.onnx
.DS_Store
"""

def write_tree(root: Path, force: bool = False):
    for rel, content in SCAFFOLD.items():
        target = (root / rel)
        if content is None:
            target.mkdir(parents=True, exist_ok=True)
        else:
            target.parent.mkdir(parents=True, exist_ok=True)
            if target.exists() and not force:
                print(f"skip: {rel} (exists)")
                continue
            if isinstance(content, dict):
                for fname, fcontent in content.items():
                    (target / fname).parent.mkdir(parents=True, exist_ok=True)
                    (target / fname).write_text(fcontent, encoding="utf-8")
            else:
                target.write_text(content, encoding="utf-8")
    gi = root / ".gitignore"
    if not gi.exists() or force:
        gi.write_text(GITIGNORE, encoding="utf-8")

def run(args):
    target = Path(args.path).resolve()
    target.mkdir(parents=True, exist_ok=True)
    write_tree(target, force=getattr(args, "force", False))
    print(json.dumps({"created": str(target)}, indent=2))
    return 0
