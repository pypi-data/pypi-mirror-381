name: Tests

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - sieves/**

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:

    - name: Maximize build space
      shell: bash
      run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install tesseract-ocr
        uv venv .venv --python 3.12
        uv sync --all-extras

#    - name: Set up vLLM for CPU
#      run: |
#        sudo apt-get install -y gcc-12 g++-12 libnuma-dev
#        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 10 --slave /usr/bin/g++ g++ /usr/bin/g++-12
#        git clone https://github.com/vllm-project/vllm.git vllm_source
#        source .venv/bin/activate
#        uv pip uninstall vllm
#        cd vllm_source
#        echo ":: Install auxiliary tools"
#        uv pip install "cmake>=3.26" wheel packaging ninja "setuptools-scm>=8" numpy
#        echo ":: Install torch CPU suite"
#        uv pip install --upgrade torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
#        echo ":: Install requirements/cpu.txt"
#        uv pip install --upgrade filelock setuptools
#        uv pip install -v -r requirements/cpu.txt --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match
#        echo ":: Building wheel"
#        export VLLM_TARGET_DEVICE=cpu
#        python setup.py bdist_wheel
#        uv pip install dist/*.whl
#        cd ..
#        rm -rf vllm_source
#        uv pip uninstall outlines
#        uv pip install "outlines<1"

    - name: Set up ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        # Run as daemon if ollama default port is free (port usage fails if Ollama has been launched on this machine
        # before otherwise).
        ((! nc -z 127.0.0.1 11434) && (ollama serve &)) || true
        ollama pull smollm:135m-instruct-v0.2-q8_0

    - name: Create and enable 4 GB swap
      run: |
        sudo fallocate -l 4G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -h

    - name: Build docs
      run: |
        source .venv/bin/activate
        mkdocs build


    - name: Run tests
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        source .venv/bin/activate
        pytest -x --cov --cov-report=xml -m "not slow"

    - name: Debug
      run: |
        ls -lh

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.xml
