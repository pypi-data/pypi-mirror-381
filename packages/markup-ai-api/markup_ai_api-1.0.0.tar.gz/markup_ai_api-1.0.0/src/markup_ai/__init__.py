# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        AnalysisScore,
        ClarityCategory,
        ClarityScore,
        ConfigOptions,
        ConsistencyCategory,
        ConsistencyScore,
        Dialects,
        ErrorResponse,
        GrammarCategory,
        GrammarScore,
        Issue,
        IssueCategory,
        OriginalContent,
        Position,
        QualityScore,
        RewriteContent,
        RewriteResponse,
        ScoreOutput,
        StyleCheckResponse,
        StyleGuide,
        StyleGuideResponse,
        StyleGuideStatus,
        StyleGuides,
        Subcategory,
        Suggestion,
        SuggestionOriginalContent,
        SuggestionResponse,
        TermReplaceCategory,
        TerminologyScore,
        ToneCategory,
        ToneScore,
        Tones,
        WebhookResponse,
        WorkflowInfo,
        WorkflowResponse,
        WorkflowStatus,
    )
    from .errors import (
        ContentTooLargeError,
        ForbiddenError,
        InternalServerError,
        NotFoundError,
        TooManyRequestsError,
        UnauthorizedError,
        UnprocessableEntityError,
    )
    from . import style_checks, style_guides, style_rewrites, style_suggestions
    from .client import AsyncMarkupAI, MarkupAI
    from .environment import MarkupAIEnvironment
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AnalysisScore": ".types",
    "AsyncMarkupAI": ".client",
    "ClarityCategory": ".types",
    "ClarityScore": ".types",
    "ConfigOptions": ".types",
    "ConsistencyCategory": ".types",
    "ConsistencyScore": ".types",
    "ContentTooLargeError": ".errors",
    "Dialects": ".types",
    "ErrorResponse": ".types",
    "ForbiddenError": ".errors",
    "GrammarCategory": ".types",
    "GrammarScore": ".types",
    "InternalServerError": ".errors",
    "Issue": ".types",
    "IssueCategory": ".types",
    "MarkupAI": ".client",
    "MarkupAIEnvironment": ".environment",
    "NotFoundError": ".errors",
    "OriginalContent": ".types",
    "Position": ".types",
    "QualityScore": ".types",
    "RewriteContent": ".types",
    "RewriteResponse": ".types",
    "ScoreOutput": ".types",
    "StyleCheckResponse": ".types",
    "StyleGuide": ".types",
    "StyleGuideResponse": ".types",
    "StyleGuideStatus": ".types",
    "StyleGuides": ".types",
    "Subcategory": ".types",
    "Suggestion": ".types",
    "SuggestionOriginalContent": ".types",
    "SuggestionResponse": ".types",
    "TermReplaceCategory": ".types",
    "TerminologyScore": ".types",
    "ToneCategory": ".types",
    "ToneScore": ".types",
    "Tones": ".types",
    "TooManyRequestsError": ".errors",
    "UnauthorizedError": ".errors",
    "UnprocessableEntityError": ".errors",
    "WebhookResponse": ".types",
    "WorkflowInfo": ".types",
    "WorkflowResponse": ".types",
    "WorkflowStatus": ".types",
    "__version__": ".version",
    "style_checks": ".",
    "style_guides": ".",
    "style_rewrites": ".",
    "style_suggestions": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AnalysisScore",
    "AsyncMarkupAI",
    "ClarityCategory",
    "ClarityScore",
    "ConfigOptions",
    "ConsistencyCategory",
    "ConsistencyScore",
    "ContentTooLargeError",
    "Dialects",
    "ErrorResponse",
    "ForbiddenError",
    "GrammarCategory",
    "GrammarScore",
    "InternalServerError",
    "Issue",
    "IssueCategory",
    "MarkupAI",
    "MarkupAIEnvironment",
    "NotFoundError",
    "OriginalContent",
    "Position",
    "QualityScore",
    "RewriteContent",
    "RewriteResponse",
    "ScoreOutput",
    "StyleCheckResponse",
    "StyleGuide",
    "StyleGuideResponse",
    "StyleGuideStatus",
    "StyleGuides",
    "Subcategory",
    "Suggestion",
    "SuggestionOriginalContent",
    "SuggestionResponse",
    "TermReplaceCategory",
    "TerminologyScore",
    "ToneCategory",
    "ToneScore",
    "Tones",
    "TooManyRequestsError",
    "UnauthorizedError",
    "UnprocessableEntityError",
    "WebhookResponse",
    "WorkflowInfo",
    "WorkflowResponse",
    "WorkflowStatus",
    "__version__",
    "style_checks",
    "style_guides",
    "style_rewrites",
    "style_suggestions",
]
