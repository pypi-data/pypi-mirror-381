# coding: utf-8

"""
    wst-api

    Api which exposes data about the current status of the Westerschelde tunnel

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from wst_api_client.models.road_situation import RoadSituation
from typing import Optional, Set
from typing_extensions import Self

class SituationStatus(BaseModel):
    """
    SituationStatus
    """ # noqa: E501
    toll_square_to_westerscheldetunnel: Optional[RoadSituation] = Field(default=None, alias="toll-square-to-westerscheldetunnel")
    westerscheldetunnel_west: Optional[RoadSituation] = Field(default=None, alias="westerscheldetunnel-west")
    westerscheldetunnel_to_axelsche_gat: Optional[RoadSituation] = Field(default=None, alias="westerscheldetunnel-to-axelsche-gat")
    sluiskiltunnel_south: Optional[RoadSituation] = Field(default=None, alias="sluiskiltunnel-south")
    westerscheldetunnel_to_toll_square: Optional[RoadSituation] = Field(default=None, alias="westerscheldetunnel-to-toll-square")
    westerscheldetunnel_east: Optional[RoadSituation] = Field(default=None, alias="westerscheldetunnel-east")
    axelsche_gat_to_westerscheldetunnel: Optional[RoadSituation] = Field(default=None, alias="axelsche-gat-to-westerscheldetunnel")
    sluiskiltunnel_north: Optional[RoadSituation] = Field(default=None, alias="sluiskiltunnel-north")
    __properties: ClassVar[List[str]] = ["toll-square-to-westerscheldetunnel", "westerscheldetunnel-west", "westerscheldetunnel-to-axelsche-gat", "sluiskiltunnel-south", "westerscheldetunnel-to-toll-square", "westerscheldetunnel-east", "axelsche-gat-to-westerscheldetunnel", "sluiskiltunnel-north"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SituationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of toll_square_to_westerscheldetunnel
        if self.toll_square_to_westerscheldetunnel:
            _dict['toll-square-to-westerscheldetunnel'] = self.toll_square_to_westerscheldetunnel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of westerscheldetunnel_west
        if self.westerscheldetunnel_west:
            _dict['westerscheldetunnel-west'] = self.westerscheldetunnel_west.to_dict()
        # override the default output from pydantic by calling `to_dict()` of westerscheldetunnel_to_axelsche_gat
        if self.westerscheldetunnel_to_axelsche_gat:
            _dict['westerscheldetunnel-to-axelsche-gat'] = self.westerscheldetunnel_to_axelsche_gat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sluiskiltunnel_south
        if self.sluiskiltunnel_south:
            _dict['sluiskiltunnel-south'] = self.sluiskiltunnel_south.to_dict()
        # override the default output from pydantic by calling `to_dict()` of westerscheldetunnel_to_toll_square
        if self.westerscheldetunnel_to_toll_square:
            _dict['westerscheldetunnel-to-toll-square'] = self.westerscheldetunnel_to_toll_square.to_dict()
        # override the default output from pydantic by calling `to_dict()` of westerscheldetunnel_east
        if self.westerscheldetunnel_east:
            _dict['westerscheldetunnel-east'] = self.westerscheldetunnel_east.to_dict()
        # override the default output from pydantic by calling `to_dict()` of axelsche_gat_to_westerscheldetunnel
        if self.axelsche_gat_to_westerscheldetunnel:
            _dict['axelsche-gat-to-westerscheldetunnel'] = self.axelsche_gat_to_westerscheldetunnel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sluiskiltunnel_north
        if self.sluiskiltunnel_north:
            _dict['sluiskiltunnel-north'] = self.sluiskiltunnel_north.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SituationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "toll-square-to-westerscheldetunnel": RoadSituation.from_dict(obj["toll-square-to-westerscheldetunnel"]) if obj.get("toll-square-to-westerscheldetunnel") is not None else None,
            "westerscheldetunnel-west": RoadSituation.from_dict(obj["westerscheldetunnel-west"]) if obj.get("westerscheldetunnel-west") is not None else None,
            "westerscheldetunnel-to-axelsche-gat": RoadSituation.from_dict(obj["westerscheldetunnel-to-axelsche-gat"]) if obj.get("westerscheldetunnel-to-axelsche-gat") is not None else None,
            "sluiskiltunnel-south": RoadSituation.from_dict(obj["sluiskiltunnel-south"]) if obj.get("sluiskiltunnel-south") is not None else None,
            "westerscheldetunnel-to-toll-square": RoadSituation.from_dict(obj["westerscheldetunnel-to-toll-square"]) if obj.get("westerscheldetunnel-to-toll-square") is not None else None,
            "westerscheldetunnel-east": RoadSituation.from_dict(obj["westerscheldetunnel-east"]) if obj.get("westerscheldetunnel-east") is not None else None,
            "axelsche-gat-to-westerscheldetunnel": RoadSituation.from_dict(obj["axelsche-gat-to-westerscheldetunnel"]) if obj.get("axelsche-gat-to-westerscheldetunnel") is not None else None,
            "sluiskiltunnel-north": RoadSituation.from_dict(obj["sluiskiltunnel-north"]) if obj.get("sluiskiltunnel-north") is not None else None
        })
        return _obj


