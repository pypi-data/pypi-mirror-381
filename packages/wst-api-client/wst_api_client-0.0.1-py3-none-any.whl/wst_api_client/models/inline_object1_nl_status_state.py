# coding: utf-8

"""
    wst-api

    Api which exposes data about the current status of the Westerschelde tunnel

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InlineObject1NlStatusState(BaseModel):
    """
    InlineObject1NlStatusState
    """ # noqa: E501
    closed: Optional[StrictStr] = None
    detour: Optional[StrictStr] = None
    single_lane: Optional[StrictStr] = Field(default=None, alias="single-lane")
    two_way_traffic: Optional[StrictStr] = Field(default=None, alias="two-way-traffic")
    speed_limit_30: Optional[StrictStr] = Field(default=None, alias="speed-limit-30")
    speed_limit_50: Optional[StrictStr] = Field(default=None, alias="speed-limit-50")
    speed_limit_70: Optional[StrictStr] = Field(default=None, alias="speed-limit-70")
    speed_limit_80: Optional[StrictStr] = Field(default=None, alias="speed-limit-80")
    slippery_road_surface: Optional[StrictStr] = Field(default=None, alias="slippery-road-surface")
    fog_likely: Optional[StrictStr] = Field(default=None, alias="fog-likely")
    snow_or_ice: Optional[StrictStr] = Field(default=None, alias="snow-or-ice")
    traffic_queues: Optional[StrictStr] = Field(default=None, alias="traffic-queues")
    maximum_width: Optional[StrictStr] = Field(default=None, alias="maximum-width")
    maximum_width_200: Optional[StrictStr] = Field(default=None, alias="maximum-width-200")
    maximum_width_300: Optional[StrictStr] = Field(default=None, alias="maximum-width-300")
    metering_light: Optional[StrictStr] = Field(default=None, alias="metering-light")
    roadworks: Optional[StrictStr] = None
    other: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["closed", "detour", "single-lane", "two-way-traffic", "speed-limit-30", "speed-limit-50", "speed-limit-70", "speed-limit-80", "slippery-road-surface", "fog-likely", "snow-or-ice", "traffic-queues", "maximum-width", "maximum-width-200", "maximum-width-300", "metering-light", "roadworks", "other"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineObject1NlStatusState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineObject1NlStatusState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "closed": obj.get("closed"),
            "detour": obj.get("detour"),
            "single-lane": obj.get("single-lane"),
            "two-way-traffic": obj.get("two-way-traffic"),
            "speed-limit-30": obj.get("speed-limit-30"),
            "speed-limit-50": obj.get("speed-limit-50"),
            "speed-limit-70": obj.get("speed-limit-70"),
            "speed-limit-80": obj.get("speed-limit-80"),
            "slippery-road-surface": obj.get("slippery-road-surface"),
            "fog-likely": obj.get("fog-likely"),
            "snow-or-ice": obj.get("snow-or-ice"),
            "traffic-queues": obj.get("traffic-queues"),
            "maximum-width": obj.get("maximum-width"),
            "maximum-width-200": obj.get("maximum-width-200"),
            "maximum-width-300": obj.get("maximum-width-300"),
            "metering-light": obj.get("metering-light"),
            "roadworks": obj.get("roadworks"),
            "other": obj.get("other")
        })
        return _obj


