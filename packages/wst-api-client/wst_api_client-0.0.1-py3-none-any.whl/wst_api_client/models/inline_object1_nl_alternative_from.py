# coding: utf-8

"""
    wst-api

    Api which exposes data about the current status of the Westerschelde tunnel

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InlineObject1NlAlternativeFrom(BaseModel):
    """
    InlineObject1NlAlternativeFrom
    """ # noqa: E501
    u21a: Optional[StrictStr] = Field(default=None, alias="U21a")
    u21b: Optional[StrictStr] = Field(default=None, alias="U21b")
    u07a: Optional[StrictStr] = Field(default=None, alias="U07a")
    u07b: Optional[StrictStr] = Field(default=None, alias="U07b")
    u07_u64: Optional[StrictStr] = Field(default=None, alias="U07-U64")
    u10s: Optional[StrictStr] = Field(default=None, alias="U10s")
    u64a: Optional[StrictStr] = Field(default=None, alias="U64a")
    u64b: Optional[StrictStr] = Field(default=None, alias="U64b")
    u09a: Optional[StrictStr] = Field(default=None, alias="U09a")
    u09b: Optional[StrictStr] = Field(default=None, alias="U09b")
    u08a: Optional[StrictStr] = Field(default=None, alias="U08a")
    u08b: Optional[StrictStr] = Field(default=None, alias="U08b")
    u08_u65: Optional[StrictStr] = Field(default=None, alias="U08-U65")
    u10n: Optional[StrictStr] = Field(default=None, alias="U10n")
    u65a: Optional[StrictStr] = Field(default=None, alias="U65a")
    u65b: Optional[StrictStr] = Field(default=None, alias="U65b")
    __properties: ClassVar[List[str]] = ["U21a", "U21b", "U07a", "U07b", "U07-U64", "U10s", "U64a", "U64b", "U09a", "U09b", "U08a", "U08b", "U08-U65", "U10n", "U65a", "U65b"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineObject1NlAlternativeFrom from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineObject1NlAlternativeFrom from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "U21a": obj.get("U21a"),
            "U21b": obj.get("U21b"),
            "U07a": obj.get("U07a"),
            "U07b": obj.get("U07b"),
            "U07-U64": obj.get("U07-U64"),
            "U10s": obj.get("U10s"),
            "U64a": obj.get("U64a"),
            "U64b": obj.get("U64b"),
            "U09a": obj.get("U09a"),
            "U09b": obj.get("U09b"),
            "U08a": obj.get("U08a"),
            "U08b": obj.get("U08b"),
            "U08-U65": obj.get("U08-U65"),
            "U10n": obj.get("U10n"),
            "U65a": obj.get("U65a"),
            "U65b": obj.get("U65b")
        })
        return _obj


