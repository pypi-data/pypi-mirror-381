# coding: utf-8

"""
    wst-api

    Api which exposes data about the current status of the Westerschelde tunnel

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from wst_api_client.models.inline_object1_nl_alternative import InlineObject1NlAlternative
from wst_api_client.models.inline_object1_nl_channel import InlineObject1NlChannel
from wst_api_client.models.inline_object1_nl_direction import InlineObject1NlDirection
from wst_api_client.models.inline_object1_nl_extra_travel_time import InlineObject1NlExtraTravelTime
from wst_api_client.models.inline_object1_nl_incidents import InlineObject1NlIncidents
from wst_api_client.models.inline_object1_nl_road import InlineObject1NlRoad
from wst_api_client.models.inline_object1_nl_status import InlineObject1NlStatus
from wst_api_client.models.inline_object1_nl_subscription_group import InlineObject1NlSubscriptionGroup
from wst_api_client.models.inline_object1_nl_widget import InlineObject1NlWidget
from typing import Optional, Set
from typing_extensions import Self

class InlineObject1Nl(BaseModel):
    """
    InlineObject1Nl
    """ # noqa: E501
    widget: Optional[InlineObject1NlWidget] = None
    incidents: Optional[InlineObject1NlIncidents] = None
    road: Optional[InlineObject1NlRoad] = None
    status: Optional[InlineObject1NlStatus] = None
    direction: Optional[InlineObject1NlDirection] = None
    alternative: Optional[InlineObject1NlAlternative] = None
    subscription_group: Optional[InlineObject1NlSubscriptionGroup] = None
    channel: Optional[InlineObject1NlChannel] = None
    extra_travel_time: Optional[InlineObject1NlExtraTravelTime] = None
    __properties: ClassVar[List[str]] = ["widget", "incidents", "road", "status", "direction", "alternative", "subscription_group", "channel", "extra_travel_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineObject1Nl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of widget
        if self.widget:
            _dict['widget'] = self.widget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incidents
        if self.incidents:
            _dict['incidents'] = self.incidents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of road
        if self.road:
            _dict['road'] = self.road.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of direction
        if self.direction:
            _dict['direction'] = self.direction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alternative
        if self.alternative:
            _dict['alternative'] = self.alternative.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_group
        if self.subscription_group:
            _dict['subscription_group'] = self.subscription_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extra_travel_time
        if self.extra_travel_time:
            _dict['extra_travel_time'] = self.extra_travel_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineObject1Nl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "widget": InlineObject1NlWidget.from_dict(obj["widget"]) if obj.get("widget") is not None else None,
            "incidents": InlineObject1NlIncidents.from_dict(obj["incidents"]) if obj.get("incidents") is not None else None,
            "road": InlineObject1NlRoad.from_dict(obj["road"]) if obj.get("road") is not None else None,
            "status": InlineObject1NlStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "direction": InlineObject1NlDirection.from_dict(obj["direction"]) if obj.get("direction") is not None else None,
            "alternative": InlineObject1NlAlternative.from_dict(obj["alternative"]) if obj.get("alternative") is not None else None,
            "subscription_group": InlineObject1NlSubscriptionGroup.from_dict(obj["subscription_group"]) if obj.get("subscription_group") is not None else None,
            "channel": InlineObject1NlChannel.from_dict(obj["channel"]) if obj.get("channel") is not None else None,
            "extra_travel_time": InlineObject1NlExtraTravelTime.from_dict(obj["extra_travel_time"]) if obj.get("extra_travel_time") is not None else None
        })
        return _obj


