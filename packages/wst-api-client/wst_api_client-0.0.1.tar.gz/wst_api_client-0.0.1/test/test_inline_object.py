# coding: utf-8

"""
    wst-api

    Api which exposes data about the current status of the Westerschelde tunnel

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wst_api_client.models.inline_object import InlineObject

class TestInlineObject(unittest.TestCase):
    """InlineObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InlineObject:
        """Test InlineObject
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InlineObject`
        """
        model = InlineObject()
        if include_optional:
            return InlineObject(
                to_website = '',
                to_website_mobile = '',
                var_date = wst_api_client.models.inline_object_date.inline_object_date(
                    until = '', 
                    hour = '', ),
                navigation = wst_api_client.models.inline_object_navigation.inline_object_navigation(
                    traffic_information = '', 
                    planned_maintenance = '', ),
                situation_map = wst_api_client.models.inline_object_situation_map.inline_object_situation_map(
                    active_incidents = wst_api_client.models.inline_object_situation_map_active_incidents.inline_object_situation_map_active_incidents(
                        none = '', 
                        singular = '', 
                        plural = '', ), 
                    message = wst_api_client.models.inline_object_situation_map_message.inline_object_situation_map_message(
                        no_svg_support = '', ), ),
                incident_popup = wst_api_client.models.inline_object_incident_popup.inline_object_incident_popup(
                    title = wst_api_client.models.inline_object_incident_popup_title.inline_object_incident_popup_title(
                        incident = '', 
                        scheduled = '', 
                        error = wst_api_client.models.inline_object_incident_popup_title_error.inline_object_incident_popup_title_error(
                            not_found = '', 
                            resolved = '', ), ), 
                    error = wst_api_client.models.inline_object_incident_popup_error.inline_object_incident_popup_error(
                        not_found = '', 
                        resolved = '', ), 
                    heading_when = '', 
                    heading_status = '', 
                    heading_what = '', ),
                incident_status_timeline = wst_api_client.models.inline_object_incident_status_timeline.inline_object_incident_status_timeline(
                    heading_what = '', 
                    after = '', 
                    end_maintenance = '', 
                    nothing_exceptional = '', ),
                scheduled_incidents = wst_api_client.models.inline_object_scheduled_incidents.inline_object_scheduled_incidents(
                    title = '', 
                    show_more = '', 
                    introduction = '', ),
                detour = wst_api_client.models.inline_object_detour.inline_object_detour(
                    title = '', 
                    follow = '', )
            )
        else:
            return InlineObject(
        )
        """

    def testInlineObject(self):
        """Test InlineObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
