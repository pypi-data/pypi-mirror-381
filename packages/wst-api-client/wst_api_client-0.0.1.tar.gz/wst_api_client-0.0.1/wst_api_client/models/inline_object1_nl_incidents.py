# coding: utf-8

"""
    wst-api

    Api which exposes data about the current status of the Westerschelde tunnel

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wst_api_client.models.inline_object1_nl_incidents_extra_travel_time import InlineObject1NlIncidentsExtraTravelTime
from wst_api_client.models.inline_object1_nl_incidents_no_incidents import InlineObject1NlIncidentsNoIncidents
from typing import Optional, Set
from typing_extensions import Self

class InlineObject1NlIncidents(BaseModel):
    """
    InlineObject1NlIncidents
    """ # noqa: E501
    expected_duration: Optional[StrictStr] = None
    extra_travel_time: Optional[InlineObject1NlIncidentsExtraTravelTime] = None
    no_incidents: Optional[InlineObject1NlIncidentsNoIncidents] = None
    __properties: ClassVar[List[str]] = ["expected_duration", "extra_travel_time", "no_incidents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineObject1NlIncidents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extra_travel_time
        if self.extra_travel_time:
            _dict['extra_travel_time'] = self.extra_travel_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of no_incidents
        if self.no_incidents:
            _dict['no_incidents'] = self.no_incidents.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineObject1NlIncidents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expected_duration": obj.get("expected_duration"),
            "extra_travel_time": InlineObject1NlIncidentsExtraTravelTime.from_dict(obj["extra_travel_time"]) if obj.get("extra_travel_time") is not None else None,
            "no_incidents": InlineObject1NlIncidentsNoIncidents.from_dict(obj["no_incidents"]) if obj.get("no_incidents") is not None else None
        })
        return _obj


