# coding: utf-8

"""
    wst-api

    Api which exposes data about the current status of the Westerschelde tunnel

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wst_api_client.models.inline_object_date import InlineObjectDate
from wst_api_client.models.inline_object_detour import InlineObjectDetour
from wst_api_client.models.inline_object_incident_popup import InlineObjectIncidentPopup
from wst_api_client.models.inline_object_incident_status_timeline import InlineObjectIncidentStatusTimeline
from wst_api_client.models.inline_object_navigation import InlineObjectNavigation
from wst_api_client.models.inline_object_scheduled_incidents import InlineObjectScheduledIncidents
from wst_api_client.models.inline_object_situation_map import InlineObjectSituationMap
from typing import Optional, Set
from typing_extensions import Self

class InlineObject(BaseModel):
    """
    InlineObject
    """ # noqa: E501
    to_website: Optional[StrictStr] = None
    to_website_mobile: Optional[StrictStr] = None
    var_date: Optional[InlineObjectDate] = Field(default=None, alias="date")
    navigation: Optional[InlineObjectNavigation] = None
    situation_map: Optional[InlineObjectSituationMap] = None
    incident_popup: Optional[InlineObjectIncidentPopup] = None
    incident_status_timeline: Optional[InlineObjectIncidentStatusTimeline] = None
    scheduled_incidents: Optional[InlineObjectScheduledIncidents] = None
    detour: Optional[InlineObjectDetour] = None
    __properties: ClassVar[List[str]] = ["to_website", "to_website_mobile", "date", "navigation", "situation_map", "incident_popup", "incident_status_timeline", "scheduled_incidents", "detour"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InlineObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of navigation
        if self.navigation:
            _dict['navigation'] = self.navigation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of situation_map
        if self.situation_map:
            _dict['situation_map'] = self.situation_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incident_popup
        if self.incident_popup:
            _dict['incident_popup'] = self.incident_popup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incident_status_timeline
        if self.incident_status_timeline:
            _dict['incident_status_timeline'] = self.incident_status_timeline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduled_incidents
        if self.scheduled_incidents:
            _dict['scheduled_incidents'] = self.scheduled_incidents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detour
        if self.detour:
            _dict['detour'] = self.detour.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InlineObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "to_website": obj.get("to_website"),
            "to_website_mobile": obj.get("to_website_mobile"),
            "date": InlineObjectDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "navigation": InlineObjectNavigation.from_dict(obj["navigation"]) if obj.get("navigation") is not None else None,
            "situation_map": InlineObjectSituationMap.from_dict(obj["situation_map"]) if obj.get("situation_map") is not None else None,
            "incident_popup": InlineObjectIncidentPopup.from_dict(obj["incident_popup"]) if obj.get("incident_popup") is not None else None,
            "incident_status_timeline": InlineObjectIncidentStatusTimeline.from_dict(obj["incident_status_timeline"]) if obj.get("incident_status_timeline") is not None else None,
            "scheduled_incidents": InlineObjectScheduledIncidents.from_dict(obj["scheduled_incidents"]) if obj.get("scheduled_incidents") is not None else None,
            "detour": InlineObjectDetour.from_dict(obj["detour"]) if obj.get("detour") is not None else None
        })
        return _obj


