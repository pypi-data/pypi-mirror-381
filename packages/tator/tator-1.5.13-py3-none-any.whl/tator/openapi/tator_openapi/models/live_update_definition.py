# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class LiveUpdateDefinition(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'layout': 'list[int]',
        'streams': 'list[LiveDefinition]'
    }

    attribute_map = {
        'layout': 'layout',
        'streams': 'streams'
    }

    def __init__(self, layout=None, streams=None, local_vars_configuration=None):  # noqa: E501
        """LiveUpdateDefinition - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._layout = None
        self._streams = None
        self.discriminator = None

        self.layout = layout
        self.streams = streams

    @property
    def layout(self):
        """
        2-element array to define rxc layout

        :return: The layout of this LiveUpdateDefinition. 
        :rtype: list[int]
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """
        2-element array to define rxc layout

        :param layout: The layout of this LiveUpdateDefinition.
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and layout is None:  # noqa: E501
            raise ValueError("Invalid value for `layout`, must not be `None`")  # noqa: E501

        self._layout = layout

    @property
    def streams(self):
        """

        :return: The streams of this LiveUpdateDefinition. 
        :rtype: list[LiveDefinition]
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """

        :param streams: The streams of this LiveUpdateDefinition.
        :type: list[LiveDefinition]
        """
        if self.local_vars_configuration.client_side_validation and streams is None:  # noqa: E501
            raise ValueError("Invalid value for `streams`, must not be `None`")  # noqa: E501

        self._streams = streams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveUpdateDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LiveUpdateDefinition):
            return True

        return self.to_dict() != other.to_dict()
