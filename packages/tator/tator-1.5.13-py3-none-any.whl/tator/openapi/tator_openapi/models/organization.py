# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class Organization(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_membership_permission': 'str',
        'effective_permission': 'int',
        'id': 'int',
        'name': 'str',
        'permission': 'str',
        'thumb': 'str'
    }

    attribute_map = {
        'default_membership_permission': 'default_membership_permission',
        'effective_permission': 'effective_permission',
        'id': 'id',
        'name': 'name',
        'permission': 'permission',
        'thumb': 'thumb'
    }

    def __init__(self, default_membership_permission=None, effective_permission=None, id=None, name=None, permission=None, thumb=None, local_vars_configuration=None):  # noqa: E501
        """Organization - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default_membership_permission = None
        self._effective_permission = None
        self._id = None
        self._name = None
        self._permission = None
        self._thumb = None
        self.discriminator = None

        if default_membership_permission is not None:
            self.default_membership_permission = default_membership_permission
        if effective_permission is not None:
            self.effective_permission = effective_permission
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if permission is not None:
            self.permission = permission
        if thumb is not None:
            self.thumb = thumb

    @property
    def default_membership_permission(self):
        """
        Default user permission level for all projects in this organization. If specified, users in this organizaiton will be automatically added to all projects in this organization with at least this permission level.

        :return: The default_membership_permission of this Organization. 
        :rtype: str
        """
        return self._default_membership_permission

    @default_membership_permission.setter
    def default_membership_permission(self, default_membership_permission):
        """
        Default user permission level for all projects in this organization. If specified, users in this organizaiton will be automatically added to all projects in this organization with at least this permission level.

        :param default_membership_permission: The default_membership_permission of this Organization.
        :type: str
        """
        allowed_values = ["No Access", "View Only", "Can Edit", "Can Transfer", "Can Execute", "Full Control"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and default_membership_permission not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `default_membership_permission` ({0}), must be one of {1}"  # noqa: E501
                .format(default_membership_permission, allowed_values)
            )

        self._default_membership_permission = default_membership_permission

    @property
    def effective_permission(self):
        """
        The effective permission for the user making the request

        :return: The effective_permission of this Organization. 
        :rtype: int
        """
        return self._effective_permission

    @effective_permission.setter
    def effective_permission(self, effective_permission):
        """
        The effective permission for the user making the request

        :param effective_permission: The effective_permission of this Organization.
        :type: int
        """

        self._effective_permission = effective_permission

    @property
    def id(self):
        """
        Unique integer identifying the organization.

        :return: The id of this Organization. 
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Unique integer identifying the organization.

        :param id: The id of this Organization.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Name of the organization.

        :return: The name of this Organization. 
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Name of the organization.

        :param name: The name of this Organization.
        :type: str
        """

        self._name = name

    @property
    def permission(self):
        """
        Permission level of user making request.

        :return: The permission of this Organization. 
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """
        Permission level of user making request.

        :param permission: The permission of this Organization.
        :type: str
        """

        self._permission = permission

    @property
    def thumb(self):
        """
        S3 key of thumbnail used to represent the organization.

        :return: The thumb of this Organization. 
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """
        S3 key of thumbnail used to represent the organization.

        :param thumb: The thumb of this Organization.
        :type: str
        """

        self._thumb = thumb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Organization):
            return True

        return self.to_dict() != other.to_dict()
