# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class LiveDefinition(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feeds': 'list[FeedDefinition]',
        'url': 'str'
    }

    attribute_map = {
        'feeds': 'feeds',
        'url': 'url'
    }

    def __init__(self, feeds=None, url=None, local_vars_configuration=None):  # noqa: E501
        """LiveDefinition - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feeds = None
        self._url = None
        self.discriminator = None

        self.feeds = feeds
        self.url = url

    @property
    def feeds(self):
        """

        :return: The feeds of this LiveDefinition. 
        :rtype: list[FeedDefinition]
        """
        return self._feeds

    @feeds.setter
    def feeds(self, feeds):
        """

        :param feeds: The feeds of this LiveDefinition.
        :type: list[FeedDefinition]
        """
        if self.local_vars_configuration.client_side_validation and feeds is None:  # noqa: E501
            raise ValueError("Invalid value for `feeds`, must not be `None`")  # noqa: E501

        self._feeds = feeds

    @property
    def url(self):
        """
        URL to streaming server.

        :return: The url of this LiveDefinition. 
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        URL to streaming server.

        :param url: The url of this LiveDefinition.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LiveDefinition):
            return True

        return self.to_dict() != other.to_dict()
