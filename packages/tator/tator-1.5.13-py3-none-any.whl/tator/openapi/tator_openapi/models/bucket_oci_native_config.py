# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class BucketOCINativeConfig(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fingerprint': 'str',
        'key_content': 'str',
        'region': 'str',
        'tenancy': 'str',
        'user': 'str'
    }

    attribute_map = {
        'fingerprint': 'fingerprint',
        'key_content': 'key_content',
        'region': 'region',
        'tenancy': 'tenancy',
        'user': 'user'
    }

    def __init__(self, fingerprint=None, key_content=None, region=None, tenancy=None, user=None, local_vars_configuration=None):  # noqa: E501
        """BucketOCINativeConfig - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fingerprint = None
        self._key_content = None
        self._region = None
        self._tenancy = None
        self._user = None
        self.discriminator = None

        self.fingerprint = fingerprint
        self.key_content = key_content
        self.region = region
        self.tenancy = tenancy
        self.user = user

    @property
    def fingerprint(self):
        """
        Public key fingerprint.

        :return: The fingerprint of this BucketOCINativeConfig. 
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Public key fingerprint.

        :param fingerprint: The fingerprint of this BucketOCINativeConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and fingerprint is None:  # noqa: E501
            raise ValueError("Invalid value for `fingerprint`, must not be `None`")  # noqa: E501

        self._fingerprint = fingerprint

    @property
    def key_content(self):
        """
        Private key content.

        :return: The key_content of this BucketOCINativeConfig. 
        :rtype: str
        """
        return self._key_content

    @key_content.setter
    def key_content(self, key_content):
        """
        Private key content.

        :param key_content: The key_content of this BucketOCINativeConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key_content is None:  # noqa: E501
            raise ValueError("Invalid value for `key_content`, must not be `None`")  # noqa: E501

        self._key_content = key_content

    @property
    def region(self):
        """
        OCI region.

        :return: The region of this BucketOCINativeConfig. 
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        OCI region.

        :param region: The region of this BucketOCINativeConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def tenancy(self):
        """
        Tenancy OCID.

        :return: The tenancy of this BucketOCINativeConfig. 
        :rtype: str
        """
        return self._tenancy

    @tenancy.setter
    def tenancy(self, tenancy):
        """
        Tenancy OCID.

        :param tenancy: The tenancy of this BucketOCINativeConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tenancy is None:  # noqa: E501
            raise ValueError("Invalid value for `tenancy`, must not be `None`")  # noqa: E501

        self._tenancy = tenancy

    @property
    def user(self):
        """
        User OCID.

        :return: The user of this BucketOCINativeConfig. 
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        User OCID.

        :param user: The user of this BucketOCINativeConfig.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketOCINativeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BucketOCINativeConfig):
            return True

        return self.to_dict() != other.to_dict()
