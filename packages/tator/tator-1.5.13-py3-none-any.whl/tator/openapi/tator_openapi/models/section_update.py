# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class SectionUpdate(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attributes': 'dict(str, object)',
        'dtype': 'str',
        'elemental_id': 'str',
        'explicit_listing': 'bool',
        'media_add': 'list[int]',
        'media_del': 'list[int]',
        'name': 'str',
        'object_search': 'AttributeOperationSpec',
        'path': 'str',
        'related_search': 'AttributeOperationSpec',
        'tator_user_sections': 'str',
        'visible': 'bool'
    }

    attribute_map = {
        'attributes': 'attributes',
        'dtype': 'dtype',
        'elemental_id': 'elemental_id',
        'explicit_listing': 'explicit_listing',
        'media_add': 'media_add',
        'media_del': 'media_del',
        'name': 'name',
        'object_search': 'object_search',
        'path': 'path',
        'related_search': 'related_search',
        'tator_user_sections': 'tator_user_sections',
        'visible': 'visible'
    }

    def __init__(self, attributes=None, dtype=None, elemental_id=None, explicit_listing=None, media_add=None, media_del=None, name=None, object_search=None, path=None, related_search=None, tator_user_sections=None, visible=None, local_vars_configuration=None):  # noqa: E501
        """SectionUpdate - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attributes = None
        self._dtype = None
        self._elemental_id = None
        self._explicit_listing = None
        self._media_add = None
        self._media_del = None
        self._name = None
        self._object_search = None
        self._path = None
        self._related_search = None
        self._tator_user_sections = None
        self._visible = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if dtype is not None:
            self.dtype = dtype
        self.elemental_id = elemental_id
        if explicit_listing is not None:
            self.explicit_listing = explicit_listing
        if media_add is not None:
            self.media_add = media_add
        if media_del is not None:
            self.media_del = media_del
        if name is not None:
            self.name = name
        if object_search is not None:
            self.object_search = object_search
        self.path = path
        if related_search is not None:
            self.related_search = related_search
        if tator_user_sections is not None:
            self.tator_user_sections = tator_user_sections
        if visible is not None:
            self.visible = visible

    @property
    def attributes(self):
        """
        Object containing attribute values.

        :return: The attributes of this SectionUpdate. 
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Object containing attribute values.

        :param attributes: The attributes of this SectionUpdate.
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def dtype(self):
        """
        Type of the section.

        :return: The dtype of this SectionUpdate. 
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """
        Type of the section.

        :param dtype: The dtype of this SectionUpdate.
        :type: str
        """
        allowed_values = ["folder", "playlist", "saved_search"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and dtype not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `dtype` ({0}), must be one of {1}"  # noqa: E501
                .format(dtype, allowed_values)
            )

        self._dtype = dtype

    @property
    def elemental_id(self):
        """
        The elemental ID of the object.

        :return: The elemental_id of this SectionUpdate. 
        :rtype: str
        """
        return self._elemental_id

    @elemental_id.setter
    def elemental_id(self, elemental_id):
        """
        The elemental ID of the object.

        :param elemental_id: The elemental_id of this SectionUpdate.
        :type: str
        """

        self._elemental_id = elemental_id

    @property
    def explicit_listing(self):
        """
        Deprecated, set `dtype` to `playlist` instead. Determines whether the section is explicitly made up of media IDs.

        :return: The explicit_listing of this SectionUpdate. 
        :rtype: bool
        """
        return self._explicit_listing

    @explicit_listing.setter
    def explicit_listing(self, explicit_listing):
        """
        Deprecated, set `dtype` to `playlist` instead. Determines whether the section is explicitly made up of media IDs.

        :param explicit_listing: The explicit_listing of this SectionUpdate.
        :type: bool
        """

        self._explicit_listing = explicit_listing

    @property
    def media_add(self):
        """
        List of media IDs to add to this section.

        :return: The media_add of this SectionUpdate. 
        :rtype: list[int]
        """
        return self._media_add

    @media_add.setter
    def media_add(self, media_add):
        """
        List of media IDs to add to this section.

        :param media_add: The media_add of this SectionUpdate.
        :type: list[int]
        """

        self._media_add = media_add

    @property
    def media_del(self):
        """
        List of media IDs to remove from this section.

        :return: The media_del of this SectionUpdate. 
        :rtype: list[int]
        """
        return self._media_del

    @media_del.setter
    def media_del(self, media_del):
        """
        List of media IDs to remove from this section.

        :param media_del: The media_del of this SectionUpdate.
        :type: list[int]
        """

        self._media_del = media_del

    @property
    def name(self):
        """
        Unique name of the section.

        :return: The name of this SectionUpdate. 
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Unique name of the section.

        :param name: The name of this SectionUpdate.
        :type: str
        """

        self._name = name

    @property
    def object_search(self):
        """

        :return: The object_search of this SectionUpdate. 
        :rtype: AttributeOperationSpec
        """
        return self._object_search

    @object_search.setter
    def object_search(self, object_search):
        """

        :param object_search: The object_search of this SectionUpdate.
        :type: AttributeOperationSpec
        """

        self._object_search = object_search

    @property
    def path(self):
        """
        A path to represent nested sections. If not supplied, defaults to `re.sub(r'[^A-Za-z0-9_-]',path)`

        :return: The path of this SectionUpdate. 
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        A path to represent nested sections. If not supplied, defaults to `re.sub(r'[^A-Za-z0-9_-]',path)`

        :param path: The path of this SectionUpdate.
        :type: str
        """

        self._path = path

    @property
    def related_search(self):
        """

        :return: The related_search of this SectionUpdate. 
        :rtype: AttributeOperationSpec
        """
        return self._related_search

    @related_search.setter
    def related_search(self, related_search):
        """

        :param related_search: The related_search of this SectionUpdate.
        :type: AttributeOperationSpec
        """

        self._related_search = related_search

    @property
    def tator_user_sections(self):
        """
        Attribute that is applied to media to identify membership to a section.

        :return: The tator_user_sections of this SectionUpdate. 
        :rtype: str
        """
        return self._tator_user_sections

    @tator_user_sections.setter
    def tator_user_sections(self, tator_user_sections):
        """
        Attribute that is applied to media to identify membership to a section.

        :param tator_user_sections: The tator_user_sections of this SectionUpdate.
        :type: str
        """

        self._tator_user_sections = tator_user_sections

    @property
    def visible(self):
        """
        Determines the visibility in the UI.

        :return: The visible of this SectionUpdate. 
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Determines the visibility in the UI.

        :param visible: The visible of this SectionUpdate.
        :type: bool
        """

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectionUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SectionUpdate):
            return True

        return self.to_dict() != other.to_dict()
