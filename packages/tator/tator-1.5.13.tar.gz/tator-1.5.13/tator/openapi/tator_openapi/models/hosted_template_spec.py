# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class HostedTemplateSpec(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'headers': 'list[Parameter]',
        'name': 'str',
        'tparams': 'list[Parameter]',
        'url': 'str'
    }

    attribute_map = {
        'headers': 'headers',
        'name': 'name',
        'tparams': 'tparams',
        'url': 'url'
    }

    def __init__(self, headers=[], name=None, tparams=[], url=None, local_vars_configuration=None):  # noqa: E501
        """HostedTemplateSpec - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._headers = None
        self._name = None
        self._tparams = None
        self._url = None
        self.discriminator = None

        if headers is not None:
            self.headers = headers
        self.name = name
        if tparams is not None:
            self.tparams = tparams
        self.url = url

    @property
    def headers(self):
        """
        Headers used to retrieve hosted template, if set.

        :return: The headers of this HostedTemplateSpec. 
        :rtype: list[Parameter]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Headers used to retrieve hosted template, if set.

        :param headers: The headers of this HostedTemplateSpec.
        :type: list[Parameter]
        """

        self._headers = headers

    @property
    def name(self):
        """
        Unique name of the hosted template.

        :return: The name of this HostedTemplateSpec. 
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Unique name of the hosted template.

        :param name: The name of this HostedTemplateSpec.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tparams(self):
        """
        Template parameters used for rendering hosted template, if set.

        :return: The tparams of this HostedTemplateSpec. 
        :rtype: list[Parameter]
        """
        return self._tparams

    @tparams.setter
    def tparams(self, tparams):
        """
        Template parameters used for rendering hosted template, if set.

        :param tparams: The tparams of this HostedTemplateSpec.
        :type: list[Parameter]
        """

        self._tparams = tparams

    @property
    def url(self):
        """
        URL where jinja2 template is hosted, must be retrievable with a GET using supplied headers.

        :return: The url of this HostedTemplateSpec. 
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        URL where jinja2 template is hosted, must be retrievable with a GET using supplied headers.

        :param url: The url of this HostedTemplateSpec.
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostedTemplateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostedTemplateSpec):
            return True

        return self.to_dict() != other.to_dict()
