# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class Localization(object):
    """
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attributes': 'dict(str, object)',
        'created_by': 'int',
        'created_datetime': 'datetime',
        'effective_permission': 'int',
        'elemental_id': 'str',
        'frame': 'int',
        'height': 'float',
        'id': 'int',
        'mark': 'int',
        'media': 'int',
        'modified_by': 'int',
        'modified_datetime': 'datetime',
        'parent': 'float',
        'points': 'list[list[float]]',
        'project': 'int',
        'thumbnail_image': 'str',
        'type': 'int',
        'u': 'float',
        'user': 'int',
        'v': 'float',
        'variant_deleted': 'bool',
        'version': 'int',
        'width': 'float',
        'x': 'float',
        'y': 'float'
    }

    attribute_map = {
        'attributes': 'attributes',
        'created_by': 'created_by',
        'created_datetime': 'created_datetime',
        'effective_permission': 'effective_permission',
        'elemental_id': 'elemental_id',
        'frame': 'frame',
        'height': 'height',
        'id': 'id',
        'mark': 'mark',
        'media': 'media',
        'modified_by': 'modified_by',
        'modified_datetime': 'modified_datetime',
        'parent': 'parent',
        'points': 'points',
        'project': 'project',
        'thumbnail_image': 'thumbnail_image',
        'type': 'type',
        'u': 'u',
        'user': 'user',
        'v': 'v',
        'variant_deleted': 'variant_deleted',
        'version': 'version',
        'width': 'width',
        'x': 'x',
        'y': 'y'
    }

    def __init__(self, attributes=None, created_by=None, created_datetime=None, effective_permission=None, elemental_id=None, frame=None, height=None, id=None, mark=None, media=None, modified_by=None, modified_datetime=None, parent=None, points=None, project=None, thumbnail_image=None, type=None, u=None, user=None, v=None, variant_deleted=None, version=None, width=None, x=None, y=None, local_vars_configuration=None):  # noqa: E501
        """Localization - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attributes = None
        self._created_by = None
        self._created_datetime = None
        self._effective_permission = None
        self._elemental_id = None
        self._frame = None
        self._height = None
        self._id = None
        self._mark = None
        self._media = None
        self._modified_by = None
        self._modified_datetime = None
        self._parent = None
        self._points = None
        self._project = None
        self._thumbnail_image = None
        self._type = None
        self._u = None
        self._user = None
        self._v = None
        self._variant_deleted = None
        self._version = None
        self._width = None
        self._x = None
        self._y = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if created_by is not None:
            self.created_by = created_by
        if created_datetime is not None:
            self.created_datetime = created_datetime
        if effective_permission is not None:
            self.effective_permission = effective_permission
        self.elemental_id = elemental_id
        if frame is not None:
            self.frame = frame
        self.height = height
        if id is not None:
            self.id = id
        if mark is not None:
            self.mark = mark
        if media is not None:
            self.media = media
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_datetime is not None:
            self.modified_datetime = modified_datetime
        self.parent = parent
        self.points = points
        if project is not None:
            self.project = project
        if thumbnail_image is not None:
            self.thumbnail_image = thumbnail_image
        if type is not None:
            self.type = type
        self.u = u
        if user is not None:
            self.user = user
        self.v = v
        if variant_deleted is not None:
            self.variant_deleted = variant_deleted
        if version is not None:
            self.version = version
        self.width = width
        self.x = x
        self.y = y

    @property
    def attributes(self):
        """
        Object containing attribute values.

        :return: The attributes of this Localization. 
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Object containing attribute values.

        :param attributes: The attributes of this Localization.
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def created_by(self):
        """
        Unique integer identifying the user who created this localization.

        :return: The created_by of this Localization. 
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Unique integer identifying the user who created this localization.

        :param created_by: The created_by of this Localization.
        :type: int
        """

        self._created_by = created_by

    @property
    def created_datetime(self):
        """
        Datetime this localization was created.

        :return: The created_datetime of this Localization. 
        :rtype: datetime
        """
        return self._created_datetime

    @created_datetime.setter
    def created_datetime(self, created_datetime):
        """
        Datetime this localization was created.

        :param created_datetime: The created_datetime of this Localization.
        :type: datetime
        """

        self._created_datetime = created_datetime

    @property
    def effective_permission(self):
        """
        Effective permission mask for the current user.

        :return: The effective_permission of this Localization. 
        :rtype: int
        """
        return self._effective_permission

    @effective_permission.setter
    def effective_permission(self, effective_permission):
        """
        Effective permission mask for the current user.

        :param effective_permission: The effective_permission of this Localization.
        :type: int
        """

        self._effective_permission = effective_permission

    @property
    def elemental_id(self):
        """
        The elemental ID of the object.

        :return: The elemental_id of this Localization. 
        :rtype: str
        """
        return self._elemental_id

    @elemental_id.setter
    def elemental_id(self, elemental_id):
        """
        The elemental ID of the object.

        :param elemental_id: The elemental_id of this Localization.
        :type: str
        """

        self._elemental_id = elemental_id

    @property
    def frame(self):
        """
        Frame number of this localization if it is in a video.

        :return: The frame of this Localization. 
        :rtype: int
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """
        Frame number of this localization if it is in a video.

        :param frame: The frame of this Localization.
        :type: int
        """

        self._frame = frame

    @property
    def height(self):
        """
        Normalized height of bounding box for `box` localization types.

        :return: The height of this Localization. 
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Normalized height of bounding box for `box` localization types.

        :param height: The height of this Localization.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._height = height

    @property
    def id(self):
        """
        Unique integer identifying this localization.

        :return: The id of this Localization. 
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Unique integer identifying this localization.

        :param id: The id of this Localization.
        :type: int
        """

        self._id = id

    @property
    def mark(self):
        """
        Revision number of this object on this version branch

        :return: The mark of this Localization. 
        :rtype: int
        """
        return self._mark

    @mark.setter
    def mark(self, mark):
        """
        Revision number of this object on this version branch

        :param mark: The mark of this Localization.
        :type: int
        """

        self._mark = mark

    @property
    def media(self):
        """
        Unique integer identifying media of this localization.

        :return: The media of this Localization. 
        :rtype: int
        """
        return self._media

    @media.setter
    def media(self, media):
        """
        Unique integer identifying media of this localization.

        :param media: The media of this Localization.
        :type: int
        """

        self._media = media

    @property
    def modified_by(self):
        """
        Unique integer identifying the user who last modified this localization.

        :return: The modified_by of this Localization. 
        :rtype: int
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Unique integer identifying the user who last modified this localization.

        :param modified_by: The modified_by of this Localization.
        :type: int
        """

        self._modified_by = modified_by

    @property
    def modified_datetime(self):
        """
        Datetime this localization was last modified.

        :return: The modified_datetime of this Localization. 
        :rtype: datetime
        """
        return self._modified_datetime

    @modified_datetime.setter
    def modified_datetime(self, modified_datetime):
        """
        Datetime this localization was last modified.

        :param modified_datetime: The modified_datetime of this Localization.
        :type: datetime
        """

        self._modified_datetime = modified_datetime

    @property
    def parent(self):
        """
        If a clone, the pk of the parent.

        :return: The parent of this Localization. 
        :rtype: float
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        If a clone, the pk of the parent.

        :param parent: The parent of this Localization.
        :type: float
        """

        self._parent = parent

    @property
    def points(self):
        """
        List of normalized [x, y] pairs for `poly` localization types.

        :return: The points of this Localization. 
        :rtype: list[list[float]]
        """
        return self._points

    @points.setter
    def points(self, points):
        """
        List of normalized [x, y] pairs for `poly` localization types.

        :param points: The points of this Localization.
        :type: list[list[float]]
        """

        self._points = points

    @property
    def project(self):
        """
        Unique integer identifying project of this localization.

        :return: The project of this Localization. 
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Unique integer identifying project of this localization.

        :param project: The project of this Localization.
        :type: int
        """

        self._project = project

    @property
    def thumbnail_image(self):
        """
        URL of thumbnail corresponding to this localization. (Deprecated)

        :return: The thumbnail_image of this Localization. 
        :rtype: str
        """
        return self._thumbnail_image

    @thumbnail_image.setter
    def thumbnail_image(self, thumbnail_image):
        """
        URL of thumbnail corresponding to this localization. (Deprecated)

        :param thumbnail_image: The thumbnail_image of this Localization.
        :type: str
        """

        self._thumbnail_image = thumbnail_image

    @property
    def type(self):
        """
        Unique integer identifying entity type of this localization.

        :return: The type of this Localization. 
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Unique integer identifying entity type of this localization.

        :param type: The type of this Localization.
        :type: int
        """

        self._type = type

    @property
    def u(self):
        """
        Horizontal vector component for `line` localization types.

        :return: The u of this Localization. 
        :rtype: float
        """
        return self._u

    @u.setter
    def u(self, u):
        """
        Horizontal vector component for `line` localization types.

        :param u: The u of this Localization.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                u is not None and u > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `u`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                u is not None and u < -1.0):  # noqa: E501
            raise ValueError("Invalid value for `u`, must be a value greater than or equal to `-1.0`")  # noqa: E501

        self._u = u

    @property
    def user(self):
        """
        Unique integer identifying the user who created this localization.

        :return: The user of this Localization. 
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Unique integer identifying the user who created this localization.

        :param user: The user of this Localization.
        :type: int
        """

        self._user = user

    @property
    def v(self):
        """
        Vertical vector component for `line` localization types.

        :return: The v of this Localization. 
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Vertical vector component for `line` localization types.

        :param v: The v of this Localization.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                v is not None and v > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `v`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                v is not None and v < -1.0):  # noqa: E501
            raise ValueError("Invalid value for `v`, must be a value greater than or equal to `-1.0`")  # noqa: E501

        self._v = v

    @property
    def variant_deleted(self):
        """
        Unique integer identifying the user who created this localization.

        :return: The variant_deleted of this Localization. 
        :rtype: bool
        """
        return self._variant_deleted

    @variant_deleted.setter
    def variant_deleted(self, variant_deleted):
        """
        Unique integer identifying the user who created this localization.

        :param variant_deleted: The variant_deleted of this Localization.
        :type: bool
        """

        self._variant_deleted = variant_deleted

    @property
    def version(self):
        """
        Unique integer identifying a version.

        :return: The version of this Localization. 
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Unique integer identifying a version.

        :param version: The version of this Localization.
        :type: int
        """

        self._version = version

    @property
    def width(self):
        """
        Normalized width of bounding box for `box` localization types.

        :return: The width of this Localization. 
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Normalized width of bounding box for `box` localization types.

        :param width: The width of this Localization.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._width = width

    @property
    def x(self):
        """
        Normalized horizontal position of left edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :return: The x of this Localization. 
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """
        Normalized horizontal position of left edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :param x: The x of this Localization.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                x is not None and x > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                x is not None and x < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """
        Normalized vertical position of top edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :return: The y of this Localization. 
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """
        Normalized vertical position of top edge of bounding box for `box` localization types, start of line for `line` localization types, or position of dot for `dot` localization types.

        :param y: The y of this Localization.
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                y is not None and y > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                y is not None and y < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._y = y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Localization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Localization):
            return True

        return self.to_dict() != other.to_dict()
