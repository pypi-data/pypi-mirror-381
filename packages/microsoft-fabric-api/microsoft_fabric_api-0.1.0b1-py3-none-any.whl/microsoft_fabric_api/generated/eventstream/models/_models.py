# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AccessKeys(_serialization.Model):
    """The access keys.

    All required parameters must be populated in order to send to server.

    :ivar primary_key: The primary key. Required.
    :vartype primary_key: str
    :ivar secondary_key: The secondary key. Required.
    :vartype secondary_key: str
    :ivar primary_connection_string: The primary connection string. Required.
    :vartype primary_connection_string: str
    :ivar secondary_connection_string: The secondary connection string. Required.
    :vartype secondary_connection_string: str
    """

    _validation = {
        "primary_key": {"required": True},
        "secondary_key": {"required": True},
        "primary_connection_string": {"required": True},
        "secondary_connection_string": {"required": True},
    }

    _attribute_map = {
        "primary_key": {"key": "primaryKey", "type": "str"},
        "secondary_key": {"key": "secondaryKey", "type": "str"},
        "primary_connection_string": {"key": "primaryConnectionString", "type": "str"},
        "secondary_connection_string": {"key": "secondaryConnectionString", "type": "str"},
    }

    def __init__(
        self,
        *,
        primary_key: str,
        secondary_key: str,
        primary_connection_string: str,
        secondary_connection_string: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword primary_key: The primary key. Required.
        :paramtype primary_key: str
        :keyword secondary_key: The secondary key. Required.
        :paramtype secondary_key: str
        :keyword primary_connection_string: The primary connection string. Required.
        :paramtype primary_connection_string: str
        :keyword secondary_connection_string: The secondary connection string. Required.
        :paramtype secondary_connection_string: str
        """
        super().__init__(**kwargs)
        self.primary_key = primary_key
        self.secondary_key = secondary_key
        self.primary_connection_string = primary_connection_string
        self.secondary_connection_string = secondary_connection_string


class ActivatorDestinationProperties(_serialization.Model):
    """Activator destination properties.

    All required parameters must be populated in order to send to server.

    :ivar workspace_id: The Activator workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The Activator item identifier. Required.
    :vartype item_id: str
    :ivar input_serialization: Serialization information.
    :vartype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
    """

    _validation = {
        "workspace_id": {"required": True},
        "item_id": {"required": True},
    }

    _attribute_map = {
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "input_serialization": {"key": "inputSerialization", "type": "SerializationInfo"},
    }

    def __init__(
        self,
        *,
        workspace_id: str,
        item_id: str,
        input_serialization: Optional["_models.SerializationInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workspace_id: The Activator workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The Activator item identifier. Required.
        :paramtype item_id: str
        :keyword input_serialization: Serialization information.
        :paramtype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
        """
        super().__init__(**kwargs)
        self.workspace_id = workspace_id
        self.item_id = item_id
        self.input_serialization = input_serialization


class RuntimeInformation(_serialization.Model):
    """Represents the runtime information of a node.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    """

    _validation = {
        "status": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
    }

    def __init__(
        self, *, status: Union[str, "_models.NodeStatus"], error: Optional["_models.ErrorInfo"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        """
        super().__init__(**kwargs)
        self.status = status
        self.error = error


class BaseDestination(_serialization.Model):
    """Represents the base Eventstream destination.

    All required parameters must be populated in order to send to server.

    :ivar id: The unique identifier of the destination.
    :vartype id: str
    :ivar name: The unique name of the destination. Required.
    :vartype name: str
    :ivar input_nodes: A list of the references to the input nodes of the destination. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the destination.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    """

    _validation = {
        "name": {"required": True},
        "input_nodes": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The unique identifier of the destination.
        :paramtype id: str
        :keyword name: The unique name of the destination. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the destination. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the destination.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.input_nodes = input_nodes
        self.input_schemas = input_schemas


class DestinationResponse(BaseDestination, RuntimeInformation):
    """Represents an Eventstream destination response.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ActivatorDestinationResponse, CustomEndpointDestinationResponse, EventhouseDestinationResponse,
    LakehouseDestinationResponse

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the destination.
    :vartype id: str
    :ivar name: The unique name of the destination. Required.
    :vartype name: str
    :ivar input_nodes: A list of the references to the input nodes of the destination. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the destination.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the destination. Required. Known values are: "Activator",
     "CustomEndpoint", "Eventhouse", and "Lakehouse".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.DestinationType
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "input_nodes": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Activator": "ActivatorDestinationResponse",
            "CustomEndpoint": "CustomEndpointDestinationResponse",
            "Eventhouse": "EventhouseDestinationResponse",
            "Lakehouse": "LakehouseDestinationResponse",
        }
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        input_nodes: List["_models.NodeReference"],
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the destination.
        :paramtype id: str
        :keyword name: The unique name of the destination. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the destination. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the destination.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        """
        super().__init__(
            id=id, name=name, input_nodes=input_nodes, input_schemas=input_schemas, status=status, error=error, **kwargs
        )
        self.status = status
        self.error = error
        self.type: Optional[str] = None
        self.id = id
        self.name = name
        self.input_nodes = input_nodes
        self.input_schemas = input_schemas


class ActivatorDestinationResponse(DestinationResponse):
    """Activator destination response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the destination.
    :vartype id: str
    :ivar name: The unique name of the destination. Required.
    :vartype name: str
    :ivar input_nodes: A list of the references to the input nodes of the destination. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the destination.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the destination. Required. Known values are: "Activator",
     "CustomEndpoint", "Eventhouse", and "Lakehouse".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.DestinationType
    :ivar properties: The properties of the Activator destination. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.ActivatorDestinationProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "input_nodes": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "ActivatorDestinationProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.ActivatorDestinationProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the destination.
        :paramtype id: str
        :keyword name: The unique name of the destination. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the destination. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the destination.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Activator destination. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.ActivatorDestinationProperties
        """
        super().__init__(
            status=status, error=error, id=id, name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs
        )
        self.type: str = "Activator"
        self.properties = properties


class Operator(_serialization.Model):
    """Represents an Eventstream operator.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AggregateOperator, ExpandOperator, FilterOperator, GroupByOperator, JoinOperator,
    ManageFieldsOperator, UnionOperator

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
    }

    _subtype_map = {
        "type": {
            "Aggregate": "AggregateOperator",
            "Expand": "ExpandOperator",
            "Filter": "FilterOperator",
            "GroupBy": "GroupByOperator",
            "Join": "JoinOperator",
            "ManageFields": "ManageFieldsOperator",
            "Union": "UnionOperator",
        }
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        """
        super().__init__(**kwargs)
        self.name = name
        self.type: Optional[str] = None
        self.input_nodes = input_nodes
        self.input_schemas = input_schemas


class AggregateOperator(Operator):
    """Aggregate operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar properties: Aggregate operator properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.AggregateOperatorProperties
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "properties": {"key": "properties", "type": "AggregateOperatorProperties"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.AggregateOperatorProperties",
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Aggregate operator properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.AggregateOperatorProperties
        """
        super().__init__(name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs)
        self.type: str = "Aggregate"
        self.properties = properties


class AggregateOperatorProperties(_serialization.Model):
    """Aggregate operator properties.

    All required parameters must be populated in order to send to server.

    :ivar aggregations: A list of the aggregations. Required.
    :vartype aggregations: list[~microsoft.fabric.api.eventstream.models.InColumnAggregation]
    """

    _validation = {
        "aggregations": {"required": True},
    }

    _attribute_map = {
        "aggregations": {"key": "aggregations", "type": "[InColumnAggregation]"},
    }

    def __init__(self, *, aggregations: List["_models.InColumnAggregation"], **kwargs: Any) -> None:
        """
        :keyword aggregations: A list of the aggregations. Required.
        :paramtype aggregations: list[~microsoft.fabric.api.eventstream.models.InColumnAggregation]
        """
        super().__init__(**kwargs)
        self.aggregations = aggregations


class Aggregation(_serialization.Model):
    """Represents an aggregation on a column.

    All required parameters must be populated in order to send to server.

    :ivar aggregation_function: The aggregation function. Required. Known values are: "Average",
     "Count", "Maximum", "Minimum", "PercentileContinuous", "PercentileDiscrete",
     "StandardDeviation", "StandardDeviationPopulation", "Sum", "Variance", and
     "VariancePopulation".
    :vartype aggregation_function: str or
     ~microsoft.fabric.api.eventstream.models.AggregationFunction
    :ivar arguments: A list of the arguments for the aggregation.
    :vartype arguments: list[JSON]
    :ivar column: Represents a reference to a column. Required.
    :vartype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    :ivar alias: The alias of the aggregation.
    :vartype alias: str
    """

    _validation = {
        "aggregation_function": {"required": True},
        "column": {"required": True},
    }

    _attribute_map = {
        "aggregation_function": {"key": "aggregationFunction", "type": "str"},
        "arguments": {"key": "arguments", "type": "[object]"},
        "column": {"key": "column", "type": "ColumnReferenceExpression"},
        "alias": {"key": "alias", "type": "str"},
    }

    def __init__(
        self,
        *,
        aggregation_function: Union[str, "_models.AggregationFunction"],
        column: "_models.ColumnReferenceExpression",
        arguments: Optional[List[JSON]] = None,
        alias: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword aggregation_function: The aggregation function. Required. Known values are: "Average",
         "Count", "Maximum", "Minimum", "PercentileContinuous", "PercentileDiscrete",
         "StandardDeviation", "StandardDeviationPopulation", "Sum", "Variance", and
         "VariancePopulation".
        :paramtype aggregation_function: str or
         ~microsoft.fabric.api.eventstream.models.AggregationFunction
        :keyword arguments: A list of the arguments for the aggregation.
        :paramtype arguments: list[JSON]
        :keyword column: Represents a reference to a column. Required.
        :paramtype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        :keyword alias: The alias of the aggregation.
        :paramtype alias: str
        """
        super().__init__(**kwargs)
        self.aggregation_function = aggregation_function
        self.arguments = arguments
        self.column = column
        self.alias = alias


class AmazonKinesisSourceProperties(_serialization.Model):
    """Amazon Kinesis source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Amazon Kinesis data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar region: The Amazon Kinesis region name. Required. Known values are: "af-south-1",
     "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2",
     "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ap-southeast-5",
     "ca-central-1", "ca-west-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1",
     "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1",
     "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1",
     "us-west-1", and "us-west-2".
    :vartype region: str or
     ~microsoft.fabric.api.eventstream.models.AmazonKinesisSourcePropertiesRegion
    """

    _validation = {
        "data_connection_id": {"required": True},
        "region": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "region": {"key": "region", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_connection_id: str,
        region: Union[str, "_models.AmazonKinesisSourcePropertiesRegion"],
        **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The Amazon Kinesis data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword region: The Amazon Kinesis region name. Required. Known values are: "af-south-1",
         "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2",
         "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ap-southeast-5",
         "ca-central-1", "ca-west-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1",
         "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1",
         "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1",
         "us-west-1", and "us-west-2".
        :paramtype region: str or
         ~microsoft.fabric.api.eventstream.models.AmazonKinesisSourcePropertiesRegion
        """
        super().__init__(**kwargs)
        self.data_connection_id = data_connection_id
        self.region = region


class BaseSource(_serialization.Model):
    """Represents an Eventstream source.

    All required parameters must be populated in order to send to server.

    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
    }

    def __init__(
        self,
        *,
        name: str,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.input_schemas = input_schemas


class SourceResponse(BaseSource, RuntimeInformation):
    """Represents an Eventstream source response.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AmazonKinesisSourceResponse, AmazonMSKKafkaSourceResponse, ApacheKafkaSourceResponse,
    AzureBlobStorageEventsSourceResponse, AzureCosmosDBCDCSourceResponse,
    AzureEventHubSourceResponse, AzureIoTHubSourceResponse, AzureSqldbcdcSourceResponse,
    AzureSqlmidbcdcSourceResponse, ConfluentCloudSourceResponse, CustomEndpointSourceResponse,
    FabricCapacityUtilizationEventsSourceResponse, FabricJobEventsSourceResponse,
    FabricOneLakeEventsSourceResponse, FabricWorkspaceItemEventsSourceResponse,
    GooglePubSubSourceResponse, MySQLCDCSourceResponse, PostgreSQLCDCSourceResponse,
    SQLServerOnVmdbcdcSourceResponse, SampleDataSourceResponse

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "AmazonKinesis": "AmazonKinesisSourceResponse",
            "AmazonMSKKafka": "AmazonMSKKafkaSourceResponse",
            "ApacheKafka": "ApacheKafkaSourceResponse",
            "AzureBlobStorageEvents": "AzureBlobStorageEventsSourceResponse",
            "AzureCosmosDBCDC": "AzureCosmosDBCDCSourceResponse",
            "AzureEventHub": "AzureEventHubSourceResponse",
            "AzureIoTHub": "AzureIoTHubSourceResponse",
            "AzureSQLDBCDC": "AzureSqldbcdcSourceResponse",
            "AzureSQLMIDBCDC": "AzureSqlmidbcdcSourceResponse",
            "ConfluentCloud": "ConfluentCloudSourceResponse",
            "CustomEndpoint": "CustomEndpointSourceResponse",
            "FabricCapacityUtilizationEvents": "FabricCapacityUtilizationEventsSourceResponse",
            "FabricJobEvents": "FabricJobEventsSourceResponse",
            "FabricOneLakeEvents": "FabricOneLakeEventsSourceResponse",
            "FabricWorkspaceItemEvents": "FabricWorkspaceItemEventsSourceResponse",
            "GooglePubSub": "GooglePubSubSourceResponse",
            "MySQLCDC": "MySQLCDCSourceResponse",
            "PostgreSQLCDC": "PostgreSQLCDCSourceResponse",
            "SQLServerOnVMDBCDC": "SQLServerOnVmdbcdcSourceResponse",
            "SampleData": "SampleDataSourceResponse",
        }
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        """
        super().__init__(id=id, name=name, input_schemas=input_schemas, status=status, error=error, **kwargs)
        self.status = status
        self.error = error
        self.type: Optional[str] = None
        self.id = id
        self.name = name
        self.input_schemas = input_schemas


class AmazonKinesisSourceResponse(SourceResponse):
    """Amazon Kinesis source properties response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Amazon Kinesis source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.AmazonKinesisSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "AmazonKinesisSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.AmazonKinesisSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Amazon Kinesis source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.AmazonKinesisSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AmazonKinesis"
        self.properties = properties


class BaseKafkaSourceProperties(_serialization.Model):
    """Base Kafka source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Kafka data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar topic: The Kafka topic. Required.
    :vartype topic: str
    :ivar consumer_group_name: The consumer group name. Required.
    :vartype consumer_group_name: str
    :ivar auto_offset_reset: The auto offset reset property. Default is None. Known values are:
     "None", "Earliest", and "Latest".
    :vartype auto_offset_reset: str or
     ~microsoft.fabric.api.eventstream.models.BaseKafkaSourcePropertiesAutoOffsetReset
    """

    _validation = {
        "data_connection_id": {"required": True},
        "topic": {"required": True},
        "consumer_group_name": {"required": True},
        "auto_offset_reset": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "topic": {"key": "topic", "type": "str"},
        "consumer_group_name": {"key": "consumerGroupName", "type": "str"},
        "auto_offset_reset": {"key": "autoOffsetReset", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_connection_id: str,
        topic: str,
        consumer_group_name: str,
        auto_offset_reset: Union[str, "_models.BaseKafkaSourcePropertiesAutoOffsetReset"] = "None",
        **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The Kafka data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword topic: The Kafka topic. Required.
        :paramtype topic: str
        :keyword consumer_group_name: The consumer group name. Required.
        :paramtype consumer_group_name: str
        :keyword auto_offset_reset: The auto offset reset property. Default is None. Known values are:
         "None", "Earliest", and "Latest".
        :paramtype auto_offset_reset: str or
         ~microsoft.fabric.api.eventstream.models.BaseKafkaSourcePropertiesAutoOffsetReset
        """
        super().__init__(**kwargs)
        self.data_connection_id = data_connection_id
        self.topic = topic
        self.consumer_group_name = consumer_group_name
        self.auto_offset_reset = auto_offset_reset


class AmazonMSKKafkaSourceProperties(BaseKafkaSourceProperties):
    """Amazon MSK Kafka source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Kafka data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar topic: The Kafka topic. Required.
    :vartype topic: str
    :ivar consumer_group_name: The consumer group name. Required.
    :vartype consumer_group_name: str
    :ivar auto_offset_reset: The auto offset reset property. Default is None. Known values are:
     "None", "Earliest", and "Latest".
    :vartype auto_offset_reset: str or
     ~microsoft.fabric.api.eventstream.models.BaseKafkaSourcePropertiesAutoOffsetReset
    :ivar sasl_mechanism: The SASL mechanism. Required. Known values are: "PLAIN", "SCRAM-SHA-256",
     and "SCRAM-SHA-512".
    :vartype sasl_mechanism: str or
     ~microsoft.fabric.api.eventstream.models.AmazonMSKKafkaSourcePropertiesSaslMechanism
    :ivar security_protocol: The security protocol. Required. Known values are: "SASL_PLAINTEXT",
     "PLAINTEXT", "SASL_SSL", and "SSL".
    :vartype security_protocol: str or
     ~microsoft.fabric.api.eventstream.models.AmazonMSKKafkaSourcePropertiesSecurityProtocol
    """

    _validation = {
        "data_connection_id": {"required": True},
        "topic": {"required": True},
        "consumer_group_name": {"required": True},
        "auto_offset_reset": {"required": True},
        "sasl_mechanism": {"required": True},
        "security_protocol": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "topic": {"key": "topic", "type": "str"},
        "consumer_group_name": {"key": "consumerGroupName", "type": "str"},
        "auto_offset_reset": {"key": "autoOffsetReset", "type": "str"},
        "sasl_mechanism": {"key": "saslMechanism", "type": "str"},
        "security_protocol": {"key": "securityProtocol", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_connection_id: str,
        topic: str,
        consumer_group_name: str,
        auto_offset_reset: Union[str, "_models.BaseKafkaSourcePropertiesAutoOffsetReset"] = "None",
        sasl_mechanism: Union[str, "_models.AmazonMSKKafkaSourcePropertiesSaslMechanism"],
        security_protocol: Union[str, "_models.AmazonMSKKafkaSourcePropertiesSecurityProtocol"],
        **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The Kafka data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword topic: The Kafka topic. Required.
        :paramtype topic: str
        :keyword consumer_group_name: The consumer group name. Required.
        :paramtype consumer_group_name: str
        :keyword auto_offset_reset: The auto offset reset property. Default is None. Known values are:
         "None", "Earliest", and "Latest".
        :paramtype auto_offset_reset: str or
         ~microsoft.fabric.api.eventstream.models.BaseKafkaSourcePropertiesAutoOffsetReset
        :keyword sasl_mechanism: The SASL mechanism. Required. Known values are: "PLAIN",
         "SCRAM-SHA-256", and "SCRAM-SHA-512".
        :paramtype sasl_mechanism: str or
         ~microsoft.fabric.api.eventstream.models.AmazonMSKKafkaSourcePropertiesSaslMechanism
        :keyword security_protocol: The security protocol. Required. Known values are:
         "SASL_PLAINTEXT", "PLAINTEXT", "SASL_SSL", and "SSL".
        :paramtype security_protocol: str or
         ~microsoft.fabric.api.eventstream.models.AmazonMSKKafkaSourcePropertiesSecurityProtocol
        """
        super().__init__(
            data_connection_id=data_connection_id,
            topic=topic,
            consumer_group_name=consumer_group_name,
            auto_offset_reset=auto_offset_reset,
            **kwargs
        )
        self.sasl_mechanism = sasl_mechanism
        self.security_protocol = security_protocol


class AmazonMSKKafkaSourceResponse(SourceResponse):
    """Amazon MSK Kafka source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Amazon MSK Kafka source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.AmazonMSKKafkaSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "AmazonMSKKafkaSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.AmazonMSKKafkaSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Amazon MSK Kafka source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.AmazonMSKKafkaSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AmazonMSKKafka"
        self.properties = properties


class ApacheKafkaSourceProperties(BaseKafkaSourceProperties):
    """Apache Kafka source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Kafka data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar topic: The Kafka topic. Required.
    :vartype topic: str
    :ivar consumer_group_name: The consumer group name. Required.
    :vartype consumer_group_name: str
    :ivar auto_offset_reset: The auto offset reset property. Default is None. Known values are:
     "None", "Earliest", and "Latest".
    :vartype auto_offset_reset: str or
     ~microsoft.fabric.api.eventstream.models.BaseKafkaSourcePropertiesAutoOffsetReset
    :ivar sasl_mechanism: The SASL mechanism. Required. Known values are: "PLAIN", "SCRAM-SHA-256",
     and "SCRAM-SHA-512".
    :vartype sasl_mechanism: str or
     ~microsoft.fabric.api.eventstream.models.ApacheKafkaSourcePropertiesSaslMechanism
    :ivar security_protocol: The security protocol. Required. Known values are: "SASL_PLAINTEXT",
     "PLAINTEXT", "SASL_SSL", and "SSL".
    :vartype security_protocol: str or
     ~microsoft.fabric.api.eventstream.models.ApacheKafkaSourcePropertiesSecurityProtocol
    """

    _validation = {
        "data_connection_id": {"required": True},
        "topic": {"required": True},
        "consumer_group_name": {"required": True},
        "auto_offset_reset": {"required": True},
        "sasl_mechanism": {"required": True},
        "security_protocol": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "topic": {"key": "topic", "type": "str"},
        "consumer_group_name": {"key": "consumerGroupName", "type": "str"},
        "auto_offset_reset": {"key": "autoOffsetReset", "type": "str"},
        "sasl_mechanism": {"key": "saslMechanism", "type": "str"},
        "security_protocol": {"key": "securityProtocol", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_connection_id: str,
        topic: str,
        consumer_group_name: str,
        auto_offset_reset: Union[str, "_models.BaseKafkaSourcePropertiesAutoOffsetReset"] = "None",
        sasl_mechanism: Union[str, "_models.ApacheKafkaSourcePropertiesSaslMechanism"],
        security_protocol: Union[str, "_models.ApacheKafkaSourcePropertiesSecurityProtocol"],
        **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The Kafka data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword topic: The Kafka topic. Required.
        :paramtype topic: str
        :keyword consumer_group_name: The consumer group name. Required.
        :paramtype consumer_group_name: str
        :keyword auto_offset_reset: The auto offset reset property. Default is None. Known values are:
         "None", "Earliest", and "Latest".
        :paramtype auto_offset_reset: str or
         ~microsoft.fabric.api.eventstream.models.BaseKafkaSourcePropertiesAutoOffsetReset
        :keyword sasl_mechanism: The SASL mechanism. Required. Known values are: "PLAIN",
         "SCRAM-SHA-256", and "SCRAM-SHA-512".
        :paramtype sasl_mechanism: str or
         ~microsoft.fabric.api.eventstream.models.ApacheKafkaSourcePropertiesSaslMechanism
        :keyword security_protocol: The security protocol. Required. Known values are:
         "SASL_PLAINTEXT", "PLAINTEXT", "SASL_SSL", and "SSL".
        :paramtype security_protocol: str or
         ~microsoft.fabric.api.eventstream.models.ApacheKafkaSourcePropertiesSecurityProtocol
        """
        super().__init__(
            data_connection_id=data_connection_id,
            topic=topic,
            consumer_group_name=consumer_group_name,
            auto_offset_reset=auto_offset_reset,
            **kwargs
        )
        self.sasl_mechanism = sasl_mechanism
        self.security_protocol = security_protocol


class ApacheKafkaSourceResponse(SourceResponse):
    """Apache Kafka source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Apache Kafka source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.ApacheKafkaSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "ApacheKafkaSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.ApacheKafkaSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Apache Kafka source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.ApacheKafkaSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "ApacheKafka"
        self.properties = properties


class SerializationInfo(_serialization.Model):
    """Serialization information.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AvroSerializationInfo, CsvSerializationInfo, JsonSerializationInfo

    All required parameters must be populated in order to send to server.

    :ivar type: The serialization type. Required. Known values are: "Avro", "Json", and "Csv".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SerializationType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {"Avro": "AvroSerializationInfo", "Csv": "CsvSerializationInfo", "Json": "JsonSerializationInfo"}
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class AvroSerializationInfo(SerializationInfo):
    """Avro serialization information.

    All required parameters must be populated in order to send to server.

    :ivar type: The serialization type. Required. Known values are: "Avro", "Json", and "Csv".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SerializationType
    :ivar properties: Avro serialization properties. Required.
    :vartype properties: JSON
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(self, *, properties: JSON, **kwargs: Any) -> None:
        """
        :keyword properties: Avro serialization properties. Required.
        :paramtype properties: JSON
        """
        super().__init__(**kwargs)
        self.type: str = "Avro"
        self.properties = properties


class AzureBlobStorageEvents(_serialization.Model):
    """Azure Blob Storage events source.

    All required parameters must be populated in order to send to server.

    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar azure_resource_id: The Azure resource identifier of the blob storage. Required.
    :vartype azure_resource_id: str
    :ivar included_event_types: The included event types. Required.
    :vartype included_event_types: list[str or
     ~microsoft.fabric.api.eventstream.models.AzureBlobStorageEventsIncludedEventTypesItem]
    """

    _validation = {
        "azure_resource_id": {"required": True},
        "included_event_types": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "azure_resource_id": {"key": "azureResourceId", "type": "str"},
        "included_event_types": {"key": "includedEventTypes", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        azure_resource_id: str,
        included_event_types: List[Union[str, "_models.AzureBlobStorageEventsIncludedEventTypesItem"]],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword azure_resource_id: The Azure resource identifier of the blob storage. Required.
        :paramtype azure_resource_id: str
        :keyword included_event_types: The included event types. Required.
        :paramtype included_event_types: list[str or
         ~microsoft.fabric.api.eventstream.models.AzureBlobStorageEventsIncludedEventTypesItem]
        """
        super().__init__(**kwargs)
        self.id = id
        self.azure_resource_id = azure_resource_id
        self.included_event_types = included_event_types


class AzureBlobStorageEventsSourceProperties(_serialization.Model):
    """Azure Blob Storage events source properties.

    All required parameters must be populated in order to send to server.

    :ivar azure_blob_storage_events: The Azure Blob Storage events. Required.
    :vartype azure_blob_storage_events:
     list[~microsoft.fabric.api.eventstream.models.AzureBlobStorageEvents]
    :ivar stream_events: Indicates whether to stream events. Required.
    :vartype stream_events: bool
    """

    _validation = {
        "azure_blob_storage_events": {"required": True},
        "stream_events": {"required": True},
    }

    _attribute_map = {
        "azure_blob_storage_events": {"key": "azureBlobStorageEvents", "type": "[AzureBlobStorageEvents]"},
        "stream_events": {"key": "streamEvents", "type": "bool"},
    }

    def __init__(
        self, *, azure_blob_storage_events: List["_models.AzureBlobStorageEvents"], stream_events: bool, **kwargs: Any
    ) -> None:
        """
        :keyword azure_blob_storage_events: The Azure Blob Storage events. Required.
        :paramtype azure_blob_storage_events:
         list[~microsoft.fabric.api.eventstream.models.AzureBlobStorageEvents]
        :keyword stream_events: Indicates whether to stream events. Required.
        :paramtype stream_events: bool
        """
        super().__init__(**kwargs)
        self.azure_blob_storage_events = azure_blob_storage_events
        self.stream_events = stream_events


class AzureBlobStorageEventsSourceResponse(SourceResponse):
    """Azure Blob Storage events source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Azure Blob Storage events source. Required.
    :vartype properties:
     ~microsoft.fabric.api.eventstream.models.AzureBlobStorageEventsSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "AzureBlobStorageEventsSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.AzureBlobStorageEventsSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Azure Blob Storage events source. Required.
        :paramtype properties:
         ~microsoft.fabric.api.eventstream.models.AzureBlobStorageEventsSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AzureBlobStorageEvents"
        self.properties = properties


class AzureCosmosDBCDCSourceProperties(_serialization.Model):
    """Azure Cosmos DB CDC source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Azure Cosmos DB CDC data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar container_name: The container name. Required.
    :vartype container_name: str
    :ivar database_name: The database name. Required.
    :vartype database_name: str
    :ivar offset_policy: The offset policy. Required. Known values are: "Earliest" and "Latest".
    :vartype offset_policy: str or
     ~microsoft.fabric.api.eventstream.models.AzureCosmosDBCDCSourcePropertiesOffsetPolicy
    """

    _validation = {
        "data_connection_id": {"required": True},
        "container_name": {"required": True},
        "database_name": {"required": True},
        "offset_policy": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "container_name": {"key": "containerName", "type": "str"},
        "database_name": {"key": "databaseName", "type": "str"},
        "offset_policy": {"key": "offsetPolicy", "type": "str"},
    }

    def __init__(
        self,
        *,
        data_connection_id: str,
        container_name: str,
        database_name: str,
        offset_policy: Union[str, "_models.AzureCosmosDBCDCSourcePropertiesOffsetPolicy"],
        **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The Azure Cosmos DB CDC data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword container_name: The container name. Required.
        :paramtype container_name: str
        :keyword database_name: The database name. Required.
        :paramtype database_name: str
        :keyword offset_policy: The offset policy. Required. Known values are: "Earliest" and "Latest".
        :paramtype offset_policy: str or
         ~microsoft.fabric.api.eventstream.models.AzureCosmosDBCDCSourcePropertiesOffsetPolicy
        """
        super().__init__(**kwargs)
        self.data_connection_id = data_connection_id
        self.container_name = container_name
        self.database_name = database_name
        self.offset_policy = offset_policy


class AzureCosmosDBCDCSourceResponse(SourceResponse):
    """Azure Cosmos DB CDC source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Azure Cosmos DB CDC source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.AzureCosmosDBCDCSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "AzureCosmosDBCDCSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.AzureCosmosDBCDCSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Azure Cosmos DB CDC source. Required.
        :paramtype properties:
         ~microsoft.fabric.api.eventstream.models.AzureCosmosDBCDCSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AzureCosmosDBCDC"
        self.properties = properties


class AzureEventHubSourceProperties(_serialization.Model):
    """Azure Event Hub source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Azure Event Hub data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar consumer_group_name: The consumer group name. Required.
    :vartype consumer_group_name: str
    :ivar input_serialization: Serialization information. Required.
    :vartype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
    """

    _validation = {
        "data_connection_id": {"required": True},
        "consumer_group_name": {"required": True},
        "input_serialization": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "consumer_group_name": {"key": "consumerGroupName", "type": "str"},
        "input_serialization": {"key": "inputSerialization", "type": "SerializationInfo"},
    }

    def __init__(
        self,
        *,
        data_connection_id: str,
        consumer_group_name: str,
        input_serialization: "_models.SerializationInfo",
        **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The Azure Event Hub data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword consumer_group_name: The consumer group name. Required.
        :paramtype consumer_group_name: str
        :keyword input_serialization: Serialization information. Required.
        :paramtype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
        """
        super().__init__(**kwargs)
        self.data_connection_id = data_connection_id
        self.consumer_group_name = consumer_group_name
        self.input_serialization = input_serialization


class AzureEventHubSourceResponse(SourceResponse):
    """Azure Event Hub source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Azure Event Hub source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.AzureEventHubSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "AzureEventHubSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.AzureEventHubSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Azure Event Hub source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.AzureEventHubSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AzureEventHub"
        self.properties = properties


class AzureIoTHubSourceProperties(_serialization.Model):
    """Azure IoT Hub source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Azure IoT Hub data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar consumer_group_name: The consumer group name. Required.
    :vartype consumer_group_name: str
    :ivar input_serialization: Serialization information. Required.
    :vartype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
    """

    _validation = {
        "data_connection_id": {"required": True},
        "consumer_group_name": {"required": True},
        "input_serialization": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "consumer_group_name": {"key": "consumerGroupName", "type": "str"},
        "input_serialization": {"key": "inputSerialization", "type": "SerializationInfo"},
    }

    def __init__(
        self,
        *,
        data_connection_id: str,
        consumer_group_name: str,
        input_serialization: "_models.SerializationInfo",
        **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The Azure IoT Hub data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword consumer_group_name: The consumer group name. Required.
        :paramtype consumer_group_name: str
        :keyword input_serialization: Serialization information. Required.
        :paramtype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
        """
        super().__init__(**kwargs)
        self.data_connection_id = data_connection_id
        self.consumer_group_name = consumer_group_name
        self.input_serialization = input_serialization


class AzureIoTHubSourceResponse(SourceResponse):
    """Azure IoT Hub source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Azure IoT Hub source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.AzureIoTHubSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "AzureIoTHubSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.AzureIoTHubSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Azure IoT Hub source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.AzureIoTHubSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AzureIoTHub"
        self.properties = properties


class AzureSqldbcdcSourceResponse(SourceResponse):
    """Azure SQL DB CDC source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: Base SQL CDC source properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.BaseSQLCDCSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "BaseSQLCDCSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.BaseSQLCDCSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Base SQL CDC source properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.BaseSQLCDCSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AzureSQLDBCDC"
        self.properties = properties


class AzureSqlmidbcdcSourceResponse(SourceResponse):
    """Azure SQL MI DB CDC source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: Base SQL CDC source properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.BaseSQLCDCSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "BaseSQLCDCSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.BaseSQLCDCSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Base SQL CDC source properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.BaseSQLCDCSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "AzureSQLMIDBCDC"
        self.properties = properties


class BaseCustomEndpointConnection(_serialization.Model):
    """Represents the connection information for a custom endpoint.

    All required parameters must be populated in order to send to server.

    :ivar fully_qualified_namespace: The fully qualified namespace of the EventHub. Required.
    :vartype fully_qualified_namespace: str
    :ivar event_hub_name: The name of the EventHub. Required.
    :vartype event_hub_name: str
    :ivar access_keys: The access keys.
    :vartype access_keys: ~microsoft.fabric.api.eventstream.models.AccessKeys
    """

    _validation = {
        "fully_qualified_namespace": {"required": True},
        "event_hub_name": {"required": True},
    }

    _attribute_map = {
        "fully_qualified_namespace": {"key": "fullyQualifiedNamespace", "type": "str"},
        "event_hub_name": {"key": "eventHubName", "type": "str"},
        "access_keys": {"key": "accessKeys", "type": "AccessKeys"},
    }

    def __init__(
        self,
        *,
        fully_qualified_namespace: str,
        event_hub_name: str,
        access_keys: Optional["_models.AccessKeys"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword fully_qualified_namespace: The fully qualified namespace of the EventHub. Required.
        :paramtype fully_qualified_namespace: str
        :keyword event_hub_name: The name of the EventHub. Required.
        :paramtype event_hub_name: str
        :keyword access_keys: The access keys.
        :paramtype access_keys: ~microsoft.fabric.api.eventstream.models.AccessKeys
        """
        super().__init__(**kwargs)
        self.fully_qualified_namespace = fully_qualified_namespace
        self.event_hub_name = event_hub_name
        self.access_keys = access_keys


class BaseSQLCDCSourceProperties(_serialization.Model):
    """Base SQL CDC source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The SQL CDC data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar table_name: The table name. Required.
    :vartype table_name: str
    """

    _validation = {
        "data_connection_id": {"required": True},
        "table_name": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "table_name": {"key": "tableName", "type": "str"},
    }

    def __init__(self, *, data_connection_id: str, table_name: str, **kwargs: Any) -> None:
        """
        :keyword data_connection_id: The SQL CDC data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword table_name: The table name. Required.
        :paramtype table_name: str
        """
        super().__init__(**kwargs)
        self.data_connection_id = data_connection_id
        self.table_name = table_name


class CastProperties(_serialization.Model):
    """Properties for a cast operation.

    All required parameters must be populated in order to send to server.

    :ivar target_data_type: Represents the data type. Additional data types may be added over time.
     Required. Known values are: "BigInt", "Float", "Nvarchar(max)", "DateTime", "Bit", "Record",
     "Array", and "Any".
    :vartype target_data_type: str or ~microsoft.fabric.api.eventstream.models.DataType
    :ivar column: Represents a reference to a column. Required.
    :vartype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    """

    _validation = {
        "target_data_type": {"required": True},
        "column": {"required": True},
    }

    _attribute_map = {
        "target_data_type": {"key": "targetDataType", "type": "str"},
        "column": {"key": "column", "type": "ColumnReferenceExpression"},
    }

    def __init__(
        self,
        *,
        target_data_type: Union[str, "_models.DataType"],
        column: "_models.ColumnReferenceExpression",
        **kwargs: Any
    ) -> None:
        """
        :keyword target_data_type: Represents the data type. Additional data types may be added over
         time. Required. Known values are: "BigInt", "Float", "Nvarchar(max)", "DateTime", "Bit",
         "Record", "Array", and "Any".
        :paramtype target_data_type: str or ~microsoft.fabric.api.eventstream.models.DataType
        :keyword column: Represents a reference to a column. Required.
        :paramtype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        """
        super().__init__(**kwargs)
        self.target_data_type = target_data_type
        self.column = column


class ColumnReferenceExpression(_serialization.Model):
    """Represents a reference to a column.

    All required parameters must be populated in order to send to server.

    :ivar node: The name of the reference node.
    :vartype node: str
    :ivar column_name: The name of the column. Required.
    :vartype column_name: str
    :ivar column_path_segments: The path segments to the column reference for nested columns.
    :vartype column_path_segments: list[str]
    """

    _validation = {
        "column_name": {"required": True},
    }

    _attribute_map = {
        "node": {"key": "node", "type": "str"},
        "column_name": {"key": "columnName", "type": "str"},
        "column_path_segments": {"key": "columnPathSegments", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        column_name: str,
        node: Optional[str] = None,
        column_path_segments: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword node: The name of the reference node.
        :paramtype node: str
        :keyword column_name: The name of the column. Required.
        :paramtype column_name: str
        :keyword column_path_segments: The path segments to the column reference for nested columns.
        :paramtype column_path_segments: list[str]
        """
        super().__init__(**kwargs)
        self.node = node
        self.column_name = column_name
        self.column_path_segments = column_path_segments


class ColumnSchema(_serialization.Model):
    """Represents the schema of a column.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the column.
    :vartype name: str
    :ivar type: The data type of the column. Required. Known values are: "BigInt", "Float",
     "Nvarchar(max)", "DateTime", "Bit", "Record", "Array", and "Any".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.DataType
    :ivar fields: A list of the fields for the record or array data type.
    :vartype fields: list[~microsoft.fabric.api.eventstream.models.ColumnSchema]
    :ivar items: The schema of the array items.
    :vartype items: ~microsoft.fabric.api.eventstream.models.ColumnSchema
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "fields": {"key": "fields", "type": "[ColumnSchema]"},
        "items": {"key": "items", "type": "ColumnSchema"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.DataType"],
        name: Optional[str] = None,
        fields: Optional[List["_models.ColumnSchema"]] = None,
        items: Optional["_models.ColumnSchema"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the column.
        :paramtype name: str
        :keyword type: The data type of the column. Required. Known values are: "BigInt", "Float",
         "Nvarchar(max)", "DateTime", "Bit", "Record", "Array", and "Any".
        :paramtype type: str or ~microsoft.fabric.api.eventstream.models.DataType
        :keyword fields: A list of the fields for the record or array data type.
        :paramtype fields: list[~microsoft.fabric.api.eventstream.models.ColumnSchema]
        :keyword items: The schema of the array items.
        :paramtype items: ~microsoft.fabric.api.eventstream.models.ColumnSchema
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type
        self.fields = fields
        self.items = items


class ConfluentCloudSourceResponse(SourceResponse):
    """Confluent Cloud source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: Base Kafka source properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.BaseKafkaSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "BaseKafkaSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.BaseKafkaSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Base Kafka source properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.BaseKafkaSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "ConfluentCloud"
        self.properties = properties


class CreateEventstreamRequest(_serialization.Model):
    """Create eventstream request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The eventstream display name. The display name must follow naming rules
     according to item type. Required.
    :vartype display_name: str
    :ivar description: The eventstream description. Maximum length is 256 characters.
    :vartype description: str
    :ivar folder_id: The folder ID. If not specified or null, the eventstream is created with the
     workspace as its folder.
    :vartype folder_id: str
    :ivar definition: The `eventstream public definition
     </rest/api/fabric/articles/item-management/definitions/eventstream-definition>`_.
    :vartype definition: ~microsoft.fabric.api.eventstream.models.EventstreamDefinition
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "definition": {"key": "definition", "type": "EventstreamDefinition"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        definition: Optional["_models.EventstreamDefinition"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The eventstream display name. The display name must follow naming rules
         according to item type. Required.
        :paramtype display_name: str
        :keyword description: The eventstream description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword folder_id: The folder ID. If not specified or null, the eventstream is created with
         the workspace as its folder.
        :paramtype folder_id: str
        :keyword definition: The `eventstream public definition
         </rest/api/fabric/articles/item-management/definitions/eventstream-definition>`_.
        :paramtype definition: ~microsoft.fabric.api.eventstream.models.EventstreamDefinition
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.folder_id = folder_id
        self.definition = definition


class CsvSerializationInfo(SerializationInfo):
    """CSV serialization information.

    All required parameters must be populated in order to send to server.

    :ivar type: The serialization type. Required. Known values are: "Avro", "Json", and "Csv".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SerializationType
    :ivar properties: CSV serialization properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.CsvSerializationProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "CsvSerializationProperties"},
    }

    def __init__(self, *, properties: "_models.CsvSerializationProperties", **kwargs: Any) -> None:
        """
        :keyword properties: CSV serialization properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.CsvSerializationProperties
        """
        super().__init__(**kwargs)
        self.type: str = "Csv"
        self.properties = properties


class CsvSerializationProperties(_serialization.Model):
    """CSV serialization properties.

    All required parameters must be populated in order to send to server.

    :ivar encoding: The encoding type. "UTF8"
    :vartype encoding: str or
     ~microsoft.fabric.api.eventstream.models.CsvSerializationPropertiesEncoding
    :ivar field_delimiter: The field delimiter. Required.
    :vartype field_delimiter: str
    :ivar format: The format type. Known values are: "WithHeaders" and "WithoutHeaders".
    :vartype format: str or
     ~microsoft.fabric.api.eventstream.models.CsvSerializationPropertiesFormat
    """

    _validation = {
        "field_delimiter": {"required": True},
    }

    _attribute_map = {
        "encoding": {"key": "encoding", "type": "str"},
        "field_delimiter": {"key": "fieldDelimiter", "type": "str"},
        "format": {"key": "format", "type": "str"},
    }

    def __init__(
        self,
        *,
        field_delimiter: str,
        encoding: Optional[Union[str, "_models.CsvSerializationPropertiesEncoding"]] = None,
        format: Optional[Union[str, "_models.CsvSerializationPropertiesFormat"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword encoding: The encoding type. "UTF8"
        :paramtype encoding: str or
         ~microsoft.fabric.api.eventstream.models.CsvSerializationPropertiesEncoding
        :keyword field_delimiter: The field delimiter. Required.
        :paramtype field_delimiter: str
        :keyword format: The format type. Known values are: "WithHeaders" and "WithoutHeaders".
        :paramtype format: str or
         ~microsoft.fabric.api.eventstream.models.CsvSerializationPropertiesFormat
        """
        super().__init__(**kwargs)
        self.encoding = encoding
        self.field_delimiter = field_delimiter
        self.format = format


class CustomEndpointDestinationResponse(DestinationResponse):
    """Custom endpoint events destination response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the destination.
    :vartype id: str
    :ivar name: The unique name of the destination. Required.
    :vartype name: str
    :ivar input_nodes: A list of the references to the input nodes of the destination. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the destination.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the destination. Required. Known values are: "Activator",
     "CustomEndpoint", "Eventhouse", and "Lakehouse".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.DestinationType
    :ivar properties: The properties of the custom endpoint destination. Required.
    :vartype properties: JSON
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "input_nodes": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: JSON,
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the destination.
        :paramtype id: str
        :keyword name: The unique name of the destination. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the destination. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the destination.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the custom endpoint destination. Required.
        :paramtype properties: JSON
        """
        super().__init__(
            status=status, error=error, id=id, name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs
        )
        self.type: str = "CustomEndpoint"
        self.properties = properties


class CustomEndpointSourceResponse(SourceResponse):
    """Custom endpoint events source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the custom endpoint events source. Required.
    :vartype properties: JSON
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: JSON,
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the custom endpoint events source. Required.
        :paramtype properties: JSON
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "CustomEndpoint"
        self.properties = properties


class DataSourceStartRequest(_serialization.Model):
    """Represents the request to start a data source.

    All required parameters must be populated in order to send to server.

    :ivar start_type: The start type of the data source. Required. Known values are: "Now",
     "WhenLastStopped", and "CustomTime".
    :vartype start_type: str or ~microsoft.fabric.api.eventstream.models.DataSourceStartType
    :ivar custom_start_date_time: The custom start time of the data source in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format.
    :vartype custom_start_date_time: ~datetime.datetime
    """

    _validation = {
        "start_type": {"required": True},
    }

    _attribute_map = {
        "start_type": {"key": "startType", "type": "str"},
        "custom_start_date_time": {"key": "customStartDateTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        start_type: Union[str, "_models.DataSourceStartType"],
        custom_start_date_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword start_type: The start type of the data source. Required. Known values are: "Now",
         "WhenLastStopped", and "CustomTime".
        :paramtype start_type: str or ~microsoft.fabric.api.eventstream.models.DataSourceStartType
        :keyword custom_start_date_time: The custom start time of the data source in UTC, using the
         YYYY-MM-DDTHH:mm:ssZ format.
        :paramtype custom_start_date_time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.start_type = start_type
        self.custom_start_date_time = custom_start_date_time


class StreamResponse(_serialization.Model):
    """Represents an Eventstream default or derived stream.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DefaultStreamResponse, DerivedStreamResponse

    All required parameters must be populated in order to send to server.

    :ivar id: The unique identifier of the stream. Required.
    :vartype id: str
    :ivar name: The unique name of the stream. Required.
    :vartype name: str
    :ivar type: The type of the stream. Required. Known values are: "DefaultStream" and
     "DerivedStream".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.StreamType
    :ivar input_nodes: A list of the references to the input nodes of the stream. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
    }

    _subtype_map = {"type": {"DefaultStream": "DefaultStreamResponse", "DerivedStream": "DerivedStreamResponse"}}

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        input_nodes: List["_models.NodeReference"],
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The unique identifier of the stream. Required.
        :paramtype id: str
        :keyword name: The unique name of the stream. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the stream. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.type: Optional[str] = None
        self.input_nodes = input_nodes


class DefaultStreamResponse(StreamResponse):
    """Default stream response.

    All required parameters must be populated in order to send to server.

    :ivar id: The unique identifier of the stream. Required.
    :vartype id: str
    :ivar name: The unique name of the stream. Required.
    :vartype name: str
    :ivar type: The type of the stream. Required. Known values are: "DefaultStream" and
     "DerivedStream".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.StreamType
    :ivar input_nodes: A list of the references to the input nodes of the stream. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar properties: The properties of the default stream. Required.
    :vartype properties: JSON
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: JSON,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The unique identifier of the stream. Required.
        :paramtype id: str
        :keyword name: The unique name of the stream. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the stream. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword properties: The properties of the default stream. Required.
        :paramtype properties: JSON
        """
        super().__init__(id=id, name=name, input_nodes=input_nodes, **kwargs)
        self.type: str = "DefaultStream"
        self.properties = properties


class DerivedStreamProperties(_serialization.Model):
    """The derived stream properties.

    :ivar input_serialization: Serialization information.
    :vartype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
    """

    _attribute_map = {
        "input_serialization": {"key": "inputSerialization", "type": "SerializationInfo"},
    }

    def __init__(self, *, input_serialization: Optional["_models.SerializationInfo"] = None, **kwargs: Any) -> None:
        """
        :keyword input_serialization: Serialization information.
        :paramtype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
        """
        super().__init__(**kwargs)
        self.input_serialization = input_serialization


class DerivedStreamResponse(StreamResponse):
    """Derived stream response.

    All required parameters must be populated in order to send to server.

    :ivar id: The unique identifier of the stream. Required.
    :vartype id: str
    :ivar name: The unique name of the stream. Required.
    :vartype name: str
    :ivar type: The type of the stream. Required. Known values are: "DefaultStream" and
     "DerivedStream".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.StreamType
    :ivar input_nodes: A list of the references to the input nodes of the stream. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar properties: The properties of the derived stream. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.DerivedStreamProperties
    """

    _validation = {
        "id": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "properties": {"key": "properties", "type": "DerivedStreamProperties"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.DerivedStreamProperties",
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The unique identifier of the stream. Required.
        :paramtype id: str
        :keyword name: The unique name of the stream. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the stream. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword properties: The properties of the derived stream. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.DerivedStreamProperties
        """
        super().__init__(id=id, name=name, input_nodes=input_nodes, **kwargs)
        self.type: str = "DerivedStream"
        self.properties = properties


class DestinationConnectionResponse(BaseCustomEndpointConnection):
    """Represents the connection information for a destination custom endpoint.

    All required parameters must be populated in order to send to server.

    :ivar fully_qualified_namespace: The fully qualified namespace of the EventHub. Required.
    :vartype fully_qualified_namespace: str
    :ivar event_hub_name: The name of the EventHub. Required.
    :vartype event_hub_name: str
    :ivar access_keys: The access keys.
    :vartype access_keys: ~microsoft.fabric.api.eventstream.models.AccessKeys
    :ivar consumer_group_name: The consumer group name. Required.
    :vartype consumer_group_name: str
    """

    _validation = {
        "fully_qualified_namespace": {"required": True},
        "event_hub_name": {"required": True},
        "consumer_group_name": {"required": True},
    }

    _attribute_map = {
        "fully_qualified_namespace": {"key": "fullyQualifiedNamespace", "type": "str"},
        "event_hub_name": {"key": "eventHubName", "type": "str"},
        "access_keys": {"key": "accessKeys", "type": "AccessKeys"},
        "consumer_group_name": {"key": "consumerGroupName", "type": "str"},
    }

    def __init__(
        self,
        *,
        fully_qualified_namespace: str,
        event_hub_name: str,
        consumer_group_name: str,
        access_keys: Optional["_models.AccessKeys"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword fully_qualified_namespace: The fully qualified namespace of the EventHub. Required.
        :paramtype fully_qualified_namespace: str
        :keyword event_hub_name: The name of the EventHub. Required.
        :paramtype event_hub_name: str
        :keyword access_keys: The access keys.
        :paramtype access_keys: ~microsoft.fabric.api.eventstream.models.AccessKeys
        :keyword consumer_group_name: The consumer group name. Required.
        :paramtype consumer_group_name: str
        """
        super().__init__(
            fully_qualified_namespace=fully_qualified_namespace,
            event_hub_name=event_hub_name,
            access_keys=access_keys,
            **kwargs
        )
        self.consumer_group_name = consumer_group_name


class ErrorInfo(_serialization.Model):
    """Represents the error information.

    All required parameters must be populated in order to send to server.

    :ivar error_code: The error code.
    :vartype error_code: str
    :ivar error_message: The error message. Required.
    :vartype error_message: str
    :ivar error_details: The error details.
    :vartype error_details: list[str]
    """

    _validation = {
        "error_message": {"required": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "error_details": {"key": "errorDetails", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        error_message: str,
        error_code: Optional[str] = None,
        error_details: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword error_code: The error code.
        :paramtype error_code: str
        :keyword error_message: The error message. Required.
        :paramtype error_message: str
        :keyword error_details: The error details.
        :paramtype error_details: list[str]
        """
        super().__init__(**kwargs)
        self.error_code = error_code
        self.error_message = error_message
        self.error_details = error_details


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.eventstream.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.eventstream.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.eventstream.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class EventhouseDestinationProperties(_serialization.Model):
    """Eventhouse destination properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    EventhouseDirectIngestionModeDestinationProperties,
    EventhouseProcessedIngestionModeDestinationProperties

    All required parameters must be populated in order to send to server.

    :ivar data_ingestion_mode: The data ingestion mode. Required. Known values are:
     "DirectIngestion" and "ProcessedIngestion".
    :vartype data_ingestion_mode: str or
     ~microsoft.fabric.api.eventstream.models.EventhouseDestinationPropertiesDataIngestionMode
    :ivar workspace_id: The Eventhouse workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The Eventhouse item identifier. Required.
    :vartype item_id: str
    """

    _validation = {
        "data_ingestion_mode": {"required": True},
        "workspace_id": {"required": True},
        "item_id": {"required": True},
    }

    _attribute_map = {
        "data_ingestion_mode": {"key": "dataIngestionMode", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
    }

    _subtype_map = {
        "data_ingestion_mode": {
            "DirectIngestion": "EventhouseDirectIngestionModeDestinationProperties",
            "ProcessedIngestion": "EventhouseProcessedIngestionModeDestinationProperties",
        }
    }

    def __init__(self, *, workspace_id: str, item_id: str, **kwargs: Any) -> None:
        """
        :keyword workspace_id: The Eventhouse workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The Eventhouse item identifier. Required.
        :paramtype item_id: str
        """
        super().__init__(**kwargs)
        self.data_ingestion_mode: Optional[str] = None
        self.workspace_id = workspace_id
        self.item_id = item_id


class EventhouseDestinationResponse(DestinationResponse):
    """Eventhouse destination response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the destination.
    :vartype id: str
    :ivar name: The unique name of the destination. Required.
    :vartype name: str
    :ivar input_nodes: A list of the references to the input nodes of the destination. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the destination.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the destination. Required. Known values are: "Activator",
     "CustomEndpoint", "Eventhouse", and "Lakehouse".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.DestinationType
    :ivar properties: Eventhouse destination properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.EventhouseDestinationProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "input_nodes": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "EventhouseDestinationProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.EventhouseDestinationProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the destination.
        :paramtype id: str
        :keyword name: The unique name of the destination. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the destination. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the destination.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Eventhouse destination properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.EventhouseDestinationProperties
        """
        super().__init__(
            status=status, error=error, id=id, name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs
        )
        self.type: str = "Eventhouse"
        self.properties = properties


class EventhouseDirectIngestionModeDestinationProperties(
    EventhouseDestinationProperties
):  # pylint: disable=name-too-long
    """Eventhouse DirectIngestion mode destination properties.

    All required parameters must be populated in order to send to server.

    :ivar data_ingestion_mode: The data ingestion mode. Required. Known values are:
     "DirectIngestion" and "ProcessedIngestion".
    :vartype data_ingestion_mode: str or
     ~microsoft.fabric.api.eventstream.models.EventhouseDestinationPropertiesDataIngestionMode
    :ivar workspace_id: The Eventhouse workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The Eventhouse item identifier. Required.
    :vartype item_id: str
    :ivar table_name: The KQL table name.
    :vartype table_name: str
    :ivar connection_name: The connection name.
    :vartype connection_name: str
    :ivar mapping_rule_name: The mapping rule name.
    :vartype mapping_rule_name: str
    """

    _validation = {
        "data_ingestion_mode": {"required": True},
        "workspace_id": {"required": True},
        "item_id": {"required": True},
    }

    _attribute_map = {
        "data_ingestion_mode": {"key": "dataIngestionMode", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "table_name": {"key": "tableName", "type": "str"},
        "connection_name": {"key": "connectionName", "type": "str"},
        "mapping_rule_name": {"key": "mappingRuleName", "type": "str"},
    }

    def __init__(
        self,
        *,
        workspace_id: str,
        item_id: str,
        table_name: Optional[str] = None,
        connection_name: Optional[str] = None,
        mapping_rule_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workspace_id: The Eventhouse workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The Eventhouse item identifier. Required.
        :paramtype item_id: str
        :keyword table_name: The KQL table name.
        :paramtype table_name: str
        :keyword connection_name: The connection name.
        :paramtype connection_name: str
        :keyword mapping_rule_name: The mapping rule name.
        :paramtype mapping_rule_name: str
        """
        super().__init__(workspace_id=workspace_id, item_id=item_id, **kwargs)
        self.data_ingestion_mode: str = "DirectIngestion"
        self.table_name = table_name
        self.connection_name = connection_name
        self.mapping_rule_name = mapping_rule_name


class EventhouseProcessedIngestionModeDestinationProperties(
    EventhouseDestinationProperties
):  # pylint: disable=name-too-long
    """Eventhouse ProcessedIngestion mode destination properties.

    All required parameters must be populated in order to send to server.

    :ivar data_ingestion_mode: The data ingestion mode. Required. Known values are:
     "DirectIngestion" and "ProcessedIngestion".
    :vartype data_ingestion_mode: str or
     ~microsoft.fabric.api.eventstream.models.EventhouseDestinationPropertiesDataIngestionMode
    :ivar workspace_id: The Eventhouse workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The Eventhouse item identifier. Required.
    :vartype item_id: str
    :ivar database_name: The KQL database name. Required.
    :vartype database_name: str
    :ivar table_name: The KQL table name. Required.
    :vartype table_name: str
    :ivar input_serialization: Serialization information.
    :vartype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
    """

    _validation = {
        "data_ingestion_mode": {"required": True},
        "workspace_id": {"required": True},
        "item_id": {"required": True},
        "database_name": {"required": True},
        "table_name": {"required": True},
    }

    _attribute_map = {
        "data_ingestion_mode": {"key": "dataIngestionMode", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "database_name": {"key": "databaseName", "type": "str"},
        "table_name": {"key": "tableName", "type": "str"},
        "input_serialization": {"key": "inputSerialization", "type": "SerializationInfo"},
    }

    def __init__(
        self,
        *,
        workspace_id: str,
        item_id: str,
        database_name: str,
        table_name: str,
        input_serialization: Optional["_models.SerializationInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workspace_id: The Eventhouse workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The Eventhouse item identifier. Required.
        :paramtype item_id: str
        :keyword database_name: The KQL database name. Required.
        :paramtype database_name: str
        :keyword table_name: The KQL table name. Required.
        :paramtype table_name: str
        :keyword input_serialization: Serialization information.
        :paramtype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
        """
        super().__init__(workspace_id=workspace_id, item_id=item_id, **kwargs)
        self.data_ingestion_mode: str = "ProcessedIngestion"
        self.database_name = database_name
        self.table_name = table_name
        self.input_serialization = input_serialization


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.eventstream.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.eventstream.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class Eventstream(Item):
    """An eventstream object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.eventstream.models.ItemTag]
    """


class EventstreamDefinition(_serialization.Model):
    """Eventstream public definition object.

    All required parameters must be populated in order to send to server.

    :ivar format: The format of the item definition.
    :vartype format: str
    :ivar parts: A list of definition parts. Required.
    :vartype parts: list[~microsoft.fabric.api.eventstream.models.EventstreamDefinitionPart]
    """

    _validation = {
        "parts": {"required": True},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
        "parts": {"key": "parts", "type": "[EventstreamDefinitionPart]"},
    }

    def __init__(
        self, *, parts: List["_models.EventstreamDefinitionPart"], format: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword format: The format of the item definition.
        :paramtype format: str
        :keyword parts: A list of definition parts. Required.
        :paramtype parts: list[~microsoft.fabric.api.eventstream.models.EventstreamDefinitionPart]
        """
        super().__init__(**kwargs)
        self.format = format
        self.parts = parts


class EventstreamDefinitionPart(_serialization.Model):
    """Eventstream definition part object.

    :ivar path: The eventstream part path.
    :vartype path: str
    :ivar payload: The eventstream part payload.
    :vartype payload: str
    :ivar payload_type: The payload type. "InlineBase64"
    :vartype payload_type: str or ~microsoft.fabric.api.eventstream.models.PayloadType
    """

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "payload": {"key": "payload", "type": "str"},
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    def __init__(
        self,
        *,
        path: Optional[str] = None,
        payload: Optional[str] = None,
        payload_type: Optional[Union[str, "_models.PayloadType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: The eventstream part path.
        :paramtype path: str
        :keyword payload: The eventstream part payload.
        :paramtype payload: str
        :keyword payload_type: The payload type. "InlineBase64"
        :paramtype payload_type: str or ~microsoft.fabric.api.eventstream.models.PayloadType
        """
        super().__init__(**kwargs)
        self.path = path
        self.payload = payload
        self.payload_type = payload_type


class EventstreamDefinitionResponse(_serialization.Model):
    """Eventstream public definition response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar definition: Eventstream public definition object. Required.
    :vartype definition: ~microsoft.fabric.api.eventstream.models.EventstreamDefinition
    """

    _validation = {
        "definition": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "EventstreamDefinition"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.definition = None


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class Eventstreams(PaginatedResponse):
    """A list of eventstreams.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of eventstreams. Required.
    :vartype value: list[~microsoft.fabric.api.eventstream.models.Eventstream]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Eventstream]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Eventstream"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of eventstreams. Required.
        :paramtype value: list[~microsoft.fabric.api.eventstream.models.Eventstream]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class EventstreamTopologyResponse(_serialization.Model):
    """Represents the Eventstream topology response.

    :ivar sources: A list of Eventstream sources.
    :vartype sources: list[~microsoft.fabric.api.eventstream.models.SourceResponse]
    :ivar destinations: A list of Eventstream destinations.
    :vartype destinations: list[~microsoft.fabric.api.eventstream.models.DestinationResponse]
    :ivar streams: A list of Eventstream default and derived streams.
    :vartype streams: list[~microsoft.fabric.api.eventstream.models.StreamResponse]
    :ivar operators: A list of Eventstream operators.
    :vartype operators: list[~microsoft.fabric.api.eventstream.models.Operator]
    :ivar compatibility_level: Represents the compatibility level of the Eventstream topology.
     Additional compatibility levels may be added over time. "1.0"
    :vartype compatibility_level: str or
     ~microsoft.fabric.api.eventstream.models.CompatibilityLevel
    """

    _attribute_map = {
        "sources": {"key": "sources", "type": "[SourceResponse]"},
        "destinations": {"key": "destinations", "type": "[DestinationResponse]"},
        "streams": {"key": "streams", "type": "[StreamResponse]"},
        "operators": {"key": "operators", "type": "[Operator]"},
        "compatibility_level": {"key": "compatibilityLevel", "type": "str"},
    }

    def __init__(
        self,
        *,
        sources: Optional[List["_models.SourceResponse"]] = None,
        destinations: Optional[List["_models.DestinationResponse"]] = None,
        streams: Optional[List["_models.StreamResponse"]] = None,
        operators: Optional[List["_models.Operator"]] = None,
        compatibility_level: Optional[Union[str, "_models.CompatibilityLevel"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sources: A list of Eventstream sources.
        :paramtype sources: list[~microsoft.fabric.api.eventstream.models.SourceResponse]
        :keyword destinations: A list of Eventstream destinations.
        :paramtype destinations: list[~microsoft.fabric.api.eventstream.models.DestinationResponse]
        :keyword streams: A list of Eventstream default and derived streams.
        :paramtype streams: list[~microsoft.fabric.api.eventstream.models.StreamResponse]
        :keyword operators: A list of Eventstream operators.
        :paramtype operators: list[~microsoft.fabric.api.eventstream.models.Operator]
        :keyword compatibility_level: Represents the compatibility level of the Eventstream topology.
         Additional compatibility levels may be added over time. "1.0"
        :paramtype compatibility_level: str or
         ~microsoft.fabric.api.eventstream.models.CompatibilityLevel
        """
        super().__init__(**kwargs)
        self.sources = sources
        self.destinations = destinations
        self.streams = streams
        self.operators = operators
        self.compatibility_level = compatibility_level


class ExpandOperator(Operator):
    """Expand operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar properties: Expand operator properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.ExpandOperatorProperties
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "properties": {"key": "properties", "type": "ExpandOperatorProperties"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.ExpandOperatorProperties",
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Expand operator properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.ExpandOperatorProperties
        """
        super().__init__(name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs)
        self.type: str = "Expand"
        self.properties = properties


class ExpandOperatorProperties(_serialization.Model):
    """Expand operator properties.

    All required parameters must be populated in order to send to server.

    :ivar column: A list of the columns to expand. Required.
    :vartype column: list[~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression]
    :ivar ignore_missing_or_empty: Missing or empty columns setting. True - Ignore the columns,
     False - Do not ignore the columns.
    :vartype ignore_missing_or_empty: bool
    """

    _validation = {
        "column": {"required": True},
    }

    _attribute_map = {
        "column": {"key": "column", "type": "[ColumnReferenceExpression]"},
        "ignore_missing_or_empty": {"key": "ignoreMissingOrEmpty", "type": "bool"},
    }

    def __init__(
        self,
        *,
        column: List["_models.ColumnReferenceExpression"],
        ignore_missing_or_empty: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword column: A list of the columns to expand. Required.
        :paramtype column: list[~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression]
        :keyword ignore_missing_or_empty: Missing or empty columns setting. True - Ignore the columns,
         False - Do not ignore the columns.
        :paramtype ignore_missing_or_empty: bool
        """
        super().__init__(**kwargs)
        self.column = column
        self.ignore_missing_or_empty = ignore_missing_or_empty


class FabricCapacityUtilizationEventsSourceProperties(_serialization.Model):  # pylint: disable=name-too-long
    """Fabric Capacity Utilization events source properties.

    All required parameters must be populated in order to send to server.

    :ivar event_scope: Required. Known values are: "Tenant", "Capacity", "Workspace", "Item", and
     "SubItem".
    :vartype event_scope: str or
     ~microsoft.fabric.api.eventstream.models.FabricCapacityUtilizationEventsSourcePropertiesEventScope
    :ivar capacity_id: The capacity identifier. Required.
    :vartype capacity_id: str
    :ivar included_event_types: The included event types.
    :vartype included_event_types: list[str]
    :ivar filters: The advanced filters defined in
     https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
    :vartype filters: JSON
    """

    _validation = {
        "event_scope": {"required": True},
        "capacity_id": {"required": True},
    }

    _attribute_map = {
        "event_scope": {"key": "eventScope", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "included_event_types": {"key": "includedEventTypes", "type": "[str]"},
        "filters": {"key": "filters", "type": "object"},
    }

    def __init__(
        self,
        *,
        event_scope: Union[str, "_models.FabricCapacityUtilizationEventsSourcePropertiesEventScope"],
        capacity_id: str,
        included_event_types: Optional[List[str]] = None,
        filters: Optional[JSON] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword event_scope: Required. Known values are: "Tenant", "Capacity", "Workspace", "Item",
         and "SubItem".
        :paramtype event_scope: str or
         ~microsoft.fabric.api.eventstream.models.FabricCapacityUtilizationEventsSourcePropertiesEventScope
        :keyword capacity_id: The capacity identifier. Required.
        :paramtype capacity_id: str
        :keyword included_event_types: The included event types.
        :paramtype included_event_types: list[str]
        :keyword filters: The advanced filters defined in
         https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
        :paramtype filters: JSON
        """
        super().__init__(**kwargs)
        self.event_scope = event_scope
        self.capacity_id = capacity_id
        self.included_event_types = included_event_types
        self.filters = filters


class FabricCapacityUtilizationEventsSourceResponse(SourceResponse):  # pylint: disable=name-too-long
    """Fabric Capacity Utilization events source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Fabric Capacity Utilization events source. Required.
    :vartype properties:
     ~microsoft.fabric.api.eventstream.models.FabricCapacityUtilizationEventsSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "FabricCapacityUtilizationEventsSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.FabricCapacityUtilizationEventsSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Fabric Capacity Utilization events source. Required.
        :paramtype properties:
         ~microsoft.fabric.api.eventstream.models.FabricCapacityUtilizationEventsSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "FabricCapacityUtilizationEvents"
        self.properties = properties


class FabricJobEventsSourceProperties(_serialization.Model):
    """Fabric Job events source properties.

    All required parameters must be populated in order to send to server.

    :ivar event_scope: Required. Known values are: "Tenant", "Capacity", "Workspace", "Item", and
     "SubItem".
    :vartype event_scope: str or
     ~microsoft.fabric.api.eventstream.models.FabricJobEventsSourcePropertiesEventScope
    :ivar workspace_id: The workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The item identifier. Required.
    :vartype item_id: str
    :ivar included_event_types: The included event types.
    :vartype included_event_types: list[str]
    :ivar filters: The advanced filters defined in
     https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
    :vartype filters: JSON
    """

    _validation = {
        "event_scope": {"required": True},
        "workspace_id": {"required": True},
        "item_id": {"required": True},
    }

    _attribute_map = {
        "event_scope": {"key": "eventScope", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "included_event_types": {"key": "includedEventTypes", "type": "[str]"},
        "filters": {"key": "filters", "type": "object"},
    }

    def __init__(
        self,
        *,
        event_scope: Union[str, "_models.FabricJobEventsSourcePropertiesEventScope"],
        workspace_id: str,
        item_id: str,
        included_event_types: Optional[List[str]] = None,
        filters: Optional[JSON] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword event_scope: Required. Known values are: "Tenant", "Capacity", "Workspace", "Item",
         and "SubItem".
        :paramtype event_scope: str or
         ~microsoft.fabric.api.eventstream.models.FabricJobEventsSourcePropertiesEventScope
        :keyword workspace_id: The workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The item identifier. Required.
        :paramtype item_id: str
        :keyword included_event_types: The included event types.
        :paramtype included_event_types: list[str]
        :keyword filters: The advanced filters defined in
         https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
        :paramtype filters: JSON
        """
        super().__init__(**kwargs)
        self.event_scope = event_scope
        self.workspace_id = workspace_id
        self.item_id = item_id
        self.included_event_types = included_event_types
        self.filters = filters


class FabricJobEventsSourceResponse(SourceResponse):
    """Fabric Job events source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Fabric Job events source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.FabricJobEventsSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "FabricJobEventsSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.FabricJobEventsSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Fabric Job events source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.FabricJobEventsSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "FabricJobEvents"
        self.properties = properties


class FabricOneLakeEventsSourceProperties(_serialization.Model):
    """Fabric OneLake events source properties.

    All required parameters must be populated in order to send to server.

    :ivar tenant_id: The tenant identifier. Required.
    :vartype tenant_id: str
    :ivar workspace_id: The workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The item identifier. Required.
    :vartype item_id: str
    :ivar one_lake_paths: The OneLake paths. Required.
    :vartype one_lake_paths: list[str]
    :ivar included_event_types: The included event types.
    :vartype included_event_types: list[str]
    :ivar filters: The advanced filters defined in
     https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
    :vartype filters: JSON
    """

    _validation = {
        "tenant_id": {"required": True},
        "workspace_id": {"required": True},
        "item_id": {"required": True},
        "one_lake_paths": {"required": True},
    }

    _attribute_map = {
        "tenant_id": {"key": "tenantId", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "one_lake_paths": {"key": "oneLakePaths", "type": "[str]"},
        "included_event_types": {"key": "includedEventTypes", "type": "[str]"},
        "filters": {"key": "filters", "type": "object"},
    }

    def __init__(
        self,
        *,
        tenant_id: str,
        workspace_id: str,
        item_id: str,
        one_lake_paths: List[str],
        included_event_types: Optional[List[str]] = None,
        filters: Optional[JSON] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tenant_id: The tenant identifier. Required.
        :paramtype tenant_id: str
        :keyword workspace_id: The workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The item identifier. Required.
        :paramtype item_id: str
        :keyword one_lake_paths: The OneLake paths. Required.
        :paramtype one_lake_paths: list[str]
        :keyword included_event_types: The included event types.
        :paramtype included_event_types: list[str]
        :keyword filters: The advanced filters defined in
         https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
        :paramtype filters: JSON
        """
        super().__init__(**kwargs)
        self.tenant_id = tenant_id
        self.workspace_id = workspace_id
        self.item_id = item_id
        self.one_lake_paths = one_lake_paths
        self.included_event_types = included_event_types
        self.filters = filters


class FabricOneLakeEventsSourceResponse(SourceResponse):
    """Fabric OneLake events source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Fabric OneLake events source. Required.
    :vartype properties:
     ~microsoft.fabric.api.eventstream.models.FabricOneLakeEventsSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "FabricOneLakeEventsSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.FabricOneLakeEventsSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Fabric OneLake events source. Required.
        :paramtype properties:
         ~microsoft.fabric.api.eventstream.models.FabricOneLakeEventsSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "FabricOneLakeEvents"
        self.properties = properties


class FabricWorkspaceItemEventsSourceProperties(_serialization.Model):  # pylint: disable=name-too-long
    """Fabric Workspace Item events source properties.

    All required parameters must be populated in order to send to server.

    :ivar event_scope: Required. Known values are: "Tenant", "Capacity", "Workspace", "Item", and
     "SubItem".
    :vartype event_scope: str or
     ~microsoft.fabric.api.eventstream.models.FabricWorkspaceItemEventsSourcePropertiesEventScope
    :ivar workspace_id: The workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The item identifier.
    :vartype item_id: str
    :ivar included_event_types: The included event types.
    :vartype included_event_types: list[str]
    :ivar filters: The advanced filters defined in
     https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
    :vartype filters: JSON
    """

    _validation = {
        "event_scope": {"required": True},
        "workspace_id": {"required": True},
    }

    _attribute_map = {
        "event_scope": {"key": "eventScope", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "included_event_types": {"key": "includedEventTypes", "type": "[str]"},
        "filters": {"key": "filters", "type": "object"},
    }

    def __init__(
        self,
        *,
        event_scope: Union[str, "_models.FabricWorkspaceItemEventsSourcePropertiesEventScope"],
        workspace_id: str,
        item_id: Optional[str] = None,
        included_event_types: Optional[List[str]] = None,
        filters: Optional[JSON] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword event_scope: Required. Known values are: "Tenant", "Capacity", "Workspace", "Item",
         and "SubItem".
        :paramtype event_scope: str or
         ~microsoft.fabric.api.eventstream.models.FabricWorkspaceItemEventsSourcePropertiesEventScope
        :keyword workspace_id: The workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The item identifier.
        :paramtype item_id: str
        :keyword included_event_types: The included event types.
        :paramtype included_event_types: list[str]
        :keyword filters: The advanced filters defined in
         https://learn.microsoft.com/en-us/azure/event-grid/event-filtering#advanced-filtering.
        :paramtype filters: JSON
        """
        super().__init__(**kwargs)
        self.event_scope = event_scope
        self.workspace_id = workspace_id
        self.item_id = item_id
        self.included_event_types = included_event_types
        self.filters = filters


class FabricWorkspaceItemEventsSourceResponse(SourceResponse):
    """Fabric Workspace Item events source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Fabric Workspace Item events source. Required.
    :vartype properties:
     ~microsoft.fabric.api.eventstream.models.FabricWorkspaceItemEventsSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "FabricWorkspaceItemEventsSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.FabricWorkspaceItemEventsSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Fabric Workspace Item events source. Required.
        :paramtype properties:
         ~microsoft.fabric.api.eventstream.models.FabricWorkspaceItemEventsSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "FabricWorkspaceItemEvents"
        self.properties = properties


class FilterCondition(_serialization.Model):
    """Represents a filter condition.

    All required parameters must be populated in order to send to server.

    :ivar column: Represents a reference to a column. Required.
    :vartype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    :ivar operator_type: The operator type. Required. Known values are: "Equals", "NotEquals",
     "GreaterThan", "GreaterThanOrEquals", "LessThan", "LessThanOrEquals", "Contains",
     "DoesNotContain", "StartsWith", "DoesNotStartWith", "EndsWith", "DoesNotEndWith", "IsEmpty",
     "IsNull", "IsNotNull", and "IsNotNullOrEmpty".
    :vartype operator_type: str or
     ~microsoft.fabric.api.eventstream.models.FilterConditionOperatorType
    :ivar value: Represents a literal expression.
    :vartype value: ~microsoft.fabric.api.eventstream.models.LiteralExpression
    """

    _validation = {
        "column": {"required": True},
        "operator_type": {"required": True},
    }

    _attribute_map = {
        "column": {"key": "column", "type": "ColumnReferenceExpression"},
        "operator_type": {"key": "operatorType", "type": "str"},
        "value": {"key": "value", "type": "LiteralExpression"},
    }

    def __init__(
        self,
        *,
        column: "_models.ColumnReferenceExpression",
        operator_type: Union[str, "_models.FilterConditionOperatorType"],
        value: Optional["_models.LiteralExpression"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword column: Represents a reference to a column. Required.
        :paramtype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        :keyword operator_type: The operator type. Required. Known values are: "Equals", "NotEquals",
         "GreaterThan", "GreaterThanOrEquals", "LessThan", "LessThanOrEquals", "Contains",
         "DoesNotContain", "StartsWith", "DoesNotStartWith", "EndsWith", "DoesNotEndWith", "IsEmpty",
         "IsNull", "IsNotNull", and "IsNotNullOrEmpty".
        :paramtype operator_type: str or
         ~microsoft.fabric.api.eventstream.models.FilterConditionOperatorType
        :keyword value: Represents a literal expression.
        :paramtype value: ~microsoft.fabric.api.eventstream.models.LiteralExpression
        """
        super().__init__(**kwargs)
        self.column = column
        self.operator_type = operator_type
        self.value = value


class FilterOperator(Operator):
    """Filter operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar properties: Filter operator properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.FilterOperatorProperties
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "properties": {"key": "properties", "type": "FilterOperatorProperties"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.FilterOperatorProperties",
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Filter operator properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.FilterOperatorProperties
        """
        super().__init__(name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs)
        self.type: str = "Filter"
        self.properties = properties


class FilterOperatorProperties(_serialization.Model):
    """Filter operator properties.

    All required parameters must be populated in order to send to server.

    :ivar conditions: A list of the filter conditions. Required.
    :vartype conditions: list[~microsoft.fabric.api.eventstream.models.FilterCondition]
    """

    _validation = {
        "conditions": {"required": True},
    }

    _attribute_map = {
        "conditions": {"key": "conditions", "type": "[FilterCondition]"},
    }

    def __init__(self, *, conditions: List["_models.FilterCondition"], **kwargs: Any) -> None:
        """
        :keyword conditions: A list of the filter conditions. Required.
        :paramtype conditions: list[~microsoft.fabric.api.eventstream.models.FilterCondition]
        """
        super().__init__(**kwargs)
        self.conditions = conditions


class FunctionCallProperties(_serialization.Model):
    """Properties for a function call operation.

    All required parameters must be populated in order to send to server.

    :ivar function_name: The name of the function. Required.
    :vartype function_name: str
    :ivar arguments: A list of the arguments for the function. Required.
    :vartype arguments: list[JSON]
    """

    _validation = {
        "function_name": {"required": True},
        "arguments": {"required": True},
    }

    _attribute_map = {
        "function_name": {"key": "functionName", "type": "str"},
        "arguments": {"key": "arguments", "type": "[object]"},
    }

    def __init__(self, *, function_name: str, arguments: List[JSON], **kwargs: Any) -> None:
        """
        :keyword function_name: The name of the function. Required.
        :paramtype function_name: str
        :keyword arguments: A list of the arguments for the function. Required.
        :paramtype arguments: list[JSON]
        """
        super().__init__(**kwargs)
        self.function_name = function_name
        self.arguments = arguments


class GooglePubSubSourceProperties(_serialization.Model):
    """Google Pub/Sub source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The Google Pub/Sub data connection identifier. Required.
    :vartype data_connection_id: str
    """

    _validation = {
        "data_connection_id": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
    }

    def __init__(self, *, data_connection_id: str, **kwargs: Any) -> None:
        """
        :keyword data_connection_id: The Google Pub/Sub data connection identifier. Required.
        :paramtype data_connection_id: str
        """
        super().__init__(**kwargs)
        self.data_connection_id = data_connection_id


class GooglePubSubSourceResponse(SourceResponse):
    """Google Pub/Sub source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the Google Pub/Sub source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.GooglePubSubSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "GooglePubSubSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.GooglePubSubSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Google Pub/Sub source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.GooglePubSubSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "GooglePubSub"
        self.properties = properties


class GroupByOperator(Operator):
    """GroupBy operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar properties: GroupBy operator properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.GroupByOperatorProperties
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "properties": {"key": "properties", "type": "GroupByOperatorProperties"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.GroupByOperatorProperties",
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: GroupBy operator properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.GroupByOperatorProperties
        """
        super().__init__(name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs)
        self.type: str = "GroupBy"
        self.properties = properties


class GroupByOperatorProperties(_serialization.Model):
    """GroupBy operator properties.

    All required parameters must be populated in order to send to server.

    :ivar aggregations: A list of the aggregations. Required.
    :vartype aggregations: list[~microsoft.fabric.api.eventstream.models.Aggregation]
    :ivar group_by: A list of the columns to group by. Required.
    :vartype group_by: list[~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression]
    :ivar window: Represents the window for the group by operator. Required.
    :vartype window: ~microsoft.fabric.api.eventstream.models.GroupByWindow
    """

    _validation = {
        "aggregations": {"required": True},
        "group_by": {"required": True},
        "window": {"required": True},
    }

    _attribute_map = {
        "aggregations": {"key": "aggregations", "type": "[Aggregation]"},
        "group_by": {"key": "groupBy", "type": "[ColumnReferenceExpression]"},
        "window": {"key": "window", "type": "GroupByWindow"},
    }

    def __init__(
        self,
        *,
        aggregations: List["_models.Aggregation"],
        group_by: List["_models.ColumnReferenceExpression"],
        window: "_models.GroupByWindow",
        **kwargs: Any
    ) -> None:
        """
        :keyword aggregations: A list of the aggregations. Required.
        :paramtype aggregations: list[~microsoft.fabric.api.eventstream.models.Aggregation]
        :keyword group_by: A list of the columns to group by. Required.
        :paramtype group_by: list[~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression]
        :keyword window: Represents the window for the group by operator. Required.
        :paramtype window: ~microsoft.fabric.api.eventstream.models.GroupByWindow
        """
        super().__init__(**kwargs)
        self.aggregations = aggregations
        self.group_by = group_by
        self.window = window


class GroupByWindow(_serialization.Model):
    """Represents the window for the group by operator.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    HoppingWindow, SessionWindow, SlidingWindow, SnapshotWindow, TumblingWindow

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the window. Required. Known values are: "Tumbling", "Hopping",
     "Sliding", "Snapshot", and "Session".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.GroupByWindowType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Hopping": "HoppingWindow",
            "Session": "SessionWindow",
            "Sliding": "SlidingWindow",
            "Snapshot": "SnapshotWindow",
            "Tumbling": "TumblingWindow",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class HoppingWindow(GroupByWindow):
    """HoppingWindow.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the window. Required. Known values are: "Tumbling", "Hopping",
     "Sliding", "Snapshot", and "Session".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.GroupByWindowType
    :ivar properties: The properties for a hopping window. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.HoppingWindowProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "HoppingWindowProperties"},
    }

    def __init__(self, *, properties: "_models.HoppingWindowProperties", **kwargs: Any) -> None:
        """
        :keyword properties: The properties for a hopping window. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.HoppingWindowProperties
        """
        super().__init__(**kwargs)
        self.type: str = "Hopping"
        self.properties = properties


class HoppingWindowProperties(_serialization.Model):
    """Properties for a hopping window.

    All required parameters must be populated in order to send to server.

    :ivar hop_size: Represents the duration. Required.
    :vartype hop_size: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    :ivar duration: Represents the duration. Required.
    :vartype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    :ivar offset: Represents the duration.
    :vartype offset: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    """

    _validation = {
        "hop_size": {"required": True},
        "duration": {"required": True},
    }

    _attribute_map = {
        "hop_size": {"key": "hopSize", "type": "OperatorCommonDuration"},
        "duration": {"key": "duration", "type": "OperatorCommonDuration"},
        "offset": {"key": "offset", "type": "OperatorCommonDuration"},
    }

    def __init__(
        self,
        *,
        hop_size: "_models.OperatorCommonDuration",
        duration: "_models.OperatorCommonDuration",
        offset: Optional["_models.OperatorCommonDuration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword hop_size: Represents the duration. Required.
        :paramtype hop_size: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        :keyword duration: Represents the duration. Required.
        :paramtype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        :keyword offset: Represents the duration.
        :paramtype offset: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        """
        super().__init__(**kwargs)
        self.hop_size = hop_size
        self.duration = duration
        self.offset = offset


class InColumnAggregation(Aggregation):
    """Represents an aggregation on a column.

    All required parameters must be populated in order to send to server.

    :ivar aggregation_function: The aggregation function. Required. Known values are: "Average",
     "Count", "Maximum", "Minimum", "PercentileContinuous", "PercentileDiscrete",
     "StandardDeviation", "StandardDeviationPopulation", "Sum", "Variance", and
     "VariancePopulation".
    :vartype aggregation_function: str or
     ~microsoft.fabric.api.eventstream.models.AggregationFunction
    :ivar arguments: A list of the arguments for the aggregation.
    :vartype arguments: list[JSON]
    :ivar column: Represents a reference to a column. Required.
    :vartype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    :ivar alias: The alias of the aggregation.
    :vartype alias: str
    :ivar partition_by: A list of the columns to partition by.
    :vartype partition_by: list[~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression]
    :ivar duration: Represents the duration. Required.
    :vartype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    """

    _validation = {
        "aggregation_function": {"required": True},
        "column": {"required": True},
        "duration": {"required": True},
    }

    _attribute_map = {
        "aggregation_function": {"key": "aggregationFunction", "type": "str"},
        "arguments": {"key": "arguments", "type": "[object]"},
        "column": {"key": "column", "type": "ColumnReferenceExpression"},
        "alias": {"key": "alias", "type": "str"},
        "partition_by": {"key": "partitionBy", "type": "[ColumnReferenceExpression]"},
        "duration": {"key": "duration", "type": "OperatorCommonDuration"},
    }

    def __init__(
        self,
        *,
        aggregation_function: Union[str, "_models.AggregationFunction"],
        column: "_models.ColumnReferenceExpression",
        duration: "_models.OperatorCommonDuration",
        arguments: Optional[List[JSON]] = None,
        alias: Optional[str] = None,
        partition_by: Optional[List["_models.ColumnReferenceExpression"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword aggregation_function: The aggregation function. Required. Known values are: "Average",
         "Count", "Maximum", "Minimum", "PercentileContinuous", "PercentileDiscrete",
         "StandardDeviation", "StandardDeviationPopulation", "Sum", "Variance", and
         "VariancePopulation".
        :paramtype aggregation_function: str or
         ~microsoft.fabric.api.eventstream.models.AggregationFunction
        :keyword arguments: A list of the arguments for the aggregation.
        :paramtype arguments: list[JSON]
        :keyword column: Represents a reference to a column. Required.
        :paramtype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        :keyword alias: The alias of the aggregation.
        :paramtype alias: str
        :keyword partition_by: A list of the columns to partition by.
        :paramtype partition_by:
         list[~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression]
        :keyword duration: Represents the duration. Required.
        :paramtype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        """
        super().__init__(
            aggregation_function=aggregation_function, arguments=arguments, column=column, alias=alias, **kwargs
        )
        self.partition_by = partition_by
        self.duration = duration


class InputSchema(_serialization.Model):
    """Represents the input schema of the source, destination, or operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the input schema. Required.
    :vartype name: str
    :ivar schema: Represents the schema of the data. Required.
    :vartype schema: ~microsoft.fabric.api.eventstream.models.Schema
    """

    _validation = {
        "name": {"required": True},
        "schema": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "schema": {"key": "schema", "type": "Schema"},
    }

    def __init__(self, *, name: str, schema: "_models.Schema", **kwargs: Any) -> None:
        """
        :keyword name: The name of the input schema. Required.
        :paramtype name: str
        :keyword schema: Represents the schema of the data. Required.
        :paramtype schema: ~microsoft.fabric.api.eventstream.models.Schema
        """
        super().__init__(**kwargs)
        self.name = name
        self.schema = schema


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class JoinOn(_serialization.Model):
    """Represents a join condition.

    All required parameters must be populated in order to send to server.

    :ivar left: Represents a reference to a column. Required.
    :vartype left: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    :ivar right: Represents a reference to a column. Required.
    :vartype right: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    """

    _validation = {
        "left": {"required": True},
        "right": {"required": True},
    }

    _attribute_map = {
        "left": {"key": "left", "type": "ColumnReferenceExpression"},
        "right": {"key": "right", "type": "ColumnReferenceExpression"},
    }

    def __init__(
        self, *, left: "_models.ColumnReferenceExpression", right: "_models.ColumnReferenceExpression", **kwargs: Any
    ) -> None:
        """
        :keyword left: Represents a reference to a column. Required.
        :paramtype left: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        :keyword right: Represents a reference to a column. Required.
        :paramtype right: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        """
        super().__init__(**kwargs)
        self.left = left
        self.right = right


class JoinOperator(Operator):
    """Join operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar properties: Join operator properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.JoinOperatorProperties
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "properties": {"key": "properties", "type": "JoinOperatorProperties"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.JoinOperatorProperties",
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Join operator properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.JoinOperatorProperties
        """
        super().__init__(name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs)
        self.type: str = "Join"
        self.properties = properties


class JoinOperatorProperties(_serialization.Model):
    """Join operator properties.

    All required parameters must be populated in order to send to server.

    :ivar join_type: The type of the join. Required. Known values are: "Inner" and "LeftOuter".
    :vartype join_type: str or
     ~microsoft.fabric.api.eventstream.models.JoinOperatorPropertiesJoinType
    :ivar join_on: A list of the join conditions.
    :vartype join_on: list[~microsoft.fabric.api.eventstream.models.JoinOn]
    :ivar duration: Represents the duration. Required.
    :vartype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    """

    _validation = {
        "join_type": {"required": True},
        "duration": {"required": True},
    }

    _attribute_map = {
        "join_type": {"key": "joinType", "type": "str"},
        "join_on": {"key": "joinOn", "type": "[JoinOn]"},
        "duration": {"key": "duration", "type": "OperatorCommonDuration"},
    }

    def __init__(
        self,
        *,
        join_type: Union[str, "_models.JoinOperatorPropertiesJoinType"],
        duration: "_models.OperatorCommonDuration",
        join_on: Optional[List["_models.JoinOn"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword join_type: The type of the join. Required. Known values are: "Inner" and "LeftOuter".
        :paramtype join_type: str or
         ~microsoft.fabric.api.eventstream.models.JoinOperatorPropertiesJoinType
        :keyword join_on: A list of the join conditions.
        :paramtype join_on: list[~microsoft.fabric.api.eventstream.models.JoinOn]
        :keyword duration: Represents the duration. Required.
        :paramtype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        """
        super().__init__(**kwargs)
        self.join_type = join_type
        self.join_on = join_on
        self.duration = duration


class JsonSerializationInfo(SerializationInfo):
    """JSON serialization information.

    All required parameters must be populated in order to send to server.

    :ivar type: The serialization type. Required. Known values are: "Avro", "Json", and "Csv".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SerializationType
    :ivar properties: JSON serialization properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.JsonSerializationProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "JsonSerializationProperties"},
    }

    def __init__(self, *, properties: "_models.JsonSerializationProperties", **kwargs: Any) -> None:
        """
        :keyword properties: JSON serialization properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.JsonSerializationProperties
        """
        super().__init__(**kwargs)
        self.type: str = "Json"
        self.properties = properties


class JsonSerializationProperties(_serialization.Model):
    """JSON serialization properties.

    :ivar encoding: The encoding type. "UTF8"
    :vartype encoding: str or
     ~microsoft.fabric.api.eventstream.models.JsonSerializationPropertiesEncoding
    """

    _attribute_map = {
        "encoding": {"key": "encoding", "type": "str"},
    }

    def __init__(
        self, *, encoding: Optional[Union[str, "_models.JsonSerializationPropertiesEncoding"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword encoding: The encoding type. "UTF8"
        :paramtype encoding: str or
         ~microsoft.fabric.api.eventstream.models.JsonSerializationPropertiesEncoding
        """
        super().__init__(**kwargs)
        self.encoding = encoding


class LakehouseDestinationProperties(_serialization.Model):
    """Lakehouse destination properties.

    All required parameters must be populated in order to send to server.

    :ivar workspace_id: The Lakehouse workspace identifier. Required.
    :vartype workspace_id: str
    :ivar item_id: The Lakehouse item identifier. Required.
    :vartype item_id: str
    :ivar schema: The schema name.
    :vartype schema: str
    :ivar delta_table: The delta table name. Required.
    :vartype delta_table: str
    :ivar minimum_rows: The minimum number of rows for an output batch. Default is 100000.
    :vartype minimum_rows: int
    :ivar maximum_duration_in_seconds: The maximum duration in seconds for an output batch. Default
     is 120.
    :vartype maximum_duration_in_seconds: int
    :ivar input_serialization: Serialization information.
    :vartype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
    """

    _validation = {
        "workspace_id": {"required": True},
        "item_id": {"required": True},
        "delta_table": {"required": True},
    }

    _attribute_map = {
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "schema": {"key": "schema", "type": "str"},
        "delta_table": {"key": "deltaTable", "type": "str"},
        "minimum_rows": {"key": "minimumRows", "type": "int"},
        "maximum_duration_in_seconds": {"key": "maximumDurationInSeconds", "type": "int"},
        "input_serialization": {"key": "inputSerialization", "type": "SerializationInfo"},
    }

    def __init__(
        self,
        *,
        workspace_id: str,
        item_id: str,
        delta_table: str,
        schema: Optional[str] = None,
        minimum_rows: int = 100000,
        maximum_duration_in_seconds: int = 120,
        input_serialization: Optional["_models.SerializationInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workspace_id: The Lakehouse workspace identifier. Required.
        :paramtype workspace_id: str
        :keyword item_id: The Lakehouse item identifier. Required.
        :paramtype item_id: str
        :keyword schema: The schema name.
        :paramtype schema: str
        :keyword delta_table: The delta table name. Required.
        :paramtype delta_table: str
        :keyword minimum_rows: The minimum number of rows for an output batch. Default is 100000.
        :paramtype minimum_rows: int
        :keyword maximum_duration_in_seconds: The maximum duration in seconds for an output batch.
         Default is 120.
        :paramtype maximum_duration_in_seconds: int
        :keyword input_serialization: Serialization information.
        :paramtype input_serialization: ~microsoft.fabric.api.eventstream.models.SerializationInfo
        """
        super().__init__(**kwargs)
        self.workspace_id = workspace_id
        self.item_id = item_id
        self.schema = schema
        self.delta_table = delta_table
        self.minimum_rows = minimum_rows
        self.maximum_duration_in_seconds = maximum_duration_in_seconds
        self.input_serialization = input_serialization


class LakehouseDestinationResponse(DestinationResponse):
    """Lakehouse destination response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the destination.
    :vartype id: str
    :ivar name: The unique name of the destination. Required.
    :vartype name: str
    :ivar input_nodes: A list of the references to the input nodes of the destination. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the destination.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the destination. Required. Known values are: "Activator",
     "CustomEndpoint", "Eventhouse", and "Lakehouse".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.DestinationType
    :ivar properties: The properties of the Lakehouse destination. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.LakehouseDestinationProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "input_nodes": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "LakehouseDestinationProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.LakehouseDestinationProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the destination.
        :paramtype id: str
        :keyword name: The unique name of the destination. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the destination. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the destination.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the Lakehouse destination. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.LakehouseDestinationProperties
        """
        super().__init__(
            status=status, error=error, id=id, name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs
        )
        self.type: str = "Lakehouse"
        self.properties = properties


class LiteralExpression(_serialization.Model):
    """Represents a literal expression.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the literal expression. Required. Known values are: "BigInt",
     "Float", "Nvarchar(max)", "DateTime", "Bit", "Record", "Array", and "Any".
    :vartype data_type: str or ~microsoft.fabric.api.eventstream.models.DataType
    :ivar value: The value of the literal expression. Required.
    :vartype value: str
    """

    _validation = {
        "data_type": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, data_type: Union[str, "_models.DataType"], value: str, **kwargs: Any) -> None:
        """
        :keyword data_type: The data type of the literal expression. Required. Known values are:
         "BigInt", "Float", "Nvarchar(max)", "DateTime", "Bit", "Record", "Array", and "Any".
        :paramtype data_type: str or ~microsoft.fabric.api.eventstream.models.DataType
        :keyword value: The value of the literal expression. Required.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.data_type = data_type
        self.value = value


class ManageFieldsOperation(_serialization.Model):
    """Represents an operation on a column.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ManageFieldsCastOperation, ManageFieldsFunctionCallOperation, ManageFieldsRenameOperation

    All required parameters must be populated in order to send to server.

    :ivar type: The operation type. Required. Known values are: "FunctionCall", "Cast", and
     "Rename".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.Type
    :ivar alias: The alias of the operation.
    :vartype alias: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "alias": {"key": "alias", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Cast": "ManageFieldsCastOperation",
            "FunctionCall": "ManageFieldsFunctionCallOperation",
            "Rename": "ManageFieldsRenameOperation",
        }
    }

    def __init__(self, *, alias: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword alias: The alias of the operation.
        :paramtype alias: str
        """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.alias = alias


class ManageFieldsCastOperation(ManageFieldsOperation):
    """Represents a manage fields cast operation.

    All required parameters must be populated in order to send to server.

    :ivar type: The operation type. Required. Known values are: "FunctionCall", "Cast", and
     "Rename".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.Type
    :ivar alias: The alias of the operation.
    :vartype alias: str
    :ivar properties: The properties for a manage fields cast operation. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.CastProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "alias": {"key": "alias", "type": "str"},
        "properties": {"key": "properties", "type": "CastProperties"},
    }

    def __init__(self, *, properties: "_models.CastProperties", alias: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword alias: The alias of the operation.
        :paramtype alias: str
        :keyword properties: The properties for a manage fields cast operation. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.CastProperties
        """
        super().__init__(alias=alias, **kwargs)
        self.type: str = "Cast"
        self.properties = properties


class ManageFieldsFunctionCallOperation(ManageFieldsOperation):
    """Represents a manage fields function call operation.

    All required parameters must be populated in order to send to server.

    :ivar type: The operation type. Required. Known values are: "FunctionCall", "Cast", and
     "Rename".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.Type
    :ivar alias: The alias of the operation.
    :vartype alias: str
    :ivar properties: The properties for a manage fields function call operation. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.FunctionCallProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "alias": {"key": "alias", "type": "str"},
        "properties": {"key": "properties", "type": "FunctionCallProperties"},
    }

    def __init__(
        self, *, properties: "_models.FunctionCallProperties", alias: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword alias: The alias of the operation.
        :paramtype alias: str
        :keyword properties: The properties for a manage fields function call operation. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.FunctionCallProperties
        """
        super().__init__(alias=alias, **kwargs)
        self.type: str = "FunctionCall"
        self.properties = properties


class ManageFieldsOperator(Operator):
    """ManageFields operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar properties: ManageFields operator properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.ManageFieldsOperatorProperties
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "properties": {"key": "properties", "type": "ManageFieldsOperatorProperties"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: "_models.ManageFieldsOperatorProperties",
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: ManageFields operator properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.ManageFieldsOperatorProperties
        """
        super().__init__(name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs)
        self.type: str = "ManageFields"
        self.properties = properties


class ManageFieldsOperatorProperties(_serialization.Model):
    """ManageFields operator properties.

    All required parameters must be populated in order to send to server.

    :ivar columns: A list of the columns to manage. Required.
    :vartype columns: list[~microsoft.fabric.api.eventstream.models.ManageFieldsOperation]
    """

    _validation = {
        "columns": {"required": True},
    }

    _attribute_map = {
        "columns": {"key": "columns", "type": "[ManageFieldsOperation]"},
    }

    def __init__(self, *, columns: List["_models.ManageFieldsOperation"], **kwargs: Any) -> None:
        """
        :keyword columns: A list of the columns to manage. Required.
        :paramtype columns: list[~microsoft.fabric.api.eventstream.models.ManageFieldsOperation]
        """
        super().__init__(**kwargs)
        self.columns = columns


class ManageFieldsRenameOperation(ManageFieldsOperation):
    """Represents a manage fields rename operation.

    All required parameters must be populated in order to send to server.

    :ivar type: The operation type. Required. Known values are: "FunctionCall", "Cast", and
     "Rename".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.Type
    :ivar alias: The alias of the operation.
    :vartype alias: str
    :ivar properties: The properties for a manage fields rename operation. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.RenameProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "alias": {"key": "alias", "type": "str"},
        "properties": {"key": "properties", "type": "RenameProperties"},
    }

    def __init__(self, *, properties: "_models.RenameProperties", alias: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword alias: The alias of the operation.
        :paramtype alias: str
        :keyword properties: The properties for a manage fields rename operation. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.RenameProperties
        """
        super().__init__(alias=alias, **kwargs)
        self.type: str = "Rename"
        self.properties = properties


class MySQLCDCSourceResponse(SourceResponse):
    """MySQL CDC source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: Anything. Required.
    :vartype properties: any
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: Any,
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Anything. Required.
        :paramtype properties: any
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "MySQLCDC"
        self.properties = properties


class NodeReference(_serialization.Model):
    """Represents a reference to a node using its unique name.

    All required parameters must be populated in order to send to server.

    :ivar name: The unique name of the node. Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: The unique name of the node. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class OperatorCommonDuration(_serialization.Model):
    """Represents the duration.

    All required parameters must be populated in order to send to server.

    :ivar value: The value of the duration. Required.
    :vartype value: int
    :ivar unit: The unit of the duration. Required. Known values are: "Microsecond", "Millisecond",
     "Second", "Minute", "Hour", "Day", "Weekday", "Week", "DayOfYear", "Month", "Quarter", and
     "Year".
    :vartype unit: str or ~microsoft.fabric.api.eventstream.models.OperatorCommonDurationUnit
    """

    _validation = {
        "value": {"required": True},
        "unit": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "int"},
        "unit": {"key": "unit", "type": "str"},
    }

    def __init__(self, *, value: int, unit: Union[str, "_models.OperatorCommonDurationUnit"], **kwargs: Any) -> None:
        """
        :keyword value: The value of the duration. Required.
        :paramtype value: int
        :keyword unit: The unit of the duration. Required. Known values are: "Microsecond",
         "Millisecond", "Second", "Minute", "Hour", "Day", "Weekday", "Week", "DayOfYear", "Month",
         "Quarter", and "Year".
        :paramtype unit: str or ~microsoft.fabric.api.eventstream.models.OperatorCommonDurationUnit
        """
        super().__init__(**kwargs)
        self.value = value
        self.unit = unit


class PostgreSQLCDCSourceProperties(BaseSQLCDCSourceProperties):
    """PostgreSQL CDC source properties.

    All required parameters must be populated in order to send to server.

    :ivar data_connection_id: The SQL CDC data connection identifier. Required.
    :vartype data_connection_id: str
    :ivar table_name: The table name. Required.
    :vartype table_name: str
    :ivar slot_name: The slot name for the CDC connector. Required.
    :vartype slot_name: str
    :ivar port: The port number. Default is 5432.
    :vartype port: int
    """

    _validation = {
        "data_connection_id": {"required": True},
        "table_name": {"required": True},
        "slot_name": {"required": True},
    }

    _attribute_map = {
        "data_connection_id": {"key": "dataConnectionId", "type": "str"},
        "table_name": {"key": "tableName", "type": "str"},
        "slot_name": {"key": "slotName", "type": "str"},
        "port": {"key": "port", "type": "int"},
    }

    def __init__(
        self, *, data_connection_id: str, table_name: str, slot_name: str, port: int = 5432, **kwargs: Any
    ) -> None:
        """
        :keyword data_connection_id: The SQL CDC data connection identifier. Required.
        :paramtype data_connection_id: str
        :keyword table_name: The table name. Required.
        :paramtype table_name: str
        :keyword slot_name: The slot name for the CDC connector. Required.
        :paramtype slot_name: str
        :keyword port: The port number. Default is 5432.
        :paramtype port: int
        """
        super().__init__(data_connection_id=data_connection_id, table_name=table_name, **kwargs)
        self.slot_name = slot_name
        self.port = port


class PostgreSQLCDCSourceResponse(SourceResponse):
    """PostgreSQL CDC source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the PostgreSQL CDC source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.PostgreSQLCDCSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "PostgreSQLCDCSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.PostgreSQLCDCSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the PostgreSQL CDC source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.PostgreSQLCDCSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "PostgreSQLCDC"
        self.properties = properties


class RenameProperties(_serialization.Model):
    """Properties for a rename operation.

    All required parameters must be populated in order to send to server.

    :ivar column: Represents a reference to a column. Required.
    :vartype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    """

    _validation = {
        "column": {"required": True},
    }

    _attribute_map = {
        "column": {"key": "column", "type": "ColumnReferenceExpression"},
    }

    def __init__(self, *, column: "_models.ColumnReferenceExpression", **kwargs: Any) -> None:
        """
        :keyword column: Represents a reference to a column. Required.
        :paramtype column: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        """
        super().__init__(**kwargs)
        self.column = column


class SampleDataSourceProperties(_serialization.Model):
    """Sample data source properties.

    All required parameters must be populated in order to send to server.

    :ivar type: The sample data type. Required. Known values are: "YellowTaxi", "StockMarket", and
     "Bicycles".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SampleDataSourcePropertiesType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: Union[str, "_models.SampleDataSourcePropertiesType"], **kwargs: Any) -> None:
        """
        :keyword type: The sample data type. Required. Known values are: "YellowTaxi", "StockMarket",
         and "Bicycles".
        :paramtype type: str or ~microsoft.fabric.api.eventstream.models.SampleDataSourcePropertiesType
        """
        super().__init__(**kwargs)
        self.type = type


class SampleDataSourceResponse(SourceResponse):
    """Sample data events source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: The properties of the sample data events source. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.SampleDataSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "SampleDataSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.SampleDataSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: The properties of the sample data events source. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.SampleDataSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "SampleData"
        self.properties = properties


class Schema(_serialization.Model):
    """Represents the schema of the data.

    All required parameters must be populated in order to send to server.

    :ivar columns: A list of the columns in the schema. Required.
    :vartype columns: list[~microsoft.fabric.api.eventstream.models.ColumnSchema]
    """

    _validation = {
        "columns": {"required": True},
    }

    _attribute_map = {
        "columns": {"key": "columns", "type": "[ColumnSchema]"},
    }

    def __init__(self, *, columns: List["_models.ColumnSchema"], **kwargs: Any) -> None:
        """
        :keyword columns: A list of the columns in the schema. Required.
        :paramtype columns: list[~microsoft.fabric.api.eventstream.models.ColumnSchema]
        """
        super().__init__(**kwargs)
        self.columns = columns


class SessionWindow(GroupByWindow):
    """SessionWindow.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the window. Required. Known values are: "Tumbling", "Hopping",
     "Sliding", "Snapshot", and "Session".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.GroupByWindowType
    :ivar properties: The properties for a session window. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.SessionWindowProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "SessionWindowProperties"},
    }

    def __init__(self, *, properties: "_models.SessionWindowProperties", **kwargs: Any) -> None:
        """
        :keyword properties: The properties for a session window. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.SessionWindowProperties
        """
        super().__init__(**kwargs)
        self.type: str = "Session"
        self.properties = properties


class SessionWindowProperties(_serialization.Model):
    """Properties for a session window.

    All required parameters must be populated in order to send to server.

    :ivar max_duration: Represents the duration. Required.
    :vartype max_duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    :ivar timeout: Represents the duration. Required.
    :vartype timeout: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    :ivar partition_by: Represents a reference to a column.
    :vartype partition_by: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
    """

    _validation = {
        "max_duration": {"required": True},
        "timeout": {"required": True},
    }

    _attribute_map = {
        "max_duration": {"key": "maxDuration", "type": "OperatorCommonDuration"},
        "timeout": {"key": "timeout", "type": "OperatorCommonDuration"},
        "partition_by": {"key": "partitionBy", "type": "ColumnReferenceExpression"},
    }

    def __init__(
        self,
        *,
        max_duration: "_models.OperatorCommonDuration",
        timeout: "_models.OperatorCommonDuration",
        partition_by: Optional["_models.ColumnReferenceExpression"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword max_duration: Represents the duration. Required.
        :paramtype max_duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        :keyword timeout: Represents the duration. Required.
        :paramtype timeout: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        :keyword partition_by: Represents a reference to a column.
        :paramtype partition_by: ~microsoft.fabric.api.eventstream.models.ColumnReferenceExpression
        """
        super().__init__(**kwargs)
        self.max_duration = max_duration
        self.timeout = timeout
        self.partition_by = partition_by


class SlidingWindow(GroupByWindow):
    """SlidingWindow.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the window. Required. Known values are: "Tumbling", "Hopping",
     "Sliding", "Snapshot", and "Session".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.GroupByWindowType
    :ivar properties: The properties for a sliding window. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.SlidingWindowProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "SlidingWindowProperties"},
    }

    def __init__(self, *, properties: "_models.SlidingWindowProperties", **kwargs: Any) -> None:
        """
        :keyword properties: The properties for a sliding window. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.SlidingWindowProperties
        """
        super().__init__(**kwargs)
        self.type: str = "Sliding"
        self.properties = properties


class SlidingWindowProperties(_serialization.Model):
    """Properties for a sliding window.

    All required parameters must be populated in order to send to server.

    :ivar duration: Represents the duration. Required.
    :vartype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    """

    _validation = {
        "duration": {"required": True},
    }

    _attribute_map = {
        "duration": {"key": "duration", "type": "OperatorCommonDuration"},
    }

    def __init__(self, *, duration: "_models.OperatorCommonDuration", **kwargs: Any) -> None:
        """
        :keyword duration: Represents the duration. Required.
        :paramtype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        """
        super().__init__(**kwargs)
        self.duration = duration


class SnapshotWindow(GroupByWindow):
    """SnapshotWindow.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the window. Required. Known values are: "Tumbling", "Hopping",
     "Sliding", "Snapshot", and "Session".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.GroupByWindowType
    :ivar properties: The properties for a snapshot window. Required.
    :vartype properties: JSON
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(self, *, properties: JSON, **kwargs: Any) -> None:
        """
        :keyword properties: The properties for a snapshot window. Required.
        :paramtype properties: JSON
        """
        super().__init__(**kwargs)
        self.type: str = "Snapshot"
        self.properties = properties


class SourceConnectionResponse(BaseCustomEndpointConnection):
    """Represents the connection information for a source custom endpoint.

    All required parameters must be populated in order to send to server.

    :ivar fully_qualified_namespace: The fully qualified namespace of the EventHub. Required.
    :vartype fully_qualified_namespace: str
    :ivar event_hub_name: The name of the EventHub. Required.
    :vartype event_hub_name: str
    :ivar access_keys: The access keys.
    :vartype access_keys: ~microsoft.fabric.api.eventstream.models.AccessKeys
    """


class SQLServerOnVmdbcdcSourceResponse(SourceResponse):
    """Azure SQL Server on VM DB CDC source response.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the node. Additional node status may be added over time. Required.
     Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused", "Failed",
     "Warning", "Deleting", "Pausing", "Resuming", and "External".
    :vartype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
    :ivar error: The error information.
    :vartype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
    :ivar id: The unique identifier of the source.
    :vartype id: str
    :ivar name: The unique name of the source. Required.
    :vartype name: str
    :ivar input_schemas: The input schemas of the source.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar type: The type of the source. Required. Known values are: "AmazonKinesis",
     "AmazonMSKKafka", "ApacheKafka", "AzureBlobStorageEvents", "AzureCosmosDBCDC", "AzureEventHub",
     "AzureIoTHub", "AzureSQLDBCDC", "AzureSQLMIDBCDC", "ConfluentCloud", "CustomEndpoint",
     "FabricCapacityUtilizationEvents", "FabricJobEvents", "FabricOneLakeEvents",
     "FabricWorkspaceItemEvents", "GooglePubSub", "MySQLCDC", "PostgreSQLCDC", "SQLServerOnVMDBCDC",
     and "SampleData".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.SourceType
    :ivar properties: Base SQL CDC source properties. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.BaseSQLCDCSourceProperties
    """

    _validation = {
        "status": {"required": True},
        "name": {"required": True},
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorInfo"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "BaseSQLCDCSourceProperties"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.NodeStatus"],
        name: str,
        properties: "_models.BaseSQLCDCSourceProperties",
        error: Optional["_models.ErrorInfo"] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the node. Additional node status may be added over time.
         Required. Known values are: "Unknown", "Creating", "Created", "Updating", "Running", "Paused",
         "Failed", "Warning", "Deleting", "Pausing", "Resuming", and "External".
        :paramtype status: str or ~microsoft.fabric.api.eventstream.models.NodeStatus
        :keyword error: The error information.
        :paramtype error: ~microsoft.fabric.api.eventstream.models.ErrorInfo
        :keyword id: The unique identifier of the source.
        :paramtype id: str
        :keyword name: The unique name of the source. Required.
        :paramtype name: str
        :keyword input_schemas: The input schemas of the source.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Base SQL CDC source properties. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.BaseSQLCDCSourceProperties
        """
        super().__init__(status=status, error=error, id=id, name=name, input_schemas=input_schemas, **kwargs)
        self.type: str = "SQLServerOnVMDBCDC"
        self.properties = properties


class TumblingWindow(GroupByWindow):
    """TumblingWindow.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the window. Required. Known values are: "Tumbling", "Hopping",
     "Sliding", "Snapshot", and "Session".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.GroupByWindowType
    :ivar properties: The properties for a tumbling window. Required.
    :vartype properties: ~microsoft.fabric.api.eventstream.models.TumblingWindowProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "TumblingWindowProperties"},
    }

    def __init__(self, *, properties: "_models.TumblingWindowProperties", **kwargs: Any) -> None:
        """
        :keyword properties: The properties for a tumbling window. Required.
        :paramtype properties: ~microsoft.fabric.api.eventstream.models.TumblingWindowProperties
        """
        super().__init__(**kwargs)
        self.type: str = "Tumbling"
        self.properties = properties


class TumblingWindowProperties(_serialization.Model):
    """Properties for a tumbling window.

    All required parameters must be populated in order to send to server.

    :ivar duration: Represents the duration. Required.
    :vartype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    :ivar offset: Represents the duration.
    :vartype offset: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
    """

    _validation = {
        "duration": {"required": True},
    }

    _attribute_map = {
        "duration": {"key": "duration", "type": "OperatorCommonDuration"},
        "offset": {"key": "offset", "type": "OperatorCommonDuration"},
    }

    def __init__(
        self,
        *,
        duration: "_models.OperatorCommonDuration",
        offset: Optional["_models.OperatorCommonDuration"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword duration: Represents the duration. Required.
        :paramtype duration: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        :keyword offset: Represents the duration.
        :paramtype offset: ~microsoft.fabric.api.eventstream.models.OperatorCommonDuration
        """
        super().__init__(**kwargs)
        self.duration = duration
        self.offset = offset


class UnionOperator(Operator):
    """Union operator.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the operator. Required.
    :vartype name: str
    :ivar type: The type of the operator. Additional operator types may be added over time.
     Required. Known values are: "Filter", "Join", "ManageFields", "Aggregate", "GroupBy", "Union",
     and "Expand".
    :vartype type: str or ~microsoft.fabric.api.eventstream.models.OperatorType
    :ivar input_nodes: A list of the references to the input nodes of the operator. Required.
    :vartype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
    :ivar input_schemas: The input schemas of the operator.
    :vartype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
    :ivar properties: Union operator properties. Required.
    :vartype properties: JSON
    """

    _validation = {
        "name": {"required": True},
        "type": {"required": True},
        "input_nodes": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "input_nodes": {"key": "inputNodes", "type": "[NodeReference]"},
        "input_schemas": {"key": "inputSchemas", "type": "[InputSchema]"},
        "properties": {"key": "properties", "type": "object"},
    }

    def __init__(
        self,
        *,
        name: str,
        input_nodes: List["_models.NodeReference"],
        properties: JSON,
        input_schemas: Optional[List["_models.InputSchema"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the operator. Required.
        :paramtype name: str
        :keyword input_nodes: A list of the references to the input nodes of the operator. Required.
        :paramtype input_nodes: list[~microsoft.fabric.api.eventstream.models.NodeReference]
        :keyword input_schemas: The input schemas of the operator.
        :paramtype input_schemas: list[~microsoft.fabric.api.eventstream.models.InputSchema]
        :keyword properties: Union operator properties. Required.
        :paramtype properties: JSON
        """
        super().__init__(name=name, input_nodes=input_nodes, input_schemas=input_schemas, **kwargs)
        self.type: str = "Union"
        self.properties = properties


class UpdateEventstreamDefinitionRequest(_serialization.Model):
    """Update eventstream public definition request payload.

    All required parameters must be populated in order to send to server.

    :ivar definition: Eventstream public definition object. Required.
    :vartype definition: ~microsoft.fabric.api.eventstream.models.EventstreamDefinition
    """

    _validation = {
        "definition": {"required": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "EventstreamDefinition"},
    }

    def __init__(self, *, definition: "_models.EventstreamDefinition", **kwargs: Any) -> None:
        """
        :keyword definition: Eventstream public definition object. Required.
        :paramtype definition: ~microsoft.fabric.api.eventstream.models.EventstreamDefinition
        """
        super().__init__(**kwargs)
        self.definition = definition


class UpdateEventstreamRequest(_serialization.Model):
    """Update eventstream request.

    :ivar display_name: The eventstream display name. The display name must follow naming rules
     according to item type.
    :vartype display_name: str
    :ivar description: The eventstream description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The eventstream display name. The display name must follow naming rules
         according to item type.
        :paramtype display_name: str
        :keyword description: The eventstream description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
