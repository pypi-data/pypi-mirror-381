# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class DayOfWeek(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Days of the week."""

    MONDAY = "Monday"
    """Monday"""
    TUESDAY = "Tuesday"
    """Tuesday"""
    WEDNESDAY = "Wednesday"
    """Wednesday"""
    THURSDAY = "Thursday"
    """Thursday"""
    FRIDAY = "Friday"
    """Friday"""
    SATURDAY = "Saturday"
    """Saturday"""
    SUNDAY = "Sunday"
    """Sunday"""


class ExecuteOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Options to run the execute operation. Additional executeOptions may be added over time."""

    SKIP_APPLY_CHANGES = "SkipApplyChanges"
    """Default Value. Apply Changes operation is skipped."""
    APPLY_CHANGES_IF_NEEDED = "ApplyChangesIfNeeded"
    """Appply Changes operation is done if needed. Can be used when the latest changes are required
    for Execute."""


class GroupType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the group. Additional group types may be added over time."""

    UNKNOWN = "Unknown"
    """Principal group type is unknown."""
    SECURITY_GROUP = "SecurityGroup"
    """Principal is a security group."""
    DISTRIBUTION_LIST = "DistributionList"
    """Principal is a distribution list."""


class ItemType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the item. Additional item types may be added over time."""

    DASHBOARD = "Dashboard"
    """PowerBI dashboard."""
    REPORT = "Report"
    """PowerBI report."""
    SEMANTIC_MODEL = "SemanticModel"
    """PowerBI semantic model."""
    PAGINATED_REPORT = "PaginatedReport"
    """PowerBI paginated report."""
    DATAMART = "Datamart"
    """PowerBI datamart."""
    LAKEHOUSE = "Lakehouse"
    """A lakehouse."""
    EVENTHOUSE = "Eventhouse"
    """An eventhouse."""
    ENVIRONMENT = "Environment"
    """An environment."""
    KQL_DATABASE = "KQLDatabase"
    """A KQL database."""
    KQL_QUERYSET = "KQLQueryset"
    """A KQL queryset."""
    KQL_DASHBOARD = "KQLDashboard"
    """A KQL dashboard."""
    DATA_PIPELINE = "DataPipeline"
    """A data pipeline."""
    NOTEBOOK = "Notebook"
    """A notebook."""
    SPARK_JOB_DEFINITION = "SparkJobDefinition"
    """A spark job definition."""
    ML_EXPERIMENT = "MLExperiment"
    """A machine learning experiment."""
    ML_MODEL = "MLModel"
    """A machine learning model."""
    WAREHOUSE = "Warehouse"
    """A warehouse."""
    EVENTSTREAM = "Eventstream"
    """An eventstream."""
    SQL_ENDPOINT = "SQLEndpoint"
    """An SQL endpoint."""
    MIRRORED_WAREHOUSE = "MirroredWarehouse"
    """A mirrored warehouse."""
    MIRRORED_DATABASE = "MirroredDatabase"
    """A mirrored database."""
    REFLEX = "Reflex"
    """A Reflex."""
    GRAPH_QL_API = "GraphQLApi"
    """An API for GraphQL item."""
    MOUNTED_DATA_FACTORY = "MountedDataFactory"
    """A MountedDataFactory."""
    APACHE_AIRFLOW_JOB = "ApacheAirflowJob"
    """An ApacheAirflowJob."""
    SQL_DATABASE = "SQLDatabase"
    """A SQLDatabase."""
    COPY_JOB = "CopyJob"
    """A Copy job."""
    VARIABLE_LIBRARY = "VariableLibrary"
    """A VariableLibrary."""
    MIRRORED_AZURE_DATABRICKS_CATALOG = "MirroredAzureDatabricksCatalog"
    """A mirrored azure databricks catalog."""
    DATAFLOW = "Dataflow"
    """A Dataflow."""
    WAREHOUSE_SNAPSHOT = "WarehouseSnapshot"
    """A Warehouse snapshot."""
    DIGITAL_TWIN_BUILDER = "DigitalTwinBuilder"
    """A DigitalTwinBuilder."""
    DIGITAL_TWIN_BUILDER_FLOW = "DigitalTwinBuilderFlow"
    """A Digital Twin Builder Flow."""
    ANOMALY_DETECTOR = "AnomalyDetector"
    """An Anomaly Detector."""
    MAP = "Map"
    """A Map."""
    USER_DATA_FUNCTION = "UserDataFunction"
    """A User Data Function."""


class OccurrenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """An enumerator that lists the day for triggering jobs. Additional types may be added over time."""

    DAY_OF_MONTH = "DayOfMonth"
    """A date."""
    ORDINAL_WEEKDAY = "OrdinalWeekday"
    """A day."""


class ParameterType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the parameter. Additional type types may be added over time."""

    STRING = "String"
    """The parameter value is of type string."""
    BOOLEAN = "Boolean"
    """The parameter value is of type boolean."""
    INTEGER = "Integer"
    """The parameter value is of type long."""
    NUMBER = "Number"
    """The parameter value is of type double."""
    DATE_TIME = "DateTime"
    """The parameter value is of type DateTime. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ
    format."""
    DATE_TIME_ZONE = "DateTimeZone"
    """The parameter value is of type DateTimeZone. String in the format ``yyyy-MM-ddTHH:mm:sszzz``."""
    DATE = "Date"
    """The parameter value is of type Date. String in the format ``yyyy-MM-dd``."""
    TIME = "Time"
    """The parameter value is of type Time. String in the format ``HH:mm:ss``."""
    DURATION = "Duration"
    """The parameter value is of type Duration. String in the format ``\\Pd\\DTH\\Hm\\Ms\\S``."""


class PayloadType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the definition part payload. Additional payload types may be added over time."""

    INLINE_BASE64 = "InlineBase64"
    """Inline Base 64."""


class PrincipalType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the principal. Additional principal types may be added over time."""

    USER = "User"
    """Principal is a Microsoft Entra user principal."""
    SERVICE_PRINCIPAL = "ServicePrincipal"
    """Principal is a Microsoft Entra service principal."""
    GROUP = "Group"
    """Principal is a security group."""
    SERVICE_PRINCIPAL_PROFILE = "ServicePrincipalProfile"
    """Principal is a service principal profile."""
    ENTIRE_TENANT = "EntireTenant"
    """Principal represents all tenant users."""


class ScheduleType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of schedule configuration. Additional types may be added over time."""

    CRON = "Cron"
    """Triggers a job periodically."""
    DAILY = "Daily"
    """Triggers a job daily."""
    WEEKLY = "Weekly"
    """Triggers a job weekly."""
    MONTHLY = "Monthly"
    """Triggers a job monthly."""


class Type(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The parameter type. Additional parameter types may be added over time."""

    AUTOMATIC = "Automatic"
    """Value must be Automatic"""


class WeekIndex(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The week of the month."""

    FIRST = "First"
    """First."""
    SECOND = "Second"
    """Second."""
    THIRD = "Third"
    """Third."""
    FOURTH = "Fourth"
    """Fourth."""
    FIFTH = "Fifth"
    """Fifth."""
