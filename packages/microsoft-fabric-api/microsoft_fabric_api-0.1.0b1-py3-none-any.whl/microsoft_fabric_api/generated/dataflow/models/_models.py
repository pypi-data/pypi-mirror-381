# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CreateScheduleRequest(_serialization.Model):
    """Create item schedule plan request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.dataflow.models.ScheduleConfig
    """

    _validation = {
        "enabled": {"required": True},
        "configuration": {"required": True},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
    }

    def __init__(self, *, enabled: bool, configuration: "_models.ScheduleConfig", **kwargs: Any) -> None:
        """
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword configuration: The actual data contains the time/weekdays of this schedule. Required.
        :paramtype configuration: ~microsoft.fabric.api.dataflow.models.ScheduleConfig
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class CreateDataflowApplyChangesScheduleRequest(CreateScheduleRequest):  # pylint: disable=name-too-long
    """Create dataflow apply changes schedule plan request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.dataflow.models.ScheduleConfig
    """


class CreateDataflowExecuteScheduleRequest(CreateScheduleRequest):
    """Create dataflow execute schedule plan request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.dataflow.models.ScheduleConfig
    """


class CreateDataflowRequest(_serialization.Model):
    """Create Dataflow request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The Dataflow display name. The display name must follow naming rules
     according to item type. Required.
    :vartype display_name: str
    :ivar description: The Dataflow description. Maximum length is 256 characters.
    :vartype description: str
    :ivar folder_id: The folder ID. If not specified or null, the Dataflow is created with the
     workspace as its folder.
    :vartype folder_id: str
    :ivar definition: The Dataflow public definition.
    :vartype definition: ~microsoft.fabric.api.dataflow.models.DataflowDefinition
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "definition": {"key": "definition", "type": "DataflowDefinition"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        definition: Optional["_models.DataflowDefinition"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The Dataflow display name. The display name must follow naming rules
         according to item type. Required.
        :paramtype display_name: str
        :keyword description: The Dataflow description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword folder_id: The folder ID. If not specified or null, the Dataflow is created with the
         workspace as its folder.
        :paramtype folder_id: str
        :keyword definition: The Dataflow public definition.
        :paramtype definition: ~microsoft.fabric.api.dataflow.models.DataflowDefinition
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.folder_id = folder_id
        self.definition = definition


class ScheduleConfig(_serialization.Model):
    """Item schedule plan detail settings.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CronScheduleConfig, DailyScheduleConfig, MonthlyScheduleConfig, WeeklyScheduleConfig

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Cron": "CronScheduleConfig",
            "Daily": "DailyScheduleConfig",
            "Monthly": "MonthlyScheduleConfig",
            "Weekly": "WeeklyScheduleConfig",
        }
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.local_time_zone_id = local_time_zone_id


class CronScheduleConfig(ScheduleConfig):
    """CronScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar interval: The time interval in minutes. A number between 1 and 5270400 (10 years).
     Required.
    :vartype interval: int
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "interval": {"required": True, "maximum": 5270400, "minimum": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "interval": {"key": "interval", "type": "int"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        interval: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword interval: The time interval in minutes. A number between 1 and 5270400 (10 years).
         Required.
        :paramtype interval: int
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Cron"
        self.interval = interval


class DailyScheduleConfig(ScheduleConfig):
    """DailyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "times": {"key": "times", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        times: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Daily"
        self.times = times


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.dataflow.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.dataflow.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class Dataflow(Item):
    """A Dataflow object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.dataflow.models.ItemTag]
    """


class DataflowParameter(_serialization.Model):
    """Base type for a Dataflow parameter that contains the corresponding properties for all
    parameters.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataflowBooleanParameter, DataflowDateParameter, DataflowDateTimeParameter,
    DataflowDateTimeZoneParameter, DataflowDurationParameter, DataflowIntegerParameter,
    DataflowNumberParameter, DataflowStringParameter, DataflowTimeParameter

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Boolean": "DataflowBooleanParameter",
            "Date": "DataflowDateParameter",
            "DateTime": "DataflowDateTimeParameter",
            "DateTimeZone": "DataflowDateTimeZoneParameter",
            "Duration": "DataflowDurationParameter",
            "Integer": "DataflowIntegerParameter",
            "Number": "DataflowNumberParameter",
            "String": "DataflowStringParameter",
            "Time": "DataflowTimeParameter",
        }
    }

    def __init__(self, *, name: str, description: str, is_required: bool, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        """
        super().__init__(**kwargs)
        self.name = name
        self.description = description
        self.is_required = is_required
        self.type: Optional[str] = None


class DataflowBooleanParameter(DataflowParameter):
    """A Dataflow parameter of type Boolean.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: bool
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "bool"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: bool, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: bool
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "Boolean"
        self.default_value = default_value


class DataflowDateParameter(DataflowParameter):
    """A Dataflow parameter of type Date. String in the format ``yyyy-MM-dd`` (Example: ``2025-09-15``
    for the date Sep 15, 2025). Use "Automatic" type to override this type of parameter when
    executing the dataflow.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: str
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "str"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: str
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "Date"
        self.default_value = default_value


class DataflowDateTimeParameter(DataflowParameter):
    """A Dataflow parameter of type DateTime. String in the format ``yyyy-MM-ddTHH:mm:ss.xxxZ``
    (Example: ``2025-09-15T21:45:00.000Z``\\ ).

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: ~datetime.datetime
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "iso-8601"},
    }

    def __init__(
        self, *, name: str, description: str, is_required: bool, default_value: datetime.datetime, **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: ~datetime.datetime
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "DateTime"
        self.default_value = default_value


class DataflowDateTimeZoneParameter(DataflowParameter):
    """A Dataflow parameter of type DateTimeZone. String in the format ``yyyy-MM-ddTHH:mm:sszzz``
    (Example: ``2025-09-15T21:45:00+02:00``\\ ). Use "Automatic" type to override this type of
    parameter when executing the dataflow.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: str
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "str"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: str
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "DateTimeZone"
        self.default_value = default_value


class DataflowDefinition(_serialization.Model):
    """Dataflow public definition object. Refer to this `article
    </rest/api/fabric/articles/item-management/definitions/dataflow-definition>`_ for more details
    on how to craft a Dataflow public definition.

    All required parameters must be populated in order to send to server.

    :ivar parts: A list of definition parts. Required.
    :vartype parts: list[~microsoft.fabric.api.dataflow.models.DataflowDefinitionPart]
    """

    _validation = {
        "parts": {"required": True},
    }

    _attribute_map = {
        "parts": {"key": "parts", "type": "[DataflowDefinitionPart]"},
    }

    def __init__(self, *, parts: List["_models.DataflowDefinitionPart"], **kwargs: Any) -> None:
        """
        :keyword parts: A list of definition parts. Required.
        :paramtype parts: list[~microsoft.fabric.api.dataflow.models.DataflowDefinitionPart]
        """
        super().__init__(**kwargs)
        self.parts = parts


class DataflowDefinitionPart(_serialization.Model):
    """Dataflow definition part object.

    :ivar path: The Dataflow public definition part path.
    :vartype path: str
    :ivar payload: The Dataflow public definition part payload.
    :vartype payload: str
    :ivar payload_type: The payload type. "InlineBase64"
    :vartype payload_type: str or ~microsoft.fabric.api.dataflow.models.PayloadType
    """

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "payload": {"key": "payload", "type": "str"},
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    def __init__(
        self,
        *,
        path: Optional[str] = None,
        payload: Optional[str] = None,
        payload_type: Optional[Union[str, "_models.PayloadType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: The Dataflow public definition part path.
        :paramtype path: str
        :keyword payload: The Dataflow public definition part payload.
        :paramtype payload: str
        :keyword payload_type: The payload type. "InlineBase64"
        :paramtype payload_type: str or ~microsoft.fabric.api.dataflow.models.PayloadType
        """
        super().__init__(**kwargs)
        self.path = path
        self.payload = payload
        self.payload_type = payload_type


class DataflowDefinitionResponse(_serialization.Model):
    """Dataflow public definition response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar definition: Dataflow public definition object. Refer to this `article
     </rest/api/fabric/articles/item-management/definitions/dataflow-definition>`_ for more details
     on how to craft a Dataflow public definition. Required.
    :vartype definition: ~microsoft.fabric.api.dataflow.models.DataflowDefinition
    """

    _validation = {
        "definition": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "DataflowDefinition"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.definition = None


class DataflowDurationParameter(DataflowParameter):
    """A Dataflow parameter of type Duration. String in the format ``\\Pd\\DTH\\Hm\\Ms\\S`` (Example:
    ``P5DT14H35M30S`` for 5 days, 14 hours, 35 minutes and 30 seconds). Use "Automatic" type to
    override this type of parameter when executing the dataflow.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: str
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "str"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: str
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "Duration"
        self.default_value = default_value


class DataflowExecutionPayload(_serialization.Model):
    """The execution data payload for Dataflow.

    :ivar execute_option: Options to run the execute operation. Additional executeOptions may be
     added over time. Known values are: "SkipApplyChanges" and "ApplyChangesIfNeeded".
    :vartype execute_option: str or ~microsoft.fabric.api.dataflow.models.ExecuteOption
    :ivar parameters: A list of parameters to override during execution.
    :vartype parameters: list[~microsoft.fabric.api.dataflow.models.ItemJobParameter]
    """

    _attribute_map = {
        "execute_option": {"key": "executeOption", "type": "str"},
        "parameters": {"key": "parameters", "type": "[ItemJobParameter]"},
    }

    def __init__(
        self,
        *,
        execute_option: Optional[Union[str, "_models.ExecuteOption"]] = None,
        parameters: Optional[List["_models.ItemJobParameter"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword execute_option: Options to run the execute operation. Additional executeOptions may be
         added over time. Known values are: "SkipApplyChanges" and "ApplyChangesIfNeeded".
        :paramtype execute_option: str or ~microsoft.fabric.api.dataflow.models.ExecuteOption
        :keyword parameters: A list of parameters to override during execution.
        :paramtype parameters: list[~microsoft.fabric.api.dataflow.models.ItemJobParameter]
        """
        super().__init__(**kwargs)
        self.execute_option = execute_option
        self.parameters = parameters


class DataflowIntegerParameter(DataflowParameter):
    """A Dataflow parameter of type Long.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: int
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "int"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: int, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: int
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "Integer"
        self.default_value = default_value


class DataflowNumberParameter(DataflowParameter):
    """A Dataflow parameter of type double.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: float
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "float"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: float, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: float
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "Number"
        self.default_value = default_value


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class DataflowParameters(PaginatedResponse):
    """A list of Dataflow parameters.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of parameters defined in the Dataflow. Required.
    :vartype value: list[~microsoft.fabric.api.dataflow.models.DataflowParameter]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DataflowParameter]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.DataflowParameter"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of parameters defined in the Dataflow. Required.
        :paramtype value: list[~microsoft.fabric.api.dataflow.models.DataflowParameter]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class Dataflows(PaginatedResponse):
    """A list of Dataflows.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of Dataflows. Required.
    :vartype value: list[~microsoft.fabric.api.dataflow.models.Dataflow]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Dataflow]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Dataflow"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of Dataflows. Required.
        :paramtype value: list[~microsoft.fabric.api.dataflow.models.Dataflow]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ItemSchedule(_serialization.Model):
    """Item schedule.

    All required parameters must be populated in order to send to server.

    :ivar id: The schedule ID. Required.
    :vartype id: str
    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar created_date_time: The created time stamp of this schedule in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format.
    :vartype created_date_time: ~datetime.datetime
    :ivar configuration: The actual data contains the time/weekdays of this schedule.
    :vartype configuration: ~microsoft.fabric.api.dataflow.models.ScheduleConfig
    :ivar owner: The user identity that created this schedule or last modified.
    :vartype owner: ~microsoft.fabric.api.dataflow.models.Principal
    """

    _validation = {
        "id": {"required": True},
        "enabled": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
        "owner": {"key": "owner", "type": "Principal"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        enabled: bool,
        created_date_time: Optional[datetime.datetime] = None,
        configuration: Optional["_models.ScheduleConfig"] = None,
        owner: Optional["_models.Principal"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The schedule ID. Required.
        :paramtype id: str
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword created_date_time: The created time stamp of this schedule in UTC, using the
         YYYY-MM-DDTHH:mm:ssZ format.
        :paramtype created_date_time: ~datetime.datetime
        :keyword configuration: The actual data contains the time/weekdays of this schedule.
        :paramtype configuration: ~microsoft.fabric.api.dataflow.models.ScheduleConfig
        :keyword owner: The user identity that created this schedule or last modified.
        :paramtype owner: ~microsoft.fabric.api.dataflow.models.Principal
        """
        super().__init__(**kwargs)
        self.id = id
        self.enabled = enabled
        self.created_date_time = created_date_time
        self.configuration = configuration
        self.owner = owner


class DataflowSchedule(ItemSchedule):
    """Dataflow schedule.

    All required parameters must be populated in order to send to server.

    :ivar id: The schedule ID. Required.
    :vartype id: str
    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar created_date_time: The created time stamp of this schedule in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format.
    :vartype created_date_time: ~datetime.datetime
    :ivar configuration: The actual data contains the time/weekdays of this schedule.
    :vartype configuration: ~microsoft.fabric.api.dataflow.models.ScheduleConfig
    :ivar owner: The user identity that created this schedule or last modified.
    :vartype owner: ~microsoft.fabric.api.dataflow.models.Principal
    """


class DataflowStringParameter(DataflowParameter):
    """A Dataflow parameter of type String.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow . Required.
    :vartype default_value: str
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "str"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow . Required.
        :paramtype default_value: str
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "String"
        self.default_value = default_value


class DataflowTimeParameter(DataflowParameter):
    """A Dataflow parameter of type Time. String in the format ``HH:mm:ss`` (Example: ``21:45:00`` for
    9:45 PM). Use "Automatic" type to override this type of parameter when executing the dataflow.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar description: A description of the parameter. Required.
    :vartype description: str
    :ivar is_required: Indicates whether the parameter is required. Required.
    :vartype is_required: bool
    :ivar type: The type of the parameter. Additional type types may be added over time. Required.
     Known values are: "String", "Boolean", "Integer", "Number", "DateTime", "DateTimeZone", "Date",
     "Time", and "Duration".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ParameterType
    :ivar default_value: The value with which the parameter will be refreshed if none is provided
     when executing the dataflow. Required.
    :vartype default_value: str
    """

    _validation = {
        "name": {"required": True},
        "description": {"required": True},
        "is_required": {"required": True},
        "type": {"required": True},
        "default_value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_required": {"key": "isRequired", "type": "bool"},
        "type": {"key": "type", "type": "str"},
        "default_value": {"key": "defaultValue", "type": "str"},
    }

    def __init__(self, *, name: str, description: str, is_required: bool, default_value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword description: A description of the parameter. Required.
        :paramtype description: str
        :keyword is_required: Indicates whether the parameter is required. Required.
        :paramtype is_required: bool
        :keyword default_value: The value with which the parameter will be refreshed if none is
         provided when executing the dataflow. Required.
        :paramtype default_value: str
        """
        super().__init__(name=name, description=description, is_required=is_required, **kwargs)
        self.type: str = "Time"
        self.default_value = default_value


class MonthlyOccurrence(_serialization.Model):
    """Specifies the day for triggering jobs.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DayOfMonth, OrdinalWeekday

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.dataflow.models.OccurrenceType
    """

    _validation = {
        "occurrence_type": {"required": True},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
    }

    _subtype_map = {"occurrence_type": {"DayOfMonth": "DayOfMonth", "OrdinalWeekday": "OrdinalWeekday"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.occurrence_type: Optional[str] = None


class DayOfMonth(MonthlyOccurrence):
    """Specifies a date to trigger the job. The value must be a valid date. Otherwise, it will be
    skipped.

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.dataflow.models.OccurrenceType
    :ivar day_of_month: Specifies a date to trigger the job, using a value between 1 and 31. For
     example, 2 means the second day of the month. The date must be valid. If an invalid date is
     provided, such as February 31st, it will automatically skip to the month that includes the 31st
     day. Required.
    :vartype day_of_month: int
    """

    _validation = {
        "occurrence_type": {"required": True},
        "day_of_month": {"required": True, "maximum": 31, "minimum": 1},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
        "day_of_month": {"key": "dayOfMonth", "type": "int"},
    }

    def __init__(self, *, day_of_month: int, **kwargs: Any) -> None:
        """
        :keyword day_of_month: Specifies a date to trigger the job, using a value between 1 and 31. For
         example, 2 means the second day of the month. The date must be valid. If an invalid date is
         provided, such as February 31st, it will automatically skip to the month that includes the 31st
         day. Required.
        :paramtype day_of_month: int
        """
        super().__init__(**kwargs)
        self.occurrence_type: str = "DayOfMonth"
        self.day_of_month = day_of_month


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.dataflow.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.dataflow.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.dataflow.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class ItemJobParameter(_serialization.Model):
    """Parameter details.

    All required parameters must be populated in order to send to server.

    :ivar parameter_name: Name of the parameter. Required.
    :vartype parameter_name: str
    :ivar type: The parameter type. Additional parameter types may be added over time. Required.
     "Automatic"
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.Type
    :ivar value: The value of the parameter to override during execution. Required.
    :vartype value: any
    """

    _validation = {
        "parameter_name": {"required": True},
        "type": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "parameter_name": {"key": "parameterName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(self, *, parameter_name: str, type: Union[str, "_models.Type"], value: Any, **kwargs: Any) -> None:
        """
        :keyword parameter_name: Name of the parameter. Required.
        :paramtype parameter_name: str
        :keyword type: The parameter type. Additional parameter types may be added over time. Required.
         "Automatic"
        :paramtype type: str or ~microsoft.fabric.api.dataflow.models.Type
        :keyword value: The value of the parameter to override during execution. Required.
        :paramtype value: any
        """
        super().__init__(**kwargs)
        self.parameter_name = parameter_name
        self.type = type
        self.value = value


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class MonthlyScheduleConfig(ScheduleConfig):
    """MonthlyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar recurrence: Specifies the monthly job repeat interval. For example, when set to 1 the job
     is triggered every month. Required.
    :vartype recurrence: int
    :ivar occurrence: A date for triggering the job. Required.
    :vartype occurrence: ~microsoft.fabric.api.dataflow.models.MonthlyOccurrence
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "recurrence": {"required": True, "maximum": 12, "minimum": 1},
        "occurrence": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "recurrence": {"key": "recurrence", "type": "int"},
        "occurrence": {"key": "occurrence", "type": "MonthlyOccurrence"},
        "times": {"key": "times", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        recurrence: int,
        occurrence: "_models.MonthlyOccurrence",
        times: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword recurrence: Specifies the monthly job repeat interval. For example, when set to 1 the
         job is triggered every month. Required.
        :paramtype recurrence: int
        :keyword occurrence: A date for triggering the job. Required.
        :paramtype occurrence: ~microsoft.fabric.api.dataflow.models.MonthlyOccurrence
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Monthly"
        self.recurrence = recurrence
        self.occurrence = occurrence
        self.times = times


class OrdinalWeekday(MonthlyOccurrence):
    """Specifies the ordinal week and weekday to trigger the job. The value must be a valid date.
    Otherwise, it will be skipped.

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.dataflow.models.OccurrenceType
    :ivar week_index: The week of the month. Required. Known values are: "First", "Second",
     "Third", "Fourth", and "Fifth".
    :vartype week_index: str or ~microsoft.fabric.api.dataflow.models.WeekIndex
    :ivar weekday: Week day for triggering jobs. Required. Known values are: "Monday", "Tuesday",
     "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
    :vartype weekday: str or ~microsoft.fabric.api.dataflow.models.DayOfWeek
    """

    _validation = {
        "occurrence_type": {"required": True},
        "week_index": {"required": True},
        "weekday": {"required": True},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
        "week_index": {"key": "weekIndex", "type": "str"},
        "weekday": {"key": "weekday", "type": "str"},
    }

    def __init__(
        self, *, week_index: Union[str, "_models.WeekIndex"], weekday: Union[str, "_models.DayOfWeek"], **kwargs: Any
    ) -> None:
        """
        :keyword week_index: The week of the month. Required. Known values are: "First", "Second",
         "Third", "Fourth", and "Fifth".
        :paramtype week_index: str or ~microsoft.fabric.api.dataflow.models.WeekIndex
        :keyword weekday: Week day for triggering jobs. Required. Known values are: "Monday",
         "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
        :paramtype weekday: str or ~microsoft.fabric.api.dataflow.models.DayOfWeek
        """
        super().__init__(**kwargs)
        self.occurrence_type: str = "OrdinalWeekday"
        self.week_index = week_index
        self.weekday = weekday


class Principal(_serialization.Model):
    """Represents an identity or a Microsoft Entra group.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The principal's ID. Required.
    :vartype id: str
    :ivar display_name: The principal's display name.
    :vartype display_name: str
    :ivar type: The type of the principal. Additional principal types may be added over time.
     Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
     "EntireTenant".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.PrincipalType
    :ivar user_details: User principal specific details. Applicable when the principal type is
     ``User``.
    :vartype user_details: ~microsoft.fabric.api.dataflow.models.PrincipalUserDetails
    :ivar service_principal_details: Service principal specific details. Applicable when the
     principal type is ``ServicePrincipal``.
    :vartype service_principal_details:
     ~microsoft.fabric.api.dataflow.models.PrincipalServicePrincipalDetails
    :ivar group_details: Group specific details. Applicable when the principal type is ``Group``.
    :vartype group_details: ~microsoft.fabric.api.dataflow.models.PrincipalGroupDetails
    :ivar service_principal_profile_details: Service principal profile details. Applicable when the
     principal type is ``ServicePrincipalProfile``.
    :vartype service_principal_profile_details:
     ~microsoft.fabric.api.dataflow.models.PrincipalServicePrincipalProfileDetails
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"readonly": True},
        "type": {"required": True},
        "user_details": {"readonly": True},
        "service_principal_details": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_details": {"key": "userDetails", "type": "PrincipalUserDetails"},
        "service_principal_details": {"key": "servicePrincipalDetails", "type": "PrincipalServicePrincipalDetails"},
        "group_details": {"key": "groupDetails", "type": "PrincipalGroupDetails"},
        "service_principal_profile_details": {
            "key": "servicePrincipalProfileDetails",
            "type": "PrincipalServicePrincipalProfileDetails",
        },
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: Union[str, "_models.PrincipalType"],
        group_details: Optional["_models.PrincipalGroupDetails"] = None,
        service_principal_profile_details: Optional["_models.PrincipalServicePrincipalProfileDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The principal's ID. Required.
        :paramtype id: str
        :keyword type: The type of the principal. Additional principal types may be added over time.
         Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
         "EntireTenant".
        :paramtype type: str or ~microsoft.fabric.api.dataflow.models.PrincipalType
        :keyword group_details: Group specific details. Applicable when the principal type is
         ``Group``.
        :paramtype group_details: ~microsoft.fabric.api.dataflow.models.PrincipalGroupDetails
        :keyword service_principal_profile_details: Service principal profile details. Applicable when
         the principal type is ``ServicePrincipalProfile``.
        :paramtype service_principal_profile_details:
         ~microsoft.fabric.api.dataflow.models.PrincipalServicePrincipalProfileDetails
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = None
        self.type = type
        self.user_details = None
        self.service_principal_details = None
        self.group_details = group_details
        self.service_principal_profile_details = service_principal_profile_details


class PrincipalGroupDetails(_serialization.Model):
    """Group specific details. Applicable when the principal type is ``Group``.

    :ivar group_type: The type of the group. Additional group types may be added over time. Known
     values are: "Unknown", "SecurityGroup", and "DistributionList".
    :vartype group_type: str or ~microsoft.fabric.api.dataflow.models.GroupType
    """

    _attribute_map = {
        "group_type": {"key": "groupType", "type": "str"},
    }

    def __init__(self, *, group_type: Optional[Union[str, "_models.GroupType"]] = None, **kwargs: Any) -> None:
        """
        :keyword group_type: The type of the group. Additional group types may be added over time.
         Known values are: "Unknown", "SecurityGroup", and "DistributionList".
        :paramtype group_type: str or ~microsoft.fabric.api.dataflow.models.GroupType
        """
        super().__init__(**kwargs)
        self.group_type = group_type


class PrincipalServicePrincipalDetails(_serialization.Model):
    """Service principal specific details. Applicable when the principal type is ``ServicePrincipal``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar aad_app_id: The service principal's Microsoft Entra AppId.
    :vartype aad_app_id: str
    """

    _validation = {
        "aad_app_id": {"readonly": True},
    }

    _attribute_map = {
        "aad_app_id": {"key": "aadAppId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.aad_app_id = None


class PrincipalServicePrincipalProfileDetails(_serialization.Model):
    """Service principal profile details. Applicable when the principal type is
    ``ServicePrincipalProfile``.

    :ivar parent_principal: The service principal profile's parent principal.
    :vartype parent_principal: ~microsoft.fabric.api.dataflow.models.Principal
    """

    _attribute_map = {
        "parent_principal": {"key": "parentPrincipal", "type": "Principal"},
    }

    def __init__(self, *, parent_principal: Optional["_models.Principal"] = None, **kwargs: Any) -> None:
        """
        :keyword parent_principal: The service principal profile's parent principal.
        :paramtype parent_principal: ~microsoft.fabric.api.dataflow.models.Principal
        """
        super().__init__(**kwargs)
        self.parent_principal = parent_principal


class PrincipalUserDetails(_serialization.Model):
    """User principal specific details. Applicable when the principal type is ``User``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar user_principal_name: The user principal name.
    :vartype user_principal_name: str
    """

    _validation = {
        "user_principal_name": {"readonly": True},
    }

    _attribute_map = {
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.user_principal_name = None


class RunOnDemandDataflowExecuteJobRequest(_serialization.Model):
    """Run on demand execute dataflow job instance payload.

    :ivar execution_data: Payload for run on-demand execute job request. Needed only if the
     dataflow has parameterization enabled.
    :vartype execution_data: ~microsoft.fabric.api.dataflow.models.DataflowExecutionPayload
    """

    _attribute_map = {
        "execution_data": {"key": "executionData", "type": "DataflowExecutionPayload"},
    }

    def __init__(self, *, execution_data: Optional["_models.DataflowExecutionPayload"] = None, **kwargs: Any) -> None:
        """
        :keyword execution_data: Payload for run on-demand execute job request. Needed only if the
         dataflow has parameterization enabled.
        :paramtype execution_data: ~microsoft.fabric.api.dataflow.models.DataflowExecutionPayload
        """
        super().__init__(**kwargs)
        self.execution_data = execution_data


class UpdateDataflowDefinitionRequest(_serialization.Model):
    """Update Dataflow public definition request payload.

    All required parameters must be populated in order to send to server.

    :ivar definition: Dataflow public definition object. Refer to this `article
     </rest/api/fabric/articles/item-management/definitions/dataflow-definition>`_ for more details
     on how to craft a Dataflow public definition. Required.
    :vartype definition: ~microsoft.fabric.api.dataflow.models.DataflowDefinition
    """

    _validation = {
        "definition": {"required": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "DataflowDefinition"},
    }

    def __init__(self, *, definition: "_models.DataflowDefinition", **kwargs: Any) -> None:
        """
        :keyword definition: Dataflow public definition object. Refer to this `article
         </rest/api/fabric/articles/item-management/definitions/dataflow-definition>`_ for more details
         on how to craft a Dataflow public definition. Required.
        :paramtype definition: ~microsoft.fabric.api.dataflow.models.DataflowDefinition
        """
        super().__init__(**kwargs)
        self.definition = definition


class UpdateDataflowRequest(_serialization.Model):
    """Update Dataflow request.

    :ivar display_name: The Dataflow display name. The display name must follow naming rules
     according to item type.
    :vartype display_name: str
    :ivar description: The Dataflow description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The Dataflow display name. The display name must follow naming rules
         according to item type.
        :paramtype display_name: str
        :keyword description: The Dataflow description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class WeeklyScheduleConfig(ScheduleConfig):
    """WeeklyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.dataflow.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    :ivar weekdays: A list of weekdays, at most seven elements are allowed. Required.
    :vartype weekdays: list[str or ~microsoft.fabric.api.dataflow.models.DayOfWeek]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
        "weekdays": {"required": True, "max_items": 7, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "times": {"key": "times", "type": "[str]"},
        "weekdays": {"key": "weekdays", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        times: List[str],
        weekdays: List[Union[str, "_models.DayOfWeek"]],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        :keyword weekdays: A list of weekdays, at most seven elements are allowed. Required.
        :paramtype weekdays: list[str or ~microsoft.fabric.api.dataflow.models.DayOfWeek]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Weekly"
        self.times = times
        self.weekdays = weekdays
