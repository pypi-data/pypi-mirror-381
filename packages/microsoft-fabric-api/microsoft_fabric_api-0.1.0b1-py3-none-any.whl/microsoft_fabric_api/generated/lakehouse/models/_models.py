# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CreateScheduleRequest(_serialization.Model):
    """Create item schedule plan request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
    """

    _validation = {
        "enabled": {"required": True},
        "configuration": {"required": True},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
    }

    def __init__(self, *, enabled: bool, configuration: "_models.ScheduleConfig", **kwargs: Any) -> None:
        """
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword configuration: The actual data contains the time/weekdays of this schedule. Required.
        :paramtype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class CreateLakehouseRefreshMaterializedLakeViewsScheduleRequest(
    CreateScheduleRequest
):  # pylint: disable=name-too-long
    """Create lakehouse refresh materialized lake views schedule request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
    """


class CreateLakehouseRequest(_serialization.Model):
    """Create lakehouse request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The lakehouse display name. The display name must follow naming rules
     according to item type. Required.
    :vartype display_name: str
    :ivar description: The lakehouse description. Maximum length is 256 characters.
    :vartype description: str
    :ivar folder_id: The folder ID. If not specified or null, the lakehouse is created with the
     workspace as its folder.
    :vartype folder_id: str
    :ivar creation_payload: The lakehouse creation payload.
    :vartype creation_payload: ~microsoft.fabric.api.lakehouse.models.LakehouseCreationPayload
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "creation_payload": {"key": "creationPayload", "type": "LakehouseCreationPayload"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        creation_payload: Optional["_models.LakehouseCreationPayload"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The lakehouse display name. The display name must follow naming rules
         according to item type. Required.
        :paramtype display_name: str
        :keyword description: The lakehouse description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword folder_id: The folder ID. If not specified or null, the lakehouse is created with the
         workspace as its folder.
        :paramtype folder_id: str
        :keyword creation_payload: The lakehouse creation payload.
        :paramtype creation_payload: ~microsoft.fabric.api.lakehouse.models.LakehouseCreationPayload
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.folder_id = folder_id
        self.creation_payload = creation_payload


class ScheduleConfig(_serialization.Model):
    """Item schedule plan detail settings.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CronScheduleConfig, DailyScheduleConfig, MonthlyScheduleConfig, WeeklyScheduleConfig

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Cron": "CronScheduleConfig",
            "Daily": "DailyScheduleConfig",
            "Monthly": "MonthlyScheduleConfig",
            "Weekly": "WeeklyScheduleConfig",
        }
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.local_time_zone_id = local_time_zone_id


class CronScheduleConfig(ScheduleConfig):
    """CronScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar interval: The time interval in minutes. A number between 1 and 5270400 (10 years).
     Required.
    :vartype interval: int
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "interval": {"required": True, "maximum": 5270400, "minimum": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "interval": {"key": "interval", "type": "int"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        interval: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword interval: The time interval in minutes. A number between 1 and 5270400 (10 years).
         Required.
        :paramtype interval: int
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Cron"
        self.interval = interval


class FileFormatOptions(_serialization.Model):
    """Abstract type of data file format options.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Csv, Parquet

    All required parameters must be populated in order to send to server.

    :ivar format: Data file format name. Additional file format types may be added over time.
     Required. Known values are: "Csv" and "Parquet".
    :vartype format: str or ~microsoft.fabric.api.lakehouse.models.FileFormat
    """

    _validation = {
        "format": {"required": True},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
    }

    _subtype_map = {"format": {"Csv": "Csv", "Parquet": "Parquet"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.format: Optional[str] = None


class Csv(FileFormatOptions):
    """CSV format options for CSV files.

    All required parameters must be populated in order to send to server.

    :ivar format: Data file format name. Additional file format types may be added over time.
     Required. Known values are: "Csv" and "Parquet".
    :vartype format: str or ~microsoft.fabric.api.lakehouse.models.FileFormat
    :ivar header: This property indicates whether the CSV data file contains a header line or not.
    :vartype header: bool
    :ivar delimiter: The delimiter of CSV file.
    :vartype delimiter: str
    """

    _validation = {
        "format": {"required": True},
        "delimiter": {"pattern": r'^[^\(\)\[\]\{\}\'""]{0,8}$'},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
        "header": {"key": "header", "type": "bool"},
        "delimiter": {"key": "delimiter", "type": "str"},
    }

    def __init__(self, *, header: Optional[bool] = None, delimiter: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword header: This property indicates whether the CSV data file contains a header line or
         not.
        :paramtype header: bool
        :keyword delimiter: The delimiter of CSV file.
        :paramtype delimiter: str
        """
        super().__init__(**kwargs)
        self.format: str = "Csv"
        self.header = header
        self.delimiter = delimiter


class DailyScheduleConfig(ScheduleConfig):
    """DailyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "times": {"key": "times", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        times: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Daily"
        self.times = times


class MonthlyOccurrence(_serialization.Model):
    """Specifies the day for triggering jobs.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DayOfMonth, OrdinalWeekday

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.lakehouse.models.OccurrenceType
    """

    _validation = {
        "occurrence_type": {"required": True},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
    }

    _subtype_map = {"occurrence_type": {"DayOfMonth": "DayOfMonth", "OrdinalWeekday": "OrdinalWeekday"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.occurrence_type: Optional[str] = None


class DayOfMonth(MonthlyOccurrence):
    """Specifies a date to trigger the job. The value must be a valid date. Otherwise, it will be
    skipped.

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.lakehouse.models.OccurrenceType
    :ivar day_of_month: Specifies a date to trigger the job, using a value between 1 and 31. For
     example, 2 means the second day of the month. The date must be valid. If an invalid date is
     provided, such as February 31st, it will automatically skip to the month that includes the 31st
     day. Required.
    :vartype day_of_month: int
    """

    _validation = {
        "occurrence_type": {"required": True},
        "day_of_month": {"required": True, "maximum": 31, "minimum": 1},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
        "day_of_month": {"key": "dayOfMonth", "type": "int"},
    }

    def __init__(self, *, day_of_month: int, **kwargs: Any) -> None:
        """
        :keyword day_of_month: Specifies a date to trigger the job, using a value between 1 and 31. For
         example, 2 means the second day of the month. The date must be valid. If an invalid date is
         provided, such as February 31st, it will automatically skip to the month that includes the 31st
         day. Required.
        :paramtype day_of_month: int
        """
        super().__init__(**kwargs)
        self.occurrence_type: str = "DayOfMonth"
        self.day_of_month = day_of_month


class Duration(_serialization.Model):
    """A duration.

    All required parameters must be populated in order to send to server.

    :ivar value: The number of timeUnits in the duration. Required.
    :vartype value: float
    :ivar time_unit: The unit of time for the duration. Additional duration types may be added over
     time. Required. Known values are: "Seconds", "Minutes", "Hours", and "Days".
    :vartype time_unit: str or ~microsoft.fabric.api.lakehouse.models.TimeUnit
    """

    _validation = {
        "value": {"required": True},
        "time_unit": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "float"},
        "time_unit": {"key": "timeUnit", "type": "str"},
    }

    def __init__(self, *, value: float, time_unit: Union[str, "_models.TimeUnit"], **kwargs: Any) -> None:
        """
        :keyword value: The number of timeUnits in the duration. Required.
        :paramtype value: float
        :keyword time_unit: The unit of time for the duration. Additional duration types may be added
         over time. Required. Known values are: "Seconds", "Minutes", "Hours", and "Days".
        :paramtype time_unit: str or ~microsoft.fabric.api.lakehouse.models.TimeUnit
        """
        super().__init__(**kwargs)
        self.value = value
        self.time_unit = time_unit


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.lakehouse.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.lakehouse.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.lakehouse.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.lakehouse.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.lakehouse.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class ItemReference(_serialization.Model):
    """An item reference object.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ItemReferenceById

    All required parameters must be populated in order to send to server.

    :ivar reference_type: The item reference type. Required. "ById"
    :vartype reference_type: str or ~microsoft.fabric.api.lakehouse.models.ItemReferenceType
    """

    _validation = {
        "reference_type": {"required": True},
    }

    _attribute_map = {
        "reference_type": {"key": "referenceType", "type": "str"},
    }

    _subtype_map = {"reference_type": {"ById": "ItemReferenceById"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.reference_type: Optional[str] = None


class ItemReferenceById(ItemReference):
    """An item reference by ID object.

    All required parameters must be populated in order to send to server.

    :ivar reference_type: The item reference type. Required. "ById"
    :vartype reference_type: str or ~microsoft.fabric.api.lakehouse.models.ItemReferenceType
    :ivar item_id: The ID of the item. Required.
    :vartype item_id: str
    :ivar workspace_id: The workspace ID of the item. Required.
    :vartype workspace_id: str
    """

    _validation = {
        "reference_type": {"required": True},
        "item_id": {"required": True},
        "workspace_id": {"required": True},
    }

    _attribute_map = {
        "reference_type": {"key": "referenceType", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
    }

    def __init__(self, *, item_id: str, workspace_id: str, **kwargs: Any) -> None:
        """
        :keyword item_id: The ID of the item. Required.
        :paramtype item_id: str
        :keyword workspace_id: The workspace ID of the item. Required.
        :paramtype workspace_id: str
        """
        super().__init__(**kwargs)
        self.reference_type: str = "ById"
        self.item_id = item_id
        self.workspace_id = workspace_id


class ItemSchedule(_serialization.Model):
    """Item schedule.

    All required parameters must be populated in order to send to server.

    :ivar id: The schedule ID. Required.
    :vartype id: str
    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar created_date_time: The created time stamp of this schedule in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format.
    :vartype created_date_time: ~datetime.datetime
    :ivar configuration: The actual data contains the time/weekdays of this schedule.
    :vartype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
    :ivar owner: The user identity that created this schedule or last modified.
    :vartype owner: ~microsoft.fabric.api.lakehouse.models.Principal
    """

    _validation = {
        "id": {"required": True},
        "enabled": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
        "owner": {"key": "owner", "type": "Principal"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        enabled: bool,
        created_date_time: Optional[datetime.datetime] = None,
        configuration: Optional["_models.ScheduleConfig"] = None,
        owner: Optional["_models.Principal"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The schedule ID. Required.
        :paramtype id: str
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword created_date_time: The created time stamp of this schedule in UTC, using the
         YYYY-MM-DDTHH:mm:ssZ format.
        :paramtype created_date_time: ~datetime.datetime
        :keyword configuration: The actual data contains the time/weekdays of this schedule.
        :paramtype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
        :keyword owner: The user identity that created this schedule or last modified.
        :paramtype owner: ~microsoft.fabric.api.lakehouse.models.Principal
        """
        super().__init__(**kwargs)
        self.id = id
        self.enabled = enabled
        self.created_date_time = created_date_time
        self.configuration = configuration
        self.owner = owner


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class Lakehouse(Item):
    """A lakehouse item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.lakehouse.models.ItemTag]
    :ivar properties: The lakehouse properties.
    :vartype properties: ~microsoft.fabric.api.lakehouse.models.LakehouseProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
        "properties": {"key": "properties", "type": "LakehouseProperties"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional["_models.LakehouseProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.lakehouse.models.ItemType
        :keyword properties: The lakehouse properties.
        :paramtype properties: ~microsoft.fabric.api.lakehouse.models.LakehouseProperties
        """
        super().__init__(display_name=display_name, description=description, type=type, **kwargs)
        self.properties = properties


class LakehouseCreationPayload(_serialization.Model):
    """**(Preview)** Lakehouse item payload. This property is currently required due to the schema
    enabled lakehouse being in preview. It might become redundant upon General Availability (GA).

    All required parameters must be populated in order to send to server.

    :ivar enable_schemas: Create a schema enabled lakehouse when set to true. Only 'true' is
     allowed. Required.
    :vartype enable_schemas: bool
    """

    _validation = {
        "enable_schemas": {"required": True},
    }

    _attribute_map = {
        "enable_schemas": {"key": "enableSchemas", "type": "bool"},
    }

    def __init__(self, *, enable_schemas: bool, **kwargs: Any) -> None:
        """
        :keyword enable_schemas: Create a schema enabled lakehouse when set to true. Only 'true' is
         allowed. Required.
        :paramtype enable_schemas: bool
        """
        super().__init__(**kwargs)
        self.enable_schemas = enable_schemas


class LakehouseProperties(_serialization.Model):
    """The lakehouse properties.

    All required parameters must be populated in order to send to server.

    :ivar one_lake_tables_path: OneLake path to the Lakehouse tables directory. Required.
    :vartype one_lake_tables_path: str
    :ivar one_lake_files_path: OneLake path to the Lakehouse files directory. Required.
    :vartype one_lake_files_path: str
    :ivar sql_endpoint_properties: An object containing the properties of the SQL endpoint.
    :vartype sql_endpoint_properties: ~microsoft.fabric.api.lakehouse.models.SqlEndpointProperties
    :ivar default_schema: Default schema of the lakehouse. This property is returned only for
     schema enabled lakehouse.
    :vartype default_schema: str
    """

    _validation = {
        "one_lake_tables_path": {"required": True},
        "one_lake_files_path": {"required": True},
    }

    _attribute_map = {
        "one_lake_tables_path": {"key": "oneLakeTablesPath", "type": "str"},
        "one_lake_files_path": {"key": "oneLakeFilesPath", "type": "str"},
        "sql_endpoint_properties": {"key": "sqlEndpointProperties", "type": "SqlEndpointProperties"},
        "default_schema": {"key": "defaultSchema", "type": "str"},
    }

    def __init__(
        self,
        *,
        one_lake_tables_path: str,
        one_lake_files_path: str,
        sql_endpoint_properties: Optional["_models.SqlEndpointProperties"] = None,
        default_schema: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword one_lake_tables_path: OneLake path to the Lakehouse tables directory. Required.
        :paramtype one_lake_tables_path: str
        :keyword one_lake_files_path: OneLake path to the Lakehouse files directory. Required.
        :paramtype one_lake_files_path: str
        :keyword sql_endpoint_properties: An object containing the properties of the SQL endpoint.
        :paramtype sql_endpoint_properties:
         ~microsoft.fabric.api.lakehouse.models.SqlEndpointProperties
        :keyword default_schema: Default schema of the lakehouse. This property is returned only for
         schema enabled lakehouse.
        :paramtype default_schema: str
        """
        super().__init__(**kwargs)
        self.one_lake_tables_path = one_lake_tables_path
        self.one_lake_files_path = one_lake_files_path
        self.sql_endpoint_properties = sql_endpoint_properties
        self.default_schema = default_schema


class LakehouseRefreshMaterializedLakeViewsSchedule(ItemSchedule):  # pylint: disable=name-too-long
    """Lakehouse refresh materialized lake views schedule.

    All required parameters must be populated in order to send to server.

    :ivar id: The schedule ID. Required.
    :vartype id: str
    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar created_date_time: The created time stamp of this schedule in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format.
    :vartype created_date_time: ~datetime.datetime
    :ivar configuration: The actual data contains the time/weekdays of this schedule.
    :vartype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
    :ivar owner: The user identity that created this schedule or last modified.
    :vartype owner: ~microsoft.fabric.api.lakehouse.models.Principal
    """


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class Lakehouses(PaginatedResponse):
    """A list of lakehouses.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of lakehouses. Required.
    :vartype value: list[~microsoft.fabric.api.lakehouse.models.Lakehouse]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Lakehouse]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Lakehouse"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of lakehouses. Required.
        :paramtype value: list[~microsoft.fabric.api.lakehouse.models.Lakehouse]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class LivySession(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The livy session response.

    :ivar spark_application_id: A Spark application ID is a unique identifier assigned to each
     Apache Spark application. It also appears in the Spark UI.
    :vartype spark_application_id: str
    :ivar state: Current state of the job. Known values are: "InProgress", "Cancelled",
     "NotStarted", "Succeeded", "Failed", and "Unknown".
    :vartype state: str or ~microsoft.fabric.api.lakehouse.models.State
    :ivar livy_id: ID of the Livy session or Livy batch.
    :vartype livy_id: str
    :ivar origin: Origin of the job. Known values are: "SubmittedJob" and "PendingJob".
    :vartype origin: str or ~microsoft.fabric.api.lakehouse.models.Origin
    :ivar attempt_number: Current attempt number.
    :vartype attempt_number: int
    :ivar max_number_of_attempts: Maximum number of attempts.
    :vartype max_number_of_attempts: int
    :ivar livy_name: Name of the Livy session or Livy batch.
    :vartype livy_name: str
    :ivar submitter: ID of the submitter.
    :vartype submitter: ~microsoft.fabric.api.lakehouse.models.Principal
    :ivar item: ID of the item.
    :vartype item: ~microsoft.fabric.api.lakehouse.models.ItemReferenceById
    :ivar item_type: The item type. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype item_type: str or ~microsoft.fabric.api.lakehouse.models.ItemType
    :ivar item_name: Name of the item.
    :vartype item_name: str
    :ivar job_type: Current state of the job. Known values are: "Unknown", "SparkSession",
     "SparkBatch", and "JupyterSession".
    :vartype job_type: str or ~microsoft.fabric.api.lakehouse.models.JobType
    :ivar submitted_date_time: Timestamp when the job was submitted in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format.
    :vartype submitted_date_time: ~datetime.datetime
    :ivar start_date_time: Timestamp when the job started in UTC, using the YYYY-MM-DDTHH:mm:ssZ
     format.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: Timestamp when the job ended in UTC, using the YYYY-MM-DDTHH:mm:ssZ
     format.
    :vartype end_date_time: ~datetime.datetime
    :ivar queued_duration: Duration for which the job was queued.
    :vartype queued_duration: ~microsoft.fabric.api.lakehouse.models.Duration
    :ivar running_duration: Time it took the job to run.
    :vartype running_duration: ~microsoft.fabric.api.lakehouse.models.Duration
    :ivar total_duration: Total duration of the job.
    :vartype total_duration: ~microsoft.fabric.api.lakehouse.models.Duration
    :ivar job_instance_id: ID of the job instance.
    :vartype job_instance_id: str
    :ivar creator_item: ID of the item creator. When ``isHighConcurrency`` is set to ``true`` this
     value might be different than ``itemId``.
    :vartype creator_item: ~microsoft.fabric.api.lakehouse.models.ItemReferenceById
    :ivar is_high_concurrency: Flag indicating high concurrency.
    :vartype is_high_concurrency: bool
    :ivar cancellation_reason: Reason for the job cancellation.
    :vartype cancellation_reason: str
    :ivar capacity_id: ID of the capacity.
    :vartype capacity_id: str
    :ivar operation_name: Name of the operation. Possible values include: *Notebook run*\\ ,
     *Notebook HC run* and *Notebook pipeline run*.
    :vartype operation_name: str
    :ivar consumer_id: ID of the consumer.
    :vartype consumer_id: ~microsoft.fabric.api.lakehouse.models.Principal
    :ivar runtime_version: The fabric runtime version.
    :vartype runtime_version: str
    :ivar livy_session_item_resource_uri: The URI used to retrieve all Livy sessions for a given
     item.
    :vartype livy_session_item_resource_uri: str
    """

    _attribute_map = {
        "spark_application_id": {"key": "sparkApplicationId", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "livy_id": {"key": "livyId", "type": "str"},
        "origin": {"key": "origin", "type": "str"},
        "attempt_number": {"key": "attemptNumber", "type": "int"},
        "max_number_of_attempts": {"key": "maxNumberOfAttempts", "type": "int"},
        "livy_name": {"key": "livyName", "type": "str"},
        "submitter": {"key": "submitter", "type": "Principal"},
        "item": {"key": "item", "type": "ItemReferenceById"},
        "item_type": {"key": "itemType", "type": "str"},
        "item_name": {"key": "itemName", "type": "str"},
        "job_type": {"key": "jobType", "type": "str"},
        "submitted_date_time": {"key": "submittedDateTime", "type": "iso-8601"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "queued_duration": {"key": "queuedDuration", "type": "Duration"},
        "running_duration": {"key": "runningDuration", "type": "Duration"},
        "total_duration": {"key": "totalDuration", "type": "Duration"},
        "job_instance_id": {"key": "jobInstanceId", "type": "str"},
        "creator_item": {"key": "creatorItem", "type": "ItemReferenceById"},
        "is_high_concurrency": {"key": "isHighConcurrency", "type": "bool"},
        "cancellation_reason": {"key": "cancellationReason", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "operation_name": {"key": "operationName", "type": "str"},
        "consumer_id": {"key": "consumerId", "type": "Principal"},
        "runtime_version": {"key": "runtimeVersion", "type": "str"},
        "livy_session_item_resource_uri": {"key": "livySessionItemResourceUri", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        spark_application_id: Optional[str] = None,
        state: Optional[Union[str, "_models.State"]] = None,
        livy_id: Optional[str] = None,
        origin: Optional[Union[str, "_models.Origin"]] = None,
        attempt_number: Optional[int] = None,
        max_number_of_attempts: Optional[int] = None,
        livy_name: Optional[str] = None,
        submitter: Optional["_models.Principal"] = None,
        item: Optional["_models.ItemReferenceById"] = None,
        item_type: Optional[Union[str, "_models.ItemType"]] = None,
        item_name: Optional[str] = None,
        job_type: Optional[Union[str, "_models.JobType"]] = None,
        submitted_date_time: Optional[datetime.datetime] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        queued_duration: Optional["_models.Duration"] = None,
        running_duration: Optional["_models.Duration"] = None,
        total_duration: Optional["_models.Duration"] = None,
        job_instance_id: Optional[str] = None,
        creator_item: Optional["_models.ItemReferenceById"] = None,
        is_high_concurrency: Optional[bool] = None,
        cancellation_reason: Optional[str] = None,
        capacity_id: Optional[str] = None,
        operation_name: Optional[str] = None,
        consumer_id: Optional["_models.Principal"] = None,
        runtime_version: Optional[str] = None,
        livy_session_item_resource_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword spark_application_id: A Spark application ID is a unique identifier assigned to each
         Apache Spark application. It also appears in the Spark UI.
        :paramtype spark_application_id: str
        :keyword state: Current state of the job. Known values are: "InProgress", "Cancelled",
         "NotStarted", "Succeeded", "Failed", and "Unknown".
        :paramtype state: str or ~microsoft.fabric.api.lakehouse.models.State
        :keyword livy_id: ID of the Livy session or Livy batch.
        :paramtype livy_id: str
        :keyword origin: Origin of the job. Known values are: "SubmittedJob" and "PendingJob".
        :paramtype origin: str or ~microsoft.fabric.api.lakehouse.models.Origin
        :keyword attempt_number: Current attempt number.
        :paramtype attempt_number: int
        :keyword max_number_of_attempts: Maximum number of attempts.
        :paramtype max_number_of_attempts: int
        :keyword livy_name: Name of the Livy session or Livy batch.
        :paramtype livy_name: str
        :keyword submitter: ID of the submitter.
        :paramtype submitter: ~microsoft.fabric.api.lakehouse.models.Principal
        :keyword item: ID of the item.
        :paramtype item: ~microsoft.fabric.api.lakehouse.models.ItemReferenceById
        :keyword item_type: The item type. Known values are: "Dashboard", "Report", "SemanticModel",
         "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
         "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype item_type: str or ~microsoft.fabric.api.lakehouse.models.ItemType
        :keyword item_name: Name of the item.
        :paramtype item_name: str
        :keyword job_type: Current state of the job. Known values are: "Unknown", "SparkSession",
         "SparkBatch", and "JupyterSession".
        :paramtype job_type: str or ~microsoft.fabric.api.lakehouse.models.JobType
        :keyword submitted_date_time: Timestamp when the job was submitted in UTC, using the
         YYYY-MM-DDTHH:mm:ssZ format.
        :paramtype submitted_date_time: ~datetime.datetime
        :keyword start_date_time: Timestamp when the job started in UTC, using the YYYY-MM-DDTHH:mm:ssZ
         format.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: Timestamp when the job ended in UTC, using the YYYY-MM-DDTHH:mm:ssZ
         format.
        :paramtype end_date_time: ~datetime.datetime
        :keyword queued_duration: Duration for which the job was queued.
        :paramtype queued_duration: ~microsoft.fabric.api.lakehouse.models.Duration
        :keyword running_duration: Time it took the job to run.
        :paramtype running_duration: ~microsoft.fabric.api.lakehouse.models.Duration
        :keyword total_duration: Total duration of the job.
        :paramtype total_duration: ~microsoft.fabric.api.lakehouse.models.Duration
        :keyword job_instance_id: ID of the job instance.
        :paramtype job_instance_id: str
        :keyword creator_item: ID of the item creator. When ``isHighConcurrency`` is set to ``true``
         this value might be different than ``itemId``.
        :paramtype creator_item: ~microsoft.fabric.api.lakehouse.models.ItemReferenceById
        :keyword is_high_concurrency: Flag indicating high concurrency.
        :paramtype is_high_concurrency: bool
        :keyword cancellation_reason: Reason for the job cancellation.
        :paramtype cancellation_reason: str
        :keyword capacity_id: ID of the capacity.
        :paramtype capacity_id: str
        :keyword operation_name: Name of the operation. Possible values include: *Notebook run*\\ ,
         *Notebook HC run* and *Notebook pipeline run*.
        :paramtype operation_name: str
        :keyword consumer_id: ID of the consumer.
        :paramtype consumer_id: ~microsoft.fabric.api.lakehouse.models.Principal
        :keyword runtime_version: The fabric runtime version.
        :paramtype runtime_version: str
        :keyword livy_session_item_resource_uri: The URI used to retrieve all Livy sessions for a given
         item.
        :paramtype livy_session_item_resource_uri: str
        """
        super().__init__(**kwargs)
        self.spark_application_id = spark_application_id
        self.state = state
        self.livy_id = livy_id
        self.origin = origin
        self.attempt_number = attempt_number
        self.max_number_of_attempts = max_number_of_attempts
        self.livy_name = livy_name
        self.submitter = submitter
        self.item = item
        self.item_type = item_type
        self.item_name = item_name
        self.job_type = job_type
        self.submitted_date_time = submitted_date_time
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.queued_duration = queued_duration
        self.running_duration = running_duration
        self.total_duration = total_duration
        self.job_instance_id = job_instance_id
        self.creator_item = creator_item
        self.is_high_concurrency = is_high_concurrency
        self.cancellation_reason = cancellation_reason
        self.capacity_id = capacity_id
        self.operation_name = operation_name
        self.consumer_id = consumer_id
        self.runtime_version = runtime_version
        self.livy_session_item_resource_uri = livy_session_item_resource_uri


class LivySessions(PaginatedResponse):
    """A paginated list of livy sessions.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of livy sessions. Required.
    :vartype value: list[~microsoft.fabric.api.lakehouse.models.LivySession]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[LivySession]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.LivySession"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of livy sessions. Required.
        :paramtype value: list[~microsoft.fabric.api.lakehouse.models.LivySession]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class LoadTableRequest(_serialization.Model):
    """Represents a load table operation request.

    All required parameters must be populated in order to send to server.

    :ivar relative_path: The relative path of the data file or folder. Required.
    :vartype relative_path: str
    :ivar path_type: The type of ``relativePath``\\ , either file or folder. Additional
     ``PathType`` types may be added over time. Required. Known values are: "File" and "Folder".
    :vartype path_type: str or ~microsoft.fabric.api.lakehouse.models.PathType
    :ivar file_extension: The file extension of the data file.
    :vartype file_extension: str
    :ivar mode: The load table operation mode, overwrite or append. Additional mode types may be
     added over time. Known values are: "Overwrite" and "Append".
    :vartype mode: str or ~microsoft.fabric.api.lakehouse.models.ModeType
    :ivar recursive: Indicates whether to search data files recursively or not, when loading a
     table from a folder.
    :vartype recursive: bool
    :ivar format_options: Abstract type of data file format options.
    :vartype format_options: ~microsoft.fabric.api.lakehouse.models.FileFormatOptions
    """

    _validation = {
        "relative_path": {"required": True, "pattern": r"^Files(\/[\p{L}\w]{1}([ \p{L}\w\.-]*[\p{L}\w\.-]{1})*)*$"},
        "path_type": {"required": True},
        "file_extension": {"pattern": r"^[a-zA-Z0-9_-]{1,16}$"},
    }

    _attribute_map = {
        "relative_path": {"key": "relativePath", "type": "str"},
        "path_type": {"key": "pathType", "type": "str"},
        "file_extension": {"key": "fileExtension", "type": "str"},
        "mode": {"key": "mode", "type": "str"},
        "recursive": {"key": "recursive", "type": "bool"},
        "format_options": {"key": "formatOptions", "type": "FileFormatOptions"},
    }

    def __init__(
        self,
        *,
        relative_path: str,
        path_type: Union[str, "_models.PathType"],
        file_extension: Optional[str] = None,
        mode: Optional[Union[str, "_models.ModeType"]] = None,
        recursive: Optional[bool] = None,
        format_options: Optional["_models.FileFormatOptions"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword relative_path: The relative path of the data file or folder. Required.
        :paramtype relative_path: str
        :keyword path_type: The type of ``relativePath``\\ , either file or folder. Additional
         ``PathType`` types may be added over time. Required. Known values are: "File" and "Folder".
        :paramtype path_type: str or ~microsoft.fabric.api.lakehouse.models.PathType
        :keyword file_extension: The file extension of the data file.
        :paramtype file_extension: str
        :keyword mode: The load table operation mode, overwrite or append. Additional mode types may be
         added over time. Known values are: "Overwrite" and "Append".
        :paramtype mode: str or ~microsoft.fabric.api.lakehouse.models.ModeType
        :keyword recursive: Indicates whether to search data files recursively or not, when loading a
         table from a folder.
        :paramtype recursive: bool
        :keyword format_options: Abstract type of data file format options.
        :paramtype format_options: ~microsoft.fabric.api.lakehouse.models.FileFormatOptions
        """
        super().__init__(**kwargs)
        self.relative_path = relative_path
        self.path_type = path_type
        self.file_extension = file_extension
        self.mode = mode
        self.recursive = recursive
        self.format_options = format_options


class MonthlyScheduleConfig(ScheduleConfig):
    """MonthlyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar recurrence: Specifies the monthly job repeat interval. For example, when set to 1 the job
     is triggered every month. Required.
    :vartype recurrence: int
    :ivar occurrence: A date for triggering the job. Required.
    :vartype occurrence: ~microsoft.fabric.api.lakehouse.models.MonthlyOccurrence
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "recurrence": {"required": True, "maximum": 12, "minimum": 1},
        "occurrence": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "recurrence": {"key": "recurrence", "type": "int"},
        "occurrence": {"key": "occurrence", "type": "MonthlyOccurrence"},
        "times": {"key": "times", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        recurrence: int,
        occurrence: "_models.MonthlyOccurrence",
        times: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword recurrence: Specifies the monthly job repeat interval. For example, when set to 1 the
         job is triggered every month. Required.
        :paramtype recurrence: int
        :keyword occurrence: A date for triggering the job. Required.
        :paramtype occurrence: ~microsoft.fabric.api.lakehouse.models.MonthlyOccurrence
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Monthly"
        self.recurrence = recurrence
        self.occurrence = occurrence
        self.times = times


class OptimizeSettings(_serialization.Model):
    """Table maintenance optimization settings.

    :ivar z_order_by: A list of column names to Z-Order the data by. If not provided, Z-Ordering
     isn't applied.
    :vartype z_order_by: list[str]
    :ivar v_order: The `V-Order
     </fabric/data-engineering/delta-optimization-and-v-order#what-is-v-order>`_ settings. True -
     Enabled, False - Disabled.
    :vartype v_order: bool
    """

    _attribute_map = {
        "z_order_by": {"key": "zOrderBy", "type": "[str]"},
        "v_order": {"key": "vOrder", "type": "bool"},
    }

    def __init__(
        self, *, z_order_by: Optional[List[str]] = None, v_order: Optional[bool] = None, **kwargs: Any
    ) -> None:
        """
        :keyword z_order_by: A list of column names to Z-Order the data by. If not provided, Z-Ordering
         isn't applied.
        :paramtype z_order_by: list[str]
        :keyword v_order: The `V-Order
         </fabric/data-engineering/delta-optimization-and-v-order#what-is-v-order>`_ settings. True -
         Enabled, False - Disabled.
        :paramtype v_order: bool
        """
        super().__init__(**kwargs)
        self.z_order_by = z_order_by
        self.v_order = v_order


class OrdinalWeekday(MonthlyOccurrence):
    """Specifies the ordinal week and weekday to trigger the job. The value must be a valid date.
    Otherwise, it will be skipped.

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.lakehouse.models.OccurrenceType
    :ivar week_index: The week of the month. Required. Known values are: "First", "Second",
     "Third", "Fourth", and "Fifth".
    :vartype week_index: str or ~microsoft.fabric.api.lakehouse.models.WeekIndex
    :ivar weekday: Week day for triggering jobs. Required. Known values are: "Monday", "Tuesday",
     "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
    :vartype weekday: str or ~microsoft.fabric.api.lakehouse.models.DayOfWeek
    """

    _validation = {
        "occurrence_type": {"required": True},
        "week_index": {"required": True},
        "weekday": {"required": True},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
        "week_index": {"key": "weekIndex", "type": "str"},
        "weekday": {"key": "weekday", "type": "str"},
    }

    def __init__(
        self, *, week_index: Union[str, "_models.WeekIndex"], weekday: Union[str, "_models.DayOfWeek"], **kwargs: Any
    ) -> None:
        """
        :keyword week_index: The week of the month. Required. Known values are: "First", "Second",
         "Third", "Fourth", and "Fifth".
        :paramtype week_index: str or ~microsoft.fabric.api.lakehouse.models.WeekIndex
        :keyword weekday: Week day for triggering jobs. Required. Known values are: "Monday",
         "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
        :paramtype weekday: str or ~microsoft.fabric.api.lakehouse.models.DayOfWeek
        """
        super().__init__(**kwargs)
        self.occurrence_type: str = "OrdinalWeekday"
        self.week_index = week_index
        self.weekday = weekday


class Parquet(FileFormatOptions):
    """Format options for Parquet files.

    All required parameters must be populated in order to send to server.

    :ivar format: Data file format name. Additional file format types may be added over time.
     Required. Known values are: "Csv" and "Parquet".
    :vartype format: str or ~microsoft.fabric.api.lakehouse.models.FileFormat
    """

    _validation = {
        "format": {"required": True},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.format: str = "Parquet"


class Principal(_serialization.Model):
    """Represents an identity or a Microsoft Entra group.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The principal's ID. Required.
    :vartype id: str
    :ivar display_name: The principal's display name.
    :vartype display_name: str
    :ivar type: The type of the principal. Additional principal types may be added over time.
     Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
     "EntireTenant".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.PrincipalType
    :ivar user_details: User principal specific details. Applicable when the principal type is
     ``User``.
    :vartype user_details: ~microsoft.fabric.api.lakehouse.models.PrincipalUserDetails
    :ivar service_principal_details: Service principal specific details. Applicable when the
     principal type is ``ServicePrincipal``.
    :vartype service_principal_details:
     ~microsoft.fabric.api.lakehouse.models.PrincipalServicePrincipalDetails
    :ivar group_details: Group specific details. Applicable when the principal type is ``Group``.
    :vartype group_details: ~microsoft.fabric.api.lakehouse.models.PrincipalGroupDetails
    :ivar service_principal_profile_details: Service principal profile details. Applicable when the
     principal type is ``ServicePrincipalProfile``.
    :vartype service_principal_profile_details:
     ~microsoft.fabric.api.lakehouse.models.PrincipalServicePrincipalProfileDetails
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"readonly": True},
        "type": {"required": True},
        "user_details": {"readonly": True},
        "service_principal_details": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_details": {"key": "userDetails", "type": "PrincipalUserDetails"},
        "service_principal_details": {"key": "servicePrincipalDetails", "type": "PrincipalServicePrincipalDetails"},
        "group_details": {"key": "groupDetails", "type": "PrincipalGroupDetails"},
        "service_principal_profile_details": {
            "key": "servicePrincipalProfileDetails",
            "type": "PrincipalServicePrincipalProfileDetails",
        },
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: Union[str, "_models.PrincipalType"],
        group_details: Optional["_models.PrincipalGroupDetails"] = None,
        service_principal_profile_details: Optional["_models.PrincipalServicePrincipalProfileDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The principal's ID. Required.
        :paramtype id: str
        :keyword type: The type of the principal. Additional principal types may be added over time.
         Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
         "EntireTenant".
        :paramtype type: str or ~microsoft.fabric.api.lakehouse.models.PrincipalType
        :keyword group_details: Group specific details. Applicable when the principal type is
         ``Group``.
        :paramtype group_details: ~microsoft.fabric.api.lakehouse.models.PrincipalGroupDetails
        :keyword service_principal_profile_details: Service principal profile details. Applicable when
         the principal type is ``ServicePrincipalProfile``.
        :paramtype service_principal_profile_details:
         ~microsoft.fabric.api.lakehouse.models.PrincipalServicePrincipalProfileDetails
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = None
        self.type = type
        self.user_details = None
        self.service_principal_details = None
        self.group_details = group_details
        self.service_principal_profile_details = service_principal_profile_details


class PrincipalGroupDetails(_serialization.Model):
    """Group specific details. Applicable when the principal type is ``Group``.

    :ivar group_type: The type of the group. Additional group types may be added over time. Known
     values are: "Unknown", "SecurityGroup", and "DistributionList".
    :vartype group_type: str or ~microsoft.fabric.api.lakehouse.models.GroupType
    """

    _attribute_map = {
        "group_type": {"key": "groupType", "type": "str"},
    }

    def __init__(self, *, group_type: Optional[Union[str, "_models.GroupType"]] = None, **kwargs: Any) -> None:
        """
        :keyword group_type: The type of the group. Additional group types may be added over time.
         Known values are: "Unknown", "SecurityGroup", and "DistributionList".
        :paramtype group_type: str or ~microsoft.fabric.api.lakehouse.models.GroupType
        """
        super().__init__(**kwargs)
        self.group_type = group_type


class PrincipalServicePrincipalDetails(_serialization.Model):
    """Service principal specific details. Applicable when the principal type is ``ServicePrincipal``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar aad_app_id: The service principal's Microsoft Entra AppId.
    :vartype aad_app_id: str
    """

    _validation = {
        "aad_app_id": {"readonly": True},
    }

    _attribute_map = {
        "aad_app_id": {"key": "aadAppId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.aad_app_id = None


class PrincipalServicePrincipalProfileDetails(_serialization.Model):
    """Service principal profile details. Applicable when the principal type is
    ``ServicePrincipalProfile``.

    :ivar parent_principal: The service principal profile's parent principal.
    :vartype parent_principal: ~microsoft.fabric.api.lakehouse.models.Principal
    """

    _attribute_map = {
        "parent_principal": {"key": "parentPrincipal", "type": "Principal"},
    }

    def __init__(self, *, parent_principal: Optional["_models.Principal"] = None, **kwargs: Any) -> None:
        """
        :keyword parent_principal: The service principal profile's parent principal.
        :paramtype parent_principal: ~microsoft.fabric.api.lakehouse.models.Principal
        """
        super().__init__(**kwargs)
        self.parent_principal = parent_principal


class PrincipalUserDetails(_serialization.Model):
    """User principal specific details. Applicable when the principal type is ``User``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar user_principal_name: The user principal name.
    :vartype user_principal_name: str
    """

    _validation = {
        "user_principal_name": {"readonly": True},
    }

    _attribute_map = {
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.user_principal_name = None


class RunOnDemandTableMaintenanceRequest(_serialization.Model):
    """Run on demand lakehouse table maintenance instance payload.

    All required parameters must be populated in order to send to server.

    :ivar execution_data: Execution data to configure the `table maintenance
     </fabric/data-engineering/lakehouse-table-maintenance>`_ job. Required.
    :vartype execution_data: ~microsoft.fabric.api.lakehouse.models.TableMaintenanceExecutionData
    """

    _validation = {
        "execution_data": {"required": True},
    }

    _attribute_map = {
        "execution_data": {"key": "executionData", "type": "TableMaintenanceExecutionData"},
    }

    def __init__(self, *, execution_data: "_models.TableMaintenanceExecutionData", **kwargs: Any) -> None:
        """
        :keyword execution_data: Execution data to configure the `table maintenance
         </fabric/data-engineering/lakehouse-table-maintenance>`_ job. Required.
        :paramtype execution_data: ~microsoft.fabric.api.lakehouse.models.TableMaintenanceExecutionData
        """
        super().__init__(**kwargs)
        self.execution_data = execution_data


class SqlEndpointProperties(_serialization.Model):
    """An object containing the properties of the SQL endpoint.

    All required parameters must be populated in order to send to server.

    :ivar id: SQL endpoint ID.
    :vartype id: str
    :ivar connection_string: SQL endpoint connection string.
    :vartype connection_string: str
    :ivar provisioning_status: The SQL endpoint provisioning status. Required. Known values are:
     "InProgress", "Success", and "Failed".
    :vartype provisioning_status: str or
     ~microsoft.fabric.api.lakehouse.models.SqlEndpointProvisioningStatus
    """

    _validation = {
        "provisioning_status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
        "provisioning_status": {"key": "provisioningStatus", "type": "str"},
    }

    def __init__(
        self,
        *,
        provisioning_status: Union[str, "_models.SqlEndpointProvisioningStatus"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        connection_string: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: SQL endpoint ID.
        :paramtype id: str
        :keyword connection_string: SQL endpoint connection string.
        :paramtype connection_string: str
        :keyword provisioning_status: The SQL endpoint provisioning status. Required. Known values are:
         "InProgress", "Success", and "Failed".
        :paramtype provisioning_status: str or
         ~microsoft.fabric.api.lakehouse.models.SqlEndpointProvisioningStatus
        """
        super().__init__(**kwargs)
        self.id = id
        self.connection_string = connection_string
        self.provisioning_status = provisioning_status


class Table(_serialization.Model):
    """Table information.

    All required parameters must be populated in order to send to server.

    :ivar type: Table type. Required. Known values are: "Managed" and "External".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.TableType
    :ivar name: Table name. Required.
    :vartype name: str
    :ivar location: Table location. Required.
    :vartype location: str
    :ivar format: Table format. Required.
    :vartype format: str
    """

    _validation = {
        "type": {"required": True},
        "name": {"required": True},
        "location": {"required": True},
        "format": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "format": {"key": "format", "type": "str"},
    }

    def __init__(
        self, *, type: Union[str, "_models.TableType"], name: str, location: str, format: str, **kwargs: Any
    ) -> None:
        """
        :keyword type: Table type. Required. Known values are: "Managed" and "External".
        :paramtype type: str or ~microsoft.fabric.api.lakehouse.models.TableType
        :keyword name: Table name. Required.
        :paramtype name: str
        :keyword location: Table location. Required.
        :paramtype location: str
        :keyword format: Table format. Required.
        :paramtype format: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.name = name
        self.location = location
        self.format = format


class TableMaintenanceExecutionData(_serialization.Model):
    """Run on demand lakehouse table maintenance instance payload.

    All required parameters must be populated in order to send to server.

    :ivar table_name: Name of the table to run maintenance on. Max length of 256 character
     alphanumeric string with underscores. Required.
    :vartype table_name: str
    :ivar schema_name: Name of the schema under which the table is created. This property is
     applicable only for a schema enabled Lakehouse. Max length of 128 character alphanumeric string
     with underscores.
    :vartype schema_name: str
    :ivar optimize_settings: Configures the optimization settings of the maintenance job. To skip
     table optimization, leave this parameter empty.
    :vartype optimize_settings: ~microsoft.fabric.api.lakehouse.models.OptimizeSettings
    :ivar vacuum_settings: Configures the `vacuum
     <https://docs.delta.io/latest/delta-utility.html#-delta-vacuum>`_ settings of the maintenance
     job. To skip table vacuum, leave this parameter empty.
    :vartype vacuum_settings: ~microsoft.fabric.api.lakehouse.models.VacuumSettings
    """

    _validation = {
        "table_name": {"required": True, "pattern": r"^(?=[0-9]*[a-zA-Z_])[a-zA-Z0-9_]{1,256}$"},
        "schema_name": {"pattern": r"^(?=[0-9]*[a-zA-Z_])[a-zA-Z0-9_]{1,128}$"},
    }

    _attribute_map = {
        "table_name": {"key": "tableName", "type": "str"},
        "schema_name": {"key": "schemaName", "type": "str"},
        "optimize_settings": {"key": "optimizeSettings", "type": "OptimizeSettings"},
        "vacuum_settings": {"key": "vacuumSettings", "type": "VacuumSettings"},
    }

    def __init__(
        self,
        *,
        table_name: str,
        schema_name: Optional[str] = None,
        optimize_settings: Optional["_models.OptimizeSettings"] = None,
        vacuum_settings: Optional["_models.VacuumSettings"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword table_name: Name of the table to run maintenance on. Max length of 256 character
         alphanumeric string with underscores. Required.
        :paramtype table_name: str
        :keyword schema_name: Name of the schema under which the table is created. This property is
         applicable only for a schema enabled Lakehouse. Max length of 128 character alphanumeric string
         with underscores.
        :paramtype schema_name: str
        :keyword optimize_settings: Configures the optimization settings of the maintenance job. To
         skip table optimization, leave this parameter empty.
        :paramtype optimize_settings: ~microsoft.fabric.api.lakehouse.models.OptimizeSettings
        :keyword vacuum_settings: Configures the `vacuum
         <https://docs.delta.io/latest/delta-utility.html#-delta-vacuum>`_ settings of the maintenance
         job. To skip table vacuum, leave this parameter empty.
        :paramtype vacuum_settings: ~microsoft.fabric.api.lakehouse.models.VacuumSettings
        """
        super().__init__(**kwargs)
        self.table_name = table_name
        self.schema_name = schema_name
        self.optimize_settings = optimize_settings
        self.vacuum_settings = vacuum_settings


class Tables(_serialization.Model):
    """A paginated list of tables.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: Token to get the next page of results.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next chunk in the result set.
    :vartype continuation_uri: str
    :ivar data: List of tables. Required.
    :vartype data: list[~microsoft.fabric.api.lakehouse.models.Table]
    """

    _validation = {
        "data": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "data": {"key": "data", "type": "[Table]"},
    }

    def __init__(
        self,
        *,
        data: List["_models.Table"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: Token to get the next page of results.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next chunk in the result set.
        :paramtype continuation_uri: str
        :keyword data: List of tables. Required.
        :paramtype data: list[~microsoft.fabric.api.lakehouse.models.Table]
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri
        self.data = data


class UpdateScheduleRequest(_serialization.Model):
    """Update item schedule plan request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
    """

    _validation = {
        "enabled": {"required": True},
        "configuration": {"required": True},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
    }

    def __init__(self, *, enabled: bool, configuration: "_models.ScheduleConfig", **kwargs: Any) -> None:
        """
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword configuration: The actual data contains the time/weekdays of this schedule. Required.
        :paramtype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class UpdateLakehouseRefreshMaterializedLakeViewsScheduleRequest(
    UpdateScheduleRequest
):  # pylint: disable=name-too-long
    """Update lakehouse refresh materialized lake views schedule request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.lakehouse.models.ScheduleConfig
    """


class UpdateLakehouseRequest(_serialization.Model):
    """Update lakehouse request.

    :ivar display_name: The lakehouse display name. The display name must follow naming rules
     according to item type.
    :vartype display_name: str
    :ivar description: The lakehouse description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The lakehouse display name. The display name must follow naming rules
         according to item type.
        :paramtype display_name: str
        :keyword description: The lakehouse description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class VacuumSettings(_serialization.Model):
    """Table maintenance `vacuum
    </fabric/data-engineering/lakehouse-table-maintenance#table-maintenance-operations>`_ settings.

    :ivar retention_period: Overrides the default retention period. Unreferenced files or data
     files associated with delta table versions older than the specified retention period are
     removed. This value should follow the pattern of ``d:hh:mm:ss`` where d is the number of days,
     hh is the number of hours between 00 and 23, mm is the number of minutes between 00 and 59, and
     ss is the number of seconds between 00 and 59.
    :vartype retention_period: str
    """

    _validation = {
        "retention_period": {"pattern": r"^(\d+:)?\d{1,2}:\d{1,2}:\d{1,2}$"},
    }

    _attribute_map = {
        "retention_period": {"key": "retentionPeriod", "type": "str"},
    }

    def __init__(self, *, retention_period: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword retention_period: Overrides the default retention period. Unreferenced files or data
         files associated with delta table versions older than the specified retention period are
         removed. This value should follow the pattern of ``d:hh:mm:ss`` where d is the number of days,
         hh is the number of hours between 00 and 23, mm is the number of minutes between 00 and 59, and
         ss is the number of seconds between 00 and 59.
        :paramtype retention_period: str
        """
        super().__init__(**kwargs)
        self.retention_period = retention_period


class WeeklyScheduleConfig(ScheduleConfig):
    """WeeklyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.lakehouse.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    :ivar weekdays: A list of weekdays, at most seven elements are allowed. Required.
    :vartype weekdays: list[str or ~microsoft.fabric.api.lakehouse.models.DayOfWeek]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
        "weekdays": {"required": True, "max_items": 7, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "times": {"key": "times", "type": "[str]"},
        "weekdays": {"key": "weekdays", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        times: List[str],
        weekdays: List[Union[str, "_models.DayOfWeek"]],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        :keyword weekdays: A list of weekdays, at most seven elements are allowed. Required.
        :paramtype weekdays: list[str or ~microsoft.fabric.api.lakehouse.models.DayOfWeek]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Weekly"
        self.times = times
        self.weekdays = weekdays
