# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class DayOfWeek(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Days of the week."""

    MONDAY = "Monday"
    """Monday"""
    TUESDAY = "Tuesday"
    """Tuesday"""
    WEDNESDAY = "Wednesday"
    """Wednesday"""
    THURSDAY = "Thursday"
    """Thursday"""
    FRIDAY = "Friday"
    """Friday"""
    SATURDAY = "Saturday"
    """Saturday"""
    SUNDAY = "Sunday"
    """Sunday"""


class FileFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Data file format name. Additional file format types may be added over time."""

    CSV = "Csv"
    """CSV format name."""
    PARQUET = "Parquet"
    """Parquet format name."""


class GroupType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the group. Additional group types may be added over time."""

    UNKNOWN = "Unknown"
    """Principal group type is unknown."""
    SECURITY_GROUP = "SecurityGroup"
    """Principal is a security group."""
    DISTRIBUTION_LIST = "DistributionList"
    """Principal is a distribution list."""


class ItemReferenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The Item reference type. Additional ``ItemReferenceType`` types may be added over time."""

    BY_ID = "ById"
    """The item is referenced by its ID."""


class ItemType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the item. Additional item types may be added over time."""

    DASHBOARD = "Dashboard"
    """PowerBI dashboard."""
    REPORT = "Report"
    """PowerBI report."""
    SEMANTIC_MODEL = "SemanticModel"
    """PowerBI semantic model."""
    PAGINATED_REPORT = "PaginatedReport"
    """PowerBI paginated report."""
    DATAMART = "Datamart"
    """PowerBI datamart."""
    LAKEHOUSE = "Lakehouse"
    """A lakehouse."""
    EVENTHOUSE = "Eventhouse"
    """An eventhouse."""
    ENVIRONMENT = "Environment"
    """An environment."""
    KQL_DATABASE = "KQLDatabase"
    """A KQL database."""
    KQL_QUERYSET = "KQLQueryset"
    """A KQL queryset."""
    KQL_DASHBOARD = "KQLDashboard"
    """A KQL dashboard."""
    DATA_PIPELINE = "DataPipeline"
    """A data pipeline."""
    NOTEBOOK = "Notebook"
    """A notebook."""
    SPARK_JOB_DEFINITION = "SparkJobDefinition"
    """A spark job definition."""
    ML_EXPERIMENT = "MLExperiment"
    """A machine learning experiment."""
    ML_MODEL = "MLModel"
    """A machine learning model."""
    WAREHOUSE = "Warehouse"
    """A warehouse."""
    EVENTSTREAM = "Eventstream"
    """An eventstream."""
    SQL_ENDPOINT = "SQLEndpoint"
    """An SQL endpoint."""
    MIRRORED_WAREHOUSE = "MirroredWarehouse"
    """A mirrored warehouse."""
    MIRRORED_DATABASE = "MirroredDatabase"
    """A mirrored database."""
    REFLEX = "Reflex"
    """A Reflex."""
    GRAPH_QL_API = "GraphQLApi"
    """An API for GraphQL item."""
    MOUNTED_DATA_FACTORY = "MountedDataFactory"
    """A MountedDataFactory."""
    APACHE_AIRFLOW_JOB = "ApacheAirflowJob"
    """An ApacheAirflowJob."""
    SQL_DATABASE = "SQLDatabase"
    """A SQLDatabase."""
    COPY_JOB = "CopyJob"
    """A Copy job."""
    VARIABLE_LIBRARY = "VariableLibrary"
    """A VariableLibrary."""
    MIRRORED_AZURE_DATABRICKS_CATALOG = "MirroredAzureDatabricksCatalog"
    """A mirrored azure databricks catalog."""
    DATAFLOW = "Dataflow"
    """A Dataflow."""
    WAREHOUSE_SNAPSHOT = "WarehouseSnapshot"
    """A Warehouse snapshot."""
    DIGITAL_TWIN_BUILDER = "DigitalTwinBuilder"
    """A DigitalTwinBuilder."""
    DIGITAL_TWIN_BUILDER_FLOW = "DigitalTwinBuilderFlow"
    """A Digital Twin Builder Flow."""
    ANOMALY_DETECTOR = "AnomalyDetector"
    """An Anomaly Detector."""
    MAP = "Map"
    """A Map."""
    USER_DATA_FUNCTION = "UserDataFunction"
    """A User Data Function."""


class JobType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of the job. Values are: ``Unknown``\\ , ``SparkSession``\\ , ``SparkBatch``\\ ,
    ``JupyterSession``. Additional ``LivySessionJobType`` types may be added over time.
    """

    UNKNOWN = "Unknown"
    """Job type is unknown."""
    SPARK_SESSION = "SparkSession"
    """Job type is from a spark session."""
    SPARK_BATCH = "SparkBatch"
    """Job type is from a spark batch."""
    JUPYTER_SESSION = "JupyterSession"
    """Job type is from jupyter session."""


class ModeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The load table operation mode, overwrite or append. Additional mode types may be added over
    time.
    """

    OVERWRITE = "Overwrite"
    """load table in overwrite mode."""
    APPEND = "Append"
    """load table in append mode."""


class OccurrenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """An enumerator that lists the day for triggering jobs. Additional types may be added over time."""

    DAY_OF_MONTH = "DayOfMonth"
    """A date."""
    ORDINAL_WEEKDAY = "OrdinalWeekday"
    """A day."""


class Origin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Origin of the job. Values are: ``SubmittedJob``\\ , ``PendingJob``. Additional
    ``LivySessionOrigin`` types may be added over time.
    """

    SUBMITTED_JOB = "SubmittedJob"
    """Job is coming from submitted data source."""
    PENDING_JOB = "PendingJob"
    """Job is coming from pending data source."""


class PathType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of ``relativePath``\\ , either file or folder. Additional ``PathType`` types may be
    added over time.
    """

    FILE = "File"
    """load table from file."""
    FOLDER = "Folder"
    """load table from folder."""


class PrincipalType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the principal. Additional principal types may be added over time."""

    USER = "User"
    """Principal is a Microsoft Entra user principal."""
    SERVICE_PRINCIPAL = "ServicePrincipal"
    """Principal is a Microsoft Entra service principal."""
    GROUP = "Group"
    """Principal is a security group."""
    SERVICE_PRINCIPAL_PROFILE = "ServicePrincipalProfile"
    """Principal is a service principal profile."""
    ENTIRE_TENANT = "EntireTenant"
    """Principal represents all tenant users."""


class ScheduleType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of schedule configuration. Additional types may be added over time."""

    CRON = "Cron"
    """Triggers a job periodically."""
    DAILY = "Daily"
    """Triggers a job daily."""
    WEEKLY = "Weekly"
    """Triggers a job weekly."""
    MONTHLY = "Monthly"
    """Triggers a job monthly."""


class SqlEndpointProvisioningStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The SQL endpoint provisioning status type. Additional ``SqlEndpointProvisioningStatus`` types
    may be added over time.
    """

    IN_PROGRESS = "InProgress"
    """SQL endpoint provisioning is in progress."""
    SUCCESS = "Success"
    """SQL endpoint provisioning succeeded."""
    FAILED = "Failed"
    """SQL endpoint provisioning failed."""


class State(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Current state of the job. Values are: ``NotStarted``\\ , ``InProgress``\\ , ``Cancelled``\\ ,
    ``Succeeded``\\ , ``Stopped``\\ , ``Failed``\\ , ``Unknown``. Additional ``LivySessionState``
    types may be added over time.
    """

    IN_PROGRESS = "InProgress"
    """Job is in running or is cancelling state."""
    CANCELLED = "Cancelled"
    """Job got cancelled."""
    NOT_STARTED = "NotStarted"
    """Job is queued, is starting or in library packaging state."""
    SUCCEEDED = "Succeeded"
    """Job has stopped or is in success state."""
    FAILED = "Failed"
    """Job failed or its session timed out."""
    UNKNOWN = "Unknown"
    """Job is in invalid state."""


class TableType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The table type. Additional ``TableType`` types may be added over time."""

    MANAGED = "Managed"
    """Managed table."""
    EXTERNAL = "External"
    """External table."""


class TimeUnit(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The unit of time for the duration. Additional duration types may be added over time."""

    SECONDS = "Seconds"
    """Duration in seconds."""
    MINUTES = "Minutes"
    """Duration in minutes."""
    HOURS = "Hours"
    """Duration in hours."""
    DAYS = "Days"
    """Duration in days."""


class WeekIndex(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The week of the month."""

    FIRST = "First"
    """First."""
    SECOND = "Second"
    """Second."""
    THIRD = "Third"
    """Third."""
    FOURTH = "Fourth"
    """Fourth."""
    FIFTH = "Fifth"
    """Fifth."""
