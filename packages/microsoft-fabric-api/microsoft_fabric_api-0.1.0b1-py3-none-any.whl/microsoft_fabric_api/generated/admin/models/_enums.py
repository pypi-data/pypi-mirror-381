# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AssignmentMethod(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies whether the assigned label was set by an automated process or manually. Additional
    tenant setting property types may be added over time.
    """

    STANDARD = "Standard"
    """The label was set by an automated process (default value)."""
    PRIVILEDGED = "Priviledged"
    """The label was set manually."""


class Category(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The category of the item type. Additional category types may be added over time."""

    ITEM = "Item"
    """Fabric items such as Notebook, Synapse and KQL Database."""


class ContributorsScopeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The contributor scope. Additional contributor scopes may be added over time."""

    ALL_TENANT = "AllTenant"
    """All the tenant's users."""
    SPECIFIC_USERS_AND_GROUPS = "SpecificUsersAndGroups"
    """Specific users and groups."""
    ADMINS_ONLY = "AdminsOnly"
    """Tenant and domain admins only."""


class DelegatedFrom(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The Fabric component (workspace, capacity or domain) that the tenant setting was delegated
    from. Additional ``DelegatedFrom`` may be added over time.
    """

    TENANT = "Tenant"
    """The setting is delegated from a tenant."""
    CAPACITY = "Capacity"
    """The setting is delegated from a capacity."""
    DOMAIN = "Domain"
    """The setting is delegated from a domain."""


class DomainRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Represents the domain members by the principal's request type. Additional request types may be
    added over time.
    """

    ADMIN = "Admin"
    """Domain admin."""
    CONTRIBUTOR = "Contributor"
    """Domain contributor."""


class ExternalDataShareStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of a given external data share. Additional ``ExternalDataShareStatus`` types may be
    added over time.
    """

    PENDING = "Pending"
    """An invitation was created and is now pending acceptance by the recipient."""
    ACTIVE = "Active"
    """The invitation has been accepted by the recipient and the external data share is active."""
    REVOKED = "Revoked"
    """The external data share was revoked."""
    INVITATION_EXPIRED = "InvitationExpired"
    """The invitation expired and can no longer be accepted by the recipient."""


class GitProviderType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Git provider type. Additional provider types may be added over time."""

    AZURE_DEV_OPS = "AzureDevOps"
    """Azure DevOps provider"""
    GIT_HUB = "GitHub"
    """GitHub provider"""


class GroupType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the group. Additional group types may be added over time."""

    UNKNOWN = "Unknown"
    """Principal group type is unknown."""
    SECURITY_GROUP = "SecurityGroup"
    """Principal is a security group."""
    DISTRIBUTION_LIST = "DistributionList"
    """Principal is a distribution list."""


class ItemPermissions(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Item permissions. Additional item permissions may be added over time."""

    READ = "Read"
    """User can read the metadata about an item."""
    WRITE = "Write"
    """User can perform write operations on an item."""
    RESHARE = "Reshare"
    """User can share an item with other users."""
    EXPLORE = "Explore"
    """User can build items on other items."""
    EXECUTE = "Execute"
    """User can execute and cancel item jobs."""


class ItemState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The item state. Additional item states may be added over time."""

    ACTIVE = "Active"
    """An active item."""


class ItemType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the item. Additional item types may be added over time."""

    DASHBOARD = "Dashboard"
    """PowerBI dashboard."""
    REPORT = "Report"
    """PowerBI report."""
    SEMANTIC_MODEL = "SemanticModel"
    """PowerBI semantic model."""
    PAGINATED_REPORT = "PaginatedReport"
    """PowerBI paginated report."""
    DATAMART = "Datamart"
    """PowerBI datamart."""
    LAKEHOUSE = "Lakehouse"
    """A lakehouse."""
    EVENTHOUSE = "Eventhouse"
    """An eventhouse."""
    ENVIRONMENT = "Environment"
    """An environment."""
    KQL_DATABASE = "KQLDatabase"
    """A KQL database."""
    KQL_QUERYSET = "KQLQueryset"
    """A KQL queryset."""
    KQL_DASHBOARD = "KQLDashboard"
    """A KQL dashboard."""
    DATA_PIPELINE = "DataPipeline"
    """A data pipeline."""
    NOTEBOOK = "Notebook"
    """A notebook."""
    SPARK_JOB_DEFINITION = "SparkJobDefinition"
    """A spark job definition."""
    ML_EXPERIMENT = "MLExperiment"
    """A machine learning experiment."""
    ML_MODEL = "MLModel"
    """A machine learning model."""
    WAREHOUSE = "Warehouse"
    """A warehouse."""
    EVENTSTREAM = "Eventstream"
    """An eventstream."""
    SQL_ENDPOINT = "SQLEndpoint"
    """An SQL endpoint."""
    MIRRORED_WAREHOUSE = "MirroredWarehouse"
    """A mirrored warehouse."""
    MIRRORED_DATABASE = "MirroredDatabase"
    """A mirrored database."""
    REFLEX = "Reflex"
    """A Reflex."""
    GRAPH_QL_API = "GraphQLApi"
    """An API for GraphQL item."""
    MOUNTED_DATA_FACTORY = "MountedDataFactory"
    """A MountedDataFactory."""
    APACHE_AIRFLOW_JOB = "ApacheAirflowJob"
    """An ApacheAirflowJob."""
    SQL_DATABASE = "SQLDatabase"
    """A SQLDatabase."""
    COPY_JOB = "CopyJob"
    """A Copy job."""
    VARIABLE_LIBRARY = "VariableLibrary"
    """A VariableLibrary."""
    MIRRORED_AZURE_DATABRICKS_CATALOG = "MirroredAzureDatabricksCatalog"
    """A mirrored azure databricks catalog."""
    DATAFLOW = "Dataflow"
    """A Dataflow."""
    WAREHOUSE_SNAPSHOT = "WarehouseSnapshot"
    """A Warehouse snapshot."""
    DIGITAL_TWIN_BUILDER = "DigitalTwinBuilder"
    """A DigitalTwinBuilder."""
    DIGITAL_TWIN_BUILDER_FLOW = "DigitalTwinBuilderFlow"
    """A Digital Twin Builder Flow."""
    ANOMALY_DETECTOR = "AnomalyDetector"
    """An Anomaly Detector."""
    MAP = "Map"
    """A Map."""
    USER_DATA_FUNCTION = "UserDataFunction"
    """A User Data Function."""


class PrincipalType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the principal. Additional principal types may be added over time."""

    USER = "User"
    """Principal is a Microsoft Entra user principal."""
    SERVICE_PRINCIPAL = "ServicePrincipal"
    """Principal is a Microsoft Entra service principal."""
    GROUP = "Group"
    """Principal is a security group."""
    SERVICE_PRINCIPAL_PROFILE = "ServicePrincipalProfile"
    """Principal is a service principal profile."""
    ENTIRE_TENANT = "EntireTenant"
    """Principal represents all tenant users."""


class SharingLinksRemovalStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of removal of sharing links. Additional ``SharingLinksRemovalStatus`` types may be
    added over time.
    """

    NOT_FOUND = "NotFound"
    """The Fabric item ID, label or type wasn't found."""
    SUCCEEDED = "Succeeded"
    """All sharing links were removed."""


class SharingLinkType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies the type of sharing link that is required to be deleted for each Fabric item.
    Additional sharing link types may be added over time.
    """

    ORG_LINK = "OrgLink"
    """The sharing link grants access to entire organization (default value)."""


class Status(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of an information protection label change operation. Additional tenant setting
    property types may be added over time.
    """

    FAILED = "Failed"
    """Failed to set a new label. Please retry."""
    FAILED_TO_GET_USAGE_RIGHTS = "FailedToGetUsageRights"
    """Failed to set a new label. The Fabric item has a sensitivity label with protection settings,
    and Fabric was unable to verify that the user has sufficient usage rights to change the label."""
    INSUFFICIENT_USAGE_RIGHTS = "InsufficientUsageRights"
    """Failed to set a new label. The Fabric item has a sensitivity label with protection settings,
    and the admin user (and the delegated user, if provided) doesn't have sufficient usage rights
    to change the label."""
    NOT_FOUND = "NotFound"
    """The Fabric item ID, label or type wasn't found."""
    SUCCEEDED = "Succeeded"
    """The Fabric item label was changed."""


class TagScopeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Denotes tag scope. Additional tag scopes may be added over time."""

    TENANT = "Tenant"
    """Tag is a tenant level tag."""
    DOMAIN = "Domain"
    """Tag is a domain level tag."""


class TenantSettingPropertyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Tenant setting property type. Additional tenant setting property types may be added over time."""

    FREE_TEXT = "FreeText"
    """UI accepts any string for the text box."""
    URL = "Url"
    """UI accepts only URLs for the text box."""
    BOOLEAN = "Boolean"
    """A checkbox in the UI."""
    MAIL_ENABLED_SECURITY_GROUP = "MailEnabledSecurityGroup"
    """UI accepts only email enabled security groups for the text box."""
    INTEGER = "Integer"
    """UI accepts only integers for the text box."""


class WorkspaceRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Workspace role. Additional workspace roles may be added over time."""

    ADMIN = "Admin"
    """Enables administrative access to the workspace."""
    MEMBER = "Member"
    """Enables membership access to the workspace."""
    CONTRIBUTOR = "Contributor"
    """Enables contribution to the workspace."""
    VIEWER = "Viewer"
    """Enables viewing of the workspace."""


class WorkspaceState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The workspace state. Additional workspace states may be added over time."""

    ACTIVE = "Active"
    """The workspace is active. Orphaned workspaces are displayed as active."""
    DELETED = "Deleted"
    """The workspace is deleted."""


class WorkspaceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A workspace type. Additional workspace types may be added over time."""

    PERSONAL = "Personal"
    """My folder or My workspace used to manage user items."""
    WORKSPACE = "Workspace"
    """Workspace used to manage the Fabric items."""
    ADMIN_WORKSPACE = "AdminWorkspace"
    """Admin monitoring workspace. Contains admin reports such as the audit report and the usage and
    adoption report."""
