# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AccessEntity(_serialization.Model):
    """Access details for the given user.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar display_name: Entity name.
    :vartype display_name: str
    :ivar id: The object ID of the entity.
    :vartype id: str
    :ivar category: Entity category such as item. "Item"
    :vartype category: str or ~microsoft.fabric.api.admin.models.Category
    :ivar type: Entity type.
    :vartype type: str
    :ivar item_access_details: Item permissions.
    :vartype item_access_details: ~microsoft.fabric.api.admin.models.ItemAccessDetail
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "category": {"key": "category", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "item_access_details": {"key": "itemAccessDetails", "type": "ItemAccessDetail"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        category: Optional[Union[str, "_models.Category"]] = None,
        type: Optional[str] = None,
        item_access_details: Optional["_models.ItemAccessDetail"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: Entity name.
        :paramtype display_name: str
        :keyword category: Entity category such as item. "Item"
        :paramtype category: str or ~microsoft.fabric.api.admin.models.Category
        :keyword type: Entity type.
        :paramtype type: str
        :keyword item_access_details: Item permissions.
        :paramtype item_access_details: ~microsoft.fabric.api.admin.models.ItemAccessDetail
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.id = None
        self.category = category
        self.type = type
        self.item_access_details = item_access_details


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class AccessEntityResponse(PaginatedResponse):
    """A list of entities and permissions.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar access_entities: A list of users with access to an entity.
    :vartype access_entities: list[~microsoft.fabric.api.admin.models.AccessEntity]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "access_entities": {"key": "accessEntities", "type": "[AccessEntity]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        access_entities: Optional[List["_models.AccessEntity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword access_entities: A list of users with access to an entity.
        :paramtype access_entities: list[~microsoft.fabric.api.admin.models.AccessEntity]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.access_entities = access_entities


class AdminTagInfo(_serialization.Model):
    """Represents a tag.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag object ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    :ivar scope: Represents a tag scope. Required.
    :vartype scope: ~microsoft.fabric.api.admin.models.TagScope
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
        "scope": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "scope": {"key": "scope", "type": "TagScope"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        scope: "_models.TagScope",
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The tag object ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        :keyword scope: Represents a tag scope. Required.
        :paramtype scope: ~microsoft.fabric.api.admin.models.TagScope
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.scope = scope


class AdminTagsInfo(PaginatedResponse):
    """A response wrapper for a list of tags.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: An array of tags. Required.
    :vartype value: list[~microsoft.fabric.api.admin.models.AdminTagInfo]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[AdminTagInfo]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.AdminTagInfo"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: An array of tags. Required.
        :paramtype value: list[~microsoft.fabric.api.admin.models.AdminTagInfo]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class AssignDomainWorkspacesByCapacitiesRequest(_serialization.Model):  # pylint: disable=name-too-long
    """The request payload for assigning workspaces to a domain by capacity.

    :ivar capacities_ids: The capacity IDs.
    :vartype capacities_ids: list[str]
    """

    _attribute_map = {
        "capacities_ids": {"key": "capacitiesIds", "type": "[str]"},
    }

    def __init__(self, *, capacities_ids: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword capacities_ids: The capacity IDs.
        :paramtype capacities_ids: list[str]
        """
        super().__init__(**kwargs)
        self.capacities_ids = capacities_ids


class AssignDomainWorkspacesByIdsRequest(_serialization.Model):
    """The request payload for assigning workspaces to a domain by workspace ID.

    :ivar workspaces_ids: The workspace IDs that will be assigned to that domain.
    :vartype workspaces_ids: list[str]
    """

    _attribute_map = {
        "workspaces_ids": {"key": "workspacesIds", "type": "[str]"},
    }

    def __init__(self, *, workspaces_ids: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword workspaces_ids: The workspace IDs that will be assigned to that domain.
        :paramtype workspaces_ids: list[str]
        """
        super().__init__(**kwargs)
        self.workspaces_ids = workspaces_ids


class AssignDomainWorkspacesByPrincipalsRequest(_serialization.Model):  # pylint: disable=name-too-long
    """The request payload for assigning workspaces to a domain by principal.

    :ivar principals: The principals that are admins of the workspaces.
    :vartype principals: list[~microsoft.fabric.api.admin.models.Principal]
    """

    _attribute_map = {
        "principals": {"key": "principals", "type": "[Principal]"},
    }

    def __init__(self, *, principals: Optional[List["_models.Principal"]] = None, **kwargs: Any) -> None:
        """
        :keyword principals: The principals that are admins of the workspaces.
        :paramtype principals: list[~microsoft.fabric.api.admin.models.Principal]
        """
        super().__init__(**kwargs)
        self.principals = principals


class GitProviderDetails(_serialization.Model):
    """The Git provider details.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureDevOpsDetails, GitHubDetails

    All required parameters must be populated in order to send to server.

    :ivar git_provider_type: A Git provider type. Additional provider types may be added over time.
     Required. Known values are: "AzureDevOps" and "GitHub".
    :vartype git_provider_type: str or ~microsoft.fabric.api.admin.models.GitProviderType
    :ivar repository_name: The repository name. Maximum length is 128 characters. Required.
    :vartype repository_name: str
    :ivar branch_name: The branch name. Maximum length is 250 characters. Required.
    :vartype branch_name: str
    :ivar directory_name: The relative path to the directory. Maximum length is 256 characters.
     Required.
    :vartype directory_name: str
    """

    _validation = {
        "git_provider_type": {"required": True},
        "repository_name": {"required": True, "max_length": 128},
        "branch_name": {"required": True, "max_length": 250},
        "directory_name": {"required": True, "max_length": 256},
    }

    _attribute_map = {
        "git_provider_type": {"key": "gitProviderType", "type": "str"},
        "repository_name": {"key": "repositoryName", "type": "str"},
        "branch_name": {"key": "branchName", "type": "str"},
        "directory_name": {"key": "directoryName", "type": "str"},
    }

    _subtype_map = {"git_provider_type": {"AzureDevOps": "AzureDevOpsDetails", "GitHub": "GitHubDetails"}}

    def __init__(self, *, repository_name: str, branch_name: str, directory_name: str, **kwargs: Any) -> None:
        """
        :keyword repository_name: The repository name. Maximum length is 128 characters. Required.
        :paramtype repository_name: str
        :keyword branch_name: The branch name. Maximum length is 250 characters. Required.
        :paramtype branch_name: str
        :keyword directory_name: The relative path to the directory. Maximum length is 256 characters.
         Required.
        :paramtype directory_name: str
        """
        super().__init__(**kwargs)
        self.git_provider_type: Optional[str] = None
        self.repository_name = repository_name
        self.branch_name = branch_name
        self.directory_name = directory_name


class AzureDevOpsDetails(GitProviderDetails):
    """Azure DevOps provider details.

    All required parameters must be populated in order to send to server.

    :ivar git_provider_type: A Git provider type. Additional provider types may be added over time.
     Required. Known values are: "AzureDevOps" and "GitHub".
    :vartype git_provider_type: str or ~microsoft.fabric.api.admin.models.GitProviderType
    :ivar repository_name: The repository name. Maximum length is 128 characters. Required.
    :vartype repository_name: str
    :ivar branch_name: The branch name. Maximum length is 250 characters. Required.
    :vartype branch_name: str
    :ivar directory_name: The relative path to the directory. Maximum length is 256 characters.
     Required.
    :vartype directory_name: str
    :ivar organization_name: The organization name. Maximum length is 100 characters. Required.
    :vartype organization_name: str
    :ivar project_name: The project name. Maximum length is 100 characters. Required.
    :vartype project_name: str
    """

    _validation = {
        "git_provider_type": {"required": True},
        "repository_name": {"required": True, "max_length": 128},
        "branch_name": {"required": True, "max_length": 250},
        "directory_name": {"required": True, "max_length": 256},
        "organization_name": {"required": True, "max_length": 100},
        "project_name": {"required": True, "max_length": 100},
    }

    _attribute_map = {
        "git_provider_type": {"key": "gitProviderType", "type": "str"},
        "repository_name": {"key": "repositoryName", "type": "str"},
        "branch_name": {"key": "branchName", "type": "str"},
        "directory_name": {"key": "directoryName", "type": "str"},
        "organization_name": {"key": "organizationName", "type": "str"},
        "project_name": {"key": "projectName", "type": "str"},
    }

    def __init__(
        self,
        *,
        repository_name: str,
        branch_name: str,
        directory_name: str,
        organization_name: str,
        project_name: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword repository_name: The repository name. Maximum length is 128 characters. Required.
        :paramtype repository_name: str
        :keyword branch_name: The branch name. Maximum length is 250 characters. Required.
        :paramtype branch_name: str
        :keyword directory_name: The relative path to the directory. Maximum length is 256 characters.
         Required.
        :paramtype directory_name: str
        :keyword organization_name: The organization name. Maximum length is 100 characters. Required.
        :paramtype organization_name: str
        :keyword project_name: The project name. Maximum length is 100 characters. Required.
        :paramtype project_name: str
        """
        super().__init__(
            repository_name=repository_name, branch_name=branch_name, directory_name=directory_name, **kwargs
        )
        self.git_provider_type: str = "AzureDevOps"
        self.organization_name = organization_name
        self.project_name = project_name


class BaseTenantSetting(_serialization.Model):
    """The base object of tenant setting details.

    All required parameters must be populated in order to send to server.

    :ivar setting_name: The name of the tenant setting. Required.
    :vartype setting_name: str
    :ivar title: The title of the tenant setting. Required.
    :vartype title: str
    :ivar enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
    :vartype enabled: bool
    :ivar can_specify_security_groups: Indicates if the tenant setting is enabled for a security
     group. False - The tenant setting is enabled for the entire organization. True - The tenant
     setting is enabled for security groups. Required.
    :vartype can_specify_security_groups: bool
    :ivar enabled_security_groups: A list of enabled security groups.
    :vartype enabled_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar excluded_security_groups: A list of excluded security groups.
    :vartype excluded_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar tenant_setting_group: Tenant setting group name.
    :vartype tenant_setting_group: str
    :ivar properties: Tenant setting properties.
    :vartype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
    """

    _validation = {
        "setting_name": {"required": True},
        "title": {"required": True},
        "enabled": {"required": True},
        "can_specify_security_groups": {"required": True},
    }

    _attribute_map = {
        "setting_name": {"key": "settingName", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "can_specify_security_groups": {"key": "canSpecifySecurityGroups", "type": "bool"},
        "enabled_security_groups": {"key": "enabledSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "excluded_security_groups": {"key": "excludedSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "tenant_setting_group": {"key": "tenantSettingGroup", "type": "str"},
        "properties": {"key": "properties", "type": "[TenantSettingProperty]"},
    }

    def __init__(
        self,
        *,
        setting_name: str,
        title: str,
        enabled: bool,
        can_specify_security_groups: bool,
        enabled_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        excluded_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        tenant_setting_group: Optional[str] = None,
        properties: Optional[List["_models.TenantSettingProperty"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword setting_name: The name of the tenant setting. Required.
        :paramtype setting_name: str
        :keyword title: The title of the tenant setting. Required.
        :paramtype title: str
        :keyword enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
        :paramtype enabled: bool
        :keyword can_specify_security_groups: Indicates if the tenant setting is enabled for a security
         group. False - The tenant setting is enabled for the entire organization. True - The tenant
         setting is enabled for security groups. Required.
        :paramtype can_specify_security_groups: bool
        :keyword enabled_security_groups: A list of enabled security groups.
        :paramtype enabled_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword excluded_security_groups: A list of excluded security groups.
        :paramtype excluded_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword tenant_setting_group: Tenant setting group name.
        :paramtype tenant_setting_group: str
        :keyword properties: Tenant setting properties.
        :paramtype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
        """
        super().__init__(**kwargs)
        self.setting_name = setting_name
        self.title = title
        self.enabled = enabled
        self.can_specify_security_groups = can_specify_security_groups
        self.enabled_security_groups = enabled_security_groups
        self.excluded_security_groups = excluded_security_groups
        self.tenant_setting_group = tenant_setting_group
        self.properties = properties


class BulkRemoveSharingLinksRequest(_serialization.Model):
    """A list of items for which all sharing links and related access is required to be removed. Also
    accepts the type of sharing link to be removed.

    All required parameters must be populated in order to send to server.

    :ivar items: A list of items. The list includes item ID and type. Required.
    :vartype items: list[~microsoft.fabric.api.admin.models.ItemInfo]
    :ivar sharing_link_type: Specifies the type of sharing link that is required to be deleted for
     each Fabric item. Additional sharing link types may be added over time. Required. "OrgLink"
    :vartype sharing_link_type: str or ~microsoft.fabric.api.admin.models.SharingLinkType
    """

    _validation = {
        "items": {"required": True},
        "sharing_link_type": {"required": True},
    }

    _attribute_map = {
        "items": {"key": "items", "type": "[ItemInfo]"},
        "sharing_link_type": {"key": "sharingLinkType", "type": "str"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ItemInfo"],
        sharing_link_type: Union[str, "_models.SharingLinkType"],
        **kwargs: Any
    ) -> None:
        """
        :keyword items: A list of items. The list includes item ID and type. Required.
        :paramtype items: list[~microsoft.fabric.api.admin.models.ItemInfo]
        :keyword sharing_link_type: Specifies the type of sharing link that is required to be deleted
         for each Fabric item. Additional sharing link types may be added over time. Required. "OrgLink"
        :paramtype sharing_link_type: str or ~microsoft.fabric.api.admin.models.SharingLinkType
        """
        super().__init__(**kwargs)
        self.items = items
        self.sharing_link_type = sharing_link_type


class BulkRemoveSharingLinksResponse(_serialization.Model):
    """A list of the unique IDs and sharing links removal status of the Fabric items in remove sharing
    links request.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar items_remove_sharing_links_status: A list of items remove sharing link status.
    :vartype items_remove_sharing_links_status:
     list[~microsoft.fabric.api.admin.models.ItemRemoveSharingLinksStatus]
    :ivar sharing_link_type: Specifies the type of sharing link that is requested for deletion for
     each Fabric item. Additional sharing link types may be added over time. "OrgLink"
    :vartype sharing_link_type: str or ~microsoft.fabric.api.admin.models.SharingLinkType
    """

    _validation = {
        "sharing_link_type": {"readonly": True},
    }

    _attribute_map = {
        "items_remove_sharing_links_status": {
            "key": "itemsRemoveSharingLinksStatus",
            "type": "[ItemRemoveSharingLinksStatus]",
        },
        "sharing_link_type": {"key": "sharingLinkType", "type": "str"},
    }

    def __init__(
        self,
        *,
        items_remove_sharing_links_status: Optional[List["_models.ItemRemoveSharingLinksStatus"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword items_remove_sharing_links_status: A list of items remove sharing link status.
        :paramtype items_remove_sharing_links_status:
         list[~microsoft.fabric.api.admin.models.ItemRemoveSharingLinksStatus]
        """
        super().__init__(**kwargs)
        self.items_remove_sharing_links_status = items_remove_sharing_links_status
        self.sharing_link_type = None


class CapacityTenantSetting(BaseTenantSetting):
    """Capacity tenant setting details.

    All required parameters must be populated in order to send to server.

    :ivar setting_name: The name of the tenant setting. Required.
    :vartype setting_name: str
    :ivar title: The title of the tenant setting. Required.
    :vartype title: str
    :ivar enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
    :vartype enabled: bool
    :ivar can_specify_security_groups: Indicates if the tenant setting is enabled for a security
     group. False - The tenant setting is enabled for the entire organization. True - The tenant
     setting is enabled for security groups. Required.
    :vartype can_specify_security_groups: bool
    :ivar enabled_security_groups: A list of enabled security groups.
    :vartype enabled_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar excluded_security_groups: A list of excluded security groups.
    :vartype excluded_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar tenant_setting_group: Tenant setting group name.
    :vartype tenant_setting_group: str
    :ivar properties: Tenant setting properties.
    :vartype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
    :ivar delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
     workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
     admin can override the tenant setting.
    :vartype delegate_to_workspace: bool
    :ivar delegated_from: Tenant setting delegated from tenant, capacity or domain. Known values
     are: "Tenant", "Capacity", and "Domain".
    :vartype delegated_from: str or ~microsoft.fabric.api.admin.models.DelegatedFrom
    """

    _validation = {
        "setting_name": {"required": True},
        "title": {"required": True},
        "enabled": {"required": True},
        "can_specify_security_groups": {"required": True},
    }

    _attribute_map = {
        "setting_name": {"key": "settingName", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "can_specify_security_groups": {"key": "canSpecifySecurityGroups", "type": "bool"},
        "enabled_security_groups": {"key": "enabledSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "excluded_security_groups": {"key": "excludedSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "tenant_setting_group": {"key": "tenantSettingGroup", "type": "str"},
        "properties": {"key": "properties", "type": "[TenantSettingProperty]"},
        "delegate_to_workspace": {"key": "delegateToWorkspace", "type": "bool"},
        "delegated_from": {"key": "delegatedFrom", "type": "str"},
    }

    def __init__(
        self,
        *,
        setting_name: str,
        title: str,
        enabled: bool,
        can_specify_security_groups: bool,
        enabled_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        excluded_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        tenant_setting_group: Optional[str] = None,
        properties: Optional[List["_models.TenantSettingProperty"]] = None,
        delegate_to_workspace: Optional[bool] = None,
        delegated_from: Optional[Union[str, "_models.DelegatedFrom"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword setting_name: The name of the tenant setting. Required.
        :paramtype setting_name: str
        :keyword title: The title of the tenant setting. Required.
        :paramtype title: str
        :keyword enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
        :paramtype enabled: bool
        :keyword can_specify_security_groups: Indicates if the tenant setting is enabled for a security
         group. False - The tenant setting is enabled for the entire organization. True - The tenant
         setting is enabled for security groups. Required.
        :paramtype can_specify_security_groups: bool
        :keyword enabled_security_groups: A list of enabled security groups.
        :paramtype enabled_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword excluded_security_groups: A list of excluded security groups.
        :paramtype excluded_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword tenant_setting_group: Tenant setting group name.
        :paramtype tenant_setting_group: str
        :keyword properties: Tenant setting properties.
        :paramtype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
        :keyword delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
         workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
         admin can override the tenant setting.
        :paramtype delegate_to_workspace: bool
        :keyword delegated_from: Tenant setting delegated from tenant, capacity or domain. Known values
         are: "Tenant", "Capacity", and "Domain".
        :paramtype delegated_from: str or ~microsoft.fabric.api.admin.models.DelegatedFrom
        """
        super().__init__(
            setting_name=setting_name,
            title=title,
            enabled=enabled,
            can_specify_security_groups=can_specify_security_groups,
            enabled_security_groups=enabled_security_groups,
            excluded_security_groups=excluded_security_groups,
            tenant_setting_group=tenant_setting_group,
            properties=properties,
            **kwargs
        )
        self.delegate_to_workspace = delegate_to_workspace
        self.delegated_from = delegated_from


class CapacityTenantSettingOverride(_serialization.Model):
    """A capacity admin can override the tenant setting.

    :ivar id: The ID of a capacity.
    :vartype id: str
    :ivar tenant_settings: A list of capacity tenant settings.
    :vartype tenant_settings: list[~microsoft.fabric.api.admin.models.CapacityTenantSetting]
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "tenant_settings": {"key": "tenantSettings", "type": "[CapacityTenantSetting]"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        tenant_settings: Optional[List["_models.CapacityTenantSetting"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The ID of a capacity.
        :paramtype id: str
        :keyword tenant_settings: A list of capacity tenant settings.
        :paramtype tenant_settings: list[~microsoft.fabric.api.admin.models.CapacityTenantSetting]
        """
        super().__init__(**kwargs)
        self.id = id
        self.tenant_settings = tenant_settings


class CapacityTenantSettingOverrides(PaginatedResponse):
    """A list of tenant settings overrides.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of tenant settings that were overridden by capacity admin.
    :vartype value: list[~microsoft.fabric.api.admin.models.CapacityTenantSettingOverride]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[CapacityTenantSettingOverride]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.CapacityTenantSettingOverride"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of tenant settings that were overridden by capacity admin.
        :paramtype value: list[~microsoft.fabric.api.admin.models.CapacityTenantSettingOverride]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class CapacityTenantSettingsByCapacityIdResponse(PaginatedResponse):  # pylint: disable=name-too-long
    """A list of tenant settings overrides for given capacityId.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of tenant settings that were overridden by capacity admin for given
     capacityId.
    :vartype value: list[~microsoft.fabric.api.admin.models.CapacityTenantSetting]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[CapacityTenantSetting]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.CapacityTenantSetting"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of tenant settings that were overridden by capacity admin for given
         capacityId.
        :paramtype value: list[~microsoft.fabric.api.admin.models.CapacityTenantSetting]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class CreateDomainRequest(_serialization.Model):
    """The request payload for creating a domain or subdomain.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The domain display name.
     The display name cannot contain more than 40 characters. Required.
    :vartype display_name: str
    :ivar description: The domain description.
     The description cannot contain more than 256 characters.
    :vartype description: str
    :ivar parent_domain_id: The domain parent object ID.
    :vartype parent_domain_id: str
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "parent_domain_id": {"key": "parentDomainId", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        parent_domain_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The domain display name.
         The display name cannot contain more than 40 characters. Required.
        :paramtype display_name: str
        :keyword description: The domain description.
         The description cannot contain more than 256 characters.
        :paramtype description: str
        :keyword parent_domain_id: The domain parent object ID.
        :paramtype parent_domain_id: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.parent_domain_id = parent_domain_id


class CreateTagRequest(_serialization.Model):
    """The request payload for creating a tag.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The tag display name.
     The display name cannot contain more than 40 characters. Required.
    :vartype display_name: str
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, display_name: str, **kwargs: Any) -> None:
        """
        :keyword display_name: The tag display name.
         The display name cannot contain more than 40 characters. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name


class CreateTagsRequest(_serialization.Model):
    """This is a request wrapper for a creating a list of tags.

    All required parameters must be populated in order to send to server.

    :ivar scope: Represents a tag scope.
    :vartype scope: ~microsoft.fabric.api.admin.models.TagScope
    :ivar create_tags_request: An array of createTagRequest. Required.
    :vartype create_tags_request: list[~microsoft.fabric.api.admin.models.CreateTagRequest]
    """

    _validation = {
        "create_tags_request": {"required": True},
    }

    _attribute_map = {
        "scope": {"key": "scope", "type": "TagScope"},
        "create_tags_request": {"key": "createTagsRequest", "type": "[CreateTagRequest]"},
    }

    def __init__(
        self,
        *,
        create_tags_request: List["_models.CreateTagRequest"],
        scope: Optional["_models.TagScope"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword scope: Represents a tag scope.
        :paramtype scope: ~microsoft.fabric.api.admin.models.TagScope
        :keyword create_tags_request: An array of createTagRequest. Required.
        :paramtype create_tags_request: list[~microsoft.fabric.api.admin.models.CreateTagRequest]
        """
        super().__init__(**kwargs)
        self.scope = scope
        self.create_tags_request = create_tags_request


class CreateTagsResponse(_serialization.Model):
    """A response wrapper for a list of created tags.

    All required parameters must be populated in order to send to server.

    :ivar tags: An array of tags. Required.
    :vartype tags: list[~microsoft.fabric.api.admin.models.Tag]
    """

    _validation = {
        "tags": {"required": True},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "[Tag]"},
    }

    def __init__(self, *, tags: List["_models.Tag"], **kwargs: Any) -> None:
        """
        :keyword tags: An array of tags. Required.
        :paramtype tags: list[~microsoft.fabric.api.admin.models.Tag]
        """
        super().__init__(**kwargs)
        self.tags = tags


class DomainBase(_serialization.Model):
    """Represents a domain or subdomain.

    All required parameters must be populated in order to send to server.

    :ivar id: The domain object ID. Required.
    :vartype id: str
    :ivar display_name: The name of the domain. Required.
    :vartype display_name: str
    :ivar description: The description of the domain.
    :vartype description: str
    :ivar parent_domain_id: The domain parent object ID.
    :vartype parent_domain_id: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "parent_domain_id": {"key": "parentDomainId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        description: Optional[str] = None,
        parent_domain_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The domain object ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the domain. Required.
        :paramtype display_name: str
        :keyword description: The description of the domain.
        :paramtype description: str
        :keyword parent_domain_id: The domain parent object ID.
        :paramtype parent_domain_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.description = description
        self.parent_domain_id = parent_domain_id


class Domain(DomainBase):
    """Domain.

    All required parameters must be populated in order to send to server.

    :ivar id: The domain object ID. Required.
    :vartype id: str
    :ivar display_name: The name of the domain. Required.
    :vartype display_name: str
    :ivar description: The description of the domain.
    :vartype description: str
    :ivar parent_domain_id: The domain parent object ID.
    :vartype parent_domain_id: str
    :ivar default_label_id: The domain default sensitivity label.
    :vartype default_label_id: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "parent_domain_id": {"key": "parentDomainId", "type": "str"},
        "default_label_id": {"key": "defaultLabelId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        description: Optional[str] = None,
        parent_domain_id: Optional[str] = None,
        default_label_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The domain object ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the domain. Required.
        :paramtype display_name: str
        :keyword description: The description of the domain.
        :paramtype description: str
        :keyword parent_domain_id: The domain parent object ID.
        :paramtype parent_domain_id: str
        :keyword default_label_id: The domain default sensitivity label.
        :paramtype default_label_id: str
        """
        super().__init__(
            id=id, display_name=display_name, description=description, parent_domain_id=parent_domain_id, **kwargs
        )
        self.default_label_id = default_label_id


class DomainPreview(DomainBase):
    """DomainPreview.

    All required parameters must be populated in order to send to server.

    :ivar id: The domain object ID. Required.
    :vartype id: str
    :ivar display_name: The name of the domain. Required.
    :vartype display_name: str
    :ivar description: The description of the domain.
    :vartype description: str
    :ivar parent_domain_id: The domain parent object ID.
    :vartype parent_domain_id: str
    :ivar contributors_scope: The domain contributors scope. Known values are: "AllTenant",
     "SpecificUsersAndGroups", and "AdminsOnly".
    :vartype contributors_scope: str or ~microsoft.fabric.api.admin.models.ContributorsScopeType
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "parent_domain_id": {"key": "parentDomainId", "type": "str"},
        "contributors_scope": {"key": "contributorsScope", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        description: Optional[str] = None,
        parent_domain_id: Optional[str] = None,
        contributors_scope: Optional[Union[str, "_models.ContributorsScopeType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The domain object ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the domain. Required.
        :paramtype display_name: str
        :keyword description: The description of the domain.
        :paramtype description: str
        :keyword parent_domain_id: The domain parent object ID.
        :paramtype parent_domain_id: str
        :keyword contributors_scope: The domain contributors scope. Known values are: "AllTenant",
         "SpecificUsersAndGroups", and "AdminsOnly".
        :paramtype contributors_scope: str or ~microsoft.fabric.api.admin.models.ContributorsScopeType
        """
        super().__init__(
            id=id, display_name=display_name, description=description, parent_domain_id=parent_domain_id, **kwargs
        )
        self.contributors_scope = contributors_scope


class DomainRoleAssignment(_serialization.Model):
    """Represents a domain role assignment.

    All required parameters must be populated in order to send to server.

    :ivar role: The domain role of the principal. Required. Known values are: "Admin" and
     "Contributor".
    :vartype role: str or ~microsoft.fabric.api.admin.models.DomainRole
    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.admin.models.Principal
    """

    _validation = {
        "role": {"required": True},
        "principal": {"required": True},
    }

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
        "principal": {"key": "principal", "type": "Principal"},
    }

    def __init__(
        self, *, role: Union[str, "_models.DomainRole"], principal: "_models.Principal", **kwargs: Any
    ) -> None:
        """
        :keyword role: The domain role of the principal. Required. Known values are: "Admin" and
         "Contributor".
        :paramtype role: str or ~microsoft.fabric.api.admin.models.DomainRole
        :keyword principal: The principal. Required.
        :paramtype principal: ~microsoft.fabric.api.admin.models.Principal
        """
        super().__init__(**kwargs)
        self.role = role
        self.principal = principal


class DomainRoleAssignmentRequest(_serialization.Model):
    """The request payload for assigning domain members for a domain by principal.

    All required parameters must be populated in order to send to server.

    :ivar type: The update request type. Required. Known values are: "Admin" and "Contributor".
    :vartype type: str or ~microsoft.fabric.api.admin.models.DomainRole
    :ivar principals: The principals that will be assigned to the domain role.
    :vartype principals: list[~microsoft.fabric.api.admin.models.Principal]
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "principals": {"key": "principals", "type": "[Principal]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.DomainRole"],
        principals: Optional[List["_models.Principal"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The update request type. Required. Known values are: "Admin" and "Contributor".
        :paramtype type: str or ~microsoft.fabric.api.admin.models.DomainRole
        :keyword principals: The principals that will be assigned to the domain role.
        :paramtype principals: list[~microsoft.fabric.api.admin.models.Principal]
        """
        super().__init__(**kwargs)
        self.type = type
        self.principals = principals


class DomainRoleAssignments(PaginatedResponse):
    """A response wrapper for a list of domain role assignments with a continuation token.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: The list of the domain role assignments.
    :vartype value: list[~microsoft.fabric.api.admin.models.DomainRoleAssignment]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DomainRoleAssignment]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.DomainRoleAssignment"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: The list of the domain role assignments.
        :paramtype value: list[~microsoft.fabric.api.admin.models.DomainRoleAssignment]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class DomainRoleUnassignmentRequest(_serialization.Model):
    """The request payload for unassigning domain members by principal.

    All required parameters must be populated in order to send to server.

    :ivar type: The update request type. Required. Known values are: "Admin" and "Contributor".
    :vartype type: str or ~microsoft.fabric.api.admin.models.DomainRole
    :ivar principals: The principals that will be unassigned from the domain role.
    :vartype principals: list[~microsoft.fabric.api.admin.models.Principal]
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "principals": {"key": "principals", "type": "[Principal]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.DomainRole"],
        principals: Optional[List["_models.Principal"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The update request type. Required. Known values are: "Admin" and "Contributor".
        :paramtype type: str or ~microsoft.fabric.api.admin.models.DomainRole
        :keyword principals: The principals that will be unassigned from the domain role.
        :paramtype principals: list[~microsoft.fabric.api.admin.models.Principal]
        """
        super().__init__(**kwargs)
        self.type = type
        self.principals = principals


class DomainsResponse(_serialization.Model):
    """This is a response wrapper for a list of all domains.

    :ivar domains: The list of domains.
    :vartype domains: list[~microsoft.fabric.api.admin.models.Domain]
    """

    _attribute_map = {
        "domains": {"key": "domains", "type": "[Domain]"},
    }

    def __init__(self, *, domains: Optional[List["_models.Domain"]] = None, **kwargs: Any) -> None:
        """
        :keyword domains: The list of domains.
        :paramtype domains: list[~microsoft.fabric.api.admin.models.Domain]
        """
        super().__init__(**kwargs)
        self.domains = domains


class DomainsResponsePreview(_serialization.Model):
    """This is a response wrapper for a list of all domains.

    :ivar domains: The list of domains.
    :vartype domains: list[~microsoft.fabric.api.admin.models.DomainPreview]
    """

    _attribute_map = {
        "domains": {"key": "domains", "type": "[DomainPreview]"},
    }

    def __init__(self, *, domains: Optional[List["_models.DomainPreview"]] = None, **kwargs: Any) -> None:
        """
        :keyword domains: The list of domains.
        :paramtype domains: list[~microsoft.fabric.api.admin.models.DomainPreview]
        """
        super().__init__(**kwargs)
        self.domains = domains


class TagScope(_serialization.Model):
    """Represents a tag scope.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DomainTagScope, TenantTagScope

    All required parameters must be populated in order to send to server.

    :ivar type: Denotes tag scope. Additional tag scopes may be added over time. Required. Known
     values are: "Tenant" and "Domain".
    :vartype type: str or ~microsoft.fabric.api.admin.models.TagScopeType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"Domain": "DomainTagScope", "Tenant": "TenantTagScope"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class DomainTagScope(TagScope):
    """Represents domain tag scope.

    All required parameters must be populated in order to send to server.

    :ivar type: Denotes tag scope. Additional tag scopes may be added over time. Required. Known
     values are: "Tenant" and "Domain".
    :vartype type: str or ~microsoft.fabric.api.admin.models.TagScopeType
    :ivar domain_id: Domain object ID. Required.
    :vartype domain_id: str
    """

    _validation = {
        "type": {"required": True},
        "domain_id": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "domain_id": {"key": "domainId", "type": "str"},
    }

    def __init__(self, *, domain_id: str, **kwargs: Any) -> None:
        """
        :keyword domain_id: Domain object ID. Required.
        :paramtype domain_id: str
        """
        super().__init__(**kwargs)
        self.type: str = "Domain"
        self.domain_id = domain_id


class DomainTenantSetting(BaseTenantSetting):
    """Domain tenant setting details.

    All required parameters must be populated in order to send to server.

    :ivar setting_name: The name of the tenant setting. Required.
    :vartype setting_name: str
    :ivar title: The title of the tenant setting. Required.
    :vartype title: str
    :ivar enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
    :vartype enabled: bool
    :ivar can_specify_security_groups: Indicates if the tenant setting is enabled for a security
     group. False - The tenant setting is enabled for the entire organization. True - The tenant
     setting is enabled for security groups. Required.
    :vartype can_specify_security_groups: bool
    :ivar enabled_security_groups: A list of enabled security groups.
    :vartype enabled_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar excluded_security_groups: A list of excluded security groups.
    :vartype excluded_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar tenant_setting_group: Tenant setting group name.
    :vartype tenant_setting_group: str
    :ivar properties: Tenant setting properties.
    :vartype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
    :ivar delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
     workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
     admin can override the tenant setting.
    :vartype delegate_to_workspace: bool
    :ivar delegated_from: Tenant setting delegated from tenant, capacity or domain. Known values
     are: "Tenant", "Capacity", and "Domain".
    :vartype delegated_from: str or ~microsoft.fabric.api.admin.models.DelegatedFrom
    """

    _validation = {
        "setting_name": {"required": True},
        "title": {"required": True},
        "enabled": {"required": True},
        "can_specify_security_groups": {"required": True},
    }

    _attribute_map = {
        "setting_name": {"key": "settingName", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "can_specify_security_groups": {"key": "canSpecifySecurityGroups", "type": "bool"},
        "enabled_security_groups": {"key": "enabledSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "excluded_security_groups": {"key": "excludedSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "tenant_setting_group": {"key": "tenantSettingGroup", "type": "str"},
        "properties": {"key": "properties", "type": "[TenantSettingProperty]"},
        "delegate_to_workspace": {"key": "delegateToWorkspace", "type": "bool"},
        "delegated_from": {"key": "delegatedFrom", "type": "str"},
    }

    def __init__(
        self,
        *,
        setting_name: str,
        title: str,
        enabled: bool,
        can_specify_security_groups: bool,
        enabled_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        excluded_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        tenant_setting_group: Optional[str] = None,
        properties: Optional[List["_models.TenantSettingProperty"]] = None,
        delegate_to_workspace: Optional[bool] = None,
        delegated_from: Optional[Union[str, "_models.DelegatedFrom"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword setting_name: The name of the tenant setting. Required.
        :paramtype setting_name: str
        :keyword title: The title of the tenant setting. Required.
        :paramtype title: str
        :keyword enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
        :paramtype enabled: bool
        :keyword can_specify_security_groups: Indicates if the tenant setting is enabled for a security
         group. False - The tenant setting is enabled for the entire organization. True - The tenant
         setting is enabled for security groups. Required.
        :paramtype can_specify_security_groups: bool
        :keyword enabled_security_groups: A list of enabled security groups.
        :paramtype enabled_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword excluded_security_groups: A list of excluded security groups.
        :paramtype excluded_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword tenant_setting_group: Tenant setting group name.
        :paramtype tenant_setting_group: str
        :keyword properties: Tenant setting properties.
        :paramtype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
        :keyword delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
         workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
         admin can override the tenant setting.
        :paramtype delegate_to_workspace: bool
        :keyword delegated_from: Tenant setting delegated from tenant, capacity or domain. Known values
         are: "Tenant", "Capacity", and "Domain".
        :paramtype delegated_from: str or ~microsoft.fabric.api.admin.models.DelegatedFrom
        """
        super().__init__(
            setting_name=setting_name,
            title=title,
            enabled=enabled,
            can_specify_security_groups=can_specify_security_groups,
            enabled_security_groups=enabled_security_groups,
            excluded_security_groups=excluded_security_groups,
            tenant_setting_group=tenant_setting_group,
            properties=properties,
            **kwargs
        )
        self.delegate_to_workspace = delegate_to_workspace
        self.delegated_from = delegated_from


class DomainTenantSettingOverride(_serialization.Model):
    """A domain admin can override the tenant setting.

    :ivar id: The ID of a domain.
    :vartype id: str
    :ivar tenant_settings: A list of domain tenant settings.
    :vartype tenant_settings: list[~microsoft.fabric.api.admin.models.DomainTenantSetting]
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "tenant_settings": {"key": "tenantSettings", "type": "[DomainTenantSetting]"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        tenant_settings: Optional[List["_models.DomainTenantSetting"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The ID of a domain.
        :paramtype id: str
        :keyword tenant_settings: A list of domain tenant settings.
        :paramtype tenant_settings: list[~microsoft.fabric.api.admin.models.DomainTenantSetting]
        """
        super().__init__(**kwargs)
        self.id = id
        self.tenant_settings = tenant_settings


class DomainTenantSettingOverrides(PaginatedResponse):
    """A list of tenant settings overrides.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of tenant settings that were overridden by a domain admin.
    :vartype value: list[~microsoft.fabric.api.admin.models.DomainTenantSettingOverride]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DomainTenantSettingOverride]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.DomainTenantSettingOverride"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of tenant settings that were overridden by a domain admin.
        :paramtype value: list[~microsoft.fabric.api.admin.models.DomainTenantSettingOverride]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class DomainWorkspace(_serialization.Model):
    """Represents a workspace in a domain.

    All required parameters must be populated in order to send to server.

    :ivar id: The workspace ID. Required.
    :vartype id: str
    :ivar display_name: The name of the workspace. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The workspace ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the workspace. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class DomainWorkspaces(PaginatedResponse):
    """A response wrapper for a list of all the workspaces assigned to a domain with a continuous
    token.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: The list of all the workspaces assigned to the domain.
    :vartype value: list[~microsoft.fabric.api.admin.models.DomainWorkspace]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DomainWorkspace]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.DomainWorkspace"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: The list of all the workspaces assigned to the domain.
        :paramtype value: list[~microsoft.fabric.api.admin.models.DomainWorkspace]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.admin.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.admin.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.admin.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class ExternalDataShare(_serialization.Model):
    """An external data share object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The external data share ID. Required.
    :vartype id: str
    :ivar paths: The path or list of paths that are externally shared. Required.
    :vartype paths: list[str]
    :ivar creator_principal: The principal that created the external data share. Required.
    :vartype creator_principal: ~microsoft.fabric.api.admin.models.Principal
    :ivar recipient: The recipient who was invited to accept the external data share. Required.
    :vartype recipient: ~microsoft.fabric.api.admin.models.ExternalDataShareRecipient
    :ivar status: The status of the external data share. Required. Known values are: "Pending",
     "Active", "Revoked", and "InvitationExpired".
    :vartype status: str or ~microsoft.fabric.api.admin.models.ExternalDataShareStatus
    :ivar expiration_time_utc: The expiration date and time (UTC) of the invitation to the external
     data share.
    :vartype expiration_time_utc: ~datetime.datetime
    :ivar workspace_id: The workspace ID. Required.
    :vartype workspace_id: str
    :ivar item_id: The item ID. Required.
    :vartype item_id: str
    :ivar invitation_url: The URL for accepting the invitation to the external data share.
    :vartype invitation_url: str
    :ivar accepted_by_tenant_id: The tenant ID in which the external data share was accepted.
    :vartype accepted_by_tenant_id: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "paths": {"required": True, "readonly": True, "max_items": 100, "min_items": 0},
        "creator_principal": {"required": True, "readonly": True},
        "recipient": {"required": True, "readonly": True},
        "status": {"required": True, "readonly": True},
        "expiration_time_utc": {"readonly": True},
        "workspace_id": {"required": True, "readonly": True},
        "item_id": {"required": True, "readonly": True},
        "invitation_url": {"readonly": True},
        "accepted_by_tenant_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "paths": {"key": "paths", "type": "[str]"},
        "creator_principal": {"key": "creatorPrincipal", "type": "Principal"},
        "recipient": {"key": "recipient", "type": "ExternalDataShareRecipient"},
        "status": {"key": "status", "type": "str"},
        "expiration_time_utc": {"key": "expirationTimeUtc", "type": "iso-8601"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "invitation_url": {"key": "invitationUrl", "type": "str"},
        "accepted_by_tenant_id": {"key": "acceptedByTenantId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.paths = None
        self.creator_principal = None
        self.recipient = None
        self.status = None
        self.expiration_time_utc = None
        self.workspace_id = None
        self.item_id = None
        self.invitation_url = None
        self.accepted_by_tenant_id = None


class ExternalDataShareRecipient(_serialization.Model):
    """A representation of the the external data share recipient.

    All required parameters must be populated in order to send to server.

    :ivar user_principal_name: The recipient's email address. Required.
    :vartype user_principal_name: str
    :ivar tenant_id: The recipient's tenant ID.
    :vartype tenant_id: str
    """

    _validation = {
        "user_principal_name": {"required": True, "max_length": 256},
    }

    _attribute_map = {
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
    }

    def __init__(self, *, user_principal_name: str, tenant_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword user_principal_name: The recipient's email address. Required.
        :paramtype user_principal_name: str
        :keyword tenant_id: The recipient's tenant ID.
        :paramtype tenant_id: str
        """
        super().__init__(**kwargs)
        self.user_principal_name = user_principal_name
        self.tenant_id = tenant_id


class ExternalDataShares(PaginatedResponse):
    """A list of external data shares with a continuation token.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of external data shares. Required.
    :vartype value: list[~microsoft.fabric.api.admin.models.ExternalDataShare]
    """

    _validation = {
        "value": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ExternalDataShare]"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = None


class GitConnectionDetails(_serialization.Model):
    """Represents the details of a Git connection for a workspace.

    All required parameters must be populated in order to send to server.

    :ivar workspace_id: The workspace ID. Required.
    :vartype workspace_id: str
    :ivar git_provider_details: The provider details. Required.
    :vartype git_provider_details: ~microsoft.fabric.api.admin.models.GitProviderDetails
    """

    _validation = {
        "workspace_id": {"required": True},
        "git_provider_details": {"required": True},
    }

    _attribute_map = {
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "git_provider_details": {"key": "gitProviderDetails", "type": "GitProviderDetails"},
    }

    def __init__(self, *, workspace_id: str, git_provider_details: "_models.GitProviderDetails", **kwargs: Any) -> None:
        """
        :keyword workspace_id: The workspace ID. Required.
        :paramtype workspace_id: str
        :keyword git_provider_details: The provider details. Required.
        :paramtype git_provider_details: ~microsoft.fabric.api.admin.models.GitProviderDetails
        """
        super().__init__(**kwargs)
        self.workspace_id = workspace_id
        self.git_provider_details = git_provider_details


class GitConnections(PaginatedResponse):
    """A response wrapper for a list of all the Git connections for a given tenant with a continuous
    token.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: The list of Git connections for a given tenant.
    :vartype value: list[~microsoft.fabric.api.admin.models.GitConnectionDetails]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[GitConnectionDetails]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.GitConnectionDetails"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: The list of Git connections for a given tenant.
        :paramtype value: list[~microsoft.fabric.api.admin.models.GitConnectionDetails]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class GitHubDetails(GitProviderDetails):
    """GitHub provider details.

    All required parameters must be populated in order to send to server.

    :ivar git_provider_type: A Git provider type. Additional provider types may be added over time.
     Required. Known values are: "AzureDevOps" and "GitHub".
    :vartype git_provider_type: str or ~microsoft.fabric.api.admin.models.GitProviderType
    :ivar repository_name: The repository name. Maximum length is 128 characters. Required.
    :vartype repository_name: str
    :ivar branch_name: The branch name. Maximum length is 250 characters. Required.
    :vartype branch_name: str
    :ivar directory_name: The relative path to the directory. Maximum length is 256 characters.
     Required.
    :vartype directory_name: str
    :ivar owner_name: The owner name. Maximum length is 100 characters. Required.
    :vartype owner_name: str
    """

    _validation = {
        "git_provider_type": {"required": True},
        "repository_name": {"required": True, "max_length": 128},
        "branch_name": {"required": True, "max_length": 250},
        "directory_name": {"required": True, "max_length": 256},
        "owner_name": {"required": True, "max_length": 100},
    }

    _attribute_map = {
        "git_provider_type": {"key": "gitProviderType", "type": "str"},
        "repository_name": {"key": "repositoryName", "type": "str"},
        "branch_name": {"key": "branchName", "type": "str"},
        "directory_name": {"key": "directoryName", "type": "str"},
        "owner_name": {"key": "ownerName", "type": "str"},
    }

    def __init__(
        self, *, repository_name: str, branch_name: str, directory_name: str, owner_name: str, **kwargs: Any
    ) -> None:
        """
        :keyword repository_name: The repository name. Maximum length is 128 characters. Required.
        :paramtype repository_name: str
        :keyword branch_name: The branch name. Maximum length is 250 characters. Required.
        :paramtype branch_name: str
        :keyword directory_name: The relative path to the directory. Maximum length is 256 characters.
         Required.
        :paramtype directory_name: str
        :keyword owner_name: The owner name. Maximum length is 100 characters. Required.
        :paramtype owner_name: str
        """
        super().__init__(
            repository_name=repository_name, branch_name=branch_name, directory_name=directory_name, **kwargs
        )
        self.git_provider_type: str = "GitHub"
        self.owner_name = owner_name


class Item(_serialization.Model):
    """Item details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID. Required.
    :vartype id: str
    :ivar name: The item name.
    :vartype name: str
    :ivar type: The item type. Includes values such as Synapse, Notebook, Kqldatabase and
     SynapseWorkbook. Known values are: "Dashboard", "Report", "SemanticModel", "PaginatedReport",
     "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase", "KQLQueryset",
     "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition", "MLExperiment", "MLModel",
     "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse", "MirroredDatabase", "Reflex",
     "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob", "SQLDatabase", "CopyJob",
     "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow", "WarehouseSnapshot",
     "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map", and
     "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.admin.models.ItemType
    :ivar description: Item details including item type and item usage.
    :vartype description: str
    :ivar state: The item status. "Active"
    :vartype state: str or ~microsoft.fabric.api.admin.models.ItemState
    :ivar last_updated_date: The last updated date and time.
    :vartype last_updated_date: ~datetime.datetime
    :ivar creator_principal: The item's owner.
    :vartype creator_principal: ~microsoft.fabric.api.admin.models.Principal
    :ivar workspace_id: The workspace ID of item.
    :vartype workspace_id: str
    :ivar capacity_id: The capacity ID of the workspace.
    :vartype capacity_id: str
    :ivar folder_id: The folder ID of the item.
    :vartype folder_id: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "type": {"readonly": True},
        "state": {"readonly": True},
        "creator_principal": {"readonly": True},
        "workspace_id": {"readonly": True},
        "capacity_id": {"readonly": True},
        "folder_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "last_updated_date": {"key": "lastUpdatedDate", "type": "iso-8601"},
        "creator_principal": {"key": "creatorPrincipal", "type": "Principal"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        last_updated_date: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The item name.
        :paramtype name: str
        :keyword description: Item details including item type and item usage.
        :paramtype description: str
        :keyword last_updated_date: The last updated date and time.
        :paramtype last_updated_date: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.description = description
        self.state = None
        self.last_updated_date = last_updated_date
        self.creator_principal = None
        self.workspace_id = None
        self.capacity_id = None
        self.folder_id = None


class ItemAccessDetail(_serialization.Model):
    """Item permission details such as *read* and *reshare*.

    :ivar type: Entity type. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.admin.models.ItemType
    :ivar permissions: Item permissions such as *read* and *reshare*.
    :vartype permissions: list[str or ~microsoft.fabric.api.admin.models.ItemPermissions]
    :ivar additional_permissions: Workload permissions such as *readAll* and *viewOutput*.
    :vartype additional_permissions: list[str]
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "permissions": {"key": "permissions", "type": "[str]"},
        "additional_permissions": {"key": "additionalPermissions", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ItemType"]] = None,
        permissions: Optional[List[Union[str, "_models.ItemPermissions"]]] = None,
        additional_permissions: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Entity type. Known values are: "Dashboard", "Report", "SemanticModel",
         "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
         "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.admin.models.ItemType
        :keyword permissions: Item permissions such as *read* and *reshare*.
        :paramtype permissions: list[str or ~microsoft.fabric.api.admin.models.ItemPermissions]
        :keyword additional_permissions: Workload permissions such as *readAll* and *viewOutput*.
        :paramtype additional_permissions: list[str]
        """
        super().__init__(**kwargs)
        self.type = type
        self.permissions = permissions
        self.additional_permissions = additional_permissions


class ItemAccessDetails(_serialization.Model):
    """User access details for an item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal: Information regarding the user who has access to the entity.
    :vartype principal: ~microsoft.fabric.api.admin.models.Principal
    :ivar item_access_details: Item permissions for the user.
    :vartype item_access_details: ~microsoft.fabric.api.admin.models.ItemAccessDetail
    """

    _validation = {
        "principal": {"readonly": True},
        "item_access_details": {"readonly": True},
    }

    _attribute_map = {
        "principal": {"key": "principal", "type": "Principal"},
        "item_access_details": {"key": "itemAccessDetails", "type": "ItemAccessDetail"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal = None
        self.item_access_details = None


class ItemAccessDetailsResponse(_serialization.Model):
    """A list of users with access to a given entity.

    :ivar access_details: A list of users with access to an entity.
    :vartype access_details: list[~microsoft.fabric.api.admin.models.ItemAccessDetails]
    """

    _attribute_map = {
        "access_details": {"key": "accessDetails", "type": "[ItemAccessDetails]"},
    }

    def __init__(self, *, access_details: Optional[List["_models.ItemAccessDetails"]] = None, **kwargs: Any) -> None:
        """
        :keyword access_details: A list of users with access to an entity.
        :paramtype access_details: list[~microsoft.fabric.api.admin.models.ItemAccessDetails]
        """
        super().__init__(**kwargs)
        self.access_details = access_details


class ItemChangeLabelStatus(_serialization.Model):
    """The unique ID and information protection label change status of a Fabric item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The unique ID of a Fabric item. The ID is in UUID format. Required.
    :vartype id: str
    :ivar type: The Fabric item type. Required. Known values are: "Dashboard", "Report",
     "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
     "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.admin.models.ItemType
    :ivar status: The status of an information protection label change operation. Additional tenant
     setting property types may be added over time. Required. Known values are: "Failed",
     "FailedToGetUsageRights", "InsufficientUsageRights", "NotFound", and "Succeeded".
    :vartype status: str or ~microsoft.fabric.api.admin.models.Status
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "type": {"required": True, "readonly": True},
        "status": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.status = None


class ItemInfo(_serialization.Model):
    """The item information, including item ID and type.

    All required parameters must be populated in order to send to server.

    :ivar id: An ID in UUID format. Required.
    :vartype id: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.admin.models.ItemType
    """

    _validation = {
        "id": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self, *, id: str, type: Union[str, "_models.ItemType"], **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: An ID in UUID format. Required.
        :paramtype id: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.admin.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = id
        self.type = type


class ItemRemoveSharingLinksStatus(ItemInfo):
    """The unique ID and sharing links removal status of a Fabric item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: An ID in UUID format. Required.
    :vartype id: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.admin.models.ItemType
    :ivar status: The status of sharing links removal operation. Additional property types may be
     added over time. Required. Known values are: "NotFound" and "Succeeded".
    :vartype status: str or ~microsoft.fabric.api.admin.models.SharingLinksRemovalStatus
    """

    _validation = {
        "id": {"required": True},
        "type": {"required": True},
        "status": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self, *, id: str, type: Union[str, "_models.ItemType"], **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: An ID in UUID format. Required.
        :paramtype id: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.admin.models.ItemType
        """
        super().__init__(id=id, type=type, **kwargs)
        self.status = None


class Items(PaginatedResponse):
    """A list of items.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar item_entities: The list of items for a given tenant.
    :vartype item_entities: list[~microsoft.fabric.api.admin.models.Item]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "item_entities": {"key": "itemEntities", "type": "[Item]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        item_entities: Optional[List["_models.Item"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword item_entities: The list of items for a given tenant.
        :paramtype item_entities: list[~microsoft.fabric.api.admin.models.Item]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.item_entities = item_entities


class ItemsChangeLabelResponse(_serialization.Model):
    """A list of the unique IDs and information protection label change status of the Fabric items in
    the label change request.

    :ivar items_change_label_status: A list of items change label status.
    :vartype items_change_label_status:
     list[~microsoft.fabric.api.admin.models.ItemChangeLabelStatus]
    """

    _attribute_map = {
        "items_change_label_status": {"key": "itemsChangeLabelStatus", "type": "[ItemChangeLabelStatus]"},
    }

    def __init__(
        self, *, items_change_label_status: Optional[List["_models.ItemChangeLabelStatus"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword items_change_label_status: A list of items change label status.
        :paramtype items_change_label_status:
         list[~microsoft.fabric.api.admin.models.ItemChangeLabelStatus]
        """
        super().__init__(**kwargs)
        self.items_change_label_status = items_change_label_status


class Principal(_serialization.Model):
    """Represents an identity or a Microsoft Entra group.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The principal's ID. Required.
    :vartype id: str
    :ivar display_name: The principal's display name.
    :vartype display_name: str
    :ivar type: The type of the principal. Additional principal types may be added over time.
     Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
     "EntireTenant".
    :vartype type: str or ~microsoft.fabric.api.admin.models.PrincipalType
    :ivar user_details: User principal specific details. Applicable when the principal type is
     ``User``.
    :vartype user_details: ~microsoft.fabric.api.admin.models.PrincipalUserDetails
    :ivar service_principal_details: Service principal specific details. Applicable when the
     principal type is ``ServicePrincipal``.
    :vartype service_principal_details:
     ~microsoft.fabric.api.admin.models.PrincipalServicePrincipalDetails
    :ivar group_details: Group specific details. Applicable when the principal type is ``Group``.
    :vartype group_details: ~microsoft.fabric.api.admin.models.PrincipalGroupDetails
    :ivar service_principal_profile_details: Service principal profile details. Applicable when the
     principal type is ``ServicePrincipalProfile``.
    :vartype service_principal_profile_details:
     ~microsoft.fabric.api.admin.models.PrincipalServicePrincipalProfileDetails
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"readonly": True},
        "type": {"required": True},
        "user_details": {"readonly": True},
        "service_principal_details": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_details": {"key": "userDetails", "type": "PrincipalUserDetails"},
        "service_principal_details": {"key": "servicePrincipalDetails", "type": "PrincipalServicePrincipalDetails"},
        "group_details": {"key": "groupDetails", "type": "PrincipalGroupDetails"},
        "service_principal_profile_details": {
            "key": "servicePrincipalProfileDetails",
            "type": "PrincipalServicePrincipalProfileDetails",
        },
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: Union[str, "_models.PrincipalType"],
        group_details: Optional["_models.PrincipalGroupDetails"] = None,
        service_principal_profile_details: Optional["_models.PrincipalServicePrincipalProfileDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The principal's ID. Required.
        :paramtype id: str
        :keyword type: The type of the principal. Additional principal types may be added over time.
         Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
         "EntireTenant".
        :paramtype type: str or ~microsoft.fabric.api.admin.models.PrincipalType
        :keyword group_details: Group specific details. Applicable when the principal type is
         ``Group``.
        :paramtype group_details: ~microsoft.fabric.api.admin.models.PrincipalGroupDetails
        :keyword service_principal_profile_details: Service principal profile details. Applicable when
         the principal type is ``ServicePrincipalProfile``.
        :paramtype service_principal_profile_details:
         ~microsoft.fabric.api.admin.models.PrincipalServicePrincipalProfileDetails
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = None
        self.type = type
        self.user_details = None
        self.service_principal_details = None
        self.group_details = group_details
        self.service_principal_profile_details = service_principal_profile_details


class PrincipalGroupDetails(_serialization.Model):
    """Group specific details. Applicable when the principal type is ``Group``.

    :ivar group_type: The type of the group. Additional group types may be added over time. Known
     values are: "Unknown", "SecurityGroup", and "DistributionList".
    :vartype group_type: str or ~microsoft.fabric.api.admin.models.GroupType
    """

    _attribute_map = {
        "group_type": {"key": "groupType", "type": "str"},
    }

    def __init__(self, *, group_type: Optional[Union[str, "_models.GroupType"]] = None, **kwargs: Any) -> None:
        """
        :keyword group_type: The type of the group. Additional group types may be added over time.
         Known values are: "Unknown", "SecurityGroup", and "DistributionList".
        :paramtype group_type: str or ~microsoft.fabric.api.admin.models.GroupType
        """
        super().__init__(**kwargs)
        self.group_type = group_type


class PrincipalServicePrincipalDetails(_serialization.Model):
    """Service principal specific details. Applicable when the principal type is ``ServicePrincipal``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar aad_app_id: The service principal's Microsoft Entra AppId.
    :vartype aad_app_id: str
    """

    _validation = {
        "aad_app_id": {"readonly": True},
    }

    _attribute_map = {
        "aad_app_id": {"key": "aadAppId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.aad_app_id = None


class PrincipalServicePrincipalProfileDetails(_serialization.Model):
    """Service principal profile details. Applicable when the principal type is
    ``ServicePrincipalProfile``.

    :ivar parent_principal: The service principal profile's parent principal.
    :vartype parent_principal: ~microsoft.fabric.api.admin.models.Principal
    """

    _attribute_map = {
        "parent_principal": {"key": "parentPrincipal", "type": "Principal"},
    }

    def __init__(self, *, parent_principal: Optional["_models.Principal"] = None, **kwargs: Any) -> None:
        """
        :keyword parent_principal: The service principal profile's parent principal.
        :paramtype parent_principal: ~microsoft.fabric.api.admin.models.Principal
        """
        super().__init__(**kwargs)
        self.parent_principal = parent_principal


class PrincipalUserDetails(_serialization.Model):
    """User principal specific details. Applicable when the principal type is ``User``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar user_principal_name: The user principal name.
    :vartype user_principal_name: str
    """

    _validation = {
        "user_principal_name": {"readonly": True},
    }

    _attribute_map = {
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.user_principal_name = None


class RemoveAllSharingLinksRequest(_serialization.Model):
    """Accepts the type of sharing link to be removed for all Fabric items in organization.

    All required parameters must be populated in order to send to server.

    :ivar sharing_link_type: Specifies the type of sharing link that is required to be deleted.
     Additional sharing link types may be added over time. Required. "OrgLink"
    :vartype sharing_link_type: str or ~microsoft.fabric.api.admin.models.SharingLinkType
    """

    _validation = {
        "sharing_link_type": {"required": True},
    }

    _attribute_map = {
        "sharing_link_type": {"key": "sharingLinkType", "type": "str"},
    }

    def __init__(self, *, sharing_link_type: Union[str, "_models.SharingLinkType"], **kwargs: Any) -> None:
        """
        :keyword sharing_link_type: Specifies the type of sharing link that is required to be deleted.
         Additional sharing link types may be added over time. Required. "OrgLink"
        :paramtype sharing_link_type: str or ~microsoft.fabric.api.admin.models.SharingLinkType
        """
        super().__init__(**kwargs)
        self.sharing_link_type = sharing_link_type


class RemoveLabelsRequest(_serialization.Model):
    """A list of items requiring an information protection label update. Each item in the list
    includes the item ID and Fabric item type.

    :ivar items: A list of items.
    :vartype items: list[~microsoft.fabric.api.admin.models.ItemInfo]
    """

    _attribute_map = {
        "items": {"key": "items", "type": "[ItemInfo]"},
    }

    def __init__(self, *, items: Optional[List["_models.ItemInfo"]] = None, **kwargs: Any) -> None:
        """
        :keyword items: A list of items.
        :paramtype items: list[~microsoft.fabric.api.admin.models.ItemInfo]
        """
        super().__init__(**kwargs)
        self.items = items


class RestoreWorkspaceRequest(_serialization.Model):
    """The request to restore a deleted workspace.

    :ivar new_workspace_name: The name of the workspace. Mandatory if the restore request is for
     *My workspace*.
    :vartype new_workspace_name: str
    :ivar new_workspace_admin_principal: The workspace's admin.
    :vartype new_workspace_admin_principal: ~microsoft.fabric.api.admin.models.Principal
    """

    _attribute_map = {
        "new_workspace_name": {"key": "newWorkspaceName", "type": "str"},
        "new_workspace_admin_principal": {"key": "newWorkspaceAdminPrincipal", "type": "Principal"},
    }

    def __init__(
        self,
        *,
        new_workspace_name: Optional[str] = None,
        new_workspace_admin_principal: Optional["_models.Principal"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword new_workspace_name: The name of the workspace. Mandatory if the restore request is for
         *My workspace*.
        :paramtype new_workspace_name: str
        :keyword new_workspace_admin_principal: The workspace's admin.
        :paramtype new_workspace_admin_principal: ~microsoft.fabric.api.admin.models.Principal
        """
        super().__init__(**kwargs)
        self.new_workspace_name = new_workspace_name
        self.new_workspace_admin_principal = new_workspace_admin_principal


class SetLabelsRequest(_serialization.Model):
    """A composite of label information required to update an information protection label.

    All required parameters must be populated in order to send to server.

    :ivar items: A list of items. The list includes item ID and type. Required.
    :vartype items: list[~microsoft.fabric.api.admin.models.ItemInfo]
    :ivar label_id: The label ID, which must be in the user's label policy. Required.
    :vartype label_id: str
    :ivar delegated_principal: Delegated user details. A delegated user is a user within an
     organization whose admin sets a label on behalf of the user. Although the admin sets the label,
     the delegated user is marked as the label issuer. Only principals of type 'User' are supported.
    :vartype delegated_principal: ~microsoft.fabric.api.admin.models.Principal
    :ivar assignment_method: Specifies whether the assigned label was set by an automated process
     or manually. Additional tenant setting property types may be added over time. Known values are:
     "Standard" and "Priviledged".
    :vartype assignment_method: str or ~microsoft.fabric.api.admin.models.AssignmentMethod
    """

    _validation = {
        "items": {"required": True},
        "label_id": {"required": True},
    }

    _attribute_map = {
        "items": {"key": "items", "type": "[ItemInfo]"},
        "label_id": {"key": "labelId", "type": "str"},
        "delegated_principal": {"key": "delegatedPrincipal", "type": "Principal"},
        "assignment_method": {"key": "assignmentMethod", "type": "str"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ItemInfo"],
        label_id: str,
        delegated_principal: Optional["_models.Principal"] = None,
        assignment_method: Optional[Union[str, "_models.AssignmentMethod"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword items: A list of items. The list includes item ID and type. Required.
        :paramtype items: list[~microsoft.fabric.api.admin.models.ItemInfo]
        :keyword label_id: The label ID, which must be in the user's label policy. Required.
        :paramtype label_id: str
        :keyword delegated_principal: Delegated user details. A delegated user is a user within an
         organization whose admin sets a label on behalf of the user. Although the admin sets the label,
         the delegated user is marked as the label issuer. Only principals of type 'User' are supported.
        :paramtype delegated_principal: ~microsoft.fabric.api.admin.models.Principal
        :keyword assignment_method: Specifies whether the assigned label was set by an automated
         process or manually. Additional tenant setting property types may be added over time. Known
         values are: "Standard" and "Priviledged".
        :paramtype assignment_method: str or ~microsoft.fabric.api.admin.models.AssignmentMethod
        """
        super().__init__(**kwargs)
        self.items = items
        self.label_id = label_id
        self.delegated_principal = delegated_principal
        self.assignment_method = assignment_method


class SyncRoleAssignmentsToSubdomainsRequest(_serialization.Model):
    """The request payload for syncing domain members to subdomains.

    All required parameters must be populated in order to send to server.

    :ivar role: Specifies the role of members to be synchronized with subdomains. Required. Known
     values are: "Admin" and "Contributor".
    :vartype role: str or ~microsoft.fabric.api.admin.models.DomainRole
    """

    _validation = {
        "role": {"required": True},
    }

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, *, role: Union[str, "_models.DomainRole"], **kwargs: Any) -> None:
        """
        :keyword role: Specifies the role of members to be synchronized with subdomains. Required.
         Known values are: "Admin" and "Contributor".
        :paramtype role: str or ~microsoft.fabric.api.admin.models.DomainRole
        """
        super().__init__(**kwargs)
        self.role = role


class Tag(_serialization.Model):
    """Represents a tag.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag object ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    :ivar scope: The scope of the tag. Required.
    :vartype scope: ~microsoft.fabric.api.admin.models.TagScope
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
        "scope": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "scope": {"key": "scope", "type": "TagScope"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        scope: "_models.TagScope",
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The tag object ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        :keyword scope: The scope of the tag. Required.
        :paramtype scope: ~microsoft.fabric.api.admin.models.TagScope
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.scope = scope


class TenantSetting(BaseTenantSetting):  # pylint: disable=too-many-instance-attributes
    """Tenant level setting details.

    All required parameters must be populated in order to send to server.

    :ivar setting_name: The name of the tenant setting. Required.
    :vartype setting_name: str
    :ivar title: The title of the tenant setting. Required.
    :vartype title: str
    :ivar enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
    :vartype enabled: bool
    :ivar can_specify_security_groups: Indicates if the tenant setting is enabled for a security
     group. False - The tenant setting is enabled for the entire organization. True - The tenant
     setting is enabled for security groups. Required.
    :vartype can_specify_security_groups: bool
    :ivar enabled_security_groups: A list of enabled security groups.
    :vartype enabled_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar excluded_security_groups: A list of excluded security groups.
    :vartype excluded_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar tenant_setting_group: Tenant setting group name.
    :vartype tenant_setting_group: str
    :ivar properties: Tenant setting properties.
    :vartype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
    :ivar delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
     workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
     admin can override the tenant setting.
    :vartype delegate_to_workspace: bool
    :ivar delegate_to_capacity: Indicates whether the tenant setting can be delegated to a capacity
     admin. False - Capacity admin cannot override the tenant setting. True - Capacity admin can
     override the tenant setting.
    :vartype delegate_to_capacity: bool
    :ivar delegate_to_domain: Indicates whether the tenant setting can be delegated to a domain
     admin. False - Domain admin cannot override the tenant setting. True - Domain admin can
     override the tenant setting.
    :vartype delegate_to_domain: bool
    """

    _validation = {
        "setting_name": {"required": True},
        "title": {"required": True},
        "enabled": {"required": True},
        "can_specify_security_groups": {"required": True},
    }

    _attribute_map = {
        "setting_name": {"key": "settingName", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "can_specify_security_groups": {"key": "canSpecifySecurityGroups", "type": "bool"},
        "enabled_security_groups": {"key": "enabledSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "excluded_security_groups": {"key": "excludedSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "tenant_setting_group": {"key": "tenantSettingGroup", "type": "str"},
        "properties": {"key": "properties", "type": "[TenantSettingProperty]"},
        "delegate_to_workspace": {"key": "delegateToWorkspace", "type": "bool"},
        "delegate_to_capacity": {"key": "delegateToCapacity", "type": "bool"},
        "delegate_to_domain": {"key": "delegateToDomain", "type": "bool"},
    }

    def __init__(
        self,
        *,
        setting_name: str,
        title: str,
        enabled: bool,
        can_specify_security_groups: bool,
        enabled_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        excluded_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        tenant_setting_group: Optional[str] = None,
        properties: Optional[List["_models.TenantSettingProperty"]] = None,
        delegate_to_workspace: Optional[bool] = None,
        delegate_to_capacity: Optional[bool] = None,
        delegate_to_domain: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword setting_name: The name of the tenant setting. Required.
        :paramtype setting_name: str
        :keyword title: The title of the tenant setting. Required.
        :paramtype title: str
        :keyword enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
        :paramtype enabled: bool
        :keyword can_specify_security_groups: Indicates if the tenant setting is enabled for a security
         group. False - The tenant setting is enabled for the entire organization. True - The tenant
         setting is enabled for security groups. Required.
        :paramtype can_specify_security_groups: bool
        :keyword enabled_security_groups: A list of enabled security groups.
        :paramtype enabled_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword excluded_security_groups: A list of excluded security groups.
        :paramtype excluded_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword tenant_setting_group: Tenant setting group name.
        :paramtype tenant_setting_group: str
        :keyword properties: Tenant setting properties.
        :paramtype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
        :keyword delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
         workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
         admin can override the tenant setting.
        :paramtype delegate_to_workspace: bool
        :keyword delegate_to_capacity: Indicates whether the tenant setting can be delegated to a
         capacity admin. False - Capacity admin cannot override the tenant setting. True - Capacity
         admin can override the tenant setting.
        :paramtype delegate_to_capacity: bool
        :keyword delegate_to_domain: Indicates whether the tenant setting can be delegated to a domain
         admin. False - Domain admin cannot override the tenant setting. True - Domain admin can
         override the tenant setting.
        :paramtype delegate_to_domain: bool
        """
        super().__init__(
            setting_name=setting_name,
            title=title,
            enabled=enabled,
            can_specify_security_groups=can_specify_security_groups,
            enabled_security_groups=enabled_security_groups,
            excluded_security_groups=excluded_security_groups,
            tenant_setting_group=tenant_setting_group,
            properties=properties,
            **kwargs
        )
        self.delegate_to_workspace = delegate_to_workspace
        self.delegate_to_capacity = delegate_to_capacity
        self.delegate_to_domain = delegate_to_domain


class TenantSettingProperty(_serialization.Model):
    """Tenant setting property.

    :ivar name: The name of the property.
    :vartype name: str
    :ivar value: The value of the property.
    :vartype value: str
    :ivar type: The type of the property. Known values are: "FreeText", "Url", "Boolean",
     "MailEnabledSecurityGroup", and "Integer".
    :vartype type: str or ~microsoft.fabric.api.admin.models.TenantSettingPropertyType
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
        type: Optional[Union[str, "_models.TenantSettingPropertyType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the property.
        :paramtype name: str
        :keyword value: The value of the property.
        :paramtype value: str
        :keyword type: The type of the property. Known values are: "FreeText", "Url", "Boolean",
         "MailEnabledSecurityGroup", and "Integer".
        :paramtype type: str or ~microsoft.fabric.api.admin.models.TenantSettingPropertyType
        """
        super().__init__(**kwargs)
        self.name = name
        self.value = value
        self.type = type


class TenantSettings(PaginatedResponse):
    """A list of tenant settings.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of tenant settings.
    :vartype value: list[~microsoft.fabric.api.admin.models.TenantSetting]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[TenantSetting]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.TenantSetting"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of tenant settings.
        :paramtype value: list[~microsoft.fabric.api.admin.models.TenantSetting]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class TenantSettingSecurityGroup(_serialization.Model):
    """Tenant setting security group.

    All required parameters must be populated in order to send to server.

    :ivar graph_id: The graph ID of the security group. Required.
    :vartype graph_id: str
    :ivar name: The name of the security group. Required.
    :vartype name: str
    """

    _validation = {
        "graph_id": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "graph_id": {"key": "graphId", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, graph_id: str, name: str, **kwargs: Any) -> None:
        """
        :keyword graph_id: The graph ID of the security group. Required.
        :paramtype graph_id: str
        :keyword name: The name of the security group. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.graph_id = graph_id
        self.name = name


class TenantTagScope(TagScope):
    """Represents tenant tag scope.

    All required parameters must be populated in order to send to server.

    :ivar type: Denotes tag scope. Additional tag scopes may be added over time. Required. Known
     values are: "Tenant" and "Domain".
    :vartype type: str or ~microsoft.fabric.api.admin.models.TagScopeType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: str = "Tenant"


class UnassignDomainWorkspacesByIdsRequest(_serialization.Model):
    """The request payload for unassigning workspaces from a domain by workspace ID.

    :ivar workspaces_ids: The workspace IDs that will be unassigned from that domain.
    :vartype workspaces_ids: list[str]
    """

    _attribute_map = {
        "workspaces_ids": {"key": "workspacesIds", "type": "[str]"},
    }

    def __init__(self, *, workspaces_ids: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword workspaces_ids: The workspace IDs that will be unassigned from that domain.
        :paramtype workspaces_ids: list[str]
        """
        super().__init__(**kwargs)
        self.workspaces_ids = workspaces_ids


class UpdateCapacityTenantSettingOverrideRequest(_serialization.Model):  # pylint: disable=name-too-long
    """Capacity tenant setting override update request.

    All required parameters must be populated in order to send to server.

    :ivar enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
    :vartype enabled: bool
    :ivar enabled_security_groups: A list of enabled security groups.
    :vartype enabled_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar excluded_security_groups: A list of excluded security groups.
    :vartype excluded_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
     workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
     admin can override the tenant setting.
    :vartype delegate_to_workspace: bool
    """

    _validation = {
        "enabled": {"required": True},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "enabled_security_groups": {"key": "enabledSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "excluded_security_groups": {"key": "excludedSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "delegate_to_workspace": {"key": "delegateToWorkspace", "type": "bool"},
    }

    def __init__(
        self,
        *,
        enabled: bool,
        enabled_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        excluded_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        delegate_to_workspace: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
        :paramtype enabled: bool
        :keyword enabled_security_groups: A list of enabled security groups.
        :paramtype enabled_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword excluded_security_groups: A list of excluded security groups.
        :paramtype excluded_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
         workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
         admin can override the tenant setting.
        :paramtype delegate_to_workspace: bool
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.enabled_security_groups = enabled_security_groups
        self.excluded_security_groups = excluded_security_groups
        self.delegate_to_workspace = delegate_to_workspace


class UpdateCapacityTenantSettingOverrideResponse(_serialization.Model):  # pylint: disable=name-too-long
    """Capacity tenant setting override update request.

    :ivar overrides: A list of tenant settings that were updated in given capacity.
    :vartype overrides: list[~microsoft.fabric.api.admin.models.CapacityTenantSetting]
    """

    _attribute_map = {
        "overrides": {"key": "overrides", "type": "[CapacityTenantSetting]"},
    }

    def __init__(self, *, overrides: Optional[List["_models.CapacityTenantSetting"]] = None, **kwargs: Any) -> None:
        """
        :keyword overrides: A list of tenant settings that were updated in given capacity.
        :paramtype overrides: list[~microsoft.fabric.api.admin.models.CapacityTenantSetting]
        """
        super().__init__(**kwargs)
        self.overrides = overrides


class UpdateDomainRequestBase(_serialization.Model):
    """The request payload for updating a domain.

    :ivar display_name: The domain display name.
     The display name cannot contain more than 40 characters.
    :vartype display_name: str
    :ivar description: The domain description.
     The description cannot contain more than 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The domain display name.
         The display name cannot contain more than 40 characters.
        :paramtype display_name: str
        :keyword description: The domain description.
         The description cannot contain more than 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class UpdateDomainRequest(UpdateDomainRequestBase):
    """UpdateDomainRequest.

    :ivar display_name: The domain display name.
     The display name cannot contain more than 40 characters.
    :vartype display_name: str
    :ivar description: The domain description.
     The description cannot contain more than 256 characters.
    :vartype description: str
    :ivar default_label_id: The domain default sensitivity label.

     To remove the defaultLabelId from a domain, set its value to an empty UUID in your request:
     "00000000-0000-0000-0000-000000000000".
    :vartype default_label_id: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "default_label_id": {"key": "defaultLabelId", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        default_label_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The domain display name.
         The display name cannot contain more than 40 characters.
        :paramtype display_name: str
        :keyword description: The domain description.
         The description cannot contain more than 256 characters.
        :paramtype description: str
        :keyword default_label_id: The domain default sensitivity label.

         To remove the defaultLabelId from a domain, set its value to an empty UUID in your request:
         "00000000-0000-0000-0000-000000000000".
        :paramtype default_label_id: str
        """
        super().__init__(display_name=display_name, description=description, **kwargs)
        self.default_label_id = default_label_id


class UpdateDomainRequestPreview(UpdateDomainRequestBase):
    """UpdateDomainRequestPreview.

    :ivar display_name: The domain display name.
     The display name cannot contain more than 40 characters.
    :vartype display_name: str
    :ivar description: The domain description.
     The description cannot contain more than 256 characters.
    :vartype description: str
    :ivar contributors_scope: The domain contributors scope. Known values are: "AllTenant",
     "SpecificUsersAndGroups", and "AdminsOnly".
    :vartype contributors_scope: str or ~microsoft.fabric.api.admin.models.ContributorsScopeType
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "contributors_scope": {"key": "contributorsScope", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        contributors_scope: Optional[Union[str, "_models.ContributorsScopeType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The domain display name.
         The display name cannot contain more than 40 characters.
        :paramtype display_name: str
        :keyword description: The domain description.
         The description cannot contain more than 256 characters.
        :paramtype description: str
        :keyword contributors_scope: The domain contributors scope. Known values are: "AllTenant",
         "SpecificUsersAndGroups", and "AdminsOnly".
        :paramtype contributors_scope: str or ~microsoft.fabric.api.admin.models.ContributorsScopeType
        """
        super().__init__(display_name=display_name, description=description, **kwargs)
        self.contributors_scope = contributors_scope


class UpdateTagRequest(_serialization.Model):
    """The request payload for updating a tag.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The tag display name.
     The display name cannot contain more than 40 characters. Required.
    :vartype display_name: str
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, display_name: str, **kwargs: Any) -> None:
        """
        :keyword display_name: The tag display name.
         The display name cannot contain more than 40 characters. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name


class UpdateTenantSettingRequest(_serialization.Model):
    """Tenant setting update request.

    All required parameters must be populated in order to send to server.

    :ivar enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
    :vartype enabled: bool
    :ivar enabled_security_groups: A list of enabled security groups.
    :vartype enabled_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar excluded_security_groups: A list of excluded security groups.
    :vartype excluded_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar properties: Tenant setting properties.
    :vartype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
    :ivar delegate_to_capacity: Indicates whether the tenant setting can be delegated to a capacity
     admin. False - Capacity admin cannot override the tenant setting. True - Capacity admin can
     override the tenant setting.
    :vartype delegate_to_capacity: bool
    :ivar delegate_to_domain: Indicates whether the tenant setting can be delegated to a domain
     admin. False - Domain admin cannot override the tenant setting. True - Domain admin can
     override the tenant setting.
    :vartype delegate_to_domain: bool
    :ivar delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
     workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
     admin can override the tenant setting.
    :vartype delegate_to_workspace: bool
    """

    _validation = {
        "enabled": {"required": True},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "enabled_security_groups": {"key": "enabledSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "excluded_security_groups": {"key": "excludedSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "properties": {"key": "properties", "type": "[TenantSettingProperty]"},
        "delegate_to_capacity": {"key": "delegateToCapacity", "type": "bool"},
        "delegate_to_domain": {"key": "delegateToDomain", "type": "bool"},
        "delegate_to_workspace": {"key": "delegateToWorkspace", "type": "bool"},
    }

    def __init__(
        self,
        *,
        enabled: bool,
        enabled_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        excluded_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        properties: Optional[List["_models.TenantSettingProperty"]] = None,
        delegate_to_capacity: Optional[bool] = None,
        delegate_to_domain: Optional[bool] = None,
        delegate_to_workspace: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
        :paramtype enabled: bool
        :keyword enabled_security_groups: A list of enabled security groups.
        :paramtype enabled_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword excluded_security_groups: A list of excluded security groups.
        :paramtype excluded_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword properties: Tenant setting properties.
        :paramtype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
        :keyword delegate_to_capacity: Indicates whether the tenant setting can be delegated to a
         capacity admin. False - Capacity admin cannot override the tenant setting. True - Capacity
         admin can override the tenant setting.
        :paramtype delegate_to_capacity: bool
        :keyword delegate_to_domain: Indicates whether the tenant setting can be delegated to a domain
         admin. False - Domain admin cannot override the tenant setting. True - Domain admin can
         override the tenant setting.
        :paramtype delegate_to_domain: bool
        :keyword delegate_to_workspace: Indicates whether the tenant setting can be delegated to a
         workspace admin. False - Workspace admin cannot override the tenant setting. True - Workspace
         admin can override the tenant setting.
        :paramtype delegate_to_workspace: bool
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.enabled_security_groups = enabled_security_groups
        self.excluded_security_groups = excluded_security_groups
        self.properties = properties
        self.delegate_to_capacity = delegate_to_capacity
        self.delegate_to_domain = delegate_to_domain
        self.delegate_to_workspace = delegate_to_workspace


class UpdateTenantSettingResponse(_serialization.Model):
    """Tenant setting update response.

    :ivar tenant_settings: A list of tenant settings that were updated.
    :vartype tenant_settings: list[~microsoft.fabric.api.admin.models.TenantSetting]
    """

    _attribute_map = {
        "tenant_settings": {"key": "tenantSettings", "type": "[TenantSetting]"},
    }

    def __init__(self, *, tenant_settings: Optional[List["_models.TenantSetting"]] = None, **kwargs: Any) -> None:
        """
        :keyword tenant_settings: A list of tenant settings that were updated.
        :paramtype tenant_settings: list[~microsoft.fabric.api.admin.models.TenantSetting]
        """
        super().__init__(**kwargs)
        self.tenant_settings = tenant_settings


class Workspace(_serialization.Model):
    """Workspace.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The workspace ID. Required.
    :vartype id: str
    :ivar name: The workspace name. Required.
    :vartype name: str
    :ivar type: The workspace type. Required. Known values are: "Personal", "Workspace", and
     "AdminWorkspace".
    :vartype type: str or ~microsoft.fabric.api.admin.models.WorkspaceType
    :ivar state: The workspace state. Required. Known values are: "Active" and "Deleted".
    :vartype state: str or ~microsoft.fabric.api.admin.models.WorkspaceState
    :ivar capacity_id: The capacity ID of the workspace.
    :vartype capacity_id: str
    :ivar domain_id: The domain ID of the workspace.
    :vartype domain_id: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "name": {"required": True},
        "type": {"required": True, "readonly": True},
        "state": {"required": True, "readonly": True},
        "capacity_id": {"readonly": True},
        "domain_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "domain_id": {"key": "domainId", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: The workspace name. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.state = None
        self.capacity_id = None
        self.domain_id = None


class WorkspaceAccessDetail(_serialization.Model):
    """Workspace permission details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: Workspace type. Known values are: "Personal", "Workspace", and "AdminWorkspace".
    :vartype type: str or ~microsoft.fabric.api.admin.models.WorkspaceType
    :ivar workspace_role: The workspace role. Known values are: "Admin", "Member", "Contributor",
     and "Viewer".
    :vartype workspace_role: str or ~microsoft.fabric.api.admin.models.WorkspaceRole
    """

    _validation = {
        "type": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "workspace_role": {"key": "workspaceRole", "type": "str"},
    }

    def __init__(self, *, workspace_role: Optional[Union[str, "_models.WorkspaceRole"]] = None, **kwargs: Any) -> None:
        """
        :keyword workspace_role: The workspace role. Known values are: "Admin", "Member",
         "Contributor", and "Viewer".
        :paramtype workspace_role: str or ~microsoft.fabric.api.admin.models.WorkspaceRole
        """
        super().__init__(**kwargs)
        self.type = None
        self.workspace_role = workspace_role


class WorkspaceAccessDetails(_serialization.Model):
    """User access details for the workspace.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal: Information regarding the user who has access to the entity.
    :vartype principal: ~microsoft.fabric.api.admin.models.Principal
    :ivar workspace_access_details: Workspace permissions for the user.
    :vartype workspace_access_details: ~microsoft.fabric.api.admin.models.WorkspaceAccessDetail
    """

    _validation = {
        "principal": {"readonly": True},
        "workspace_access_details": {"readonly": True},
    }

    _attribute_map = {
        "principal": {"key": "principal", "type": "Principal"},
        "workspace_access_details": {"key": "workspaceAccessDetails", "type": "WorkspaceAccessDetail"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal = None
        self.workspace_access_details = None


class WorkspaceAccessDetailsResponse(_serialization.Model):
    """A list of users with access to a given entity.

    :ivar access_details: A list of users with access to an entity.
    :vartype access_details: list[~microsoft.fabric.api.admin.models.WorkspaceAccessDetails]
    """

    _attribute_map = {
        "access_details": {"key": "accessDetails", "type": "[WorkspaceAccessDetails]"},
    }

    def __init__(
        self, *, access_details: Optional[List["_models.WorkspaceAccessDetails"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword access_details: A list of users with access to an entity.
        :paramtype access_details: list[~microsoft.fabric.api.admin.models.WorkspaceAccessDetails]
        """
        super().__init__(**kwargs)
        self.access_details = access_details


class Workspaces(PaginatedResponse):
    """A list of workspaces.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar workspaces: The list of fabric workspaces.
    :vartype workspaces: list[~microsoft.fabric.api.admin.models.Workspace]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "workspaces": {"key": "workspaces", "type": "[Workspace]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        workspaces: Optional[List["_models.Workspace"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword workspaces: The list of fabric workspaces.
        :paramtype workspaces: list[~microsoft.fabric.api.admin.models.Workspace]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.workspaces = workspaces


class WorkspaceTenantSetting(BaseTenantSetting):
    """Workspace tenant setting details.

    All required parameters must be populated in order to send to server.

    :ivar setting_name: The name of the tenant setting. Required.
    :vartype setting_name: str
    :ivar title: The title of the tenant setting. Required.
    :vartype title: str
    :ivar enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
    :vartype enabled: bool
    :ivar can_specify_security_groups: Indicates if the tenant setting is enabled for a security
     group. False - The tenant setting is enabled for the entire organization. True - The tenant
     setting is enabled for security groups. Required.
    :vartype can_specify_security_groups: bool
    :ivar enabled_security_groups: A list of enabled security groups.
    :vartype enabled_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar excluded_security_groups: A list of excluded security groups.
    :vartype excluded_security_groups:
     list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
    :ivar tenant_setting_group: Tenant setting group name.
    :vartype tenant_setting_group: str
    :ivar properties: Tenant setting properties.
    :vartype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
    :ivar delegated_from: Tenant setting delegated from tenant, capacity or domain. Known values
     are: "Tenant", "Capacity", and "Domain".
    :vartype delegated_from: str or ~microsoft.fabric.api.admin.models.DelegatedFrom
    """

    _validation = {
        "setting_name": {"required": True},
        "title": {"required": True},
        "enabled": {"required": True},
        "can_specify_security_groups": {"required": True},
    }

    _attribute_map = {
        "setting_name": {"key": "settingName", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "can_specify_security_groups": {"key": "canSpecifySecurityGroups", "type": "bool"},
        "enabled_security_groups": {"key": "enabledSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "excluded_security_groups": {"key": "excludedSecurityGroups", "type": "[TenantSettingSecurityGroup]"},
        "tenant_setting_group": {"key": "tenantSettingGroup", "type": "str"},
        "properties": {"key": "properties", "type": "[TenantSettingProperty]"},
        "delegated_from": {"key": "delegatedFrom", "type": "str"},
    }

    def __init__(
        self,
        *,
        setting_name: str,
        title: str,
        enabled: bool,
        can_specify_security_groups: bool,
        enabled_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        excluded_security_groups: Optional[List["_models.TenantSettingSecurityGroup"]] = None,
        tenant_setting_group: Optional[str] = None,
        properties: Optional[List["_models.TenantSettingProperty"]] = None,
        delegated_from: Optional[Union[str, "_models.DelegatedFrom"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword setting_name: The name of the tenant setting. Required.
        :paramtype setting_name: str
        :keyword title: The title of the tenant setting. Required.
        :paramtype title: str
        :keyword enabled: The status of the tenant setting. False - Disabled, True - Enabled. Required.
        :paramtype enabled: bool
        :keyword can_specify_security_groups: Indicates if the tenant setting is enabled for a security
         group. False - The tenant setting is enabled for the entire organization. True - The tenant
         setting is enabled for security groups. Required.
        :paramtype can_specify_security_groups: bool
        :keyword enabled_security_groups: A list of enabled security groups.
        :paramtype enabled_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword excluded_security_groups: A list of excluded security groups.
        :paramtype excluded_security_groups:
         list[~microsoft.fabric.api.admin.models.TenantSettingSecurityGroup]
        :keyword tenant_setting_group: Tenant setting group name.
        :paramtype tenant_setting_group: str
        :keyword properties: Tenant setting properties.
        :paramtype properties: list[~microsoft.fabric.api.admin.models.TenantSettingProperty]
        :keyword delegated_from: Tenant setting delegated from tenant, capacity or domain. Known values
         are: "Tenant", "Capacity", and "Domain".
        :paramtype delegated_from: str or ~microsoft.fabric.api.admin.models.DelegatedFrom
        """
        super().__init__(
            setting_name=setting_name,
            title=title,
            enabled=enabled,
            can_specify_security_groups=can_specify_security_groups,
            enabled_security_groups=enabled_security_groups,
            excluded_security_groups=excluded_security_groups,
            tenant_setting_group=tenant_setting_group,
            properties=properties,
            **kwargs
        )
        self.delegated_from = delegated_from


class WorkspaceTenantSettingOverride(_serialization.Model):
    """A workspaceadmin can override the tenant setting.

    :ivar id: The ID of a workspace.
    :vartype id: str
    :ivar tenant_settings: A list of workspace tenant settings.
    :vartype tenant_settings: list[~microsoft.fabric.api.admin.models.WorkspaceTenantSetting]
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "tenant_settings": {"key": "tenantSettings", "type": "[WorkspaceTenantSetting]"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        tenant_settings: Optional[List["_models.WorkspaceTenantSetting"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The ID of a workspace.
        :paramtype id: str
        :keyword tenant_settings: A list of workspace tenant settings.
        :paramtype tenant_settings: list[~microsoft.fabric.api.admin.models.WorkspaceTenantSetting]
        """
        super().__init__(**kwargs)
        self.id = id
        self.tenant_settings = tenant_settings


class WorkspaceTenantSettingOverrides(PaginatedResponse):
    """A list of tenant settings overrides.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of tenant settings that were overridden by a workspace admin.
    :vartype value: list[~microsoft.fabric.api.admin.models.WorkspaceTenantSettingOverride]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[WorkspaceTenantSettingOverride]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.WorkspaceTenantSettingOverride"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of tenant settings that were overridden by a workspace admin.
        :paramtype value: list[~microsoft.fabric.api.admin.models.WorkspaceTenantSettingOverride]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value
