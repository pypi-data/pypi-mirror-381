# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, TYPE_CHECKING
from typing_extensions import Self

from azure.core import PipelineClient
from azure.core.pipeline import policies
from azure.core.rest import HttpRequest, HttpResponse

from . import models as _models
from ._configuration import FabricAdminClientConfiguration
from ._serialization import Deserializer, Serializer
from .operations import (
    DomainsOperations,
    ExternalDataSharesProviderOperations,
    ItemsOperations,
    LabelsOperations,
    SharingLinksOperations,
    TagsOperations,
    TenantsOperations,
    UsersOperations,
    WorkspacesOperations,
)

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials import TokenCredential


class FabricAdminClient:  # pylint: disable=client-accepts-api-version-keyword,too-many-instance-attributes
    """FabricAdminClient.

    :ivar tenants: TenantsOperations operations
    :vartype tenants: microsoft.fabric.api.admin.operations.TenantsOperations
    :ivar workspaces: WorkspacesOperations operations
    :vartype workspaces: microsoft.fabric.api.admin.operations.WorkspacesOperations
    :ivar items: ItemsOperations operations
    :vartype items: microsoft.fabric.api.admin.operations.ItemsOperations
    :ivar users: UsersOperations operations
    :vartype users: microsoft.fabric.api.admin.operations.UsersOperations
    :ivar domains: DomainsOperations operations
    :vartype domains: microsoft.fabric.api.admin.operations.DomainsOperations
    :ivar tags: TagsOperations operations
    :vartype tags: microsoft.fabric.api.admin.operations.TagsOperations
    :ivar labels: LabelsOperations operations
    :vartype labels: microsoft.fabric.api.admin.operations.LabelsOperations
    :ivar external_data_shares_provider: ExternalDataSharesProviderOperations operations
    :vartype external_data_shares_provider:
     microsoft.fabric.api.admin.operations.ExternalDataSharesProviderOperations
    :ivar sharing_links: SharingLinksOperations operations
    :vartype sharing_links: microsoft.fabric.api.admin.operations.SharingLinksOperations
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials.TokenCredential
    :keyword endpoint: Service URL. Default value is "https://api.fabric.microsoft.com/v1/admin".
    :paramtype endpoint: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self,
        credential: "TokenCredential",
        *,
        endpoint: str = "https://api.fabric.microsoft.com/v1/admin",
        **kwargs: Any
    ) -> None:
        self._config = FabricAdminClientConfiguration(credential=credential, **kwargs)
        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: PipelineClient = PipelineClient(base_url=endpoint, policies=_policies, **kwargs)

        client_models = {k: v for k, v in _models._models.__dict__.items() if isinstance(v, type)}
        client_models.update({k: v for k, v in _models.__dict__.items() if isinstance(v, type)})
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.tenants = TenantsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.workspaces = WorkspacesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.items = ItemsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.users = UsersOperations(self._client, self._config, self._serialize, self._deserialize)
        self.domains = DomainsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.tags = TagsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.labels = LabelsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.external_data_shares_provider = ExternalDataSharesProviderOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.sharing_links = SharingLinksOperations(self._client, self._config, self._serialize, self._deserialize)

    def send_request(self, request: HttpRequest, *, stream: bool = False, **kwargs: Any) -> HttpResponse:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = client.send_request(request)
        <HttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.HttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    def close(self) -> None:
        self._client.close()

    def __enter__(self) -> Self:
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details: Any) -> None:
        self._client.__exit__(*exc_details)
