# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ConnectionStringResponse(_serialization.Model):
    """The SQL connection string for the workspace containing this warehouse.

    :ivar connection_string: The SQL connection string for the workspace containing this warehouse.
    :vartype connection_string: str
    """

    _attribute_map = {
        "connection_string": {"key": "connectionString", "type": "str"},
    }

    def __init__(self, *, connection_string: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword connection_string: The SQL connection string for the workspace containing this
         warehouse.
        :paramtype connection_string: str
        """
        super().__init__(**kwargs)
        self.connection_string = connection_string


class CreateRestorePointRequest(_serialization.Model):
    """Create restore point request payload.

    :ivar display_name: The restore point name. Maximum length is 128 characters.
    :vartype display_name: str
    :ivar description: The restore point description. Maximum length is 512 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The restore point name. Maximum length is 128 characters.
        :paramtype display_name: str
        :keyword description: The restore point description. Maximum length is 512 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class CreateWarehouseRequest(_serialization.Model):
    """Create warehouse request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The warehouse display name. The display name must follow naming rules
     according to item type. Required.
    :vartype display_name: str
    :ivar description: The warehouse description. Maximum length is 256 characters.
    :vartype description: str
    :ivar folder_id: The folder ID. If not specified or null, the warehouse is created with the
     workspace as its folder.
    :vartype folder_id: str
    :ivar creation_payload: The warehouse creation payload. Use ``creationPayload``. You can't use
     ``definition`` or ``creationPayload`` at the same time.
    :vartype creation_payload: ~microsoft.fabric.api.warehouse.models.WarehouseCreationPayload
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "creation_payload": {"key": "creationPayload", "type": "WarehouseCreationPayload"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        creation_payload: Optional["_models.WarehouseCreationPayload"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The warehouse display name. The display name must follow naming rules
         according to item type. Required.
        :paramtype display_name: str
        :keyword description: The warehouse description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword folder_id: The folder ID. If not specified or null, the warehouse is created with the
         workspace as its folder.
        :paramtype folder_id: str
        :keyword creation_payload: The warehouse creation payload. Use ``creationPayload``. You can't
         use ``definition`` or ``creationPayload`` at the same time.
        :paramtype creation_payload: ~microsoft.fabric.api.warehouse.models.WarehouseCreationPayload
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.folder_id = folder_id
        self.creation_payload = creation_payload


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.warehouse.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.warehouse.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.warehouse.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.warehouse.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.warehouse.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.warehouse.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class Principal(_serialization.Model):
    """Represents an identity or a Microsoft Entra group.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The principal's ID. Required.
    :vartype id: str
    :ivar display_name: The principal's display name.
    :vartype display_name: str
    :ivar type: The type of the principal. Additional principal types may be added over time.
     Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
     "EntireTenant".
    :vartype type: str or ~microsoft.fabric.api.warehouse.models.PrincipalType
    :ivar user_details: User principal specific details. Applicable when the principal type is
     ``User``.
    :vartype user_details: ~microsoft.fabric.api.warehouse.models.PrincipalUserDetails
    :ivar service_principal_details: Service principal specific details. Applicable when the
     principal type is ``ServicePrincipal``.
    :vartype service_principal_details:
     ~microsoft.fabric.api.warehouse.models.PrincipalServicePrincipalDetails
    :ivar group_details: Group specific details. Applicable when the principal type is ``Group``.
    :vartype group_details: ~microsoft.fabric.api.warehouse.models.PrincipalGroupDetails
    :ivar service_principal_profile_details: Service principal profile details. Applicable when the
     principal type is ``ServicePrincipalProfile``.
    :vartype service_principal_profile_details:
     ~microsoft.fabric.api.warehouse.models.PrincipalServicePrincipalProfileDetails
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"readonly": True},
        "type": {"required": True},
        "user_details": {"readonly": True},
        "service_principal_details": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_details": {"key": "userDetails", "type": "PrincipalUserDetails"},
        "service_principal_details": {"key": "servicePrincipalDetails", "type": "PrincipalServicePrincipalDetails"},
        "group_details": {"key": "groupDetails", "type": "PrincipalGroupDetails"},
        "service_principal_profile_details": {
            "key": "servicePrincipalProfileDetails",
            "type": "PrincipalServicePrincipalProfileDetails",
        },
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: Union[str, "_models.PrincipalType"],
        group_details: Optional["_models.PrincipalGroupDetails"] = None,
        service_principal_profile_details: Optional["_models.PrincipalServicePrincipalProfileDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The principal's ID. Required.
        :paramtype id: str
        :keyword type: The type of the principal. Additional principal types may be added over time.
         Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
         "EntireTenant".
        :paramtype type: str or ~microsoft.fabric.api.warehouse.models.PrincipalType
        :keyword group_details: Group specific details. Applicable when the principal type is
         ``Group``.
        :paramtype group_details: ~microsoft.fabric.api.warehouse.models.PrincipalGroupDetails
        :keyword service_principal_profile_details: Service principal profile details. Applicable when
         the principal type is ``ServicePrincipalProfile``.
        :paramtype service_principal_profile_details:
         ~microsoft.fabric.api.warehouse.models.PrincipalServicePrincipalProfileDetails
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = None
        self.type = type
        self.user_details = None
        self.service_principal_details = None
        self.group_details = group_details
        self.service_principal_profile_details = service_principal_profile_details


class PrincipalGroupDetails(_serialization.Model):
    """Group specific details. Applicable when the principal type is ``Group``.

    :ivar group_type: The type of the group. Additional group types may be added over time. Known
     values are: "Unknown", "SecurityGroup", and "DistributionList".
    :vartype group_type: str or ~microsoft.fabric.api.warehouse.models.GroupType
    """

    _attribute_map = {
        "group_type": {"key": "groupType", "type": "str"},
    }

    def __init__(self, *, group_type: Optional[Union[str, "_models.GroupType"]] = None, **kwargs: Any) -> None:
        """
        :keyword group_type: The type of the group. Additional group types may be added over time.
         Known values are: "Unknown", "SecurityGroup", and "DistributionList".
        :paramtype group_type: str or ~microsoft.fabric.api.warehouse.models.GroupType
        """
        super().__init__(**kwargs)
        self.group_type = group_type


class PrincipalServicePrincipalDetails(_serialization.Model):
    """Service principal specific details. Applicable when the principal type is ``ServicePrincipal``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar aad_app_id: The service principal's Microsoft Entra AppId.
    :vartype aad_app_id: str
    """

    _validation = {
        "aad_app_id": {"readonly": True},
    }

    _attribute_map = {
        "aad_app_id": {"key": "aadAppId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.aad_app_id = None


class PrincipalServicePrincipalProfileDetails(_serialization.Model):
    """Service principal profile details. Applicable when the principal type is
    ``ServicePrincipalProfile``.

    :ivar parent_principal: The service principal profile's parent principal.
    :vartype parent_principal: ~microsoft.fabric.api.warehouse.models.Principal
    """

    _attribute_map = {
        "parent_principal": {"key": "parentPrincipal", "type": "Principal"},
    }

    def __init__(self, *, parent_principal: Optional["_models.Principal"] = None, **kwargs: Any) -> None:
        """
        :keyword parent_principal: The service principal profile's parent principal.
        :paramtype parent_principal: ~microsoft.fabric.api.warehouse.models.Principal
        """
        super().__init__(**kwargs)
        self.parent_principal = parent_principal


class PrincipalUserDetails(_serialization.Model):
    """User principal specific details. Applicable when the principal type is ``User``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar user_principal_name: The user principal name.
    :vartype user_principal_name: str
    """

    _validation = {
        "user_principal_name": {"readonly": True},
    }

    _attribute_map = {
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.user_principal_name = None


class RestorePoint(_serialization.Model):
    """The properties of a restore point.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The restore point ID. Required.
    :vartype id: str
    :ivar display_name: The restore point name. Required.
    :vartype display_name: str
    :ivar description: The restore point description. Required.
    :vartype description: str
    :ivar creation_mode: The creation mode of the restore point. Additional creation mode types may
     be added over time. Required. Known values are: "UserDefined" and "SystemCreated".
    :vartype creation_mode: str or ~microsoft.fabric.api.warehouse.models.CreationModeType
    :ivar creation_details: The creation metadata of the restore point. Required.
    :vartype creation_details: ~microsoft.fabric.api.warehouse.models.RestorePointEventDetails
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "display_name": {"required": True},
        "description": {"required": True},
        "creation_mode": {"required": True, "readonly": True},
        "creation_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "creation_mode": {"key": "creationMode", "type": "str"},
        "creation_details": {"key": "creationDetails", "type": "RestorePointEventDetails"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: str,
        creation_details: "_models.RestorePointEventDetails",
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The restore point name. Required.
        :paramtype display_name: str
        :keyword description: The restore point description. Required.
        :paramtype description: str
        :keyword creation_details: The creation metadata of the restore point. Required.
        :paramtype creation_details: ~microsoft.fabric.api.warehouse.models.RestorePointEventDetails
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.creation_mode = None
        self.creation_details = creation_details


class RestorePointEventDetails(_serialization.Model):
    """The restore point event details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar event_date_time: The time of the restore point event in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype event_date_time: ~datetime.datetime
    :ivar event_initiator: The principal that initiated the restore point event.
    :vartype event_initiator: ~microsoft.fabric.api.warehouse.models.Principal
    """

    _validation = {
        "event_date_time": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "event_date_time": {"key": "eventDateTime", "type": "iso-8601"},
        "event_initiator": {"key": "eventInitiator", "type": "Principal"},
    }

    def __init__(self, *, event_initiator: Optional["_models.Principal"] = None, **kwargs: Any) -> None:
        """
        :keyword event_initiator: The principal that initiated the restore point event.
        :paramtype event_initiator: ~microsoft.fabric.api.warehouse.models.Principal
        """
        super().__init__(**kwargs)
        self.event_date_time = None
        self.event_initiator = event_initiator


class RestorePoints(PaginatedResponse):
    """A list of restore points.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of restore points. Required.
    :vartype value: list[~microsoft.fabric.api.warehouse.models.RestorePoint]
    """

    _validation = {
        "value": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[RestorePoint]"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = None


class SqlAuditSettings(_serialization.Model):
    """The current state of audit settings for an item.

    All required parameters must be populated in order to send to server.

    :ivar state: Audit settings state type. Required. Known values are: "Enabled" and "Disabled".
    :vartype state: str or ~microsoft.fabric.api.warehouse.models.AuditSettingsState
    :ivar retention_days: Retention days. 0 indicates indefinite retention period. Required.
    :vartype retention_days: int
    :ivar audit_actions_and_groups: Audit actions and groups. Required.
    :vartype audit_actions_and_groups: list[str]
    """

    _validation = {
        "state": {"required": True},
        "retention_days": {"required": True},
        "audit_actions_and_groups": {"required": True},
    }

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
        "retention_days": {"key": "retentionDays", "type": "int"},
        "audit_actions_and_groups": {"key": "auditActionsAndGroups", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        state: Union[str, "_models.AuditSettingsState"],
        retention_days: int,
        audit_actions_and_groups: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword state: Audit settings state type. Required. Known values are: "Enabled" and
         "Disabled".
        :paramtype state: str or ~microsoft.fabric.api.warehouse.models.AuditSettingsState
        :keyword retention_days: Retention days. 0 indicates indefinite retention period. Required.
        :paramtype retention_days: int
        :keyword audit_actions_and_groups: Audit actions and groups. Required.
        :paramtype audit_actions_and_groups: list[str]
        """
        super().__init__(**kwargs)
        self.state = state
        self.retention_days = retention_days
        self.audit_actions_and_groups = audit_actions_and_groups


class SqlAuditSettingsUpdate(_serialization.Model):
    """Audit settings update request.

    :ivar state: Audit settings state type. Known values are: "Enabled" and "Disabled".
    :vartype state: str or ~microsoft.fabric.api.warehouse.models.AuditSettingsState
    :ivar retention_days: Retention days.
    :vartype retention_days: int
    """

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
        "retention_days": {"key": "retentionDays", "type": "int"},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.AuditSettingsState"]] = None,
        retention_days: int = 0,
        **kwargs: Any
    ) -> None:
        """
        :keyword state: Audit settings state type. Known values are: "Enabled" and "Disabled".
        :paramtype state: str or ~microsoft.fabric.api.warehouse.models.AuditSettingsState
        :keyword retention_days: Retention days.
        :paramtype retention_days: int
        """
        super().__init__(**kwargs)
        self.state = state
        self.retention_days = retention_days


class UpdateRestorePointRequest(_serialization.Model):
    """Update restore point request payload.

    :ivar display_name: The restore point name. Maximum length is 128 characters.
    :vartype display_name: str
    :ivar description: The restore point description. Maximum length is 512 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The restore point name. Maximum length is 128 characters.
        :paramtype display_name: str
        :keyword description: The restore point description. Maximum length is 512 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class UpdateWarehouseRequest(_serialization.Model):
    """Update warehouse request.

    :ivar display_name: The warehouse display name. The display name must follow naming rules
     according to item type.
    :vartype display_name: str
    :ivar description: The warehouse description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The warehouse display name. The display name must follow naming rules
         according to item type.
        :paramtype display_name: str
        :keyword description: The warehouse description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class Warehouse(Item):
    """A warehouse object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.warehouse.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.warehouse.models.ItemTag]
    :ivar properties: The warehouse properties.
    :vartype properties: ~microsoft.fabric.api.warehouse.models.WarehouseProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
        "properties": {"key": "properties", "type": "WarehouseProperties"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional["_models.WarehouseProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.warehouse.models.ItemType
        :keyword properties: The warehouse properties.
        :paramtype properties: ~microsoft.fabric.api.warehouse.models.WarehouseProperties
        """
        super().__init__(display_name=display_name, description=description, type=type, **kwargs)
        self.properties = properties


class WarehouseCreationPayload(_serialization.Model):
    """Warehouse item payload.

    All required parameters must be populated in order to send to server.

    :ivar collation_type: The default collation type of the warehouse. Required. Known values are:
     "Latin1_General_100_BIN2_UTF8" and "Latin1_General_100_CI_AS_KS_WS_SC_UTF8".
    :vartype collation_type: str or ~microsoft.fabric.api.warehouse.models.CollationType
    """

    _validation = {
        "collation_type": {"required": True},
    }

    _attribute_map = {
        "collation_type": {"key": "collationType", "type": "str"},
    }

    def __init__(self, *, collation_type: Union[str, "_models.CollationType"], **kwargs: Any) -> None:
        """
        :keyword collation_type: The default collation type of the warehouse. Required. Known values
         are: "Latin1_General_100_BIN2_UTF8" and "Latin1_General_100_CI_AS_KS_WS_SC_UTF8".
        :paramtype collation_type: str or ~microsoft.fabric.api.warehouse.models.CollationType
        """
        super().__init__(**kwargs)
        self.collation_type = collation_type


class WarehouseProperties(_serialization.Model):
    """The warehouse item properties.

    All required parameters must be populated in order to send to server.

    :ivar connection_string: The SQL connection string connected to the workspace containing this
     warehouse. Required.
    :vartype connection_string: str
    :ivar created_date: The date and time the warehouse was created. Required.
    :vartype created_date: ~datetime.datetime
    :ivar last_updated_time: The date and time the warehouse was last updated. Required.
    :vartype last_updated_time: ~datetime.datetime
    :ivar collation_type: The collation type of the warehouse. Known values are:
     "Latin1_General_100_BIN2_UTF8" and "Latin1_General_100_CI_AS_KS_WS_SC_UTF8".
    :vartype collation_type: str or ~microsoft.fabric.api.warehouse.models.CollationType
    """

    _validation = {
        "connection_string": {"required": True},
        "created_date": {"required": True},
        "last_updated_time": {"required": True},
    }

    _attribute_map = {
        "connection_string": {"key": "connectionString", "type": "str"},
        "created_date": {"key": "createdDate", "type": "iso-8601"},
        "last_updated_time": {"key": "lastUpdatedTime", "type": "iso-8601"},
        "collation_type": {"key": "collationType", "type": "str"},
    }

    def __init__(
        self,
        *,
        connection_string: str,
        created_date: datetime.datetime,
        last_updated_time: datetime.datetime,
        collation_type: Optional[Union[str, "_models.CollationType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword connection_string: The SQL connection string connected to the workspace containing
         this warehouse. Required.
        :paramtype connection_string: str
        :keyword created_date: The date and time the warehouse was created. Required.
        :paramtype created_date: ~datetime.datetime
        :keyword last_updated_time: The date and time the warehouse was last updated. Required.
        :paramtype last_updated_time: ~datetime.datetime
        :keyword collation_type: The collation type of the warehouse. Known values are:
         "Latin1_General_100_BIN2_UTF8" and "Latin1_General_100_CI_AS_KS_WS_SC_UTF8".
        :paramtype collation_type: str or ~microsoft.fabric.api.warehouse.models.CollationType
        """
        super().__init__(**kwargs)
        self.connection_string = connection_string
        self.created_date = created_date
        self.last_updated_time = last_updated_time
        self.collation_type = collation_type


class Warehouses(PaginatedResponse):
    """A list of warehouses.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of warehouses. Required.
    :vartype value: list[~microsoft.fabric.api.warehouse.models.Warehouse]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Warehouse]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Warehouse"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of warehouses. Required.
        :paramtype value: list[~microsoft.fabric.api.warehouse.models.Warehouse]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value
