# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CreateEventhouseRequest(_serialization.Model):
    """Create eventhouse request.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The eventhouse display name. The eventhouse name can contain alphanumeric
     characters, underscores, periods, and hyphens. Special characters aren't supported. Required.
    :vartype display_name: str
    :ivar description: The eventhouse description. Maximum length is 256 characters.
    :vartype description: str
    :ivar folder_id: The folder ID. If not specified or null, the eventhouse is created with the
     workspace as its folder.
    :vartype folder_id: str
    :ivar creation_payload: The eventhouse creation payload. Use ``definition`` or
     ``creationPayload``. You can't use both at the same time.
    :vartype creation_payload: ~microsoft.fabric.api.eventhouse.models.EventhouseCreationPayload
    :ivar definition: The eventhouse public definition. Use ``definition`` or ``creationPayload``.
     You can't use both at the same time.
    :vartype definition: ~microsoft.fabric.api.eventhouse.models.EventhouseDefinition
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "creation_payload": {"key": "creationPayload", "type": "EventhouseCreationPayload"},
        "definition": {"key": "definition", "type": "EventhouseDefinition"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        creation_payload: Optional["_models.EventhouseCreationPayload"] = None,
        definition: Optional["_models.EventhouseDefinition"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The eventhouse display name. The eventhouse name can contain
         alphanumeric characters, underscores, periods, and hyphens. Special characters aren't
         supported. Required.
        :paramtype display_name: str
        :keyword description: The eventhouse description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword folder_id: The folder ID. If not specified or null, the eventhouse is created with the
         workspace as its folder.
        :paramtype folder_id: str
        :keyword creation_payload: The eventhouse creation payload. Use ``definition`` or
         ``creationPayload``. You can't use both at the same time.
        :paramtype creation_payload: ~microsoft.fabric.api.eventhouse.models.EventhouseCreationPayload
        :keyword definition: The eventhouse public definition. Use ``definition`` or
         ``creationPayload``. You can't use both at the same time.
        :paramtype definition: ~microsoft.fabric.api.eventhouse.models.EventhouseDefinition
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.folder_id = folder_id
        self.creation_payload = creation_payload
        self.definition = definition


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.eventhouse.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.eventhouse.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.eventhouse.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.eventhouse.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.eventhouse.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.eventhouse.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class Eventhouse(Item):
    """An eventhouse object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.eventhouse.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.eventhouse.models.ItemTag]
    :ivar properties: The eventhouse properties.
    :vartype properties: ~microsoft.fabric.api.eventhouse.models.EventhouseProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
        "properties": {"key": "properties", "type": "EventhouseProperties"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional["_models.EventhouseProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.eventhouse.models.ItemType
        :keyword properties: The eventhouse properties.
        :paramtype properties: ~microsoft.fabric.api.eventhouse.models.EventhouseProperties
        """
        super().__init__(display_name=display_name, description=description, type=type, **kwargs)
        self.properties = properties


class EventhouseCreationPayload(_serialization.Model):
    """Eventhouse item payload.

    :ivar minimum_consumption_units: Use Minimum consumption for highly time-sensitive systems to
     keep the service always available at a selected minimum level. You pay for the minimum
     consumption level or actual consumption if above the minimum. Supported values include [0,
     2.25, 4.25, 8.5, 13, 18, 26, 34, 50] or any number between 51 and 322. For more information,
     see `minimum consumption </fabric/real-time-intelligence/eventhouse#minimum-consumption>`_.
    :vartype minimum_consumption_units: float
    """

    _attribute_map = {
        "minimum_consumption_units": {"key": "minimumConsumptionUnits", "type": "float"},
    }

    def __init__(self, *, minimum_consumption_units: float = 0, **kwargs: Any) -> None:
        """
        :keyword minimum_consumption_units: Use Minimum consumption for highly time-sensitive systems
         to keep the service always available at a selected minimum level. You pay for the minimum
         consumption level or actual consumption if above the minimum. Supported values include [0,
         2.25, 4.25, 8.5, 13, 18, 26, 34, 50] or any number between 51 and 322. For more information,
         see `minimum consumption </fabric/real-time-intelligence/eventhouse#minimum-consumption>`_.
        :paramtype minimum_consumption_units: float
        """
        super().__init__(**kwargs)
        self.minimum_consumption_units = minimum_consumption_units


class EventhouseDefinition(_serialization.Model):
    """Eventhouse public definition object.

    All required parameters must be populated in order to send to server.

    :ivar format: The format of the item definition.
    :vartype format: str
    :ivar parts: A list of definition parts. Required.
    :vartype parts: list[~microsoft.fabric.api.eventhouse.models.EventhouseDefinitionPart]
    """

    _validation = {
        "parts": {"required": True},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
        "parts": {"key": "parts", "type": "[EventhouseDefinitionPart]"},
    }

    def __init__(
        self, *, parts: List["_models.EventhouseDefinitionPart"], format: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword format: The format of the item definition.
        :paramtype format: str
        :keyword parts: A list of definition parts. Required.
        :paramtype parts: list[~microsoft.fabric.api.eventhouse.models.EventhouseDefinitionPart]
        """
        super().__init__(**kwargs)
        self.format = format
        self.parts = parts


class EventhouseDefinitionPart(_serialization.Model):
    """Eventhouse definition part object.

    All required parameters must be populated in order to send to server.

    :ivar path: The eventhouse part path. Required.
    :vartype path: str
    :ivar payload: The eventhouse part payload. Required.
    :vartype payload: str
    :ivar payload_type: The payload type. Required. "InlineBase64"
    :vartype payload_type: str or ~microsoft.fabric.api.eventhouse.models.PayloadType
    """

    _validation = {
        "path": {"required": True},
        "payload": {"required": True},
        "payload_type": {"required": True},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "payload": {"key": "payload", "type": "str"},
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    def __init__(
        self, *, path: str, payload: str, payload_type: Union[str, "_models.PayloadType"], **kwargs: Any
    ) -> None:
        """
        :keyword path: The eventhouse part path. Required.
        :paramtype path: str
        :keyword payload: The eventhouse part payload. Required.
        :paramtype payload: str
        :keyword payload_type: The payload type. Required. "InlineBase64"
        :paramtype payload_type: str or ~microsoft.fabric.api.eventhouse.models.PayloadType
        """
        super().__init__(**kwargs)
        self.path = path
        self.payload = payload
        self.payload_type = payload_type


class EventhouseDefinitionResponse(_serialization.Model):
    """Eventhouse public definition response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar definition: Eventhouse public definition object. Required.
    :vartype definition: ~microsoft.fabric.api.eventhouse.models.EventhouseDefinition
    """

    _validation = {
        "definition": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "EventhouseDefinition"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.definition = None


class EventhouseProperties(_serialization.Model):
    """The eventhouse properties.

    All required parameters must be populated in order to send to server.

    :ivar query_service_uri: Query service URI. Required.
    :vartype query_service_uri: str
    :ivar ingestion_service_uri: Ingestion service URI. Required.
    :vartype ingestion_service_uri: str
    :ivar databases_item_ids: List of all KQL database children.
    :vartype databases_item_ids: list[str]
    :ivar minimum_consumption_units: Use Minimum consumption for highly time-sensitive systems to
     keep the service always available at a selected minimum level. You pay for the minimum
     consumption level or actual consumption if above the minimum. Supported values include [0,
     2.25, 4.25, 8.5, 13, 18, 26, 34, 50] or any number between 51 and 322. For more information,
     see `minimum consumption </fabric/real-time-intelligence/eventhouse#minimum-consumption>`_.
    :vartype minimum_consumption_units: float
    """

    _validation = {
        "query_service_uri": {"required": True},
        "ingestion_service_uri": {"required": True},
    }

    _attribute_map = {
        "query_service_uri": {"key": "queryServiceUri", "type": "str"},
        "ingestion_service_uri": {"key": "ingestionServiceUri", "type": "str"},
        "databases_item_ids": {"key": "databasesItemIds", "type": "[str]"},
        "minimum_consumption_units": {"key": "minimumConsumptionUnits", "type": "float"},
    }

    def __init__(
        self,
        *,
        query_service_uri: str,
        ingestion_service_uri: str,
        databases_item_ids: Optional[List[str]] = None,
        minimum_consumption_units: float = 0,
        **kwargs: Any
    ) -> None:
        """
        :keyword query_service_uri: Query service URI. Required.
        :paramtype query_service_uri: str
        :keyword ingestion_service_uri: Ingestion service URI. Required.
        :paramtype ingestion_service_uri: str
        :keyword databases_item_ids: List of all KQL database children.
        :paramtype databases_item_ids: list[str]
        :keyword minimum_consumption_units: Use Minimum consumption for highly time-sensitive systems
         to keep the service always available at a selected minimum level. You pay for the minimum
         consumption level or actual consumption if above the minimum. Supported values include [0,
         2.25, 4.25, 8.5, 13, 18, 26, 34, 50] or any number between 51 and 322. For more information,
         see `minimum consumption </fabric/real-time-intelligence/eventhouse#minimum-consumption>`_.
        :paramtype minimum_consumption_units: float
        """
        super().__init__(**kwargs)
        self.query_service_uri = query_service_uri
        self.ingestion_service_uri = ingestion_service_uri
        self.databases_item_ids = databases_item_ids
        self.minimum_consumption_units = minimum_consumption_units


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class Eventhouses(PaginatedResponse):
    """A list of eventhouses.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of eventhouses. Required.
    :vartype value: list[~microsoft.fabric.api.eventhouse.models.Eventhouse]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Eventhouse]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Eventhouse"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of eventhouses. Required.
        :paramtype value: list[~microsoft.fabric.api.eventhouse.models.Eventhouse]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class UpdateEventhouseDefinitionRequest(_serialization.Model):
    """Update eventhouse public definition request payload.

    All required parameters must be populated in order to send to server.

    :ivar definition: Eventhouse public definition object. Required.
    :vartype definition: ~microsoft.fabric.api.eventhouse.models.EventhouseDefinition
    """

    _validation = {
        "definition": {"required": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "EventhouseDefinition"},
    }

    def __init__(self, *, definition: "_models.EventhouseDefinition", **kwargs: Any) -> None:
        """
        :keyword definition: Eventhouse public definition object. Required.
        :paramtype definition: ~microsoft.fabric.api.eventhouse.models.EventhouseDefinition
        """
        super().__init__(**kwargs)
        self.definition = definition


class UpdateEventhouseRequest(_serialization.Model):
    """Update eventhouse request.

    :ivar display_name: The eventhouse display name. The eventhouse name can contain alphanumeric
     characters, underscores, periods, and hyphens. Special characters aren't supported.
    :vartype display_name: str
    :ivar description: The eventhouse description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The eventhouse display name. The eventhouse name can contain
         alphanumeric characters, underscores, periods, and hyphens. Special characters aren't
         supported.
        :paramtype display_name: str
        :keyword description: The eventhouse description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
