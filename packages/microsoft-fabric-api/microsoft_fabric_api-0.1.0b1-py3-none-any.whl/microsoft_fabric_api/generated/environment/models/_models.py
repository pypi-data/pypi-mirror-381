# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class ComponentPublishInfo(_serialization.Model):
    """Publish info for each components in environment.

    :ivar spark_libraries: Spark libraries publish information.
    :vartype spark_libraries: ~microsoft.fabric.api.environment.models.SparkLibraries
    :ivar spark_settings: Spark settings publish information.
    :vartype spark_settings: ~microsoft.fabric.api.environment.models.SparkSettings
    """

    _attribute_map = {
        "spark_libraries": {"key": "sparkLibraries", "type": "SparkLibraries"},
        "spark_settings": {"key": "sparkSettings", "type": "SparkSettings"},
    }

    def __init__(
        self,
        *,
        spark_libraries: Optional["_models.SparkLibraries"] = None,
        spark_settings: Optional["_models.SparkSettings"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword spark_libraries: Spark libraries publish information.
        :paramtype spark_libraries: ~microsoft.fabric.api.environment.models.SparkLibraries
        :keyword spark_settings: Spark settings publish information.
        :paramtype spark_settings: ~microsoft.fabric.api.environment.models.SparkSettings
        """
        super().__init__(**kwargs)
        self.spark_libraries = spark_libraries
        self.spark_settings = spark_settings


class CreateEnvironmentRequest(_serialization.Model):
    """Create environment request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The environment display name. Required.
    :vartype display_name: str
    :ivar description: The environment description. Maximum length is 256 characters.
    :vartype description: str
    :ivar folder_id: The folder ID. If not specified or null, the environment is created with the
     workspace as its folder.
    :vartype folder_id: str
    :ivar definition: The environment public definition.
    :vartype definition: ~microsoft.fabric.api.environment.models.EnvironmentDefinition
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "definition": {"key": "definition", "type": "EnvironmentDefinition"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        definition: Optional["_models.EnvironmentDefinition"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The environment display name. Required.
        :paramtype display_name: str
        :keyword description: The environment description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword folder_id: The folder ID. If not specified or null, the environment is created with
         the workspace as its folder.
        :paramtype folder_id: str
        :keyword definition: The environment public definition.
        :paramtype definition: ~microsoft.fabric.api.environment.models.EnvironmentDefinition
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.folder_id = folder_id
        self.definition = definition


class CustomLibraries(_serialization.Model):
    """Custom libraries.

    :ivar wheel_files: A list of Wheel files.
    :vartype wheel_files: list[str]
    :ivar py_files: A list of Python files.
    :vartype py_files: list[str]
    :ivar jar_files: A list of Jar files.
    :vartype jar_files: list[str]
    :ivar r_tar_files: A list of R files.
    :vartype r_tar_files: list[str]
    """

    _attribute_map = {
        "wheel_files": {"key": "wheelFiles", "type": "[str]"},
        "py_files": {"key": "pyFiles", "type": "[str]"},
        "jar_files": {"key": "jarFiles", "type": "[str]"},
        "r_tar_files": {"key": "rTarFiles", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        wheel_files: Optional[List[str]] = None,
        py_files: Optional[List[str]] = None,
        jar_files: Optional[List[str]] = None,
        r_tar_files: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword wheel_files: A list of Wheel files.
        :paramtype wheel_files: list[str]
        :keyword py_files: A list of Python files.
        :paramtype py_files: list[str]
        :keyword jar_files: A list of Jar files.
        :paramtype jar_files: list[str]
        :keyword r_tar_files: A list of R files.
        :paramtype r_tar_files: list[str]
        """
        super().__init__(**kwargs)
        self.wheel_files = wheel_files
        self.py_files = py_files
        self.jar_files = jar_files
        self.r_tar_files = r_tar_files


class Library(_serialization.Model):
    """Custom or external library.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CustomLibrary, ExternalLibrary

    All required parameters must be populated in order to send to server.

    :ivar library_type: A library type. Additional types may be added over time. Required. Known
     values are: "Custom" and "External".
    :vartype library_type: str or ~microsoft.fabric.api.environment.models.LibraryType
    :ivar name: The name of library. Required.
    :vartype name: str
    """

    _validation = {
        "library_type": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "library_type": {"key": "libraryType", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    _subtype_map = {"library_type": {"Custom": "CustomLibrary", "External": "ExternalLibrary"}}

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of library. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.library_type: Optional[str] = None
        self.name = name


class CustomLibrary(Library):
    """Custom library.

    All required parameters must be populated in order to send to server.

    :ivar library_type: A library type. Additional types may be added over time. Required. Known
     values are: "Custom" and "External".
    :vartype library_type: str or ~microsoft.fabric.api.environment.models.LibraryType
    :ivar name: The name of library. Required.
    :vartype name: str
    """

    _validation = {
        "library_type": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "library_type": {"key": "libraryType", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of library. Required.
        :paramtype name: str
        """
        super().__init__(name=name, **kwargs)
        self.library_type: str = "Custom"


class DynamicExecutorAllocationProperties(_serialization.Model):
    """Dynamic executor allocation proerties.

    All required parameters must be populated in order to send to server.

    :ivar enabled: The status of the dynamic executor allocation. False - Disabled, true - Enabled.
     Required.
    :vartype enabled: bool
    :ivar min_executors: The minimum executor number for dynamic allocation and the minimum for
     this property is 1. The maximum value has to be lower than ``maxExecutors``. Required.
    :vartype min_executors: int
    :ivar max_executors: The maximum executor number for dynamic allocation and the minimum for
     this property is 1. The maximum value has to be lower than the instance pool ``maxNodeCount``.
     Required.
    :vartype max_executors: int
    """

    _validation = {
        "enabled": {"required": True},
        "min_executors": {"required": True, "minimum": 1},
        "max_executors": {"required": True, "minimum": 1},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "min_executors": {"key": "minExecutors", "type": "int"},
        "max_executors": {"key": "maxExecutors", "type": "int"},
    }

    def __init__(self, *, enabled: bool, min_executors: int, max_executors: int, **kwargs: Any) -> None:
        """
        :keyword enabled: The status of the dynamic executor allocation. False - Disabled, true -
         Enabled. Required.
        :paramtype enabled: bool
        :keyword min_executors: The minimum executor number for dynamic allocation and the minimum for
         this property is 1. The maximum value has to be lower than ``maxExecutors``. Required.
        :paramtype min_executors: int
        :keyword max_executors: The maximum executor number for dynamic allocation and the minimum for
         this property is 1. The maximum value has to be lower than the instance pool ``maxNodeCount``.
         Required.
        :paramtype max_executors: int
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.min_executors = min_executors
        self.max_executors = max_executors


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.environment.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.environment.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.environment.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class Environment(Item):
    """An Environment item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.environment.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.environment.models.ItemTag]
    :ivar properties: The environment properties.
    :vartype properties: ~microsoft.fabric.api.environment.models.EnvironmentProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
        "properties": {"key": "properties", "type": "EnvironmentProperties"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional["_models.EnvironmentProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.environment.models.ItemType
        :keyword properties: The environment properties.
        :paramtype properties: ~microsoft.fabric.api.environment.models.EnvironmentProperties
        """
        super().__init__(display_name=display_name, description=description, type=type, **kwargs)
        self.properties = properties


class EnvironmentDefinition(_serialization.Model):
    """Environment public definition object. Refer to this `article
    </rest/api/fabric/articles/item-management/definitions/environment-definition>`_ for more
    details on how to craft a environment public definition.

    All required parameters must be populated in order to send to server.

    :ivar format: The format of the Environment definition.
    :vartype format: str
    :ivar parts: A list of definition parts. Required.
    :vartype parts: list[~microsoft.fabric.api.environment.models.EnvironmentDefinitionPart]
    """

    _validation = {
        "parts": {"required": True},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
        "parts": {"key": "parts", "type": "[EnvironmentDefinitionPart]"},
    }

    def __init__(
        self, *, parts: List["_models.EnvironmentDefinitionPart"], format: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword format: The format of the Environment definition.
        :paramtype format: str
        :keyword parts: A list of definition parts. Required.
        :paramtype parts: list[~microsoft.fabric.api.environment.models.EnvironmentDefinitionPart]
        """
        super().__init__(**kwargs)
        self.format = format
        self.parts = parts


class EnvironmentDefinitionPart(_serialization.Model):
    """Environment definition part object.

    :ivar path: The environment part path.
    :vartype path: str
    :ivar payload: The environment part payload.
    :vartype payload: str
    :ivar payload_type: The payload type. "InlineBase64"
    :vartype payload_type: str or ~microsoft.fabric.api.environment.models.PayloadType
    """

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "payload": {"key": "payload", "type": "str"},
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    def __init__(
        self,
        *,
        path: Optional[str] = None,
        payload: Optional[str] = None,
        payload_type: Optional[Union[str, "_models.PayloadType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: The environment part path.
        :paramtype path: str
        :keyword payload: The environment part payload.
        :paramtype payload: str
        :keyword payload_type: The payload type. "InlineBase64"
        :paramtype payload_type: str or ~microsoft.fabric.api.environment.models.PayloadType
        """
        super().__init__(**kwargs)
        self.path = path
        self.payload = payload
        self.payload_type = payload_type


class EnvironmentDefinitionResponse(_serialization.Model):
    """Environment public definition response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar definition: Environment public definition object. Refer to this `article
     </rest/api/fabric/articles/item-management/definitions/environment-definition>`_ for more
     details on how to craft a environment public definition. Required.
    :vartype definition: ~microsoft.fabric.api.environment.models.EnvironmentDefinition
    """

    _validation = {
        "definition": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "EnvironmentDefinition"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.definition = None


class EnvironmentProperties(_serialization.Model):
    """Environment properties.

    All required parameters must be populated in order to send to server.

    :ivar publish_details: Environment publish operation details. Required.
    :vartype publish_details: ~microsoft.fabric.api.environment.models.PublishDetails
    """

    _validation = {
        "publish_details": {"required": True},
    }

    _attribute_map = {
        "publish_details": {"key": "publishDetails", "type": "PublishDetails"},
    }

    def __init__(self, *, publish_details: "_models.PublishDetails", **kwargs: Any) -> None:
        """
        :keyword publish_details: Environment publish operation details. Required.
        :paramtype publish_details: ~microsoft.fabric.api.environment.models.PublishDetails
        """
        super().__init__(**kwargs)
        self.publish_details = publish_details


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class Environments(PaginatedResponse):
    """A list of environments.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of environments. Required.
    :vartype value: list[~microsoft.fabric.api.environment.models.Environment]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Environment]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Environment"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of environments. Required.
        :paramtype value: list[~microsoft.fabric.api.environment.models.Environment]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class EnvironmentSparkCompute(_serialization.Model):
    """EnvironmentSparkCompute.

    :ivar instance_pool: Environment pool has to be a valid custom pool. "Starter Pool" means use
     starter pool.
    :vartype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
    :ivar driver_cores: Spark driver core. Must be one of the following values: 4, 8, 16, 32, 64.
    :vartype driver_cores: int
    :ivar driver_memory: Spark driver memory. Known values are: "28g", "56g", "112g", "224g", and
     "400g".
    :vartype driver_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
    :ivar executor_cores: Spark executor core. Must be one of the following values: 4, 8, 16, 32,
     64.
    :vartype executor_cores: int
    :ivar executor_memory: Spark executor memory. Known values are: "28g", "56g", "112g", "224g",
     and "400g".
    :vartype executor_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
    :ivar dynamic_executor_allocation: Dynamic executor allocation.
    :vartype dynamic_executor_allocation:
     ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
    :ivar spark_properties: Spark properties.
    :vartype spark_properties: list[~microsoft.fabric.api.environment.models.SparkProperty]
    :ivar runtime_version: Runtime version, find the supported `fabric runtimes
     </fabric/data-engineering/runtime>`_. For example: 1.3.
    :vartype runtime_version: str
    """

    _attribute_map = {
        "instance_pool": {"key": "instancePool", "type": "InstancePool"},
        "driver_cores": {"key": "driverCores", "type": "int"},
        "driver_memory": {"key": "driverMemory", "type": "str"},
        "executor_cores": {"key": "executorCores", "type": "int"},
        "executor_memory": {"key": "executorMemory", "type": "str"},
        "dynamic_executor_allocation": {
            "key": "dynamicExecutorAllocation",
            "type": "DynamicExecutorAllocationProperties",
        },
        "spark_properties": {"key": "sparkProperties", "type": "[SparkProperty]"},
        "runtime_version": {"key": "runtimeVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        instance_pool: Optional["_models.InstancePool"] = None,
        driver_cores: Optional[int] = None,
        driver_memory: Optional[Union[str, "_models.CustomPoolMemory"]] = None,
        executor_cores: Optional[int] = None,
        executor_memory: Optional[Union[str, "_models.CustomPoolMemory"]] = None,
        dynamic_executor_allocation: Optional["_models.DynamicExecutorAllocationProperties"] = None,
        spark_properties: Optional[List["_models.SparkProperty"]] = None,
        runtime_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword instance_pool: Environment pool has to be a valid custom pool. "Starter Pool" means
         use starter pool.
        :paramtype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
        :keyword driver_cores: Spark driver core. Must be one of the following values: 4, 8, 16, 32,
         64.
        :paramtype driver_cores: int
        :keyword driver_memory: Spark driver memory. Known values are: "28g", "56g", "112g", "224g",
         and "400g".
        :paramtype driver_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
        :keyword executor_cores: Spark executor core. Must be one of the following values: 4, 8, 16,
         32, 64.
        :paramtype executor_cores: int
        :keyword executor_memory: Spark executor memory. Known values are: "28g", "56g", "112g",
         "224g", and "400g".
        :paramtype executor_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
        :keyword dynamic_executor_allocation: Dynamic executor allocation.
        :paramtype dynamic_executor_allocation:
         ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
        :keyword spark_properties: Spark properties.
        :paramtype spark_properties: list[~microsoft.fabric.api.environment.models.SparkProperty]
        :keyword runtime_version: Runtime version, find the supported `fabric runtimes
         </fabric/data-engineering/runtime>`_. For example: 1.3.
        :paramtype runtime_version: str
        """
        super().__init__(**kwargs)
        self.instance_pool = instance_pool
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.dynamic_executor_allocation = dynamic_executor_allocation
        self.spark_properties = spark_properties
        self.runtime_version = runtime_version


class EnvironmentSparkComputePreview(_serialization.Model):
    """EnvironmentSparkComputePreview.

    :ivar instance_pool: Environment pool has to be a valid custom pool. "Starter Pool" means use
     starter pool.
    :vartype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
    :ivar driver_cores: Spark driver core. Must be one of the following values: 4, 8, 16, 32, 64.
    :vartype driver_cores: int
    :ivar driver_memory: Spark driver memory.
    :vartype driver_memory: str
    :ivar executor_cores: Spark executor core. Must be one of the following values: 4, 8, 16, 32,
     64.
    :vartype executor_cores: int
    :ivar executor_memory: Spark executor memory.
    :vartype executor_memory: str
    :ivar dynamic_executor_allocation: Dynamic executor allocation.
    :vartype dynamic_executor_allocation:
     ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
    :ivar spark_properties: Spark properties. The dictionary-based contract for defining Spark
     properties will be deprecated on January 31, 2026. Please migrate to using a list of key-value
     pairs instead.
    :vartype spark_properties: JSON
    :ivar runtime_version: Runtime version, find the supported `fabric runtimes
     </fabric/data-engineering/runtime>`_.
    :vartype runtime_version: str
    """

    _attribute_map = {
        "instance_pool": {"key": "instancePool", "type": "InstancePool"},
        "driver_cores": {"key": "driverCores", "type": "int"},
        "driver_memory": {"key": "driverMemory", "type": "str"},
        "executor_cores": {"key": "executorCores", "type": "int"},
        "executor_memory": {"key": "executorMemory", "type": "str"},
        "dynamic_executor_allocation": {
            "key": "dynamicExecutorAllocation",
            "type": "DynamicExecutorAllocationProperties",
        },
        "spark_properties": {"key": "sparkProperties", "type": "object"},
        "runtime_version": {"key": "runtimeVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        instance_pool: Optional["_models.InstancePool"] = None,
        driver_cores: Optional[int] = None,
        driver_memory: Optional[str] = None,
        executor_cores: Optional[int] = None,
        executor_memory: Optional[str] = None,
        dynamic_executor_allocation: Optional["_models.DynamicExecutorAllocationProperties"] = None,
        spark_properties: Optional[JSON] = None,
        runtime_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword instance_pool: Environment pool has to be a valid custom pool. "Starter Pool" means
         use starter pool.
        :paramtype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
        :keyword driver_cores: Spark driver core. Must be one of the following values: 4, 8, 16, 32,
         64.
        :paramtype driver_cores: int
        :keyword driver_memory: Spark driver memory.
        :paramtype driver_memory: str
        :keyword executor_cores: Spark executor core. Must be one of the following values: 4, 8, 16,
         32, 64.
        :paramtype executor_cores: int
        :keyword executor_memory: Spark executor memory.
        :paramtype executor_memory: str
        :keyword dynamic_executor_allocation: Dynamic executor allocation.
        :paramtype dynamic_executor_allocation:
         ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
        :keyword spark_properties: Spark properties. The dictionary-based contract for defining Spark
         properties will be deprecated on January 31, 2026. Please migrate to using a list of key-value
         pairs instead.
        :paramtype spark_properties: JSON
        :keyword runtime_version: Runtime version, find the supported `fabric runtimes
         </fabric/data-engineering/runtime>`_.
        :paramtype runtime_version: str
        """
        super().__init__(**kwargs)
        self.instance_pool = instance_pool
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.dynamic_executor_allocation = dynamic_executor_allocation
        self.spark_properties = spark_properties
        self.runtime_version = runtime_version


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.environment.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.environment.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.environment.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class ExternalLibrary(Library):
    """External library.

    All required parameters must be populated in order to send to server.

    :ivar library_type: A library type. Additional types may be added over time. Required. Known
     values are: "Custom" and "External".
    :vartype library_type: str or ~microsoft.fabric.api.environment.models.LibraryType
    :ivar name: The name of library. Required.
    :vartype name: str
    :ivar version: The version of external library. Required.
    :vartype version: str
    """

    _validation = {
        "library_type": {"required": True},
        "name": {"required": True},
        "version": {"required": True},
    }

    _attribute_map = {
        "library_type": {"key": "libraryType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "version": {"key": "version", "type": "str"},
    }

    def __init__(self, *, name: str, version: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of library. Required.
        :paramtype name: str
        :keyword version: The version of external library. Required.
        :paramtype version: str
        """
        super().__init__(name=name, **kwargs)
        self.library_type: str = "External"
        self.version = version


class InstancePool(_serialization.Model):
    """An instance of a pool.

    :ivar id: Instance pool ID.
    :vartype id: str
    :ivar name: Instance pool name.
    :vartype name: str
    :ivar type: Instance pool type. Known values are: "Workspace" and "Capacity".
    :vartype type: str or ~microsoft.fabric.api.environment.models.CustomPoolType
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.CustomPoolType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Instance pool ID.
        :paramtype id: str
        :keyword name: Instance pool name.
        :paramtype name: str
        :keyword type: Instance pool type. Known values are: "Workspace" and "Capacity".
        :paramtype type: str or ~microsoft.fabric.api.environment.models.CustomPoolType
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class Libraries(PaginatedResponse):
    """Environment libraries.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar libraries: All custom and external libraries (.py, .whl, .jar, .tar.gz and external).
    :vartype libraries: list[~microsoft.fabric.api.environment.models.Library]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "libraries": {"key": "libraries", "type": "[Library]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        libraries: Optional[List["_models.Library"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword libraries: All custom and external libraries (.py, .whl, .jar, .tar.gz and external).
        :paramtype libraries: list[~microsoft.fabric.api.environment.models.Library]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.libraries = libraries


class LibrariesPreview(_serialization.Model):
    """Environment libraries.

    :ivar custom_libraries: Custom libraries (.py, .whl, .jar, .tar.gz).
    :vartype custom_libraries: ~microsoft.fabric.api.environment.models.CustomLibraries
    :ivar environment_yml: Feed libraries.
    :vartype environment_yml: str
    """

    _attribute_map = {
        "custom_libraries": {"key": "customLibraries", "type": "CustomLibraries"},
        "environment_yml": {"key": "environmentYml", "type": "str"},
    }

    def __init__(
        self,
        *,
        custom_libraries: Optional["_models.CustomLibraries"] = None,
        environment_yml: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword custom_libraries: Custom libraries (.py, .whl, .jar, .tar.gz).
        :paramtype custom_libraries: ~microsoft.fabric.api.environment.models.CustomLibraries
        :keyword environment_yml: Feed libraries.
        :paramtype environment_yml: str
        """
        super().__init__(**kwargs)
        self.custom_libraries = custom_libraries
        self.environment_yml = environment_yml


class PublishDetails(_serialization.Model):
    """Details of publish operation.

    :ivar state: Publish state. Additional state types may be added over time. Known values are:
     "Waiting", "Running", "Cancelling", "Cancelled", "Failed", and "Success".
    :vartype state: str or ~microsoft.fabric.api.environment.models.EnvironmentPublishState
    :ivar target_version: Target verion to be published.
    :vartype target_version: str
    :ivar start_time: Start time of publish operation in UTC, using the
     YYYY-MM-DDTHH:mm:ss.sssssssZ format.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End time of publish operation in UTC, using the YYYY-MM-DDTHH:mm:ss.sssssssZ
     format.
    :vartype end_time: ~datetime.datetime
    :ivar component_publish_info: Environment component publish information.
    :vartype component_publish_info: ~microsoft.fabric.api.environment.models.ComponentPublishInfo
    """

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
        "target_version": {"key": "targetVersion", "type": "str"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "component_publish_info": {"key": "componentPublishInfo", "type": "ComponentPublishInfo"},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "_models.EnvironmentPublishState"]] = None,
        target_version: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        component_publish_info: Optional["_models.ComponentPublishInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword state: Publish state. Additional state types may be added over time. Known values are:
         "Waiting", "Running", "Cancelling", "Cancelled", "Failed", and "Success".
        :paramtype state: str or ~microsoft.fabric.api.environment.models.EnvironmentPublishState
        :keyword target_version: Target verion to be published.
        :paramtype target_version: str
        :keyword start_time: Start time of publish operation in UTC, using the
         YYYY-MM-DDTHH:mm:ss.sssssssZ format.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: End time of publish operation in UTC, using the YYYY-MM-DDTHH:mm:ss.sssssssZ
         format.
        :paramtype end_time: ~datetime.datetime
        :keyword component_publish_info: Environment component publish information.
        :paramtype component_publish_info:
         ~microsoft.fabric.api.environment.models.ComponentPublishInfo
        """
        super().__init__(**kwargs)
        self.state = state
        self.target_version = target_version
        self.start_time = start_time
        self.end_time = end_time
        self.component_publish_info = component_publish_info


class RemoveExternalLibrariesRequest(_serialization.Model):
    """Request to delete an external library.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of library. Required.
    :vartype name: str
    :ivar version: The version of external library. Required.
    :vartype version: str
    """

    _validation = {
        "name": {"required": True},
        "version": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "version": {"key": "version", "type": "str"},
    }

    def __init__(self, *, name: str, version: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of library. Required.
        :paramtype name: str
        :keyword version: The version of external library. Required.
        :paramtype version: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.version = version


class SparkLibraries(_serialization.Model):
    """Spark libraries.

    :ivar state: Publish state. Additional state types may be added over time. Known values are:
     "Waiting", "Running", "Cancelling", "Cancelled", "Failed", and "Success".
    :vartype state: str or ~microsoft.fabric.api.environment.models.EnvironmentPublishState
    """

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
    }

    def __init__(self, *, state: Optional[Union[str, "_models.EnvironmentPublishState"]] = None, **kwargs: Any) -> None:
        """
        :keyword state: Publish state. Additional state types may be added over time. Known values are:
         "Waiting", "Running", "Cancelling", "Cancelled", "Failed", and "Success".
        :paramtype state: str or ~microsoft.fabric.api.environment.models.EnvironmentPublishState
        """
        super().__init__(**kwargs)
        self.state = state


class SparkProperty(_serialization.Model):
    """A Spark property key and its value.

    :ivar key: The Spark property key.
    :vartype key: str
    :ivar value: The Spark property value.
    :vartype value: str
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, key: Optional[str] = None, value: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword key: The Spark property key.
        :paramtype key: str
        :keyword value: The Spark property value.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.key = key
        self.value = value


class SparkSettings(_serialization.Model):
    """Spark settings.

    :ivar state: Publish state. Additional state types may be added over time. Known values are:
     "Waiting", "Running", "Cancelling", "Cancelled", "Failed", and "Success".
    :vartype state: str or ~microsoft.fabric.api.environment.models.EnvironmentPublishState
    """

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
    }

    def __init__(self, *, state: Optional[Union[str, "_models.EnvironmentPublishState"]] = None, **kwargs: Any) -> None:
        """
        :keyword state: Publish state. Additional state types may be added over time. Known values are:
         "Waiting", "Running", "Cancelling", "Cancelled", "Failed", and "Success".
        :paramtype state: str or ~microsoft.fabric.api.environment.models.EnvironmentPublishState
        """
        super().__init__(**kwargs)
        self.state = state


class UpdateEnvironmentDefinitionRequest(_serialization.Model):
    """Update environment public definition request payload.

    All required parameters must be populated in order to send to server.

    :ivar definition: Environment public definition object. Refer to this `article
     </rest/api/fabric/articles/item-management/definitions/environment-definition>`_ for more
     details on how to craft a environment public definition. Required.
    :vartype definition: ~microsoft.fabric.api.environment.models.EnvironmentDefinition
    """

    _validation = {
        "definition": {"required": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "EnvironmentDefinition"},
    }

    def __init__(self, *, definition: "_models.EnvironmentDefinition", **kwargs: Any) -> None:
        """
        :keyword definition: Environment public definition object. Refer to this `article
         </rest/api/fabric/articles/item-management/definitions/environment-definition>`_ for more
         details on how to craft a environment public definition. Required.
        :paramtype definition: ~microsoft.fabric.api.environment.models.EnvironmentDefinition
        """
        super().__init__(**kwargs)
        self.definition = definition


class UpdateEnvironmentRequest(_serialization.Model):
    """Update environment request.

    :ivar display_name: The environment display name.
    :vartype display_name: str
    :ivar description: The environment description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The environment display name.
        :paramtype display_name: str
        :keyword description: The environment description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class UpdateEnvironmentSparkComputeRequest(_serialization.Model):
    """UpdateEnvironmentSparkComputeRequest.

    :ivar instance_pool: Environment pool has to be a valid custom pool. The name for a default
     workspace pool is *Starter Pool*.
    :vartype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
    :ivar driver_cores: Spark driver core. Must be one of the following values: 4, 8, 16, 32, 64.
    :vartype driver_cores: int
    :ivar driver_memory: Spark driver memory. Known values are: "28g", "56g", "112g", "224g", and
     "400g".
    :vartype driver_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
    :ivar executor_cores: Spark executor core. Must be one of the following values: 4, 8, 16, 32,
     64.
    :vartype executor_cores: int
    :ivar executor_memory: Spark executor memory. Known values are: "28g", "56g", "112g", "224g",
     and "400g".
    :vartype executor_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
    :ivar dynamic_executor_allocation: Dynamic executor allocation.
    :vartype dynamic_executor_allocation:
     ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
    :ivar spark_properties: Spark properties.
    :vartype spark_properties: list[~microsoft.fabric.api.environment.models.SparkProperty]
    :ivar runtime_version: Runtime version, find the supported `fabric runtimes
     </fabric/data-engineering/runtime>`_. For example: 1.3.
    :vartype runtime_version: str
    """

    _attribute_map = {
        "instance_pool": {"key": "instancePool", "type": "InstancePool"},
        "driver_cores": {"key": "driverCores", "type": "int"},
        "driver_memory": {"key": "driverMemory", "type": "str"},
        "executor_cores": {"key": "executorCores", "type": "int"},
        "executor_memory": {"key": "executorMemory", "type": "str"},
        "dynamic_executor_allocation": {
            "key": "dynamicExecutorAllocation",
            "type": "DynamicExecutorAllocationProperties",
        },
        "spark_properties": {"key": "sparkProperties", "type": "[SparkProperty]"},
        "runtime_version": {"key": "runtimeVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        instance_pool: Optional["_models.InstancePool"] = None,
        driver_cores: Optional[int] = None,
        driver_memory: Optional[Union[str, "_models.CustomPoolMemory"]] = None,
        executor_cores: Optional[int] = None,
        executor_memory: Optional[Union[str, "_models.CustomPoolMemory"]] = None,
        dynamic_executor_allocation: Optional["_models.DynamicExecutorAllocationProperties"] = None,
        spark_properties: Optional[List["_models.SparkProperty"]] = None,
        runtime_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword instance_pool: Environment pool has to be a valid custom pool. The name for a default
         workspace pool is *Starter Pool*.
        :paramtype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
        :keyword driver_cores: Spark driver core. Must be one of the following values: 4, 8, 16, 32,
         64.
        :paramtype driver_cores: int
        :keyword driver_memory: Spark driver memory. Known values are: "28g", "56g", "112g", "224g",
         and "400g".
        :paramtype driver_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
        :keyword executor_cores: Spark executor core. Must be one of the following values: 4, 8, 16,
         32, 64.
        :paramtype executor_cores: int
        :keyword executor_memory: Spark executor memory. Known values are: "28g", "56g", "112g",
         "224g", and "400g".
        :paramtype executor_memory: str or ~microsoft.fabric.api.environment.models.CustomPoolMemory
        :keyword dynamic_executor_allocation: Dynamic executor allocation.
        :paramtype dynamic_executor_allocation:
         ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
        :keyword spark_properties: Spark properties.
        :paramtype spark_properties: list[~microsoft.fabric.api.environment.models.SparkProperty]
        :keyword runtime_version: Runtime version, find the supported `fabric runtimes
         </fabric/data-engineering/runtime>`_. For example: 1.3.
        :paramtype runtime_version: str
        """
        super().__init__(**kwargs)
        self.instance_pool = instance_pool
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.dynamic_executor_allocation = dynamic_executor_allocation
        self.spark_properties = spark_properties
        self.runtime_version = runtime_version


class UpdateEnvironmentSparkComputeRequestPreview(_serialization.Model):  # pylint: disable=name-too-long
    """UpdateEnvironmentSparkComputeRequestPreview.

    :ivar instance_pool: Environment pool has to be a valid custom pool. The name for a default
     workspace pool is *Starter Pool*.
    :vartype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
    :ivar driver_cores: Spark driver core.
    :vartype driver_cores: int
    :ivar driver_memory: Spark driver memory.
    :vartype driver_memory: str
    :ivar executor_cores: Spark executor core.
    :vartype executor_cores: int
    :ivar executor_memory: Spark executor memory.
    :vartype executor_memory: str
    :ivar dynamic_executor_allocation: Dynamic executor allocation.
    :vartype dynamic_executor_allocation:
     ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
    :ivar spark_properties: Spark properties. The dictionary-based contract for defining Spark
     properties will be deprecated on January 31, 2026. Please migrate to using a list of key-value
     pairs instead.
    :vartype spark_properties: JSON
    :ivar runtime_version: Runtime version, find the supported `fabric runtimes
     </fabric/data-engineering/runtime>`_.
    :vartype runtime_version: str
    """

    _attribute_map = {
        "instance_pool": {"key": "instancePool", "type": "InstancePool"},
        "driver_cores": {"key": "driverCores", "type": "int"},
        "driver_memory": {"key": "driverMemory", "type": "str"},
        "executor_cores": {"key": "executorCores", "type": "int"},
        "executor_memory": {"key": "executorMemory", "type": "str"},
        "dynamic_executor_allocation": {
            "key": "dynamicExecutorAllocation",
            "type": "DynamicExecutorAllocationProperties",
        },
        "spark_properties": {"key": "sparkProperties", "type": "object"},
        "runtime_version": {"key": "runtimeVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        instance_pool: Optional["_models.InstancePool"] = None,
        driver_cores: Optional[int] = None,
        driver_memory: Optional[str] = None,
        executor_cores: Optional[int] = None,
        executor_memory: Optional[str] = None,
        dynamic_executor_allocation: Optional["_models.DynamicExecutorAllocationProperties"] = None,
        spark_properties: Optional[JSON] = None,
        runtime_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword instance_pool: Environment pool has to be a valid custom pool. The name for a default
         workspace pool is *Starter Pool*.
        :paramtype instance_pool: ~microsoft.fabric.api.environment.models.InstancePool
        :keyword driver_cores: Spark driver core.
        :paramtype driver_cores: int
        :keyword driver_memory: Spark driver memory.
        :paramtype driver_memory: str
        :keyword executor_cores: Spark executor core.
        :paramtype executor_cores: int
        :keyword executor_memory: Spark executor memory.
        :paramtype executor_memory: str
        :keyword dynamic_executor_allocation: Dynamic executor allocation.
        :paramtype dynamic_executor_allocation:
         ~microsoft.fabric.api.environment.models.DynamicExecutorAllocationProperties
        :keyword spark_properties: Spark properties. The dictionary-based contract for defining Spark
         properties will be deprecated on January 31, 2026. Please migrate to using a list of key-value
         pairs instead.
        :paramtype spark_properties: JSON
        :keyword runtime_version: Runtime version, find the supported `fabric runtimes
         </fabric/data-engineering/runtime>`_.
        :paramtype runtime_version: str
        """
        super().__init__(**kwargs)
        self.instance_pool = instance_pool
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.dynamic_executor_allocation = dynamic_executor_allocation
        self.spark_properties = spark_properties
        self.runtime_version = runtime_version
