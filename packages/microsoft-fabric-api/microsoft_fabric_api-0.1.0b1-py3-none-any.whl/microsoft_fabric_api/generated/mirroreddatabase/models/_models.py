# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CreateMirroredDatabaseRequest(_serialization.Model):
    """Create mirrored database request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The mirrored database display name. The display name must follow naming
     rules according to item type. Required.
    :vartype display_name: str
    :ivar description: The mirrored database description. Maximum length is 256 characters.
    :vartype description: str
    :ivar folder_id: The folder ID. If not specified or null, the mirrored database is created with
     the workspace as its folder.
    :vartype folder_id: str
    :ivar definition: The mirrored database public definition. Required.
    :vartype definition: ~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseDefinition
    """

    _validation = {
        "display_name": {"required": True},
        "definition": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "definition": {"key": "definition", "type": "MirroredDatabaseDefinition"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        definition: "_models.MirroredDatabaseDefinition",
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The mirrored database display name. The display name must follow naming
         rules according to item type. Required.
        :paramtype display_name: str
        :keyword description: The mirrored database description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword folder_id: The folder ID. If not specified or null, the mirrored database is created
         with the workspace as its folder.
        :paramtype folder_id: str
        :keyword definition: The mirrored database public definition. Required.
        :paramtype definition: ~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseDefinition
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.folder_id = folder_id
        self.definition = definition


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.mirroreddatabase.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.mirroreddatabase.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.mirroreddatabase.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.mirroreddatabase.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.mirroreddatabase.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.mirroreddatabase.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class MirroredDatabase(Item):
    """A mirrored database item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.mirroreddatabase.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.mirroreddatabase.models.ItemTag]
    :ivar properties: The mirrored database properties.
    :vartype properties: ~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
        "properties": {"key": "properties", "type": "MirroredDatabaseProperties"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional["_models.MirroredDatabaseProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.mirroreddatabase.models.ItemType
        :keyword properties: The mirrored database properties.
        :paramtype properties: ~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseProperties
        """
        super().__init__(display_name=display_name, description=description, type=type, **kwargs)
        self.properties = properties


class MirroredDatabaseDefinition(_serialization.Model):
    """Mirrored database public definition object.

    All required parameters must be populated in order to send to server.

    :ivar parts: A list of definition parts. Required.
    :vartype parts:
     list[~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseDefinitionPart]
    """

    _validation = {
        "parts": {"required": True},
    }

    _attribute_map = {
        "parts": {"key": "parts", "type": "[MirroredDatabaseDefinitionPart]"},
    }

    def __init__(self, *, parts: List["_models.MirroredDatabaseDefinitionPart"], **kwargs: Any) -> None:
        """
        :keyword parts: A list of definition parts. Required.
        :paramtype parts:
         list[~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseDefinitionPart]
        """
        super().__init__(**kwargs)
        self.parts = parts


class MirroredDatabaseDefinitionPart(_serialization.Model):
    """Mirrored database definition part object.

    :ivar path: The mirrored database part path.
    :vartype path: str
    :ivar payload: The mirrored database part payload.
    :vartype payload: str
    :ivar payload_type: The payload type. "InlineBase64"
    :vartype payload_type: str or ~microsoft.fabric.api.mirroreddatabase.models.PayloadType
    """

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "payload": {"key": "payload", "type": "str"},
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    def __init__(
        self,
        *,
        path: Optional[str] = None,
        payload: Optional[str] = None,
        payload_type: Optional[Union[str, "_models.PayloadType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: The mirrored database part path.
        :paramtype path: str
        :keyword payload: The mirrored database part payload.
        :paramtype payload: str
        :keyword payload_type: The payload type. "InlineBase64"
        :paramtype payload_type: str or ~microsoft.fabric.api.mirroreddatabase.models.PayloadType
        """
        super().__init__(**kwargs)
        self.path = path
        self.payload = payload
        self.payload_type = payload_type


class MirroredDatabaseDefinitionResponse(_serialization.Model):
    """Mirrored database public definition response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar definition: Mirrored database public definition object. Required.
    :vartype definition: ~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseDefinition
    """

    _validation = {
        "definition": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "MirroredDatabaseDefinition"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.definition = None


class MirroredDatabaseProperties(_serialization.Model):
    """The mirrored database properties.

    :ivar one_lake_tables_path: OneLake path to the mirrored database tables directory.
    :vartype one_lake_tables_path: str
    :ivar sql_endpoint_properties: An object containing the properties of the SQL endpoint.
    :vartype sql_endpoint_properties:
     ~microsoft.fabric.api.mirroreddatabase.models.SqlEndpointProperties
    :ivar default_schema: Default schema of the mirrored database. This property is returned only
     for mirrored database that enables default schema in definition.
    :vartype default_schema: str
    """

    _attribute_map = {
        "one_lake_tables_path": {"key": "oneLakeTablesPath", "type": "str"},
        "sql_endpoint_properties": {"key": "sqlEndpointProperties", "type": "SqlEndpointProperties"},
        "default_schema": {"key": "defaultSchema", "type": "str"},
    }

    def __init__(
        self,
        *,
        one_lake_tables_path: Optional[str] = None,
        sql_endpoint_properties: Optional["_models.SqlEndpointProperties"] = None,
        default_schema: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword one_lake_tables_path: OneLake path to the mirrored database tables directory.
        :paramtype one_lake_tables_path: str
        :keyword sql_endpoint_properties: An object containing the properties of the SQL endpoint.
        :paramtype sql_endpoint_properties:
         ~microsoft.fabric.api.mirroreddatabase.models.SqlEndpointProperties
        :keyword default_schema: Default schema of the mirrored database. This property is returned
         only for mirrored database that enables default schema in definition.
        :paramtype default_schema: str
        """
        super().__init__(**kwargs)
        self.one_lake_tables_path = one_lake_tables_path
        self.sql_endpoint_properties = sql_endpoint_properties
        self.default_schema = default_schema


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class MirroredDatabases(PaginatedResponse):
    """A list of mirrored databases.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of mirrored databases. Required.
    :vartype value: list[~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabase]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[MirroredDatabase]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.MirroredDatabase"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of mirrored databases. Required.
        :paramtype value: list[~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabase]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class MirroringStatusResponse(_serialization.Model):
    """Response of getting mirroring status.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of mirroring. Required. Known values are: "Initializing",
     "Initialized", "Starting", "Running", "Stopping", and "Stopped".
    :vartype status: str or ~microsoft.fabric.api.mirroreddatabase.models.MirroringStatus
    :ivar error: Error is set if error happens in mirroring.
    :vartype error: ~microsoft.fabric.api.mirroreddatabase.models.ErrorResponse
    """

    _validation = {
        "status": {"required": True},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ErrorResponse"},
    }

    def __init__(self, *, status: Union[str, "_models.MirroringStatus"], **kwargs: Any) -> None:
        """
        :keyword status: The status of mirroring. Required. Known values are: "Initializing",
         "Initialized", "Starting", "Running", "Stopping", and "Stopped".
        :paramtype status: str or ~microsoft.fabric.api.mirroreddatabase.models.MirroringStatus
        """
        super().__init__(**kwargs)
        self.status = status
        self.error = None


class SqlEndpointProperties(_serialization.Model):
    """An object containing the properties of the SQL endpoint.

    All required parameters must be populated in order to send to server.

    :ivar id: SQL endpoint ID.
    :vartype id: str
    :ivar connection_string: SQL endpoint connection string.
    :vartype connection_string: str
    :ivar provisioning_status: The SQL endpoint provisioning status. Required. Known values are:
     "InProgress", "Success", and "Failed".
    :vartype provisioning_status: str or
     ~microsoft.fabric.api.mirroreddatabase.models.SqlEndpointProvisioningStatus
    """

    _validation = {
        "provisioning_status": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
        "provisioning_status": {"key": "provisioningStatus", "type": "str"},
    }

    def __init__(
        self,
        *,
        provisioning_status: Union[str, "_models.SqlEndpointProvisioningStatus"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        connection_string: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: SQL endpoint ID.
        :paramtype id: str
        :keyword connection_string: SQL endpoint connection string.
        :paramtype connection_string: str
        :keyword provisioning_status: The SQL endpoint provisioning status. Required. Known values are:
         "InProgress", "Success", and "Failed".
        :paramtype provisioning_status: str or
         ~microsoft.fabric.api.mirroreddatabase.models.SqlEndpointProvisioningStatus
        """
        super().__init__(**kwargs)
        self.id = id
        self.connection_string = connection_string
        self.provisioning_status = provisioning_status


class TableMirroringMetrics(_serialization.Model):
    """Table mirroring metrics.

    All required parameters must be populated in order to send to server.

    :ivar processed_bytes: Processed bytes for this table. Required.
    :vartype processed_bytes: int
    :ivar processed_rows: Processed row count for this table. Required.
    :vartype processed_rows: int
    :ivar last_sync_date_time: Last processed time of the table in in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype last_sync_date_time: ~datetime.datetime
    :ivar last_sync_latency_in_seconds: Latency in seconds between source commit time and target
     commit time of last processed change. For sources whose source commit time is not available,
     this value is not returned.
    :vartype last_sync_latency_in_seconds: int
    """

    _validation = {
        "processed_bytes": {"required": True},
        "processed_rows": {"required": True},
        "last_sync_date_time": {"required": True},
    }

    _attribute_map = {
        "processed_bytes": {"key": "processedBytes", "type": "int"},
        "processed_rows": {"key": "processedRows", "type": "int"},
        "last_sync_date_time": {"key": "lastSyncDateTime", "type": "iso-8601"},
        "last_sync_latency_in_seconds": {"key": "lastSyncLatencyInSeconds", "type": "int"},
    }

    def __init__(
        self,
        *,
        processed_bytes: int,
        processed_rows: int,
        last_sync_date_time: datetime.datetime,
        last_sync_latency_in_seconds: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword processed_bytes: Processed bytes for this table. Required.
        :paramtype processed_bytes: int
        :keyword processed_rows: Processed row count for this table. Required.
        :paramtype processed_rows: int
        :keyword last_sync_date_time: Last processed time of the table in in UTC, using the
         YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype last_sync_date_time: ~datetime.datetime
        :keyword last_sync_latency_in_seconds: Latency in seconds between source commit time and target
         commit time of last processed change. For sources whose source commit time is not available,
         this value is not returned.
        :paramtype last_sync_latency_in_seconds: int
        """
        super().__init__(**kwargs)
        self.processed_bytes = processed_bytes
        self.processed_rows = processed_rows
        self.last_sync_date_time = last_sync_date_time
        self.last_sync_latency_in_seconds = last_sync_latency_in_seconds


class TableMirroringStatusResponse(_serialization.Model):
    """Table mirroring status response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar source_object_type: Source object type. Required. Known values are: "Table" and "View".
    :vartype source_object_type: str or
     ~microsoft.fabric.api.mirroreddatabase.models.TableSourceObjectType
    :ivar source_schema_name: Source table schema name.
    :vartype source_schema_name: str
    :ivar source_table_name: Source table name.
    :vartype source_table_name: str
    :ivar status: The mirroring status type of table. Required. Known values are: "Initialized",
     "Snapshotting", "Replicating", "Reseeding", "Stopped", and "Failed".
    :vartype status: str or ~microsoft.fabric.api.mirroreddatabase.models.TableMirroringStatus
    :ivar metrics: The mirroring metrics of table.
    :vartype metrics: ~microsoft.fabric.api.mirroreddatabase.models.TableMirroringMetrics
    :ivar error: Table level error is set if error happens in mirroring for this table.
    :vartype error: ~microsoft.fabric.api.mirroreddatabase.models.ErrorResponse
    """

    _validation = {
        "source_object_type": {"required": True},
        "status": {"required": True},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "source_object_type": {"key": "sourceObjectType", "type": "str"},
        "source_schema_name": {"key": "sourceSchemaName", "type": "str"},
        "source_table_name": {"key": "sourceTableName", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "metrics": {"key": "metrics", "type": "TableMirroringMetrics"},
        "error": {"key": "error", "type": "ErrorResponse"},
    }

    def __init__(
        self,
        *,
        source_object_type: Union[str, "_models.TableSourceObjectType"],
        status: Union[str, "_models.TableMirroringStatus"],
        source_schema_name: Optional[str] = None,
        source_table_name: Optional[str] = None,
        metrics: Optional["_models.TableMirroringMetrics"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source_object_type: Source object type. Required. Known values are: "Table" and
         "View".
        :paramtype source_object_type: str or
         ~microsoft.fabric.api.mirroreddatabase.models.TableSourceObjectType
        :keyword source_schema_name: Source table schema name.
        :paramtype source_schema_name: str
        :keyword source_table_name: Source table name.
        :paramtype source_table_name: str
        :keyword status: The mirroring status type of table. Required. Known values are: "Initialized",
         "Snapshotting", "Replicating", "Reseeding", "Stopped", and "Failed".
        :paramtype status: str or ~microsoft.fabric.api.mirroreddatabase.models.TableMirroringStatus
        :keyword metrics: The mirroring metrics of table.
        :paramtype metrics: ~microsoft.fabric.api.mirroreddatabase.models.TableMirroringMetrics
        """
        super().__init__(**kwargs)
        self.source_object_type = source_object_type
        self.source_schema_name = source_schema_name
        self.source_table_name = source_table_name
        self.status = status
        self.metrics = metrics
        self.error = None


class TablesMirroringStatusResponse(PaginatedResponse):
    """A paginated list of table mirroring statuses.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar data: A list of table mirroring statuses. Required.
    :vartype data: list[~microsoft.fabric.api.mirroreddatabase.models.TableMirroringStatusResponse]
    """

    _validation = {
        "data": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "data": {"key": "data", "type": "[TableMirroringStatusResponse]"},
    }

    def __init__(
        self,
        *,
        data: List["_models.TableMirroringStatusResponse"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword data: A list of table mirroring statuses. Required.
        :paramtype data:
         list[~microsoft.fabric.api.mirroreddatabase.models.TableMirroringStatusResponse]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.data = data


class UpdateMirroredDatabaseDefinitionRequest(_serialization.Model):
    """Update mirrored database public definition request payload.

    All required parameters must be populated in order to send to server.

    :ivar definition: Mirrored database public definition object. Required.
    :vartype definition: ~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseDefinition
    """

    _validation = {
        "definition": {"required": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "MirroredDatabaseDefinition"},
    }

    def __init__(self, *, definition: "_models.MirroredDatabaseDefinition", **kwargs: Any) -> None:
        """
        :keyword definition: Mirrored database public definition object. Required.
        :paramtype definition: ~microsoft.fabric.api.mirroreddatabase.models.MirroredDatabaseDefinition
        """
        super().__init__(**kwargs)
        self.definition = definition


class UpdateMirroredDatabaseRequest(_serialization.Model):
    """Update mirrored database request.

    :ivar display_name: The mirrored database display name. The display name must follow naming
     rules according to item type.
    :vartype display_name: str
    :ivar description: The mirrored database description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The mirrored database display name. The display name must follow naming
         rules according to item type.
        :paramtype display_name: str
        :keyword description: The mirrored database description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
