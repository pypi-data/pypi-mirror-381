# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CreateMirroredAzureDatabricksCatalogRequest(_serialization.Model):  # pylint: disable=name-too-long
    """Create MirroredAzureDatabricksCatalog request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The MirroredAzureDatabricksCatalog display name. The display name must
     follow naming rules according to item type. Required.
    :vartype display_name: str
    :ivar description: The MirroredAzureDatabricksCatalog description. Maximum length is 256
     characters.
    :vartype description: str
    :ivar creation_payload: The MirroredAzureDatabricksCatalog creation payload.
    :vartype creation_payload:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogCreationPayload
    :ivar definition: The MirroredAzureDatabricksCatalog public definition. Use ``definition`` or
     ``creationPayload``. You can't use both at the same time.
    :vartype definition:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogPublicDefinition
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "creation_payload": {"key": "creationPayload", "type": "MirroredAzureDatabricksCatalogCreationPayload"},
        "definition": {"key": "definition", "type": "MirroredAzureDatabricksCatalogPublicDefinition"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        creation_payload: Optional["_models.MirroredAzureDatabricksCatalogCreationPayload"] = None,
        definition: Optional["_models.MirroredAzureDatabricksCatalogPublicDefinition"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The MirroredAzureDatabricksCatalog display name. The display name must
         follow naming rules according to item type. Required.
        :paramtype display_name: str
        :keyword description: The MirroredAzureDatabricksCatalog description. Maximum length is 256
         characters.
        :paramtype description: str
        :keyword creation_payload: The MirroredAzureDatabricksCatalog creation payload.
        :paramtype creation_payload:
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogCreationPayload
        :keyword definition: The MirroredAzureDatabricksCatalog public definition. Use ``definition``
         or ``creationPayload``. You can't use both at the same time.
        :paramtype definition:
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogPublicDefinition
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.creation_payload = creation_payload
        self.definition = definition


class DatabricksCatalog(_serialization.Model):
    """A catalog from Unity Catalog.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the catalog. Required.
    :vartype name: str
    :ivar catalog_type: The type of the catalog. Required. "MANAGED_CATALOG"
    :vartype catalog_type: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.CatalogType
    :ivar storage_location: The storage location of the catalog. Required.
    :vartype storage_location: str
    :ivar full_name: The full name of the catalog. This variable depends on name. Required.
    :vartype full_name: str
    """

    _validation = {
        "name": {"required": True},
        "catalog_type": {"required": True},
        "storage_location": {"required": True},
        "full_name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "catalog_type": {"key": "catalogType", "type": "str"},
        "storage_location": {"key": "storageLocation", "type": "str"},
        "full_name": {"key": "fullName", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        catalog_type: Union[str, "_models.CatalogType"],
        storage_location: str,
        full_name: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the catalog. Required.
        :paramtype name: str
        :keyword catalog_type: The type of the catalog. Required. "MANAGED_CATALOG"
        :paramtype catalog_type: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.CatalogType
        :keyword storage_location: The storage location of the catalog. Required.
        :paramtype storage_location: str
        :keyword full_name: The full name of the catalog. This variable depends on name. Required.
        :paramtype full_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.catalog_type = catalog_type
        self.storage_location = storage_location
        self.full_name = full_name


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class DatabricksCatalogs(PaginatedResponse):
    """A list of catalogs from Unity Catalog.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of Catalogs. Required.
    :vartype value:
     list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DatabricksCatalog]
    :ivar error: Error is set if unable to fetch catalogs.
    :vartype error: ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorResponse
    """

    _validation = {
        "value": {"required": True},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DatabricksCatalog]"},
        "error": {"key": "Error", "type": "ErrorResponse"},
    }

    def __init__(
        self,
        *,
        value: List["_models.DatabricksCatalog"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of Catalogs. Required.
        :paramtype value:
         list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DatabricksCatalog]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value
        self.error = None


class DatabricksSchema(_serialization.Model):
    """A schema from Unity Catalog.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the schema, relative to the parent catalog. Required.
    :vartype name: str
    :ivar storage_location: The storage location of the schema.
    :vartype storage_location: str
    :ivar full_name: The full name of the schema, in the form of catalog_name.schema_name.
     Required.
    :vartype full_name: str
    """

    _validation = {
        "name": {"required": True},
        "full_name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "storage_location": {"key": "storageLocation", "type": "str"},
        "full_name": {"key": "fullName", "type": "str"},
    }

    def __init__(self, *, name: str, full_name: str, storage_location: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: The name of the schema, relative to the parent catalog. Required.
        :paramtype name: str
        :keyword storage_location: The storage location of the schema.
        :paramtype storage_location: str
        :keyword full_name: The full name of the schema, in the form of catalog_name.schema_name.
         Required.
        :paramtype full_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.storage_location = storage_location
        self.full_name = full_name


class DatabricksSchemas(PaginatedResponse):
    """A list of schemas from Unity Catalog.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of Databricks schemas. Required.
    :vartype value:
     list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DatabricksSchema]
    :ivar error: Error is set if unable to fetch schemas.
    :vartype error: ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorResponse
    """

    _validation = {
        "value": {"required": True},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DatabricksSchema]"},
        "error": {"key": "Error", "type": "ErrorResponse"},
    }

    def __init__(
        self,
        *,
        value: List["_models.DatabricksSchema"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of Databricks schemas. Required.
        :paramtype value:
         list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DatabricksSchema]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value
        self.error = None


class DatabricksTable(_serialization.Model):
    """A table from Unity Catalog.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the table, relative to the parent schema. Required.
    :vartype name: str
    :ivar storage_location: The storage location of the table. Required.
    :vartype storage_location: str
    :ivar full_name: The full name of the table, in the form of
     catalog_name.schema_name.table_name. Required.
    :vartype full_name: str
    :ivar table_type: The type of the table. Required. Known values are: "MANAGED" and "EXTERNAL".
    :vartype table_type: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.TableType
    :ivar data_source_format: The data source format of the table. Required. "DELTA"
    :vartype data_source_format: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DataSourceFormat
    """

    _validation = {
        "name": {"required": True},
        "storage_location": {"required": True},
        "full_name": {"required": True},
        "table_type": {"required": True},
        "data_source_format": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "storage_location": {"key": "storageLocation", "type": "str"},
        "full_name": {"key": "fullName", "type": "str"},
        "table_type": {"key": "tableType", "type": "str"},
        "data_source_format": {"key": "dataSourceFormat", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        storage_location: str,
        full_name: str,
        table_type: Union[str, "_models.TableType"],
        data_source_format: Union[str, "_models.DataSourceFormat"],
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the table, relative to the parent schema. Required.
        :paramtype name: str
        :keyword storage_location: The storage location of the table. Required.
        :paramtype storage_location: str
        :keyword full_name: The full name of the table, in the form of
         catalog_name.schema_name.table_name. Required.
        :paramtype full_name: str
        :keyword table_type: The type of the table. Required. Known values are: "MANAGED" and
         "EXTERNAL".
        :paramtype table_type: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.TableType
        :keyword data_source_format: The data source format of the table. Required. "DELTA"
        :paramtype data_source_format: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DataSourceFormat
        """
        super().__init__(**kwargs)
        self.name = name
        self.storage_location = storage_location
        self.full_name = full_name
        self.table_type = table_type
        self.data_source_format = data_source_format


class DatabricksTables(PaginatedResponse):
    """A list of tables from Unity Catalog.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of Databricks tables. Required.
    :vartype value:
     list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DatabricksTable]
    :ivar error: Error is set if unable to fetch tables.
    :vartype error: ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorResponse
    """

    _validation = {
        "value": {"required": True},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DatabricksTable]"},
        "error": {"key": "Error", "type": "ErrorResponse"},
    }

    def __init__(
        self,
        *,
        value: List["_models.DatabricksTable"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of Databricks tables. Required.
        :paramtype value:
         list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.DatabricksTable]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value
        self.error = None


class ErrorInfo(_serialization.Model):
    """The error information.

    All required parameters must be populated in order to send to server.

    :ivar error_code: The error code. Required.
    :vartype error_code: str
    :ivar error_message: The error message. Required.
    :vartype error_message: str
    :ivar error_details: The error details.
    :vartype error_details: str
    """

    _validation = {
        "error_code": {"required": True},
        "error_message": {"required": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "error_details": {"key": "errorDetails", "type": "str"},
    }

    def __init__(
        self, *, error_code: str, error_message: str, error_details: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword error_code: The error code. Required.
        :paramtype error_code: str
        :keyword error_message: The error message. Required.
        :paramtype error_message: str
        :keyword error_details: The error details.
        :paramtype error_details: str
        """
        super().__init__(**kwargs)
        self.error_code = error_code
        self.error_message = error_message
        self.error_details = error_details


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details:
     list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class MirroredAzureDatabricksCatalog(Item):
    """A MirroredAzureDatabricksCatalog item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ItemTag]
    :ivar properties: The MirroredAzureDatabricksCatalog properties.
    :vartype properties:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
        "properties": {"key": "properties", "type": "MirroredAzureDatabricksCatalogProperties"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional["_models.MirroredAzureDatabricksCatalogProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ItemType
        :keyword properties: The MirroredAzureDatabricksCatalog properties.
        :paramtype properties:
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogProperties
        """
        super().__init__(display_name=display_name, description=description, type=type, **kwargs)
        self.properties = properties


class MirroredAzureDatabricksCatalogCreationPayload(_serialization.Model):  # pylint: disable=name-too-long
    """MirroredAzureDatabricksCatalog create item payload.

    All required parameters must be populated in order to send to server.

    :ivar catalog_name: Azure databricks catalog name. Required.
    :vartype catalog_name: str
    :ivar databricks_workspace_connection_id: The Azure databricks workspace connection id.
     Required.
    :vartype databricks_workspace_connection_id: str
    :ivar mirroring_mode: Mirroring mode. Required. Known values are: "Full" and "Partial".
    :vartype mirroring_mode: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroringModes
    :ivar storage_connection_id: The storage connection id.
    :vartype storage_connection_id: str
    """

    _validation = {
        "catalog_name": {"required": True},
        "databricks_workspace_connection_id": {"required": True},
        "mirroring_mode": {"required": True},
    }

    _attribute_map = {
        "catalog_name": {"key": "catalogName", "type": "str"},
        "databricks_workspace_connection_id": {"key": "databricksWorkspaceConnectionId", "type": "str"},
        "mirroring_mode": {"key": "mirroringMode", "type": "str"},
        "storage_connection_id": {"key": "storageConnectionId", "type": "str"},
    }

    def __init__(
        self,
        *,
        catalog_name: str,
        databricks_workspace_connection_id: str,
        mirroring_mode: Union[str, "_models.MirroringModes"],
        storage_connection_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword catalog_name: Azure databricks catalog name. Required.
        :paramtype catalog_name: str
        :keyword databricks_workspace_connection_id: The Azure databricks workspace connection id.
         Required.
        :paramtype databricks_workspace_connection_id: str
        :keyword mirroring_mode: Mirroring mode. Required. Known values are: "Full" and "Partial".
        :paramtype mirroring_mode: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroringModes
        :keyword storage_connection_id: The storage connection id.
        :paramtype storage_connection_id: str
        """
        super().__init__(**kwargs)
        self.catalog_name = catalog_name
        self.databricks_workspace_connection_id = databricks_workspace_connection_id
        self.mirroring_mode = mirroring_mode
        self.storage_connection_id = storage_connection_id


class MirroredAzureDatabricksCatalogDefinitionResponse(_serialization.Model):  # pylint: disable=name-too-long
    """API for mirroredAzureDatabricksCatalog public definition response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar definition: MirroredAzureDatabricksCatalog public definition object. Refer to this
     `article
     </rest/api/fabric/articles/item-management/definitions/mirroredazuredatabrickscatalog-definition>`_
     for more details on how to craft a MirroredAzureDatabricksCatalog definition public definition.
     Required.
    :vartype definition:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogPublicDefinition
    """

    _validation = {
        "definition": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "MirroredAzureDatabricksCatalogPublicDefinition"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.definition = None


class MirroredAzureDatabricksCatalogProperties(_serialization.Model):
    """The MirroredAzureDatabricksCatalog properties.

    All required parameters must be populated in order to send to server.

    :ivar catalog_name: Azure databricks catalog name. Required.
    :vartype catalog_name: str
    :ivar databricks_workspace_connection_id: The Azure databricks workspace connection id.
     Required.
    :vartype databricks_workspace_connection_id: str
    :ivar one_lake_tables_path: OneLake path to the MirroredAzureDatabricksCatalog tables
     directory. Required.
    :vartype one_lake_tables_path: str
    :ivar sql_endpoint_properties: An object containing the properties of the SQL endpoint.
    :vartype sql_endpoint_properties:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.SqlEndpointProperties
    :ivar auto_sync: Auto sync the catalog. Additional ``autoSync`` types may be added over time.
     Required. Known values are: "Enabled" and "Disabled".
    :vartype auto_sync: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.AutoSync
    :ivar mirroring_mode: Mirroring mode. Additional mirroringMode may be added over time.
     Required. Known values are: "Full" and "Partial".
    :vartype mirroring_mode: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroringModes
    :ivar sync_details: The MirroredAzureDatabricksCatalog sync status.
    :vartype sync_details: ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.SyncDetails
    :ivar mirror_status: The MirroredAzureDatabricksCatalog sync status. Known values are:
     "Mirrored" and "NotMirrored".
    :vartype mirror_status: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirrorStatus
    :ivar storage_connection_id: The storage connection id.
    :vartype storage_connection_id: str
    """

    _validation = {
        "catalog_name": {"required": True},
        "databricks_workspace_connection_id": {"required": True},
        "one_lake_tables_path": {"required": True},
        "auto_sync": {"required": True},
        "mirroring_mode": {"required": True},
    }

    _attribute_map = {
        "catalog_name": {"key": "catalogName", "type": "str"},
        "databricks_workspace_connection_id": {"key": "databricksWorkspaceConnectionId", "type": "str"},
        "one_lake_tables_path": {"key": "oneLakeTablesPath", "type": "str"},
        "sql_endpoint_properties": {"key": "sqlEndpointProperties", "type": "SqlEndpointProperties"},
        "auto_sync": {"key": "autoSync", "type": "str"},
        "mirroring_mode": {"key": "mirroringMode", "type": "str"},
        "sync_details": {"key": "syncDetails", "type": "SyncDetails"},
        "mirror_status": {"key": "mirrorStatus", "type": "str"},
        "storage_connection_id": {"key": "storageConnectionId", "type": "str"},
    }

    def __init__(
        self,
        *,
        catalog_name: str,
        databricks_workspace_connection_id: str,
        one_lake_tables_path: str,
        auto_sync: Union[str, "_models.AutoSync"],
        mirroring_mode: Union[str, "_models.MirroringModes"],
        sql_endpoint_properties: Optional["_models.SqlEndpointProperties"] = None,
        sync_details: Optional["_models.SyncDetails"] = None,
        mirror_status: Optional[Union[str, "_models.MirrorStatus"]] = None,
        storage_connection_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword catalog_name: Azure databricks catalog name. Required.
        :paramtype catalog_name: str
        :keyword databricks_workspace_connection_id: The Azure databricks workspace connection id.
         Required.
        :paramtype databricks_workspace_connection_id: str
        :keyword one_lake_tables_path: OneLake path to the MirroredAzureDatabricksCatalog tables
         directory. Required.
        :paramtype one_lake_tables_path: str
        :keyword sql_endpoint_properties: An object containing the properties of the SQL endpoint.
        :paramtype sql_endpoint_properties:
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.SqlEndpointProperties
        :keyword auto_sync: Auto sync the catalog. Additional ``autoSync`` types may be added over
         time. Required. Known values are: "Enabled" and "Disabled".
        :paramtype auto_sync: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.AutoSync
        :keyword mirroring_mode: Mirroring mode. Additional mirroringMode may be added over time.
         Required. Known values are: "Full" and "Partial".
        :paramtype mirroring_mode: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroringModes
        :keyword sync_details: The MirroredAzureDatabricksCatalog sync status.
        :paramtype sync_details:
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.SyncDetails
        :keyword mirror_status: The MirroredAzureDatabricksCatalog sync status. Known values are:
         "Mirrored" and "NotMirrored".
        :paramtype mirror_status: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirrorStatus
        :keyword storage_connection_id: The storage connection id.
        :paramtype storage_connection_id: str
        """
        super().__init__(**kwargs)
        self.catalog_name = catalog_name
        self.databricks_workspace_connection_id = databricks_workspace_connection_id
        self.one_lake_tables_path = one_lake_tables_path
        self.sql_endpoint_properties = sql_endpoint_properties
        self.auto_sync = auto_sync
        self.mirroring_mode = mirroring_mode
        self.sync_details = sync_details
        self.mirror_status = mirror_status
        self.storage_connection_id = storage_connection_id


class MirroredAzureDatabricksCatalogPublicDefinition(_serialization.Model):  # pylint: disable=name-too-long
    """MirroredAzureDatabricksCatalog public definition object. Refer to this `article
    </rest/api/fabric/articles/item-management/definitions/mirroredazuredatabrickscatalog-definition>`_
    for more details on how to craft a MirroredAzureDatabricksCatalog definition public definition.

    All required parameters must be populated in order to send to server.

    :ivar format: The format of the item definition.
    :vartype format: str
    :ivar parts: A list of definition parts. Required.
    :vartype parts:
     list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogPublicDefinitionPart]  # pylint: disable=line-too-long
    """

    _validation = {
        "parts": {"required": True},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
        "parts": {"key": "parts", "type": "[MirroredAzureDatabricksCatalogPublicDefinitionPart]"},
    }

    def __init__(
        self,
        *,
        parts: List["_models.MirroredAzureDatabricksCatalogPublicDefinitionPart"],
        format: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword format: The format of the item definition.
        :paramtype format: str
        :keyword parts: A list of definition parts. Required.
        :paramtype parts:
         list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogPublicDefinitionPart]  # pylint: disable=line-too-long
        """
        super().__init__(**kwargs)
        self.format = format
        self.parts = parts


class MirroredAzureDatabricksCatalogPublicDefinitionPart(_serialization.Model):  # pylint: disable=name-too-long
    """MirroredAzureDatabricksCatalog definition part object.

    All required parameters must be populated in order to send to server.

    :ivar path: The MirroredAzureDatabricksCatalog part path. Required.
    :vartype path: str
    :ivar payload: The MirroredAzureDatabricksCatalog part payload. Required.
    :vartype payload: str
    :ivar payload_type: The payload type. Required. "InlineBase64"
    :vartype payload_type: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.PayloadType
    """

    _validation = {
        "path": {"required": True},
        "payload": {"required": True},
        "payload_type": {"required": True},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "payload": {"key": "payload", "type": "str"},
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    def __init__(
        self, *, path: str, payload: str, payload_type: Union[str, "_models.PayloadType"], **kwargs: Any
    ) -> None:
        """
        :keyword path: The MirroredAzureDatabricksCatalog part path. Required.
        :paramtype path: str
        :keyword payload: The MirroredAzureDatabricksCatalog part payload. Required.
        :paramtype payload: str
        :keyword payload_type: The payload type. Required. "InlineBase64"
        :paramtype payload_type: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.PayloadType
        """
        super().__init__(**kwargs)
        self.path = path
        self.payload = payload
        self.payload_type = payload_type


class MirroredAzureDatabricksCatalogs(PaginatedResponse):
    """A list of MirroredAzureDatabricksCatalogs.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of MirroredAzureDatabricksCatalogs. Required.
    :vartype value:
     list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalog]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[MirroredAzureDatabricksCatalog]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.MirroredAzureDatabricksCatalog"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of MirroredAzureDatabricksCatalogs. Required.
        :paramtype value:
         list[~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalog]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class MirroredAzureDatabricksCatalogUpdatePayload(_serialization.Model):  # pylint: disable=name-too-long
    """MirroredAzureDatabricksCatalog update item payload.

    :ivar auto_sync: Auto sync the catalog. Known values are: "Enabled" and "Disabled".
    :vartype auto_sync: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.AutoSync
    :ivar mirroring_mode: Mirroring mode. Known values are: "Full" and "Partial".
    :vartype mirroring_mode: str or
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroringModes
    :ivar storage_connection_id: The storage connection id.
    :vartype storage_connection_id: str
    """

    _attribute_map = {
        "auto_sync": {"key": "autoSync", "type": "str"},
        "mirroring_mode": {"key": "mirroringMode", "type": "str"},
        "storage_connection_id": {"key": "storageConnectionId", "type": "str"},
    }

    def __init__(
        self,
        *,
        auto_sync: Optional[Union[str, "_models.AutoSync"]] = None,
        mirroring_mode: Optional[Union[str, "_models.MirroringModes"]] = None,
        storage_connection_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword auto_sync: Auto sync the catalog. Known values are: "Enabled" and "Disabled".
        :paramtype auto_sync: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.AutoSync
        :keyword mirroring_mode: Mirroring mode. Known values are: "Full" and "Partial".
        :paramtype mirroring_mode: str or
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroringModes
        :keyword storage_connection_id: The storage connection id.
        :paramtype storage_connection_id: str
        """
        super().__init__(**kwargs)
        self.auto_sync = auto_sync
        self.mirroring_mode = mirroring_mode
        self.storage_connection_id = storage_connection_id


class SqlEndpointProperties(_serialization.Model):
    """An object containing the properties of the SQL endpoint.

    All required parameters must be populated in order to send to server.

    :ivar id: SQL endpoint ID. Required.
    :vartype id: str
    :ivar connection_string: SQL endpoint connection string. Required.
    :vartype connection_string: str
    """

    _validation = {
        "id": {"required": True},
        "connection_string": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
    }

    def __init__(self, *, id: str, connection_string: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: SQL endpoint ID. Required.
        :paramtype id: str
        :keyword connection_string: SQL endpoint connection string. Required.
        :paramtype connection_string: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.connection_string = connection_string


class SyncDetails(_serialization.Model):
    """The MirroredAzureDatabricksCatalog mirroring status.

    All required parameters must be populated in order to send to server.

    :ivar status: The sync status. Additional status may be added over time. Required. Known values
     are: "NotStarted", "InProgress", "Success", and "Failed".
    :vartype status: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.Status
    :ivar last_sync_date_time: The last sync date time in UTC, using the YYYY-MM-DDTHH:mm:ssZ
     format. Required.
    :vartype last_sync_date_time: ~datetime.datetime
    :ivar error_info: The error information.
    :vartype error_info: ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorInfo
    """

    _validation = {
        "status": {"required": True},
        "last_sync_date_time": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "last_sync_date_time": {"key": "lastSyncDateTime", "type": "iso-8601"},
        "error_info": {"key": "errorInfo", "type": "ErrorInfo"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.Status"],
        last_sync_date_time: datetime.datetime,
        error_info: Optional["_models.ErrorInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The sync status. Additional status may be added over time. Required. Known
         values are: "NotStarted", "InProgress", "Success", and "Failed".
        :paramtype status: str or ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.Status
        :keyword last_sync_date_time: The last sync date time in UTC, using the YYYY-MM-DDTHH:mm:ssZ
         format. Required.
        :paramtype last_sync_date_time: ~datetime.datetime
        :keyword error_info: The error information.
        :paramtype error_info: ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.ErrorInfo
        """
        super().__init__(**kwargs)
        self.status = status
        self.last_sync_date_time = last_sync_date_time
        self.error_info = error_info


class UpdatemirroredAzureDatabricksCatalogDefinitionRequest(_serialization.Model):  # pylint: disable=name-too-long
    """Update MirroredAzureDatabricksCatalog public definition request payload.

    All required parameters must be populated in order to send to server.

    :ivar definition: MirroredAzureDatabricksCatalog public definition object. Refer to this
     `article
     </rest/api/fabric/articles/item-management/definitions/mirroredazuredatabrickscatalog-definition>`_
     for more details on how to craft a MirroredAzureDatabricksCatalog definition public definition.
     Required.
    :vartype definition:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogPublicDefinition
    """

    _validation = {
        "definition": {"required": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "MirroredAzureDatabricksCatalogPublicDefinition"},
    }

    def __init__(self, *, definition: "_models.MirroredAzureDatabricksCatalogPublicDefinition", **kwargs: Any) -> None:
        """
        :keyword definition: MirroredAzureDatabricksCatalog public definition object. Refer to this
         `article
         </rest/api/fabric/articles/item-management/definitions/mirroredazuredatabrickscatalog-definition>`_
         for more details on how to craft a MirroredAzureDatabricksCatalog definition public definition.
         Required.
        :paramtype definition:
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogPublicDefinition
        """
        super().__init__(**kwargs)
        self.definition = definition


class UpdateMirroredAzureDatabricksCatalogRequest(_serialization.Model):  # pylint: disable=name-too-long
    """Update MirroredAzureDatabricksCatalog request.

    :ivar display_name: The MirroredAzureDatabricksCatalog display name. The display name must
     follow naming rules according to item type.
    :vartype display_name: str
    :ivar description: The MirroredAzureDatabricksCatalog description. Maximum length is 256
     characters.
    :vartype description: str
    :ivar public_updateable_extended_properties: The MirroredAzureDatabricksCatalog updateable
     properties payload.
    :vartype public_updateable_extended_properties:
     ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogUpdatePayload
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "public_updateable_extended_properties": {
            "key": "publicUpdateableExtendedProperties",
            "type": "MirroredAzureDatabricksCatalogUpdatePayload",
        },
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        public_updateable_extended_properties: Optional["_models.MirroredAzureDatabricksCatalogUpdatePayload"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The MirroredAzureDatabricksCatalog display name. The display name must
         follow naming rules according to item type.
        :paramtype display_name: str
        :keyword description: The MirroredAzureDatabricksCatalog description. Maximum length is 256
         characters.
        :paramtype description: str
        :keyword public_updateable_extended_properties: The MirroredAzureDatabricksCatalog updateable
         properties payload.
        :paramtype public_updateable_extended_properties:
         ~microsoft.fabric.api.mirroredazuredatabrickscatalog.models.MirroredAzureDatabricksCatalogUpdatePayload
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.public_updateable_extended_properties = public_updateable_extended_properties
