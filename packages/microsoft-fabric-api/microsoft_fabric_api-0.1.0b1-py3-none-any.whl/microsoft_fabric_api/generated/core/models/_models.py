# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AcceptExternalDataShareInvitationRequest(_serialization.Model):
    """The request payload for accepting an external data share invitation.

    All required parameters must be populated in order to send to server.

    :ivar provider_tenant_id: The provider tenant ID. Required.
    :vartype provider_tenant_id: str
    :ivar workspace_id: The workspace ID. Required.
    :vartype workspace_id: str
    :ivar item_id: The item ID. Required.
    :vartype item_id: str
    :ivar payload: The payload for the Accept External Data Share invitation request. Required.
    :vartype payload: ~microsoft.fabric.api.core.models.ExternalDataShareAcceptRequestPayload
    """

    _validation = {
        "provider_tenant_id": {"required": True},
        "workspace_id": {"required": True},
        "item_id": {"required": True},
        "payload": {"required": True},
    }

    _attribute_map = {
        "provider_tenant_id": {"key": "providerTenantId", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "payload": {"key": "payload", "type": "ExternalDataShareAcceptRequestPayload"},
    }

    def __init__(
        self,
        *,
        provider_tenant_id: str,
        workspace_id: str,
        item_id: str,
        payload: "_models.ExternalDataShareAcceptRequestPayload",
        **kwargs: Any
    ) -> None:
        """
        :keyword provider_tenant_id: The provider tenant ID. Required.
        :paramtype provider_tenant_id: str
        :keyword workspace_id: The workspace ID. Required.
        :paramtype workspace_id: str
        :keyword item_id: The item ID. Required.
        :paramtype item_id: str
        :keyword payload: The payload for the Accept External Data Share invitation request. Required.
        :paramtype payload: ~microsoft.fabric.api.core.models.ExternalDataShareAcceptRequestPayload
        """
        super().__init__(**kwargs)
        self.provider_tenant_id = provider_tenant_id
        self.workspace_id = workspace_id
        self.item_id = item_id
        self.payload = payload


class AcceptExternalDataShareInvitationResponse(_serialization.Model):  # pylint: disable=name-too-long
    """The response for accepting an external data share invitation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar value: A list of shortcuts that were created by accepting an external data share
     invitation. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ExternalDataShareShortcutInfo]
    """

    _validation = {
        "value": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ExternalDataShareShortcutInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None


class AddConnectionRoleAssignmentRequest(_serialization.Model):
    """The add connection role assignment request for a principal.

    All required parameters must be populated in order to send to server.

    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The connection role of the principal. Required. Known values are: "User",
     "UserWithReshare", and "Owner".
    :vartype role: str or ~microsoft.fabric.api.core.models.ConnectionRole
    """

    _validation = {
        "principal": {"required": True},
        "role": {"required": True},
    }

    _attribute_map = {
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(
        self, *, principal: "_models.Principal", role: Union[str, "_models.ConnectionRole"], **kwargs: Any
    ) -> None:
        """
        :keyword principal: The principal. Required.
        :paramtype principal: ~microsoft.fabric.api.core.models.Principal
        :keyword role: The connection role of the principal. Required. Known values are: "User",
         "UserWithReshare", and "Owner".
        :paramtype role: str or ~microsoft.fabric.api.core.models.ConnectionRole
        """
        super().__init__(**kwargs)
        self.principal = principal
        self.role = role


class AddDeploymentPipelineRoleAssignmentRequest(_serialization.Model):  # pylint: disable=name-too-long
    """Add deployment pipeline role assignment request payload.

    All required parameters must be populated in order to send to server.

    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The deployment pipeline role of the principal. Required. "Admin"
    :vartype role: str or ~microsoft.fabric.api.core.models.DeploymentPipelineRole
    """

    _validation = {
        "principal": {"required": True},
        "role": {"required": True},
    }

    _attribute_map = {
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(
        self, *, principal: "_models.Principal", role: Union[str, "_models.DeploymentPipelineRole"], **kwargs: Any
    ) -> None:
        """
        :keyword principal: The principal. Required.
        :paramtype principal: ~microsoft.fabric.api.core.models.Principal
        :keyword role: The deployment pipeline role of the principal. Required. "Admin"
        :paramtype role: str or ~microsoft.fabric.api.core.models.DeploymentPipelineRole
        """
        super().__init__(**kwargs)
        self.principal = principal
        self.role = role


class AddGatewayRoleAssignmentRequest(_serialization.Model):
    """The add gateway role assignment request for a principal.

    All required parameters must be populated in order to send to server.

    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The gateway role of the principal. Required. Known values are: "Admin",
     "ConnectionCreatorWithResharing", and "ConnectionCreator".
    :vartype role: str or ~microsoft.fabric.api.core.models.GatewayRole
    """

    _validation = {
        "principal": {"required": True},
        "role": {"required": True},
    }

    _attribute_map = {
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(
        self, *, principal: "_models.Principal", role: Union[str, "_models.GatewayRole"], **kwargs: Any
    ) -> None:
        """
        :keyword principal: The principal. Required.
        :paramtype principal: ~microsoft.fabric.api.core.models.Principal
        :keyword role: The gateway role of the principal. Required. Known values are: "Admin",
         "ConnectionCreatorWithResharing", and "ConnectionCreator".
        :paramtype role: str or ~microsoft.fabric.api.core.models.GatewayRole
        """
        super().__init__(**kwargs)
        self.principal = principal
        self.role = role


class AddWorkspaceRoleAssignmentRequest(_serialization.Model):
    """Add workspace role assignment request payload.

    All required parameters must be populated in order to send to server.

    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The workspace role of the principal. Required. Known values are: "Admin", "Member",
     "Contributor", and "Viewer".
    :vartype role: str or ~microsoft.fabric.api.core.models.WorkspaceRole
    """

    _validation = {
        "principal": {"required": True},
        "role": {"required": True},
    }

    _attribute_map = {
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(
        self, *, principal: "_models.Principal", role: Union[str, "_models.WorkspaceRole"], **kwargs: Any
    ) -> None:
        """
        :keyword principal: The principal. Required.
        :paramtype principal: ~microsoft.fabric.api.core.models.Principal
        :keyword role: The workspace role of the principal. Required. Known values are: "Admin",
         "Member", "Contributor", and "Viewer".
        :paramtype role: str or ~microsoft.fabric.api.core.models.WorkspaceRole
        """
        super().__init__(**kwargs)
        self.principal = principal
        self.role = role


class AdlsGen2(_serialization.Model):
    """An object containing the properties of the target ADLS Gen2 data source.

    All required parameters must be populated in order to send to server.

    :ivar location: Specifies the location of the target ADLS container. The URI must be in the
     format https://[account-name].dfs.core.windows.net where [account-name] is the name of the
     target ADLS account. Required.
    :vartype location: str
    :ivar subpath: Specifies the container and subfolder within the ADLS account where the target
     folder is located. Must be of the format [container]/[subfolder] where [container] is the name
     of the container that holds the files and folders; [subfolder] is the name of the subfolder
     within the container (optional). For example: /mycontainer/mysubfolder. Required.
    :vartype subpath: str
    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. To find this connection ID, first `create a cloud connection
     </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
     when connecting to the ADLS data location. Open the cloud connection's Settings view and copy
     the connection ID; this is a GUID. Required.
    :vartype connection_id: str
    """

    _validation = {
        "location": {"required": True},
        "subpath": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "subpath": {"key": "subpath", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, location: str, subpath: str, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword location: Specifies the location of the target ADLS container. The URI must be in the
         format https://[account-name].dfs.core.windows.net where [account-name] is the name of the
         target ADLS account. Required.
        :paramtype location: str
        :keyword subpath: Specifies the container and subfolder within the ADLS account where the
         target folder is located. Must be of the format [container]/[subfolder] where [container] is
         the name of the container that holds the files and folders; [subfolder] is the name of the
         subfolder within the container (optional). For example: /mycontainer/mysubfolder. Required.
        :paramtype subpath: str
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. To find this connection ID, first `create a cloud connection
         </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
         when connecting to the ADLS data location. Open the cloud connection's Settings view and copy
         the connection ID; this is a GUID. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.location = location
        self.subpath = subpath
        self.connection_id = connection_id


class AmazonS3(_serialization.Model):
    """An object containing the properties of the target Amazon S3 data source.

    All required parameters must be populated in order to send to server.

    :ivar location: HTTP URL that points to the target bucket in S3. The URL should be in the
     format https://[bucket-name].s3.[region-code].amazonaws.com, where "bucket-name" is the name of
     the S3 bucket you want to point to, and "region-code" is the code for the region where the
     bucket is located. For example: https://my-s3-bucket.s3.us-west-2.amazonaws.com. Required.
    :vartype location: str
    :ivar subpath: Specifies a target folder or subfolder within the S3 bucket.
    :vartype subpath: str
    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. To find this connection ID, first `create a cloud connection
     </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
     when connecting to the Amazon S3 data location. Open the cloud connection's Settings view and
     copy the connection ID; this is a GUID. Required.
    :vartype connection_id: str
    """

    _validation = {
        "location": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "subpath": {"key": "subpath", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, location: str, connection_id: str, subpath: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword location: HTTP URL that points to the target bucket in S3. The URL should be in the
         format https://[bucket-name].s3.[region-code].amazonaws.com, where "bucket-name" is the name of
         the S3 bucket you want to point to, and "region-code" is the code for the region where the
         bucket is located. For example: https://my-s3-bucket.s3.us-west-2.amazonaws.com. Required.
        :paramtype location: str
        :keyword subpath: Specifies a target folder or subfolder within the S3 bucket.
        :paramtype subpath: str
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. To find this connection ID, first `create a cloud connection
         </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
         when connecting to the Amazon S3 data location. Open the cloud connection's Settings view and
         copy the connection ID; this is a GUID. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.location = location
        self.subpath = subpath
        self.connection_id = connection_id


class Credentials(_serialization.Model):
    """The base object of credentials.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AnonymousCredentials, BasicCredentials, KeyCredentials, ServicePrincipalCredentials,
    SharedAccessSignatureCredentials, WindowsCredentials, WindowsWithoutImpersonationCredentials,
    WorkspaceIdentityCredentials

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    """

    _validation = {
        "credential_type": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
    }

    _subtype_map = {
        "credential_type": {
            "Anonymous": "AnonymousCredentials",
            "Basic": "BasicCredentials",
            "Key": "KeyCredentials",
            "ServicePrincipal": "ServicePrincipalCredentials",
            "SharedAccessSignature": "SharedAccessSignatureCredentials",
            "Windows": "WindowsCredentials",
            "WindowsWithoutImpersonation": "WindowsWithoutImpersonationCredentials",
            "WorkspaceIdentity": "WorkspaceIdentityCredentials",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.credential_type: Optional[str] = None


class AnonymousCredentials(Credentials):
    """Credentials for Anonymous CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    """

    _validation = {
        "credential_type": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.credential_type: str = "Anonymous"


class ApplyTagsRequest(_serialization.Model):
    """The request payload for applying tags.

    All required parameters must be populated in order to send to server.

    :ivar tags: The array of tag IDs. Required.
    :vartype tags: list[str]
    """

    _validation = {
        "tags": {"required": True},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "[str]"},
    }

    def __init__(self, *, tags: List[str], **kwargs: Any) -> None:
        """
        :keyword tags: The array of tag IDs. Required.
        :paramtype tags: list[str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class AssignWorkspaceToCapacityRequest(_serialization.Model):
    """A capacity assignment request.

    All required parameters must be populated in order to send to server.

    :ivar capacity_id: The ID of the capacity the workspace should be assigned to. Required.
    :vartype capacity_id: str
    """

    _validation = {
        "capacity_id": {"required": True},
    }

    _attribute_map = {
        "capacity_id": {"key": "capacityId", "type": "str"},
    }

    def __init__(self, *, capacity_id: str, **kwargs: Any) -> None:
        """
        :keyword capacity_id: The ID of the capacity the workspace should be assigned to. Required.
        :paramtype capacity_id: str
        """
        super().__init__(**kwargs)
        self.capacity_id = capacity_id


class AssignWorkspaceToDomainRequest(_serialization.Model):
    """A domain assignment request.

    All required parameters must be populated in order to send to server.

    :ivar domain_id: The ID of the domain the workspace should be assigned to. Required.
    :vartype domain_id: str
    """

    _validation = {
        "domain_id": {"required": True},
    }

    _attribute_map = {
        "domain_id": {"key": "domainId", "type": "str"},
    }

    def __init__(self, *, domain_id: str, **kwargs: Any) -> None:
        """
        :keyword domain_id: The ID of the domain the workspace should be assigned to. Required.
        :paramtype domain_id: str
        """
        super().__init__(**kwargs)
        self.domain_id = domain_id


class GitCredentials(_serialization.Model):
    """The Git credentials.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AutomaticGitCredentials, ConfiguredConnectionGitCredentials

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    _subtype_map = {
        "source": {"Automatic": "AutomaticGitCredentials", "ConfiguredConnection": "ConfiguredConnectionGitCredentials"}
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: Optional[str] = None


class AutomaticGitCredentials(GitCredentials):
    """Automatic Git credentials.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: str = "Automatic"


class GitCredentialsConfigurationResponse(_serialization.Model):
    """The Git credentials configuration.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AutomaticGitCredentialsResponse, ConfiguredConnectionGitCredentialsResponse,
    NoneGitCredentialsResponse

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    _subtype_map = {
        "source": {
            "Automatic": "AutomaticGitCredentialsResponse",
            "ConfiguredConnection": "ConfiguredConnectionGitCredentialsResponse",
            "None": "NoneGitCredentialsResponse",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: Optional[str] = None


class AutomaticGitCredentialsResponse(GitCredentialsConfigurationResponse):
    """Automatic Git credentials.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: str = "Automatic"


class AzureBlobStorage(_serialization.Model):
    """An object containing the properties of the target Azure Blob Storage data source.

    All required parameters must be populated in order to send to server.

    :ivar location: Specifies the location of the target Azure Blob Storage container. The URI must
     be in the format ``https://[account-name].blob.core.windows.net`` where ``[account-name]`` is
     the name of the target Azure Blob Storage account. Required.
    :vartype location: str
    :ivar subpath: Specifies the container and subfolder within the Azure Blob Storage account
     where the target folder is located. Must be of the format [container]/[subfolder]. [Container]
     is the name of the container that holds the files and folders. [Subfolder] is the name of the
     subfolder within the container and is optional. For example: /mycontainer/mysubfolder.
     Required.
    :vartype subpath: str
    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. To find this connection ID, first `create a cloud connection
     </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
     when connecting to the Azure Blob Storage data location. Open the cloud connection's settings
     view and copy the GUID that is the connection ID. Required.
    :vartype connection_id: str
    """

    _validation = {
        "location": {"required": True},
        "subpath": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "subpath": {"key": "subpath", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, location: str, subpath: str, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword location: Specifies the location of the target Azure Blob Storage container. The URI
         must be in the format ``https://[account-name].blob.core.windows.net`` where ``[account-name]``
         is the name of the target Azure Blob Storage account. Required.
        :paramtype location: str
        :keyword subpath: Specifies the container and subfolder within the Azure Blob Storage account
         where the target folder is located. Must be of the format [container]/[subfolder]. [Container]
         is the name of the container that holds the files and folders. [Subfolder] is the name of the
         subfolder within the container and is optional. For example: /mycontainer/mysubfolder.
         Required.
        :paramtype subpath: str
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. To find this connection ID, first `create a cloud connection
         </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
         when connecting to the Azure Blob Storage data location. Open the cloud connection's settings
         view and copy the GUID that is the connection ID. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.location = location
        self.subpath = subpath
        self.connection_id = connection_id


class GitProviderDetails(_serialization.Model):
    """The Git provider details.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureDevOpsDetails, GitHubDetails

    All required parameters must be populated in order to send to server.

    :ivar git_provider_type: A Git provider type. Additional provider types may be added over time.
     Required. Known values are: "AzureDevOps" and "GitHub".
    :vartype git_provider_type: str or ~microsoft.fabric.api.core.models.GitProviderType
    :ivar repository_name: The repository name. Maximum length is 128 characters. Required.
    :vartype repository_name: str
    :ivar branch_name: The branch name. Maximum length is 250 characters. Required.
    :vartype branch_name: str
    :ivar directory_name: The relative path to the directory. Maximum length is 256 characters.
     Required.
    :vartype directory_name: str
    """

    _validation = {
        "git_provider_type": {"required": True},
        "repository_name": {"required": True, "max_length": 128},
        "branch_name": {"required": True, "max_length": 250},
        "directory_name": {"required": True, "max_length": 256},
    }

    _attribute_map = {
        "git_provider_type": {"key": "gitProviderType", "type": "str"},
        "repository_name": {"key": "repositoryName", "type": "str"},
        "branch_name": {"key": "branchName", "type": "str"},
        "directory_name": {"key": "directoryName", "type": "str"},
    }

    _subtype_map = {"git_provider_type": {"AzureDevOps": "AzureDevOpsDetails", "GitHub": "GitHubDetails"}}

    def __init__(self, *, repository_name: str, branch_name: str, directory_name: str, **kwargs: Any) -> None:
        """
        :keyword repository_name: The repository name. Maximum length is 128 characters. Required.
        :paramtype repository_name: str
        :keyword branch_name: The branch name. Maximum length is 250 characters. Required.
        :paramtype branch_name: str
        :keyword directory_name: The relative path to the directory. Maximum length is 256 characters.
         Required.
        :paramtype directory_name: str
        """
        super().__init__(**kwargs)
        self.git_provider_type: Optional[str] = None
        self.repository_name = repository_name
        self.branch_name = branch_name
        self.directory_name = directory_name


class AzureDevOpsDetails(GitProviderDetails):
    """Azure DevOps provider details.

    All required parameters must be populated in order to send to server.

    :ivar git_provider_type: A Git provider type. Additional provider types may be added over time.
     Required. Known values are: "AzureDevOps" and "GitHub".
    :vartype git_provider_type: str or ~microsoft.fabric.api.core.models.GitProviderType
    :ivar repository_name: The repository name. Maximum length is 128 characters. Required.
    :vartype repository_name: str
    :ivar branch_name: The branch name. Maximum length is 250 characters. Required.
    :vartype branch_name: str
    :ivar directory_name: The relative path to the directory. Maximum length is 256 characters.
     Required.
    :vartype directory_name: str
    :ivar organization_name: The organization name. Maximum length is 100 characters. Required.
    :vartype organization_name: str
    :ivar project_name: The project name. Maximum length is 100 characters. Required.
    :vartype project_name: str
    """

    _validation = {
        "git_provider_type": {"required": True},
        "repository_name": {"required": True, "max_length": 128},
        "branch_name": {"required": True, "max_length": 250},
        "directory_name": {"required": True, "max_length": 256},
        "organization_name": {"required": True, "max_length": 100},
        "project_name": {"required": True, "max_length": 100},
    }

    _attribute_map = {
        "git_provider_type": {"key": "gitProviderType", "type": "str"},
        "repository_name": {"key": "repositoryName", "type": "str"},
        "branch_name": {"key": "branchName", "type": "str"},
        "directory_name": {"key": "directoryName", "type": "str"},
        "organization_name": {"key": "organizationName", "type": "str"},
        "project_name": {"key": "projectName", "type": "str"},
    }

    def __init__(
        self,
        *,
        repository_name: str,
        branch_name: str,
        directory_name: str,
        organization_name: str,
        project_name: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword repository_name: The repository name. Maximum length is 128 characters. Required.
        :paramtype repository_name: str
        :keyword branch_name: The branch name. Maximum length is 250 characters. Required.
        :paramtype branch_name: str
        :keyword directory_name: The relative path to the directory. Maximum length is 256 characters.
         Required.
        :paramtype directory_name: str
        :keyword organization_name: The organization name. Maximum length is 100 characters. Required.
        :paramtype organization_name: str
        :keyword project_name: The project name. Maximum length is 100 characters. Required.
        :paramtype project_name: str
        """
        super().__init__(
            repository_name=repository_name, branch_name=branch_name, directory_name=directory_name, **kwargs
        )
        self.git_provider_type: str = "AzureDevOps"
        self.organization_name = organization_name
        self.project_name = project_name


class AzureResource(_serialization.Model):
    """The properties of an Azure resource.

    All required parameters must be populated in order to send to server.

    :ivar subscription_id: The subscription ID. Required.
    :vartype subscription_id: str
    :ivar resource_group_name: The name of the resource group. Required.
    :vartype resource_group_name: str
    """

    _validation = {
        "subscription_id": {"required": True},
        "resource_group_name": {"required": True},
    }

    _attribute_map = {
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "resource_group_name": {"key": "resourceGroupName", "type": "str"},
    }

    def __init__(self, *, subscription_id: str, resource_group_name: str, **kwargs: Any) -> None:
        """
        :keyword subscription_id: The subscription ID. Required.
        :paramtype subscription_id: str
        :keyword resource_group_name: The name of the resource group. Required.
        :paramtype resource_group_name: str
        """
        super().__init__(**kwargs)
        self.subscription_id = subscription_id
        self.resource_group_name = resource_group_name


class BasicCredentials(Credentials):
    """Credentials for Basic CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    :ivar username: The username. Required.
    :vartype username: str
    :ivar password: The password. Required.
    :vartype password: str
    """

    _validation = {
        "credential_type": {"required": True},
        "username": {"required": True},
        "password": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "password": {"key": "password", "type": "str"},
    }

    def __init__(self, *, username: str, password: str, **kwargs: Any) -> None:
        """
        :keyword username: The username. Required.
        :paramtype username: str
        :keyword password: The password. Required.
        :paramtype password: str
        """
        super().__init__(**kwargs)
        self.credential_type: str = "Basic"
        self.username = username
        self.password = password


class BulkCreateShortcutResponse(_serialization.Model):
    """A collection of CreateShortcutResponse that corresponds to the requested shortcut creation
    requests.

    All required parameters must be populated in order to send to server.

    :ivar value: A list of create shortcut response. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.CreateShortcutResponse]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[CreateShortcutResponse]"},
    }

    def __init__(self, *, value: List["_models.CreateShortcutResponse"], **kwargs: Any) -> None:
        """
        :keyword value: A list of create shortcut response. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.CreateShortcutResponse]
        """
        super().__init__(**kwargs)
        self.value = value


class BulkCreateShortcutsRequest(_serialization.Model):
    """A list of create shortcut requests.

    All required parameters must be populated in order to send to server.

    :ivar create_shortcut_requests: A list of shortcut creation requests. Required.
    :vartype create_shortcut_requests:
     list[~microsoft.fabric.api.core.models.CreateShortcutWithTransformRequest]
    """

    _validation = {
        "create_shortcut_requests": {"required": True},
    }

    _attribute_map = {
        "create_shortcut_requests": {"key": "createShortcutRequests", "type": "[CreateShortcutWithTransformRequest]"},
    }

    def __init__(
        self, *, create_shortcut_requests: List["_models.CreateShortcutWithTransformRequest"], **kwargs: Any
    ) -> None:
        """
        :keyword create_shortcut_requests: A list of shortcut creation requests. Required.
        :paramtype create_shortcut_requests:
         list[~microsoft.fabric.api.core.models.CreateShortcutWithTransformRequest]
        """
        super().__init__(**kwargs)
        self.create_shortcut_requests = create_shortcut_requests


class BulkMoveItemsRequest(_serialization.Model):
    """Bulk move items request.

    All required parameters must be populated in order to send to server.

    :ivar target_folder_id: The destination folder ID. If not provided, the workspace is used as
     the destination folder.
    :vartype target_folder_id: str
    :ivar items: The IDs of requested items to move. Required.
    :vartype items: list[str]
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "target_folder_id": {"key": "targetFolderId", "type": "str"},
        "items": {"key": "items", "type": "[str]"},
    }

    def __init__(self, *, items: List[str], target_folder_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword target_folder_id: The destination folder ID. If not provided, the workspace is used as
         the destination folder.
        :paramtype target_folder_id: str
        :keyword items: The IDs of requested items to move. Required.
        :paramtype items: list[str]
        """
        super().__init__(**kwargs)
        self.target_folder_id = target_folder_id
        self.items = items


class PaginatedResponse(_serialization.Model):
    """PaginatedResponse.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(**kwargs)
        self.continuation_token = continuation_token
        self.continuation_uri = continuation_uri


class Capacities(PaginatedResponse):
    """Capacities.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of capacities. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Capacity]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Capacity]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Capacity"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of capacities. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Capacity]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class Capacity(_serialization.Model):
    """A capacity object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The capacity ID. Required.
    :vartype id: str
    :ivar display_name: The capacity display name. Required.
    :vartype display_name: str
    :ivar sku: The capacity SKU. Required.
    :vartype sku: str
    :ivar region: The Azure region where the capacity was provisioned. Required.
    :vartype region: str
    :ivar state: The capacity state. Required. Known values are: "Active" and "Inactive".
    :vartype state: str or ~microsoft.fabric.api.core.models.CapacityState
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "display_name": {"required": True, "readonly": True},
        "sku": {"required": True, "readonly": True},
        "region": {"required": True, "readonly": True},
        "state": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "sku": {"key": "sku", "type": "str"},
        "region": {"key": "region", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = None
        self.sku = None
        self.region = None
        self.state = None


class ColumnConstraint(_serialization.Model):
    """ColumnConstraint indicates a constraint that determines the permissions and visibility a user
    has on columns within a table.

    All required parameters must be populated in order to send to server.

    :ivar table_path: A relative file path specifying which table the column constraint applies to.
     This should be in the form of ``/Tables/{optionalSchema}/{tableName}``. Only one value can be
     given here and the tableName must be a table included in the PermissionScope. Required.
    :vartype table_path: str
    :ivar column_names: An array of case sensitive column names. Each value is a column name from
     the table specified in ``tablePath``. Use these columns with ``columnEffect`` and
     ``columnAction``. Columns that aren't listed get the default value null. Use ``*`` to indicate
     all columns in the table. Required.
    :vartype column_names: list[str]
    :ivar column_effect: The effect given to the columnNames. The only allowed value is *Permit*.
     Additional columnEffect types may be added over time. Required. "Permit"
    :vartype column_effect: str or ~microsoft.fabric.api.core.models.ColumnEffect
    :ivar column_action: The array of actions applied to the columnNames. This determines which
     actions a user will be able to perform on columns. The allowed values are: *Read*. Additional
     columnAction types may be added over time. Required.
    :vartype column_action: list[str or ~microsoft.fabric.api.core.models.ColumnAction]
    """

    _validation = {
        "table_path": {"required": True},
        "column_names": {"required": True},
        "column_effect": {"required": True},
        "column_action": {"required": True},
    }

    _attribute_map = {
        "table_path": {"key": "tablePath", "type": "str"},
        "column_names": {"key": "columnNames", "type": "[str]"},
        "column_effect": {"key": "columnEffect", "type": "str"},
        "column_action": {"key": "columnAction", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        table_path: str,
        column_names: List[str],
        column_effect: Union[str, "_models.ColumnEffect"],
        column_action: List[Union[str, "_models.ColumnAction"]],
        **kwargs: Any
    ) -> None:
        """
        :keyword table_path: A relative file path specifying which table the column constraint applies
         to. This should be in the form of ``/Tables/{optionalSchema}/{tableName}``. Only one value can
         be given here and the tableName must be a table included in the PermissionScope. Required.
        :paramtype table_path: str
        :keyword column_names: An array of case sensitive column names. Each value is a column name
         from the table specified in ``tablePath``. Use these columns with ``columnEffect`` and
         ``columnAction``. Columns that aren't listed get the default value null. Use ``*`` to indicate
         all columns in the table. Required.
        :paramtype column_names: list[str]
        :keyword column_effect: The effect given to the columnNames. The only allowed value is
         *Permit*. Additional columnEffect types may be added over time. Required. "Permit"
        :paramtype column_effect: str or ~microsoft.fabric.api.core.models.ColumnEffect
        :keyword column_action: The array of actions applied to the columnNames. This determines which
         actions a user will be able to perform on columns. The allowed values are: *Read*. Additional
         columnAction types may be added over time. Required.
        :paramtype column_action: list[str or ~microsoft.fabric.api.core.models.ColumnAction]
        """
        super().__init__(**kwargs)
        self.table_path = table_path
        self.column_names = column_names
        self.column_effect = column_effect
        self.column_action = column_action


class CommitToGitRequest(_serialization.Model):
    """Contains the commit request.

    All required parameters must be populated in order to send to server.

    :ivar mode: The mode for the commit operation. Required. Known values are: "All" and
     "Selective".
    :vartype mode: str or ~microsoft.fabric.api.core.models.CommitMode
    :ivar workspace_head: Full SHA hash that the workspace is synced to.
     The hash can be retrieved from the `Git Status </rest/api/fabric/core/git/get-status>`_ API.
    :vartype workspace_head: str
    :ivar comment: Caller-free comment for this commit. Maximum length is 300 characters.
     If no comment is provided by the caller, use the default Git provider comment.
    :vartype comment: str
    :ivar items: Specific items to commit.
     This is relevant only for Selective commit mode.
     The items can be retrieved from the `Git Status </rest/api/fabric/core/git/get-status>`_ API.
    :vartype items: list[~microsoft.fabric.api.core.models.ItemIdentifier]
    """

    _validation = {
        "mode": {"required": True},
        "comment": {"max_length": 300},
    }

    _attribute_map = {
        "mode": {"key": "mode", "type": "str"},
        "workspace_head": {"key": "workspaceHead", "type": "str"},
        "comment": {"key": "comment", "type": "str"},
        "items": {"key": "items", "type": "[ItemIdentifier]"},
    }

    def __init__(
        self,
        *,
        mode: Union[str, "_models.CommitMode"],
        workspace_head: Optional[str] = None,
        comment: Optional[str] = None,
        items: Optional[List["_models.ItemIdentifier"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword mode: The mode for the commit operation. Required. Known values are: "All" and
         "Selective".
        :paramtype mode: str or ~microsoft.fabric.api.core.models.CommitMode
        :keyword workspace_head: Full SHA hash that the workspace is synced to.
         The hash can be retrieved from the `Git Status </rest/api/fabric/core/git/get-status>`_ API.
        :paramtype workspace_head: str
        :keyword comment: Caller-free comment for this commit. Maximum length is 300 characters.
         If no comment is provided by the caller, use the default Git provider comment.
        :paramtype comment: str
        :keyword items: Specific items to commit.
         This is relevant only for Selective commit mode.
         The items can be retrieved from the `Git Status </rest/api/fabric/core/git/get-status>`_ API.
        :paramtype items: list[~microsoft.fabric.api.core.models.ItemIdentifier]
        """
        super().__init__(**kwargs)
        self.mode = mode
        self.workspace_head = workspace_head
        self.comment = comment
        self.items = items


class ConfiguredConnectionGitCredentials(GitCredentials):
    """Configured connection Git credentials.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    :ivar connection_id: The object ID of the connection. Required.
    :vartype connection_id: str
    """

    _validation = {
        "source": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword connection_id: The object ID of the connection. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.source: str = "ConfiguredConnection"
        self.connection_id = connection_id


class ConfiguredConnectionGitCredentialsResponse(GitCredentialsConfigurationResponse):  # pylint: disable=name-too-long
    """Configured connection Git credentials.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    :ivar connection_id: The object ID of the connection. Required.
    :vartype connection_id: str
    """

    _validation = {
        "source": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword connection_id: The object ID of the connection. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.source: str = "ConfiguredConnection"
        self.connection_id = connection_id


class Connection(_serialization.Model):
    """The base object of a connection.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    OnPremisesGatewayConnection, OnPremisesGatewayPersonalConnection, PersonalCloudConnection,
    ShareableCloudConnection, VirtualNetworkGatewayConnection

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection. Required.
    :vartype id: str
    :ivar display_name: The display name of the connection.
    :vartype display_name: str
    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
    """

    _validation = {
        "id": {"required": True},
        "connectivity_type": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "ListConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "ListCredentialDetails"},
    }

    _subtype_map = {
        "connectivity_type": {
            "OnPremisesGateway": "OnPremisesGatewayConnection",
            "OnPremisesGatewayPersonal": "OnPremisesGatewayPersonalConnection",
            "PersonalCloud": "PersonalCloudConnection",
            "ShareableCloud": "ShareableCloudConnection",
            "VirtualNetworkGateway": "VirtualNetworkGatewayConnection",
        }
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        connection_details: "_models.ListConnectionDetails",
        display_name: Optional[str] = None,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.ListCredentialDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection. Required.
        :paramtype id: str
        :keyword display_name: The display name of the connection.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.connectivity_type: Optional[str] = None
        self.connection_details = connection_details
        self.privacy_level = privacy_level
        self.credential_details = credential_details


class ConnectionCreationMetadata(_serialization.Model):
    """ConnectionCreationMetadata.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the connection. Required.
    :vartype type: str
    :ivar creation_methods: A list of creation methods for the connection. Required.
    :vartype creation_methods: list[~microsoft.fabric.api.core.models.ConnectionCreationMethod]
    :ivar supported_credential_types: A list of credential type values that the connection
     supports. Required.
    :vartype supported_credential_types: list[str or
     ~microsoft.fabric.api.core.models.CredentialType]
    :ivar supported_connection_encryption_types: A list of connection encryption values that the
     connection supports. Required.
    :vartype supported_connection_encryption_types: list[str or
     ~microsoft.fabric.api.core.models.ConnectionEncryption]
    :ivar supports_skip_test_connection: Whether the connection type supports skip test connection.
     True - The connection type supports skip test connection, False - The connection type does not
     support skip test connection. Required.
    :vartype supports_skip_test_connection: bool
    """

    _validation = {
        "type": {"required": True},
        "creation_methods": {"required": True},
        "supported_credential_types": {"required": True},
        "supported_connection_encryption_types": {"required": True},
        "supports_skip_test_connection": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "creation_methods": {"key": "creationMethods", "type": "[ConnectionCreationMethod]"},
        "supported_credential_types": {"key": "supportedCredentialTypes", "type": "[str]"},
        "supported_connection_encryption_types": {"key": "supportedConnectionEncryptionTypes", "type": "[str]"},
        "supports_skip_test_connection": {"key": "supportsSkipTestConnection", "type": "bool"},
    }

    def __init__(
        self,
        *,
        type: str,
        creation_methods: List["_models.ConnectionCreationMethod"],
        supported_credential_types: List[Union[str, "_models.CredentialType"]],
        supported_connection_encryption_types: List[Union[str, "_models.ConnectionEncryption"]],
        supports_skip_test_connection: bool,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The type of the connection. Required.
        :paramtype type: str
        :keyword creation_methods: A list of creation methods for the connection. Required.
        :paramtype creation_methods: list[~microsoft.fabric.api.core.models.ConnectionCreationMethod]
        :keyword supported_credential_types: A list of credential type values that the connection
         supports. Required.
        :paramtype supported_credential_types: list[str or
         ~microsoft.fabric.api.core.models.CredentialType]
        :keyword supported_connection_encryption_types: A list of connection encryption values that the
         connection supports. Required.
        :paramtype supported_connection_encryption_types: list[str or
         ~microsoft.fabric.api.core.models.ConnectionEncryption]
        :keyword supports_skip_test_connection: Whether the connection type supports skip test
         connection. True - The connection type supports skip test connection, False - The connection
         type does not support skip test connection. Required.
        :paramtype supports_skip_test_connection: bool
        """
        super().__init__(**kwargs)
        self.type = type
        self.creation_methods = creation_methods
        self.supported_credential_types = supported_credential_types
        self.supported_connection_encryption_types = supported_connection_encryption_types
        self.supports_skip_test_connection = supports_skip_test_connection


class ConnectionCreationMethod(_serialization.Model):
    """ConnectionCreationMethod.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the creation method. Required.
    :vartype name: str
    :ivar parameters: A list of creation method parameters for the connection. Required.
    :vartype parameters: list[~microsoft.fabric.api.core.models.ConnectionCreationParameter]
    """

    _validation = {
        "name": {"required": True},
        "parameters": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "parameters": {"key": "parameters", "type": "[ConnectionCreationParameter]"},
    }

    def __init__(self, *, name: str, parameters: List["_models.ConnectionCreationParameter"], **kwargs: Any) -> None:
        """
        :keyword name: The name of the creation method. Required.
        :paramtype name: str
        :keyword parameters: A list of creation method parameters for the connection. Required.
        :paramtype parameters: list[~microsoft.fabric.api.core.models.ConnectionCreationParameter]
        """
        super().__init__(**kwargs)
        self.name = name
        self.parameters = parameters


class ConnectionCreationParameter(_serialization.Model):
    """ConnectionCreationParameter.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the connection creation parameter. Required.
    :vartype name: str
    :ivar data_type: The data type of the connection creation parameter. Required. Known values
     are: "Text", "Number", "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar required: Whether the connection creation parameter is required. True - The connection
     creation parameter is required, False - The connection creation parameter is not required.
     Required.
    :vartype required: bool
    :ivar allowed_values: A list of allowed values for the connection creation parameter.
    :vartype allowed_values: list[str]
    """

    _validation = {
        "name": {"required": True},
        "data_type": {"required": True},
        "required": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "data_type": {"key": "dataType", "type": "str"},
        "required": {"key": "required", "type": "bool"},
        "allowed_values": {"key": "allowedValues", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        name: str,
        data_type: Union[str, "_models.DataType"],
        required: bool,
        allowed_values: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the connection creation parameter. Required.
        :paramtype name: str
        :keyword data_type: The data type of the connection creation parameter. Required. Known values
         are: "Text", "Number", "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
        :paramtype data_type: str or ~microsoft.fabric.api.core.models.DataType
        :keyword required: Whether the connection creation parameter is required. True - The connection
         creation parameter is required, False - The connection creation parameter is not required.
         Required.
        :paramtype required: bool
        :keyword allowed_values: A list of allowed values for the connection creation parameter.
        :paramtype allowed_values: list[str]
        """
        super().__init__(**kwargs)
        self.name = name
        self.data_type = data_type
        self.required = required
        self.allowed_values = allowed_values


class ConnectionDetails(_serialization.Model):
    """The base object of connection details.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the connection. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: str, **kwargs: Any) -> None:
        """
        :keyword type: The type of the connection. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.type = type


class ConnectionDetailsParameter(_serialization.Model):
    """The base object of ConnectionDetailsParameter.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ConnectionDetailsBooleanParameter, ConnectionDetailsDateParameter,
    ConnectionDetailsDateTimeParameter, ConnectionDetailsDateTimeZoneParameter,
    ConnectionDetailsDurationParameter, ConnectionDetailsNumberParameter,
    ConnectionDetailsTextParameter, ConnectionDetailsTimeParameter

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    _subtype_map = {
        "data_type": {
            "Boolean": "ConnectionDetailsBooleanParameter",
            "Date": "ConnectionDetailsDateParameter",
            "DateTime": "ConnectionDetailsDateTimeParameter",
            "DateTimeZone": "ConnectionDetailsDateTimeZoneParameter",
            "Duration": "ConnectionDetailsDurationParameter",
            "Number": "ConnectionDetailsNumberParameter",
            "Text": "ConnectionDetailsTextParameter",
            "Time": "ConnectionDetailsTimeParameter",
        }
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.data_type: Optional[str] = None
        self.name = name


class ConnectionDetailsBooleanParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for boolean dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The boolean value. Required.
    :vartype value: bool
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "bool"},
    }

    def __init__(self, *, name: str, value: bool, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The boolean value. Required.
        :paramtype value: bool
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "Boolean"
        self.value = value


class ConnectionDetailsDateParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for date dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The date value using YYYY-MM-DD format. Required.
    :vartype value: ~datetime.date
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "date"},
    }

    def __init__(self, *, name: str, value: datetime.date, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The date value using YYYY-MM-DD format. Required.
        :paramtype value: ~datetime.date
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "Date"
        self.value = value


class ConnectionDetailsDateTimeParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for dateTime dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The date time value using YYYY-MM-DDTHH:mm:ss.FFFZ format. Required.
    :vartype value: ~datetime.datetime
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "iso-8601"},
    }

    def __init__(self, *, name: str, value: datetime.datetime, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The date time value using YYYY-MM-DDTHH:mm:ss.FFFZ format. Required.
        :paramtype value: ~datetime.datetime
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "DateTime"
        self.value = value


class ConnectionDetailsDateTimeZoneParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for dateTimeZone dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The date time zone value using YYYY-MM-DDTHH:mm:ss.FFF±hh:mm format. Required.
    :vartype value: str
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, name: str, value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The date time zone value using YYYY-MM-DDTHH:mm:ss.FFF±hh:mm format. Required.
        :paramtype value: str
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "DateTimeZone"
        self.value = value


class ConnectionDetailsDurationParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for duration dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The duration value using [-]P(n)DT(n)H(n)M(n)S format. For example: P3DT4H30M10S
     (for 3 days, 4 hours, 30 minutes, and 10 seconds). Required.
    :vartype value: str
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, name: str, value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The duration value using [-]P(n)DT(n)H(n)M(n)S format. For example:
         P3DT4H30M10S (for 3 days, 4 hours, 30 minutes, and 10 seconds). Required.
        :paramtype value: str
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "Duration"
        self.value = value


class ConnectionDetailsNumberParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for number dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The number value. Required.
    :vartype value: float
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "float"},
    }

    def __init__(self, *, name: str, value: float, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The number value. Required.
        :paramtype value: float
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "Number"
        self.value = value


class ConnectionDetailsTextParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for text dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The text value. Required.
    :vartype value: str
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, name: str, value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The text value. Required.
        :paramtype value: str
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "Text"
        self.value = value


class ConnectionDetailsTimeParameter(ConnectionDetailsParameter):
    """ConnectionDetailsParameter for time dataType.

    All required parameters must be populated in order to send to server.

    :ivar data_type: The data type of the parameter. Required. Known values are: "Text", "Number",
     "Boolean", "Duration", "Date", "DateTime", "DateTimeZone", and "Time".
    :vartype data_type: str or ~microsoft.fabric.api.core.models.DataType
    :ivar name: The name of the parameter. Required.
    :vartype name: str
    :ivar value: The time value using HH:mm:ss.FFFZ format. Required.
    :vartype value: ~datetime.time
    """

    _validation = {
        "data_type": {"required": True},
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "data_type": {"key": "dataType", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "time"},
    }

    def __init__(self, *, name: str, value: datetime.time, **kwargs: Any) -> None:
        """
        :keyword name: The name of the parameter. Required.
        :paramtype name: str
        :keyword value: The time value using HH:mm:ss.FFFZ format. Required.
        :paramtype value: ~datetime.time
        """
        super().__init__(name=name, **kwargs)
        self.data_type: str = "Time"
        self.value = value


class ConnectionRoleAssignment(_serialization.Model):
    """The connection role assignment for a principal.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection role assignment. Required.
    :vartype id: str
    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The connection role of the principal. Required. Known values are: "User",
     "UserWithReshare", and "Owner".
    :vartype role: str or ~microsoft.fabric.api.core.models.ConnectionRole
    """

    _validation = {
        "id": {"required": True},
        "principal": {"required": True},
        "role": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        principal: "_models.Principal",
        role: Union[str, "_models.ConnectionRole"],
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection role assignment. Required.
        :paramtype id: str
        :keyword principal: The principal. Required.
        :paramtype principal: ~microsoft.fabric.api.core.models.Principal
        :keyword role: The connection role of the principal. Required. Known values are: "User",
         "UserWithReshare", and "Owner".
        :paramtype role: str or ~microsoft.fabric.api.core.models.ConnectionRole
        """
        super().__init__(**kwargs)
        self.id = id
        self.principal = principal
        self.role = role


class ConnectionRoleAssignments(PaginatedResponse):
    """ConnectionRoleAssignments.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of connection role assignments. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ConnectionRoleAssignment]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ConnectionRoleAssignment]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.ConnectionRoleAssignment"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of connection role assignments. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.ConnectionRoleAssignment]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class CreatableShortcutTarget(_serialization.Model):
    """An object that contains the target datasource, and must specify exactly one of the supported
    destinations as described in the table below.

    :ivar one_lake: An object containing the properties of the target OneLake data source.
    :vartype one_lake: ~microsoft.fabric.api.core.models.OneLake
    :ivar amazon_s3: An object containing the properties of the target Amazon S3 data source.
    :vartype amazon_s3: ~microsoft.fabric.api.core.models.AmazonS3
    :ivar adls_gen2: An object containing the properties of the target ADLS Gen2 data source.
    :vartype adls_gen2: ~microsoft.fabric.api.core.models.AdlsGen2
    :ivar google_cloud_storage: An object containing the properties of the target Google Cloud
     Storage data source.
    :vartype google_cloud_storage: ~microsoft.fabric.api.core.models.GoogleCloudStorage
    :ivar s3_compatible: An object containing the properties of the target S3 compatible data
     source.
    :vartype s3_compatible: ~microsoft.fabric.api.core.models.S3Compatible
    :ivar dataverse: An object containing the properties of the target Dataverse data source.
    :vartype dataverse: ~microsoft.fabric.api.core.models.Dataverse
    :ivar azure_blob_storage: An object containing the properties of the target Azure Blob Storage
     data source.
    :vartype azure_blob_storage: ~microsoft.fabric.api.core.models.AzureBlobStorage
    """

    _attribute_map = {
        "one_lake": {"key": "oneLake", "type": "OneLake"},
        "amazon_s3": {"key": "amazonS3", "type": "AmazonS3"},
        "adls_gen2": {"key": "adlsGen2", "type": "AdlsGen2"},
        "google_cloud_storage": {"key": "googleCloudStorage", "type": "GoogleCloudStorage"},
        "s3_compatible": {"key": "s3Compatible", "type": "S3Compatible"},
        "dataverse": {"key": "dataverse", "type": "Dataverse"},
        "azure_blob_storage": {"key": "azureBlobStorage", "type": "AzureBlobStorage"},
    }

    def __init__(
        self,
        *,
        one_lake: Optional["_models.OneLake"] = None,
        amazon_s3: Optional["_models.AmazonS3"] = None,
        adls_gen2: Optional["_models.AdlsGen2"] = None,
        google_cloud_storage: Optional["_models.GoogleCloudStorage"] = None,
        s3_compatible: Optional["_models.S3Compatible"] = None,
        dataverse: Optional["_models.Dataverse"] = None,
        azure_blob_storage: Optional["_models.AzureBlobStorage"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword one_lake: An object containing the properties of the target OneLake data source.
        :paramtype one_lake: ~microsoft.fabric.api.core.models.OneLake
        :keyword amazon_s3: An object containing the properties of the target Amazon S3 data source.
        :paramtype amazon_s3: ~microsoft.fabric.api.core.models.AmazonS3
        :keyword adls_gen2: An object containing the properties of the target ADLS Gen2 data source.
        :paramtype adls_gen2: ~microsoft.fabric.api.core.models.AdlsGen2
        :keyword google_cloud_storage: An object containing the properties of the target Google Cloud
         Storage data source.
        :paramtype google_cloud_storage: ~microsoft.fabric.api.core.models.GoogleCloudStorage
        :keyword s3_compatible: An object containing the properties of the target S3 compatible data
         source.
        :paramtype s3_compatible: ~microsoft.fabric.api.core.models.S3Compatible
        :keyword dataverse: An object containing the properties of the target Dataverse data source.
        :paramtype dataverse: ~microsoft.fabric.api.core.models.Dataverse
        :keyword azure_blob_storage: An object containing the properties of the target Azure Blob
         Storage data source.
        :paramtype azure_blob_storage: ~microsoft.fabric.api.core.models.AzureBlobStorage
        """
        super().__init__(**kwargs)
        self.one_lake = one_lake
        self.amazon_s3 = amazon_s3
        self.adls_gen2 = adls_gen2
        self.google_cloud_storage = google_cloud_storage
        self.s3_compatible = s3_compatible
        self.dataverse = dataverse
        self.azure_blob_storage = azure_blob_storage


class CreateConnectionRequest(_serialization.Model):
    """The base object of create connection request.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CreateOnPremisesConnectionRequest, CreateCloudConnectionRequest,
    CreateVirtualNetworkGatewayConnectionRequest

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
     Required.
    :vartype display_name: str
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
    :ivar privacy_level: (Optional) The privacy level of the connection. When no value is passed,
     this is set to 'Organizational'. Known values are: "None", "Private", "Organizational", and
     "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    """

    _validation = {
        "connectivity_type": {"required": True},
        "display_name": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "CreateConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
    }

    _subtype_map = {
        "connectivity_type": {
            "OnPremisesGateway": "CreateOnPremisesConnectionRequest",
            "ShareableCloud": "CreateCloudConnectionRequest",
            "VirtualNetworkGateway": "CreateVirtualNetworkGatewayConnectionRequest",
        }
    }

    def __init__(
        self,
        *,
        display_name: str,
        connection_details: "_models.CreateConnectionDetails",
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
         Required.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
        :keyword privacy_level: (Optional) The privacy level of the connection. When no value is
         passed, this is set to 'Organizational'. Known values are: "None", "Private", "Organizational",
         and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        """
        super().__init__(**kwargs)
        self.connectivity_type: Optional[str] = None
        self.display_name = display_name
        self.connection_details = connection_details
        self.privacy_level = privacy_level


class CreateCloudConnectionRequest(CreateConnectionRequest):
    """CreateCloudConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
     Required.
    :vartype display_name: str
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
    :ivar privacy_level: (Optional) The privacy level of the connection. When no value is passed,
     this is set to 'Organizational'. Known values are: "None", "Private", "Organizational", and
     "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection. Required.
    :vartype credential_details: ~microsoft.fabric.api.core.models.CreateCredentialDetails
    :ivar allow_connection_usage_in_gateway: Allow this connection to be utilized with either
     on-premises data gateways or VNet data gateways.
    :vartype allow_connection_usage_in_gateway: bool
    """

    _validation = {
        "connectivity_type": {"required": True},
        "display_name": {"required": True},
        "connection_details": {"required": True},
        "credential_details": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "CreateConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "CreateCredentialDetails"},
        "allow_connection_usage_in_gateway": {"key": "allowConnectionUsageInGateway", "type": "bool"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        connection_details: "_models.CreateConnectionDetails",
        credential_details: "_models.CreateCredentialDetails",
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        allow_connection_usage_in_gateway: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
         Required.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
        :keyword privacy_level: (Optional) The privacy level of the connection. When no value is
         passed, this is set to 'Organizational'. Known values are: "None", "Private", "Organizational",
         and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection. Required.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.CreateCredentialDetails
        :keyword allow_connection_usage_in_gateway: Allow this connection to be utilized with either
         on-premises data gateways or VNet data gateways.
        :paramtype allow_connection_usage_in_gateway: bool
        """
        super().__init__(
            display_name=display_name, connection_details=connection_details, privacy_level=privacy_level, **kwargs
        )
        self.connectivity_type: str = "ShareableCloud"
        self.credential_details = credential_details
        self.allow_connection_usage_in_gateway = allow_connection_usage_in_gateway


class CreateConnectionDetails(ConnectionDetails):
    """The connection details input for create operations.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the connection. Required.
    :vartype type: str
    :ivar creation_method: The creation method used to create the connection. For a list of
     creation methods use the `ListSupportedConnectionTypes
     </rest/api/fabric/core/connections/list-supported-connection-types>`_ API. Required.
    :vartype creation_method: str
    :ivar parameters: The list of connection parameters. For a list of parameters for each creation
     method use the `ListSupportedConnectionTypes
     </rest/api/fabric/core/connections/list-supported-connection-types>`_ API. Required.
    :vartype parameters: list[~microsoft.fabric.api.core.models.ConnectionDetailsParameter]
    """

    _validation = {
        "type": {"required": True},
        "creation_method": {"required": True},
        "parameters": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "creation_method": {"key": "creationMethod", "type": "str"},
        "parameters": {"key": "parameters", "type": "[ConnectionDetailsParameter]"},
    }

    def __init__(
        self, *, type: str, creation_method: str, parameters: List["_models.ConnectionDetailsParameter"], **kwargs: Any
    ) -> None:
        """
        :keyword type: The type of the connection. Required.
        :paramtype type: str
        :keyword creation_method: The creation method used to create the connection. For a list of
         creation methods use the `ListSupportedConnectionTypes
         </rest/api/fabric/core/connections/list-supported-connection-types>`_ API. Required.
        :paramtype creation_method: str
        :keyword parameters: The list of connection parameters. For a list of parameters for each
         creation method use the `ListSupportedConnectionTypes
         </rest/api/fabric/core/connections/list-supported-connection-types>`_ API. Required.
        :paramtype parameters: list[~microsoft.fabric.api.core.models.ConnectionDetailsParameter]
        """
        super().__init__(type=type, **kwargs)
        self.creation_method = creation_method
        self.parameters = parameters


class CreateCredentialDetailsRequest(_serialization.Model):
    """Create credential details payload.

    :ivar single_sign_on_type: (Optional) The single sign-on type of the connection. When no value
     is passed, the connection doesn't use single sign-on. Known values are: "None", "Kerberos",
     "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: (Optional) The connection encryption setting that is used during
     the test connection. When no value is passed, the connection is not encrypted. Known values
     are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
     When no value is passed, this is set to 'False'.
    :vartype skip_test_connection: bool
    """

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
    }

    def __init__(
        self,
        *,
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: (Optional) The single sign-on type of the connection. When no
         value is passed, the connection doesn't use single sign-on. Known values are: "None",
         "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: (Optional) The connection encryption setting that is used
         during the test connection. When no value is passed, the connection is not encrypted. Known
         values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
         When no value is passed, this is set to 'False'.
        :paramtype skip_test_connection: bool
        """
        super().__init__(**kwargs)
        self.single_sign_on_type = single_sign_on_type
        self.connection_encryption = connection_encryption
        self.skip_test_connection = skip_test_connection


class CreateCredentialDetails(CreateCredentialDetailsRequest):
    """The credential details input for creating a connection.

    All required parameters must be populated in order to send to server.

    :ivar single_sign_on_type: (Optional) The single sign-on type of the connection. When no value
     is passed, the connection doesn't use single sign-on. Known values are: "None", "Kerberos",
     "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: (Optional) The connection encryption setting that is used during
     the test connection. When no value is passed, the connection is not encrypted. Known values
     are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
     When no value is passed, this is set to 'False'.
    :vartype skip_test_connection: bool
    :ivar credentials: The credentials of the connection. Required.
    :vartype credentials: ~microsoft.fabric.api.core.models.Credentials
    """

    _validation = {
        "credentials": {"required": True},
    }

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
        "credentials": {"key": "credentials", "type": "Credentials"},
    }

    def __init__(
        self,
        *,
        credentials: "_models.Credentials",
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: (Optional) The single sign-on type of the connection. When no
         value is passed, the connection doesn't use single sign-on. Known values are: "None",
         "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: (Optional) The connection encryption setting that is used
         during the test connection. When no value is passed, the connection is not encrypted. Known
         values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
         When no value is passed, this is set to 'False'.
        :paramtype skip_test_connection: bool
        :keyword credentials: The credentials of the connection. Required.
        :paramtype credentials: ~microsoft.fabric.api.core.models.Credentials
        """
        super().__init__(
            single_sign_on_type=single_sign_on_type,
            connection_encryption=connection_encryption,
            skip_test_connection=skip_test_connection,
            **kwargs
        )
        self.credentials = credentials


class CreateDeploymentPipelineRequest(_serialization.Model):
    """A request to create a new deployment pipeline.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The display name for the deployment pipeline.:code:`<br>`The display name
     cannot contain more than 256 characters. Required.
    :vartype display_name: str
    :ivar description: The description for the deployment pipeline.:code:`<br>`The description
     cannot contain more than 1024 characters.
    :vartype description: str
    :ivar stages: The collection of deployment pipeline stages. Required.
    :vartype stages: list[~microsoft.fabric.api.core.models.DeploymentPipelineStageRequest]
    """

    _validation = {
        "display_name": {"required": True, "max_length": 256},
        "description": {"max_length": 1024},
        "stages": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "stages": {"key": "stages", "type": "[DeploymentPipelineStageRequest]"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        stages: List["_models.DeploymentPipelineStageRequest"],
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The display name for the deployment pipeline.:code:`<br>`The display
         name cannot contain more than 256 characters. Required.
        :paramtype display_name: str
        :keyword description: The description for the deployment pipeline.:code:`<br>`The description
         cannot contain more than 1024 characters.
        :paramtype description: str
        :keyword stages: The collection of deployment pipeline stages. Required.
        :paramtype stages: list[~microsoft.fabric.api.core.models.DeploymentPipelineStageRequest]
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.stages = stages


class CreateExternalDataShareRequest(_serialization.Model):
    """The request payload for creating an external data share.

    All required parameters must be populated in order to send to server.

    :ivar paths: The path or list of paths that are to be externally shared. You can share up to
     100 paths in each share. A valid path to an external data share must start with "Files/" or
     "Tables/". You can't share the root folder itself (Files or Tables).

     For example, these paths are valid:


     *
       "Files/MyFolder1"

     *
       "Tables/MySchema"

     *
       "Tables/MyTable1". Required.
    :vartype paths: list[str]
    :ivar recipient: The recipient who is invited to accept the external data share. Required.
    :vartype recipient: ~microsoft.fabric.api.core.models.ExternalDataShareRecipient
    """

    _validation = {
        "paths": {"required": True, "max_items": 100, "min_items": 0},
        "recipient": {"required": True},
    }

    _attribute_map = {
        "paths": {"key": "paths", "type": "[str]"},
        "recipient": {"key": "recipient", "type": "ExternalDataShareRecipient"},
    }

    def __init__(self, *, paths: List[str], recipient: "_models.ExternalDataShareRecipient", **kwargs: Any) -> None:
        """
        :keyword paths: The path or list of paths that are to be externally shared. You can share up to
         100 paths in each share. A valid path to an external data share must start with "Files/" or
         "Tables/". You can't share the root folder itself (Files or Tables).

         For example, these paths are valid:


         *
           "Files/MyFolder1"

         *
           "Tables/MySchema"

         *
           "Tables/MyTable1". Required.
        :paramtype paths: list[str]
        :keyword recipient: The recipient who is invited to accept the external data share. Required.
        :paramtype recipient: ~microsoft.fabric.api.core.models.ExternalDataShareRecipient
        """
        super().__init__(**kwargs)
        self.paths = paths
        self.recipient = recipient


class CreateExternalDataShareShortcutRequest(_serialization.Model):
    """Definitions for creating an external data share shortcut.

    All required parameters must be populated in order to send to server.

    :ivar path_id: Unique identifier of the target path, as returned by
     'GetExternalDataShareInvitationDetails' operation. Required.
    :vartype path_id: str
    :ivar shortcut_name: Name of the shortcut. Required.
    :vartype shortcut_name: str
    """

    _validation = {
        "path_id": {"required": True},
        "shortcut_name": {"required": True},
    }

    _attribute_map = {
        "path_id": {"key": "pathId", "type": "str"},
        "shortcut_name": {"key": "shortcutName", "type": "str"},
    }

    def __init__(self, *, path_id: str, shortcut_name: str, **kwargs: Any) -> None:
        """
        :keyword path_id: Unique identifier of the target path, as returned by
         'GetExternalDataShareInvitationDetails' operation. Required.
        :paramtype path_id: str
        :keyword shortcut_name: Name of the shortcut. Required.
        :paramtype shortcut_name: str
        """
        super().__init__(**kwargs)
        self.path_id = path_id
        self.shortcut_name = shortcut_name


class CreateFolderRequest(_serialization.Model):
    """Create folder request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The folder display name. The name must meet `Folder name requirements
     </fabric/get-started/workspaces-folders#folder-name-requirements>`_. Required.
    :vartype display_name: str
    :ivar parent_folder_id: The parent folder ID. If not specified or null, the folder is created
     with the workspace as its parent folder.
    :vartype parent_folder_id: str
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "parent_folder_id": {"key": "parentFolderId", "type": "str"},
    }

    def __init__(self, *, display_name: str, parent_folder_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The folder display name. The name must meet `Folder name requirements
         </fabric/get-started/workspaces-folders#folder-name-requirements>`_. Required.
        :paramtype display_name: str
        :keyword parent_folder_id: The parent folder ID. If not specified or null, the folder is
         created with the workspace as its parent folder.
        :paramtype parent_folder_id: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.parent_folder_id = parent_folder_id


class CreateGatewayRequest(_serialization.Model):
    """The base object of create gateway request.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CreateVirtualNetworkGatewayRequest

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"VirtualNetwork": "CreateVirtualNetworkGatewayRequest"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class CreateItemRequest(_serialization.Model):
    """Create item request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The item display name. The display name must follow naming rules according
     to item type. Required.
    :vartype display_name: str
    :ivar description: The item description. Maximum length is 256 characters.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.core.models.ItemType
    :ivar folder_id: The folder ID. If not specified or null, the item is created with the
     workspace as its folder.
    :vartype folder_id: str
    :ivar definition: The item definition. The *Create Item* page of the relevant type indicates
     whether the definition is supported and details its structure. Use ``definition`` or
     ``creationPayload``. You can't use both at the same time.
    :vartype definition: ~microsoft.fabric.api.core.models.ItemDefinition
    :ivar creation_payload: A set of properties used to create the item. The *Create Item* page of
     the relevant type indicates whether ``creationPayload`` is supported and lists the item's
     properties. Use ``creationPayload`` or ``definition``. You can't use both at the same time.
    :vartype creation_payload: JSON
    """

    _validation = {
        "display_name": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "definition": {"key": "definition", "type": "ItemDefinition"},
        "creation_payload": {"key": "creationPayload", "type": "object"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        type: Union[str, "_models.ItemType"],
        description: Optional[str] = None,
        folder_id: Optional[str] = None,
        definition: Optional["_models.ItemDefinition"] = None,
        creation_payload: Optional[JSON] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name. The display name must follow naming rules
         according to item type. Required.
        :paramtype display_name: str
        :keyword description: The item description. Maximum length is 256 characters.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.core.models.ItemType
        :keyword folder_id: The folder ID. If not specified or null, the item is created with the
         workspace as its folder.
        :paramtype folder_id: str
        :keyword definition: The item definition. The *Create Item* page of the relevant type indicates
         whether the definition is supported and details its structure. Use ``definition`` or
         ``creationPayload``. You can't use both at the same time.
        :paramtype definition: ~microsoft.fabric.api.core.models.ItemDefinition
        :keyword creation_payload: A set of properties used to create the item. The *Create Item* page
         of the relevant type indicates whether ``creationPayload`` is supported and lists the item's
         properties. Use ``creationPayload`` or ``definition``. You can't use both at the same time.
        :paramtype creation_payload: JSON
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.type = type
        self.folder_id = folder_id
        self.definition = definition
        self.creation_payload = creation_payload


class CreateManagedPrivateEndpointRequest(_serialization.Model):
    """Create managed private endpoint request payload.

    All required parameters must be populated in order to send to server.

    :ivar name: The private endpoint name. Should not be more than 64 characters. Required.
    :vartype name: str
    :ivar target_private_link_resource_id: Resource Id of data source for which private endpoint
     needs to be created. Required.
    :vartype target_private_link_resource_id: str
    :ivar target_subresource_type: Sub-resource pointing to `Private-link resoure
     </azure/private-link/private-endpoint-overview#private-link-resource>`_. Required.
    :vartype target_subresource_type: str
    :ivar request_message: Message to approve private endpoint request. Should not be more than 140
     characters.
    :vartype request_message: str
    """

    _validation = {
        "name": {"required": True},
        "target_private_link_resource_id": {"required": True},
        "target_subresource_type": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "target_private_link_resource_id": {"key": "targetPrivateLinkResourceId", "type": "str"},
        "target_subresource_type": {"key": "targetSubresourceType", "type": "str"},
        "request_message": {"key": "requestMessage", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: str,
        target_private_link_resource_id: str,
        target_subresource_type: str,
        request_message: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The private endpoint name. Should not be more than 64 characters. Required.
        :paramtype name: str
        :keyword target_private_link_resource_id: Resource Id of data source for which private endpoint
         needs to be created. Required.
        :paramtype target_private_link_resource_id: str
        :keyword target_subresource_type: Sub-resource pointing to `Private-link resoure
         </azure/private-link/private-endpoint-overview#private-link-resource>`_. Required.
        :paramtype target_subresource_type: str
        :keyword request_message: Message to approve private endpoint request. Should not be more than
         140 characters.
        :paramtype request_message: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.target_private_link_resource_id = target_private_link_resource_id
        self.target_subresource_type = target_subresource_type
        self.request_message = request_message


class CreateOnPremisesConnectionRequest(CreateConnectionRequest):
    """CreateOnPremisesConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
     Required.
    :vartype display_name: str
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
    :ivar privacy_level: (Optional) The privacy level of the connection. When no value is passed,
     this is set to 'Organizational'. Known values are: "None", "Private", "Organizational", and
     "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar gateway_id: The object ID of the primary gateway of the on-premises gateway that the
     connection is created under. Required.
    :vartype gateway_id: str
    :ivar credential_details: The credential details of the connection. Required.
    :vartype credential_details:
     ~microsoft.fabric.api.core.models.CreateOnPremisesCredentialDetails
    """

    _validation = {
        "connectivity_type": {"required": True},
        "display_name": {"required": True},
        "connection_details": {"required": True},
        "gateway_id": {"required": True},
        "credential_details": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "CreateConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "gateway_id": {"key": "gatewayId", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "CreateOnPremisesCredentialDetails"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        connection_details: "_models.CreateConnectionDetails",
        gateway_id: str,
        credential_details: "_models.CreateOnPremisesCredentialDetails",
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
         Required.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
        :keyword privacy_level: (Optional) The privacy level of the connection. When no value is
         passed, this is set to 'Organizational'. Known values are: "None", "Private", "Organizational",
         and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword gateway_id: The object ID of the primary gateway of the on-premises gateway that the
         connection is created under. Required.
        :paramtype gateway_id: str
        :keyword credential_details: The credential details of the connection. Required.
        :paramtype credential_details:
         ~microsoft.fabric.api.core.models.CreateOnPremisesCredentialDetails
        """
        super().__init__(
            display_name=display_name, connection_details=connection_details, privacy_level=privacy_level, **kwargs
        )
        self.connectivity_type: str = "OnPremisesGateway"
        self.gateway_id = gateway_id
        self.credential_details = credential_details


class CreateOnPremisesCredentialDetails(CreateCredentialDetailsRequest):
    """The credential details input for creating an on-premises gateway connection.

    All required parameters must be populated in order to send to server.

    :ivar single_sign_on_type: (Optional) The single sign-on type of the connection. When no value
     is passed, the connection doesn't use single sign-on. Known values are: "None", "Kerberos",
     "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: (Optional) The connection encryption setting that is used during
     the test connection. When no value is passed, the connection is not encrypted. Known values
     are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
     When no value is passed, this is set to 'False'.
    :vartype skip_test_connection: bool
    :ivar credentials: The credentials of the connection. Required.
    :vartype credentials: ~microsoft.fabric.api.core.models.OnPremisesGatewayCredentials
    """

    _validation = {
        "credentials": {"required": True},
    }

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
        "credentials": {"key": "credentials", "type": "OnPremisesGatewayCredentials"},
    }

    def __init__(
        self,
        *,
        credentials: "_models.OnPremisesGatewayCredentials",
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: (Optional) The single sign-on type of the connection. When no
         value is passed, the connection doesn't use single sign-on. Known values are: "None",
         "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: (Optional) The connection encryption setting that is used
         during the test connection. When no value is passed, the connection is not encrypted. Known
         values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
         When no value is passed, this is set to 'False'.
        :paramtype skip_test_connection: bool
        :keyword credentials: The credentials of the connection. Required.
        :paramtype credentials: ~microsoft.fabric.api.core.models.OnPremisesGatewayCredentials
        """
        super().__init__(
            single_sign_on_type=single_sign_on_type,
            connection_encryption=connection_encryption,
            skip_test_connection=skip_test_connection,
            **kwargs
        )
        self.credentials = credentials


class CreateOrUpdateDataAccessRolesRequest(_serialization.Model):
    """Contains definition of Roles that are used to manage data access security and ensure that only
    authorized users can view, edit, or delete certain data. Calling this API updates role
    definitions and creates, updates, or deletes roles to match the provided payload.

    :ivar value: A list of roles that are used to manage data access security and ensure that only
     authorized users can view certain data. A role represents a set of permissions and permission
     scopes that define what actions its members are allowed to perform for the data in scope.
     Members are users or groups who have been granted the role, and they can read the data based on
     the permissions assigned to the role. For example, a member can be a Microsoft Entra ID group
     and permission scope can be a Read Action applied on the given Path to File, Folder(s) or
     Table(s) in OneLake.
    :vartype value: list[~microsoft.fabric.api.core.models.DataAccessRole]
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[DataAccessRole]"},
    }

    def __init__(self, *, value: Optional[List["_models.DataAccessRole"]] = None, **kwargs: Any) -> None:
        """
        :keyword value: A list of roles that are used to manage data access security and ensure that
         only authorized users can view certain data. A role represents a set of permissions and
         permission scopes that define what actions its members are allowed to perform for the data in
         scope. Members are users or groups who have been granted the role, and they can read the data
         based on the permissions assigned to the role. For example, a member can be a Microsoft Entra
         ID group and permission scope can be a Read Action applied on the given Path to File, Folder(s)
         or Table(s) in OneLake.
        :paramtype value: list[~microsoft.fabric.api.core.models.DataAccessRole]
        """
        super().__init__(**kwargs)
        self.value = value


class CreateScheduleRequest(_serialization.Model):
    """Create item schedule plan request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.core.models.ScheduleConfig
    """

    _validation = {
        "enabled": {"required": True},
        "configuration": {"required": True},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
    }

    def __init__(self, *, enabled: bool, configuration: "_models.ScheduleConfig", **kwargs: Any) -> None:
        """
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword configuration: The actual data contains the time/weekdays of this schedule. Required.
        :paramtype configuration: ~microsoft.fabric.api.core.models.ScheduleConfig
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class CreateShortcutRequest(_serialization.Model):
    """A shortcut creation request with an object representing a reference to another storage
    location.

    All required parameters must be populated in order to send to server.

    :ivar path: A string representing the full path where the shortcut is created, including either
     "Files" or "Tables". Required.
    :vartype path: str
    :ivar name: Name of the shortcut. Required.
    :vartype name: str
    :ivar target: An object that contains the target datasource, and it must specify exactly one of
     the supported destinations: OneLake, Amazon S3, ADLS Gen2, Google Cloud Storage, S3 compatible,
     Dataverse or Azure Blob storage. Required.
    :vartype target: ~microsoft.fabric.api.core.models.CreatableShortcutTarget
    """

    _validation = {
        "path": {"required": True},
        "name": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "target": {"key": "target", "type": "CreatableShortcutTarget"},
    }

    def __init__(self, *, path: str, name: str, target: "_models.CreatableShortcutTarget", **kwargs: Any) -> None:
        """
        :keyword path: A string representing the full path where the shortcut is created, including
         either "Files" or "Tables". Required.
        :paramtype path: str
        :keyword name: Name of the shortcut. Required.
        :paramtype name: str
        :keyword target: An object that contains the target datasource, and it must specify exactly one
         of the supported destinations: OneLake, Amazon S3, ADLS Gen2, Google Cloud Storage, S3
         compatible, Dataverse or Azure Blob storage. Required.
        :paramtype target: ~microsoft.fabric.api.core.models.CreatableShortcutTarget
        """
        super().__init__(**kwargs)
        self.path = path
        self.name = name
        self.target = target


class CreateShortcutResponse(_serialization.Model):
    """An object that contains the original shortcut request, actual shortcut creation metadata,
    status of shortcut creation and if any associated errors.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar request: An object that contains the original shortcut name and path. Required.
    :vartype request: ~microsoft.fabric.api.core.models.CreateShortcutResponseRequest
    :ivar result: An object containing the shortcut properties and created shortcut name.
    :vartype result: ~microsoft.fabric.api.core.models.Shortcut
    :ivar error: The error details in case the operation is in failed state.
    :vartype error: ~microsoft.fabric.api.core.models.ErrorResponse
    :ivar status: The status of create shortcut. Additional status may be added over time.
     Required. Known values are: "Succeeded" and "Failed".
    :vartype status: str or ~microsoft.fabric.api.core.models.Status
    """

    _validation = {
        "request": {"required": True},
        "error": {"readonly": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "request": {"key": "request", "type": "CreateShortcutResponseRequest"},
        "result": {"key": "result", "type": "Shortcut"},
        "error": {"key": "error", "type": "ErrorResponse"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        request: "_models.CreateShortcutResponseRequest",
        status: Union[str, "_models.Status"],
        result: Optional["_models.Shortcut"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword request: An object that contains the original shortcut name and path. Required.
        :paramtype request: ~microsoft.fabric.api.core.models.CreateShortcutResponseRequest
        :keyword result: An object containing the shortcut properties and created shortcut name.
        :paramtype result: ~microsoft.fabric.api.core.models.Shortcut
        :keyword status: The status of create shortcut. Additional status may be added over time.
         Required. Known values are: "Succeeded" and "Failed".
        :paramtype status: str or ~microsoft.fabric.api.core.models.Status
        """
        super().__init__(**kwargs)
        self.request = request
        self.result = result
        self.error = None
        self.status = status


class CreateShortcutResponseRequest(_serialization.Model):
    """An object that contains the original shortcut name and path.

    All required parameters must be populated in order to send to server.

    :ivar name: Name of the shortcut. Required.
    :vartype name: str
    :ivar path: A string representing the full path where the shortcut is created, including either
     "Files" or "Tables". Required.
    :vartype path: str
    """

    _validation = {
        "name": {"required": True},
        "path": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "path": {"key": "path", "type": "str"},
    }

    def __init__(self, *, name: str, path: str, **kwargs: Any) -> None:
        """
        :keyword name: Name of the shortcut. Required.
        :paramtype name: str
        :keyword path: A string representing the full path where the shortcut is created, including
         either "Files" or "Tables". Required.
        :paramtype path: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.path = path


class CreateShortcutWithTransformRequest(CreateShortcutRequest):
    """A shortcut creation request with an object representing a reference to another storage
    location.

    All required parameters must be populated in order to send to server.

    :ivar path: A string representing the full path where the shortcut is created, including either
     "Files" or "Tables". Required.
    :vartype path: str
    :ivar name: Name of the shortcut. Required.
    :vartype name: str
    :ivar target: An object that contains the target datasource, and it must specify exactly one of
     the supported destinations: OneLake, Amazon S3, ADLS Gen2, Google Cloud Storage, S3 compatible,
     Dataverse or Azure Blob storage. Required.
    :vartype target: ~microsoft.fabric.api.core.models.CreatableShortcutTarget
    :ivar transform: An object that contains the transform name and its corresponding properties to
     be applied to target data, and must specify exactly one of the supported transformations:
     CsvToDelta.
    :vartype transform: ~microsoft.fabric.api.core.models.Transform
    """

    _validation = {
        "path": {"required": True},
        "name": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "target": {"key": "target", "type": "CreatableShortcutTarget"},
        "transform": {"key": "transform", "type": "Transform"},
    }

    def __init__(
        self,
        *,
        path: str,
        name: str,
        target: "_models.CreatableShortcutTarget",
        transform: Optional["_models.Transform"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: A string representing the full path where the shortcut is created, including
         either "Files" or "Tables". Required.
        :paramtype path: str
        :keyword name: Name of the shortcut. Required.
        :paramtype name: str
        :keyword target: An object that contains the target datasource, and it must specify exactly one
         of the supported destinations: OneLake, Amazon S3, ADLS Gen2, Google Cloud Storage, S3
         compatible, Dataverse or Azure Blob storage. Required.
        :paramtype target: ~microsoft.fabric.api.core.models.CreatableShortcutTarget
        :keyword transform: An object that contains the transform name and its corresponding properties
         to be applied to target data, and must specify exactly one of the supported transformations:
         CsvToDelta.
        :paramtype transform: ~microsoft.fabric.api.core.models.Transform
        """
        super().__init__(path=path, name=name, target=target, **kwargs)
        self.transform = transform


class CreateVirtualNetworkGatewayConnectionRequest(CreateConnectionRequest):  # pylint: disable=name-too-long
    """CreateVirtualNetworkGatewayConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
     Required.
    :vartype display_name: str
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
    :ivar privacy_level: (Optional) The privacy level of the connection. When no value is passed,
     this is set to 'Organizational'. Known values are: "None", "Private", "Organizational", and
     "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar gateway_id: The object ID of the virtual network gateway that the connection is created
     under. Required.
    :vartype gateway_id: str
    :ivar credential_details: The credential details of the connection. Required.
    :vartype credential_details: ~microsoft.fabric.api.core.models.CreateCredentialDetails
    """

    _validation = {
        "connectivity_type": {"required": True},
        "display_name": {"required": True},
        "connection_details": {"required": True},
        "gateway_id": {"required": True},
        "credential_details": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "CreateConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "gateway_id": {"key": "gatewayId", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "CreateCredentialDetails"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        connection_details: "_models.CreateConnectionDetails",
        gateway_id: str,
        credential_details: "_models.CreateCredentialDetails",
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
         Required.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.CreateConnectionDetails
        :keyword privacy_level: (Optional) The privacy level of the connection. When no value is
         passed, this is set to 'Organizational'. Known values are: "None", "Private", "Organizational",
         and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword gateway_id: The object ID of the virtual network gateway that the connection is
         created under. Required.
        :paramtype gateway_id: str
        :keyword credential_details: The credential details of the connection. Required.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.CreateCredentialDetails
        """
        super().__init__(
            display_name=display_name, connection_details=connection_details, privacy_level=privacy_level, **kwargs
        )
        self.connectivity_type: str = "VirtualNetworkGateway"
        self.gateway_id = gateway_id
        self.credential_details = credential_details


class CreateVirtualNetworkGatewayRequest(CreateGatewayRequest):
    """CreateVirtualNetworkGatewayRequest.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    :ivar display_name: The display name of the virtual network gateway. Maximum length is 200
     characters. Required.
    :vartype display_name: str
    :ivar capacity_id: The object ID of the Fabric license capacity. Required.
    :vartype capacity_id: str
    :ivar virtual_network_azure_resource: The Azure virtual network resource. Required.
    :vartype virtual_network_azure_resource:
     ~microsoft.fabric.api.core.models.VirtualNetworkAzureResource
    :ivar inactivity_minutes_before_sleep: The minutes of inactivity before the virtual network
     gateway goes into auto-sleep. Must be one of the following values: 30, 60, 90, 120, 150, 240,
     360, 480, 720, 1440. Required.
    :vartype inactivity_minutes_before_sleep: int
    :ivar number_of_member_gateways: The number of member gateways. A number between 1 and 7.
     Required.
    :vartype number_of_member_gateways: int
    """

    _validation = {
        "type": {"required": True},
        "display_name": {"required": True},
        "capacity_id": {"required": True},
        "virtual_network_azure_resource": {"required": True},
        "inactivity_minutes_before_sleep": {"required": True},
        "number_of_member_gateways": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "virtual_network_azure_resource": {"key": "virtualNetworkAzureResource", "type": "VirtualNetworkAzureResource"},
        "inactivity_minutes_before_sleep": {"key": "inactivityMinutesBeforeSleep", "type": "int"},
        "number_of_member_gateways": {"key": "numberOfMemberGateways", "type": "int"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        capacity_id: str,
        virtual_network_azure_resource: "_models.VirtualNetworkAzureResource",
        inactivity_minutes_before_sleep: int,
        number_of_member_gateways: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The display name of the virtual network gateway. Maximum length is 200
         characters. Required.
        :paramtype display_name: str
        :keyword capacity_id: The object ID of the Fabric license capacity. Required.
        :paramtype capacity_id: str
        :keyword virtual_network_azure_resource: The Azure virtual network resource. Required.
        :paramtype virtual_network_azure_resource:
         ~microsoft.fabric.api.core.models.VirtualNetworkAzureResource
        :keyword inactivity_minutes_before_sleep: The minutes of inactivity before the virtual network
         gateway goes into auto-sleep. Must be one of the following values: 30, 60, 90, 120, 150, 240,
         360, 480, 720, 1440. Required.
        :paramtype inactivity_minutes_before_sleep: int
        :keyword number_of_member_gateways: The number of member gateways. A number between 1 and 7.
         Required.
        :paramtype number_of_member_gateways: int
        """
        super().__init__(**kwargs)
        self.type: str = "VirtualNetwork"
        self.display_name = display_name
        self.capacity_id = capacity_id
        self.virtual_network_azure_resource = virtual_network_azure_resource
        self.inactivity_minutes_before_sleep = inactivity_minutes_before_sleep
        self.number_of_member_gateways = number_of_member_gateways


class CreateWorkspaceRequest(_serialization.Model):
    """Create workspace request payload.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The workspace display name.:code:`<br>`The display name cannot contain more
     than 256 characters.:code:`<br>`Only unused workspace names are allowed.:code:`<br>`"Admin
     monitoring" is a reserved workspace name. Required.
    :vartype display_name: str
    :ivar description: The workspace description.:code:`<br>`The description cannot contain more
     than 4000 characters.
    :vartype description: str
    :ivar capacity_id: The ID of the capacity to assign the workspace to.
    :vartype capacity_id: str
    :ivar domain_id: The ID of the domain to assign the workspace to.
    :vartype domain_id: str
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "domain_id": {"key": "domainId", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        capacity_id: Optional[str] = None,
        domain_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The workspace display name.:code:`<br>`The display name cannot contain
         more than 256 characters.:code:`<br>`Only unused workspace names are allowed.:code:`<br>`"Admin
         monitoring" is a reserved workspace name. Required.
        :paramtype display_name: str
        :keyword description: The workspace description.:code:`<br>`The description cannot contain more
         than 4000 characters.
        :paramtype description: str
        :keyword capacity_id: The ID of the capacity to assign the workspace to.
        :paramtype capacity_id: str
        :keyword domain_id: The ID of the domain to assign the workspace to.
        :paramtype domain_id: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.capacity_id = capacity_id
        self.domain_id = domain_id


class CredentialDetails(_serialization.Model):
    """The base object of credential details.

    :ivar single_sign_on_type: The single sign-on type of the connection. Known values are: "None",
     "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
     "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: The connection encryption setting that is used during the test
     connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
    :vartype skip_test_connection: bool
    """

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
    }

    def __init__(
        self,
        *,
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: The single sign-on type of the connection. Known values are:
         "None", "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: The connection encryption setting that is used during the test
         connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
        :paramtype skip_test_connection: bool
        """
        super().__init__(**kwargs)
        self.single_sign_on_type = single_sign_on_type
        self.connection_encryption = connection_encryption
        self.skip_test_connection = skip_test_connection


class ScheduleConfig(_serialization.Model):
    """Item schedule plan detail settings.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CronScheduleConfig, DailyScheduleConfig, MonthlyScheduleConfig, WeeklyScheduleConfig

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.core.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "Cron": "CronScheduleConfig",
            "Daily": "DailyScheduleConfig",
            "Monthly": "MonthlyScheduleConfig",
            "Weekly": "WeeklyScheduleConfig",
        }
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.local_time_zone_id = local_time_zone_id


class CronScheduleConfig(ScheduleConfig):
    """CronScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.core.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar interval: The time interval in minutes. A number between 1 and 5270400 (10 years).
     Required.
    :vartype interval: int
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "interval": {"required": True, "maximum": 5270400, "minimum": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "interval": {"key": "interval", "type": "int"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        interval: int,
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword interval: The time interval in minutes. A number between 1 and 5270400 (10 years).
         Required.
        :paramtype interval: int
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Cron"
        self.interval = interval


class Transform(_serialization.Model):
    """An object that contains the transform name and its corresponding properties to be applied to
    target data.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CsvToDeltaTransform

    All required parameters must be populated in order to send to server.

    :ivar type: The type of transform. Additional transform types may be added over time. Required.
     "csvToDelta"
    :vartype type: str or ~microsoft.fabric.api.core.models.TransformType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"csvToDelta": "CsvToDeltaTransform"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class CsvToDeltaTransform(Transform):
    """CSV to Delta transform.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of transform. Additional transform types may be added over time. Required.
     "csvToDelta"
    :vartype type: str or ~microsoft.fabric.api.core.models.TransformType
    :ivar properties: CSV to Delta transform properties. Required.
    :vartype properties: ~microsoft.fabric.api.core.models.CsvToDeltaTransformProperties
    """

    _validation = {
        "type": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "properties": {"key": "properties", "type": "CsvToDeltaTransformProperties"},
    }

    def __init__(self, *, properties: "_models.CsvToDeltaTransformProperties", **kwargs: Any) -> None:
        """
        :keyword properties: CSV to Delta transform properties. Required.
        :paramtype properties: ~microsoft.fabric.api.core.models.CsvToDeltaTransformProperties
        """
        super().__init__(**kwargs)
        self.type: str = "csvToDelta"
        self.properties = properties


class CsvToDeltaTransformProperties(_serialization.Model):
    """Properties for the CSV to Delta transform.

    :ivar delimiter: Specifies the character used to separate values within a row in the CSV file
     and it must specify exactly one of the supported values: ``,``\\ , ```,``\\ \\t\\ ``,``\\ |\\
     ``,``\\ &\\ ``,``\\ ;\\ ``. Default value is``\\ ,`.
    :vartype delimiter: str
    :ivar use_first_row_as_header: Whether first row of the CSV file should be used as the header.
     True - Use first row as header. False - Do not use first row as header. Default value is True.
    :vartype use_first_row_as_header: bool
    :ivar skip_files_with_errors: Whether to skip files with errors. True - Skip files with errors,
     False - Do not skip files with errors. Default value is True.
    :vartype skip_files_with_errors: bool
    """

    _attribute_map = {
        "delimiter": {"key": "delimiter", "type": "str"},
        "use_first_row_as_header": {"key": "useFirstRowAsHeader", "type": "bool"},
        "skip_files_with_errors": {"key": "skipFilesWithErrors", "type": "bool"},
    }

    def __init__(
        self,
        *,
        delimiter: str = ",",
        use_first_row_as_header: bool = True,
        skip_files_with_errors: bool = True,
        **kwargs: Any
    ) -> None:
        """
        :keyword delimiter: Specifies the character used to separate values within a row in the CSV
         file and it must specify exactly one of the supported values: ``,``\\ , ```,``\\ \\t\\ ``,``\\
         |\\ ``,``\\ &\\ ``,``\\ ;\\ ``. Default value is``\\ ,`.
        :paramtype delimiter: str
        :keyword use_first_row_as_header: Whether first row of the CSV file should be used as the
         header. True - Use first row as header. False - Do not use first row as header. Default value
         is True.
        :paramtype use_first_row_as_header: bool
        :keyword skip_files_with_errors: Whether to skip files with errors. True - Skip files with
         errors, False - Do not skip files with errors. Default value is True.
        :paramtype skip_files_with_errors: bool
        """
        super().__init__(**kwargs)
        self.delimiter = delimiter
        self.use_first_row_as_header = use_first_row_as_header
        self.skip_files_with_errors = skip_files_with_errors


class DailyScheduleConfig(ScheduleConfig):
    """DailyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.core.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "times": {"key": "times", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        times: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Daily"
        self.times = times


class DataAccessRole(_serialization.Model):
    """A Data access role represents a set of permissions and permission scopes that define what
    actions its members are allowed to perform for the data in scope. Data access roles are used to
    manage data access security and ensure that only authorized users can view, edit, or delete
    certain data. Members are users or groups who have been granted the role, and they can read the
    data based on the permissions assigned to the role. For example, a member can be an Microsoft
    Entra ID group and permission scope can be a Read Action applied on the given Path to File,
    Folder(s) or Table(s) in OneLake.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The unique id for the Data access role.
    :vartype id: str
    :ivar name: The name of the Data access role. Required.
    :vartype name: str
    :ivar decision_rules: The array of permissions that make up the Data access role. Required.
    :vartype decision_rules: list[~microsoft.fabric.api.core.models.DecisionRule]
    :ivar members: The members object which contains the members of the role as arrays of different
     member types.
    :vartype members: ~microsoft.fabric.api.core.models.Members
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"required": True},
        "decision_rules": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "decision_rules": {"key": "decisionRules", "type": "[DecisionRule]"},
        "members": {"key": "members", "type": "Members"},
    }

    def __init__(
        self,
        *,
        name: str,
        decision_rules: List["_models.DecisionRule"],
        members: Optional["_models.Members"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the Data access role. Required.
        :paramtype name: str
        :keyword decision_rules: The array of permissions that make up the Data access role. Required.
        :paramtype decision_rules: list[~microsoft.fabric.api.core.models.DecisionRule]
        :keyword members: The members object which contains the members of the role as arrays of
         different member types.
        :paramtype members: ~microsoft.fabric.api.core.models.Members
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = name
        self.decision_rules = decision_rules
        self.members = members


class DataAccessRoles(PaginatedResponse):
    """DataAccessRoles.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of roles that are used to manage data access security and ensure that only
     authorized users can view certain data. A role represents a set of permissions and permission
     scopes that define what actions its members are allowed to perform for the data in scope.
     Members are users or groups who have been granted the role, and they can read the data based on
     the permissions assigned to the role. For example, a member can be a Microsoft Entra ID group
     and permission scope can be a Read Action applied on the given Path to File, Folder(s) or
     Table(s) in OneLake. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.DataAccessRole]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DataAccessRole]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.DataAccessRole"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of roles that are used to manage data access security and ensure that
         only authorized users can view certain data. A role represents a set of permissions and
         permission scopes that define what actions its members are allowed to perform for the data in
         scope. Members are users or groups who have been granted the role, and they can read the data
         based on the permissions assigned to the role. For example, a member can be a Microsoft Entra
         ID group and permission scope can be a Read Action applied on the given Path to File, Folder(s)
         or Table(s) in OneLake. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.DataAccessRole]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class Dataverse(_serialization.Model):
    """An object containing the properties of the target Dataverse data source.

    All required parameters must be populated in order to send to server.

    :ivar environment_domain: URI that indicates the Dataverse target environment's domain name.
     The URI should be formatted as "https://[orgname].crm[xx].dynamics.com", where ``[orgname]``
     represents the name of your Dataverse organization. Required.
    :vartype environment_domain: str
    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. To find this connection ID, first `create a cloud connection
     </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
     when connecting to the Dataverse data location. Open the cloud connection's Settings view and
     copy the connection ID; this is a GUID. Required.
    :vartype connection_id: str
    :ivar delta_lake_folder: Specifies the DeltaLake folder path where the target data is stored.
     Required.
    :vartype delta_lake_folder: str
    :ivar table_name: Specifies the name of the target table in Dataverse. Required.
    :vartype table_name: str
    """

    _validation = {
        "environment_domain": {"required": True},
        "connection_id": {"required": True},
        "delta_lake_folder": {"required": True},
        "table_name": {"required": True},
    }

    _attribute_map = {
        "environment_domain": {"key": "environmentDomain", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
        "delta_lake_folder": {"key": "deltaLakeFolder", "type": "str"},
        "table_name": {"key": "tableName", "type": "str"},
    }

    def __init__(
        self, *, environment_domain: str, connection_id: str, delta_lake_folder: str, table_name: str, **kwargs: Any
    ) -> None:
        """
        :keyword environment_domain: URI that indicates the Dataverse target environment's domain name.
         The URI should be formatted as "https://[orgname].crm[xx].dynamics.com", where ``[orgname]``
         represents the name of your Dataverse organization. Required.
        :paramtype environment_domain: str
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. To find this connection ID, first `create a cloud connection
         </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
         when connecting to the Dataverse data location. Open the cloud connection's Settings view and
         copy the connection ID; this is a GUID. Required.
        :paramtype connection_id: str
        :keyword delta_lake_folder: Specifies the DeltaLake folder path where the target data is
         stored. Required.
        :paramtype delta_lake_folder: str
        :keyword table_name: Specifies the name of the target table in Dataverse. Required.
        :paramtype table_name: str
        """
        super().__init__(**kwargs)
        self.environment_domain = environment_domain
        self.connection_id = connection_id
        self.delta_lake_folder = delta_lake_folder
        self.table_name = table_name


class MonthlyOccurrence(_serialization.Model):
    """Specifies the day for triggering jobs.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DayOfMonth, OrdinalWeekday

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.core.models.OccurrenceType
    """

    _validation = {
        "occurrence_type": {"required": True},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
    }

    _subtype_map = {"occurrence_type": {"DayOfMonth": "DayOfMonth", "OrdinalWeekday": "OrdinalWeekday"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.occurrence_type: Optional[str] = None


class DayOfMonth(MonthlyOccurrence):
    """Specifies a date to trigger the job. The value must be a valid date. Otherwise, it will be
    skipped.

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.core.models.OccurrenceType
    :ivar day_of_month: Specifies a date to trigger the job, using a value between 1 and 31. For
     example, 2 means the second day of the month. The date must be valid. If an invalid date is
     provided, such as February 31st, it will automatically skip to the month that includes the 31st
     day. Required.
    :vartype day_of_month: int
    """

    _validation = {
        "occurrence_type": {"required": True},
        "day_of_month": {"required": True, "maximum": 31, "minimum": 1},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
        "day_of_month": {"key": "dayOfMonth", "type": "int"},
    }

    def __init__(self, *, day_of_month: int, **kwargs: Any) -> None:
        """
        :keyword day_of_month: Specifies a date to trigger the job, using a value between 1 and 31. For
         example, 2 means the second day of the month. The date must be valid. If an invalid date is
         provided, such as February 31st, it will automatically skip to the month that includes the 31st
         day. Required.
        :paramtype day_of_month: int
        """
        super().__init__(**kwargs)
        self.occurrence_type: str = "DayOfMonth"
        self.day_of_month = day_of_month


class DecisionRule(_serialization.Model):
    """Specifies a rule for matching the requested action. Contains effect (Permit) and Permission
    which determine whether a user or entity is authorized to perform a specific action (e.g.,
    read) on a resource. Permission is a set of scopes, defined by attributes, that must match the
    requested action for the rule to apply.

    All required parameters must be populated in order to send to server.

    :ivar effect: The effect that a role has on access to the data resource. Currently, the only
     supported effect type is ``Permit``\\ , which grants access to the resource. Additional effect
     types may be added over time. "Permit"
    :vartype effect: str or ~microsoft.fabric.api.core.models.Effect
    :ivar permission: The ``permission`` property is an array that specifies the scope and level of
     access for a requested action. The array must contain exactly two PermissionScope objects:
     ``Path`` and ``Action``. The ``scope`` is defined using the ``PermissionScope`` object, with
     ``attributeValueIncludedIn`` specifying either the location of the resource being accessed or
     the type of action being granted. The ``access`` refers to the level of access being granted,
     such as ``Read``. Required.
    :vartype permission: list[~microsoft.fabric.api.core.models.PermissionScope]
    :ivar constraints: Any constraints such as row or column level security that are applied to
     tables as part of this role. If not included, no constraints apply to any tables in the role.
    :vartype constraints: ~microsoft.fabric.api.core.models.DecisionRuleConstraints
    """

    _validation = {
        "permission": {"required": True, "max_items": 2, "min_items": 2},
    }

    _attribute_map = {
        "effect": {"key": "effect", "type": "str"},
        "permission": {"key": "permission", "type": "[PermissionScope]"},
        "constraints": {"key": "constraints", "type": "DecisionRuleConstraints"},
    }

    def __init__(
        self,
        *,
        permission: List["_models.PermissionScope"],
        effect: Optional[Union[str, "_models.Effect"]] = None,
        constraints: Optional["_models.DecisionRuleConstraints"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword effect: The effect that a role has on access to the data resource. Currently, the only
         supported effect type is ``Permit``\\ , which grants access to the resource. Additional effect
         types may be added over time. "Permit"
        :paramtype effect: str or ~microsoft.fabric.api.core.models.Effect
        :keyword permission: The ``permission`` property is an array that specifies the scope and level
         of access for a requested action. The array must contain exactly two PermissionScope objects:
         ``Path`` and ``Action``. The ``scope`` is defined using the ``PermissionScope`` object, with
         ``attributeValueIncludedIn`` specifying either the location of the resource being accessed or
         the type of action being granted. The ``access`` refers to the level of access being granted,
         such as ``Read``. Required.
        :paramtype permission: list[~microsoft.fabric.api.core.models.PermissionScope]
        :keyword constraints: Any constraints such as row or column level security that are applied to
         tables as part of this role. If not included, no constraints apply to any tables in the role.
        :paramtype constraints: ~microsoft.fabric.api.core.models.DecisionRuleConstraints
        """
        super().__init__(**kwargs)
        self.effect = effect
        self.permission = permission
        self.constraints = constraints


class DecisionRuleConstraints(_serialization.Model):
    """Any constraints such as row or column level security that are applied to tables as part of this
    role. If not included, no constraints apply to any tables in the role.

    :ivar columns: The array of column constraints applied to one or more tables in the data access
     role.
    :vartype columns: list[~microsoft.fabric.api.core.models.ColumnConstraint]
    :ivar rows: The array of row constraints applied to one or more tables in the data access role.
    :vartype rows: list[~microsoft.fabric.api.core.models.RowConstraint]
    """

    _attribute_map = {
        "columns": {"key": "columns", "type": "[ColumnConstraint]"},
        "rows": {"key": "rows", "type": "[RowConstraint]"},
    }

    def __init__(
        self,
        *,
        columns: Optional[List["_models.ColumnConstraint"]] = None,
        rows: Optional[List["_models.RowConstraint"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword columns: The array of column constraints applied to one or more tables in the data
         access role.
        :paramtype columns: list[~microsoft.fabric.api.core.models.ColumnConstraint]
        :keyword rows: The array of row constraints applied to one or more tables in the data access
         role.
        :paramtype rows: list[~microsoft.fabric.api.core.models.RowConstraint]
        """
        super().__init__(**kwargs)
        self.columns = columns
        self.rows = rows


class DeploymentExecutionPlan(_serialization.Model):
    """A deployment execution plan.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar steps: The collection of execution plan steps.
    :vartype steps: list[~microsoft.fabric.api.core.models.DeploymentExecutionStep]
    """

    _validation = {
        "steps": {"readonly": True},
    }

    _attribute_map = {
        "steps": {"key": "steps", "type": "[DeploymentExecutionStep]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.steps = None


class DeploymentExecutionStep(_serialization.Model):
    """A deployment execution step.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar index: The step index. Required.
    :vartype index: int
    :ivar description: The deployment step description. Required.
    :vartype description: str
    :ivar status: The status of the deployment pipeline operation. Additional statuses may be added
     over time. Required. Known values are: "NotStarted", "Running", "Succeeded", and "Failed".
    :vartype status: str or ~microsoft.fabric.api.core.models.DeploymentPipelineOperationStatus
    :ivar pre_deployment_diff_state: Is an item new, different or identical to items in the target
     stage before deployment. Known values are: "New", "Different", and "NoDifference".
    :vartype pre_deployment_diff_state: str or
     ~microsoft.fabric.api.core.models.ItemPreDeploymentDiffState
    :ivar source_and_target: The source and target items of the step. Required.
    :vartype source_and_target: ~microsoft.fabric.api.core.models.DeploymentSourceAndTarget
    :ivar error: The error details. Only applicable if the deployment pipeline operation failed.
    :vartype error: ~microsoft.fabric.api.core.models.ErrorResponse
    """

    _validation = {
        "index": {"required": True, "readonly": True},
        "description": {"required": True, "readonly": True},
        "status": {"required": True, "readonly": True},
        "pre_deployment_diff_state": {"readonly": True},
        "source_and_target": {"required": True, "readonly": True},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "index": {"key": "index", "type": "int"},
        "description": {"key": "description", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "pre_deployment_diff_state": {"key": "preDeploymentDiffState", "type": "str"},
        "source_and_target": {"key": "sourceAndTarget", "type": "DeploymentSourceAndTarget"},
        "error": {"key": "error", "type": "ErrorResponse"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.index = None
        self.description = None
        self.status = None
        self.pre_deployment_diff_state = None
        self.source_and_target = None
        self.error = None


class DeploymentOptions(_serialization.Model):
    """Deployment configuration options for the deployment.

    :ivar allow_cross_region_deployment: Indicates whether cross region deployment is enabled. True
     - enabled, False - disabled. Default value is false.
    :vartype allow_cross_region_deployment: bool
    """

    _attribute_map = {
        "allow_cross_region_deployment": {"key": "allowCrossRegionDeployment", "type": "bool"},
    }

    def __init__(self, *, allow_cross_region_deployment: Optional[bool] = None, **kwargs: Any) -> None:
        """
        :keyword allow_cross_region_deployment: Indicates whether cross region deployment is enabled.
         True - enabled, False - disabled. Default value is false.
        :paramtype allow_cross_region_deployment: bool
        """
        super().__init__(**kwargs)
        self.allow_cross_region_deployment = allow_cross_region_deployment


class DeploymentPipeline(_serialization.Model):
    """A Fabric deployment pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The deployment pipeline ID. Required.
    :vartype id: str
    :ivar display_name: The deployment pipeline display name. Required.
    :vartype display_name: str
    :ivar description: The deployment pipeline description.
    :vartype description: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: str, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The deployment pipeline display name. Required.
        :paramtype display_name: str
        :keyword description: The deployment pipeline description.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description


class DeploymentPipelineAssignWorkspaceRequest(_serialization.Model):
    """A request to assign a workspace to a deployment pipeline stage.

    All required parameters must be populated in order to send to server.

    :ivar workspace_id: The workspace ID. Required.
    :vartype workspace_id: str
    """

    _validation = {
        "workspace_id": {"required": True},
    }

    _attribute_map = {
        "workspace_id": {"key": "workspaceId", "type": "str"},
    }

    def __init__(self, *, workspace_id: str, **kwargs: Any) -> None:
        """
        :keyword workspace_id: The workspace ID. Required.
        :paramtype workspace_id: str
        """
        super().__init__(**kwargs)
        self.workspace_id = workspace_id


class DeploymentPipelineExtendedInfo(DeploymentPipeline):
    """A Fabric deployment pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The deployment pipeline ID. Required.
    :vartype id: str
    :ivar display_name: The deployment pipeline display name. Required.
    :vartype display_name: str
    :ivar description: The deployment pipeline description.
    :vartype description: str
    :ivar stages: The collection of deployment pipeline stages. Required.
    :vartype stages: list[~microsoft.fabric.api.core.models.DeploymentPipelineStage]
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "display_name": {"required": True},
        "stages": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "stages": {"key": "stages", "type": "[DeploymentPipelineStage]"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        stages: List["_models.DeploymentPipelineStage"],
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The deployment pipeline display name. Required.
        :paramtype display_name: str
        :keyword description: The deployment pipeline description.
        :paramtype description: str
        :keyword stages: The collection of deployment pipeline stages. Required.
        :paramtype stages: list[~microsoft.fabric.api.core.models.DeploymentPipelineStage]
        """
        super().__init__(display_name=display_name, description=description, **kwargs)
        self.stages = stages


class DeploymentPipelineNewWorkspaceConfiguration(_serialization.Model):  # pylint: disable=name-too-long
    """The configuration details for creating a new workspace. Required when deploying to a stage that
    has no assigned workspaces.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the new workspace.:code:`<br>`The display name cannot contain more than
     256 characters. Required.
    :vartype name: str
    :ivar capacity_id: The ID of the capacity that the new workspace will be assigned to. If
     unspecified and the API caller has permissions for the source stage workspace capacity, then
     that capacity will be used. Otherwise, Fabric will select a capacity that the API caller has
     permissions for.
    :vartype capacity_id: str
    """

    _validation = {
        "name": {"required": True, "max_length": 256},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
    }

    def __init__(self, *, name: str, capacity_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: The name of the new workspace.:code:`<br>`The display name cannot contain more
         than 256 characters. Required.
        :paramtype name: str
        :keyword capacity_id: The ID of the capacity that the new workspace will be assigned to. If
         unspecified and the API caller has permissions for the source stage workspace capacity, then
         that capacity will be used. Otherwise, Fabric will select a capacity that the API caller has
         permissions for.
        :paramtype capacity_id: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.capacity_id = capacity_id


class DeploymentPipelineOperation(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """A Fabric deployment pipeline operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The operation ID. Required.
    :vartype id: str
    :ivar type: The operation type. Additional types may be added over time. Required. "Deploy"
    :vartype type: str or ~microsoft.fabric.api.core.models.DeploymentPipelineOperationType
    :ivar status: The deployment pipeline operation status. Additional statuses may be added over
     time. Required. Known values are: "NotStarted", "Running", "Succeeded", and "Failed".
    :vartype status: str or ~microsoft.fabric.api.core.models.DeploymentPipelineOperationStatus
    :ivar last_updated_time: The date and time that the operation was last updated. Required.
    :vartype last_updated_time: ~datetime.datetime
    :ivar execution_start_time: The date and time that the operation started.
    :vartype execution_start_time: ~datetime.datetime
    :ivar execution_end_time: The date and time that the operation ended.
    :vartype execution_end_time: ~datetime.datetime
    :ivar source_stage_id: The ID of a source deployment pipeline stage.
    :vartype source_stage_id: str
    :ivar target_stage_id: The ID of a target deployment pipeline stage.
    :vartype target_stage_id: str
    :ivar performed_by: The principal that performed the deployment pipeline operation.
    :vartype performed_by: ~microsoft.fabric.api.core.models.Principal
    :ivar pre_deployment_diff_information: The number of deployed items in the source stage, that
     are new, identical or different to items in the target stage, before deployment.
    :vartype pre_deployment_diff_information:
     ~microsoft.fabric.api.core.models.PreDeploymentDiffInformation
    :ivar note: A note representing a description of the operation.
    :vartype note: ~microsoft.fabric.api.core.models.DeploymentPipelineOperationNote
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "type": {"required": True, "readonly": True},
        "status": {"required": True, "readonly": True},
        "last_updated_time": {"required": True, "readonly": True},
        "execution_start_time": {"readonly": True},
        "execution_end_time": {"readonly": True},
        "source_stage_id": {"readonly": True},
        "target_stage_id": {"readonly": True},
        "pre_deployment_diff_information": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "last_updated_time": {"key": "lastUpdatedTime", "type": "iso-8601"},
        "execution_start_time": {"key": "executionStartTime", "type": "iso-8601"},
        "execution_end_time": {"key": "executionEndTime", "type": "iso-8601"},
        "source_stage_id": {"key": "sourceStageId", "type": "str"},
        "target_stage_id": {"key": "targetStageId", "type": "str"},
        "performed_by": {"key": "performedBy", "type": "Principal"},
        "pre_deployment_diff_information": {
            "key": "preDeploymentDiffInformation",
            "type": "PreDeploymentDiffInformation",
        },
        "note": {"key": "note", "type": "DeploymentPipelineOperationNote"},
    }

    def __init__(
        self,
        *,
        performed_by: Optional["_models.Principal"] = None,
        note: Optional["_models.DeploymentPipelineOperationNote"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword performed_by: The principal that performed the deployment pipeline operation.
        :paramtype performed_by: ~microsoft.fabric.api.core.models.Principal
        :keyword note: A note representing a description of the operation.
        :paramtype note: ~microsoft.fabric.api.core.models.DeploymentPipelineOperationNote
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.status = None
        self.last_updated_time = None
        self.execution_start_time = None
        self.execution_end_time = None
        self.source_stage_id = None
        self.target_stage_id = None
        self.performed_by = performed_by
        self.pre_deployment_diff_information = None
        self.note = note


class DeploymentPipelineOperationExtendedInfo(
    DeploymentPipelineOperation
):  # pylint: disable=too-many-instance-attributes
    """A Fabric deployment pipeline operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The operation ID. Required.
    :vartype id: str
    :ivar type: The operation type. Additional types may be added over time. Required. "Deploy"
    :vartype type: str or ~microsoft.fabric.api.core.models.DeploymentPipelineOperationType
    :ivar status: The deployment pipeline operation status. Additional statuses may be added over
     time. Required. Known values are: "NotStarted", "Running", "Succeeded", and "Failed".
    :vartype status: str or ~microsoft.fabric.api.core.models.DeploymentPipelineOperationStatus
    :ivar last_updated_time: The date and time that the operation was last updated. Required.
    :vartype last_updated_time: ~datetime.datetime
    :ivar execution_start_time: The date and time that the operation started.
    :vartype execution_start_time: ~datetime.datetime
    :ivar execution_end_time: The date and time that the operation ended.
    :vartype execution_end_time: ~datetime.datetime
    :ivar source_stage_id: The ID of a source deployment pipeline stage.
    :vartype source_stage_id: str
    :ivar target_stage_id: The ID of a target deployment pipeline stage.
    :vartype target_stage_id: str
    :ivar performed_by: The principal that performed the deployment pipeline operation.
    :vartype performed_by: ~microsoft.fabric.api.core.models.Principal
    :ivar pre_deployment_diff_information: The number of deployed items in the source stage, that
     are new, identical or different to items in the target stage, before deployment.
    :vartype pre_deployment_diff_information:
     ~microsoft.fabric.api.core.models.PreDeploymentDiffInformation
    :ivar note: A note representing a description of the operation.
    :vartype note: ~microsoft.fabric.api.core.models.DeploymentPipelineOperationNote
    :ivar execution_plan: The deployment execution plan.
    :vartype execution_plan: ~microsoft.fabric.api.core.models.DeploymentExecutionPlan
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "type": {"required": True, "readonly": True},
        "status": {"required": True, "readonly": True},
        "last_updated_time": {"required": True, "readonly": True},
        "execution_start_time": {"readonly": True},
        "execution_end_time": {"readonly": True},
        "source_stage_id": {"readonly": True},
        "target_stage_id": {"readonly": True},
        "pre_deployment_diff_information": {"readonly": True},
        "execution_plan": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "last_updated_time": {"key": "lastUpdatedTime", "type": "iso-8601"},
        "execution_start_time": {"key": "executionStartTime", "type": "iso-8601"},
        "execution_end_time": {"key": "executionEndTime", "type": "iso-8601"},
        "source_stage_id": {"key": "sourceStageId", "type": "str"},
        "target_stage_id": {"key": "targetStageId", "type": "str"},
        "performed_by": {"key": "performedBy", "type": "Principal"},
        "pre_deployment_diff_information": {
            "key": "preDeploymentDiffInformation",
            "type": "PreDeploymentDiffInformation",
        },
        "note": {"key": "note", "type": "DeploymentPipelineOperationNote"},
        "execution_plan": {"key": "executionPlan", "type": "DeploymentExecutionPlan"},
    }

    def __init__(
        self,
        *,
        performed_by: Optional["_models.Principal"] = None,
        note: Optional["_models.DeploymentPipelineOperationNote"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword performed_by: The principal that performed the deployment pipeline operation.
        :paramtype performed_by: ~microsoft.fabric.api.core.models.Principal
        :keyword note: A note representing a description of the operation.
        :paramtype note: ~microsoft.fabric.api.core.models.DeploymentPipelineOperationNote
        """
        super().__init__(performed_by=performed_by, note=note, **kwargs)
        self.execution_plan = None


class DeploymentPipelineOperationNote(_serialization.Model):
    """A note describing the deployment.

    All required parameters must be populated in order to send to server.

    :ivar content: Text describing the deployment. Required.
    :vartype content: str
    :ivar is_truncated: Indicates whether the note content is truncated. True - the note content is
     truncated, False - the note content isn't truncated. Default value is false.
    :vartype is_truncated: bool
    """

    _validation = {
        "content": {"required": True},
    }

    _attribute_map = {
        "content": {"key": "content", "type": "str"},
        "is_truncated": {"key": "isTruncated", "type": "bool"},
    }

    def __init__(self, *, content: str, is_truncated: Optional[bool] = None, **kwargs: Any) -> None:
        """
        :keyword content: Text describing the deployment. Required.
        :paramtype content: str
        :keyword is_truncated: Indicates whether the note content is truncated. True - the note content
         is truncated, False - the note content isn't truncated. Default value is false.
        :paramtype is_truncated: bool
        """
        super().__init__(**kwargs)
        self.content = content
        self.is_truncated = is_truncated


class DeploymentPipelineOperations(PaginatedResponse):
    """A collection of Fabric deployment pipeline operations.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: The collection of deployment pipeline operations.
    :vartype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineOperation]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DeploymentPipelineOperation]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.DeploymentPipelineOperation"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: The collection of deployment pipeline operations.
        :paramtype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineOperation]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class DeploymentPipelineRequestBase(_serialization.Model):
    """A request to update an existing deployment pipeline or creating a new one. A display name
    and/or a description is required.

    :ivar display_name: The display name for the deployment pipeline.:code:`<br>`The display name
     cannot contain more than 256 characters.
    :vartype display_name: str
    :ivar description: The description for the deployment pipeline.:code:`<br>`The description
     cannot contain more than 1024 characters.
    :vartype description: str
    """

    _validation = {
        "display_name": {"max_length": 256},
        "description": {"max_length": 1024},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The display name for the deployment pipeline.:code:`<br>`The display
         name cannot contain more than 256 characters.
        :paramtype display_name: str
        :keyword description: The description for the deployment pipeline.:code:`<br>`The description
         cannot contain more than 1024 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class DeploymentPipelineRoleAssignment(_serialization.Model):
    """A Fabric principal role assignment for a deployment pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The deployment pipeline role assignment ID. Required.
    :vartype id: str
    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The deployment pipeline role of the principal. Required. "Admin"
    :vartype role: str or ~microsoft.fabric.api.core.models.DeploymentPipelineRole
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "principal": {"required": True, "readonly": True},
        "role": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.principal = None
        self.role = None


class DeploymentPipelineRoleAssignments(PaginatedResponse):
    """DeploymentPipelineRoleAssignments.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: Required.
    :vartype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineRoleAssignment]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DeploymentPipelineRoleAssignment]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.DeploymentPipelineRoleAssignment"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineRoleAssignment]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class DeploymentPipelines(PaginatedResponse):
    """A collection of Fabric deployment pipelines.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A collection of deployment pipelines.
    :vartype value: list[~microsoft.fabric.api.core.models.DeploymentPipeline]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DeploymentPipeline]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.DeploymentPipeline"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A collection of deployment pipelines.
        :paramtype value: list[~microsoft.fabric.api.core.models.DeploymentPipeline]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class DeploymentPipelineStage(_serialization.Model):
    """A Fabric deployment pipeline stage.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The deployment pipeline stage ID. Required.
    :vartype id: str
    :ivar order: The stage order, starting from zero. Required.
    :vartype order: int
    :ivar display_name: The deployment pipeline stage display name. Required.
    :vartype display_name: str
    :ivar description: The deployment pipeline stage description.
    :vartype description: str
    :ivar workspace_id: The assigned workspace ID. Only applicable when there's an assigned
     workspace.
    :vartype workspace_id: str
    :ivar workspace_name: The assigned workspace name. Only applicable when there's an assigned
     workspace and the user has access to the workspace.
    :vartype workspace_name: str
    :ivar is_public: Indicates whether the deployment pipeline stage is public. True - the stage is
     public, False - the stage isn't public.
    :vartype is_public: bool
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "order": {"required": True, "readonly": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "order": {"key": "order", "type": "int"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "workspace_name": {"key": "workspaceName", "type": "str"},
        "is_public": {"key": "isPublic", "type": "bool"},
    }

    def __init__(
        self,
        *,
        display_name: str,
        description: Optional[str] = None,
        workspace_id: Optional[str] = None,
        workspace_name: Optional[str] = None,
        is_public: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The deployment pipeline stage display name. Required.
        :paramtype display_name: str
        :keyword description: The deployment pipeline stage description.
        :paramtype description: str
        :keyword workspace_id: The assigned workspace ID. Only applicable when there's an assigned
         workspace.
        :paramtype workspace_id: str
        :keyword workspace_name: The assigned workspace name. Only applicable when there's an assigned
         workspace and the user has access to the workspace.
        :paramtype workspace_name: str
        :keyword is_public: Indicates whether the deployment pipeline stage is public. True - the stage
         is public, False - the stage isn't public.
        :paramtype is_public: bool
        """
        super().__init__(**kwargs)
        self.id = None
        self.order = None
        self.display_name = display_name
        self.description = description
        self.workspace_id = workspace_id
        self.workspace_name = workspace_name
        self.is_public = is_public


class DeploymentPipelineStageItem(_serialization.Model):
    """Fabric item metadata for a deployment pipeline stage.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar item_id: The Fabric item ID. Required.
    :vartype item_id: str
    :ivar item_type: The Fabric item type. Required. Known values are: "Dashboard", "Report",
     "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
     "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype item_type: str or ~microsoft.fabric.api.core.models.ItemType
    :ivar item_display_name: The Fabric item display name. Required.
    :vartype item_display_name: str
    :ivar source_item_id: The ID of the Fabric item from the workspace assigned to the source
     stage, which will update the current Fabric item upon deployment. Applicable only when the user
     has at least contributor access to the source stage workspace.
    :vartype source_item_id: str
    :ivar target_item_id: The ID of the Fabric item from the workspace of the target stage, which
     will be updated by the current Fabric item upon deployment. Applicable only when the user has
     at least contributor access to the target stage workspace.
    :vartype target_item_id: str
    :ivar last_deployment_time: The last deployment date and time of the Fabric item.
    :vartype last_deployment_time: ~datetime.datetime
    """

    _validation = {
        "item_id": {"required": True},
        "item_type": {"required": True},
        "item_display_name": {"required": True},
        "last_deployment_time": {"readonly": True},
    }

    _attribute_map = {
        "item_id": {"key": "itemId", "type": "str"},
        "item_type": {"key": "itemType", "type": "str"},
        "item_display_name": {"key": "itemDisplayName", "type": "str"},
        "source_item_id": {"key": "sourceItemId", "type": "str"},
        "target_item_id": {"key": "targetItemId", "type": "str"},
        "last_deployment_time": {"key": "lastDeploymentTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        item_id: str,
        item_type: Union[str, "_models.ItemType"],
        item_display_name: str,
        source_item_id: Optional[str] = None,
        target_item_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword item_id: The Fabric item ID. Required.
        :paramtype item_id: str
        :keyword item_type: The Fabric item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype item_type: str or ~microsoft.fabric.api.core.models.ItemType
        :keyword item_display_name: The Fabric item display name. Required.
        :paramtype item_display_name: str
        :keyword source_item_id: The ID of the Fabric item from the workspace assigned to the source
         stage, which will update the current Fabric item upon deployment. Applicable only when the user
         has at least contributor access to the source stage workspace.
        :paramtype source_item_id: str
        :keyword target_item_id: The ID of the Fabric item from the workspace of the target stage,
         which will be updated by the current Fabric item upon deployment. Applicable only when the user
         has at least contributor access to the target stage workspace.
        :paramtype target_item_id: str
        """
        super().__init__(**kwargs)
        self.item_id = item_id
        self.item_type = item_type
        self.item_display_name = item_display_name
        self.source_item_id = source_item_id
        self.target_item_id = target_item_id
        self.last_deployment_time = None


class DeploymentPipelineStageItems(PaginatedResponse):
    """Supported items from a workspace that's assigned to a deployment pipeline stage.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: The items collection.
    :vartype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineStageItem]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DeploymentPipelineStageItem]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.DeploymentPipelineStageItem"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: The items collection.
        :paramtype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineStageItem]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class DeploymentPipelineStageRequest(_serialization.Model):
    """A Fabric deployment pipeline stage.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The deployment pipeline stage display name.:code:`<br>`The display name
     cannot contain more than 256 characters. Required.
    :vartype display_name: str
    :ivar description: The deployment pipeline stage description.:code:`<br>`The description cannot
     contain more than 1024 characters.
    :vartype description: str
    :ivar is_public: Whether the deployment pipeline stage is public.
    :vartype is_public: bool
    """

    _validation = {
        "display_name": {"required": True, "max_length": 256},
        "description": {"max_length": 1024},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "is_public": {"key": "isPublic", "type": "bool"},
    }

    def __init__(
        self, *, display_name: str, description: Optional[str] = None, is_public: Optional[bool] = None, **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The deployment pipeline stage display name.:code:`<br>`The display name
         cannot contain more than 256 characters. Required.
        :paramtype display_name: str
        :keyword description: The deployment pipeline stage description.:code:`<br>`The description
         cannot contain more than 1024 characters.
        :paramtype description: str
        :keyword is_public: Whether the deployment pipeline stage is public.
        :paramtype is_public: bool
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.is_public = is_public


class DeploymentPipelineStages(PaginatedResponse):
    """A collection of Fabric deployment pipeline stages.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: The collection of deployment pipeline stages.
    :vartype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineStage]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[DeploymentPipelineStage]"},
    }

    def __init__(
        self,
        *,
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        value: Optional[List["_models.DeploymentPipelineStage"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: The collection of deployment pipeline stages.
        :paramtype value: list[~microsoft.fabric.api.core.models.DeploymentPipelineStage]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class DeploymentSourceAndTarget(_serialization.Model):
    """Source and target items.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar source_item_id: The ID of the Fabric item that's deployed from the source stage.
     Required.
    :vartype source_item_id: str
    :ivar source_item_display_name: The display name of the Fabric item that's deployed from the
     source stage.
    :vartype source_item_display_name: str
    :ivar target_item_id: The ID of the Fabric item that will be overwritten in the target stage.
     Only applies when overwriting a Fabric item.
    :vartype target_item_id: str
    :ivar target_item_display_name: The name of the Fabric item that will be overwritten in the
     target stage. Only applies when overwriting a Fabric item.
    :vartype target_item_display_name: str
    :ivar item_type: The type of the Fabric item that will be overwritten in the target stage. Only
     applies when overwriting a Fabric item. Known values are: "Dashboard", "Report",
     "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
     "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype item_type: str or ~microsoft.fabric.api.core.models.ItemType
    """

    _validation = {
        "source_item_id": {"required": True, "readonly": True},
        "source_item_display_name": {"readonly": True},
        "target_item_id": {"readonly": True},
        "target_item_display_name": {"readonly": True},
        "item_type": {"readonly": True},
    }

    _attribute_map = {
        "source_item_id": {"key": "sourceItemId", "type": "str"},
        "source_item_display_name": {"key": "sourceItemDisplayName", "type": "str"},
        "target_item_id": {"key": "targetItemId", "type": "str"},
        "target_item_display_name": {"key": "targetItemDisplayName", "type": "str"},
        "item_type": {"key": "itemType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source_item_id = None
        self.source_item_display_name = None
        self.target_item_id = None
        self.target_item_display_name = None
        self.item_type = None


class DeployRequest(_serialization.Model):
    """A request to deploy items from a deployment pipeline stage to another consecutive stage.
    Deploying to a previous stage can be done only when the target stage is empty. If no items were
    specified, will deploy all supported items from the deployment pipeline stage, otherwise will
    deploy only the specified items.

    All required parameters must be populated in order to send to server.

    :ivar source_stage_id: The ID of the source stage. Required.
    :vartype source_stage_id: str
    :ivar target_stage_id: The ID of the target stage. Required.
    :vartype target_stage_id: str
    :ivar created_workspace_details: The configuration details for creating a new workspace.
     Required when deploying to a stage that has no assigned workspaces, otherwise it is ignored.
     The deployment will fail if the new workspace configuration details aren't provided when
     required.
    :vartype created_workspace_details:
     ~microsoft.fabric.api.core.models.DeploymentPipelineNewWorkspaceConfiguration
    :ivar note: A note describing the deployment. The text size is limited to 1024 characters.
    :vartype note: str
    :ivar items: A list of items to be deployed. If not used, all supported stage items are
     deployed.
    :vartype items: list[~microsoft.fabric.api.core.models.ItemDeploymentRequest]
    :ivar options: Deployment options that control the behavior of the deployment.
    :vartype options: ~microsoft.fabric.api.core.models.DeploymentOptions
    """

    _validation = {
        "source_stage_id": {"required": True},
        "target_stage_id": {"required": True},
        "note": {"max_length": 1024},
    }

    _attribute_map = {
        "source_stage_id": {"key": "sourceStageId", "type": "str"},
        "target_stage_id": {"key": "targetStageId", "type": "str"},
        "created_workspace_details": {
            "key": "createdWorkspaceDetails",
            "type": "DeploymentPipelineNewWorkspaceConfiguration",
        },
        "note": {"key": "note", "type": "str"},
        "items": {"key": "items", "type": "[ItemDeploymentRequest]"},
        "options": {"key": "options", "type": "DeploymentOptions"},
    }

    def __init__(
        self,
        *,
        source_stage_id: str,
        target_stage_id: str,
        created_workspace_details: Optional["_models.DeploymentPipelineNewWorkspaceConfiguration"] = None,
        note: Optional[str] = None,
        items: Optional[List["_models.ItemDeploymentRequest"]] = None,
        options: Optional["_models.DeploymentOptions"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source_stage_id: The ID of the source stage. Required.
        :paramtype source_stage_id: str
        :keyword target_stage_id: The ID of the target stage. Required.
        :paramtype target_stage_id: str
        :keyword created_workspace_details: The configuration details for creating a new workspace.
         Required when deploying to a stage that has no assigned workspaces, otherwise it is ignored.
         The deployment will fail if the new workspace configuration details aren't provided when
         required.
        :paramtype created_workspace_details:
         ~microsoft.fabric.api.core.models.DeploymentPipelineNewWorkspaceConfiguration
        :keyword note: A note describing the deployment. The text size is limited to 1024 characters.
        :paramtype note: str
        :keyword items: A list of items to be deployed. If not used, all supported stage items are
         deployed.
        :paramtype items: list[~microsoft.fabric.api.core.models.ItemDeploymentRequest]
        :keyword options: Deployment options that control the behavior of the deployment.
        :paramtype options: ~microsoft.fabric.api.core.models.DeploymentOptions
        """
        super().__init__(**kwargs)
        self.source_stage_id = source_stage_id
        self.target_stage_id = target_stage_id
        self.created_workspace_details = created_workspace_details
        self.note = note
        self.items = items
        self.options = options


class Domain(_serialization.Model):
    """Represents a domain.

    All required parameters must be populated in order to send to server.

    :ivar id: The domain ID. Required.
    :vartype id: str
    :ivar display_name: The name of the domain. Required.
    :vartype display_name: str
    :ivar description: The description of the domain. Required.
    :vartype description: str
    :ivar parent_domain_id: The parent domain ID, for a subdomain.
    :vartype parent_domain_id: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
        "description": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "parent_domain_id": {"key": "parentDomainId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        description: str,
        parent_domain_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The domain ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the domain. Required.
        :paramtype display_name: str
        :keyword description: The description of the domain. Required.
        :paramtype description: str
        :keyword parent_domain_id: The parent domain ID, for a subdomain.
        :paramtype parent_domain_id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.description = description
        self.parent_domain_id = parent_domain_id


class Domains(PaginatedResponse):
    """A response wrapper for a list of domains.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: An array of domains. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Domain]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Domain]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Domain"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: An array of domains. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Domain]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class TagScope(_serialization.Model):
    """Represents a tag scope.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DomainTagScope, TenantTagScope

    All required parameters must be populated in order to send to server.

    :ivar type: Denotes tag scope. Additional tag scopes may be added over time. Required. Known
     values are: "Tenant" and "Domain".
    :vartype type: str or ~microsoft.fabric.api.core.models.TagScopeType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {"type": {"Domain": "DomainTagScope", "Tenant": "TenantTagScope"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class DomainTagScope(TagScope):
    """Represents domain tag scope.

    All required parameters must be populated in order to send to server.

    :ivar type: Denotes tag scope. Additional tag scopes may be added over time. Required. Known
     values are: "Tenant" and "Domain".
    :vartype type: str or ~microsoft.fabric.api.core.models.TagScopeType
    :ivar domain_id: Domain object ID. Required.
    :vartype domain_id: str
    """

    _validation = {
        "type": {"required": True},
        "domain_id": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "domain_id": {"key": "domainId", "type": "str"},
    }

    def __init__(self, *, domain_id: str, **kwargs: Any) -> None:
        """
        :keyword domain_id: Domain object ID. Required.
        :paramtype domain_id: str
        """
        super().__init__(**kwargs)
        self.type: str = "Domain"
        self.domain_id = domain_id


class ErrorRelatedResource(_serialization.Model):
    """The error related resource details object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar resource_id: The resource ID that's involved in the error. Required.
    :vartype resource_id: str
    :ivar resource_type: The type of the resource that's involved in the error. Required.
    :vartype resource_type: str
    """

    _validation = {
        "resource_id": {"required": True, "readonly": True},
        "resource_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_type = None


class ErrorResponseDetails(_serialization.Model):
    """The error response details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.core.models.ErrorRelatedResource
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.error_code = None
        self.message = None
        self.related_resource = None


class ErrorResponse(ErrorResponseDetails):
    """The error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar error_code: A specific identifier that provides information about an error condition,
     allowing for standardized communication between our service and its users. Required.
    :vartype error_code: str
    :ivar message: A human readable representation of the error. Required.
    :vartype message: str
    :ivar related_resource: The error related resource details.
    :vartype related_resource: ~microsoft.fabric.api.core.models.ErrorRelatedResource
    :ivar request_id: ID of the request associated with the error.
    :vartype request_id: str
    :ivar more_details: List of additional error details.
    :vartype more_details: list[~microsoft.fabric.api.core.models.ErrorResponseDetails]
    """

    _validation = {
        "error_code": {"required": True, "readonly": True},
        "message": {"required": True, "readonly": True},
        "related_resource": {"readonly": True},
        "request_id": {"readonly": True},
        "more_details": {"readonly": True},
    }

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "related_resource": {"key": "relatedResource", "type": "ErrorRelatedResource"},
        "request_id": {"key": "requestId", "type": "str"},
        "more_details": {"key": "moreDetails", "type": "[ErrorResponseDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.request_id = None
        self.more_details = None


class ExternalDataShare(_serialization.Model):
    """An external data share object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The external data share ID. Required.
    :vartype id: str
    :ivar paths: The path or list of paths that are externally shared. Required.
    :vartype paths: list[str]
    :ivar creator_principal: The principal that created the external data share. Required.
    :vartype creator_principal: ~microsoft.fabric.api.core.models.Principal
    :ivar recipient: The recipient who was invited to accept the external data share. Required.
    :vartype recipient: ~microsoft.fabric.api.core.models.ExternalDataShareRecipient
    :ivar status: The status of the external data share. Required. Known values are: "Pending",
     "Active", "Revoked", and "InvitationExpired".
    :vartype status: str or ~microsoft.fabric.api.core.models.ExternalDataShareStatus
    :ivar expiration_time_utc: The expiration date and time (UTC) of the invitation to the external
     data share.
    :vartype expiration_time_utc: ~datetime.datetime
    :ivar workspace_id: The workspace ID. Required.
    :vartype workspace_id: str
    :ivar item_id: The item ID. Required.
    :vartype item_id: str
    :ivar invitation_url: The URL for accepting the invitation to the external data share.
    :vartype invitation_url: str
    :ivar accepted_by_tenant_id: The tenant ID in which the external data share was accepted.
    :vartype accepted_by_tenant_id: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "paths": {"required": True, "readonly": True, "max_items": 100, "min_items": 0},
        "creator_principal": {"required": True, "readonly": True},
        "recipient": {"required": True, "readonly": True},
        "status": {"required": True, "readonly": True},
        "expiration_time_utc": {"readonly": True},
        "workspace_id": {"required": True, "readonly": True},
        "item_id": {"required": True, "readonly": True},
        "invitation_url": {"readonly": True},
        "accepted_by_tenant_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "paths": {"key": "paths", "type": "[str]"},
        "creator_principal": {"key": "creatorPrincipal", "type": "Principal"},
        "recipient": {"key": "recipient", "type": "ExternalDataShareRecipient"},
        "status": {"key": "status", "type": "str"},
        "expiration_time_utc": {"key": "expirationTimeUtc", "type": "iso-8601"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "invitation_url": {"key": "invitationUrl", "type": "str"},
        "accepted_by_tenant_id": {"key": "acceptedByTenantId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.paths = None
        self.creator_principal = None
        self.recipient = None
        self.status = None
        self.expiration_time_utc = None
        self.workspace_id = None
        self.item_id = None
        self.invitation_url = None
        self.accepted_by_tenant_id = None


class ExternalDataShareAcceptRequestPayload(_serialization.Model):
    """Payload for the Accept External Data Share invitation request.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ShortcutCreationPayload

    All required parameters must be populated in order to send to server.

    :ivar payload_type: The external data share acceptance type. Additional types may be added over
     time. Required. "ShortcutCreation"
    :vartype payload_type: str or
     ~microsoft.fabric.api.core.models.ExternalDataShareAcceptRequestPayloadType
    """

    _validation = {
        "payload_type": {"required": True},
    }

    _attribute_map = {
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    _subtype_map = {"payload_type": {"ShortcutCreation": "ShortcutCreationPayload"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.payload_type: Optional[str] = None


class ExternalDataShareInvitationDetails(_serialization.Model):
    """External data share invitation details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar provider_tenant_details: Information about the external data share's provider tenant.
     Required.
    :vartype provider_tenant_details:
     ~microsoft.fabric.api.core.models.ExternalDataShareProviderTenantDetails
    :ivar paths_details: Information about the paths included in the external data share. Required.
    :vartype paths_details: list[~microsoft.fabric.api.core.models.ExternalDataSharePathDetails]
    """

    _validation = {
        "provider_tenant_details": {"required": True, "readonly": True},
        "paths_details": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "provider_tenant_details": {"key": "providerTenantDetails", "type": "ExternalDataShareProviderTenantDetails"},
        "paths_details": {"key": "pathsDetails", "type": "[ExternalDataSharePathDetails]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider_tenant_details = None
        self.paths_details = None


class ExternalDataSharePathDetails(_serialization.Model):
    """Details of a path that was shared as part of external data sharing.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar path_id: Unique identifier of the path. Required.
    :vartype path_id: str
    :ivar type: The type of the external data share. Required. Known values are: "Folder" and
     "Table".
    :vartype type: str or ~microsoft.fabric.api.core.models.ExternalDataSharePathType
    :ivar name: The name of the content that was shared. Required.
    :vartype name: str
    """

    _validation = {
        "path_id": {"required": True, "readonly": True},
        "type": {"required": True, "readonly": True},
        "name": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "path_id": {"key": "pathId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.path_id = None
        self.type = None
        self.name = None


class ExternalDataShareProviderTenantDetails(_serialization.Model):
    """External data share's provider tenant details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar tenant_id: The provider tenant ID. Required.
    :vartype tenant_id: str
    :ivar display_name: The provider tenant display name. Required.
    :vartype display_name: str
    :ivar verified_domain_name: The provider tenant verified domain name (in Entra ID). Required.
    :vartype verified_domain_name: str
    """

    _validation = {
        "tenant_id": {"required": True, "readonly": True},
        "display_name": {"required": True, "readonly": True},
        "verified_domain_name": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "tenant_id": {"key": "tenantId", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "verified_domain_name": {"key": "verifiedDomainName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.tenant_id = None
        self.display_name = None
        self.verified_domain_name = None


class ExternalDataShareRecipient(_serialization.Model):
    """A representation of the the external data share recipient.

    All required parameters must be populated in order to send to server.

    :ivar user_principal_name: The recipient's email address. Required.
    :vartype user_principal_name: str
    :ivar tenant_id: The recipient's tenant ID.
    :vartype tenant_id: str
    """

    _validation = {
        "user_principal_name": {"required": True, "max_length": 256},
    }

    _attribute_map = {
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
    }

    def __init__(self, *, user_principal_name: str, tenant_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword user_principal_name: The recipient's email address. Required.
        :paramtype user_principal_name: str
        :keyword tenant_id: The recipient's tenant ID.
        :paramtype tenant_id: str
        """
        super().__init__(**kwargs)
        self.user_principal_name = user_principal_name
        self.tenant_id = tenant_id


class ExternalDataShares(PaginatedResponse):
    """A list of external data shares with a continuation token.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of external data shares. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ExternalDataShare]
    """

    _validation = {
        "value": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ExternalDataShare]"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = None


class ExternalDataShareShortcutInfo(_serialization.Model):
    """Information about a shortcut that was created by accepting an external data share invitation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar workspace_id: The workspace ID. Required.
    :vartype workspace_id: str
    :ivar item_id: The item ID. Required.
    :vartype item_id: str
    :ivar path: The path in which the shortcut was created. Required.
    :vartype path: str
    :ivar name: The name of the shortcut. Required.
    :vartype name: str
    """

    _validation = {
        "workspace_id": {"required": True, "readonly": True},
        "item_id": {"required": True, "readonly": True},
        "path": {"required": True, "readonly": True},
        "name": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.workspace_id = None
        self.item_id = None
        self.path = None
        self.name = None


class ExternalDataShareTarget(_serialization.Model):
    """An object containing the properties of the target external data share.

    All required parameters must be populated in order to send to server.

    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. Required.
    :vartype connection_id: str
    """

    _validation = {
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.connection_id = connection_id


class FabricItemMember(_serialization.Model):
    """Fabric item member.

    All required parameters must be populated in order to send to server.

    :ivar item_access: A list specifying the access permissions for Fabric user to have to be
     automatically included in the role members. Additional itemAccess types may be added over time.
     Required.
    :vartype item_access: list[str or ~microsoft.fabric.api.core.models.ItemAccess]
    :ivar source_path: The path to Fabric item having the specified item access. Required.
    :vartype source_path: str
    """

    _validation = {
        "item_access": {"required": True},
        "source_path": {
            "required": True,
            "pattern": r"^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?/[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$",
        },
    }

    _attribute_map = {
        "item_access": {"key": "itemAccess", "type": "[str]"},
        "source_path": {"key": "sourcePath", "type": "str"},
    }

    def __init__(self, *, item_access: List[Union[str, "_models.ItemAccess"]], source_path: str, **kwargs: Any) -> None:
        """
        :keyword item_access: A list specifying the access permissions for Fabric user to have to be
         automatically included in the role members. Additional itemAccess types may be added over time.
         Required.
        :paramtype item_access: list[str or ~microsoft.fabric.api.core.models.ItemAccess]
        :keyword source_path: The path to Fabric item having the specified item access. Required.
        :paramtype source_path: str
        """
        super().__init__(**kwargs)
        self.item_access = item_access
        self.source_path = source_path


class Folder(_serialization.Model):
    """A folder object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The folder ID.
    :vartype id: str
    :ivar display_name: The folder display name.
    :vartype display_name: str
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar parent_folder_id: The parent folder ID. If the parent folder is a workspace,
     ``parentFolderId`` is either not specified or null.
    :vartype parent_folder_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "display_name": {"readonly": True},
        "workspace_id": {"readonly": True},
        "parent_folder_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "parent_folder_id": {"key": "parentFolderId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = None
        self.workspace_id = None
        self.parent_folder_id = None


class Folders(PaginatedResponse):
    """Folders.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of folders.
    :vartype value: list[~microsoft.fabric.api.core.models.Folder]
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Folder]"},
    }

    def __init__(
        self, *, continuation_token: Optional[str] = None, continuation_uri: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = None


class Gateway(_serialization.Model):
    """The base object of gateway.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    OnPremisesGateway, OnPremisesGatewayPersonal, VirtualNetworkGateway

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the gateway. Required.
    :vartype id: str
    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    """

    _validation = {
        "id": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "OnPremises": "OnPremisesGateway",
            "OnPremisesPersonal": "OnPremisesGatewayPersonal",
            "VirtualNetwork": "VirtualNetworkGateway",
        }
    }

    def __init__(self, *, id: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The object ID of the gateway. Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.type: Optional[str] = None


class GatewayRoleAssignment(_serialization.Model):
    """The gateway role assignment for a principal.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the gateway role assignment. Required.
    :vartype id: str
    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The gateway role of the principal. Required. Known values are: "Admin",
     "ConnectionCreatorWithResharing", and "ConnectionCreator".
    :vartype role: str or ~microsoft.fabric.api.core.models.GatewayRole
    """

    _validation = {
        "id": {"required": True},
        "principal": {"required": True},
        "role": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        principal: "_models.Principal",
        role: Union[str, "_models.GatewayRole"],
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the gateway role assignment. Required.
        :paramtype id: str
        :keyword principal: The principal. Required.
        :paramtype principal: ~microsoft.fabric.api.core.models.Principal
        :keyword role: The gateway role of the principal. Required. Known values are: "Admin",
         "ConnectionCreatorWithResharing", and "ConnectionCreator".
        :paramtype role: str or ~microsoft.fabric.api.core.models.GatewayRole
        """
        super().__init__(**kwargs)
        self.id = id
        self.principal = principal
        self.role = role


class GatewayRoleAssignments(PaginatedResponse):
    """GatewayRoleAssignments.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of gateway role assignments. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.GatewayRoleAssignment]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[GatewayRoleAssignment]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.GatewayRoleAssignment"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of gateway role assignments. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.GatewayRoleAssignment]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class GitConnection(_serialization.Model):
    """Contains the Git connection details.

    :ivar git_provider_details: The Git provider details.
    :vartype git_provider_details: ~microsoft.fabric.api.core.models.GitProviderDetails
    :ivar git_sync_details: Contains the sync details.
    :vartype git_sync_details: ~microsoft.fabric.api.core.models.GitSyncDetails
    :ivar git_connection_state: Git connection state. Additional connection state types may be
     added over time. Known values are: "NotConnected", "Connected", and "ConnectedAndInitialized".
    :vartype git_connection_state: str or ~microsoft.fabric.api.core.models.GitConnectionState
    """

    _attribute_map = {
        "git_provider_details": {"key": "gitProviderDetails", "type": "GitProviderDetails"},
        "git_sync_details": {"key": "gitSyncDetails", "type": "GitSyncDetails"},
        "git_connection_state": {"key": "gitConnectionState", "type": "str"},
    }

    def __init__(
        self,
        *,
        git_provider_details: Optional["_models.GitProviderDetails"] = None,
        git_sync_details: Optional["_models.GitSyncDetails"] = None,
        git_connection_state: Optional[Union[str, "_models.GitConnectionState"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword git_provider_details: The Git provider details.
        :paramtype git_provider_details: ~microsoft.fabric.api.core.models.GitProviderDetails
        :keyword git_sync_details: Contains the sync details.
        :paramtype git_sync_details: ~microsoft.fabric.api.core.models.GitSyncDetails
        :keyword git_connection_state: Git connection state. Additional connection state types may be
         added over time. Known values are: "NotConnected", "Connected", and "ConnectedAndInitialized".
        :paramtype git_connection_state: str or ~microsoft.fabric.api.core.models.GitConnectionState
        """
        super().__init__(**kwargs)
        self.git_provider_details = git_provider_details
        self.git_sync_details = git_sync_details
        self.git_connection_state = git_connection_state


class GitConnectRequest(_serialization.Model):
    """Contains the Git connect request data.

    All required parameters must be populated in order to send to server.

    :ivar git_provider_details: The Git provider details. Required.
    :vartype git_provider_details: ~microsoft.fabric.api.core.models.GitProviderDetails
    :ivar my_git_credentials: User-specific Git credentials for authentication to the GitProvider.
     These credentials are not shared with other workspace contributors. For GitHub, this property
     is required. For AzureDevOps, this property is optional. If not set, the default is
     AutomaticGitCredentials.
    :vartype my_git_credentials: ~microsoft.fabric.api.core.models.GitCredentials
    """

    _validation = {
        "git_provider_details": {"required": True},
    }

    _attribute_map = {
        "git_provider_details": {"key": "gitProviderDetails", "type": "GitProviderDetails"},
        "my_git_credentials": {"key": "myGitCredentials", "type": "GitCredentials"},
    }

    def __init__(
        self,
        *,
        git_provider_details: "_models.GitProviderDetails",
        my_git_credentials: Optional["_models.GitCredentials"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword git_provider_details: The Git provider details. Required.
        :paramtype git_provider_details: ~microsoft.fabric.api.core.models.GitProviderDetails
        :keyword my_git_credentials: User-specific Git credentials for authentication to the
         GitProvider. These credentials are not shared with other workspace contributors. For GitHub,
         this property is required. For AzureDevOps, this property is optional. If not set, the default
         is AutomaticGitCredentials.
        :paramtype my_git_credentials: ~microsoft.fabric.api.core.models.GitCredentials
        """
        super().__init__(**kwargs)
        self.git_provider_details = git_provider_details
        self.my_git_credentials = my_git_credentials


class GitHubDetails(GitProviderDetails):
    """GitHub provider details.

    All required parameters must be populated in order to send to server.

    :ivar git_provider_type: A Git provider type. Additional provider types may be added over time.
     Required. Known values are: "AzureDevOps" and "GitHub".
    :vartype git_provider_type: str or ~microsoft.fabric.api.core.models.GitProviderType
    :ivar repository_name: The repository name. Maximum length is 128 characters. Required.
    :vartype repository_name: str
    :ivar branch_name: The branch name. Maximum length is 250 characters. Required.
    :vartype branch_name: str
    :ivar directory_name: The relative path to the directory. Maximum length is 256 characters.
     Required.
    :vartype directory_name: str
    :ivar owner_name: The owner name. Maximum length is 100 characters. Required.
    :vartype owner_name: str
    """

    _validation = {
        "git_provider_type": {"required": True},
        "repository_name": {"required": True, "max_length": 128},
        "branch_name": {"required": True, "max_length": 250},
        "directory_name": {"required": True, "max_length": 256},
        "owner_name": {"required": True, "max_length": 100},
    }

    _attribute_map = {
        "git_provider_type": {"key": "gitProviderType", "type": "str"},
        "repository_name": {"key": "repositoryName", "type": "str"},
        "branch_name": {"key": "branchName", "type": "str"},
        "directory_name": {"key": "directoryName", "type": "str"},
        "owner_name": {"key": "ownerName", "type": "str"},
    }

    def __init__(
        self, *, repository_name: str, branch_name: str, directory_name: str, owner_name: str, **kwargs: Any
    ) -> None:
        """
        :keyword repository_name: The repository name. Maximum length is 128 characters. Required.
        :paramtype repository_name: str
        :keyword branch_name: The branch name. Maximum length is 250 characters. Required.
        :paramtype branch_name: str
        :keyword directory_name: The relative path to the directory. Maximum length is 256 characters.
         Required.
        :paramtype directory_name: str
        :keyword owner_name: The owner name. Maximum length is 100 characters. Required.
        :paramtype owner_name: str
        """
        super().__init__(
            repository_name=repository_name, branch_name=branch_name, directory_name=directory_name, **kwargs
        )
        self.git_provider_type: str = "GitHub"
        self.owner_name = owner_name


class GitStatusResponse(_serialization.Model):
    """Contains the status response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar workspace_head: Full SHA hash that the workspace is synced to. Required.
    :vartype workspace_head: str
    :ivar remote_commit_hash: Remote full SHA commit hash. Required.
    :vartype remote_commit_hash: str
    :ivar changes: Required.
    :vartype changes: list[~microsoft.fabric.api.core.models.ItemChange]
    """

    _validation = {
        "workspace_head": {"required": True, "readonly": True},
        "remote_commit_hash": {"required": True, "readonly": True},
        "changes": {"required": True},
    }

    _attribute_map = {
        "workspace_head": {"key": "workspaceHead", "type": "str"},
        "remote_commit_hash": {"key": "remoteCommitHash", "type": "str"},
        "changes": {"key": "changes", "type": "[ItemChange]"},
    }

    def __init__(self, *, changes: List["_models.ItemChange"], **kwargs: Any) -> None:
        """
        :keyword changes: Required.
        :paramtype changes: list[~microsoft.fabric.api.core.models.ItemChange]
        """
        super().__init__(**kwargs)
        self.workspace_head = None
        self.remote_commit_hash = None
        self.changes = changes


class GitSyncDetails(_serialization.Model):
    """Contains the sync details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar head: The full Secure Hash Algorithm 1 (SHA-1) of the synced commit ID. Required.
    :vartype head: str
    :ivar last_sync_time: The date and time of last sync state. Required.
    :vartype last_sync_time: ~datetime.datetime
    """

    _validation = {
        "head": {"required": True, "readonly": True},
        "last_sync_time": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "head": {"key": "head", "type": "str"},
        "last_sync_time": {"key": "lastSyncTime", "type": "iso-8601"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.head = None
        self.last_sync_time = None


class GoogleCloudStorage(_serialization.Model):
    """An object containing the properties of the target Google Cloud Storage data source.

    All required parameters must be populated in order to send to server.

    :ivar location: HTTP URL that points to the target bucket in GCS. The URL should be in the
     format https://[bucket-name].storage.googleapis.com, where [bucket-name] is the name of the
     bucket you want to point to. For example: https://my-gcs-bucket.storage.googleapis.com.
     Required.
    :vartype location: str
    :ivar subpath: Specifies a target folder or subfolder within the GCS bucket. For example:
     /folder. Required.
    :vartype subpath: str
    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. Required.
    :vartype connection_id: str
    """

    _validation = {
        "location": {"required": True},
        "subpath": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "subpath": {"key": "subpath", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, location: str, subpath: str, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword location: HTTP URL that points to the target bucket in GCS. The URL should be in the
         format https://[bucket-name].storage.googleapis.com, where [bucket-name] is the name of the
         bucket you want to point to. For example: https://my-gcs-bucket.storage.googleapis.com.
         Required.
        :paramtype location: str
        :keyword subpath: Specifies a target folder or subfolder within the GCS bucket. For example:
         /folder. Required.
        :paramtype subpath: str
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.location = location
        self.subpath = subpath
        self.connection_id = connection_id


class InboundRules(_serialization.Model):
    """The policy for all inbound communications to a workspace.

    :ivar public_access_rules: The policy for inbound communications to a workspace from public
     networks.
    :vartype public_access_rules: ~microsoft.fabric.api.core.models.NetworkRules
    """

    _attribute_map = {
        "public_access_rules": {"key": "publicAccessRules", "type": "NetworkRules"},
    }

    def __init__(self, *, public_access_rules: Optional["_models.NetworkRules"] = None, **kwargs: Any) -> None:
        """
        :keyword public_access_rules: The policy for inbound communications to a workspace from public
         networks.
        :paramtype public_access_rules: ~microsoft.fabric.api.core.models.NetworkRules
        """
        super().__init__(**kwargs)
        self.public_access_rules = public_access_rules


class InitializeGitConnectionRequest(_serialization.Model):
    """Contains the initialize Git connection request data.

    :ivar initialization_strategy: The strategy required for an initialization process when content
     exists on both the remote side and the workspace side. Additional strategies may be added over
     time. Known values are: "None", "PreferRemote", and "PreferWorkspace".
    :vartype initialization_strategy: str or
     ~microsoft.fabric.api.core.models.InitializationStrategy
    """

    _attribute_map = {
        "initialization_strategy": {"key": "initializationStrategy", "type": "str"},
    }

    def __init__(
        self, *, initialization_strategy: Optional[Union[str, "_models.InitializationStrategy"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword initialization_strategy: The strategy required for an initialization process when
         content exists on both the remote side and the workspace side. Additional strategies may be
         added over time. Known values are: "None", "PreferRemote", and "PreferWorkspace".
        :paramtype initialization_strategy: str or
         ~microsoft.fabric.api.core.models.InitializationStrategy
        """
        super().__init__(**kwargs)
        self.initialization_strategy = initialization_strategy


class InitializeGitConnectionResponse(_serialization.Model):
    """Contains the initialize Git connection response data.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar required_action: Required action after the initialization process has finished.
     Additional actions may be added over time. Known values are: "None", "UpdateFromGit", and
     "CommitToGit".
    :vartype required_action: str or ~microsoft.fabric.api.core.models.RequiredAction
    :ivar workspace_head: Full SHA hash that the workspace is synced to.
    :vartype workspace_head: str
    :ivar remote_commit_hash: Remote full SHA commit hash.
    :vartype remote_commit_hash: str
    """

    _validation = {
        "required_action": {"readonly": True},
        "workspace_head": {"readonly": True},
        "remote_commit_hash": {"readonly": True},
    }

    _attribute_map = {
        "required_action": {"key": "requiredAction", "type": "str"},
        "workspace_head": {"key": "workspaceHead", "type": "str"},
        "remote_commit_hash": {"key": "remoteCommitHash", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.required_action = None
        self.workspace_head = None
        self.remote_commit_hash = None


class Item(_serialization.Model):
    """An item object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The item ID.
    :vartype id: str
    :ivar display_name: The item display name.
    :vartype display_name: str
    :ivar description: The item description.
    :vartype description: str
    :ivar type: The item type. Required. Known values are: "Dashboard", "Report", "SemanticModel",
     "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment", "KQLDatabase",
     "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype type: str or ~microsoft.fabric.api.core.models.ItemType
    :ivar workspace_id: The workspace ID.
    :vartype workspace_id: str
    :ivar folder_id: The folder ID.
    :vartype folder_id: str
    :ivar tags: List of applied tags.
    :vartype tags: list[~microsoft.fabric.api.core.models.ItemTag]
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"required": True},
        "workspace_id": {"readonly": True},
        "folder_id": {"readonly": True},
        "tags": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "folder_id": {"key": "folderId", "type": "str"},
        "tags": {"key": "tags", "type": "[ItemTag]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ItemType"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The item display name.
        :paramtype display_name: str
        :keyword description: The item description.
        :paramtype description: str
        :keyword type: The item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype type: str or ~microsoft.fabric.api.core.models.ItemType
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = description
        self.type = type
        self.workspace_id = None
        self.folder_id = None
        self.tags = None


class ItemChange(_serialization.Model):
    """Contains the item's change information.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar item_metadata: The item metadata. Required.
    :vartype item_metadata: ~microsoft.fabric.api.core.models.ItemMetadata
    :ivar remote_change: Change on the remote Git side. Known values are: "Added", "Deleted", and
     "Modified".
    :vartype remote_change: str or ~microsoft.fabric.api.core.models.ChangeType
    :ivar workspace_change: Change on the workspace side. Known values are: "Added", "Deleted", and
     "Modified".
    :vartype workspace_change: str or ~microsoft.fabric.api.core.models.ChangeType
    :ivar conflict_type: When there are changes on both the workspace side and the remote Git side.
     Required. Known values are: "None", "Conflict", and "SameChanges".
    :vartype conflict_type: str or ~microsoft.fabric.api.core.models.ConflictType
    """

    _validation = {
        "item_metadata": {"required": True, "readonly": True},
        "remote_change": {"readonly": True},
        "workspace_change": {"readonly": True},
        "conflict_type": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "item_metadata": {"key": "itemMetadata", "type": "ItemMetadata"},
        "remote_change": {"key": "remoteChange", "type": "str"},
        "workspace_change": {"key": "workspaceChange", "type": "str"},
        "conflict_type": {"key": "conflictType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.item_metadata = None
        self.remote_change = None
        self.workspace_change = None
        self.conflict_type = None


class ItemConnection(_serialization.Model):
    """ItemConnection.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection.
    :vartype id: str
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
    :vartype display_name: str
    :ivar gateway_id: The gateway object ID of the connection.
    :vartype gateway_id: str
    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
    """

    _validation = {
        "connectivity_type": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "gateway_id": {"key": "gatewayId", "type": "str"},
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "ListConnectionDetails"},
    }

    def __init__(
        self,
        *,
        connectivity_type: Union[str, "_models.ConnectivityType"],
        connection_details: "_models.ListConnectionDetails",
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        display_name: Optional[str] = None,
        gateway_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection.
        :paramtype id: str
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
        :paramtype display_name: str
        :keyword gateway_id: The gateway object ID of the connection.
        :paramtype gateway_id: str
        :keyword connectivity_type: The connectivity type of the connection. Required. Known values
         are: "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
         "VirtualNetworkGateway", "Automatic", and "None".
        :paramtype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.gateway_id = gateway_id
        self.connectivity_type = connectivity_type
        self.connection_details = connection_details


class ItemConnections(PaginatedResponse):
    """ItemConnections.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of item connections. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ItemConnection]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ItemConnection]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.ItemConnection"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of item connections. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.ItemConnection]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ItemDefinition(_serialization.Model):
    """An item definition object.

    All required parameters must be populated in order to send to server.

    :ivar format: The format of the item definition.
    :vartype format: str
    :ivar parts: A list of definition parts. Required.
    :vartype parts: list[~microsoft.fabric.api.core.models.ItemDefinitionPart]
    """

    _validation = {
        "parts": {"required": True},
    }

    _attribute_map = {
        "format": {"key": "format", "type": "str"},
        "parts": {"key": "parts", "type": "[ItemDefinitionPart]"},
    }

    def __init__(
        self, *, parts: List["_models.ItemDefinitionPart"], format: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword format: The format of the item definition.
        :paramtype format: str
        :keyword parts: A list of definition parts. Required.
        :paramtype parts: list[~microsoft.fabric.api.core.models.ItemDefinitionPart]
        """
        super().__init__(**kwargs)
        self.format = format
        self.parts = parts


class ItemDefinitionPart(_serialization.Model):
    """An item definition part object.

    All required parameters must be populated in order to send to server.

    :ivar path: The item part path. Required.
    :vartype path: str
    :ivar payload: The item part payload. Required.
    :vartype payload: str
    :ivar payload_type: The payload type. Required. "InlineBase64"
    :vartype payload_type: str or ~microsoft.fabric.api.core.models.PayloadType
    """

    _validation = {
        "path": {"required": True},
        "payload": {"required": True},
        "payload_type": {"required": True},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "payload": {"key": "payload", "type": "str"},
        "payload_type": {"key": "payloadType", "type": "str"},
    }

    def __init__(
        self, *, path: str, payload: str, payload_type: Union[str, "_models.PayloadType"], **kwargs: Any
    ) -> None:
        """
        :keyword path: The item part path. Required.
        :paramtype path: str
        :keyword payload: The item part payload. Required.
        :paramtype payload: str
        :keyword payload_type: The payload type. Required. "InlineBase64"
        :paramtype payload_type: str or ~microsoft.fabric.api.core.models.PayloadType
        """
        super().__init__(**kwargs)
        self.path = path
        self.payload = payload
        self.payload_type = payload_type


class ItemDefinitionResponse(_serialization.Model):
    """Item public definition response.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar definition: An item definition object. Required.
    :vartype definition: ~microsoft.fabric.api.core.models.ItemDefinition
    """

    _validation = {
        "definition": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "ItemDefinition"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.definition = None


class ItemDeploymentRequest(_serialization.Model):
    """A request to deploy a Fabric item (such as a report or a dashboard).

    All required parameters must be populated in order to send to server.

    :ivar source_item_id: The ID of the Fabric item to be deployed. Required.
    :vartype source_item_id: str
    :ivar item_type: The Fabric item type. Required. Known values are: "Dashboard", "Report",
     "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
     "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype item_type: str or ~microsoft.fabric.api.core.models.ItemType
    """

    _validation = {
        "source_item_id": {"required": True},
        "item_type": {"required": True},
    }

    _attribute_map = {
        "source_item_id": {"key": "sourceItemId", "type": "str"},
        "item_type": {"key": "itemType", "type": "str"},
    }

    def __init__(self, *, source_item_id: str, item_type: Union[str, "_models.ItemType"], **kwargs: Any) -> None:
        """
        :keyword source_item_id: The ID of the Fabric item to be deployed. Required.
        :paramtype source_item_id: str
        :keyword item_type: The Fabric item type. Required. Known values are: "Dashboard", "Report",
         "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
         "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
         "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
         "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
         "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
         "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
         and "UserDataFunction".
        :paramtype item_type: str or ~microsoft.fabric.api.core.models.ItemType
        """
        super().__init__(**kwargs)
        self.source_item_id = source_item_id
        self.item_type = item_type


class ItemIdentifier(_serialization.Model):
    """Contains the item identifier. At least one of the properties must be defined.

    :ivar object_id: The object ID of the item.
     When the object ID isn't available because the item was deleted from the workspace, you can
     use the logical ID.
    :vartype object_id: str
    :ivar logical_id: The logical ID of the item.
     When the logical ID isn't available because the item is not yet added to the workspace, you
     can use the object ID.
    :vartype logical_id: str
    """

    _attribute_map = {
        "object_id": {"key": "objectId", "type": "str"},
        "logical_id": {"key": "logicalId", "type": "str"},
    }

    def __init__(self, *, object_id: Optional[str] = None, logical_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword object_id: The object ID of the item.
         When the object ID isn't available because the item was deleted from the workspace, you can
         use the logical ID.
        :paramtype object_id: str
        :keyword logical_id: The logical ID of the item.
         When the logical ID isn't available because the item is not yet added to the workspace, you
         can use the object ID.
        :paramtype logical_id: str
        """
        super().__init__(**kwargs)
        self.object_id = object_id
        self.logical_id = logical_id


class ItemJobInstance(_serialization.Model):
    """An object representing item job instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Job instance Id.
    :vartype id: str
    :ivar item_id: Item Id.
    :vartype item_id: str
    :ivar job_type: Job type.
    :vartype job_type: str
    :ivar invoke_type: The item job invoke type. Additional invokeTypes may be added over time.
     Known values are: "Scheduled" and "Manual".
    :vartype invoke_type: str or ~microsoft.fabric.api.core.models.InvokeType
    :ivar status: The item job status. Additional statuses may be added over time. Known values
     are: "Succeeded" and "Failed".
    :vartype status: str or ~microsoft.fabric.api.core.models.Status
    :ivar root_activity_id: Root activity id to trace requests across services.
    :vartype root_activity_id: str
    :ivar start_time_utc: Job start time in UTC.
    :vartype start_time_utc: str
    :ivar end_time_utc: Job end time in UTC.
    :vartype end_time_utc: str
    :ivar failure_reason: Error response when job is failed.
    :vartype failure_reason: ~microsoft.fabric.api.core.models.ErrorResponse
    """

    _validation = {
        "failure_reason": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "item_id": {"key": "itemId", "type": "str"},
        "job_type": {"key": "jobType", "type": "str"},
        "invoke_type": {"key": "invokeType", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "root_activity_id": {"key": "rootActivityId", "type": "str"},
        "start_time_utc": {"key": "startTimeUtc", "type": "str"},
        "end_time_utc": {"key": "endTimeUtc", "type": "str"},
        "failure_reason": {"key": "failureReason", "type": "ErrorResponse"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        item_id: Optional[str] = None,
        job_type: Optional[str] = None,
        invoke_type: Optional[Union[str, "_models.InvokeType"]] = None,
        status: Optional[Union[str, "_models.Status"]] = None,
        root_activity_id: Optional[str] = None,
        start_time_utc: Optional[str] = None,
        end_time_utc: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Job instance Id.
        :paramtype id: str
        :keyword item_id: Item Id.
        :paramtype item_id: str
        :keyword job_type: Job type.
        :paramtype job_type: str
        :keyword invoke_type: The item job invoke type. Additional invokeTypes may be added over time.
         Known values are: "Scheduled" and "Manual".
        :paramtype invoke_type: str or ~microsoft.fabric.api.core.models.InvokeType
        :keyword status: The item job status. Additional statuses may be added over time. Known values
         are: "Succeeded" and "Failed".
        :paramtype status: str or ~microsoft.fabric.api.core.models.Status
        :keyword root_activity_id: Root activity id to trace requests across services.
        :paramtype root_activity_id: str
        :keyword start_time_utc: Job start time in UTC.
        :paramtype start_time_utc: str
        :keyword end_time_utc: Job end time in UTC.
        :paramtype end_time_utc: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.item_id = item_id
        self.job_type = job_type
        self.invoke_type = invoke_type
        self.status = status
        self.root_activity_id = root_activity_id
        self.start_time_utc = start_time_utc
        self.end_time_utc = end_time_utc
        self.failure_reason = None


class ItemJobInstances(PaginatedResponse):
    """ItemJobInstances.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of item job instances. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ItemJobInstance]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ItemJobInstance]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.ItemJobInstance"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of item job instances. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.ItemJobInstance]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ItemMetadata(_serialization.Model):
    """Contains the item metadata.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar item_identifier: The item identifier. Required.
    :vartype item_identifier: ~microsoft.fabric.api.core.models.ItemIdentifier
    :ivar item_type: The item type. Required. Known values are: "Dashboard", "Report",
     "SemanticModel", "PaginatedReport", "Datamart", "Lakehouse", "Eventhouse", "Environment",
     "KQLDatabase", "KQLQueryset", "KQLDashboard", "DataPipeline", "Notebook", "SparkJobDefinition",
     "MLExperiment", "MLModel", "Warehouse", "Eventstream", "SQLEndpoint", "MirroredWarehouse",
     "MirroredDatabase", "Reflex", "GraphQLApi", "MountedDataFactory", "ApacheAirflowJob",
     "SQLDatabase", "CopyJob", "VariableLibrary", "MirroredAzureDatabricksCatalog", "Dataflow",
     "WarehouseSnapshot", "DigitalTwinBuilder", "DigitalTwinBuilderFlow", "AnomalyDetector", "Map",
     and "UserDataFunction".
    :vartype item_type: str or ~microsoft.fabric.api.core.models.ItemType
    :ivar display_name: The display name of the item.
     Prefers the workspace item's display name if it exists, otherwise displayName uses the remote
     item's display name. Required.
    :vartype display_name: str
    """

    _validation = {
        "item_identifier": {"required": True, "readonly": True},
        "item_type": {"required": True, "readonly": True},
        "display_name": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "item_identifier": {"key": "itemIdentifier", "type": "ItemIdentifier"},
        "item_type": {"key": "itemType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.item_identifier = None
        self.item_type = None
        self.display_name = None


class Items(PaginatedResponse):
    """Items.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of items. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Item]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Item]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Item"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of items. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Item]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ItemSchedule(_serialization.Model):
    """Item schedule.

    All required parameters must be populated in order to send to server.

    :ivar id: The schedule ID. Required.
    :vartype id: str
    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar created_date_time: The created time stamp of this schedule in UTC, using the
     YYYY-MM-DDTHH:mm:ssZ format.
    :vartype created_date_time: ~datetime.datetime
    :ivar configuration: The actual data contains the time/weekdays of this schedule.
    :vartype configuration: ~microsoft.fabric.api.core.models.ScheduleConfig
    :ivar owner: The user identity that created this schedule or last modified.
    :vartype owner: ~microsoft.fabric.api.core.models.Principal
    """

    _validation = {
        "id": {"required": True},
        "enabled": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
        "owner": {"key": "owner", "type": "Principal"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        enabled: bool,
        created_date_time: Optional[datetime.datetime] = None,
        configuration: Optional["_models.ScheduleConfig"] = None,
        owner: Optional["_models.Principal"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The schedule ID. Required.
        :paramtype id: str
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword created_date_time: The created time stamp of this schedule in UTC, using the
         YYYY-MM-DDTHH:mm:ssZ format.
        :paramtype created_date_time: ~datetime.datetime
        :keyword configuration: The actual data contains the time/weekdays of this schedule.
        :paramtype configuration: ~microsoft.fabric.api.core.models.ScheduleConfig
        :keyword owner: The user identity that created this schedule or last modified.
        :paramtype owner: ~microsoft.fabric.api.core.models.Principal
        """
        super().__init__(**kwargs)
        self.id = id
        self.enabled = enabled
        self.created_date_time = created_date_time
        self.configuration = configuration
        self.owner = owner


class ItemSchedules(PaginatedResponse):
    """list of schedules for this item.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: list of schedules for this item. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ItemSchedule]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ItemSchedule]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.ItemSchedule"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: list of schedules for this item. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.ItemSchedule]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ItemTag(_serialization.Model):
    """Represents a tag applied on an item.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, id: str, display_name: str, **kwargs: Any) -> None:  # pylint: disable=redefined-builtin
        """
        :keyword id: The tag ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name


class KeyCredentials(Credentials):
    """Credentials for Key CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    :ivar key: The key. Required.
    :vartype key: str
    """

    _validation = {
        "credential_type": {"required": True},
        "key": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
        "key": {"key": "key", "type": "str"},
    }

    def __init__(self, *, key: str, **kwargs: Any) -> None:
        """
        :keyword key: The key. Required.
        :paramtype key: str
        """
        super().__init__(**kwargs)
        self.credential_type: str = "Key"
        self.key = key


class ListConnectionDetails(ConnectionDetails):
    """The connection details output for list operations.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the connection. Required.
    :vartype type: str
    :ivar path: The path of the connection. Required.
    :vartype path: str
    """

    _validation = {
        "type": {"required": True},
        "path": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "path": {"key": "path", "type": "str"},
    }

    def __init__(self, *, type: str, path: str, **kwargs: Any) -> None:
        """
        :keyword type: The type of the connection. Required.
        :paramtype type: str
        :keyword path: The path of the connection. Required.
        :paramtype path: str
        """
        super().__init__(type=type, **kwargs)
        self.path = path


class ListConnectionsResponse(PaginatedResponse):
    """ListConnectionsResponse.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of connections returned. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Connection]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Connection]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Connection"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of connections returned. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Connection]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ListCredentialDetails(CredentialDetails):
    """The credential details returned when fetching a connection.

    :ivar single_sign_on_type: The single sign-on type of the connection. Known values are: "None",
     "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
     "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: The connection encryption setting that is used during the test
     connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
    :vartype skip_test_connection: bool
    :ivar credential_type: The credential type of the connection. Known values are: "Windows",
     "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation", "SharedAccessSignature",
     "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    """

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
        "credential_type": {"key": "credentialType", "type": "str"},
    }

    def __init__(
        self,
        *,
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        credential_type: Optional[Union[str, "_models.CredentialType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: The single sign-on type of the connection. Known values are:
         "None", "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: The connection encryption setting that is used during the test
         connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
        :paramtype skip_test_connection: bool
        :keyword credential_type: The credential type of the connection. Known values are: "Windows",
         "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation", "SharedAccessSignature",
         "ServicePrincipal", and "WorkspaceIdentity".
        :paramtype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
        """
        super().__init__(
            single_sign_on_type=single_sign_on_type,
            connection_encryption=connection_encryption,
            skip_test_connection=skip_test_connection,
            **kwargs
        )
        self.credential_type = credential_type


class ListGatewayMembersResponse(PaginatedResponse):
    """ListGatewayMembersResponse.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of gateway cluster members returned. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.OnPremisesGatewayMember]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[OnPremisesGatewayMember]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.OnPremisesGatewayMember"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of gateway cluster members returned. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.OnPremisesGatewayMember]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ListGatewaysResponse(PaginatedResponse):
    """ListGatewaysResponse.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of gateways returned. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Gateway]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Gateway]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Gateway"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of gateways returned. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Gateway]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ListSupportedConnectionTypesResponse(PaginatedResponse):
    """ListSupportedConnectionTypesResponse.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of supported connection types returned. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ConnectionCreationMetadata]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ConnectionCreationMetadata]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.ConnectionCreationMetadata"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of supported connection types returned. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.ConnectionCreationMetadata]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ManagedPrivateEndpoint(_serialization.Model):
    """Managed private endpoint.

    :ivar id: Managed private endpoint Id.
    :vartype id: str
    :ivar name: The private endpoint name.
    :vartype name: str
    :ivar target_private_link_resource_id: Resource Id of data source for which private endpoint is
     created.
    :vartype target_private_link_resource_id: str
    :ivar target_subresource_type: Sub-resource pointing to `Private-link resoure
     </azure/private-link/private-endpoint-overview#private-link-resource>`_.
    :vartype target_subresource_type: str
    :ivar provisioning_state: Provisioning state of endpoint. Known values are: "Provisioning",
     "Succeeded", "Updating", "Deleting", and "Failed".
    :vartype provisioning_state: str or
     ~microsoft.fabric.api.core.models.PrivateEndpointProvisioningState
    :ivar connection_state: Endpoint connection state of provisioned endpoints.
    :vartype connection_state: ~microsoft.fabric.api.core.models.PrivateEndpointConnectionState
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "target_private_link_resource_id": {"key": "targetPrivateLinkResourceId", "type": "str"},
        "target_subresource_type": {"key": "targetSubresourceType", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "connection_state": {"key": "connectionState", "type": "PrivateEndpointConnectionState"},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        target_private_link_resource_id: Optional[str] = None,
        target_subresource_type: Optional[str] = None,
        provisioning_state: Optional[Union[str, "_models.PrivateEndpointProvisioningState"]] = None,
        connection_state: Optional["_models.PrivateEndpointConnectionState"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: Managed private endpoint Id.
        :paramtype id: str
        :keyword name: The private endpoint name.
        :paramtype name: str
        :keyword target_private_link_resource_id: Resource Id of data source for which private endpoint
         is created.
        :paramtype target_private_link_resource_id: str
        :keyword target_subresource_type: Sub-resource pointing to `Private-link resoure
         </azure/private-link/private-endpoint-overview#private-link-resource>`_.
        :paramtype target_subresource_type: str
        :keyword provisioning_state: Provisioning state of endpoint. Known values are: "Provisioning",
         "Succeeded", "Updating", "Deleting", and "Failed".
        :paramtype provisioning_state: str or
         ~microsoft.fabric.api.core.models.PrivateEndpointProvisioningState
        :keyword connection_state: Endpoint connection state of provisioned endpoints.
        :paramtype connection_state: ~microsoft.fabric.api.core.models.PrivateEndpointConnectionState
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.target_private_link_resource_id = target_private_link_resource_id
        self.target_subresource_type = target_subresource_type
        self.provisioning_state = provisioning_state
        self.connection_state = connection_state


class ManagedPrivateEndpoints(PaginatedResponse):
    """ManagedPrivateEndpoints.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of managed private endpoints. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ManagedPrivateEndpoint]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ManagedPrivateEndpoint]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.ManagedPrivateEndpoint"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of managed private endpoints. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.ManagedPrivateEndpoint]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class Members(_serialization.Model):
    """The members object which contains the members of the role as arrays of different member types.

    :ivar fabric_item_members: A list of members who have a certain permission set in Microsoft
     Fabric. All members with that permission set are added as members of this Data Access Role.
    :vartype fabric_item_members: list[~microsoft.fabric.api.core.models.FabricItemMember]
    :ivar microsoft_entra_members: The list of Microsoft Entra ID members.
    :vartype microsoft_entra_members: list[~microsoft.fabric.api.core.models.MicrosoftEntraMember]
    """

    _attribute_map = {
        "fabric_item_members": {"key": "fabricItemMembers", "type": "[FabricItemMember]"},
        "microsoft_entra_members": {"key": "microsoftEntraMembers", "type": "[MicrosoftEntraMember]"},
    }

    def __init__(
        self,
        *,
        fabric_item_members: Optional[List["_models.FabricItemMember"]] = None,
        microsoft_entra_members: Optional[List["_models.MicrosoftEntraMember"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword fabric_item_members: A list of members who have a certain permission set in Microsoft
         Fabric. All members with that permission set are added as members of this Data Access Role.
        :paramtype fabric_item_members: list[~microsoft.fabric.api.core.models.FabricItemMember]
        :keyword microsoft_entra_members: The list of Microsoft Entra ID members.
        :paramtype microsoft_entra_members:
         list[~microsoft.fabric.api.core.models.MicrosoftEntraMember]
        """
        super().__init__(**kwargs)
        self.fabric_item_members = fabric_item_members
        self.microsoft_entra_members = microsoft_entra_members


class MicrosoftEntraMember(_serialization.Model):
    """Microsoft Entra ID member assigned to the role.

    All required parameters must be populated in order to send to server.

    :ivar tenant_id: The tenant id. Required.
    :vartype tenant_id: str
    :ivar object_id: The object id. Required.
    :vartype object_id: str
    :ivar object_type: The type of Microsoft Entra ID object. Additional objectType types may be
     added over time. Known values are: "Group", "User", "ServicePrincipal", and "ManagedIdentity".
    :vartype object_type: str or ~microsoft.fabric.api.core.models.ObjectType
    """

    _validation = {
        "tenant_id": {"required": True},
        "object_id": {"required": True},
    }

    _attribute_map = {
        "tenant_id": {"key": "tenantId", "type": "str"},
        "object_id": {"key": "objectId", "type": "str"},
        "object_type": {"key": "objectType", "type": "str"},
    }

    def __init__(
        self,
        *,
        tenant_id: str,
        object_id: str,
        object_type: Optional[Union[str, "_models.ObjectType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tenant_id: The tenant id. Required.
        :paramtype tenant_id: str
        :keyword object_id: The object id. Required.
        :paramtype object_id: str
        :keyword object_type: The type of Microsoft Entra ID object. Additional objectType types may be
         added over time. Known values are: "Group", "User", "ServicePrincipal", and "ManagedIdentity".
        :paramtype object_type: str or ~microsoft.fabric.api.core.models.ObjectType
        """
        super().__init__(**kwargs)
        self.tenant_id = tenant_id
        self.object_id = object_id
        self.object_type = object_type


class MonthlyScheduleConfig(ScheduleConfig):
    """MonthlyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.core.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar recurrence: Specifies the monthly job repeat interval. For example, when set to 1 the job
     is triggered every month. Required.
    :vartype recurrence: int
    :ivar occurrence: A date for triggering the job. Required.
    :vartype occurrence: ~microsoft.fabric.api.core.models.MonthlyOccurrence
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "recurrence": {"required": True, "maximum": 12, "minimum": 1},
        "occurrence": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "recurrence": {"key": "recurrence", "type": "int"},
        "occurrence": {"key": "occurrence", "type": "MonthlyOccurrence"},
        "times": {"key": "times", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        recurrence: int,
        occurrence: "_models.MonthlyOccurrence",
        times: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword recurrence: Specifies the monthly job repeat interval. For example, when set to 1 the
         job is triggered every month. Required.
        :paramtype recurrence: int
        :keyword occurrence: A date for triggering the job. Required.
        :paramtype occurrence: ~microsoft.fabric.api.core.models.MonthlyOccurrence
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Monthly"
        self.recurrence = recurrence
        self.occurrence = occurrence
        self.times = times


class MovedItems(_serialization.Model):
    """MovedItems.

    All required parameters must be populated in order to send to server.

    :ivar value: A list of items. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Item]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Item]"},
    }

    def __init__(self, *, value: List["_models.Item"], **kwargs: Any) -> None:
        """
        :keyword value: A list of items. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Item]
        """
        super().__init__(**kwargs)
        self.value = value


class MoveFolderRequest(_serialization.Model):
    """Move folder request.

    :ivar target_folder_id: The destination folder ID. If not provided, the workspace is used as
     the destination folder.
    :vartype target_folder_id: str
    """

    _attribute_map = {
        "target_folder_id": {"key": "targetFolderId", "type": "str"},
    }

    def __init__(self, *, target_folder_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword target_folder_id: The destination folder ID. If not provided, the workspace is used as
         the destination folder.
        :paramtype target_folder_id: str
        """
        super().__init__(**kwargs)
        self.target_folder_id = target_folder_id


class MoveItemRequest(_serialization.Model):
    """Move item request.

    :ivar target_folder_id: The destination folder ID. If not provided, the workspace is used as
     the destination folder.
    :vartype target_folder_id: str
    """

    _attribute_map = {
        "target_folder_id": {"key": "targetFolderId", "type": "str"},
    }

    def __init__(self, *, target_folder_id: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword target_folder_id: The destination folder ID. If not provided, the workspace is used as
         the destination folder.
        :paramtype target_folder_id: str
        """
        super().__init__(**kwargs)
        self.target_folder_id = target_folder_id


class NetworkRules(_serialization.Model):
    """The policy defining access to/from a workspace to/from public networks.

    :ivar default_action: Default policy for workspace access from public networks. Known values
     are: "Allow" and "Deny".
    :vartype default_action: str or ~microsoft.fabric.api.core.models.NetworkAccessRule
    """

    _attribute_map = {
        "default_action": {"key": "defaultAction", "type": "str"},
    }

    def __init__(
        self, *, default_action: Optional[Union[str, "_models.NetworkAccessRule"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword default_action: Default policy for workspace access from public networks. Known values
         are: "Allow" and "Deny".
        :paramtype default_action: str or ~microsoft.fabric.api.core.models.NetworkAccessRule
        """
        super().__init__(**kwargs)
        self.default_action = default_action


class NoneGitCredentialsResponse(GitCredentialsConfigurationResponse):
    """Not configured Git credentials.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: str = "None"


class OneLake(_serialization.Model):
    """An object containing the properties of the target OneLake data source.

    All required parameters must be populated in order to send to server.

    :ivar item_id: The ID of the target in OneLake. The target can be an item of Lakehouse,
     KQLDatabase, or Warehouse. Required.
    :vartype item_id: str
    :ivar workspace_id: The ID of the target workspace. Required.
    :vartype workspace_id: str
    :ivar path: A string representing the full path to the target folder within the Item. This path
     should be relative to the root of the OneLake directory structure. For example:
     "Tables/myTablesFolder/someTableSubFolder". Required.
    :vartype path: str
    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. To find this connection ID, first `create a cloud connection
     </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
     when connecting to the Amazon S3 data location. Open the cloud connection's Settings view and
     copy the connection ID; this is a GUID.
    :vartype connection_id: str
    """

    _validation = {
        "item_id": {"required": True},
        "workspace_id": {"required": True},
        "path": {"required": True},
    }

    _attribute_map = {
        "item_id": {"key": "itemId", "type": "str"},
        "workspace_id": {"key": "workspaceId", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(
        self, *, item_id: str, workspace_id: str, path: str, connection_id: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword item_id: The ID of the target in OneLake. The target can be an item of Lakehouse,
         KQLDatabase, or Warehouse. Required.
        :paramtype item_id: str
        :keyword workspace_id: The ID of the target workspace. Required.
        :paramtype workspace_id: str
        :keyword path: A string representing the full path to the target folder within the Item. This
         path should be relative to the root of the OneLake directory structure. For example:
         "Tables/myTablesFolder/someTableSubFolder". Required.
        :paramtype path: str
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. To find this connection ID, first `create a cloud connection
         </fabric/data-factory/data-source-management#add-a-data-source>`_ to be used by the shortcut
         when connecting to the Amazon S3 data location. Open the cloud connection's Settings view and
         copy the connection ID; this is a GUID.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.item_id = item_id
        self.workspace_id = workspace_id
        self.path = path
        self.connection_id = connection_id


class OneLakeEndpoints(_serialization.Model):
    """The OneLake API endpoints associated with this workspace.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar blob_endpoint: The OneLake API endpoint available for Blob API operations. By default,
     this is a region specific endpoint. If the user enables preferWorkspaceSpecificEndpoints or the
     workspace has public access disabled, the workspace-specific endpoint is provided to allow for
     access over private links.
    :vartype blob_endpoint: str
    :ivar dfs_endpoint: The OneLake API endpoint available for Distributed File System (DFS) or
     ADLSgen2 filesystem API operations. By default, this is a region specific endpoint. If the user
     enables preferWorkspaceSpecificEndpoints or the workspace has public access disabled, the
     workspace-specific endpoint is provided to allow for access over private links.
    :vartype dfs_endpoint: str
    """

    _validation = {
        "blob_endpoint": {"readonly": True},
        "dfs_endpoint": {"readonly": True},
    }

    _attribute_map = {
        "blob_endpoint": {"key": "blobEndpoint", "type": "str"},
        "dfs_endpoint": {"key": "dfsEndpoint", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.blob_endpoint = None
        self.dfs_endpoint = None


class OnPremisesCredentialEntry(_serialization.Model):
    """A gateway ID and its encrypted serialized credentials.

    All required parameters must be populated in order to send to server.

    :ivar gateway_id: The object ID of the gateway. Required.
    :vartype gateway_id: str
    :ivar encrypted_credentials: The encrypted serialized .json of the list of name value pairs.
     Name is a credential name and value is a credential value. Encryption is performed using the
     Rivest-Shamir-Adleman (RSA) encryption algorithm with the on-premises gateway member's public
     key. Required.
    :vartype encrypted_credentials: str
    """

    _validation = {
        "gateway_id": {"required": True},
        "encrypted_credentials": {"required": True},
    }

    _attribute_map = {
        "gateway_id": {"key": "gatewayId", "type": "str"},
        "encrypted_credentials": {"key": "encryptedCredentials", "type": "str"},
    }

    def __init__(self, *, gateway_id: str, encrypted_credentials: str, **kwargs: Any) -> None:
        """
        :keyword gateway_id: The object ID of the gateway. Required.
        :paramtype gateway_id: str
        :keyword encrypted_credentials: The encrypted serialized .json of the list of name value pairs.
         Name is a credential name and value is a credential value. Encryption is performed using the
         Rivest-Shamir-Adleman (RSA) encryption algorithm with the on-premises gateway member's public
         key. Required.
        :paramtype encrypted_credentials: str
        """
        super().__init__(**kwargs)
        self.gateway_id = gateway_id
        self.encrypted_credentials = encrypted_credentials


class OnPremisesGateway(Gateway):
    """OnPremisesGateway.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the gateway. Required.
    :vartype id: str
    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    :ivar display_name: The display name of the on-premises gateway. Required.
    :vartype display_name: str
    :ivar public_key: The public key of the primary gateway member. Used to encrypt the credentials
     for creating and updating connections. Required.
    :vartype public_key: ~microsoft.fabric.api.core.models.PublicKey
    :ivar version: The version of the installed primary gateway member. Required.
    :vartype version: str
    :ivar number_of_member_gateways: The number of gateway members in the on-premises gateway.
     Required.
    :vartype number_of_member_gateways: int
    :ivar load_balancing_setting: The load balancing setting of the on-premises gateway. Required.
     Known values are: "Failover" and "DistributeEvenly".
    :vartype load_balancing_setting: str or ~microsoft.fabric.api.core.models.LoadBalancingSetting
    :ivar allow_cloud_connection_refresh: Whether to allow cloud connections to refresh through
     this on-premises gateway. True - Allow, False - Do not allow. Required.
    :vartype allow_cloud_connection_refresh: bool
    :ivar allow_custom_connectors: Whether to allow custom connectors to be used with this
     on-premises gateway. True - Allow, False - Do not allow. Required.
    :vartype allow_custom_connectors: bool
    """

    _validation = {
        "id": {"required": True},
        "type": {"required": True},
        "display_name": {"required": True},
        "public_key": {"required": True},
        "version": {"required": True},
        "number_of_member_gateways": {"required": True},
        "load_balancing_setting": {"required": True},
        "allow_cloud_connection_refresh": {"required": True},
        "allow_custom_connectors": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "public_key": {"key": "publicKey", "type": "PublicKey"},
        "version": {"key": "version", "type": "str"},
        "number_of_member_gateways": {"key": "numberOfMemberGateways", "type": "int"},
        "load_balancing_setting": {"key": "loadBalancingSetting", "type": "str"},
        "allow_cloud_connection_refresh": {"key": "allowCloudConnectionRefresh", "type": "bool"},
        "allow_custom_connectors": {"key": "allowCustomConnectors", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        public_key: "_models.PublicKey",
        version: str,
        number_of_member_gateways: int,
        load_balancing_setting: Union[str, "_models.LoadBalancingSetting"],
        allow_cloud_connection_refresh: bool,
        allow_custom_connectors: bool,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the gateway. Required.
        :paramtype id: str
        :keyword display_name: The display name of the on-premises gateway. Required.
        :paramtype display_name: str
        :keyword public_key: The public key of the primary gateway member. Used to encrypt the
         credentials for creating and updating connections. Required.
        :paramtype public_key: ~microsoft.fabric.api.core.models.PublicKey
        :keyword version: The version of the installed primary gateway member. Required.
        :paramtype version: str
        :keyword number_of_member_gateways: The number of gateway members in the on-premises gateway.
         Required.
        :paramtype number_of_member_gateways: int
        :keyword load_balancing_setting: The load balancing setting of the on-premises gateway.
         Required. Known values are: "Failover" and "DistributeEvenly".
        :paramtype load_balancing_setting: str or
         ~microsoft.fabric.api.core.models.LoadBalancingSetting
        :keyword allow_cloud_connection_refresh: Whether to allow cloud connections to refresh through
         this on-premises gateway. True - Allow, False - Do not allow. Required.
        :paramtype allow_cloud_connection_refresh: bool
        :keyword allow_custom_connectors: Whether to allow custom connectors to be used with this
         on-premises gateway. True - Allow, False - Do not allow. Required.
        :paramtype allow_custom_connectors: bool
        """
        super().__init__(id=id, **kwargs)
        self.type: str = "OnPremises"
        self.display_name = display_name
        self.public_key = public_key
        self.version = version
        self.number_of_member_gateways = number_of_member_gateways
        self.load_balancing_setting = load_balancing_setting
        self.allow_cloud_connection_refresh = allow_cloud_connection_refresh
        self.allow_custom_connectors = allow_custom_connectors


class OnPremisesGatewayConnection(Connection):
    """A connection that connects through on-premises data gateway.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection. Required.
    :vartype id: str
    :ivar display_name: The display name of the connection.
    :vartype display_name: str
    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
    :ivar gateway_id: The gateway object ID of the connection.
    :vartype gateway_id: str
    """

    _validation = {
        "id": {"required": True},
        "connectivity_type": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "ListConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "ListCredentialDetails"},
        "gateway_id": {"key": "gatewayId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        connection_details: "_models.ListConnectionDetails",
        display_name: Optional[str] = None,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.ListCredentialDetails"] = None,
        gateway_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection. Required.
        :paramtype id: str
        :keyword display_name: The display name of the connection.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
        :keyword gateway_id: The gateway object ID of the connection.
        :paramtype gateway_id: str
        """
        super().__init__(
            id=id,
            display_name=display_name,
            connection_details=connection_details,
            privacy_level=privacy_level,
            credential_details=credential_details,
            **kwargs
        )
        self.connectivity_type: str = "OnPremisesGateway"
        self.gateway_id = gateway_id


class OnPremisesGatewayCredentials(_serialization.Model):
    """Credentials for authenticating through an on-premises gateway.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    :ivar values: The credential payload to send to the on-premises gateway. Required.
    :vartype values: list[~microsoft.fabric.api.core.models.OnPremisesCredentialEntry]
    """

    _validation = {
        "credential_type": {"required": True},
        "values": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
        "values": {"key": "values", "type": "[OnPremisesCredentialEntry]"},
    }

    def __init__(
        self,
        *,
        credential_type: Union[str, "_models.CredentialType"],
        values: List["_models.OnPremisesCredentialEntry"],
        **kwargs: Any
    ) -> None:
        """
        :keyword credential_type: The credential type of the connection. Required. Known values are:
         "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
         "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
        :paramtype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
        :keyword values: The credential payload to send to the on-premises gateway. Required.
        :paramtype values: list[~microsoft.fabric.api.core.models.OnPremisesCredentialEntry]
        """
        super().__init__(**kwargs)
        self.credential_type = credential_type
        self.values = values


class OnPremisesGatewayMember(_serialization.Model):
    """The gateway member information.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the gateway member. Required.
    :vartype id: str
    :ivar display_name: The display name of the gateway member. Required.
    :vartype display_name: str
    :ivar public_key: The public key of the gateway member. Used to encrypt the credentials for
     creating and updating connections. Required.
    :vartype public_key: ~microsoft.fabric.api.core.models.PublicKey
    :ivar version: The version of the installed gateway member. Required.
    :vartype version: str
    :ivar enabled: Whether the gateway member is enabled. True - Enabled, False - Not enabled.
     Required.
    :vartype enabled: bool
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
        "public_key": {"required": True},
        "version": {"required": True},
        "enabled": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "public_key": {"key": "publicKey", "type": "PublicKey"},
        "version": {"key": "version", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        public_key: "_models.PublicKey",
        version: str,
        enabled: bool,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the gateway member. Required.
        :paramtype id: str
        :keyword display_name: The display name of the gateway member. Required.
        :paramtype display_name: str
        :keyword public_key: The public key of the gateway member. Used to encrypt the credentials for
         creating and updating connections. Required.
        :paramtype public_key: ~microsoft.fabric.api.core.models.PublicKey
        :keyword version: The version of the installed gateway member. Required.
        :paramtype version: str
        :keyword enabled: Whether the gateway member is enabled. True - Enabled, False - Not enabled.
         Required.
        :paramtype enabled: bool
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.public_key = public_key
        self.version = version
        self.enabled = enabled


class OnPremisesGatewayPersonal(Gateway):
    """OnPremisesGatewayPersonal.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the gateway. Required.
    :vartype id: str
    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    :ivar public_key: The public key of the gateway. Used to encrypt the credentials for creating
     and updating connections. Required.
    :vartype public_key: ~microsoft.fabric.api.core.models.PublicKey
    :ivar version: The version of the gateway. Required.
    :vartype version: str
    """

    _validation = {
        "id": {"required": True},
        "type": {"required": True},
        "public_key": {"required": True},
        "version": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "public_key": {"key": "publicKey", "type": "PublicKey"},
        "version": {"key": "version", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        public_key: "_models.PublicKey",
        version: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the gateway. Required.
        :paramtype id: str
        :keyword public_key: The public key of the gateway. Used to encrypt the credentials for
         creating and updating connections. Required.
        :paramtype public_key: ~microsoft.fabric.api.core.models.PublicKey
        :keyword version: The version of the gateway. Required.
        :paramtype version: str
        """
        super().__init__(id=id, **kwargs)
        self.type: str = "OnPremisesPersonal"
        self.public_key = public_key
        self.version = version


class OnPremisesGatewayPersonalConnection(Connection):
    """A connection that connects through a personal on-premises data gateway.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection. Required.
    :vartype id: str
    :ivar display_name: The display name of the connection.
    :vartype display_name: str
    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
    :ivar gateway_id: The gateway object ID of the connection.
    :vartype gateway_id: str
    """

    _validation = {
        "id": {"required": True},
        "connectivity_type": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "ListConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "ListCredentialDetails"},
        "gateway_id": {"key": "gatewayId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        connection_details: "_models.ListConnectionDetails",
        display_name: Optional[str] = None,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.ListCredentialDetails"] = None,
        gateway_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection. Required.
        :paramtype id: str
        :keyword display_name: The display name of the connection.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
        :keyword gateway_id: The gateway object ID of the connection.
        :paramtype gateway_id: str
        """
        super().__init__(
            id=id,
            display_name=display_name,
            connection_details=connection_details,
            privacy_level=privacy_level,
            credential_details=credential_details,
            **kwargs
        )
        self.connectivity_type: str = "OnPremisesGatewayPersonal"
        self.gateway_id = gateway_id


class OnPremisesGatewayPersonalCredentials(_serialization.Model):
    """Credentials for authenticating through an on-premises gateway (personal mode).

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    :ivar encrypted_credentials: The encrypted serialized .json of the list of name value pairs.
     Name is a credential name and value is a credential value. Encryption is performed using the
     Rivest-Shamir-Adleman (RSA) encryption algorithm with the on-premises gateway's public key.
     Required.
    :vartype encrypted_credentials: str
    """

    _validation = {
        "credential_type": {"required": True},
        "encrypted_credentials": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
        "encrypted_credentials": {"key": "encryptedCredentials", "type": "str"},
    }

    def __init__(
        self, *, credential_type: Union[str, "_models.CredentialType"], encrypted_credentials: str, **kwargs: Any
    ) -> None:
        """
        :keyword credential_type: The credential type of the connection. Required. Known values are:
         "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
         "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
        :paramtype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
        :keyword encrypted_credentials: The encrypted serialized .json of the list of name value pairs.
         Name is a credential name and value is a credential value. Encryption is performed using the
         Rivest-Shamir-Adleman (RSA) encryption algorithm with the on-premises gateway's public key.
         Required.
        :paramtype encrypted_credentials: str
        """
        super().__init__(**kwargs)
        self.credential_type = credential_type
        self.encrypted_credentials = encrypted_credentials


class OperationState(_serialization.Model):
    """An object describing the details and current state of a long running operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar status: The current status of the operation. Additional operation statuses may be added
     over time. Required. Known values are: "Undefined", "NotStarted", "Running", "Succeeded", and
     "Failed".
    :vartype status: str or ~microsoft.fabric.api.core.models.LongRunningOperationStatus
    :ivar created_time_utc: The start date and time of the operation. Required.
    :vartype created_time_utc: ~datetime.datetime
    :ivar last_updated_time_utc: The date and time of the last change to the operation. Required.
    :vartype last_updated_time_utc: ~datetime.datetime
    :ivar percent_complete: Operation progress as a percentage.
    :vartype percent_complete: int
    :ivar error: The error details in case the operation is in failed state.
    :vartype error: ~microsoft.fabric.api.core.models.ErrorResponse
    """

    _validation = {
        "status": {"required": True},
        "created_time_utc": {"required": True},
        "last_updated_time_utc": {"required": True},
        "percent_complete": {"maximum": 100, "minimum": 0},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "created_time_utc": {"key": "createdTimeUtc", "type": "iso-8601"},
        "last_updated_time_utc": {"key": "lastUpdatedTimeUtc", "type": "iso-8601"},
        "percent_complete": {"key": "percentComplete", "type": "int"},
        "error": {"key": "error", "type": "ErrorResponse"},
    }

    def __init__(
        self,
        *,
        status: Union[str, "_models.LongRunningOperationStatus"],
        created_time_utc: datetime.datetime,
        last_updated_time_utc: datetime.datetime,
        percent_complete: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: The current status of the operation. Additional operation statuses may be
         added over time. Required. Known values are: "Undefined", "NotStarted", "Running", "Succeeded",
         and "Failed".
        :paramtype status: str or ~microsoft.fabric.api.core.models.LongRunningOperationStatus
        :keyword created_time_utc: The start date and time of the operation. Required.
        :paramtype created_time_utc: ~datetime.datetime
        :keyword last_updated_time_utc: The date and time of the last change to the operation.
         Required.
        :paramtype last_updated_time_utc: ~datetime.datetime
        :keyword percent_complete: Operation progress as a percentage.
        :paramtype percent_complete: int
        """
        super().__init__(**kwargs)
        self.status = status
        self.created_time_utc = created_time_utc
        self.last_updated_time_utc = last_updated_time_utc
        self.percent_complete = percent_complete
        self.error = None


class OrdinalWeekday(MonthlyOccurrence):
    """Specifies the ordinal week and weekday to trigger the job. The value must be a valid date.
    Otherwise, it will be skipped.

    All required parameters must be populated in order to send to server.

    :ivar occurrence_type: An enumerator that lists the day for triggering jobs. Additional types
     may be added over time. Required. Known values are: "DayOfMonth" and "OrdinalWeekday".
    :vartype occurrence_type: str or ~microsoft.fabric.api.core.models.OccurrenceType
    :ivar week_index: The week of the month. Required. Known values are: "First", "Second",
     "Third", "Fourth", and "Fifth".
    :vartype week_index: str or ~microsoft.fabric.api.core.models.WeekIndex
    :ivar weekday: Week day for triggering jobs. Required. Known values are: "Monday", "Tuesday",
     "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
    :vartype weekday: str or ~microsoft.fabric.api.core.models.DayOfWeek
    """

    _validation = {
        "occurrence_type": {"required": True},
        "week_index": {"required": True},
        "weekday": {"required": True},
    }

    _attribute_map = {
        "occurrence_type": {"key": "occurrenceType", "type": "str"},
        "week_index": {"key": "weekIndex", "type": "str"},
        "weekday": {"key": "weekday", "type": "str"},
    }

    def __init__(
        self, *, week_index: Union[str, "_models.WeekIndex"], weekday: Union[str, "_models.DayOfWeek"], **kwargs: Any
    ) -> None:
        """
        :keyword week_index: The week of the month. Required. Known values are: "First", "Second",
         "Third", "Fourth", and "Fifth".
        :paramtype week_index: str or ~microsoft.fabric.api.core.models.WeekIndex
        :keyword weekday: Week day for triggering jobs. Required. Known values are: "Monday",
         "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", and "Sunday".
        :paramtype weekday: str or ~microsoft.fabric.api.core.models.DayOfWeek
        """
        super().__init__(**kwargs)
        self.occurrence_type: str = "OrdinalWeekday"
        self.week_index = week_index
        self.weekday = weekday


class OutboundRules(_serialization.Model):
    """The policy for all outbound communications from a workspace.

    :ivar public_access_rules: The policy for outbound communications to public networks from a
     workspace.
    :vartype public_access_rules: ~microsoft.fabric.api.core.models.NetworkRules
    """

    _attribute_map = {
        "public_access_rules": {"key": "publicAccessRules", "type": "NetworkRules"},
    }

    def __init__(self, *, public_access_rules: Optional["_models.NetworkRules"] = None, **kwargs: Any) -> None:
        """
        :keyword public_access_rules: The policy for outbound communications to public networks from a
         workspace.
        :paramtype public_access_rules: ~microsoft.fabric.api.core.models.NetworkRules
        """
        super().__init__(**kwargs)
        self.public_access_rules = public_access_rules


class PermissionScope(_serialization.Model):
    """Defines a set of attributes (properties) that determine the scope and level of access to a
    resource. When ``attributeName`` property is set to ``Path``\\ , the
    ``attributeValueIncludedIn`` property must specify the location of the resource being accessed,
    such as "Tables/Table1". When the ``attributeName`` property is set to ``Action``\\ , the
    ``attributeValueIncludedIn`` property must specify the type of access being granted, such as
    ``Read``.

    All required parameters must be populated in order to send to server.

    :ivar attribute_name: Specifies the name of the attribute that is being evaluated for access
     permissions. AttributeName can be ``Path`` or ``Action``. Additional attributeName types may be
     added over time. Required. Known values are: "Path" and "Action".
    :vartype attribute_name: str or ~microsoft.fabric.api.core.models.AttributeName
    :ivar attribute_value_included_in: Specifies a list of values for the ``attributeName`` to
     define the scope and the level of access to a resource.
     When ``attributeName`` is ``Path``\\ , ``attributeValueIncludedIn`` must specify the location
     of the resource being accessed, such as "Tables/Table1".
     When ``attributeName`` is ``Action``\\ , the ``attributeValueIncludedIn`` must specify the
     type of access being granted, such as ``Read``. Required.
    :vartype attribute_value_included_in: list[str]
    """

    _validation = {
        "attribute_name": {"required": True},
        "attribute_value_included_in": {"required": True},
    }

    _attribute_map = {
        "attribute_name": {"key": "attributeName", "type": "str"},
        "attribute_value_included_in": {"key": "attributeValueIncludedIn", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        attribute_name: Union[str, "_models.AttributeName"],
        attribute_value_included_in: List[str],
        **kwargs: Any
    ) -> None:
        """
        :keyword attribute_name: Specifies the name of the attribute that is being evaluated for access
         permissions. AttributeName can be ``Path`` or ``Action``. Additional attributeName types may be
         added over time. Required. Known values are: "Path" and "Action".
        :paramtype attribute_name: str or ~microsoft.fabric.api.core.models.AttributeName
        :keyword attribute_value_included_in: Specifies a list of values for the ``attributeName`` to
         define the scope and the level of access to a resource.
         When ``attributeName`` is ``Path``\\ , ``attributeValueIncludedIn`` must specify the location
         of the resource being accessed, such as "Tables/Table1".
         When ``attributeName`` is ``Action``\\ , the ``attributeValueIncludedIn`` must specify the
         type of access being granted, such as ``Read``. Required.
        :paramtype attribute_value_included_in: list[str]
        """
        super().__init__(**kwargs)
        self.attribute_name = attribute_name
        self.attribute_value_included_in = attribute_value_included_in


class PersonalCloudConnection(Connection):
    """A connection that connects through the cloud and cannot be shared.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection. Required.
    :vartype id: str
    :ivar display_name: The display name of the connection.
    :vartype display_name: str
    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
    :ivar allow_connection_usage_in_gateway: Allow this connection to be utilized with either
     on-premises data gateways or VNet data gateways.
    :vartype allow_connection_usage_in_gateway: bool
    """

    _validation = {
        "id": {"required": True},
        "connectivity_type": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "ListConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "ListCredentialDetails"},
        "allow_connection_usage_in_gateway": {"key": "allowConnectionUsageInGateway", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        connection_details: "_models.ListConnectionDetails",
        display_name: Optional[str] = None,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.ListCredentialDetails"] = None,
        allow_connection_usage_in_gateway: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection. Required.
        :paramtype id: str
        :keyword display_name: The display name of the connection.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
        :keyword allow_connection_usage_in_gateway: Allow this connection to be utilized with either
         on-premises data gateways or VNet data gateways.
        :paramtype allow_connection_usage_in_gateway: bool
        """
        super().__init__(
            id=id,
            display_name=display_name,
            connection_details=connection_details,
            privacy_level=privacy_level,
            credential_details=credential_details,
            **kwargs
        )
        self.connectivity_type: str = "PersonalCloud"
        self.allow_connection_usage_in_gateway = allow_connection_usage_in_gateway


class PreDeploymentDiffInformation(_serialization.Model):
    """The number of new, different and identical deployed items before deployment.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar new_items_count: The number of new items deployed to the target stage. Required.
    :vartype new_items_count: int
    :ivar different_items_count: The number of deployed items with differences between source and
     target stages, before deployment. Required.
    :vartype different_items_count: int
    :ivar no_difference_items_count: The number of identical deployed items in the source and
     target stages, before deployment. Required.
    :vartype no_difference_items_count: int
    """

    _validation = {
        "new_items_count": {"required": True, "readonly": True},
        "different_items_count": {"required": True, "readonly": True},
        "no_difference_items_count": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "new_items_count": {"key": "newItemsCount", "type": "int"},
        "different_items_count": {"key": "differentItemsCount", "type": "int"},
        "no_difference_items_count": {"key": "noDifferenceItemsCount", "type": "int"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.new_items_count = None
        self.different_items_count = None
        self.no_difference_items_count = None


class Principal(_serialization.Model):
    """Represents an identity or a Microsoft Entra group.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The principal's ID. Required.
    :vartype id: str
    :ivar display_name: The principal's display name.
    :vartype display_name: str
    :ivar type: The type of the principal. Additional principal types may be added over time.
     Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
     "EntireTenant".
    :vartype type: str or ~microsoft.fabric.api.core.models.PrincipalType
    :ivar user_details: User principal specific details. Applicable when the principal type is
     ``User``.
    :vartype user_details: ~microsoft.fabric.api.core.models.PrincipalUserDetails
    :ivar service_principal_details: Service principal specific details. Applicable when the
     principal type is ``ServicePrincipal``.
    :vartype service_principal_details:
     ~microsoft.fabric.api.core.models.PrincipalServicePrincipalDetails
    :ivar group_details: Group specific details. Applicable when the principal type is ``Group``.
    :vartype group_details: ~microsoft.fabric.api.core.models.PrincipalGroupDetails
    :ivar service_principal_profile_details: Service principal profile details. Applicable when the
     principal type is ``ServicePrincipalProfile``.
    :vartype service_principal_profile_details:
     ~microsoft.fabric.api.core.models.PrincipalServicePrincipalProfileDetails
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"readonly": True},
        "type": {"required": True},
        "user_details": {"readonly": True},
        "service_principal_details": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_details": {"key": "userDetails", "type": "PrincipalUserDetails"},
        "service_principal_details": {"key": "servicePrincipalDetails", "type": "PrincipalServicePrincipalDetails"},
        "group_details": {"key": "groupDetails", "type": "PrincipalGroupDetails"},
        "service_principal_profile_details": {
            "key": "servicePrincipalProfileDetails",
            "type": "PrincipalServicePrincipalProfileDetails",
        },
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: Union[str, "_models.PrincipalType"],
        group_details: Optional["_models.PrincipalGroupDetails"] = None,
        service_principal_profile_details: Optional["_models.PrincipalServicePrincipalProfileDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The principal's ID. Required.
        :paramtype id: str
        :keyword type: The type of the principal. Additional principal types may be added over time.
         Required. Known values are: "User", "ServicePrincipal", "Group", "ServicePrincipalProfile", and
         "EntireTenant".
        :paramtype type: str or ~microsoft.fabric.api.core.models.PrincipalType
        :keyword group_details: Group specific details. Applicable when the principal type is
         ``Group``.
        :paramtype group_details: ~microsoft.fabric.api.core.models.PrincipalGroupDetails
        :keyword service_principal_profile_details: Service principal profile details. Applicable when
         the principal type is ``ServicePrincipalProfile``.
        :paramtype service_principal_profile_details:
         ~microsoft.fabric.api.core.models.PrincipalServicePrincipalProfileDetails
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = None
        self.type = type
        self.user_details = None
        self.service_principal_details = None
        self.group_details = group_details
        self.service_principal_profile_details = service_principal_profile_details


class PrincipalGroupDetails(_serialization.Model):
    """Group specific details. Applicable when the principal type is ``Group``.

    :ivar group_type: The type of the group. Additional group types may be added over time. Known
     values are: "Unknown", "SecurityGroup", and "DistributionList".
    :vartype group_type: str or ~microsoft.fabric.api.core.models.GroupType
    """

    _attribute_map = {
        "group_type": {"key": "groupType", "type": "str"},
    }

    def __init__(self, *, group_type: Optional[Union[str, "_models.GroupType"]] = None, **kwargs: Any) -> None:
        """
        :keyword group_type: The type of the group. Additional group types may be added over time.
         Known values are: "Unknown", "SecurityGroup", and "DistributionList".
        :paramtype group_type: str or ~microsoft.fabric.api.core.models.GroupType
        """
        super().__init__(**kwargs)
        self.group_type = group_type


class PrincipalServicePrincipalDetails(_serialization.Model):
    """Service principal specific details. Applicable when the principal type is ``ServicePrincipal``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar aad_app_id: The service principal's Microsoft Entra AppId.
    :vartype aad_app_id: str
    """

    _validation = {
        "aad_app_id": {"readonly": True},
    }

    _attribute_map = {
        "aad_app_id": {"key": "aadAppId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.aad_app_id = None


class PrincipalServicePrincipalProfileDetails(_serialization.Model):
    """Service principal profile details. Applicable when the principal type is
    ``ServicePrincipalProfile``.

    :ivar parent_principal: The service principal profile's parent principal.
    :vartype parent_principal: ~microsoft.fabric.api.core.models.Principal
    """

    _attribute_map = {
        "parent_principal": {"key": "parentPrincipal", "type": "Principal"},
    }

    def __init__(self, *, parent_principal: Optional["_models.Principal"] = None, **kwargs: Any) -> None:
        """
        :keyword parent_principal: The service principal profile's parent principal.
        :paramtype parent_principal: ~microsoft.fabric.api.core.models.Principal
        """
        super().__init__(**kwargs)
        self.parent_principal = parent_principal


class PrincipalUserDetails(_serialization.Model):
    """User principal specific details. Applicable when the principal type is ``User``.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar user_principal_name: The user principal name.
    :vartype user_principal_name: str
    """

    _validation = {
        "user_principal_name": {"readonly": True},
    }

    _attribute_map = {
        "user_principal_name": {"key": "userPrincipalName", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.user_principal_name = None


class PrivateEndpointConnectionState(_serialization.Model):
    """Private endpoint connection state.

    :ivar status: Connection status. Known values are: "Pending", "Approved", "Rejected", and
     "Disconnected".
    :vartype status: str or ~microsoft.fabric.api.core.models.ConnectionStatus
    :ivar description: Description message (if any) provided on approving or rejecting the end
     point.
    :vartype description: str
    :ivar actions_required: Actions required to establish connection.
    :vartype actions_required: str
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "actions_required": {"key": "actionsRequired", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.ConnectionStatus"]] = None,
        description: Optional[str] = None,
        actions_required: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Connection status. Known values are: "Pending", "Approved", "Rejected", and
         "Disconnected".
        :paramtype status: str or ~microsoft.fabric.api.core.models.ConnectionStatus
        :keyword description: Description message (if any) provided on approving or rejecting the end
         point.
        :paramtype description: str
        :keyword actions_required: Actions required to establish connection.
        :paramtype actions_required: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.description = description
        self.actions_required = actions_required


class PublicKey(_serialization.Model):
    """The public key of the on-premises gateway.

    All required parameters must be populated in order to send to server.

    :ivar exponent: The exponent of the public key. Required.
    :vartype exponent: str
    :ivar modulus: The modulus of the public key. Required.
    :vartype modulus: str
    """

    _validation = {
        "exponent": {"required": True},
        "modulus": {"required": True},
    }

    _attribute_map = {
        "exponent": {"key": "exponent", "type": "str"},
        "modulus": {"key": "modulus", "type": "str"},
    }

    def __init__(self, *, exponent: str, modulus: str, **kwargs: Any) -> None:
        """
        :keyword exponent: The exponent of the public key. Required.
        :paramtype exponent: str
        :keyword modulus: The modulus of the public key. Required.
        :paramtype modulus: str
        """
        super().__init__(**kwargs)
        self.exponent = exponent
        self.modulus = modulus


class RowConstraint(_serialization.Model):
    """RowConstraint indicates a constraint that determines the rows in a table that users can see.
    Roles defined with RowConstraints use T-SQL to define a predicate that filters data in a table.
    Rows that do not meet the predicate’s conditions are filtered out, leaving a subset of the
    original rows. RowConstraints can also be used to specify dynamic and multi-table flavors of
    RLS using T-SQL.

    All required parameters must be populated in order to send to server.

    :ivar table_path: A relative file path specifying which table the row constraint applies to.
     This should be in the form of ``/Tables/{optionalSchema}/{tableName}``. Only one value can be
     given here and the tableName must be a table included in the PermissionScope. Required.
    :vartype table_path: str
    :ivar value: A T-SQL expression that is used to evaluate which rows the role members can see.
     Only a subset of T-SQL can be used as a predicate. Required.
    :vartype value: str
    """

    _validation = {
        "table_path": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "table_path": {"key": "tablePath", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, table_path: str, value: str, **kwargs: Any) -> None:
        """
        :keyword table_path: A relative file path specifying which table the row constraint applies to.
         This should be in the form of ``/Tables/{optionalSchema}/{tableName}``. Only one value can be
         given here and the tableName must be a table included in the PermissionScope. Required.
        :paramtype table_path: str
        :keyword value: A T-SQL expression that is used to evaluate which rows the role members can
         see. Only a subset of T-SQL can be used as a predicate. Required.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.table_path = table_path
        self.value = value


class RunOnDemandItemJobRequest(_serialization.Model):
    """Run on demand item job instance payload.

    :ivar execution_data: Payload for run on-demand job request. Needed only if the job type
     requires a payload.
    :vartype execution_data: JSON
    """

    _attribute_map = {
        "execution_data": {"key": "executionData", "type": "object"},
    }

    def __init__(self, *, execution_data: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword execution_data: Payload for run on-demand job request. Needed only if the job type
         requires a payload.
        :paramtype execution_data: JSON
        """
        super().__init__(**kwargs)
        self.execution_data = execution_data


class S3Compatible(_serialization.Model):
    """An object containing the properties of the target S3 compatible data source.

    All required parameters must be populated in order to send to server.

    :ivar location: HTTP URL of the S3 compatible endpoint. This endpoint must be able to receive
     ListBuckets S3 API calls. The URL must be in the non-bucket specific format; no bucket should
     be specified here. For example: https://s3endpoint.contoso.com. Required.
    :vartype location: str
    :ivar subpath: Specifies a target folder or subfolder within the S3 compatible bucket. For
     example: /folder. Required.
    :vartype subpath: str
    :ivar bucket: Specifies the target bucket within the S3 compatible location. Required.
    :vartype bucket: str
    :ivar connection_id: A string representing the connection that is bound with the shortcut. The
     connectionId is a unique identifier used to establish a connection between the shortcut and the
     target datasource. Required.
    :vartype connection_id: str
    """

    _validation = {
        "location": {"required": True},
        "subpath": {"required": True},
        "bucket": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "subpath": {"key": "subpath", "type": "str"},
        "bucket": {"key": "bucket", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, location: str, subpath: str, bucket: str, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword location: HTTP URL of the S3 compatible endpoint. This endpoint must be able to
         receive ListBuckets S3 API calls. The URL must be in the non-bucket specific format; no bucket
         should be specified here. For example: https://s3endpoint.contoso.com. Required.
        :paramtype location: str
        :keyword subpath: Specifies a target folder or subfolder within the S3 compatible bucket. For
         example: /folder. Required.
        :paramtype subpath: str
        :keyword bucket: Specifies the target bucket within the S3 compatible location. Required.
        :paramtype bucket: str
        :keyword connection_id: A string representing the connection that is bound with the shortcut.
         The connectionId is a unique identifier used to establish a connection between the shortcut and
         the target datasource. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.location = location
        self.subpath = subpath
        self.bucket = bucket
        self.connection_id = connection_id


class ServicePrincipalCredentials(Credentials):
    """Credentials for ServicePrincipal CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    :ivar tenant_id: The tenant ID of the service principal. Required.
    :vartype tenant_id: str
    :ivar service_principal_client_id: The client ID of the service principal. Required.
    :vartype service_principal_client_id: str
    :ivar service_principal_secret: The secret of the service principal. Required.
    :vartype service_principal_secret: str
    """

    _validation = {
        "credential_type": {"required": True},
        "tenant_id": {"required": True},
        "service_principal_client_id": {"required": True},
        "service_principal_secret": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "service_principal_client_id": {"key": "servicePrincipalClientId", "type": "str"},
        "service_principal_secret": {"key": "servicePrincipalSecret", "type": "str"},
    }

    def __init__(
        self, *, tenant_id: str, service_principal_client_id: str, service_principal_secret: str, **kwargs: Any
    ) -> None:
        """
        :keyword tenant_id: The tenant ID of the service principal. Required.
        :paramtype tenant_id: str
        :keyword service_principal_client_id: The client ID of the service principal. Required.
        :paramtype service_principal_client_id: str
        :keyword service_principal_secret: The secret of the service principal. Required.
        :paramtype service_principal_secret: str
        """
        super().__init__(**kwargs)
        self.credential_type: str = "ServicePrincipal"
        self.tenant_id = tenant_id
        self.service_principal_client_id = service_principal_client_id
        self.service_principal_secret = service_principal_secret


class ShareableCloudConnection(Connection):
    """A connection that connects through the cloud.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection. Required.
    :vartype id: str
    :ivar display_name: The display name of the connection.
    :vartype display_name: str
    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
    :ivar allow_connection_usage_in_gateway: Allow this connection to be utilized with either
     on-premises data gateways or VNet data gateways.
    :vartype allow_connection_usage_in_gateway: bool
    """

    _validation = {
        "id": {"required": True},
        "connectivity_type": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "ListConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "ListCredentialDetails"},
        "allow_connection_usage_in_gateway": {"key": "allowConnectionUsageInGateway", "type": "bool"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        connection_details: "_models.ListConnectionDetails",
        display_name: Optional[str] = None,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.ListCredentialDetails"] = None,
        allow_connection_usage_in_gateway: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection. Required.
        :paramtype id: str
        :keyword display_name: The display name of the connection.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
        :keyword allow_connection_usage_in_gateway: Allow this connection to be utilized with either
         on-premises data gateways or VNet data gateways.
        :paramtype allow_connection_usage_in_gateway: bool
        """
        super().__init__(
            id=id,
            display_name=display_name,
            connection_details=connection_details,
            privacy_level=privacy_level,
            credential_details=credential_details,
            **kwargs
        )
        self.connectivity_type: str = "ShareableCloud"
        self.allow_connection_usage_in_gateway = allow_connection_usage_in_gateway


class SharedAccessSignatureCredentials(Credentials):
    """Credentials for SharedAccessSignature CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    :ivar token: The token. Required.
    :vartype token: str
    """

    _validation = {
        "credential_type": {"required": True},
        "token": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
        "token": {"key": "token", "type": "str"},
    }

    def __init__(self, *, token: str, **kwargs: Any) -> None:
        """
        :keyword token: The token. Required.
        :paramtype token: str
        """
        super().__init__(**kwargs)
        self.credential_type: str = "SharedAccessSignature"
        self.token = token


class Shortcut(_serialization.Model):
    """An object representing a reference that points to other storage locations which can be internal
    or external to OneLake. Shortcut is defined by name, path where the shortcut is created and
    target specifying the target storage location.

    All required parameters must be populated in order to send to server.

    :ivar path: A string representing the full path where the shortcut is created, including either
     "Files" or "Tables". Required.
    :vartype path: str
    :ivar name: Name of the shortcut. Required.
    :vartype name: str
    :ivar target: An object that contains the target datasource, and must specify exactly one of
     the supported destinations. Required.
    :vartype target: ~microsoft.fabric.api.core.models.Target
    :ivar transform: An object that contains the transform name and its corresponding properties to
     be applied to target data, and must specify exactly one of the supported transformations.
    :vartype transform: ~microsoft.fabric.api.core.models.Transform
    """

    _validation = {
        "path": {"required": True},
        "name": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "target": {"key": "target", "type": "Target"},
        "transform": {"key": "transform", "type": "Transform"},
    }

    def __init__(
        self,
        *,
        path: str,
        name: str,
        target: "_models.Target",
        transform: Optional["_models.Transform"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: A string representing the full path where the shortcut is created, including
         either "Files" or "Tables". Required.
        :paramtype path: str
        :keyword name: Name of the shortcut. Required.
        :paramtype name: str
        :keyword target: An object that contains the target datasource, and must specify exactly one of
         the supported destinations. Required.
        :paramtype target: ~microsoft.fabric.api.core.models.Target
        :keyword transform: An object that contains the transform name and its corresponding properties
         to be applied to target data, and must specify exactly one of the supported transformations.
        :paramtype transform: ~microsoft.fabric.api.core.models.Transform
        """
        super().__init__(**kwargs)
        self.path = path
        self.name = name
        self.target = target
        self.transform = transform


class ShortcutCreationPayload(ExternalDataShareAcceptRequestPayload):
    """Request payload for shortcut creation.

    All required parameters must be populated in order to send to server.

    :ivar payload_type: The external data share acceptance type. Additional types may be added over
     time. Required. "ShortcutCreation"
    :vartype payload_type: str or
     ~microsoft.fabric.api.core.models.ExternalDataShareAcceptRequestPayloadType
    :ivar path: A full path in a data item, in which to create the shortcut pointing to the
     external data. A valid path to accept an external data share in must start with "Files/" or
     "Tables/".

     For example, these paths are valid:


     *
       "Files/"

     *
       "Files/MyFolder1"

     *
       "Tables/".
    :vartype path: str
    :ivar create_shortcut_requests: A list of definitions for creating the external data share
     shortcuts.
    :vartype create_shortcut_requests:
     list[~microsoft.fabric.api.core.models.CreateExternalDataShareShortcutRequest]
    """

    _validation = {
        "payload_type": {"required": True},
        "create_shortcut_requests": {"max_items": 100, "min_items": 1},
    }

    _attribute_map = {
        "payload_type": {"key": "payloadType", "type": "str"},
        "path": {"key": "path", "type": "str"},
        "create_shortcut_requests": {
            "key": "createShortcutRequests",
            "type": "[CreateExternalDataShareShortcutRequest]",
        },
    }

    def __init__(
        self,
        *,
        path: Optional[str] = None,
        create_shortcut_requests: Optional[List["_models.CreateExternalDataShareShortcutRequest"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: A full path in a data item, in which to create the shortcut pointing to the
         external data. A valid path to accept an external data share in must start with "Files/" or
         "Tables/".

         For example, these paths are valid:


         *
           "Files/"

         *
           "Files/MyFolder1"

         *
           "Tables/".
        :paramtype path: str
        :keyword create_shortcut_requests: A list of definitions for creating the external data share
         shortcuts.
        :paramtype create_shortcut_requests:
         list[~microsoft.fabric.api.core.models.CreateExternalDataShareShortcutRequest]
        """
        super().__init__(**kwargs)
        self.payload_type: str = "ShortcutCreation"
        self.path = path
        self.create_shortcut_requests = create_shortcut_requests


class Shortcuts(PaginatedResponse):
    """Shortcuts.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of shortcuts. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.ShortcutTransformFlagged]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[ShortcutTransformFlagged]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.ShortcutTransformFlagged"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of shortcuts. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.ShortcutTransformFlagged]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class ShortcutTransformFlagged(Shortcut):
    """An object representing a reference that points to other storage locations which can be internal
    or external to OneLake. Shortcut is defined by name, path where the shortcut is created and
    target specifying the target storage location.

    All required parameters must be populated in order to send to server.

    :ivar path: A string representing the full path where the shortcut is created, including either
     "Files" or "Tables". Required.
    :vartype path: str
    :ivar name: Name of the shortcut. Required.
    :vartype name: str
    :ivar target: An object that contains the target datasource, and must specify exactly one of
     the supported destinations. Required.
    :vartype target: ~microsoft.fabric.api.core.models.Target
    :ivar transform: An object that contains the transform name and its corresponding properties to
     be applied to target data, and must specify exactly one of the supported transformations.
    :vartype transform: ~microsoft.fabric.api.core.models.Transform
    :ivar is_shortcut_transform: Determines whether this shortcut is a transform shortcut. True - A
     shortcut transform, False - A regular shortcut. You can get the shortcut transform properties
     using `Get Shortcut <rest/api/fabric/core/onelake-shortcuts/get-shortcut>`_.
    :vartype is_shortcut_transform: bool
    """

    _validation = {
        "path": {"required": True},
        "name": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "path": {"key": "path", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "target": {"key": "target", "type": "Target"},
        "transform": {"key": "transform", "type": "Transform"},
        "is_shortcut_transform": {"key": "isShortcutTransform", "type": "bool"},
    }

    def __init__(
        self,
        *,
        path: str,
        name: str,
        target: "_models.Target",
        transform: Optional["_models.Transform"] = None,
        is_shortcut_transform: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword path: A string representing the full path where the shortcut is created, including
         either "Files" or "Tables". Required.
        :paramtype path: str
        :keyword name: Name of the shortcut. Required.
        :paramtype name: str
        :keyword target: An object that contains the target datasource, and must specify exactly one of
         the supported destinations. Required.
        :paramtype target: ~microsoft.fabric.api.core.models.Target
        :keyword transform: An object that contains the transform name and its corresponding properties
         to be applied to target data, and must specify exactly one of the supported transformations.
        :paramtype transform: ~microsoft.fabric.api.core.models.Transform
        :keyword is_shortcut_transform: Determines whether this shortcut is a transform shortcut. True
         - A shortcut transform, False - A regular shortcut. You can get the shortcut transform
         properties using `Get Shortcut <rest/api/fabric/core/onelake-shortcuts/get-shortcut>`_.
        :paramtype is_shortcut_transform: bool
        """
        super().__init__(path=path, name=name, target=target, transform=transform, **kwargs)
        self.is_shortcut_transform = is_shortcut_transform


class Tag(_serialization.Model):
    """Represents a tag.

    All required parameters must be populated in order to send to server.

    :ivar id: The tag object ID. Required.
    :vartype id: str
    :ivar display_name: The name of the tag. Required.
    :vartype display_name: str
    :ivar scope: The scope of the tag. Required.
    :vartype scope: ~microsoft.fabric.api.core.models.TagScope
    """

    _validation = {
        "id": {"required": True},
        "display_name": {"required": True},
        "scope": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "scope": {"key": "scope", "type": "TagScope"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        scope: "_models.TagScope",
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The tag object ID. Required.
        :paramtype id: str
        :keyword display_name: The name of the tag. Required.
        :paramtype display_name: str
        :keyword scope: The scope of the tag. Required.
        :paramtype scope: ~microsoft.fabric.api.core.models.TagScope
        """
        super().__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.scope = scope


class Tags(PaginatedResponse):
    """A response wrapper for a list of tags.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: An array of tags. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Tag]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Tag]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Tag"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: An array of tags. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Tag]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class Target(_serialization.Model):
    """An object that contains the target datasource, and must specify exactly one of the supported
    destinations as described in the table below.

    All required parameters must be populated in order to send to server.

    :ivar type: The type object contains properties like target shortcut account type. Additional
     types may be added over time. Required. Known values are: "OneLake", "AmazonS3", "AdlsGen2",
     "GoogleCloudStorage", "S3Compatible", "Dataverse", "ExternalDataShare", and "AzureBlobStorage".
    :vartype type: str or ~microsoft.fabric.api.core.models.Type
    :ivar one_lake: An object containing the properties of the target OneLake data source.
    :vartype one_lake: ~microsoft.fabric.api.core.models.OneLake
    :ivar amazon_s3: An object containing the properties of the target Amazon S3 data source.
    :vartype amazon_s3: ~microsoft.fabric.api.core.models.AmazonS3
    :ivar adls_gen2: An object containing the properties of the target ADLS Gen2 data source.
    :vartype adls_gen2: ~microsoft.fabric.api.core.models.AdlsGen2
    :ivar google_cloud_storage: An object containing the properties of the target Google Cloud
     Storage data source.
    :vartype google_cloud_storage: ~microsoft.fabric.api.core.models.GoogleCloudStorage
    :ivar s3_compatible: An object containing the properties of the target S3 compatible data
     source.
    :vartype s3_compatible: ~microsoft.fabric.api.core.models.S3Compatible
    :ivar dataverse: An object containing the properties of the target Dataverse data source.
    :vartype dataverse: ~microsoft.fabric.api.core.models.Dataverse
    :ivar external_data_share: An object containing the properties of the target external data
     share.
    :vartype external_data_share: ~microsoft.fabric.api.core.models.ExternalDataShareTarget
    :ivar azure_blob_storage: An object containing the properties of the target Azure Blob Storage
     data source.
    :vartype azure_blob_storage: ~microsoft.fabric.api.core.models.AzureBlobStorage
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "one_lake": {"key": "oneLake", "type": "OneLake"},
        "amazon_s3": {"key": "amazonS3", "type": "AmazonS3"},
        "adls_gen2": {"key": "adlsGen2", "type": "AdlsGen2"},
        "google_cloud_storage": {"key": "googleCloudStorage", "type": "GoogleCloudStorage"},
        "s3_compatible": {"key": "s3Compatible", "type": "S3Compatible"},
        "dataverse": {"key": "dataverse", "type": "Dataverse"},
        "external_data_share": {"key": "externalDataShare", "type": "ExternalDataShareTarget"},
        "azure_blob_storage": {"key": "azureBlobStorage", "type": "AzureBlobStorage"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.Type"],
        one_lake: Optional["_models.OneLake"] = None,
        amazon_s3: Optional["_models.AmazonS3"] = None,
        adls_gen2: Optional["_models.AdlsGen2"] = None,
        google_cloud_storage: Optional["_models.GoogleCloudStorage"] = None,
        s3_compatible: Optional["_models.S3Compatible"] = None,
        dataverse: Optional["_models.Dataverse"] = None,
        external_data_share: Optional["_models.ExternalDataShareTarget"] = None,
        azure_blob_storage: Optional["_models.AzureBlobStorage"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The type object contains properties like target shortcut account type.
         Additional types may be added over time. Required. Known values are: "OneLake", "AmazonS3",
         "AdlsGen2", "GoogleCloudStorage", "S3Compatible", "Dataverse", "ExternalDataShare", and
         "AzureBlobStorage".
        :paramtype type: str or ~microsoft.fabric.api.core.models.Type
        :keyword one_lake: An object containing the properties of the target OneLake data source.
        :paramtype one_lake: ~microsoft.fabric.api.core.models.OneLake
        :keyword amazon_s3: An object containing the properties of the target Amazon S3 data source.
        :paramtype amazon_s3: ~microsoft.fabric.api.core.models.AmazonS3
        :keyword adls_gen2: An object containing the properties of the target ADLS Gen2 data source.
        :paramtype adls_gen2: ~microsoft.fabric.api.core.models.AdlsGen2
        :keyword google_cloud_storage: An object containing the properties of the target Google Cloud
         Storage data source.
        :paramtype google_cloud_storage: ~microsoft.fabric.api.core.models.GoogleCloudStorage
        :keyword s3_compatible: An object containing the properties of the target S3 compatible data
         source.
        :paramtype s3_compatible: ~microsoft.fabric.api.core.models.S3Compatible
        :keyword dataverse: An object containing the properties of the target Dataverse data source.
        :paramtype dataverse: ~microsoft.fabric.api.core.models.Dataverse
        :keyword external_data_share: An object containing the properties of the target external data
         share.
        :paramtype external_data_share: ~microsoft.fabric.api.core.models.ExternalDataShareTarget
        :keyword azure_blob_storage: An object containing the properties of the target Azure Blob
         Storage data source.
        :paramtype azure_blob_storage: ~microsoft.fabric.api.core.models.AzureBlobStorage
        """
        super().__init__(**kwargs)
        self.type = type
        self.one_lake = one_lake
        self.amazon_s3 = amazon_s3
        self.adls_gen2 = adls_gen2
        self.google_cloud_storage = google_cloud_storage
        self.s3_compatible = s3_compatible
        self.dataverse = dataverse
        self.external_data_share = external_data_share
        self.azure_blob_storage = azure_blob_storage


class TenantTagScope(TagScope):
    """Represents tenant tag scope.

    All required parameters must be populated in order to send to server.

    :ivar type: Denotes tag scope. Additional tag scopes may be added over time. Required. Known
     values are: "Tenant" and "Domain".
    :vartype type: str or ~microsoft.fabric.api.core.models.TagScopeType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: str = "Tenant"


class UnapplyTagsRequest(_serialization.Model):
    """The request payload for unapplying tags.

    All required parameters must be populated in order to send to server.

    :ivar tags: The array of tag IDs. Required.
    :vartype tags: list[str]
    """

    _validation = {
        "tags": {"required": True},
    }

    _attribute_map = {
        "tags": {"key": "tags", "type": "[str]"},
    }

    def __init__(self, *, tags: List[str], **kwargs: Any) -> None:
        """
        :keyword tags: The array of tag IDs. Required.
        :paramtype tags: list[str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class UpdateConnectionRequest(_serialization.Model):
    """The base object of update connection request.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    UpdateOnPremisesGatewayConnectionRequest, UpdateOnPremisesGatewayPersonalConnectionRequest,
    UpdatePersonalCloudConnectionRequest, UpdateShareableCloudConnectionRequest,
    UpdateVirtualNetworkGatewayConnectionRequest

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    """

    _validation = {
        "connectivity_type": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
    }

    _subtype_map = {
        "connectivity_type": {
            "OnPremisesGateway": "UpdateOnPremisesGatewayConnectionRequest",
            "OnPremisesGatewayPersonal": "UpdateOnPremisesGatewayPersonalConnectionRequest",
            "PersonalCloud": "UpdatePersonalCloudConnectionRequest",
            "ShareableCloud": "UpdateShareableCloudConnectionRequest",
            "VirtualNetworkGateway": "UpdateVirtualNetworkGatewayConnectionRequest",
        }
    }

    def __init__(self, *, privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None, **kwargs: Any) -> None:
        """
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        """
        super().__init__(**kwargs)
        self.connectivity_type: Optional[str] = None
        self.privacy_level = privacy_level


class UpdateConnectionRoleAssignmentRequest(_serialization.Model):
    """An update connection role assignment request payload.

    All required parameters must be populated in order to send to server.

    :ivar role: The connection role of the principal. Required. Known values are: "User",
     "UserWithReshare", and "Owner".
    :vartype role: str or ~microsoft.fabric.api.core.models.ConnectionRole
    """

    _validation = {
        "role": {"required": True},
    }

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, *, role: Union[str, "_models.ConnectionRole"], **kwargs: Any) -> None:
        """
        :keyword role: The connection role of the principal. Required. Known values are: "User",
         "UserWithReshare", and "Owner".
        :paramtype role: str or ~microsoft.fabric.api.core.models.ConnectionRole
        """
        super().__init__(**kwargs)
        self.role = role


class UpdateCredentialDetails(CredentialDetails):
    """The credential details input for updating a connection.

    :ivar single_sign_on_type: The single sign-on type of the connection. Known values are: "None",
     "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
     "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: The connection encryption setting that is used during the test
     connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
    :vartype skip_test_connection: bool
    :ivar credentials: The credentials of the connection.
    :vartype credentials: ~microsoft.fabric.api.core.models.Credentials
    """

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
        "credentials": {"key": "credentials", "type": "Credentials"},
    }

    def __init__(
        self,
        *,
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        credentials: Optional["_models.Credentials"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: The single sign-on type of the connection. Known values are:
         "None", "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: The connection encryption setting that is used during the test
         connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
        :paramtype skip_test_connection: bool
        :keyword credentials: The credentials of the connection.
        :paramtype credentials: ~microsoft.fabric.api.core.models.Credentials
        """
        super().__init__(
            single_sign_on_type=single_sign_on_type,
            connection_encryption=connection_encryption,
            skip_test_connection=skip_test_connection,
            **kwargs
        )
        self.credentials = credentials


class UpdateDeploymentPipelineRequest(DeploymentPipelineRequestBase):
    """A request to update an existing deployment pipeline. An updated display name and/or a
    description is required.

    :ivar display_name: The display name for the deployment pipeline.:code:`<br>`The display name
     cannot contain more than 256 characters.
    :vartype display_name: str
    :ivar description: The description for the deployment pipeline.:code:`<br>`The description
     cannot contain more than 1024 characters.
    :vartype description: str
    """


class UpdateFolderRequest(_serialization.Model):
    """Update folder request.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The folder display name. The name must meet `Folder name requirements
     </fabric/get-started/workspaces-folders#folder-name-requirements>`_. Required.
    :vartype display_name: str
    """

    _validation = {
        "display_name": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(self, *, display_name: str, **kwargs: Any) -> None:
        """
        :keyword display_name: The folder display name. The name must meet `Folder name requirements
         </fabric/get-started/workspaces-folders#folder-name-requirements>`_. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name


class UpdateFromGitRequest(_serialization.Model):
    """Contains the update from Git request data.

    All required parameters must be populated in order to send to server.

    :ivar workspace_head: Full SHA hash that the workspace is synced to.
     This value may be null only after Initialize Connection.
     In other cases, the system will validate that the given value is aligned with the head known
     to the system.
    :vartype workspace_head: str
    :ivar remote_commit_hash: Remote full SHA commit hash. Required.
    :vartype remote_commit_hash: str
    :ivar conflict_resolution: Conflict resolution to be used in the update from Git operation.
     If items are in conflict and a conflict resolution is not specified, the update operation will
     not start.
    :vartype conflict_resolution: ~microsoft.fabric.api.core.models.WorkspaceConflictResolution
    :ivar options: Options to be used in the update from Git operation.
    :vartype options: ~microsoft.fabric.api.core.models.UpdateOptions
    """

    _validation = {
        "remote_commit_hash": {"required": True},
    }

    _attribute_map = {
        "workspace_head": {"key": "workspaceHead", "type": "str"},
        "remote_commit_hash": {"key": "remoteCommitHash", "type": "str"},
        "conflict_resolution": {"key": "conflictResolution", "type": "WorkspaceConflictResolution"},
        "options": {"key": "options", "type": "UpdateOptions"},
    }

    def __init__(
        self,
        *,
        remote_commit_hash: str,
        workspace_head: Optional[str] = None,
        conflict_resolution: Optional["_models.WorkspaceConflictResolution"] = None,
        options: Optional["_models.UpdateOptions"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword workspace_head: Full SHA hash that the workspace is synced to.
         This value may be null only after Initialize Connection.
         In other cases, the system will validate that the given value is aligned with the head known
         to the system.
        :paramtype workspace_head: str
        :keyword remote_commit_hash: Remote full SHA commit hash. Required.
        :paramtype remote_commit_hash: str
        :keyword conflict_resolution: Conflict resolution to be used in the update from Git operation.
         If items are in conflict and a conflict resolution is not specified, the update operation will
         not start.
        :paramtype conflict_resolution: ~microsoft.fabric.api.core.models.WorkspaceConflictResolution
        :keyword options: Options to be used in the update from Git operation.
        :paramtype options: ~microsoft.fabric.api.core.models.UpdateOptions
        """
        super().__init__(**kwargs)
        self.workspace_head = workspace_head
        self.remote_commit_hash = remote_commit_hash
        self.conflict_resolution = conflict_resolution
        self.options = options


class UpdateGatewayMemberRequest(_serialization.Model):
    """UpdateGatewayMemberRequest.

    :ivar display_name: The display name of the gateway member. Maximum length is 200 characters.
    :vartype display_name: str
    :ivar enabled: Whether the gateway member is enabled. True - Enabled, False - Not enabled.
    :vartype enabled: bool
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "enabled": {"key": "enabled", "type": "bool"},
    }

    def __init__(self, *, display_name: Optional[str] = None, enabled: Optional[bool] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The display name of the gateway member. Maximum length is 200
         characters.
        :paramtype display_name: str
        :keyword enabled: Whether the gateway member is enabled. True - Enabled, False - Not enabled.
        :paramtype enabled: bool
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.enabled = enabled


class UpdateGatewayRequest(_serialization.Model):
    """The base object of update gateway request.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    UpdateOnPremisesGatewayRequest, UpdateVirtualNetworkGatewayRequest

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    :ivar display_name: The name of the gateway. Maximum length is 200 characters.
    :vartype display_name: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    _subtype_map = {
        "type": {"OnPremises": "UpdateOnPremisesGatewayRequest", "VirtualNetwork": "UpdateVirtualNetworkGatewayRequest"}
    }

    def __init__(self, *, display_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The name of the gateway. Maximum length is 200 characters.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.display_name = display_name


class UpdateGatewayRoleAssignmentRequest(_serialization.Model):
    """An update gateway role assignment request payload.

    All required parameters must be populated in order to send to server.

    :ivar role: The gateway role of the principal. Required. Known values are: "Admin",
     "ConnectionCreatorWithResharing", and "ConnectionCreator".
    :vartype role: str or ~microsoft.fabric.api.core.models.GatewayRole
    """

    _validation = {
        "role": {"required": True},
    }

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, *, role: Union[str, "_models.GatewayRole"], **kwargs: Any) -> None:
        """
        :keyword role: The gateway role of the principal. Required. Known values are: "Admin",
         "ConnectionCreatorWithResharing", and "ConnectionCreator".
        :paramtype role: str or ~microsoft.fabric.api.core.models.GatewayRole
        """
        super().__init__(**kwargs)
        self.role = role


class UpdateGitCredentialsRequest(_serialization.Model):
    """Contains the request data to update the Git credentials configuration.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    UpdateGitCredentialsToAutomaticRequest, UpdateGitCredentialsToConfiguredConnectionRequest,
    UpdateGitCredentialsToNoneRequest

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    _subtype_map = {
        "source": {
            "Automatic": "UpdateGitCredentialsToAutomaticRequest",
            "ConfiguredConnection": "UpdateGitCredentialsToConfiguredConnectionRequest",
            "None": "UpdateGitCredentialsToNoneRequest",
        }
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: Optional[str] = None


class UpdateGitCredentialsToAutomaticRequest(UpdateGitCredentialsRequest):
    """Contains the request data to update the Git credentials to automatic.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: str = "Automatic"


class UpdateGitCredentialsToConfiguredConnectionRequest(UpdateGitCredentialsRequest):  # pylint: disable=name-too-long
    """Contains the request data to update the Git credentials to configured connection.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    :ivar connection_id: The object ID of the connection. Required.
    :vartype connection_id: str
    """

    _validation = {
        "source": {"required": True},
        "connection_id": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
        "connection_id": {"key": "connectionId", "type": "str"},
    }

    def __init__(self, *, connection_id: str, **kwargs: Any) -> None:
        """
        :keyword connection_id: The object ID of the connection. Required.
        :paramtype connection_id: str
        """
        super().__init__(**kwargs)
        self.source: str = "ConfiguredConnection"
        self.connection_id = connection_id


class UpdateGitCredentialsToNoneRequest(UpdateGitCredentialsRequest):
    """Contains the request data to update the Git credentials to none.

    All required parameters must be populated in order to send to server.

    :ivar source: The Git credentials source. Required. Known values are: "ConfiguredConnection",
     "Automatic", and "None".
    :vartype source: str or ~microsoft.fabric.api.core.models.GitCredentialsSource
    """

    _validation = {
        "source": {"required": True},
    }

    _attribute_map = {
        "source": {"key": "source", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.source: str = "None"


class UpdateItemDefinitionRequest(_serialization.Model):
    """Update item definition request payload.

    All required parameters must be populated in order to send to server.

    :ivar definition: An item definition object. Required.
    :vartype definition: ~microsoft.fabric.api.core.models.ItemDefinition
    """

    _validation = {
        "definition": {"required": True},
    }

    _attribute_map = {
        "definition": {"key": "definition", "type": "ItemDefinition"},
    }

    def __init__(self, *, definition: "_models.ItemDefinition", **kwargs: Any) -> None:
        """
        :keyword definition: An item definition object. Required.
        :paramtype definition: ~microsoft.fabric.api.core.models.ItemDefinition
        """
        super().__init__(**kwargs)
        self.definition = definition


class UpdateItemRequest(_serialization.Model):
    """Update item request.

    :ivar display_name: The item display name. The display name must follow naming rules according
     to item type.
    :vartype display_name: str
    :ivar description: The item description. Maximum length is 256 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The item display name. The display name must follow naming rules
         according to item type.
        :paramtype display_name: str
        :keyword description: The item description. Maximum length is 256 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class UpdateOnPremisesGatewayConnectionRequest(UpdateConnectionRequest):
    """UpdateOnPremisesGatewayConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
    :vartype display_name: str
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details:
     ~microsoft.fabric.api.core.models.UpdateOnPremisesGatewayCredentialDetails
    """

    _validation = {
        "connectivity_type": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "UpdateOnPremisesGatewayCredentialDetails"},
    }

    def __init__(
        self,
        *,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        display_name: Optional[str] = None,
        credential_details: Optional["_models.UpdateOnPremisesGatewayCredentialDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
        :paramtype display_name: str
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details:
         ~microsoft.fabric.api.core.models.UpdateOnPremisesGatewayCredentialDetails
        """
        super().__init__(privacy_level=privacy_level, **kwargs)
        self.connectivity_type: str = "OnPremisesGateway"
        self.display_name = display_name
        self.credential_details = credential_details


class UpdateOnPremisesGatewayCredentialDetails(CredentialDetails):
    """The credential details input for updating an on-premises gateway connection.

    :ivar single_sign_on_type: The single sign-on type of the connection. Known values are: "None",
     "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
     "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: The connection encryption setting that is used during the test
     connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
    :vartype skip_test_connection: bool
    :ivar credentials: The credentials of the connection.
    :vartype credentials: ~microsoft.fabric.api.core.models.OnPremisesGatewayCredentials
    """

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
        "credentials": {"key": "credentials", "type": "OnPremisesGatewayCredentials"},
    }

    def __init__(
        self,
        *,
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        credentials: Optional["_models.OnPremisesGatewayCredentials"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: The single sign-on type of the connection. Known values are:
         "None", "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: The connection encryption setting that is used during the test
         connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
        :paramtype skip_test_connection: bool
        :keyword credentials: The credentials of the connection.
        :paramtype credentials: ~microsoft.fabric.api.core.models.OnPremisesGatewayCredentials
        """
        super().__init__(
            single_sign_on_type=single_sign_on_type,
            connection_encryption=connection_encryption,
            skip_test_connection=skip_test_connection,
            **kwargs
        )
        self.credentials = credentials


class UpdateOnPremisesGatewayPersonalConnectionRequest(UpdateConnectionRequest):  # pylint: disable=name-too-long
    """UpdateOnPremisesGatewayPersonalConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details:
     ~microsoft.fabric.api.core.models.UpdateOnPremisesGatewayPersonalCredentialDetails
    """

    _validation = {
        "connectivity_type": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "UpdateOnPremisesGatewayPersonalCredentialDetails"},
    }

    def __init__(
        self,
        *,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.UpdateOnPremisesGatewayPersonalCredentialDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details:
         ~microsoft.fabric.api.core.models.UpdateOnPremisesGatewayPersonalCredentialDetails
        """
        super().__init__(privacy_level=privacy_level, **kwargs)
        self.connectivity_type: str = "OnPremisesGatewayPersonal"
        self.credential_details = credential_details


class UpdateOnPremisesGatewayPersonalCredentialDetails(CredentialDetails):  # pylint: disable=name-too-long
    """The credential details input for updating an on-premises gateway connection.

    :ivar single_sign_on_type: The single sign-on type of the connection. Known values are: "None",
     "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
     "KerberosDirectQueryAndRefresh".
    :vartype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
    :ivar connection_encryption: The connection encryption setting that is used during the test
     connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
    :vartype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
    :ivar skip_test_connection: Whether the connection should skip the test connection during
     creation and update. True - Skip the test connection, False - Do not skip the test connection.
    :vartype skip_test_connection: bool
    :ivar credentials: The credentials of the connection.
    :vartype credentials: ~microsoft.fabric.api.core.models.OnPremisesGatewayPersonalCredentials
    """

    _attribute_map = {
        "single_sign_on_type": {"key": "singleSignOnType", "type": "str"},
        "connection_encryption": {"key": "connectionEncryption", "type": "str"},
        "skip_test_connection": {"key": "skipTestConnection", "type": "bool"},
        "credentials": {"key": "credentials", "type": "OnPremisesGatewayPersonalCredentials"},
    }

    def __init__(
        self,
        *,
        single_sign_on_type: Optional[Union[str, "_models.SingleSignOnType"]] = None,
        connection_encryption: Optional[Union[str, "_models.ConnectionEncryption"]] = None,
        skip_test_connection: Optional[bool] = None,
        credentials: Optional["_models.OnPremisesGatewayPersonalCredentials"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword single_sign_on_type: The single sign-on type of the connection. Known values are:
         "None", "Kerberos", "MicrosoftEntraID", "SecurityAssertionMarkupLanguage", and
         "KerberosDirectQueryAndRefresh".
        :paramtype single_sign_on_type: str or ~microsoft.fabric.api.core.models.SingleSignOnType
        :keyword connection_encryption: The connection encryption setting that is used during the test
         connection. Known values are: "Encrypted", "Any", and "NotEncrypted".
        :paramtype connection_encryption: str or ~microsoft.fabric.api.core.models.ConnectionEncryption
        :keyword skip_test_connection: Whether the connection should skip the test connection during
         creation and update. True - Skip the test connection, False - Do not skip the test connection.
        :paramtype skip_test_connection: bool
        :keyword credentials: The credentials of the connection.
        :paramtype credentials: ~microsoft.fabric.api.core.models.OnPremisesGatewayPersonalCredentials
        """
        super().__init__(
            single_sign_on_type=single_sign_on_type,
            connection_encryption=connection_encryption,
            skip_test_connection=skip_test_connection,
            **kwargs
        )
        self.credentials = credentials


class UpdateOnPremisesGatewayRequest(UpdateGatewayRequest):
    """UpdateOnPremisesGatewayRequest.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    :ivar display_name: The name of the gateway. Maximum length is 200 characters.
    :vartype display_name: str
    :ivar load_balancing_setting: The load balancing setting of the on-premises gateway. Known
     values are: "Failover" and "DistributeEvenly".
    :vartype load_balancing_setting: str or ~microsoft.fabric.api.core.models.LoadBalancingSetting
    :ivar allow_cloud_connection_refresh: Whether to allow cloud connections to refresh through
     this on-premises gateway. True - Allow, False - Do not allow.
    :vartype allow_cloud_connection_refresh: bool
    :ivar allow_custom_connectors: Whether to allow custom connectors to be used with this
     on-premises gateway. True - Allow, False - Do not allow.
    :vartype allow_custom_connectors: bool
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "load_balancing_setting": {"key": "loadBalancingSetting", "type": "str"},
        "allow_cloud_connection_refresh": {"key": "allowCloudConnectionRefresh", "type": "bool"},
        "allow_custom_connectors": {"key": "allowCustomConnectors", "type": "bool"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        load_balancing_setting: Optional[Union[str, "_models.LoadBalancingSetting"]] = None,
        allow_cloud_connection_refresh: Optional[bool] = None,
        allow_custom_connectors: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The name of the gateway. Maximum length is 200 characters.
        :paramtype display_name: str
        :keyword load_balancing_setting: The load balancing setting of the on-premises gateway. Known
         values are: "Failover" and "DistributeEvenly".
        :paramtype load_balancing_setting: str or
         ~microsoft.fabric.api.core.models.LoadBalancingSetting
        :keyword allow_cloud_connection_refresh: Whether to allow cloud connections to refresh through
         this on-premises gateway. True - Allow, False - Do not allow.
        :paramtype allow_cloud_connection_refresh: bool
        :keyword allow_custom_connectors: Whether to allow custom connectors to be used with this
         on-premises gateway. True - Allow, False - Do not allow.
        :paramtype allow_custom_connectors: bool
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type: str = "OnPremises"
        self.load_balancing_setting = load_balancing_setting
        self.allow_cloud_connection_refresh = allow_cloud_connection_refresh
        self.allow_custom_connectors = allow_custom_connectors


class UpdateOptions(_serialization.Model):
    """Contains the options that are enabled for the update from Git.

    :ivar allow_override_items: User consent to override incoming items during the update from Git
     process.
     When incoming items are present and the allow override items is not specified or is provided
     as false, the update operation will not start.
     Default value is false.
    :vartype allow_override_items: bool
    """

    _attribute_map = {
        "allow_override_items": {"key": "allowOverrideItems", "type": "bool"},
    }

    def __init__(self, *, allow_override_items: Optional[bool] = None, **kwargs: Any) -> None:
        """
        :keyword allow_override_items: User consent to override incoming items during the update from
         Git process.
         When incoming items are present and the allow override items is not specified or is provided
         as false, the update operation will not start.
         Default value is false.
        :paramtype allow_override_items: bool
        """
        super().__init__(**kwargs)
        self.allow_override_items = allow_override_items


class UpdatePersonalCloudConnectionRequest(UpdateConnectionRequest):
    """UpdatePersonalCloudConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.UpdateCredentialDetails
    :ivar allow_connection_usage_in_gateway: Allow this connection to be utilized with either
     on-premises data gateways or VNet data gateways.
    :vartype allow_connection_usage_in_gateway: bool
    """

    _validation = {
        "connectivity_type": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "UpdateCredentialDetails"},
        "allow_connection_usage_in_gateway": {"key": "allowConnectionUsageInGateway", "type": "bool"},
    }

    def __init__(
        self,
        *,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.UpdateCredentialDetails"] = None,
        allow_connection_usage_in_gateway: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.UpdateCredentialDetails
        :keyword allow_connection_usage_in_gateway: Allow this connection to be utilized with either
         on-premises data gateways or VNet data gateways.
        :paramtype allow_connection_usage_in_gateway: bool
        """
        super().__init__(privacy_level=privacy_level, **kwargs)
        self.connectivity_type: str = "PersonalCloud"
        self.credential_details = credential_details
        self.allow_connection_usage_in_gateway = allow_connection_usage_in_gateway


class UpdateScheduleRequest(_serialization.Model):
    """Update item schedule plan request payload.

    All required parameters must be populated in order to send to server.

    :ivar enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
    :vartype enabled: bool
    :ivar configuration: The actual data contains the time/weekdays of this schedule. Required.
    :vartype configuration: ~microsoft.fabric.api.core.models.ScheduleConfig
    """

    _validation = {
        "enabled": {"required": True},
        "configuration": {"required": True},
    }

    _attribute_map = {
        "enabled": {"key": "enabled", "type": "bool"},
        "configuration": {"key": "configuration", "type": "ScheduleConfig"},
    }

    def __init__(self, *, enabled: bool, configuration: "_models.ScheduleConfig", **kwargs: Any) -> None:
        """
        :keyword enabled: Whether this schedule is enabled. True - Enabled, False - Disabled. Required.
        :paramtype enabled: bool
        :keyword configuration: The actual data contains the time/weekdays of this schedule. Required.
        :paramtype configuration: ~microsoft.fabric.api.core.models.ScheduleConfig
        """
        super().__init__(**kwargs)
        self.enabled = enabled
        self.configuration = configuration


class UpdateShareableCloudConnectionRequest(UpdateConnectionRequest):
    """UpdateShareableCloudConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
    :vartype display_name: str
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.UpdateCredentialDetails
    :ivar allow_connection_usage_in_gateway: Allow this connection to be utilized with either
     on-premises data gateways or VNet data gateways.
    :vartype allow_connection_usage_in_gateway: bool
    """

    _validation = {
        "connectivity_type": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "UpdateCredentialDetails"},
        "allow_connection_usage_in_gateway": {"key": "allowConnectionUsageInGateway", "type": "bool"},
    }

    def __init__(
        self,
        *,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        display_name: Optional[str] = None,
        credential_details: Optional["_models.UpdateCredentialDetails"] = None,
        allow_connection_usage_in_gateway: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
        :paramtype display_name: str
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.UpdateCredentialDetails
        :keyword allow_connection_usage_in_gateway: Allow this connection to be utilized with either
         on-premises data gateways or VNet data gateways.
        :paramtype allow_connection_usage_in_gateway: bool
        """
        super().__init__(privacy_level=privacy_level, **kwargs)
        self.connectivity_type: str = "ShareableCloud"
        self.display_name = display_name
        self.credential_details = credential_details
        self.allow_connection_usage_in_gateway = allow_connection_usage_in_gateway


class UpdateVirtualNetworkGatewayConnectionRequest(UpdateConnectionRequest):  # pylint: disable=name-too-long
    """UpdateVirtualNetworkGatewayConnectionRequest.

    All required parameters must be populated in order to send to server.

    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar display_name: The display name of the connection. Maximum length is 200 characters.
    :vartype display_name: str
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.UpdateCredentialDetails
    """

    _validation = {
        "connectivity_type": {"required": True},
    }

    _attribute_map = {
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "UpdateCredentialDetails"},
    }

    def __init__(
        self,
        *,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        display_name: Optional[str] = None,
        credential_details: Optional["_models.UpdateCredentialDetails"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword display_name: The display name of the connection. Maximum length is 200 characters.
        :paramtype display_name: str
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.UpdateCredentialDetails
        """
        super().__init__(privacy_level=privacy_level, **kwargs)
        self.connectivity_type: str = "VirtualNetworkGateway"
        self.display_name = display_name
        self.credential_details = credential_details


class UpdateVirtualNetworkGatewayRequest(UpdateGatewayRequest):
    """UpdateVirtualNetworkGatewayRequest.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    :ivar display_name: The name of the gateway. Maximum length is 200 characters.
    :vartype display_name: str
    :ivar capacity_id: The object ID of the Fabric license capacity.
    :vartype capacity_id: str
    :ivar inactivity_minutes_before_sleep: The minutes of inactivity before the virtual network
     gateway goes into auto-sleep. Must be one of the following values: 30, 60, 90, 120, 150, 240,
     360, 480, 720, 1440.
    :vartype inactivity_minutes_before_sleep: int
    :ivar number_of_member_gateways: The number of member gateways. A number between 1 and 7.
    :vartype number_of_member_gateways: int
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "inactivity_minutes_before_sleep": {"key": "inactivityMinutesBeforeSleep", "type": "int"},
        "number_of_member_gateways": {"key": "numberOfMemberGateways", "type": "int"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        capacity_id: Optional[str] = None,
        inactivity_minutes_before_sleep: Optional[int] = None,
        number_of_member_gateways: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The name of the gateway. Maximum length is 200 characters.
        :paramtype display_name: str
        :keyword capacity_id: The object ID of the Fabric license capacity.
        :paramtype capacity_id: str
        :keyword inactivity_minutes_before_sleep: The minutes of inactivity before the virtual network
         gateway goes into auto-sleep. Must be one of the following values: 30, 60, 90, 120, 150, 240,
         360, 480, 720, 1440.
        :paramtype inactivity_minutes_before_sleep: int
        :keyword number_of_member_gateways: The number of member gateways. A number between 1 and 7.
        :paramtype number_of_member_gateways: int
        """
        super().__init__(display_name=display_name, **kwargs)
        self.type: str = "VirtualNetwork"
        self.capacity_id = capacity_id
        self.inactivity_minutes_before_sleep = inactivity_minutes_before_sleep
        self.number_of_member_gateways = number_of_member_gateways


class UpdateWorkspaceRequest(_serialization.Model):
    """Update workspace request payload.

    :ivar display_name: The workspace display name.:code:`<br>`The display name cannot contain more
     than 256 characters.:code:`<br>`Workspace names must be unique within the
     tenant.:code:`<br>`"Admin monitoring" is a reserved workspace name.
    :vartype display_name: str
    :ivar description: The workspace description.:code:`<br>`The description cannot contain more
     than 4000 characters.
    :vartype description: str
    """

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, *, display_name: Optional[str] = None, description: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword display_name: The workspace display name.:code:`<br>`The display name cannot contain
         more than 256 characters.:code:`<br>`Workspace names must be unique within the
         tenant.:code:`<br>`"Admin monitoring" is a reserved workspace name.
        :paramtype display_name: str
        :keyword description: The workspace description.:code:`<br>`The description cannot contain more
         than 4000 characters.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class UpdateWorkspaceRoleAssignmentRequest(_serialization.Model):
    """Update workspace role assignment request payload.

    All required parameters must be populated in order to send to server.

    :ivar role: The workspace role of the principal. Required. Known values are: "Admin", "Member",
     "Contributor", and "Viewer".
    :vartype role: str or ~microsoft.fabric.api.core.models.WorkspaceRole
    """

    _validation = {
        "role": {"required": True},
    }

    _attribute_map = {
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, *, role: Union[str, "_models.WorkspaceRole"], **kwargs: Any) -> None:
        """
        :keyword role: The workspace role of the principal. Required. Known values are: "Admin",
         "Member", "Contributor", and "Viewer".
        :paramtype role: str or ~microsoft.fabric.api.core.models.WorkspaceRole
        """
        super().__init__(**kwargs)
        self.role = role


class VirtualNetworkAzureResource(AzureResource):
    """The properties of a Virtual Network Azure resource.

    All required parameters must be populated in order to send to server.

    :ivar subscription_id: The subscription ID. Required.
    :vartype subscription_id: str
    :ivar resource_group_name: The name of the resource group. Required.
    :vartype resource_group_name: str
    :ivar virtual_network_name: The name of the virtual network. Required.
    :vartype virtual_network_name: str
    :ivar subnet_name: The name of the subnet. Required.
    :vartype subnet_name: str
    """

    _validation = {
        "subscription_id": {"required": True},
        "resource_group_name": {"required": True},
        "virtual_network_name": {"required": True},
        "subnet_name": {"required": True},
    }

    _attribute_map = {
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "resource_group_name": {"key": "resourceGroupName", "type": "str"},
        "virtual_network_name": {"key": "virtualNetworkName", "type": "str"},
        "subnet_name": {"key": "subnetName", "type": "str"},
    }

    def __init__(
        self,
        *,
        subscription_id: str,
        resource_group_name: str,
        virtual_network_name: str,
        subnet_name: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword subscription_id: The subscription ID. Required.
        :paramtype subscription_id: str
        :keyword resource_group_name: The name of the resource group. Required.
        :paramtype resource_group_name: str
        :keyword virtual_network_name: The name of the virtual network. Required.
        :paramtype virtual_network_name: str
        :keyword subnet_name: The name of the subnet. Required.
        :paramtype subnet_name: str
        """
        super().__init__(subscription_id=subscription_id, resource_group_name=resource_group_name, **kwargs)
        self.virtual_network_name = virtual_network_name
        self.subnet_name = subnet_name


class VirtualNetworkGateway(Gateway):
    """VirtualNetworkGateway.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the gateway. Required.
    :vartype id: str
    :ivar type: The type of the gateway. Required. Known values are: "OnPremises",
     "OnPremisesPersonal", and "VirtualNetwork".
    :vartype type: str or ~microsoft.fabric.api.core.models.GatewayType
    :ivar display_name: The display name of the virtual network gateway. Required.
    :vartype display_name: str
    :ivar capacity_id: The object ID of the Fabric license capacity.
    :vartype capacity_id: str
    :ivar virtual_network_azure_resource: The Azure virtual network resource. Required.
    :vartype virtual_network_azure_resource:
     ~microsoft.fabric.api.core.models.VirtualNetworkAzureResource
    :ivar inactivity_minutes_before_sleep: The minutes of inactivity before the virtual network
     gateway goes into auto-sleep. Required.
    :vartype inactivity_minutes_before_sleep: int
    :ivar number_of_member_gateways: The number of member gateways. Required.
    :vartype number_of_member_gateways: int
    """

    _validation = {
        "id": {"required": True},
        "type": {"required": True},
        "display_name": {"required": True},
        "virtual_network_azure_resource": {"required": True},
        "inactivity_minutes_before_sleep": {"required": True},
        "number_of_member_gateways": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "virtual_network_azure_resource": {"key": "virtualNetworkAzureResource", "type": "VirtualNetworkAzureResource"},
        "inactivity_minutes_before_sleep": {"key": "inactivityMinutesBeforeSleep", "type": "int"},
        "number_of_member_gateways": {"key": "numberOfMemberGateways", "type": "int"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        display_name: str,
        virtual_network_azure_resource: "_models.VirtualNetworkAzureResource",
        inactivity_minutes_before_sleep: int,
        number_of_member_gateways: int,
        capacity_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the gateway. Required.
        :paramtype id: str
        :keyword display_name: The display name of the virtual network gateway. Required.
        :paramtype display_name: str
        :keyword capacity_id: The object ID of the Fabric license capacity.
        :paramtype capacity_id: str
        :keyword virtual_network_azure_resource: The Azure virtual network resource. Required.
        :paramtype virtual_network_azure_resource:
         ~microsoft.fabric.api.core.models.VirtualNetworkAzureResource
        :keyword inactivity_minutes_before_sleep: The minutes of inactivity before the virtual network
         gateway goes into auto-sleep. Required.
        :paramtype inactivity_minutes_before_sleep: int
        :keyword number_of_member_gateways: The number of member gateways. Required.
        :paramtype number_of_member_gateways: int
        """
        super().__init__(id=id, **kwargs)
        self.type: str = "VirtualNetwork"
        self.display_name = display_name
        self.capacity_id = capacity_id
        self.virtual_network_azure_resource = virtual_network_azure_resource
        self.inactivity_minutes_before_sleep = inactivity_minutes_before_sleep
        self.number_of_member_gateways = number_of_member_gateways


class VirtualNetworkGatewayConnection(Connection):
    """A connection that connects through a virtual network data gateway.

    All required parameters must be populated in order to send to server.

    :ivar id: The object ID of the connection. Required.
    :vartype id: str
    :ivar display_name: The display name of the connection.
    :vartype display_name: str
    :ivar connectivity_type: The connectivity type of the connection. Required. Known values are:
     "ShareableCloud", "PersonalCloud", "OnPremisesGateway", "OnPremisesGatewayPersonal",
     "VirtualNetworkGateway", "Automatic", and "None".
    :vartype connectivity_type: str or ~microsoft.fabric.api.core.models.ConnectivityType
    :ivar connection_details: The connection details of the connection. Required.
    :vartype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
    :ivar privacy_level: The privacy level of the connection. Known values are: "None", "Private",
     "Organizational", and "Public".
    :vartype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
    :ivar credential_details: The credential details of the connection.
    :vartype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
    :ivar gateway_id: The gateway object ID of the connection.
    :vartype gateway_id: str
    """

    _validation = {
        "id": {"required": True},
        "connectivity_type": {"required": True},
        "connection_details": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "connectivity_type": {"key": "connectivityType", "type": "str"},
        "connection_details": {"key": "connectionDetails", "type": "ListConnectionDetails"},
        "privacy_level": {"key": "privacyLevel", "type": "str"},
        "credential_details": {"key": "credentialDetails", "type": "ListCredentialDetails"},
        "gateway_id": {"key": "gatewayId", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        connection_details: "_models.ListConnectionDetails",
        display_name: Optional[str] = None,
        privacy_level: Optional[Union[str, "_models.PrivacyLevel"]] = None,
        credential_details: Optional["_models.ListCredentialDetails"] = None,
        gateway_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The object ID of the connection. Required.
        :paramtype id: str
        :keyword display_name: The display name of the connection.
        :paramtype display_name: str
        :keyword connection_details: The connection details of the connection. Required.
        :paramtype connection_details: ~microsoft.fabric.api.core.models.ListConnectionDetails
        :keyword privacy_level: The privacy level of the connection. Known values are: "None",
         "Private", "Organizational", and "Public".
        :paramtype privacy_level: str or ~microsoft.fabric.api.core.models.PrivacyLevel
        :keyword credential_details: The credential details of the connection.
        :paramtype credential_details: ~microsoft.fabric.api.core.models.ListCredentialDetails
        :keyword gateway_id: The gateway object ID of the connection.
        :paramtype gateway_id: str
        """
        super().__init__(
            id=id,
            display_name=display_name,
            connection_details=connection_details,
            privacy_level=privacy_level,
            credential_details=credential_details,
            **kwargs
        )
        self.connectivity_type: str = "VirtualNetworkGateway"
        self.gateway_id = gateway_id


class WeeklyScheduleConfig(ScheduleConfig):
    """WeeklyScheduleConfig.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of schedule configuration. Additional types may be added over time.
     Required. Known values are: "Cron", "Daily", "Weekly", and "Monthly".
    :vartype type: str or ~microsoft.fabric.api.core.models.ScheduleType
    :ivar start_date_time: The start time for this schedule. If the start time is in the past, it
     will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
     Required.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time for this schedule. The end time must be later than the start
     time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
    :vartype end_date_time: ~datetime.datetime
    :ivar local_time_zone_id: The time zone identifier registry on local computer for windows, see
     `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
    :vartype local_time_zone_id: str
    :ivar times: A list of time slots in the hh:mm format. The maximum time slots you can use is
     100. Required.
    :vartype times: list[str]
    :ivar weekdays: A list of weekdays, at most seven elements are allowed. Required.
    :vartype weekdays: list[str or ~microsoft.fabric.api.core.models.DayOfWeek]
    """

    _validation = {
        "type": {"required": True},
        "start_date_time": {"required": True},
        "end_date_time": {"required": True},
        "local_time_zone_id": {"required": True},
        "times": {"required": True, "max_items": 100, "min_items": 1},
        "weekdays": {"required": True, "max_items": 7, "min_items": 1},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "local_time_zone_id": {"key": "localTimeZoneId", "type": "str"},
        "times": {"key": "times", "type": "[str]"},
        "weekdays": {"key": "weekdays", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        start_date_time: datetime.datetime,
        end_date_time: datetime.datetime,
        local_time_zone_id: str,
        times: List[str],
        weekdays: List[Union[str, "_models.DayOfWeek"]],
        **kwargs: Any
    ) -> None:
        """
        :keyword start_date_time: The start time for this schedule. If the start time is in the past,
         it will trigger a job instantly. The time is in UTC, using the YYYY-MM-DDTHH:mm:ssZ format.
         Required.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: The end time for this schedule. The end time must be later than the
         start time. It has to be in UTC, using the YYYY-MM-DDTHH:mm:ssZ format. Required.
        :paramtype end_date_time: ~datetime.datetime
        :keyword local_time_zone_id: The time zone identifier registry on local computer for windows,
         see `Default Time Zones </windows-hardware/manufacture/desktop/default-time-zones>`_. Required.
        :paramtype local_time_zone_id: str
        :keyword times: A list of time slots in the hh:mm format. The maximum time slots you can use is
         100. Required.
        :paramtype times: list[str]
        :keyword weekdays: A list of weekdays, at most seven elements are allowed. Required.
        :paramtype weekdays: list[str or ~microsoft.fabric.api.core.models.DayOfWeek]
        """
        super().__init__(
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            local_time_zone_id=local_time_zone_id,
            **kwargs
        )
        self.type: str = "Weekly"
        self.times = times
        self.weekdays = weekdays


class WindowsCredentials(Credentials):
    """Credentials for Windows CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    :ivar username: The username. Required.
    :vartype username: str
    :ivar password: The password. Required.
    :vartype password: str
    """

    _validation = {
        "credential_type": {"required": True},
        "username": {"required": True},
        "password": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "password": {"key": "password", "type": "str"},
    }

    def __init__(self, *, username: str, password: str, **kwargs: Any) -> None:
        """
        :keyword username: The username. Required.
        :paramtype username: str
        :keyword password: The password. Required.
        :paramtype password: str
        """
        super().__init__(**kwargs)
        self.credential_type: str = "Windows"
        self.username = username
        self.password = password


class WindowsWithoutImpersonationCredentials(Credentials):
    """Credentials for WindowsWithoutImpersonation CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    """

    _validation = {
        "credential_type": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.credential_type: str = "WindowsWithoutImpersonation"


class Workspace(_serialization.Model):
    """A workspace object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The workspace ID. Required.
    :vartype id: str
    :ivar display_name: The workspace display name. Required.
    :vartype display_name: str
    :ivar description: The workspace description. Required.
    :vartype description: str
    :ivar type: The workspace type. Known values are: "Personal", "Workspace", and
     "AdminWorkspace".
    :vartype type: str or ~microsoft.fabric.api.core.models.WorkspaceType
    :ivar capacity_id: The ID of the capacity the workspace is assigned to.
    :vartype capacity_id: str
    :ivar api_endpoint: HTTP URL that represents the API endpoint specific to the workspace. This
     endpoint value is returned when the user enables preferWorkspaceSpecificEndpoints. It allows
     for API access over private links.
    :vartype api_endpoint: str
    :ivar domain_id: The ID of the domain the workspace is assigned to.
    :vartype domain_id: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "display_name": {"required": True},
        "description": {"required": True, "readonly": True},
        "type": {"readonly": True},
        "capacity_id": {"readonly": True},
        "api_endpoint": {"readonly": True},
        "domain_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "api_endpoint": {"key": "apiEndpoint", "type": "str"},
        "domain_id": {"key": "domainId", "type": "str"},
    }

    def __init__(self, *, display_name: str, **kwargs: Any) -> None:
        """
        :keyword display_name: The workspace display name. Required.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.display_name = display_name
        self.description = None
        self.type = None
        self.capacity_id = None
        self.api_endpoint = None
        self.domain_id = None


class WorkspaceConflictResolution(_serialization.Model):
    """The basic conflict resolution data.

    All required parameters must be populated in order to send to server.

    :ivar conflict_resolution_type: Conflict resolution type. Additional conflict resolution types
     may be added over time. Required. "Workspace"
    :vartype conflict_resolution_type: str or
     ~microsoft.fabric.api.core.models.ConflictResolutionType
    :ivar conflict_resolution_policy: Conflict resolution policy. Additional conflict resolution
     policies may be added over time. Required. Known values are: "PreferRemote" and
     "PreferWorkspace".
    :vartype conflict_resolution_policy: str or
     ~microsoft.fabric.api.core.models.ConflictResolutionPolicy
    """

    _validation = {
        "conflict_resolution_type": {"required": True},
        "conflict_resolution_policy": {"required": True},
    }

    _attribute_map = {
        "conflict_resolution_type": {"key": "conflictResolutionType", "type": "str"},
        "conflict_resolution_policy": {"key": "conflictResolutionPolicy", "type": "str"},
    }

    def __init__(
        self,
        *,
        conflict_resolution_type: Union[str, "_models.ConflictResolutionType"],
        conflict_resolution_policy: Union[str, "_models.ConflictResolutionPolicy"],
        **kwargs: Any
    ) -> None:
        """
        :keyword conflict_resolution_type: Conflict resolution type. Additional conflict resolution
         types may be added over time. Required. "Workspace"
        :paramtype conflict_resolution_type: str or
         ~microsoft.fabric.api.core.models.ConflictResolutionType
        :keyword conflict_resolution_policy: Conflict resolution policy. Additional conflict resolution
         policies may be added over time. Required. Known values are: "PreferRemote" and
         "PreferWorkspace".
        :paramtype conflict_resolution_policy: str or
         ~microsoft.fabric.api.core.models.ConflictResolutionPolicy
        """
        super().__init__(**kwargs)
        self.conflict_resolution_type = conflict_resolution_type
        self.conflict_resolution_policy = conflict_resolution_policy


class WorkspaceIdentity(_serialization.Model):
    """A workspace identity object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar application_id: The application ID. Required.
    :vartype application_id: str
    :ivar service_principal_id: The service principal ID. Required.
    :vartype service_principal_id: str
    """

    _validation = {
        "application_id": {"required": True, "readonly": True},
        "service_principal_id": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "application_id": {"key": "applicationId", "type": "str"},
        "service_principal_id": {"key": "servicePrincipalId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.application_id = None
        self.service_principal_id = None


class WorkspaceIdentityCredentials(Credentials):
    """Credentials for WorkspaceIdentity CredentialType.

    All required parameters must be populated in order to send to server.

    :ivar credential_type: The credential type of the connection. Required. Known values are:
     "Windows", "Anonymous", "Basic", "Key", "OAuth2", "WindowsWithoutImpersonation",
     "SharedAccessSignature", "ServicePrincipal", and "WorkspaceIdentity".
    :vartype credential_type: str or ~microsoft.fabric.api.core.models.CredentialType
    """

    _validation = {
        "credential_type": {"required": True},
    }

    _attribute_map = {
        "credential_type": {"key": "credentialType", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.credential_type: str = "WorkspaceIdentity"


class WorkspaceInfo(Workspace):  # pylint: disable=too-many-instance-attributes
    """A workspace object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The workspace ID. Required.
    :vartype id: str
    :ivar display_name: The workspace display name. Required.
    :vartype display_name: str
    :ivar description: The workspace description. Required.
    :vartype description: str
    :ivar type: The workspace type. Known values are: "Personal", "Workspace", and
     "AdminWorkspace".
    :vartype type: str or ~microsoft.fabric.api.core.models.WorkspaceType
    :ivar capacity_id: The ID of the capacity the workspace is assigned to.
    :vartype capacity_id: str
    :ivar api_endpoint: HTTP URL that represents the API endpoint specific to the workspace. This
     endpoint value is returned when the user enables preferWorkspaceSpecificEndpoints. It allows
     for API access over private links.
    :vartype api_endpoint: str
    :ivar domain_id: The ID of the domain the workspace is assigned to.
    :vartype domain_id: str
    :ivar capacity_assignment_progress: The status of the workspace's capacity assignment progress.
     Known values are: "Completed", "Failed", and "InProgress".
    :vartype capacity_assignment_progress: str or
     ~microsoft.fabric.api.core.models.CapacityAssignmentProgress
    :ivar workspace_identity: The workspace identity.
    :vartype workspace_identity: ~microsoft.fabric.api.core.models.WorkspaceIdentity
    :ivar capacity_region: The region of the capacity associated with this workspace. Known values
     are: "Australia East", "Australia Southeast", "Brazil South", "Brazil Southeast", "Canada
     Central", "Canada East", "Central India", "Central US", "Central US EUAP", "East Asia", "East
     US", "East US 2", "France Central", "France South", "Germany Central", "Germany Northeast",
     "Israel Central", "Italy North", "Japan East", "Japan West", "Korea Central", "Korea South",
     "Mexico Central", "North Central US", "North Europe", "Norway East", "Norway West", "Poland
     Central", "South Africa North", "South Africa West", "South Central US", "South India",
     "Southeast Asia", "Spain Central", "Sweden Central", "Switzerland North", "Switzerland West",
     "West Europe", "West India", "West US", "West US 2", "West US 3", "West Central US", "UAE
     Central", "UAE North", "Qatar Central", "Germany West Central", "Germany North", "UK South",
     "UK West", "China North", "China East", "China East 2", "China East 3", "China North 2", and
     "China North 3".
    :vartype capacity_region: str or ~microsoft.fabric.api.core.models.CapacityRegion
    :ivar one_lake_endpoints: The OneLake API endpoints associated with this workspace.
    :vartype one_lake_endpoints: ~microsoft.fabric.api.core.models.OneLakeEndpoints
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "display_name": {"required": True},
        "description": {"required": True, "readonly": True},
        "type": {"readonly": True},
        "capacity_id": {"readonly": True},
        "api_endpoint": {"readonly": True},
        "domain_id": {"readonly": True},
        "capacity_assignment_progress": {"readonly": True},
        "workspace_identity": {"readonly": True},
        "capacity_region": {"readonly": True},
        "one_lake_endpoints": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "capacity_id": {"key": "capacityId", "type": "str"},
        "api_endpoint": {"key": "apiEndpoint", "type": "str"},
        "domain_id": {"key": "domainId", "type": "str"},
        "capacity_assignment_progress": {"key": "capacityAssignmentProgress", "type": "str"},
        "workspace_identity": {"key": "workspaceIdentity", "type": "WorkspaceIdentity"},
        "capacity_region": {"key": "capacityRegion", "type": "str"},
        "one_lake_endpoints": {"key": "oneLakeEndpoints", "type": "OneLakeEndpoints"},
    }

    def __init__(self, *, display_name: str, **kwargs: Any) -> None:
        """
        :keyword display_name: The workspace display name. Required.
        :paramtype display_name: str
        """
        super().__init__(display_name=display_name, **kwargs)
        self.capacity_assignment_progress = None
        self.workspace_identity = None
        self.capacity_region = None
        self.one_lake_endpoints = None


class WorkspaceNetworkingCommunicationPolicy(_serialization.Model):
    """The networking communication policy for a workspace.

    :ivar inbound: The inbound network communications properties for a workspace.
    :vartype inbound: ~microsoft.fabric.api.core.models.InboundRules
    :ivar outbound: The outbound network communications properties for a workspace.
    :vartype outbound: ~microsoft.fabric.api.core.models.OutboundRules
    """

    _attribute_map = {
        "inbound": {"key": "inbound", "type": "InboundRules"},
        "outbound": {"key": "outbound", "type": "OutboundRules"},
    }

    def __init__(
        self,
        *,
        inbound: Optional["_models.InboundRules"] = None,
        outbound: Optional["_models.OutboundRules"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword inbound: The inbound network communications properties for a workspace.
        :paramtype inbound: ~microsoft.fabric.api.core.models.InboundRules
        :keyword outbound: The outbound network communications properties for a workspace.
        :paramtype outbound: ~microsoft.fabric.api.core.models.OutboundRules
        """
        super().__init__(**kwargs)
        self.inbound = inbound
        self.outbound = outbound


class WorkspaceRoleAssignment(_serialization.Model):
    """A workspace role assignment object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The workspace role assignment ID. Required.
    :vartype id: str
    :ivar principal: The principal. Required.
    :vartype principal: ~microsoft.fabric.api.core.models.Principal
    :ivar role: The workspace role of the principal. Required. Known values are: "Admin", "Member",
     "Contributor", and "Viewer".
    :vartype role: str or ~microsoft.fabric.api.core.models.WorkspaceRole
    """

    _validation = {
        "id": {"required": True, "readonly": True},
        "principal": {"required": True, "readonly": True},
        "role": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "principal": {"key": "principal", "type": "Principal"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.principal = None
        self.role = None


class WorkspaceRoleAssignments(PaginatedResponse):
    """WorkspaceRoleAssignments.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: Required.
    :vartype value: list[~microsoft.fabric.api.core.models.WorkspaceRoleAssignment]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[WorkspaceRoleAssignment]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.WorkspaceRoleAssignment"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.WorkspaceRoleAssignment]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value


class Workspaces(PaginatedResponse):
    """Workspaces.

    All required parameters must be populated in order to send to server.

    :ivar continuation_token: The token for the next result set batch. If there are no more
     records, it's removed from the response.
    :vartype continuation_token: str
    :ivar continuation_uri: The URI of the next result set batch. If there are no more records,
     it's removed from the response.
    :vartype continuation_uri: str
    :ivar value: A list of workspaces. Required.
    :vartype value: list[~microsoft.fabric.api.core.models.Workspace]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "continuation_uri": {"key": "continuationUri", "type": "str"},
        "value": {"key": "value", "type": "[Workspace]"},
    }

    def __init__(
        self,
        *,
        value: List["_models.Workspace"],
        continuation_token: Optional[str] = None,
        continuation_uri: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword continuation_token: The token for the next result set batch. If there are no more
         records, it's removed from the response.
        :paramtype continuation_token: str
        :keyword continuation_uri: The URI of the next result set batch. If there are no more records,
         it's removed from the response.
        :paramtype continuation_uri: str
        :keyword value: A list of workspaces. Required.
        :paramtype value: list[~microsoft.fabric.api.core.models.Workspace]
        """
        super().__init__(continuation_token=continuation_token, continuation_uri=continuation_uri, **kwargs)
        self.value = value
