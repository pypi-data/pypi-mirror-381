# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/python@6.15.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AttributeName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies the name of the attribute that is being evaluated for access permissions.
    AttributeName can be ``Path`` or ``Action``. Additional attributeName types may be added over
    time.
    """

    PATH = "Path"
    """Attribute name Path"""
    ACTION = "Action"
    """Attribute name Action"""


class CapacityAssignmentProgress(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Workspace assignment to capacity progress status. Additional capacity assignment progress
    values may be added over time.
    """

    COMPLETED = "Completed"
    """Last capacity assignment operation was completed successfully."""
    FAILED = "Failed"
    """Capacity assignment operation has encountered an error or failure and was unable to complete."""
    IN_PROGRESS = "InProgress"
    """Capacity assignment operation is currently running and has not yet completed."""


class CapacityRegion(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The region of the capacity associated with this workspace. Additional capacity region values
    may be added over time.
    """

    AUSTRALIA_EAST = "Australia East"
    """Australia East region"""
    AUSTRALIA_SOUTHEAST = "Australia Southeast"
    """Australia Southeast region"""
    BRAZIL_SOUTH = "Brazil South"
    """Brazil South region"""
    BRAZIL_SOUTHEAST = "Brazil Southeast"
    """Brazil Southeast region"""
    CANADA_CENTRAL = "Canada Central"
    """Canada Central region"""
    CANADA_EAST = "Canada East"
    """Canada East region"""
    CENTRAL_INDIA = "Central India"
    """Central India region"""
    CENTRAL_US = "Central US"
    """Central US region"""
    CENTRAL_US_EUAP = "Central US EUAP"
    """Central US EUAP region"""
    EAST_ASIA = "East Asia"
    """East Asia region"""
    EAST_US = "East US"
    """East US region"""
    EAST_US2 = "East US 2"
    """East US 2 region"""
    FRANCE_CENTRAL = "France Central"
    """France Central region"""
    FRANCE_SOUTH = "France South"
    """France South region"""
    GERMANY_CENTRAL = "Germany Central"
    """Germany Central region"""
    GERMANY_NORTHEAST = "Germany Northeast"
    """Germany Northeast region"""
    ISRAEL_CENTRAL = "Israel Central"
    """Israel Central region"""
    ITALY_NORTH = "Italy North"
    """Italy North region"""
    JAPAN_EAST = "Japan East"
    """Japan East region"""
    JAPAN_WEST = "Japan West"
    """Japan West region"""
    KOREA_CENTRAL = "Korea Central"
    """Korea Central region"""
    KOREA_SOUTH = "Korea South"
    """Korea South region"""
    MEXICO_CENTRAL = "Mexico Central"
    """Mexico Central region"""
    NORTH_CENTRAL_US = "North Central US"
    """North Central US region"""
    NORTH_EUROPE = "North Europe"
    """North Europe region"""
    NORWAY_EAST = "Norway East"
    """Norway East region"""
    NORWAY_WEST = "Norway West"
    """Norway West region"""
    POLAND_CENTRAL = "Poland Central"
    """Poland Central region"""
    SOUTH_AFRICA_NORTH = "South Africa North"
    """South Africa North region"""
    SOUTH_AFRICA_WEST = "South Africa West"
    """South Africa West region"""
    SOUTH_CENTRAL_US = "South Central US"
    """South Central US region"""
    SOUTH_INDIA = "South India"
    """South India region"""
    SOUTHEAST_ASIA = "Southeast Asia"
    """Southeast Asia region"""
    SPAIN_CENTRAL = "Spain Central"
    """Spain Central region"""
    SWEDEN_CENTRAL = "Sweden Central"
    """Sweden Central region"""
    SWITZERLAND_NORTH = "Switzerland North"
    """Switzerland North region"""
    SWITZERLAND_WEST = "Switzerland West"
    """Switzerland West region"""
    WEST_EUROPE = "West Europe"
    """West Europe region"""
    WEST_INDIA = "West India"
    """West India region"""
    WEST_US = "West US"
    """West US region"""
    WEST_US2 = "West US 2"
    """West US 2 region"""
    WEST_US3 = "West US 3"
    """West US 3 region"""
    WEST_CENTRAL_US = "West Central US"
    """West Central US region"""
    UAE_CENTRAL = "UAE Central"
    """UAE Central region"""
    UAE_NORTH = "UAE North"
    """UAE North region"""
    QATAR_CENTRAL = "Qatar Central"
    """Qatar Central region"""
    GERMANY_WEST_CENTRAL = "Germany West Central"
    """Germany West Central region"""
    GERMANY_NORTH = "Germany North"
    """Germany North region"""
    UK_SOUTH = "UK South"
    """UK South region"""
    UK_WEST = "UK West"
    """UK West region"""
    CHINA_NORTH = "China North"
    """China North region"""
    CHINA_EAST = "China East"
    """China East region"""
    CHINA_EAST2 = "China East 2"
    """China East 2 region"""
    CHINA_EAST3 = "China East 3"
    """China East 3 region"""
    CHINA_NORTH2 = "China North 2"
    """China North 2 region"""
    CHINA_NORTH3 = "China North 3"
    """China North 3 region"""


class CapacityState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Capacity state. Additional capacity states may be added over time."""

    ACTIVE = "Active"
    """The capacity is ready to use."""
    INACTIVE = "Inactive"
    """The capacity can't be used."""


class ChangeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A change of an item. Additional changed types may be added over time."""

    ADDED = "Added"
    """A newly created item."""
    DELETED = "Deleted"
    """Item has been deleted."""
    MODIFIED = "Modified"
    """Item content has been modified."""


class ColumnAction(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ColumnAction."""

    READ = "Read"
    """The ColumnAction value Read"""


class ColumnEffect(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The effect given to the columnNames. The only allowed value is *Permit*. Additional
    columnEffect types may be added over time.
    """

    PERMIT = "Permit"
    """The ColumnEffect type Permit"""


class CommitMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Modes for the commit operation. Additional modes may be added over time."""

    ALL = "All"
    """Commit all uncommitted changes. The caller is not required to provide the list of items to
    commit."""
    SELECTIVE = "Selective"
    """Commit a specified items list that has uncommitted changes."""


class ConflictResolutionPolicy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Conflict resolution policy. Additional conflict resolution policies may be added over time."""

    PREFER_REMOTE = "PreferRemote"
    """Prefer remote Git side content."""
    PREFER_WORKSPACE = "PreferWorkspace"
    """Prefer workspace side content."""


class ConflictResolutionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Conflict resolution type. Additional conflict resolution types may be added over time."""

    WORKSPACE = "Workspace"
    """Conflict resolution representing the workspace level."""


class ConflictType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A change of an item in both workspace and remote. Additional changed types may be added over
    time.
    """

    NONE = "None"
    """There are no changes to the item."""
    CONFLICT = "Conflict"
    """There are different changes to the item in the workspace and in remote Git."""
    SAME_CHANGES = "SameChanges"
    """There are identical changes to the item in the workspace and in remote Git."""


class ConnectionEncryption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The connection encryption type of the connection. Additional connection encryption values may
    be added over time.
    """

    ENCRYPTED = "Encrypted"
    """The connection attempt is made using an encrypted connection."""
    ANY = "Any"
    """The connection attempt is first made using an encrypted connection, then falls back to
    unencrypted connection if unsuccessful."""
    NOT_ENCRYPTED = "NotEncrypted"
    """The connection attempt is made using an unencrypted connection."""


class ConnectionRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Connection role. Additional connection roles may be added over time."""

    USER = "User"
    """Enables user access for the connection."""
    USER_WITH_RESHARE = "UserWithReshare"
    """Enables user with resharing access for the connection."""
    OWNER = "Owner"
    """Enables ownership access for the connection."""


class ConnectionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Private endpoint connection status. Additional connection status may be added over time."""

    PENDING = "Pending"
    """Pending approval"""
    APPROVED = "Approved"
    """Endpoint approved"""
    REJECTED = "Rejected"
    """Endpoint rejected"""
    DISCONNECTED = "Disconnected"
    """Endpoint disconnected"""


class ConnectivityType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The connectivity type of the connection. Additional connectivity types may be added over time."""

    SHAREABLE_CLOUD = "ShareableCloud"
    """The connection connects through the cloud and can be shared with others."""
    PERSONAL_CLOUD = "PersonalCloud"
    """The connection connects through the cloud and cannot be shared with others."""
    ON_PREMISES_GATEWAY = "OnPremisesGateway"
    """The connection connects through an on-premises data gateway."""
    ON_PREMISES_GATEWAY_PERSONAL = "OnPremisesGatewayPersonal"
    """The connection connects through a personal on-premises data gateway."""
    VIRTUAL_NETWORK_GATEWAY = "VirtualNetworkGateway"
    """The connection connects through a virtual network data gateway."""
    AUTOMATIC = "Automatic"
    """The connection connects through the cloud using an implicit data connection. This option is
    only available for specific scenarios like semantic models that use Single Sign-On (SSO).”"""
    NONE = "None"
    """The connection is not bound"""


class CredentialType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The credential type of the connection. Additional credential types may be added over time."""

    WINDOWS = "Windows"
    """Connection uses Windows authentication to connect. Only supported for on-premises gateways."""
    ANONYMOUS = "Anonymous"
    """Connection uses anonymous authentication to connect."""
    BASIC = "Basic"
    """Connection uses basic authentication to connect."""
    KEY = "Key"
    """Connection uses key authentication to connect."""
    O_AUTH2 = "OAuth2"
    """Connection uses OAuth 2.0 authentication to connect."""
    WINDOWS_WITHOUT_IMPERSONATION = "WindowsWithoutImpersonation"
    """Connection uses Windows (without the option for impersonation) authentication to connect. Only
    supported for on-premises gateways (personal mode)."""
    SHARED_ACCESS_SIGNATURE = "SharedAccessSignature"
    """Connection uses shared access signature (SAS) authentication to connect."""
    SERVICE_PRINCIPAL = "ServicePrincipal"
    """Connection uses service principal authentication to connect."""
    WORKSPACE_IDENTITY = "WorkspaceIdentity"
    """Connection uses workspace identity authentication to connect."""


class DataType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The data type of the connection creation parameter value. Additional data type values may be
    added over time.
    """

    TEXT = "Text"
    """Use text as the parameter input value."""
    NUMBER = "Number"
    """Use number as the parameter input value (integer or floating point)."""
    BOOLEAN = "Boolean"
    """Use boolean as the parameter input value. False - the value is false, True - the value is true."""
    DURATION = "Duration"
    """Use duration as the parameter input value, using [-]P(n)DT(n)H(n)M(n)S format. For example:
    P3DT4H30M10S (for 3 days, 4 hours, 30 minutes, and 10 seconds)."""
    DATE = "Date"
    """Use date as the parameter input value, using YYYY-MM-DD format."""
    DATE_TIME = "DateTime"
    """Use date time as the parameter input value, using YYYY-MM-DDTHH:mm:ss.FFFZ format."""
    DATE_TIME_ZONE = "DateTimeZone"
    """Use date time zone as the parameter input value, using YYYY-MM-DDTHH:mm:ss.FFF±hh:mm format."""
    TIME = "Time"
    """Use time as the parameter input value, using HH:mm:ss.FFFZ format."""


class DayOfWeek(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Days of the week."""

    MONDAY = "Monday"
    """Monday"""
    TUESDAY = "Tuesday"
    """Tuesday"""
    WEDNESDAY = "Wednesday"
    """Wednesday"""
    THURSDAY = "Thursday"
    """Thursday"""
    FRIDAY = "Friday"
    """Friday"""
    SATURDAY = "Saturday"
    """Saturday"""
    SUNDAY = "Sunday"
    """Sunday"""


class DeploymentPipelineOperationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of the deployment pipeline operation. Additional statuses may be added over time."""

    NOT_STARTED = "NotStarted"
    """The deployment pipeline operation didn't start."""
    RUNNING = "Running"
    """The deployment pipeline operation is running."""
    SUCCEEDED = "Succeeded"
    """The deployment pipeline operation succeeded."""
    FAILED = "Failed"
    """The deployment pipeline operation failed."""


class DeploymentPipelineOperationType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The operation type. Additional types may be added over time."""

    DEPLOY = "Deploy"
    """Deploy content between stages."""


class DeploymentPipelineRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Deployment Pipeline role. Additional Deployment Pipeline roles may be added over time."""

    ADMIN = "Admin"
    """Enables administrative access to the deployment pipeline."""


class Effect(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The effect that a role has on access to the data resource. Currently, the only supported effect
    type is ``Permit``\\ , which grants access to the resource. Additional effect types may be
    added over time.
    """

    PERMIT = "Permit"
    """the effect type Permit"""


class ExternalDataShareAcceptRequestPayloadType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The external data share acceptance type. Additional types may be added over time."""

    SHORTCUT_CREATION = "ShortcutCreation"
    """A OneLake shortcut."""


class ExternalDataSharePathType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of a path in an external data share. Additional ``ExternalDataSharePathType`` types
    may be added over time.
    """

    FOLDER = "Folder"
    """The external data share path is of type: Folder"""
    TABLE = "Table"
    """The external data share path is of type: Table"""


class ExternalDataShareStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of a given external data share. Additional ``ExternalDataShareStatus`` types may be
    added over time.
    """

    PENDING = "Pending"
    """An invitation was created and is now pending acceptance by the recipient."""
    ACTIVE = "Active"
    """The invitation has been accepted by the recipient and the external data share is active."""
    REVOKED = "Revoked"
    """The external data share was revoked."""
    INVITATION_EXPIRED = "InvitationExpired"
    """The invitation expired and can no longer be accepted by the recipient."""


class GatewayRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Gateway role. Additional gateway roles may be added over time."""

    ADMIN = "Admin"
    """Enables administrative access for the gateway."""
    CONNECTION_CREATOR_WITH_RESHARING = "ConnectionCreatorWithResharing"
    """Enables connection creator with resharing access for the gateway."""
    CONNECTION_CREATOR = "ConnectionCreator"
    """Enables connection creator access for the gateway."""


class GatewayType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the gateway. Additional gateway types may be added over time."""

    ON_PREMISES = "OnPremises"
    """The on-premises gateway."""
    ON_PREMISES_PERSONAL = "OnPremisesPersonal"
    """The on-premises gateway (personal mode)."""
    VIRTUAL_NETWORK = "VirtualNetwork"
    """The virtual network gateway."""


class GitConnectionState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Git connection state. Additional connection state types may be added over time."""

    NOT_CONNECTED = "NotConnected"
    """Not connected state."""
    CONNECTED = "Connected"
    """Connected state."""
    CONNECTED_AND_INITIALIZED = "ConnectedAndInitialized"
    """Connected and initialized state."""


class GitCredentialsSource(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The Git credentials source. Additional Git credentials sources may be added over time."""

    CONFIGURED_CONNECTION = "ConfiguredConnection"
    """The Git credentials are obtained through a configured connection."""
    AUTOMATIC = "Automatic"
    """The Git credentials are automatically obtained by the system, using default credentials if
    available."""
    NONE = "None"
    """The Git credentials are not configured."""


class GitProviderType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Git provider type. Additional provider types may be added over time."""

    AZURE_DEV_OPS = "AzureDevOps"
    """Azure DevOps provider"""
    GIT_HUB = "GitHub"
    """GitHub provider"""


class GroupType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the group. Additional group types may be added over time."""

    UNKNOWN = "Unknown"
    """Principal group type is unknown."""
    SECURITY_GROUP = "SecurityGroup"
    """Principal is a security group."""
    DISTRIBUTION_LIST = "DistributionList"
    """Principal is a distribution list."""


class InitializationStrategy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The strategy required for an initialization process when content exists on both the remote side
    and the workspace side. Additional strategies may be added over time.
    """

    NONE = "None"
    """No strategy defined."""
    PREFER_REMOTE = "PreferRemote"
    """Prefer remote Git side content."""
    PREFER_WORKSPACE = "PreferWorkspace"
    """Prefer workspace side content."""


class InvokeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The item job invoke type. Additional invokeTypes may be added over time."""

    SCHEDULED = "Scheduled"
    """Job is scheduled"""
    MANUAL = "Manual"
    """Job is invoked manually"""


class ItemAccess(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ItemAccess."""

    READ = "Read"
    """Item Access Read."""
    WRITE = "Write"
    """Item Access Write."""
    RESHARE = "Reshare"
    """Item Access Reshare."""
    EXPLORE = "Explore"
    """Item Access Explore."""
    EXECUTE = "Execute"
    """Item Access Execute."""
    READ_ALL = "ReadAll"
    """Item Access ReadAll."""


class ItemPreDeploymentDiffState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies if an item is new, different or identical to items in the target stage before
    deployment. Additional states may be added over time.
    """

    NEW = "New"
    """A new deployed item that doesn't exist in the target stage."""
    DIFFERENT = "Different"
    """Before deployment, the item in the source stage wasn't identical to the one in the target
    stage."""
    NO_DIFFERENCE = "NoDifference"
    """Before deployment, the item in the source stage was identical to the one in the target stage."""


class ItemType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the item. Additional item types may be added over time."""

    DASHBOARD = "Dashboard"
    """PowerBI dashboard."""
    REPORT = "Report"
    """PowerBI report."""
    SEMANTIC_MODEL = "SemanticModel"
    """PowerBI semantic model."""
    PAGINATED_REPORT = "PaginatedReport"
    """PowerBI paginated report."""
    DATAMART = "Datamart"
    """PowerBI datamart."""
    LAKEHOUSE = "Lakehouse"
    """A lakehouse."""
    EVENTHOUSE = "Eventhouse"
    """An eventhouse."""
    ENVIRONMENT = "Environment"
    """An environment."""
    KQL_DATABASE = "KQLDatabase"
    """A KQL database."""
    KQL_QUERYSET = "KQLQueryset"
    """A KQL queryset."""
    KQL_DASHBOARD = "KQLDashboard"
    """A KQL dashboard."""
    DATA_PIPELINE = "DataPipeline"
    """A data pipeline."""
    NOTEBOOK = "Notebook"
    """A notebook."""
    SPARK_JOB_DEFINITION = "SparkJobDefinition"
    """A spark job definition."""
    ML_EXPERIMENT = "MLExperiment"
    """A machine learning experiment."""
    ML_MODEL = "MLModel"
    """A machine learning model."""
    WAREHOUSE = "Warehouse"
    """A warehouse."""
    EVENTSTREAM = "Eventstream"
    """An eventstream."""
    SQL_ENDPOINT = "SQLEndpoint"
    """An SQL endpoint."""
    MIRRORED_WAREHOUSE = "MirroredWarehouse"
    """A mirrored warehouse."""
    MIRRORED_DATABASE = "MirroredDatabase"
    """A mirrored database."""
    REFLEX = "Reflex"
    """A Reflex."""
    GRAPH_QL_API = "GraphQLApi"
    """An API for GraphQL item."""
    MOUNTED_DATA_FACTORY = "MountedDataFactory"
    """A MountedDataFactory."""
    APACHE_AIRFLOW_JOB = "ApacheAirflowJob"
    """An ApacheAirflowJob."""
    SQL_DATABASE = "SQLDatabase"
    """A SQLDatabase."""
    COPY_JOB = "CopyJob"
    """A Copy job."""
    VARIABLE_LIBRARY = "VariableLibrary"
    """A VariableLibrary."""
    MIRRORED_AZURE_DATABRICKS_CATALOG = "MirroredAzureDatabricksCatalog"
    """A mirrored azure databricks catalog."""
    DATAFLOW = "Dataflow"
    """A Dataflow."""
    WAREHOUSE_SNAPSHOT = "WarehouseSnapshot"
    """A Warehouse snapshot."""
    DIGITAL_TWIN_BUILDER = "DigitalTwinBuilder"
    """A DigitalTwinBuilder."""
    DIGITAL_TWIN_BUILDER_FLOW = "DigitalTwinBuilderFlow"
    """A Digital Twin Builder Flow."""
    ANOMALY_DETECTOR = "AnomalyDetector"
    """An Anomaly Detector."""
    MAP = "Map"
    """A Map."""
    USER_DATA_FUNCTION = "UserDataFunction"
    """A User Data Function."""


class LoadBalancingSetting(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The load balancing setting of the gateway cluster. Additional load balancing settings may be
    added over time.
    """

    FAILOVER = "Failover"
    """Requests will be sent to the first available gateway cluster member."""
    DISTRIBUTE_EVENLY = "DistributeEvenly"
    """Requests will be distributed evenly among all enabled gateway cluster members."""


class LongRunningOperationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The current status of the operation. Additional operation statuses may be added over time."""

    UNDEFINED = "Undefined"
    """The status of the operation is undefined"""
    NOT_STARTED = "NotStarted"
    """The operation didn't start"""
    RUNNING = "Running"
    """The operation is running"""
    SUCCEEDED = "Succeeded"
    """The operation has finished successfully"""
    FAILED = "Failed"
    """The operation has failed"""


class NetworkAccessRule(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The default option for a network communications policy. Additional network connection defaults
    may be added over time.
    """

    ALLOW = "Allow"
    """Allow all connections."""
    DENY = "Deny"
    """Deny all connections."""


class ObjectType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of Microsoft Entra ID object. Additional objectType types may be added over time."""

    GROUP = "Group"
    """Attribute name Group"""
    USER = "User"
    """Attribute name User"""
    SERVICE_PRINCIPAL = "ServicePrincipal"
    """Attribute name ServicePrincipal"""
    MANAGED_IDENTITY = "ManagedIdentity"
    """Attribute name ManagedIdentity"""


class OccurrenceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """An enumerator that lists the day for triggering jobs. Additional types may be added over time."""

    DAY_OF_MONTH = "DayOfMonth"
    """A date."""
    ORDINAL_WEEKDAY = "OrdinalWeekday"
    """A day."""


class PayloadType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the definition part payload. Additional payload types may be added over time."""

    INLINE_BASE64 = "InlineBase64"
    """Inline Base 64."""


class PrincipalType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the principal. Additional principal types may be added over time."""

    USER = "User"
    """Principal is a Microsoft Entra user principal."""
    SERVICE_PRINCIPAL = "ServicePrincipal"
    """Principal is a Microsoft Entra service principal."""
    GROUP = "Group"
    """Principal is a security group."""
    SERVICE_PRINCIPAL_PROFILE = "ServicePrincipalProfile"
    """Principal is a service principal profile."""
    ENTIRE_TENANT = "EntireTenant"
    """Principal represents all tenant users."""


class PrivacyLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The privacy level setting of the connection. Additional privacy levels may be added over time."""

    NONE = "None"
    """No privacy level setting is configured."""
    PRIVATE = "Private"
    """Connections set to private contain sensitive or confidential information. Visibility can be
    restricted to authorized users. Data from a private connection won't fold in to other
    connections, including other private connections."""
    ORGANIZATIONAL = "Organizational"
    """Connections set to organizational can fold in to private and other organizational connections.
    They can't fold in to public connections. Visibility is set to a trusted group."""
    PUBLIC = "Public"
    """Files, internet connections, and workbook data can be set to public. Data can fold in to other
    connections. Visibility is available to everyone."""


class PrivateEndpointProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """PrivateEndpointProvisioningState type. Additional Provisioning state may be added over time."""

    PROVISIONING = "Provisioning"
    """Private endpoint in provisioning is in-progress"""
    SUCCEEDED = "Succeeded"
    """Private endpoint provisioning Succeeded"""
    UPDATING = "Updating"
    """Private endpoint updating"""
    DELETING = "Deleting"
    """Private endpoint deleting"""
    FAILED = "Failed"
    """Private endpoint provisioning failed"""


class RequiredAction(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Required action after the initialization process has finished. Additional actions may be added
    over time.
    """

    NONE = "None"
    """No action is required."""
    UPDATE_FROM_GIT = "UpdateFromGit"
    """Update from Git is required."""
    COMMIT_TO_GIT = "CommitToGit"
    """Commit to Git is required."""


class ScheduleType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of schedule configuration. Additional types may be added over time."""

    CRON = "Cron"
    """Triggers a job periodically."""
    DAILY = "Daily"
    """Triggers a job daily."""
    WEEKLY = "Weekly"
    """Triggers a job weekly."""
    MONTHLY = "Monthly"
    """Triggers a job monthly."""


class ShortcutConflictPolicy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ShortcutConflictPolicy."""

    ABORT = "Abort"
    """When a shortcut with the same name and path already exists the shortcut creation will be
    cancelled."""
    GENERATE_UNIQUE_NAME = "GenerateUniqueName"
    """When a shortcut with the same name and path already exists the shortcut creation will continue
    with a new unique shortcut name."""
    CREATE_OR_OVERWRITE = "CreateOrOverwrite"
    """When a shortcut with the same name and path already exists the shortcut creation will overwrite
    the existing shortcut. Create shortcut if it does not exist."""
    OVERWRITE_ONLY = "OverwriteOnly"
    """When a shortcut with the same name and path already exists the shortcut creation will overwrite
    the existing shortcut."""


class SingleSignOnType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The single sign-on type of the connection. Additional single sign on types may be added over
    time.
    """

    NONE = "None"
    """Connection does not use single sign-on to connect."""
    KERBEROS = "Kerberos"
    """Connection uses Kerberos single sign-on to connect."""
    MICROSOFT_ENTRA_ID = "MicrosoftEntraID"
    """Connection uses Microsoft Entra ID single sign-on to connect."""
    SECURITY_ASSERTION_MARKUP_LANGUAGE = "SecurityAssertionMarkupLanguage"
    """Connection uses Security Assertion Markup Language (SAML) single sign-on to connect."""
    KERBEROS_DIRECT_QUERY_AND_REFRESH = "KerberosDirectQueryAndRefresh"
    """Connection uses Kerberos DirectQuery and Refresh single sign-on to connect."""


class Status(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of create shortcut. Additional status may be added over time."""

    SUCCEEDED = "Succeeded"
    """The operation has completed successfully."""
    FAILED = "Failed"
    """The operation has failed."""


class TagScopeType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Denotes tag scope. Additional tag scopes may be added over time."""

    TENANT = "Tenant"
    """Tag is a tenant level tag."""
    DOMAIN = "Domain"
    """Tag is a domain level tag."""


class TransformType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of transform. Additional transform types may be added over time."""

    CSV_TO_DELTA = "csvToDelta"
    """Transform CSV files to Delta format."""


class Type(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type object contains properties like target shortcut account type. Additional types may be
    added over time.
    """

    ONE_LAKE = "OneLake"
    """OneLake"""
    AMAZON_S3 = "AmazonS3"
    """AmazonS3"""
    ADLS_GEN2 = "AdlsGen2"
    """AdlsGen2"""
    GOOGLE_CLOUD_STORAGE = "GoogleCloudStorage"
    """GoogleCloudStorage"""
    S3_COMPATIBLE = "S3Compatible"
    """S3Compatible"""
    DATAVERSE = "Dataverse"
    """Dataverse"""
    EXTERNAL_DATA_SHARE = "ExternalDataShare"
    """ExternalDataShare"""
    AZURE_BLOB_STORAGE = "AzureBlobStorage"
    """AzureBlobStorage"""


class WeekIndex(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The week of the month."""

    FIRST = "First"
    """First."""
    SECOND = "Second"
    """Second."""
    THIRD = "Third"
    """Third."""
    FOURTH = "Fourth"
    """Fourth."""
    FIFTH = "Fifth"
    """Fifth."""


class WorkspaceRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A Workspace role. Additional workspace roles may be added over time."""

    ADMIN = "Admin"
    """Enables administrative access to the workspace."""
    MEMBER = "Member"
    """Enables membership access to the workspace."""
    CONTRIBUTOR = "Contributor"
    """Enables contribution to the workspace."""
    VIEWER = "Viewer"
    """Enables viewing of the workspace."""


class WorkspaceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A workspace type. Additional workspace types may be added over time."""

    PERSONAL = "Personal"
    """My folder or My workspace used to manage user items."""
    WORKSPACE = "Workspace"
    """Workspace used to manage the Fabric items."""
    ADMIN_WORKSPACE = "AdminWorkspace"
    """Admin monitoring workspace. Contains admin reports such as the audit report and the usage and
    adoption report."""
