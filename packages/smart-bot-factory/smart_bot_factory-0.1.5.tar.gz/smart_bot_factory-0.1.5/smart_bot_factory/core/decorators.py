"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
"""

import asyncio
import logging
from typing import Callable, Any, Dict
from datetime import datetime, timedelta, timezone
from functools import wraps

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
_event_handlers: Dict[str, Callable] = {}
_scheduled_tasks: Dict[str, Dict[str, Any]] = {}
_global_handlers: Dict[str, Dict[str, Any]] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—É—Ç–µ—Ä–æ–≤
_router_manager = None

def event_handler(event_type: str, notify: bool = False, once_only: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
    
    Args:
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'appointment_booking', 'phone_collection')
        notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        once_only: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    
    Example:
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        @event_handler("appointment_booking", notify=True)
        async def book_appointment(user_id: int, appointment_data: dict):
            # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
            return {"status": "success", "appointment_id": "123"}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
        @event_handler("phone_collection", once_only=False)
        async def collect_phone(user_id: int, phone_data: dict):
            # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            return {"status": "phone_collected"}
    """
    def decorator(func: Callable) -> Callable:
        _event_handlers[event_type] = {
            'handler': func,
            'name': func.__name__,
            'notify': notify,
            'once_only': once_only
        }
        
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}': {func.__name__}")
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                logger.info(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}'")
                result = await func(*args, **kwargs)
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '{event_type}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ notify –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if isinstance(result, dict):
                    result['notify'] = notify
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                    result = {
                        'status': 'success',
                        'result': result,
                        'notify': notify
                    }
                
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '{event_type}': {e}")
                raise
        
        return wrapper
    return decorator

def schedule_task(task_name: str, notify: bool = False, smart_check: bool = True, once_only: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—Ä–µ–º—è
    
    Args:
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'send_reminder', 'follow_up')
        notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        smart_check: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    
    Example:
        # –° —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        @schedule_task("send_reminder", notify=False)
        async def send_reminder(user_id: int, user_data: str):
            # user_data —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ò–ò
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Ñ–æ–Ω–µ)
            return {"status": "sent", "message": user_data}
        
        # –ë–µ–∑ —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        @schedule_task("system_notification", smart_check=False)
        async def system_notification(user_id: int, user_data: str):
            # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ—á–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            return {"status": "sent", "message": user_data}
        
        # –ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
        @schedule_task("recurring_reminder", once_only=False)
        async def recurring_reminder(user_id: int, user_data: str):
            # –ú–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            return {"status": "sent", "message": user_data}
        
        # –ò–ò –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö:
        # {"—Ç–∏–ø": "send_reminder", "–∏–Ω—Ñ–æ": "3600"} - –ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è
        # {"—Ç–∏–ø": "send_reminder", "–∏–Ω—Ñ–æ": "3600|–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É!"} - –≤—Ä–µ–º—è + —Ç–µ–∫—Å—Ç
    """
    def decorator(func: Callable) -> Callable:
        _scheduled_tasks[task_name] = {
            'handler': func,
            'name': func.__name__,
            'notify': notify,
            'smart_check': smart_check,
            'once_only': once_only
        }
        
        logger.info(f"‚è∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ '{task_name}': {func.__name__}")
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                logger.info(f"‚è∞ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É '{task_name}'")
                result = await func(*args, **kwargs)
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ notify –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if isinstance(result, dict):
                    result['notify'] = notify
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                    result = {
                        'status': 'success',
                        'result': result,
                        'notify': notify
                    }
                
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ '{task_name}': {e}")
                raise
        
        return wrapper
    return decorator

def global_handler(handler_type: str, notify: bool = False, once_only: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    
    Args:
        handler_type: –¢–∏–ø –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'global_announcement', 'mass_notification')
        notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    
    Example:
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        @global_handler("global_announcement", notify=True)
        async def send_global_announcement(announcement_text: str):
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω—Å–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            return {"status": "sent", "recipients_count": 150}
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ
        @global_handler("daily_report", once_only=False)
        async def send_daily_report(report_data: str):
            # –ú–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            return {"status": "sent", "report_type": "daily"}
    """
    def decorator(func: Callable) -> Callable:
        _global_handlers[handler_type] = {
            'handler': func,
            'name': func.__name__,
            'notify': notify,
            'once_only': once_only
        }
        
        logger.info(f"üåç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}': {func.__name__}")
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                logger.info(f"üåç –í—ã–ø–æ–ª–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}'")
                result = await func(*args, **kwargs)
                logger.info(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ notify –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if isinstance(result, dict):
                    result['notify'] = notify
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                    result = {
                        'status': 'success',
                        'result': result,
                        'notify': notify
                    }
                
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '{handler_type}': {e}")
                raise
        
        return wrapper
    return decorator

def get_event_handlers() -> Dict[str, Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    return _event_handlers.copy()

def get_scheduled_tasks() -> Dict[str, Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    return _scheduled_tasks.copy()

def get_global_handlers() -> Dict[str, Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    return _global_handlers.copy()

def set_router_manager(router_manager):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    global _router_manager
    _router_manager = router_manager
    logger.info("üîÑ RouterManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ decorators")

def get_router_manager():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    return _router_manager

def get_handlers_for_prompt() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤
    if _router_manager:
        return _router_manager.get_handlers_for_prompt()
    
    # Fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
    if not _event_handlers and not _scheduled_tasks and not _global_handlers:
        return ""
    
    prompt_parts = []
    
    if _event_handlers:
        prompt_parts.append("–î–û–°–¢–£–ü–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô:")
        for event_type, handler_info in _event_handlers.items():
            prompt_parts.append(f"- {event_type}: {handler_info['name']}")
    
    if _scheduled_tasks:
        prompt_parts.append("\n–î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
        for task_name, task_info in _scheduled_tasks.items():
            prompt_parts.append(f"- {task_name}: {task_info['name']}")
    
    if _global_handlers:
        prompt_parts.append("\n–î–û–°–¢–£–ü–ù–´–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:")
        for handler_type, handler_info in _global_handlers.items():
            prompt_parts.append(f"- {handler_type}: {handler_info['name']}")
    
    return "\n".join(prompt_parts)

async def execute_event_handler(event_type: str, *args, **kwargs) -> Any:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø—É"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤
    if _router_manager:
        event_handlers = _router_manager.get_event_handlers()
        if event_type in event_handlers:
            handler_info = event_handlers[event_type]
            return await handler_info['handler'](*args, **kwargs)
    
    # Fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
    if event_type not in _event_handlers:
        raise ValueError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    handler_info = _event_handlers[event_type]
    return await handler_info['handler'](*args, **kwargs)

async def execute_scheduled_task(task_name: str, user_id: int, user_data: str) -> Any:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤
    if _router_manager:
        scheduled_tasks = _router_manager.get_scheduled_tasks()
        if task_name in scheduled_tasks:
            task_info = scheduled_tasks[task_name]
            return await task_info['handler'](user_id, user_data)
    
    # Fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
    if task_name not in _scheduled_tasks:
        raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    task_info = _scheduled_tasks[task_name]
    return await task_info['handler'](user_id, user_data)

async def execute_global_handler(handler_type: str, *args, **kwargs) -> Any:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —Ç–∏–ø—É"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤
    if _router_manager:
        global_handlers = _router_manager.get_global_handlers()
        if handler_type in global_handlers:
            handler_info = global_handlers[handler_type]
            return await handler_info['handler'](*args, **kwargs)
    
    # Fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
    if handler_type not in _global_handlers:
        raise ValueError(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    handler_info = _global_handlers[handler_type]
    return await handler_info['handler'](*args, **kwargs)

async def schedule_task_for_later(task_name: str, delay_seconds: int, user_id: int, user_data: str):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    
    Args:
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
    """
    if task_name not in _scheduled_tasks:
        raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É '{task_name}' —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
    
    async def delayed_task():
        await asyncio.sleep(delay_seconds)
        await execute_scheduled_task(task_name, user_id, user_data)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(delayed_task())
    
    return {
        "status": "scheduled",
        "task_name": task_name,
        "delay_seconds": delay_seconds,
        "scheduled_at": datetime.now().isoformat()
    }

async def execute_scheduled_task_from_event(user_id: int, task_name: str, event_info: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ò–ò
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        event_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ò–ò (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)
    """
    if task_name not in _scheduled_tasks:
        raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    try:
        # –ò–ò –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤—Ä–µ–º—è –≤ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:
        # 1. –ü—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è: "3600" 
        # 2. –í—Ä–µ–º—è —Å –¥–∞–Ω–Ω—ã–º–∏: "3600|–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        
        if '|' in event_info:
            # –§–æ—Ä–º–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            delay_seconds_str, user_data = event_info.split('|', 1)
            delay_seconds = int(delay_seconds_str.strip())
            user_data = user_data.strip()
        else:
            # –ü—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è
            delay_seconds = int(event_info)
            user_data = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥"
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ñ–æ–Ω–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        result = await schedule_task_for_later_with_db(task_name, user_id, user_data, delay_seconds)
        
        return result
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ event_info '{event_info}': {e}")
        # Fallback - –ø–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        return await schedule_task_for_later_with_db(task_name, user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å (fallback)", 3600)

async def schedule_global_handler_for_later(handler_type: str, delay_seconds: int, handler_data: str):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    
    Args:
        handler_type: –¢–∏–ø –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        handler_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
    """
    if handler_type not in _global_handlers:
        raise ValueError(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    logger.info(f"üåç –ü–ª–∞–Ω–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
    
    async def delayed_global_handler():
        await asyncio.sleep(delay_seconds)
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ)
        await execute_global_handler(handler_type, handler_data)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(delayed_global_handler())
    
    return {
        "status": "scheduled",
        "handler_type": handler_type,
        "delay_seconds": delay_seconds,
        "scheduled_at": datetime.now().isoformat()
    }

async def execute_global_handler_from_event(handler_type: str, event_info: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ò–ò
    
    Args:
        handler_type: –¢–∏–ø –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        event_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ò–ò (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –≤—Ä–µ–º—è)
    """
    if handler_type not in _global_handlers:
        raise ValueError(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        # –ò–ò –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–∞—Ä—Å–∏–º –µ–≥–æ
        delay_seconds = int(event_info)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        result = await schedule_global_handler_for_later_with_db(handler_type, delay_seconds, event_info)
        return result
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{handler_type}': {e}")
        # Fallback - –ø–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        return await schedule_global_handler_for_later_with_db(handler_type, 3600, event_info)


# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î –°–û–ë–´–¢–ò–ô
# =============================================================================

def get_supabase_client():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Supabase –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    import sys
    current_module = sys.modules[__name__]
    supabase_client = getattr(current_module, 'supabase_client', None)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ decorators, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ bot_utils
    if not supabase_client:
        try:
            bot_utils_module = sys.modules.get('smart_bot_factory.core.bot_utils')
            if bot_utils_module:
                supabase_client = getattr(bot_utils_module, 'supabase_client', None)
        except:
            pass
    
    return supabase_client

async def save_immediate_event(
    event_type: str,
    user_id: int,
    event_data: str,
    session_id: str = None
) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    supabase_client = get_supabase_client()
    if not supabase_client:
        logger.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise RuntimeError("Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ fallback
    if _router_manager:
        event_handlers = _router_manager.get_event_handlers()
        event_handler_info = event_handlers.get(event_type, {})
    else:
        event_handler_info = _event_handlers.get(event_type, {})
    once_only = event_handler_info.get('once_only', True)
    
    if once_only:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        already_processed = await check_event_already_processed(event_type, user_id, session_id)
        if already_processed:
            logger.info(f"üîÑ –°–æ–±—ã—Ç–∏–µ '{event_type}' —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            raise ValueError(f"–°–æ–±—ã—Ç–∏–µ '{event_type}' —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å (once_only=True)")
    
    event_record = {
        'event_type': event_type,
        'event_category': 'user_event',
        'user_id': user_id,
        'event_data': event_data,
        'scheduled_at': None,  # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        'status': 'immediate',
        'session_id': session_id
    }
    
    try:
        response = supabase_client.client.table('scheduled_events').insert(event_record).execute()
        event_id = response.data[0]['id']
        logger.info(f"üíæ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {event_id}")
        return event_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –ë–î: {e}")
        raise

async def save_scheduled_task(
    task_name: str,
    user_id: int,
    user_data: str,
    delay_seconds: int,
    session_id: str = None
) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
    
    supabase_client = get_supabase_client()
    if not supabase_client:
        logger.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise RuntimeError("Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ fallback
    if _router_manager:
        scheduled_tasks = _router_manager.get_scheduled_tasks()
        task_info = scheduled_tasks.get(task_name, {})
    else:
        task_info = _scheduled_tasks.get(task_name, {})
    once_only = task_info.get('once_only', True)
    
    if once_only:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞
        already_processed = await check_event_already_processed(task_name, user_id, session_id)
        if already_processed:
            logger.info(f"üîÑ –ó–∞–¥–∞—á–∞ '{task_name}' —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ (once_only=True)")
    
    scheduled_at = datetime.now(timezone.utc) + timedelta(seconds=delay_seconds)
    
    event_record = {
        'event_type': task_name,
        'event_category': 'scheduled_task',
        'user_id': user_id,
        'event_data': user_data,
        'scheduled_at': scheduled_at.isoformat(),
        'status': 'pending',
        'session_id': session_id
    }
    
    try:
        response = supabase_client.client.table('scheduled_events').insert(event_record).execute()
        event_id = response.data[0]['id']
        logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {event_id} (—á–µ—Ä–µ–∑ {delay_seconds}—Å)")
        return event_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –ë–î: {e}")
        raise

async def save_global_event(
    handler_type: str,
    handler_data: str,
    delay_seconds: int = 0
) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
    
    supabase_client = get_supabase_client()
    if not supabase_client:
        logger.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise RuntimeError("Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ fallback
    if _router_manager:
        global_handlers = _router_manager.get_global_handlers()
        handler_info = global_handlers.get(handler_type, {})
    else:
        handler_info = _global_handlers.get(handler_type, {})
    once_only = handler_info.get('once_only', True)
    
    if once_only:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        already_processed = await check_event_already_processed(handler_type, user_id=None)
        if already_processed:
            logger.info(f"üîÑ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ '{handler_type}' —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            raise ValueError(f"–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ '{handler_type}' —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (once_only=True)")
    
    scheduled_at = None
    status = 'immediate'
    
    if delay_seconds > 0:
        scheduled_at = datetime.now(timezone.utc) + timedelta(seconds=delay_seconds)
        status = 'pending'
    
    event_record = {
        'event_type': handler_type,
        'event_category': 'global_handler',
        'user_id': None,  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        'event_data': handler_data,
        'scheduled_at': scheduled_at.isoformat() if scheduled_at else None,
        'status': status
    }
    
    try:
        response = supabase_client.client.table('scheduled_events').insert(event_record).execute()
        event_id = response.data[0]['id']
        logger.info(f"üåç –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {event_id}")
        return event_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î: {e}")
        raise

async def update_event_result(
    event_id: str,
    status: str,
    result_data: Any = None,
    error_message: str = None
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    
    supabase_client = get_supabase_client()
    if not supabase_client:
        logger.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    update_data = {
        'status': status,
        'executed_at': datetime.now(timezone.utc).isoformat()
    }
    
    if result_data:
        import json
        update_data['result_data'] = json.dumps(result_data, ensure_ascii=False)
    
    if error_message:
        update_data['last_error'] = error_message
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        try:
            current_retry = supabase_client.client.table('scheduled_events').select('retry_count').eq('id', event_id).execute().data[0]['retry_count']
            update_data['retry_count'] = current_retry + 1
        except:
            update_data['retry_count'] = 1
    
    try:
        supabase_client.client.table('scheduled_events').update(update_data).eq('id', event_id).execute()
        logger.info(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")

async def get_pending_events(limit: int = 50) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"""
    
    supabase_client = get_supabase_client()
    if not supabase_client:
        logger.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    try:
        now = datetime.now(timezone.utc).isoformat()
        
        response = supabase_client.client.table('scheduled_events')\
            .select('*')\
            .in_('status', ['pending', 'immediate'])\
            .or_(f'scheduled_at.is.null,scheduled_at.lte.{now}')\
            .order('created_at')\
            .limit(limit)\
            .execute()
        
        return response.data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î: {e}")
        return []

async def background_event_processor():
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
            pending_events = await get_pending_events(limit=50)
            
            if pending_events:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(pending_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                for event in pending_events:
                    try:
                        await process_scheduled_event(event)
                        await update_event_result(event['id'], 'completed', {"processed": True})
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event['id']}: {e}")
                        await update_event_result(event['id'], 'failed', None, str(e))
            
            await asyncio.sleep(30)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {e}")
            await asyncio.sleep(60)

async def process_scheduled_event(event: Dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ë–î"""
    
    event_type = event['event_type']
    event_category = event['event_category']
    event_data = event['event_data']
    user_id = event.get('user_id')
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {event['id']}: {event_category}/{event_type}")
    
    if event_category == 'scheduled_task':
        await execute_scheduled_task(event_type, user_id, event_data)
    elif event_category == 'global_handler':
        await execute_global_handler(event_type, event_data)
    elif event_category == 'user_event':
        await execute_event_handler(event_type, user_id, event_data)
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏—è: {event_category}")

# =============================================================================
# –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í –ë–î
# =============================================================================

async def schedule_task_for_later_with_db(task_name: str, user_id: int, user_data: str, delay_seconds: int, session_id: str = None):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
    if _router_manager:
        scheduled_tasks = _router_manager.get_scheduled_tasks()
        if task_name not in scheduled_tasks:
            raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        if task_name not in _scheduled_tasks:
            raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É '{task_name}' —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    event_id = await save_scheduled_task(task_name, user_id, user_data, delay_seconds, session_id)
    
    async def delayed_task():
        await asyncio.sleep(delay_seconds)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        task_info = _scheduled_tasks.get(task_name, {})
        use_smart_check = task_info.get('smart_check', True)
        
        if use_smart_check:
            # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            try:
                result = await smart_execute_check(event_id, user_id, session_id, task_name, user_data)
                if result['action'] == 'execute':
                    await execute_scheduled_task(task_name, user_id, user_data)
                    await update_event_result(event_id, 'completed', {"executed": True, "reason": "scheduled_execution"})
                elif result['action'] == 'cancel':
                    await update_event_result(event_id, 'cancelled', {"reason": result['reason']})
                elif result['action'] == 'reschedule':
                    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
                    new_delay = result['new_delay']
                    await update_event_result(event_id, 'rescheduled', {
                        "new_delay": new_delay,
                        "reason": result['reason']
                    })
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                    await asyncio.sleep(new_delay)
                    await execute_scheduled_task(task_name, user_id, user_data)
                    await update_event_result(event_id, 'completed', {"executed": True, "reason": "rescheduled_execution"})
                    
            except Exception as e:
                await update_event_result(event_id, 'failed', None, str(e))
                raise
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                await execute_scheduled_task(task_name, user_id, user_data)
                await update_event_result(event_id, 'completed', {"executed": True, "reason": "simple_execution"})
            except Exception as e:
                await update_event_result(event_id, 'failed', None, str(e))
                raise
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(delayed_task())
    
    return {
        "status": "scheduled",
        "task_name": task_name,
        "delay_seconds": delay_seconds,
        "event_id": event_id,
        "scheduled_at": datetime.now(timezone.utc).isoformat()
    }

async def schedule_global_handler_for_later_with_db(handler_type: str, delay_seconds: int, handler_data: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
    if _router_manager:
        global_handlers = _router_manager.get_global_handlers()
        if handler_type not in global_handlers:
            raise ValueError(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        if handler_type not in _global_handlers:
            raise ValueError(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    logger.info(f"üåç –ü–ª–∞–Ω–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}' —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    event_id = await save_global_event(handler_type, handler_data, delay_seconds)
    
    async def delayed_global_handler():
        await asyncio.sleep(delay_seconds)
        try:
            await execute_global_handler(handler_type, handler_data)
            await update_event_result(event_id, 'completed', {"executed": True})
        except Exception as e:
            await update_event_result(event_id, 'failed', None, str(e))
            raise
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(delayed_global_handler())
    
    return {
        "status": "scheduled",
        "handler_type": handler_type,
        "delay_seconds": delay_seconds,
        "event_id": event_id,
        "scheduled_at": datetime.now(timezone.utc).isoformat()
    }

async def smart_execute_check(event_id: str, user_id: int, session_id: str, task_name: str, user_data: str) -> Dict[str, Any]:
    """
    –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    
    –õ–æ–≥–∏–∫–∞:
    1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –Ω–æ–≤—ã–π —ç—Ç–∞–ø - –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    2. –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–æ—Å—å - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É
    3. –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ - –≤—ã–ø–æ–ª–Ω—è–µ–º
    
    Returns:
        Dict —Å action: 'execute', 'cancel', 'reschedule'
    """
    supabase_client = get_supabase_client()
    if not supabase_client:
        logger.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return {"action": "execute", "reason": "no_supabase_client"}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await supabase_client.get_user_last_message_info(user_id)
        
        if not user_info:
            logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É")
            return {"action": "execute", "reason": "user_not_found"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —ç—Ç–∞–ø
        stage_changed = await supabase_client.check_user_stage_changed(user_id, session_id)
        if stage_changed:
            logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –Ω–æ–≤—ã–π —ç—Ç–∞–ø, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É {task_name}")
            return {"action": "cancel", "reason": "user_stage_changed"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –ë–î
        event_response = supabase_client.client.table('scheduled_events').select(
            'created_at', 'scheduled_at'
        ).eq('id', event_id).execute()
        
        if not event_response.data:
            logger.error(f"‚ùå –°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            return {"action": "execute", "reason": "event_not_found"}
        
        event = event_response.data[0]
        created_at = datetime.fromisoformat(event['created_at'].replace('Z', '+00:00'))
        scheduled_at = datetime.fromisoformat(event['scheduled_at'].replace('Z', '+00:00'))
        last_message_at = datetime.fromisoformat(user_info['last_message_at'].replace('Z', '+00:00'))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        now = datetime.now(timezone.utc)
        time_since_creation = (now - created_at).total_seconds()
        time_since_last_message = (now - last_message_at).total_seconds()
        planned_delay = (scheduled_at - created_at).total_seconds()
        
        logger.info(f"üîÑ –ê–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        logger.info(f"   –í—Ä–µ–º—è —Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {time_since_creation:.0f}—Å")
        logger.info(f"   –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {time_since_last_message:.0f}—Å")
        logger.info(f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {planned_delay:.0f}—Å")
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–æ—Å—å, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –ø–∏—Å–∞–ª
        if time_since_creation < planned_delay and time_since_last_message < planned_delay:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ planned_delay –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_delay = max(0, planned_delay - time_since_last_message)
            logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á—É –Ω–∞ {new_delay:.0f}—Å (—á–µ—Ä–µ–∑ {planned_delay:.0f}—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)")
            return {
                "action": "reschedule", 
                "new_delay": new_delay,
                "reason": f"user_active_recently_{new_delay:.0f}s_delay"
            }
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ - –≤—ã–ø–æ–ª–Ω—è–µ–º
        if time_since_creation >= planned_delay:
            logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É {task_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return {"action": "execute", "reason": "time_expired"}
        
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ - –≤—ã–ø–æ–ª–Ω—è–µ–º
        logger.info(f"üîÑ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É {task_name}")
        return {"action": "execute", "reason": "unexpected_situation"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {"action": "execute", "reason": f"error_in_check: {str(e)}"}

async def check_event_already_processed(event_type: str, user_id: int = None, session_id: str = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π event_type –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–µ—Å—Å–∏–∏
    
    Args:
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è user_event –∏ scheduled_task)
        session_id: ID —Å–µ—Å—Å–∏–∏ (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    
    Returns:
        True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    """
    supabase_client = get_supabase_client()
    if not supabase_client:
        logger.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        query = supabase_client.client.table('scheduled_events').select('id').eq('event_type', event_type)
        
        # –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (user_id = None)
        if user_id is None:
            query = query.is_('user_id', 'null')
        else:
            query = query.eq('user_id', user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (pending, immediate, completed)
        query = query.in_('status', ['pending', 'immediate', 'completed'])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å session_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ–∏–ª—å—Ç—Ä
        if session_id:
            query = query.eq('session_id', session_id)
        
        response = query.execute()
        
        if response.data:
            logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è '{event_type}'")
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è '{event_type}': {e}")
        return False