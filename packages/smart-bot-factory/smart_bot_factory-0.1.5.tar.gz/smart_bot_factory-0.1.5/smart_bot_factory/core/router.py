"""
–†–æ—É—Ç–µ—Ä –¥–ª—è Smart Bot Factory - –∞–Ω–∞–ª–æ–≥ aiogram Router
"""

from typing import Dict, List, Any, Callable, Optional
import logging

logger = logging.getLogger(__name__)

class Router:
    """
    –†–æ—É—Ç–µ—Ä –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π, –∑–∞–¥–∞—á –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    
    def __init__(self, name: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
        
        Args:
            name: –ò–º—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.name = name or f"Router_{id(self)}"
        self._event_handlers: Dict[str, Dict[str, Any]] = {}
        self._scheduled_tasks: Dict[str, Dict[str, Any]] = {}
        self._global_handlers: Dict[str, Dict[str, Any]] = {}
        
        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω —Ä–æ—É—Ç–µ—Ä: {self.name}")
    
    def event_handler(self, event_type: str, notify: bool = False, once_only: bool = True):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–æ—É—Ç–µ—Ä–µ
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤
            once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        """
        def decorator(func: Callable) -> Callable:
            self._event_handlers[event_type] = {
                'handler': func,
                'name': func.__name__,
                'notify': notify,
                'once_only': once_only,
                'router': self.name
            }
            
            logger.info(f"üìù –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}': {func.__name__}")
            
            from functools import wraps
            @wraps(func)
            async def wrapper(*args, **kwargs):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{event_type}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}")
                    raise
            return wrapper
        return decorator
    
    def schedule_task(self, task_name: str, notify: bool = False, smart_check: bool = True, once_only: bool = True):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ
        
        Args:
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤
            smart_check: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        """
        def decorator(func: Callable) -> Callable:
            self._scheduled_tasks[task_name] = {
                'handler': func,
                'name': func.__name__,
                'notify': notify,
                'smart_check': smart_check,
                'once_only': once_only,
                'router': self.name
            }
            
            logger.info(f"‚è∞ –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ '{task_name}': {func.__name__}")
            
            from functools import wraps
            @wraps(func)
            async def wrapper(*args, **kwargs):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ '{task_name}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}")
                    raise
            return wrapper
        return decorator
    
    def global_handler(self, handler_type: str, notify: bool = False, once_only: bool = True):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ä–æ—É—Ç–µ—Ä–µ
        
        Args:
            handler_type: –¢–∏–ø –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤
            once_only: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        """
        def decorator(func: Callable) -> Callable:
            self._global_handlers[handler_type] = {
                'handler': func,
                'name': func.__name__,
                'notify': notify,
                'once_only': once_only,
                'router': self.name
            }
            
            logger.info(f"üåç –†–æ—É—Ç–µ—Ä {self.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{handler_type}': {func.__name__}")
            
            from functools import wraps
            @wraps(func)
            async def wrapper(*args, **kwargs):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ '{handler_type}' –≤ —Ä–æ—É—Ç–µ—Ä–µ {self.name}: {e}")
                    raise
            return wrapper
        return decorator
    
    def get_event_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–æ—É—Ç–µ—Ä–∞"""
        return self._event_handlers.copy()
    
    def get_scheduled_tasks(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–æ—É—Ç–µ—Ä–∞"""
        return self._scheduled_tasks.copy()
    
    def get_global_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞"""
        return self._global_handlers.copy()
    
    def get_all_handlers(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞"""
        all_handlers = {}
        all_handlers.update(self._event_handlers)
        all_handlers.update(self._scheduled_tasks)
        all_handlers.update(self._global_handlers)
        return all_handlers
    
    def include_router(self, router: 'Router'):
        """
        –í–∫–ª—é—á–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ä–æ—É—Ç–µ—Ä –≤ —Ç–µ–∫—É—â–∏–π
        
        Args:
            router: –†–æ—É—Ç–µ—Ä –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        for event_type, handler_info in router.get_event_handlers().items():
            if event_type in self._event_handlers:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π '{event_type}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {self.name} –∏ {router.name}")
            self._event_handlers[event_type] = handler_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task_name, task_info in router.get_scheduled_tasks().items():
            if task_name in self._scheduled_tasks:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–¥–∞—á '{task_name}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {self.name} –∏ {router.name}")
            self._scheduled_tasks[task_name] = task_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler_type, handler_info in router.get_global_handlers().items():
            if handler_type in self._global_handlers:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ '{handler_type}' –º–µ–∂–¥—É —Ä–æ—É—Ç–µ—Ä–∞–º–∏ {self.name} –∏ {router.name}")
            self._global_handlers[handler_type] = handler_info
        
        logger.info(f"üîó –†–æ—É—Ç–µ—Ä {self.name}: –≤–∫–ª—é—á–µ–Ω —Ä–æ—É—Ç–µ—Ä {router.name}")
    
    def __repr__(self):
        return f"Router(name='{self.name}', events={len(self._event_handlers)}, tasks={len(self._scheduled_tasks)}, globals={len(self._global_handlers)})"
