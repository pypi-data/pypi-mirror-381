from typing import TYPE_CHECKING, Any

from flask_principal import Identity
from invenio_rdm_records.records.api import RDMDraft, RDMRecord
from invenio_records_resources.references.entity_resolvers import (
    EntityProxy,
    EntityResolver,
    RecordProxy,
    RecordResolver,
    ServiceResultProxy,
    ServiceResultResolver,
)

if TYPE_CHECKING:
    pass

class RDMRecordProxy(RecordProxy):
    def _get_record(self, pid_value: str) -> RDMRecord: ...
    def _resolve(self) -> RDMDraft | RDMRecord: ...
    def ghost_record(self, record: str) -> dict[str, str]: ...
    def get_needs(self, ctx: dict[str, Any] | None = ...) -> list[Any]: ...

class RDMRecordResolver(RecordResolver):
    type_id: str
    def __init__(self) -> None: ...
    def matches_entity(self, entity: Any) -> bool: ...

class RDMRecordServiceResultProxy(ServiceResultProxy):
    def _get_record(self, pid_value: str) -> Any: ...
    def _resolve(self) -> dict[str, Any]: ...

class RDMRecordServiceResultResolver(ServiceResultResolver):
    def __init__(self) -> None: ...
    def _reference_entity(self, entity: Any) -> dict[str, str]: ...
    @property
    def draft_cls(self): ...
    def matches_entity(self, entity: Any) -> bool: ...

class EmailProxy(EntityProxy):
    def _resolve(self) -> str: ...
    def ghost_record(self, value: str) -> str: ...
    def system_record(self) -> dict[str, Any]: ...
    def get_needs(self, ctx: dict[str, Any] | None = ...) -> list[Any]: ...
    def pick_resolved_fields(
        self, identity: Identity, resolved_dict: dict[str, Any]
    ) -> dict[str, Any]: ...

class EmailResolver(EntityResolver):
    type_id: str
    type_key: str
    def __init__(self) -> None: ...
    def matches_reference_dict(self, ref_dict: dict[str, Any]) -> bool: ...
    def matches_entity(self, entity: Any) -> bool: ...
    def _get_entity_proxy(self, ref_dict: dict[str, Any]) -> EmailProxy: ...
    def _reference_entity(self, entity: str) -> dict[str, str]: ...
    def get_service(
        self,
    ) -> Any: ...  # keep typing: Service at runtime; DummyExpandingService in this impl
