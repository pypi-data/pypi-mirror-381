from typing import Any, Generic, List, TypeVar

from flask_principal import Identity
from invenio_drafts_resources.services.records import RecordService
from invenio_drafts_resources.services.records.config import RecordServiceConfig
from invenio_rdm_records.services.pids.manager import PIDManager
from invenio_records_resources.services.records.results import RecordItem

C = TypeVar("C", bound=RecordServiceConfig)

class PIDsService(RecordService[C], Generic[C]):
    def __init__(self, config: Any, manager_cls: type) -> None: ...
    @property
    def expandable_fields(self) -> List[Any]: ...
    @property
    def _manager(self) -> type[PIDManager]: ...
    @property
    def pid_manager(self) -> PIDManager: ...
    @property
    def parent_pid_manager(self) -> PIDManager: ...
    def resolve(
        self, identity: Identity, id_: str, scheme: str, expand: bool = ...
    ) -> RecordItem: ...
    def create(self, *args: Any, **kwargs: Any) -> RecordItem: ...
    def update(self, *args: Any, **kwargs: Any) -> RecordItem: ...
    def reserve(self, *args: Any, **kwargs: Any) -> RecordItem: ...
    def register_or_update(self, *args: Any, **kwargs: Any) -> RecordItem: ...
    def discard(self, *args: Any, **kwargs: Any) -> RecordItem: ...
    def invalidate(self, *args: Any, **kwargs: Any) -> None: ...
