from __future__ import annotations

from typing import Any

from flask_resources.serializers.base import BaseSerializer

class Line:
    _line: str | None

    def __init__(self) -> None: ...
    def write(self, line: str) -> None: ...
    def read(self) -> str | None: ...

class CSVSerializer(BaseSerializer):
    csv_excluded_fields: list[str]
    csv_included_fields: list[str]
    header_separator: str
    collapse_lists: bool

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def serialize_object(self, obj: Any) -> str: ...
    def serialize_object_list(self, obj_list: Any) -> str: ...
    def process_dict(self, dictionary: dict[str, Any]) -> dict[str, Any]: ...
    def _format_csv(self, records: list[dict[str, Any]]) -> str: ...
    def _flatten(self, value: Any, parent_key: str = ...) -> dict[str, Any]: ...
    def _flatten_list_dict(
        self, value: list[Any], parent_key: str = ...
    ) -> dict[str, str]: ...
    def _flatten_list_dict_dict(
        self, value: list[dict[str, Any]], parent_key: str = ...
    ) -> dict[str, str]: ...
    def is_field_included(self, key: str) -> bool: ...
    def key_in_field(self, key: str, fields: list[str]) -> bool: ...

__all__ = ("CSVSerializer",)
