import abc
from abc import ABC, abstractmethod
from typing import Any, Optional

from flask_principal import ItemNeed, Need
from invenio_records_resources.proxies import (
    current_service_registry as current_service_registry,
)
from invenio_records_resources.services.base import Service

def _parse_ref_dict(
    reference_dict: dict[str, Any], strict: bool = ...
) -> Optional[tuple[str, Any]]: ...

class EntityProxy(ABC, metaclass=abc.ABCMeta):
    _resolver: EntityResolver
    _ref_dict: dict[str, Any]
    _entity: Any | None

    def __init__(
        self, resolver: EntityResolver, reference_dict: dict[str, Any]
    ) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def reference_dict(self) -> dict[str, Any]: ...
    def resolve(self) -> Any: ...
    @abstractmethod
    def _resolve(self) -> Any: ...
    def _parse_ref_dict(self) -> Optional[tuple[str, Any]]: ...
    def _parse_ref_dict_type(self) -> str: ...
    def _parse_ref_dict_id(self) -> Any: ...
    @abstractmethod
    def get_needs(self, ctx: Any | None = None) -> list[Need | ItemNeed]: ...
    def get_resolver(self) -> EntityResolver: ...
    @abstractmethod
    def pick_resolved_fields(
        self, identity: Any, resolved_dict: dict[str, Any]
    ) -> dict[str, Any]: ...

class EntityResolver(ABC, metaclass=abc.ABCMeta):
    _service_id: str

    def __init__(self, service_id: str) -> None: ...
    def _parse_ref_dict(
        self, ref_dict: dict[str, Any]
    ) -> Optional[tuple[str, Any]]: ...
    def _parse_ref_dict_type(self, ref_dict: dict[str, Any]) -> str: ...
    def _parse_ref_dict_id(self, ref_dict: dict[str, Any]) -> Any: ...
    def get_entity_proxy(
        self, ref_dict: dict[str, Any], check: bool = True
    ) -> EntityProxy: ...
    def reference_entity(self, entity: Any, check: bool = True) -> dict[str, Any]: ...
    @abstractmethod
    def matches_reference_dict(self, ref_dict: dict[str, Any]) -> bool: ...
    @abstractmethod
    def matches_entity(self, entity: Any) -> bool: ...
    @abstractmethod
    def _get_entity_proxy(self, ref_dict: dict[str, Any]) -> EntityProxy: ...
    @abstractmethod
    def _reference_entity(self, entity: Any) -> dict[str, Any]: ...
    def get_service(self) -> Service: ...
