from typing import Any, List, Optional, Sequence

from flask_principal import Identity, Need
from invenio_records_permissions.generators import Generator
from invenio_requests.proxies import current_requests as current_requests

class Status(Generator):
    def __init__(self, statuses: List[str], generators: List[Generator]) -> None: ...
    def needs(self, request=None, **kwargs: Any) -> Sequence[Need]: ...
    def query_filter(
        self, identity: Optional[Identity] = None, **kwargs: Any
    ) -> Optional[Any]: ...

class EntityNeedsGenerator(Generator):
    entity_field: str
    grants_field: str
    def __init__(self) -> None: ...
    def needs(self, request=None, **kwargs: Any) -> Sequence[Need]: ...
    def query_filter(
        self, identity: Optional[Identity] = None, **kwargs: Any
    ) -> Optional[Any]: ...

class Creator(EntityNeedsGenerator): ...
class Receiver(EntityNeedsGenerator): ...

class Topic(EntityNeedsGenerator):
    def needs(self, request=None, **kwargs: Any) -> Sequence[Need]: ...
    def query_filter(
        self, identity: Optional[Identity] = None, **kwargs: Any
    ) -> Optional[Any]: ...

class Reviewers(EntityNeedsGenerator):
    def _reviewers_enabled(self) -> bool: ...
    def needs(self, request=None, **kwargs: Any) -> Sequence[Need]: ...
    def query_filter(
        self, identity: Optional[Identity] = None, **kwargs: Any
    ) -> Optional[Any]: ...

class Commenter(Generator):
    def needs(self, event=None, request=None, **kwargs: Any) -> Sequence[Need]: ...
    def query_filter(
        self, identity: Optional[Identity] = None, **kwargs: Any
    ) -> None: ...
