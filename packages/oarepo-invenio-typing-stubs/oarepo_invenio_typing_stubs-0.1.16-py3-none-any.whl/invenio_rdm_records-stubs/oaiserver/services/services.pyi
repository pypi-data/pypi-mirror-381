from typing import Any

from invenio_db.uow import UnitOfWork
from invenio_records_resources.services import Service
from invenio_records_resources.services.base import LinksTemplate
from invenio_records_resources.services.records.schema import ServiceSchemaWrapper

class OAIPagination:
    def _query_items(self) -> list[Any]: ...
    def _query_count(self) -> int: ...

class OAIPMHServerService(Service):
    extra_reserved_prefixes: dict[str, Any]

    def __init__(
        self, config, extra_reserved_prefixes: dict[str, Any] | None = None
    ) -> None: ...
    @property
    def schema(self) -> ServiceSchemaWrapper: ...
    @property
    def links_item_tpl(self) -> LinksTemplate: ...
    @property
    def reserved_prefixes(self) -> set[str]: ...
    def _get_one(
        self, raise_error: bool = True, **kwargs
    ) -> tuple[Any | None, list[str]]: ...
    def _validate_spec(self, spec: str) -> None: ...
    def create(
        self, identity, data: dict[str, Any], uow: UnitOfWork | None = None
    ) -> Any: ...
    def read(self, identity, id_: int) -> Any: ...
    def search(self, identity, params: dict[str, Any]) -> Any: ...
    def update(
        self, identity, id_: int, data: dict[str, Any], uow: UnitOfWork | None = None
    ) -> Any: ...
    def delete(self, identity, id_: int, uow: UnitOfWork | None = None) -> bool: ...
    def read_all_formats(self, identity) -> Any: ...
    def rebuild_index(self, identity) -> bool: ...
