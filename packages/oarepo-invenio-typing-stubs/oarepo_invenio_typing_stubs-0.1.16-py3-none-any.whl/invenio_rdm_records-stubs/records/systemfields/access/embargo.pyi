from __future__ import annotations

from datetime import datetime
from typing import Any

class Embargo:
    """Embargo class for the access system field."""

    until: datetime | None
    reason: str | None
    _active: bool | None

    def __init__(
        self,
        until: datetime | str | None = ...,
        reason: str | None = ...,
        active: bool | None = ...,
    ) -> None: ...
    @property
    def active(self) -> bool: ...
    @active.setter
    def active(self, value: bool) -> None: ...
    def _lift(self) -> bool: ...
    def clear(self) -> None: ...
    def dump(self) -> dict[str, Any]: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def from_dict(
        cls, dict_: dict[str, Any] | None, ignore_active_value: bool = ...
    ) -> Embargo: ...
