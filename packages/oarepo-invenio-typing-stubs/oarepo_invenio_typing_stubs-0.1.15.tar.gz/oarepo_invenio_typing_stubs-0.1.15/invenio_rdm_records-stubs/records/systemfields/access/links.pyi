from __future__ import annotations

from datetime import date, datetime
from typing import Any, Iterable

from invenio_rdm_records.secret_links.models import SecretLink

class Link:
    """An abstraction between SecretLink entities and dict representations."""

    _entity: SecretLink | None
    link_id: str | None

    def __init__(self, link: dict[str, Any] | SecretLink) -> None: ...
    def dump(self) -> dict[str, str]: ...
    def resolve(self, raise_exc: bool = ...) -> SecretLink | None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class Links(list[Link]):
    """List of links for various permission levels on a record."""

    link_cls: type[Link]

    def __init__(
        self, grants: Iterable[dict[str, Any] | SecretLink] | None = ...
    ) -> None: ...
    def append(self, link: Link | dict[str, Any] | SecretLink) -> None: ...
    def add(self, link: Link | dict[str, Any] | SecretLink) -> None: ...
    def extend(self, links: Iterable[Link | dict[str, Any] | SecretLink]) -> None: ...
    def remove(self, link: Link | dict[str, Any] | SecretLink) -> None: ...
    def create(
        self,
        permission_level: str,
        origin: str | None = ...,
        description: str | None = ...,
        extra_data: dict[str, Any] | None = ...,
        expires_at: date | datetime | None = ...,
    ) -> SecretLink: ...
    def resolve_all(self) -> list[SecretLink]: ...
    def needs(self, permission: str) -> list[Any]: ...
    def dump(self) -> list[dict[str, str]]: ...
