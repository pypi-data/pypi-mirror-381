from __future__ import annotations

from enum import Enum
from typing import Any

class Visibility(Enum):
    PUBLIC = "public"
    RESTRICTED = "restricted"

class Protection:
    """Protection class for the access system field."""

    _record: Visibility
    _files: Visibility

    def __init__(
        self, record: str | Visibility = ..., files: str | Visibility = ...
    ) -> None: ...
    @property
    def record(self) -> str: ...
    @record.setter
    def record(self, value: str | Visibility) -> None: ...
    @property
    def files(self) -> str: ...
    @files.setter
    def files(self, value: str | Visibility) -> None: ...
    def set(
        self, record: str | Visibility, files: str | Visibility | None = ...
    ) -> None: ...
    def __get__(self) -> dict[str, str]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
