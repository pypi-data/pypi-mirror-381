from __future__ import annotations

from typing import Any

from invenio_records.systemfields import SystemField

class Tombstone:
    _removal_reason: dict[str, Any] | None
    _note: str
    _removed_by: dict[str, Any] | None
    _removal_date: str | None
    _citation_text: str
    _is_visible: bool

    def __init__(self, data: dict[str, Any]): ...
    @property
    def removal_reason(self) -> dict[str, Any] | None: ...
    @removal_reason.setter
    def removal_reason(self, value: dict[str, Any] | str | None) -> None: ...
    @property
    def note(self) -> str: ...
    @note.setter
    def note(self, value: str | None) -> None: ...
    @property
    def removed_by(self) -> dict[str, Any] | None: ...
    @removed_by.setter
    def removed_by(self, value: Any | None) -> None: ...
    @property
    def removal_date(self) -> str | None: ...
    @removal_date.setter
    def removal_date(self, value: Any | None) -> None: ...
    @property
    def citation_text(self) -> str: ...
    @citation_text.setter
    def citation_text(self, value: str | None) -> None: ...
    @property
    def is_visible(self) -> bool: ...
    @is_visible.setter
    def is_visible(self, value: Any) -> None: ...
    @property
    def removed_by_proxy(self) -> Any | None: ...
    def dump(self) -> dict[str, Any]: ...
    def __repr__(self) -> str: ...

class TombstoneField(SystemField):
    def mark_to_be_removed(self, instance) -> None: ...
    def is_marked_to_be_removed(self, instance) -> bool: ...
    def __get__(self, record, owner=None): ...
    def get_obj(self, record, owner=None): ...
    def __set__(self, record, value) -> None: ...
    def set_obj(self, record, value) -> None: ...
    def __delete__(self, record) -> None: ...
    def pre_commit(self, record) -> None: ...
