from typing import Any

from invenio_pidstore.models import PersistentIdentifier
from invenio_rdm_records.records.api import RDMDraft, RDMRecord
from invenio_rdm_records.services.pids.providers.base import PIDProvider

class PIDManager:
    def __init__(
        self, providers: dict[str, Any], required_schemes: list[str] | None = ...
    ) -> None: ...
    def _get_provider(
        self, scheme: str, provider_name: str | None = ...
    ) -> PIDProvider: ...
    def _get_providers(
        self, pids: dict[str, dict[str, Any]]
    ) -> list[tuple[PIDProvider, dict[str, Any]]]: ...
    def _validate_pids_schemes(self, pids: dict[str, dict[str, Any]]) -> None: ...
    def _validate_identifiers(
        self, pids: dict[str, dict[str, Any]], errors: list[dict[str, Any]]
    ) -> None: ...
    def _validate_pids(
        self,
        pids: dict[str, dict[str, Any]],
        record: RDMRecord | RDMDraft | dict[str, Any],
        errors: list[dict[str, Any]],
    ) -> None: ...
    def validate(
        self,
        pids: dict[str, dict[str, Any]],
        record: RDMRecord | RDMDraft | dict[str, Any],
        errors: list[dict[str, Any]] | None = ...,
        raise_errors: bool = ...,
    ) -> None: ...
    def read(
        self, scheme: str, identifier: str, provider_name: str
    ) -> PersistentIdentifier: ...
    def create(
        self,
        draft: RDMDraft,
        scheme: str,
        identifier: str | None = ...,
        provider_name: str | None = ...,
    ) -> dict[str, Any]: ...
    def create_all(
        self,
        draft: RDMDraft,
        pids: dict[str, dict[str, Any]] | None = ...,
        schemes: list[str] | None = ...,
    ) -> dict[str, Any]: ...
    def update(self, record: RDMRecord, scheme: str, url: str | None = ...) -> None: ...
    def reserve(
        self, draft: RDMDraft, scheme: str, identifier: str, provider_name: str
    ) -> None: ...
    def reserve_all(self, draft: RDMDraft, pids: dict[str, dict[str, Any]]) -> None: ...
    def register(self, record: RDMRecord, scheme: str, url: str) -> None: ...
    def discard(
        self,
        scheme: str,
        identifier: str | None,
        provider_name: str | None = ...,
        soft_delete: bool = ...,
    ) -> None: ...
    def restore(
        self, scheme: str, identifier: str, provider_name: str | None = ...
    ) -> None: ...
    def restore_all(self, pids: dict[str, dict[str, Any]]) -> None: ...
    def discard_all(
        self, pids: dict[str, dict[str, Any]], soft_delete: bool = ...
    ) -> None: ...
    def validate_restriction_level(
        self, record: RDMRecord | dict[str, Any], **kwargs: Any
    ) -> None: ...
    def create_and_reserve(
        self, record: RDMRecord | dict[str, Any], **kwargs: Any
    ) -> None: ...
