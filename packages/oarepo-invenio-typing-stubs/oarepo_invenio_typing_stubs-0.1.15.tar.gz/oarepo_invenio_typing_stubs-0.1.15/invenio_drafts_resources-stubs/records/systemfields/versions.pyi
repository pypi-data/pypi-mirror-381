from typing import TypedDict
from uuid import UUID

from invenio_records.systemfields import SystemFieldContext
from invenio_records.systemfields.base import SystemField

def uuid_or_none(val: str | UUID | None) -> UUID | None: ...

class VersionsDump(TypedDict, total=False):
    latest_id: str | None
    latest_index: int | None
    next_draft_id: str | None
    is_latest: bool
    is_latest_draft: bool
    index: int | None

class VersionsManager:
    def __init__(self, record, dump: VersionsDump | None = ...) -> None: ...
    def copy_to(self, record): ...
    @property
    def model_cls(self): ...
    @property
    def parent_id(self) -> UUID: ...
    @property
    def record_model_cls(self): ...
    @property
    def index(self) -> int | None: ...
    @property
    def latest_id(self) -> UUID | None: ...
    @property
    def latest_index(self) -> int | None: ...
    @property
    def next_draft_id(self) -> UUID | None: ...
    @property
    def is_latest(self) -> bool: ...
    @property
    def is_latest_draft(self) -> bool: ...
    @property
    def next_index(self) -> int: ...
    def state(self, refresh: bool = False): ...
    def set_next(self) -> None: ...
    def clear_next(self) -> None: ...
    def set_latest(self) -> None: ...
    def dump(self) -> VersionsDump: ...
    def load(self, dump: VersionsDump) -> None: ...

class VersionsFieldContext(SystemFieldContext):
    @property
    def model_cls(self): ...
    def resolve(self, *, parent_id: UUID): ...

class VersionsField(SystemField):
    def __init__(
        self, create: bool = True, set_next: bool = False, set_latest: bool = False
    ) -> None: ...
    def obj(self, record) -> VersionsManager: ...
    def set_obj(self, record, versions: VersionsManager) -> None: ...
    def post_create(self, record) -> None: ...
    def pre_delete(self, record, force: bool = False) -> None: ...
    def pre_dump(self, record, data, dumper=None) -> None: ...
    def post_load(self, record, data, loader=None) -> None: ...
    def __get__(self, record, owner=None): ...
