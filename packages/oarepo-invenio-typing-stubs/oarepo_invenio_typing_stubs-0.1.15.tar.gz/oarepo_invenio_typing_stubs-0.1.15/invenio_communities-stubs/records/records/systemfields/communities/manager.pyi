from typing import Any, Dict, Iterator, List, Optional

from invenio_communities.communities.records.api import Community as Community
from invenio_communities.errors import (
    SetDefaultCommunityError as SetDefaultCommunityError,
)
from invenio_records.api import Record as Record

class CommunitiesRelationManager:
    _m2m_model_cls: Any
    _record_id: Any
    _default_id: Optional[str]
    _communities_ids: set[str]
    _communities_cache: Dict[str, Community]

    def __init__(self, m2m_model_cls: Any, record_id: Any, data: Any) -> None: ...
    def add(
        self,
        community_or_id: Community | str,
        request: Record | str | None = ...,
        default: bool = False,
    ) -> None: ...
    def remove(self, community_or_id: Community | str) -> None: ...
    def clear(self) -> None: ...
    def refresh(self) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, community_or_id: Community | str) -> bool: ...
    def __iter__(self) -> Iterator[Community]: ...
    def _lookup_community(self, community_id: str) -> Community: ...
    def _to_id(self, val: Any) -> Optional[str]: ...
    @property
    def ids(self) -> List[str]: ...
    @property
    def default(self) -> Optional[Community]: ...
    @default.setter
    def default(self, community_or_id: Community | str) -> None: ...
    @default.deleter
    def default(self) -> None: ...
    @property
    def entries(self) -> List[Community]: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def from_dict(self, data: Any) -> CommunitiesRelationManager: ...
