from types import TracebackType
from typing import Any, Callable, Optional

from sqlalchemy.orm import Session

class Operation:
    def on_register(self, uow: "UnitOfWork") -> None: ...
    def on_commit(self, uow: "UnitOfWork") -> None: ...
    def on_post_commit(self, uow: "UnitOfWork") -> None: ...
    def on_exception(self, uow: "UnitOfWork", exception: BaseException) -> None: ...
    def on_rollback(self, uow: "UnitOfWork") -> None: ...
    def on_post_rollback(self, uow: "UnitOfWork") -> None: ...

class ModelCommitOp(Operation):
    def __init__(self, model: Any) -> None: ...
    def on_register(self, uow: "UnitOfWork") -> None: ...

class ModelDeleteOp(Operation):
    def __init__(self, model: Any) -> None: ...
    def on_register(self, uow: "UnitOfWork") -> None: ...

class UnitOfWork:
    _session: Session
    _operations: list[Operation]
    _dirty: bool

    def __init__(self, session: Optional[Session] = ...) -> None: ...
    def __enter__(self) -> "UnitOfWork": ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...
    @property
    def session(self) -> Session: ...
    def _mark_dirty(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self, exception: BaseException | None = ...) -> None: ...
    def register(self, op: Operation) -> None: ...

def unit_of_work(
    **kwargs: Any,
) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
