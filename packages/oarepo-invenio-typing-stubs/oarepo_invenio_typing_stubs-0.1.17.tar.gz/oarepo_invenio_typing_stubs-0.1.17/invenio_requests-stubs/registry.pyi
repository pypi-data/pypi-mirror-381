from typing import Iterator, Protocol, overload

class HasTypeId(Protocol):
    type_id: str

class TypeRegistry[T: HasTypeId]:
    def __init__(self, types: list[T]) -> None: ...
    def __iter__(self) -> Iterator[T]: ...
    @overload
    def lookup(self, type_id: str, quiet: bool = ...) -> T: ...
    @overload
    def lookup(self, type_id: str, quiet: bool, default: T | None) -> T | None: ...
    def register_type(self, type_: T, force: bool = ...) -> None: ...
