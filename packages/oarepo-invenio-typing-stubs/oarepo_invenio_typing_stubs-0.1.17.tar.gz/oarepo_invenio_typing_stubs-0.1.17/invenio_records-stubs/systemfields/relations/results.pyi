from typing import Any, Callable, Dict, Iterator, List, Optional

class RelationResult:
    field: Any
    record: Any

    def __init__(self, field: Any, record: Any) -> None: ...
    def __call__(self, force: bool = ...) -> Any: ...
    def __getattr__(self, name: str) -> Any: ...
    def _clean_one(
        self, data: Dict[str, Any], keys: List[Any], attrs: List[Any]
    ) -> Dict[str, Any]: ...
    def _dereference_one(
        self, data: Dict[str, Any], keys: List[str], attrs: List[Any]
    ) -> Dict[str, Any]: ...
    def _lookup_data(self) -> Any: ...
    def _lookup_id(self, *args: Any) -> Any: ...
    def _value_check(
        self, value_to_check: Dict[str, Any], object: Dict[str, Any]
    ) -> None: ...
    def clean(
        self, keys: Optional[List[str]] = ..., attrs: Optional[List[str]] = ...
    ) -> Any: ...
    def dereference(
        self, keys: Optional[List[str]] = ..., attrs: Optional[List[str]] = ...
    ) -> Any: ...
    def validate(self) -> None: ...

class RelationListResult(RelationResult):
    def __call__(self, force: bool = ...) -> Optional[Iterator[Any]]: ...
    def _apply_items(
        self,
        func: Callable[..., Any],
        keys: Optional[List[str]] = ...,
        attrs: Optional[List[str]] = ...,
    ) -> List[Any]: ...

class RelationNestedListResult(RelationListResult):
    def __call__(self, force: bool = ...) -> Optional[Any]: ...
