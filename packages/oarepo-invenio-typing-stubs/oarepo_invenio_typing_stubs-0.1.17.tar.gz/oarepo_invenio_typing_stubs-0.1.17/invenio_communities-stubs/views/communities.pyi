from typing import Any, Dict, List, Optional, Set

from flask_login import login_required
from invenio_communities.communities.resources.ui_schema import (
    TypesSchema as TypesSchema,
)
from invenio_communities.errors import LogoNotFoundError as LogoNotFoundError
from invenio_communities.proxies import current_communities as current_communities
from invenio_communities.views.decorators import pass_community as pass_community
from invenio_communities.views.template_loader import (
    CommunityThemeChoiceJinjaLoader as CommunityThemeChoiceJinjaLoader,
)

VISIBILITY_FIELDS: List[Dict[str, str]]  # List of visibility option dicts
MEMBERS_VISIBILITY_FIELDS: List[
    Dict[str, str]
]  # List of member visibility option dicts
RECORDS_SUBMISSION_POLICY_FIELDS: List[
    Dict[str, str]
]  # List of submission policy option dicts
REVIEW_POLICY_FIELDS: List[Dict[str, str]]  # List of review policy option dicts
MEMBER_POLICY_FIELDS: List[Dict[str, str]]  # List of member policy option dicts
HEADER_PERMISSIONS: Set[str]  # Set of permission strings
PRIVATE_PERMISSIONS: Set[str]  # Set of permission strings
MEMBERS_PERMISSIONS: Set[str]  # Set of permission strings

def render_community_theme_template(
    template_name_or_list: str | List[str],
    theme: Optional[Dict[str, Any]] = ...,
    **context: Any,
) -> str: ...
def communities_frontpage(): ...
def communities_search(): ...
def load_custom_fields(dump_only_required: bool = False): ...
@login_required
def communities_new(): ...
@login_required
def communities_new_subcommunity(pid_value, community, community_ui): ...
def communities_subcommunities(pid_value, community, community_ui): ...
def communities_settings(pid_value, community, community_ui): ...
def communities_requests(pid_value, community, community_ui): ...
def communities_settings_privileges(pid_value, community, community_ui): ...
def communities_settings_submission_policy(pid_value, community, community_ui): ...
def communities_settings_pages(pid_value, community, community_ui): ...
def members(pid_value, community, community_ui): ...
def invitations(pid_value, community, community_ui): ...
def communities_about(pid_value, community, community_ui): ...
def communities_curation_policy(pid_value, community, community_ui): ...
def community_theme_css_config(
    pid_value, revision, community
) -> tuple[str, int, Dict[str, str]]: ...
