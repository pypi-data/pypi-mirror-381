from __future__ import annotations

import enum
from typing import Any

from invenio_records.systemfields import SystemField

class RecordDeletionStatusEnum(enum.Enum):
    PUBLISHED = ...
    DELETED = ...
    MARKED = ...

class RecordDeletionStatus:
    _status: RecordDeletionStatusEnum

    def __init__(self, status: str | RecordDeletionStatusEnum | None) -> None: ...
    @property
    def status(self) -> str: ...
    @status.setter
    def status(self, value: str | RecordDeletionStatusEnum | None) -> None: ...
    @property
    def is_deleted(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...

class RecordDeletionStatusField(SystemField):
    def __get__(self, record, owner=None): ...
    def get_obj(self, record, owner=None): ...
    def __set__(self, record, value): ...
    def pre_commit(self, record) -> None: ...
    def pre_dump(
        self, record, data: dict[str, Any], dumper: Any | None = ...
    ) -> None: ...
    def post_load(
        self, record, data: dict[str, Any], loader: Any | None = ...
    ) -> None: ...
