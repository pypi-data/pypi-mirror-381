from __future__ import annotations

from typing import Any, Iterable

from flask_principal import Identity

class DataIterator:
    def __init__(self, data_file: str) -> None: ...

class YamlIterator(DataIterator):
    def __iter__(self) -> Iterable[dict[str, Any]]: ...

class CSVIterator(DataIterator):
    def map_row(self, header: list[str], row: list[str]) -> dict[str, Any]: ...
    def __iter__(self) -> Iterable[dict[str, Any]]: ...

class JSONLinesIterator(DataIterator):
    def __iter__(self) -> Iterable[dict[str, Any]]: ...

def create_iterator(data_file: str) -> DataIterator: ...

class ConflictingFixturesError(Exception):
    errors: list[str]

class PrioritizedVocabulariesFixtures:
    def __init__(
        self,
        identity: Identity,
        app_data_folder: Any | None = ...,
        pkg_data_folder: Any | None = ...,
        filename: str = ...,
        delay: bool = ...,
    ) -> None: ...
    def load(self, reload: str | None = ...) -> None: ...
    def load_from_extensions(self) -> None: ...
    def peek_vocabularies(self, filepath: Any) -> list[str]: ...
    def load_vocabularies(self, filepath: Any) -> None: ...

class VocabulariesFixture:
    def __init__(
        self, identity: Identity, filepath: Any, delay: bool = ...
    ) -> None: ...
    def read(self) -> Iterable[tuple[str, Any]]: ...
    def get_records_by_vocabulary(
        self, vocabulary_id: str
    ) -> Iterable[dict[str, Any]]: ...
    def load(self, ignore: Iterable[str] | None = ...) -> set[str]: ...

class VocabularyEntry:
    service_str: str
    def __init__(
        self, service_str: str, directory: Any, id_: str, entry: dict[str, Any]
    ) -> None: ...
    @property
    def covered_ids(self) -> list[str]: ...
    def pre_load(self, identity: Identity, ignore: Iterable[str]) -> None: ...
    def iterate(self, ignore: Iterable[str]) -> Iterable[dict[str, Any]]: ...
    def loaded(self) -> list[str]: ...
    def load(
        self, identity: Identity, ignore: Iterable[str] | None = ..., delay: bool = ...
    ) -> list[str]: ...
    def create_record(self, data: dict[str, Any], delay: bool = ...) -> None: ...

class GenericVocabularyEntry(VocabularyEntry):
    def __init__(self, directory: Any, id_: str, entry: dict[str, Any]) -> None: ...
    def iterate(self, ignore: Iterable[str]) -> Iterable[dict[str, Any]]: ...

class VocabularyEntryWithSchemes(VocabularyEntry):
    def __init__(
        self, service_str: str, directory: Any, id_: str, entry: dict[str, Any]
    ) -> None: ...
    def pre_load(self, identity: Identity, ignore: Iterable[str]) -> None: ...
    def iterate(self, ignore: Iterable[str]) -> Iterable[dict[str, Any]]: ...
    def loaded(self) -> list[str]: ...
    @property
    def covered_ids(self) -> list[str]: ...
    def schemes(self) -> list[dict[str, Any]]: ...
    def create_scheme(self, metadata: dict[str, Any]) -> None: ...
