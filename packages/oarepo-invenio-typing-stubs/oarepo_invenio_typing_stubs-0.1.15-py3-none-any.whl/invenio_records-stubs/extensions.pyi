from typing import Any, Dict

class ExtensionMixin:
    def pre_init(
        self, record: Any, data: Dict[str, Any], model: Any | None = ..., **kwargs: Any
    ) -> None: ...
    def post_init(
        self, record: Any, data: Dict[str, Any], model: Any | None = ..., **kwargs: Any
    ) -> None: ...
    def pre_dump(
        self, record: Any, data: Dict[str, Any], dumper: Any | None = ...
    ) -> None: ...
    def post_dump(
        self, record: Any, data: Dict[str, Any], dumper: Any | None = ...
    ) -> None: ...
    def pre_load(self, data: Dict[str, Any], loader: Any | None = ...) -> None: ...
    def post_load(
        self, record: Any, data: Dict[str, Any], loader: Any | None = ...
    ) -> None: ...
    def pre_create(self, record: Any) -> None: ...
    def post_create(self, record: Any) -> None: ...
    def pre_commit(self, record: Any) -> None: ...
    def post_commit(self, record: Any) -> None: ...
    def pre_delete(self, record: Any, force: bool = ...) -> None: ...
    def post_delete(self, record: Any, force: bool = ...) -> None: ...
    def pre_revert(self, record: Any, revision: Any) -> None: ...
    def post_revert(self, new_record: Any, revision: Any) -> None: ...

class RecordExtension(ExtensionMixin): ...

class RecordMeta(type):
    def __new__(mcs, name: str, bases: tuple[type, ...], attrs: Dict[str, Any]): ...
