from collections.abc import Generator as _Gen
from collections.abc import Iterator
from dataclasses import dataclass, field
from typing import List, TypedDict

class RoleDefinition(TypedDict, total=False):
    name: str
    title: str
    description: str
    can_manage_roles: List[str]
    is_owner: bool
    can_manage: bool
    can_curate: bool
    can_view: bool

@dataclass(frozen=True)
class Role:
    name: str = ...
    title: str = ...
    description: str = ...
    can_manage_roles: List[str] = field(default_factory=list)
    is_owner: bool = ...
    can_manage: bool = ...
    can_curate: bool = ...
    can_view: bool = ...
    def can_manage_role(self, role_name: str) -> bool: ...
    def __hash__(self) -> int: ...

class RoleRegistry:
    def __init__(self, roles_definitions: List[RoleDefinition]) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def __getitem__(self, key: str) -> Role: ...
    def __iter__(self) -> Iterator[Role]: ...
    @property
    def roles(self) -> List[Role]: ...
    @property
    def owner_role(self) -> Role: ...
    def can(self, action: str) -> _Gen[Role, None, None]: ...
    def manager_roles(self, role_name: str) -> List[Role]: ...
