from abc import abstractmethod
from typing import Any, Dict, List, Optional

class Mapping:
    @abstractmethod
    def to_dict(self) -> Dict[str, Any]: ...
    @classmethod
    def properties_for_fields(
        cls, given_fields_name: Optional[List[str]], available_fields: List[Any]
    ) -> Dict[str, Any]: ...
    @classmethod
    def field_exists(cls, field_name: str, index: Any) -> bool: ...

class KeywordMapping(Mapping):
    def to_dict(self) -> Dict[str, str]: ...

class TextMapping(Mapping):
    def __init__(self, use_as_filter: bool = ...): ...
    def to_dict(self) -> Dict[str, Any]: ...

class EDTFMapping(Mapping):
    def to_dict(self) -> Dict[str, Any]: ...

class ISODateMapping(Mapping):
    def to_dict(self) -> Dict[str, str]: ...

class BooleanMapping(Mapping):
    def to_dict(self) -> Dict[str, str]: ...

class IntegerMapping(Mapping):
    def to_dict(self) -> Dict[str, str]: ...

class DoubleMapping(Mapping):
    def to_dict(self) -> Dict[str, str]: ...
