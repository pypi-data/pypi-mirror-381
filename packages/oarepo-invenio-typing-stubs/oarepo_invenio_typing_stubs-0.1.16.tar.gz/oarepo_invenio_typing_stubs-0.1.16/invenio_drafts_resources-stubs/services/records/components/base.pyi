from typing import Any

from invenio_records_resources.records.api import FileRecord
from invenio_records_resources.services.records.components import (
    BaseRecordFilesComponent as _BaseRecordFilesComponent,
)
from invenio_records_resources.services.records.components import (
    ServiceComponent as BaseServiceComponent,
)

class ServiceComponent(BaseServiceComponent):
    def read_draft(self, identity, draft=None, errors=None) -> None: ...
    def update_draft(self, identity, data=None, record=None, errors=None) -> None: ...
    def delete_draft(
        self, identity, draft=None, record=None, force: bool = False
    ) -> None: ...
    def edit(self, identity, draft=None, record=None) -> None: ...
    def new_version(self, identity, draft=None, record=None) -> None: ...
    def publish(self, identity, draft=None, record=None) -> None: ...
    def import_files(self, identity, draft=None, record=None) -> None: ...
    def post_publish(
        self, identity, record=None, is_published: bool = False
    ) -> None: ...

class BaseRecordFilesComponent(ServiceComponent, _BaseRecordFilesComponent):
    def update_draft(self, identity, data=None, record=None, errors=None) -> None: ...
    def edit(self, identity, draft=None, record=None) -> None: ...
    def new_version(self, identity, draft=None, record=None) -> None: ...
    def _purge_bucket_and_ovs(self, files: Any) -> None: ...
    def _publish_new(self, identity, draft=None, record=None) -> None: ...
    def _publish_edit(self, identity, draft=None, record=None) -> None: ...
    def _check_file_completed(self, file_record: FileRecord) -> bool | None: ...
    def publish(self, identity, draft=None, record=None) -> None: ...
    def delete_draft(
        self, identity, draft=None, record=None, force: bool = False
    ) -> None: ...
    def import_files(self, identity, draft=None, record=None) -> None: ...
