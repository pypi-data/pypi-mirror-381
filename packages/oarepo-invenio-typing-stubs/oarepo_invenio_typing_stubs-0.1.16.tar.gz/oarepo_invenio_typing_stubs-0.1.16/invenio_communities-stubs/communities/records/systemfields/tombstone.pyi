from typing import Any, Dict, Optional, Self, overload

from invenio_communities.communities.records.api import Community
from invenio_records.systemfields import SystemField
from invenio_users_resources.entity_resolvers import UserProxy

class Tombstone:
    def __init__(self, data: Dict[str, Any]) -> None: ...
    @property
    def removal_reason(self) -> Any: ...
    @removal_reason.setter
    def removal_reason(self, value: Any) -> None: ...
    @property
    def note(self) -> str: ...
    @note.setter
    def note(self, value: Optional[str]) -> None: ...
    @property
    def removed_by(self) -> Any: ...
    @removed_by.setter
    def removed_by(self, value: Any) -> None: ...
    @property
    def removal_date(self) -> Any: ...
    @removal_date.setter
    def removal_date(self, value: Any) -> None: ...
    @property
    def citation_text(self) -> Any: ...
    @citation_text.setter
    def citation_text(self, value: Any) -> None: ...
    @property
    def is_visible(self) -> bool: ...
    @is_visible.setter
    def is_visible(self, value: bool) -> None: ...
    @property
    def removed_by_proxy(self) -> UserProxy: ...
    def dump(self) -> Dict[str, Any]: ...

class TombstoneField(SystemField):  # type: ignore[misc]
    pass
    def pre_commit(self, record: Community) -> None: ...
    @overload  # type: ignore[override]
    def __get__(self, instance: None, owner: type[Community]) -> Self: ...  # type: ignore # keep typing tighter
    @overload
    def __get__(  # type: ignore # keep typing tighter
        self, instance: Community, owner: type[Community]
    ) -> Optional[Tombstone]: ...
    def __set__(self, instance: Community, value: Optional[Tombstone]) -> None: ...  # type: ignore[override]
