from __future__ import annotations

from typing import Any, Iterable

from flask_principal import Need

class Grant:
    """Grant for a specific permission level on a record."""

    permission: str
    origin: str | None
    _subject: Any | None
    _subject_type: str | None
    _subject_id: str | None

    def __init__(
        self,
        permission: str,
        origin: str | None,
        subject: Any | None = ...,
        subject_type: str | None = ...,
        subject_id: str | None = ...,
    ) -> None: ...
    @property
    def subject(self) -> Any: ...
    def resolve_subject(self) -> Any: ...
    @property
    def subject_type(self) -> str: ...
    @property
    def subject_id(self) -> Any: ...
    def to_need(self) -> Need: ...
    def to_token(self) -> str: ...
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def create(
        cls,
        subject_type: str,
        subject_id: str,
        permission: str,
        origin: str | None,
        resolve_subject: bool = ...,
    ) -> Grant: ...
    @classmethod
    def from_token(cls, token: str) -> Grant: ...
    @classmethod
    def from_dict(cls, dict_: dict[str, Any]) -> Grant: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...

class Grants(list[Grant]):
    """List of grants for various permission levels on a record."""

    grant_cls: type[Grant]

    def __init__(
        self, grants: Iterable[Grant | dict[str, Any]] | None = ...
    ) -> None: ...
    def append(self, grant: Grant) -> None: ...
    def add(self, grant: Grant) -> None: ...
    def extend(self, grants: Iterable[Grant]) -> None: ...
    def create(
        self,
        subject_type: str,
        subject_id: str,
        permission: str,
        origin: str | None,
        resolve_subject: bool = ...,
    ) -> Grant: ...
    def needs(self, permission: str) -> set[Need]: ...
    def dump(self) -> list[dict[str, Any]]: ...
