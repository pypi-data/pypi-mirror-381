#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Sep 14 19:25:13 2020 by generateDS.py version 2.35.26.
# Python 3.6.10 |Anaconda, Inc.| (default, Mar 25 2020, 18:53:43)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
#
# Command line options:
#   ('-o', 'st66.py')
#
# Command line arguments:
#   st66.xsd
#
# Command line:
#   /Users/schitic/opt/anaconda3/envs/py36/bin/generateDS.py -o "st66.py" st66.xsd
#
# Current working directory (os.getcwd()):
#   utilities
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
import inspect
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        def validate_restriction(self, function_name, value):
            if value is None:
                return
            obj_type_name = function_name.replace('validate_', '')
            if 'Extended' in obj_type_name:
                validator_withou_ext = "validate_%s" % obj_type_name.replace('Extended', '')
                if validator_withou_ext in dir(self):
                    f = getattr(self, validator_withou_ext)
                    f(value)
                    return
                else:
                    obj_type_name = obj_type_name.replace('Extended', '')
            try:
                obj_type = getattr(sys.modules[__name__], obj_type_name)
            except Exception as e:
                return True
            try:
                obj_type(value)
            except Exception as e:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message(
                    'Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on %(object_type)s' % {
                        "value": encode_str_2_3(value), "lineno": lineno, 'object_type': obj_type_name})
                result = False
            return True

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""


    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AccountDebitKindType(str, Enum):
    BASIC_FEE_IMMEDIATE='Basic Fee Immediate'
    BASIC_FEE_ENDOF_PERIOD='Basic Fee End of Period'
    BASICAND_CLASS_FEE='Basic and Class Fee'


class AppealCurrentStatusCodeType(str, Enum):
    APPEALFILED='Appeal filed'
    ADMISSIBILITYCHECKED='Admissibility checked'
    FIRSTWAITINGFORAPPELLANTSRESPONSE='First waiting for appellant\'s response'
    SECONDWAITINGFORAPPELLANTSRESPONSE='Second waiting for appellant\'s response'
    FIRSTWAITINGFORRESPONDENTSRESPONSE='First waiting for respondent\'s response'
    SECONDWAITINGFORRESPONDENTSRESPONSE='Second waiting for respondent\'s response'
    DESIGNATIONOFRAPPORTEURDONE='Designation of rapporteur done'
    ORALPROCEDUREPENDING='Oral procedure pending'
    RAPPORTSENTTOPARTIES='Rapport sent to parties'
    DECISIONRENDEREDANDNOTIFIED='Decision rendered and notified'
    APPEALWITHTHE_COURTOF_JUSTICEPENDING='Appeal with the Court of Justice pending'
    FINALDECISION_APPEALWITHDRAWN='Final decision - Appeal withdrawn'
    FINALDECISION_APPEALREJECTED='Final decision  Appeal rejected'
    FINALDECISION_APPEALREJECTEDINPART='Final decision  Appeal rejected in part'
    NODECISION_APPEALNOTDULYENTERED='No decision  Appeal not duly entered'
    NODECISIONEXPARTE='No decision  ex parte'
    NODECISIONINTERPARTES='No decision  inter partes'
    APPEALCLOSED='Appeal closed'


class AppealEventCodeType(str, Enum):
    APPEALFILED='Appeal filed'
    ADMISSIBILITYCHECKED='Admissibility checked'
    FIRSTWAITINGFORAPPELLANTSRESPONSE='First waiting for appellant\'s response'
    SECONDWAITINGFORAPPELLANTSRESPONSE='Second waiting for appellant\'s response'
    FIRSTWAITINGFORRESPONDENTSRESPONSE='First waiting for respondent\'s response'
    SECONDWAITINGFORRESPONDENTSRESPONSE='Second waiting for respondent\'s response'
    DESIGNATIONOFRAPPORTEURDONE='Designation of rapporteur done'
    ORALPROCEDUREPENDING='Oral procedure pending'
    RAPPORTSENTTOPARTIES='Rapport sent to parties'
    DECISIONRENDEREDANDNOTIFIED='Decision rendered and notified'
    APPEALWITHTHE_COURTOF_JUSTICEPENDING='Appeal with the Court of Justice pending'
    FINALDECISION_APPEALWITHDRAWN='Final decision - Appeal withdrawn'
    FINALDECISION_APPEALREJECTED='Final decision  Appeal rejected'
    FINALDECISION_APPEALREJECTEDINPART='Final decision  Appeal rejected in part'
    NODECISION_APPEALNOTDULYENTERED='No decision  Appeal not duly entered'
    NODECISIONEXPARTE='No decision  ex parte'
    NODECISIONINTERPARTES='No decision  inter partes'
    APPEALCLOSED='Appeal closed'


class AppealPartiesKindType(str, Enum):
    EX_PARTE='Ex Parte'
    INTER_PARTES='Inter Partes'
    OTHER='Other'


class AuthorizationDocumentSupplyType(str, Enum):
    ALREADYONFILE='Already on file'
    ATTACHED='Attached'
    TOFOLLOW='To follow'


class AuthorizationKindType(str, Enum):
    GENERAL_AUTHORIZATION='General Authorization'
    SPECIFIC_AUTHORIZATION='Specific Authorization'


class BasicRecordKindType(str, Enum):
    SECOND_PART_FEE_PAID='Second Part Fee Paid'
    SECOND_PART_FEE_NOT_PAID='Second Part Fee Not Paid'
    PROTECTION_GRANTED='Protection Granted'
    JUDICIAL_ACTION='Judicial Action'
    EFFECT_CONTINUATION='Effect Continuation'
    RENUNCIATION='Renunciation'
    TRANSFER_REFUSAL='Transfer Refusal'
    REPRESENTATIVE_APPOINTED='Representative Appointed'
    APPEAL_EXPIRED='Appeal Expired'
    APPEAL_LAPSED='Appeal Lapsed'
    APPEAL_WITHDRAWN='Appeal Withdrawn'
    TOTAL_REFUSAL='Total Refusal'
    TOTAL_INVALIDATION='Total Invalidation'
    TOTAL_CANCELLATION='Total Cancellation'
    TOTAL_CEASING_EFFECT='Total Ceasing Effect'
    FINAL_CONFIRMATION_REFUSAL='Final Confirmation Refusal'
    FINAL_REVERSING_REFUSAL='Final Reversing Refusal'
    FINAL_TOTAL_REFUSAL='Final Total Refusal'
    RENEWAL_UNDER_RULE_40_3='Renewal Under Rule 40.3'
    NON_RENEWAL='Non Renewal'
    NON_RENEWAL_CERTAIN_PARTIES='Non Renewal Certain Parties'
    NON_RENEWAL_UNDER_RULE_40_3='Non Renewal Under Rule 40.3'
    REGISTRATION='Registration'
    SUBSEQUENT_DESIGNATION='Subsequent Designation'
    LIMITATION='Limitation'
    NO_EFFECT_LIMITATION='No Effect Limitation'
    PARTIAL_REFUSAL='Partial Refusal'
    PARTIAL_CEASING_EFFECT='Partial Ceasing Effect'
    PARTIAL_INVALIDATION='Partial Invalidation'
    PARTIAL_CANCELLATION='Partial Cancellation'
    RENEWAL='Renewal'
    COMPLEMENTARY_RENEWAL='Complementary Renewal'
    FINAL_OTHER_DECISION='Final Other Decision'


class CardKindCodeType(str, Enum):
    CREDIT_CARD='Credit Card'
    DEBIT_CARD='Debit Card'


class CaseReferenceKindType(str, Enum):
    TRADE_MARK='Trade Mark'
    OPPOSITION='Opposition'
    MARK_RECORD='Mark Record'
    DECISION='Decision'
    GENERAL_AUTHORIZATION='General Authorization'
    CURRENT_ACCOUNT='Current Account'
    REPRESENTATIVE_LIST='Representative List'
    APPEAL='Appeal'
    OTHER='Other'


class CategoryKindType(str, Enum):
    VIENNA='Vienna'
    DOMESTIC='Domestic'
    UNDEFINED='Undefined'


class ChipCodeType(str, Enum):
    CHIP='Chip'
    MAGNETIC_STRIPE='MagneticStripe'


class ClassNumberStatusCodeType(str, Enum):
    PROVISIONAL='Provisional'


class ClassificationKindCodeType(str, Enum):
    NICE='Nice'
    DOMESTIC='Domestic'
    OTHER='Other'


class ClassificationTermSourceType(str, Enum):
    NICE='Nice'
    OFFICE='Office'
    EMJPUS='EM-JP-US'
    EMUS='EM-US'


class ClassificationTermStatusCodeType(str, Enum):
    REQUESTED='Requested'
    ACCEPTED='Accepted'
    REFUSED='Refused'
    NOLONGERINUSE='No longer in use'


class CorrespondenceAddressPartyType(str, Enum):
    APPLICANT='Applicant'
    REPRESENTATIVE='Representative'


class DecisionCurrentStatusCodeType(str, Enum):
    DECISION_FILED='Decision Filed'
    DECISION_PENDING='Decision Pending'
    FINAL_DECISION='Final Decision'


class DecisionEventCodeType(str, Enum):
    DECISION_FILED='Decision Filed'
    DECISION_PENDING='Decision Pending'
    FINAL_DECISION='Final Decision'


class DecisionResponsibleType(str, Enum):
    TRADE_MARK_EXAMINER='Trade Mark Examiner'
    DESIGN_EXAMINER='Design Examiner'
    OPPOSITION_DIVISION='Opposition Division'
    ADMINISTRATIONOF_TRADE_MARKAND_DESIGN_DEPARTMENT='Administration of Trade Mark and Design Department'
    COMMUNITY_TRADE_MARK_CANCELLATION_DIVISION='Community Trade Mark Cancellation Division'
    DESIGN_INVALIDITY_DIVISION='Design Invalidity Division'
    OTHER='Other'


class DesignatedUnderCodeType(str, Enum):
    AGREEMENT='Agreement'
    PROTOCOL='Protocol'


class DocumentMediaType(str, Enum):
    PAPER='Paper'
    FAX='Fax'
    FILE='File'
    OTHER='Other'


class EarlierRightKindType(str, Enum):
    FILINGDATE='Filing date'
    REGISTRATIONDATE='Registration date'
    USEDATE='Use date'


class ExhibitionStatusCodeType(str, Enum):
    CLAIMED='Claimed'
    ACCEPTED='Accepted'
    REFUSED='Refused'


class ExtendedISOLanguageCodeType(str, Enum):
    UNDEFINED='Undefined'


class FileFormatType(str, Enum):
    JPEG='JPEG'
    TIFF='TIFF'
    PNG='PNG'
    GIF='GIF'
    OTHER='Other'


class GenderType(str, Enum):
    MALE='Male'
    FEMALE='Female'
    UNKNOWN='Unknown'


class GoodsServicesLimitationCodeType(str, Enum):
    LISTLIMITEDTO='List limited to'
    REMOVEFROMLIST='Remove from list'


class ISOCountryCodeType(str, Enum):
    """ISO 3166-1:2006"""
    AD='AD' # ANDORRA
    AE='AE' # UNITED ARAB EMIRATES
    AF='AF' # AFGHANISTAN
    AG='AG' # ANTIGUA AND BARBUDA
    AI='AI' # ANGUILLA
    AL='AL' # ALBANIA
    AM='AM' # ARMENIA
    AN='AN' # NETHERLANDS ANTILLES
    AO='AO' # ANGOLA
    AQ='AQ' # ANTARCTICA
    AR='AR' # ARGENTINA
    AS='AS' # AMERICAN SAMOA
    AT='AT' # AUSTRIA
    AU='AU' # AUSTRALIA
    AW='AW' # ARUBA
    AX='AX' # ÅLAND ISLANDS
    AZ='AZ' # AZERBAIJAN
    BA='BA' # BOSNIA AND HERZEGOVINA
    BB='BB' # BARBADOS
    BD='BD' # BANGLADESH
    BE='BE' # BELGIUM
    BF='BF' # BURKINA FASO
    BG='BG' # BULGARIA
    BH='BH' # BAHRAIN
    BI='BI' # BURUNDI
    BJ='BJ' # BENIN
    BM='BM' # BERMUDA
    BN='BN' # BRUNEI DARUSSALAM
    BO='BO' # BOLIVIA
    BR='BR' # BRAZIL
    BS='BS' # BAHAMAS
    BT='BT' # BHUTAN
    BV='BV' # BOUVET ISLAND
    BW='BW' # BOTSWANA
    BY='BY' # BELARUS
    BZ='BZ' # BELIZE
    CA='CA' # CANADA
    CC='CC' # COCOS (KEELING) ISLANDS
    CD='CD' # CONGO, THE DEMOCRATIC REPUBLIC OF THE
    CF='CF' # CENTRAL AFRICAN REPUBLIC
    CG='CG' # CONGO
    CH='CH' # SWITZERLAND
    CI='CI' # COTE D'IVOIRE
    CK='CK' # COOK ISLANDS
    CL='CL' # CHILE
    CM='CM' # CAMEROON
    CN='CN' # CHINA
    CO='CO' # COLOMBIA
    CR='CR' # COSTA RICA
    CU='CU' # CUBA
    CV='CV' # CAPE VERDE
    CX='CX' # CHRISTMAS ISLAND
    CY='CY' # CYPRUS
    CZ='CZ' # CZECH REPUBLIC
    DE='DE' # GERMANY
    DJ='DJ' # DJIBOUTI
    DK='DK' # DENMARK
    DM='DM' # DOMINICA
    DO='DO' # DOMINICAN REPUBLIC
    DZ='DZ' # ALGERIA
    EC='EC' # ECUADOR
    EE='EE' # ESTONIA
    EG='EG' # EGYPT
    EH='EH' # WESTERN SAHARA
    ER='ER' # ERITREA
    ES='ES' # SPAIN
    ET='ET' # ETHIOPIA
    FI='FI' # FINLAND
    FJ='FJ' # FIJI
    FK='FK' # FALKLAND ISLANDS (MALVINAS)
    FM='FM' # MICRONESIA, FEDERATED STATES OF
    FO='FO' # FAROE ISLANDS
    FR='FR' # FRANCE
    GA='GA' # GABON
    GB='GB' # UNITED KINGDOM
    GD='GD' # GRENADA
    GE='GE' # GEORGIA
    GF='GF' # FRENCH GUIANA
    GG='GG' # GUERNSEY
    GH='GH' # GHANA
    GI='GI' # GIBRALTAR
    GL='GL' # GREENLAND
    GM='GM' # GAMBIA
    GN='GN' # GUINEA
    GP='GP' # GUADELOUPE
    GQ='GQ' # EQUATORIAL GUINEA
    GR='GR' # GREECE
    GS='GS' # SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS
    GT='GT' # GUATEMALA
    GU='GU' # GUAM
    GW='GW' # GUINEA-BISSAU
    GY='GY' # GUYANA
    HK='HK' # HONG KONG
    HM='HM' # HEARD ISLAND AND MCDONALD ISLANDS
    HN='HN' # HONDURAS
    HR='HR' # CROATIA
    HT='HT' # HAITI
    HU='HU' # HUNGARY
    ID='ID' # INDONESIA
    IE='IE' # IRELAND
    IL='IL' # ISRAEL
    IM='IM' # ISLE OF MAN
    IN='IN' # INDIA
    IO='IO' # BRITISH INDIAN OCEAN TERRITORY
    IQ='IQ' # IRAQ
    IR='IR' # IRAN, ISLAMIC REPUBLIC OF
    IS='IS' # ICELAND
    IT='IT' # ITALY
    JE='JE' # JERSEY
    JM='JM' # JAMAICA
    JO='JO' # JORDAN
    JP='JP' # JAPAN
    KE='KE' # KENYA
    KG='KG' # KYRGYZSTAN
    KH='KH' # CAMBODIA
    KI='KI' # KIRIBATI
    KM='KM' # COMOROS
    KN='KN' # SAINT KITTS AND NEVIS
    KP='KP' # KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF
    KR='KR' # KOREA, REPUBLIC OF
    KW='KW' # KUWAIT
    KY='KY' # CAYMAN ISLANDS
    KZ='KZ' # KAZAKHSTAN
    LA='LA' # LAO PEOPLE'S DEMOCRATIC REPUBLIC
    LB='LB' # LEBANON
    LC='LC' # SAINT LUCIA
    LI='LI' # LIECHTENSTEIN
    LK='LK' # SRI LANKA
    LR='LR' # LIBERIA
    LS='LS' # LESOTHO
    LT='LT' # LITHUANIA
    LU='LU' # LUXEMBOURG
    LV='LV' # LATVIA
    LY='LY' # LIBYAN ARAB JAMAHIRIYA
    MA='MA' # MOROCCO
    MC='MC' # MONACO
    MD='MD' # MOLDOVA, REPUBLIC OF
    ME='ME' # MONTENEGRO
    MG='MG' # MADAGASCAR
    MH='MH' # MARSHALL ISLANDS
    MK='MK' # MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF
    ML='ML' # MALI
    MM='MM' # MYANMAR
    MN='MN' # MONGOLIA
    MO='MO' # MACAO
    MP='MP' # NORTHERN MARIANA ISLANDS
    MQ='MQ' # MARTINIQUE
    MR='MR' # MAURITANIA
    MS='MS' # MONTSERRAT
    MT='MT' # MALTA
    MU='MU' # MAURITIUS
    MV='MV' # MALDIVES
    MW='MW' # MALAWI
    MX='MX' # MEXICO
    MY='MY' # MALAYSIA
    MZ='MZ' # MOZAMBIQUE
    NA='NA' # NAMIBIA
    NC='NC' # NEW CALEDONIA
    NE='NE' # NIGER
    NF='NF' # NORFOLK ISLAND
    NG='NG' # NIGERIA
    NI='NI' # NICARAGUA
    NL='NL' # NETHERLANDS
    NO='NO' # NORWAY
    NP='NP' # NEPAL
    NR='NR' # NAURU
    NU='NU' # NIUE
    NZ='NZ' # NEW ZEALAND
    OM='OM' # OMAN
    PA='PA' # PANAMA
    PE='PE' # PERU
    PF='PF' # FRENCH POLYNESIA
    PG='PG' # PAPUA NEW GUINEA
    PH='PH' # PHILIPPINES
    PK='PK' # PAKISTAN
    PL='PL' # POLAND
    PM='PM' # SAINT PIERRE AND MIQUELON
    PN='PN' # PITCAIRN
    PR='PR' # PUERTO RICO
    PS='PS' # PALESTINIAN TERRITORY, OCCUPIED
    PT='PT' # PORTUGAL
    PW='PW' # PALAU
    PY='PY' # PARAGUAY
    QA='QA' # QATAR
    RE='RE' # REUNION
    RO='RO' # ROMANIA
    RS='RS' # SERBIA
    RU='RU' # RUSSIAN FEDERATION
    RW='RW' # RWANDA
    SA='SA' # SAUDI ARABIA
    SB='SB' # SOLOMON ISLANDS
    SC='SC' # SEYCHELLES
    SD='SD' # SUDAN
    SE='SE' # SWEDEN
    SG='SG' # SINGAPORE
    SH='SH' # SAINT HELENA
    SI='SI' # SLOVENIA
    SJ='SJ' # SVALBARD AND JAN MAYEN
    SK='SK' # SLOVAKIA
    SL='SL' # SIERRA LEONE
    SM='SM' # SAN MARINO
    SN='SN' # SENEGAL
    SO='SO' # SOMALIA
    SR='SR' # SURINAME
    ST='ST' # SAO TOME AND PRINCIPE
    SV='SV' # EL SALVADOR
    SY='SY' # SYRIAN ARAB REPUBLIC
    SZ='SZ' # SWAZILAND
    TC='TC' # TURKS AND CAICOS ISLANDS
    TD='TD' # CHAD
    TF='TF' # FRENCH SOUTHERN TERRITORIES
    TG='TG' # TOGO
    TH='TH' # THAILAND
    TJ='TJ' # TAJIKISTAN
    TK='TK' # TOKELAU
    TL='TL' # TIMOR-LESTE
    TM='TM' # TURKMENISTAN
    TN='TN' # TUNISIA
    TO='TO' # TONGA
    TR='TR' # TURKEY
    TT='TT' # TRINIDAD AND TOBAGO
    TV='TV' # TUVALU
    TW='TW' # TAIWAN, PROVINCE OF CHINA
    TZ='TZ' # TANZANIA, UNITED REPUBLIC OF
    UA='UA' # UKRAINE
    UG='UG' # UGANDA
    UM='UM' # UNITED STATES MINOR OUTLYING ISLANDS
    US='US' # UNITED STATES
    UY='UY' # URUGUAY
    UZ='UZ' # UZBEKISTAN
    VA='VA' # HOLY SEE (VATICAN CITY STATE)
    VC='VC' # SAINT VINCENT AND THE GRENADINES
    VE='VE' # VENEZUELA
    VG='VG' # VIRGIN ISLANDS, BRITISH
    VI='VI' # VIRGIN ISLANDS, U.S.
    VN='VN' # VIET NAM
    VU='VU' # VANUATU
    WF='WF' # WALLIS AND FUTUNA
    WS='WS' # SAMOA
    YE='YE' # YEMEN
    YT='YT' # MAYOTTE
    ZA='ZA' # SOUTH AFRICA
    ZM='ZM' # ZAMBIA
    ZW='ZW' # ZIMBABWE


class ISOCurrencyCodeType(str, Enum):
    """ISO 4217:2001, Version 2006-09-08"""
    AED='AED' # Dirham
    AFN='AFN' # Afghani
    ALL='ALL' # Lek
    AMD='AMD' # Dram
    ANG='ANG' # Netherlands Antillian Guilder
    AOA='AOA' # Kwanza
    ARS='ARS' # Argentine Peso
    AUD='AUD' # Australian Dollar
    AWG='AWG' # Aruban Guilder
    AZN='AZN' # Azerbaijanian Manat
    BAM='BAM' # Convertible Mark
    BBD='BBD' # Barbados Dollar
    BDT='BDT' # Taka
    BGN='BGN' # Bulgarian Lev
    BHD='BHD' # Bahraini Dinar
    BIF='BIF' # Burundi Franc
    BMD='BMD' # Bermudian Dollar (customarily: Bermuda Dollar)
    BND='BND' # Brunei Dollar
    BOB='BOB' # Boliviano
    BRL='BRL' # Brazilian Real
    BSD='BSD' # Bahamian Dollar
    BTN='BTN' # Ngultrum
    BWP='BWP' # Pula
    BYR='BYR' # Belarussian Ruble
    BZD='BZD' # Belize Dollar
    CAD='CAD' # Canadian Dollar
    CDF='CDF' # Franc Congolais
    CHF='CHF' # Swiss Franc
    CLP='CLP' # Chilean Peso
    CNY='CNY' # Yuan Renminbi
    COP='COP' # Colombian Peso
    CRC='CRC' # Costa Rican Colon
    CSD='CSD' # Serbian Dinar
    CUP='CUP' # Cuban Peso
    CVE='CVE' # Cape Verde Escudo
    CYP='CYP' # Cyprus Pound
    CZK='CZK' # Czech Koruna
    DJF='DJF' # Djibouti Franc
    DKK='DKK' # Danish Krone
    DOP='DOP' # Dominican Peso
    DZD='DZD' # Algerian Dinar
    EEK='EEK' # Kroon
    EGP='EGP' # Egyptian Pound
    ERN='ERN' # Nakfa
    ETB='ETB' # Ethopian Birr
    EUR='EUR' # Euro
    FJD='FJD' # Fiji Dollar
    FKP='FKP' # Falkland Islands Pound
    GBP='GBP' # Pound Sterling
    GEL='GEL' # Lari
    GHC='GHC' # Cedi
    GIP='GIP' # Gibraltar Pound
    GMD='GMD' # Dalasi
    GNF='GNF' # Guinea Franc
    GTQ='GTQ' # Quetzal
    GYD='GYD' # Guyana Dollar
    HKD='HKD' # Honk Kong Dollar
    HNL='HNL' # Lempira
    HRK='HRK' # Kuna
    HTG='HTG' # Gourde
    HUF='HUF' # Forint
    IDR='IDR' # Rupiah
    ILS='ILS' # New Israeli Sheqel
    INR='INR' # Indian Rupee
    IQD='IQD' # Iraqi Dinar
    IRR='IRR' # Iranian Rial
    ISK='ISK' # Iceland Krona
    JMD='JMD' # Jamaican Dollar
    JOD='JOD' # Jordanian Dinar
    JPY='JPY' # Yen
    KES='KES' # Kenyan Shilling
    KGS='KGS' # Som
    KHR='KHR' # Riel
    KMF='KMF' # Comoro Franc
    KPW='KPW' # North Korean Won
    KRW='KRW' # Won
    KWD='KWD' # Kuwaiti Dinar
    KYD='KYD' # Cayman Islands Dollar
    KZT='KZT' # Tenge
    LAK='LAK' # Kip
    LBP='LBP' # Lebanese Pound
    LKR='LKR' # Sri Lanka Rupee
    LRD='LRD' # Liberian Dollar
    LSL='LSL' # Loti
    LTL='LTL' # Lithuanian Litas
    LVL='LVL' # Latvian Lats
    LYD='LYD' # Libyan Dinar
    MAD='MAD' # Morrocan Dirham
    MDL='MDL' # Moldovan Leu
    MGA='MGA' # Malagasy Ariary
    MKD='MKD' # Denar
    MMK='MMK' # Kyat
    MNT='MNT' # Tugrik
    MOP='MOP' # Pataca
    MRO='MRO' # Ouguiya
    MTL='MTL' # Maltese Lira
    MUR='MUR' # Mauritius Rupee
    MVR='MVR' # Rufiyaa
    MWK='MWK' # Kwacha
    MXN='MXN' # Mexican Peso
    MYR='MYR' # Malaysian Ringgit
    MZN='MZN' # Metical
    NAD='NAD' # Namibia Dollar
    NGN='NGN' # Naira
    NIO='NIO' # Cordoba Oro
    NOK='NOK' # Norwegian Krone
    NPR='NPR' # Nepalese Rupee
    NZD='NZD' # New Zealand Dollar
    OMR='OMR' # Rial Omani
    PAB='PAB' # Balboa
    PEN='PEN' # Nuevo Sol
    PGK='PGK' # Kina
    PHP='PHP' # Philippine Peso
    PKR='PKR' # Pakistan Rupee
    PLN='PLN' # Zloty
    PYG='PYG' # Guarani
    QAR='QAR' # Qatari Rial
    ROL='ROL' # Leu
    RUB='RUB' # Russian Ruble
    RWF='RWF' # Rwanda Franc
    SAR='SAR' # Saudi Riyal
    SBD='SBD' # Solomon Islands Dollar
    SCR='SCR' # Seychelles Rupee
    SDD='SDD' # Sudanese Dinar
    SEK='SEK' # Swedish Krona
    SGD='SGD' # Singapore Dollar
    SHP='SHP' # St. Helena Pound
    SIT='SIT' # Tolar
    SKK='SKK' # Slovak Koruna
    SLL='SLL' # Leone
    SOS='SOS' # Somali Shilling
    SRD='SRD' # Suriname Dollar
    STD='STD' # Dobra
    SVC='SVC' # El Salvador Colon
    SYP='SYP' # Syrian Pound
    SZL='SZL' # Lilangeni
    THB='THB' # Baht
    TJS='TJS' # Somoni
    TMM='TMM' # Manat
    TND='TND' # Tunisian Dinar
    TOP='TOP' # Pa'anga
    TRY='TRY' # New Turkish Lira
    TTD='TTD' # Trinidad and Tobago Dollar
    TWD='TWD' # New Taiwan Dollar
    TZS='TZS' # Tanzanian Shilling
    UAH='UAH' # Hryvnia
    UGX='UGX' # Uganda Shilling
    USD='USD' # US Dollar
    UYU='UYU' # Peso Uruguayo
    UZS='UZS' # Uzbekistan Sum
    VEB='VEB' # Bolivar
    VND='VND' # Dong
    VUV='VUV' # Vatu
    WST='WST' # Tala
    XAF='XAF' # CFA Franc
    XAG='XAG' # Silver
    XAU='XAU' # Gold
    XCD='XCD' # East Carribean Dollar
    XDR='XDR' # SDR
    XOF='XOF' # CFA Franc
    XPD='XPD' # Palladium
    XPF='XPF' # CFP Franc
    XPT='XPT' # Platinum
    YER='YER' # Yemeni Rial
    ZAR='ZAR' # Rand
    ZMK='ZMK' # Kwacha
    ZWD='ZWD' # Zimbabwe Dollar


class ISOFormerCountryCodeType(str, Enum):
    YU='YU'


class ISOLanguageCodeType(str, Enum):
    """ISO 639-1:2002 Part 1: Alpha-2 Language Codes"""
    AA='aa' # Afar
    AB='ab' # Abkhazian
    AF='af' # Afrikaans
    AM='am' # Amharic
    AR='ar' # Arabic
    AS='as' # Assamese
    AY='ay' # Aymara
    AZ='az' # Azerbaijani
    BA='ba' # Bashkir
    BE='be' # Byelorussian
    BG='bg' # Bulgarian
    BH='bh' # Bihari
    BI='bi' # Bislama
    BN='bn' # Bengali; Bangla
    BO='bo' # Tibetan
    BR='br' # Breton
    CA='ca' # Catalan
    CO='co' # Corsican
    CS='cs' # Czech
    CY='cy' # Welsh
    DA='da' # Danish
    DE='de' # German
    DZ='dz' # Bhutani
    EL='el' # Greek
    EN='en' # English
    EO='eo' # Esperanto
    ES='es' # Spanish
    ET='et' # Estonian
    EU='eu' # Basque
    FA='fa' # Persian
    FI='fi' # Finnish
    FJ='fj' # Fiji
    FO='fo' # Faroese
    FR='fr' # French
    FY='fy' # Frisian
    GA='ga' # Irish
    GD='gd' # Scots Gaelic
    GL='gl' # Galician
    GN='gn' # Guarani
    GU='gu' # Gujarati
    HA='ha' # Hausa
    HE='he' # Hebrew
    HI='hi' # Hindi
    HR='hr' # Croatian
    HU='hu' # Hungarian
    HY='hy' # Armenian
    IA='ia' # Interlingua
    ID='id' # Indonesian
    IE='ie' # Interlingue
    IK='ik' # Inupiak
    IS='is' # Icelandic
    IT='it' # Italian
    IU='iu' # Inuktitut
    JA='ja' # Japanese
    JW='jw' # Javanese
    KA='ka' # Georgian
    KK='kk' # Kazakh
    KL='kl' # Greenlandic
    KM='km' # Cambodian
    KN='kn' # Kannada
    KO='ko' # Korean
    KS='ks' # Kashmiri
    KU='ku' # Kurdish
    KY='ky' # Kirghiz
    LA='la' # Latin
    LN='ln' # Lingala
    LO='lo' # Laothian
    LT='lt' # Lithuanian
    LV='lv' # Latvian; Lettish
    MG='mg' # Malagasy
    MI='mi' # Maori
    MK='mk' # Macedonian
    ML='ml' # Malayalam
    MN='mn' # Mongolian
    MO='mo' # Moldavian
    MR='mr' # Marathi
    MS='ms' # Malay
    MT='mt' # Maltese
    MY='my' # Burmese
    NA='na' # Nauru
    NE='ne' # Nepali
    NL='nl' # Dutch
    NO='no' # Norwegian
    OC='oc' # Occitan
    OM='om' # (Afan) Oromo
    OR='or' # Oriya
    PA='pa' # Punjabi
    PL='pl' # Polish
    PS='ps' # Pashto, Pushto
    PT='pt' # Portuguese
    QU='qu' # Quechua
    RM='rm' # Rhaeto-Romance
    RN='rn' # Kirundi
    RO='ro' # Romanian
    RU='ru' # Russian
    RW='rw' # Kinyarwanda
    SA='sa' # Sanskrit
    SD='sd' # Sindhi
    SG='sg' # Sangho
    SH='sh' # Serbo-Croatian
    SI='si' # Singhalese
    SK='sk' # Slovak
    SL='sl' # Slovenian
    SM='sm' # Samoan
    SN='sn' # Shona
    SO='so' # Somali
    SQ='sq' # Albanian
    SR='sr' # Serbian
    SS='ss' # Siswati
    ST='st' # Sesotho
    SU='su' # Sundanese
    SV='sv' # Swedish
    SW='sw' # Swahili
    TA='ta' # Tamil
    TE='te' # Telugu
    TG='tg' # Tajik
    TH='th' # Thai
    TI='ti' # Tigrinya
    TK='tk' # Turkmen
    TL='tl' # Tagalog
    TN='tn' # Setswana
    TO='to' # Tonga
    TR='tr' # Turkish
    TS='ts' # Tsonga
    TT='tt' # Tatar
    TW='tw' # Twi
    UG='ug' # Uigur
    UK='uk' # Ukrainian
    UR='ur' # Urdu
    UZ='uz' # Uzbek
    VI='vi' # Vietnamese
    VO='vo' # Volapuk
    WO='wo' # Wolof
    XH='xh' # Xhosa
    YI='yi' # Yiddish
    YO='yo' # Yoruba
    ZA='za' # Zhuang
    ZH='zh' # Chinese
    ZU='zu' # Zulu


class IndividualIdentifierType(str, Enum):
    NATIONAL_INDIVIDUAL_IDENTIFIER='National Individual Identifier'
    ENTERPRISE_IDENTIFIER='Enterprise Identifier'
    SOCIAL_SECURITY_NUMBER='Social Security Number'
    OTHER='Other'


class InternationalTradeMarkCodeType(str, Enum):
    MADRID='Madrid'
    EU='EU'


class KindMarkType(str, Enum):
    INDIVIDUAL='Individual'
    COLLECTIVE='Collective'
    CERTIFICATE='Certificate'
    GUARANTEE='Guarantee'
    DEFENSIVE='Defensive'
    OTHER='Other'


class LicenceEventCodeType(str, Enum):
    TO_CHECK='To Check'
    WITHDRAWN='Withdrawn'
    REJECTED='Rejected'
    ACCEPTED='Accepted'


class LicenceKindType(str, Enum):
    UNKNOWN='Unknown'
    NONEXCLUSIVE='Nonexclusive'
    EXCLUSIVE='Exclusive'


class LicenceStatusCodeType(str, Enum):
    TO_VERIFY='To Verify'
    VALID='Valid'
    CANCELLED='Cancelled'
    EXPIRED='Expired'


class MarkCurrentStatusCodeType(str, Enum):
    APPLICATION_FILED='Application Filed'
    FILINGDATEACCORDED='Filing date accorded'
    CLASSIFICATIONCHECKED='Classification checked'
    APPLICATIONACCEPTED='Application accepted'
    APPLICATIONPUBLISHED='Application published'
    OPPOSITIONPENDING='Opposition pending'
    REGISTRATIONPUBLISHED='Registration published'
    APPLICATIONREFUSED='Application refused'
    APPLICATIONWITHDRAWN='Application withdrawn'
    APPEALPENDING='Appeal pending'
    INTERRUPTIONOFPROCEEDING='Interruption of proceeding'
    REGISTRATIONCANCELLED='Registration cancelled'
    CONVERSIONREQUESTED='Conversion requested'
    REGISTRATIONSURRENDERED='Registration surrendered'
    REVOCATIONPROCEEDINGPENDING='Revocation proceeding pending'
    INVALIDITYPROCEEDINGPENDING='Invalidity proceeding pending'
    ACTIONBEFORE_COURTOF_JUSTICEPENDING='Action before Court of Justice pending'


class MarkEventCodeType(str, Enum):
    APPLICATION_FILED='Application Filed'
    FILINGDATEACCORDED='Filing date accorded'
    CLASSIFICATIONCHECKED='Classification checked'
    APPLICATIONACCEPTED='Application accepted'
    APPLICATIONPUBLISHED='Application published'
    OPPOSITIONPENDING='Opposition pending'
    REGISTRATIONPUBLISHED='Registration published'
    APPLICATIONREFUSED='Application refused'
    APPLICATIONWITHDRAWN='Application withdrawn'
    APPEALPENDING='Appeal pending'
    INTERRUPTIONOFPROCEEDING='Interruption of proceeding'
    REGISTRATIONCANCELLED='Registration cancelled'
    CONVERSIONREQUESTED='Conversion requested'
    REGISTRATIONSURRENDERED='Registration surrendered'
    REVOCATIONPROCEEDINGPENDING='Revocation proceeding pending'
    INVALIDITYPROCEEDINGPENDING='Invalidity proceeding pending'
    ACTIONBEFORE_COURTOF_JUSTICEPENDING='Action before Court of Justice pending'


class MarkFeatureType(str, Enum):
    WORD='Word'
    STYLIZEDCHARACTERS='Stylized characters'
    FIGURATIVE='Figurative'
    COMBINED='Combined'
    _3D='3-D'
    COLOUR='Colour'
    SOUND='Sound'
    HOLOGRAM='Hologram'
    OLFACTORY='Olfactory'
    MOTION='Motion'
    MUNICIPAL='Municipal'
    CHIMNEY='Chimney'
    KENNFADEN='Kennfaden'
    OTHER='Other'
    UNDEFINED='Undefined'


class MarkImageColourModeType(str, Enum):
    BLACKAND_WHITE='Black and White'
    GREYSCALE='Greyscale'
    COLOUR='Colour'


class MarkImageRenditionKindType(str, Enum):
    THUMBNAIL='Thumbnail'
    GREYSCALE='Greyscale'
    OFFICE_COPY='Office Copy'


class NameKindType(str, Enum):
    NATURAL_PERSON='Natural Person'
    LEGAL_ENTITY='Legal Entity'
    OTHER='Other'


class NationalityCodeType(str, Enum):
    STATELESS='Stateless'
    UNIDENTIFIED='Unidentified'


class OperationCodeType(str, Enum):
    INSERT='Insert'
    UPDATE='Update'
    DELETE='Delete'


class OppositionBasisCodeType(str, Enum):
    MARK='Mark'
    REGISTEREDMARKWITHREPUTATION='Registered mark with reputation'
    WELLKNOWNMARK='Well-known mark'
    NONREGISTEREDMARK='Non-registered mark'
    SIGNUSEDINTRADE='Sign used in trade'
    MARKFILEDBYANAGENT='Mark filed by an agent'
    UNDEFINED='Undefined'


class OppositionCurrentStatusCodeType(str, Enum):
    OPPOSITIONFILED='Opposition filed'
    ADMISSIBILITYCHECKED='Admissibility checked'
    COOLINGOFFPERIOD='Cooling-off period'
    COMMENCEMENTOFPROCEEDING='Commencement of proceeding'
    AGREEMENTBETWEENPARTIES='Agreement between parties'
    FINALDECISIONCTMWITHDRAWN='Final decision - CTM withdrawn'
    FINALDECISIONCTMLIMITED='Final decision - CTM limited'
    FINALDECISION_OPPOSITIONWITHDRAWN='Final decision - Opposition withdrawn'
    FINALDECISIONCTMREJECTEDBYED='Final decision - CTM rejected by ED'
    FINALDECISIONCTMREJECTEDINPART='Final decision - CTM rejected in part'
    FINALDECISIONCTMREJECTED='Final decision - CTM rejected'
    FINALDECISION_OPPOSITIONREJECTED='Final decision - Opposition rejected'
    FINALDECISION_OPPOSITIONNOTDULYENTERED='Final decision - Opposition not duly entered'
    NODECISION_OPPOSITIONNOTDULYENTERED='No decision - Opposition not duly entered'
    OPPOSITIONCLOSED='Opposition closed'


class OppositionEventCodeType(str, Enum):
    OPPOSITIONFILED='Opposition filed'
    ADMISSIBILITYCHECKED='Admissibility checked'
    COOLINGOFFPERIOD='Cooling-off period'
    COMMENCEMENTOFPROCEEDING='Commencement of proceeding'
    AGREEMENTBETWEENPARTIES='Agreement between parties'
    FINALDECISIONCTMWITHDRAWN='Final decision - CTM withdrawn'
    FINALDECISIONCTMLIMITED='Final decision - CTM limited'
    FINALDECISION_OPPOSITIONWITHDRAWN='Final decision - Opposition withdrawn'
    FINALDECISIONCTMREJECTEDBYED='Final decision - CTM rejected by ED'
    FINALDECISIONCTMREJECTEDINPART='Final decision - CTM rejected in part'
    FINALDECISIONCTMREJECTED='Final decision - CTM rejected'
    FINALDECISION_OPPOSITIONREJECTED='Final decision - Opposition rejected'
    FINALDECISION_OPPOSITIONNOTDULYENTERED='Final decision - Opposition not duly entered'
    NODECISION_OPPOSITIONNOTDULYENTERED='No decision - Opposition not duly entered'
    OPPOSITIONCLOSED='Opposition closed'


class OtherDateKindType(str, Enum):
    CERTIFICATION_AGREEMENT_DATE='Certification Agreement Date'


class PaymentStatusCodeType(str, Enum):
    DONE='Done'
    ATTACHED='Attached'
    TOFOLLOW='To follow'
    BANKTRANSFERTOFOLLOW='Bank transfer to follow'
    UNDEFINED='Undefined'


class PhoneKindType(str, Enum):
    FIXED='Fixed'
    MOBILE_PHONE='Mobile Phone'
    OTHER='Other'
    UNDEFINED='Undefined'


class PreviousRegistrationBasisType(str, Enum):
    TRANSFORMATION='Transformation'
    RENEWAL='Renewal'


class PriorityStatusCodeType(str, Enum):
    CLAIMED='Claimed'
    ABANDONED='Abandoned'
    ACCEPTED='Accepted'
    PARTIALLY_REFUSED='Partially Refused'
    REFUSED='Refused'
    UNDEFINED='Undefined'


class PublicationSectionType(str, Enum):
    APPLICATIONS='Applications'
    AMENDMENTSTOAPPLICATIONS='Amendments to applications'
    CORRECTIONOFABSOLUTEERRORSONAPPLICATIONS='Correction of absolute errors on applications'
    CORRECTIONOFRELATIVEERRORSONAPPLICATIONS='Correction of relative errors on applications'
    WITHDRAWALS='Withdrawals'
    RESTRICTIONS='Restrictions'
    TOTALREFUSALS='Total refusals'
    PARTIALREFUSALS='Partial refusals'
    REGISTRATIONSWITHNOAMENDMENTS='Registrations with no amendments'
    REGISTRATIONSWITHAMENDMENTS='Registrations with amendments'
    CORRECTIONOFABSOLUTEERRORSONREGISTRATIONS='Correction of absolute errors on registrations'
    CORRECTIONOFRELATIVEERRORSONREGISTRATIONS='Correction of relative errors on registrations'
    TOTALTRANSFERS='Total transfers'
    PARTIALTRANSFERS='Partial transfers'
    CHANGEOFNAMEANDADDRESSOFPROPRIETOR='Change of name and address of proprietor'
    CHANGEOFNAMEANDPROFESSIONALADDRESSOFREPRESENTATIVE='Change of name and professional address of representative'
    REPLACEMENTOFREPRESENTATIVE='Replacement of representative'
    APPOINTMENTOFANEWREPRESENTATIVE='Appointment of a new representative'
    DELETIONOFTHEREPRESENTATIVE='Deletion of the representative'
    TOTALSURRENDEROFTRADEMARK='Total surrender of trade mark'
    PARTIALSURRENDEROFTRADEMARK='Partial surrender of trade mark'


class RecordChangeNameAddressKindType(str, Enum):
    CHANGE_APPLICANT_NAMEOR_ADDRESS='Change Applicant Name or Address'
    HOLDER='Holder'
    LICENSEE='Licensee'
    OTHER='Other'


class RecordCurrentStatusCodeType(str, Enum):
    RECORDFILED='Record filed'
    UNDEFINED='Undefined'


class RecordEventCodeType(str, Enum):
    TO_CHECK='To Check'
    WITHDRAWN='Withdrawn'
    REJECTED='Rejected'
    ACCEPTED='Accepted'


class RecordLicenceKindType(str, Enum):
    LICENCE='Licence'
    SUB_LICENCE='Sub-Licence'
    OTHER='Other'


class RecordMergerKindType(str, Enum):
    MERGER='Merger'
    OTHER='Other'


class RecordOppositionPeriodKindType(str, Enum):
    OPPOSITION_PERIOD='Opposition Period'
    PROTECTION_GRANTED_OPPOSITION_PERIOD='Protection Granted Opposition Period'
    HOLDER_RIGHT_RESTRICTION_OPPOSITION_PERIOD='Holder Right Restriction Opposition Period'
    OTHER='Other'


class RecordShortNotationKindType(str, Enum):
    SHORT_NOTATION='Short Notation'
    MERGER='Merger'
    PARTIAL_TRANSFER='Partial Transfer'


class RecordTransferKindType(str, Enum):
    TOTAL_TRANSFER='Total Transfer'
    PARTIAL_TRANSFER='Partial Transfer'
    OTHER='Other'


class RepresentativeKindCodeType(str, Enum):
    PROFESSIONAL_REPRESENTATIVE='Professional Representative'
    LAWYER='Lawyer'
    ASSOCIATION='Association'
    EMPLOYEE='Employee'
    OTHER='Other'
    UNDEFINED='Undefined'


class RequestExaminationKindCodeType(str, Enum):
    NORMAL='Normal'
    ACCELERATED='Accelerated'
    UNDEFINED='Undefined'


class RequestSearchKindCodeType(str, Enum):
    NO_SEARCH='No Search'
    NORMAL='Normal'
    ACCELERATED='Accelerated'
    EARLIER_SEARCH='Earlier Search'
    UNDEFINED='Undefined'


class RoleType(str, Enum):
    AGENT='Agent'
    APPEALEXAMINER='Appeal examiner'
    APPLICANT='Applicant'
    ASSIGNEE='Assignee'
    ASSISTANTEXAMINER='Assistant examiner'
    ATTORNEY='Attorney'
    AUTHOR='Author'
    CORRESPONDENT='Correspondent'
    CREATOR='Creator'
    DESIGNER='Designer'
    EMPLOYEE='Employee'
    EXAMINER='Examiner'
    FORMALITYEXAMINER='Formality examiner'
    HOLDER='Holder'
    IP_OFFICE='IP Office'
    JUDGE='Judge'
    LAWYER='Lawyer'
    LEGALPRACTITIONER='Legal practitioner'
    LICENSEE='Licensee'
    MORTGAGEE='Mortgagee'
    OPPONENT='Opponent'
    OTHER='Other'
    OWNER='Owner'
    REGISTRANT='Registrant'
    REPRESENTATIVE='Representative'
    SUBSTANTIVEEXAMINER='Substantive examiner'
    THIRD_PARTY_REQUESTOR='Third Party Requestor'
    TRANSFEREE='Transferee'
    TRANSFEROR='Transferor'
    TRANSLATOR='Translator'
    TRUSTEE='Trustee'


class SeniorityStatusCodeType(str, Enum):
    CLAIMED='Claimed'
    ABANDONED='Abandoned'
    ACCEPTED='Accepted'
    PARTIALLY_REFUSED='Partially Refused'
    REFUSED='Refused'


class SignatureMannerType(str, Enum):
    FAX_IMAGE='Fax Image'
    TEXT='Text'
    CLICK_WRAP='Click Wrap'
    PKCS_7='PKCS7'


class SoundFileFormatType(str, Enum):
    MP_3='MP3'


class TransactionCodeType(str, Enum):
    TRADE_MARKE_FILING='Trade Mark E-Filing'
    TRADE_MARKB_2_B_FILING='Trade Mark B2B-Filing'
    TRADE_MARK_INFORMATION='Trade Mark Information'
    TRADE_MARK_IDENTIFIER_LIST='Trade Mark Identifier List'
    TRADE_MARK_LIST='Trade Mark List'
    OPPOSITIONE_FILING='Opposition E-Filing'
    OPPOSITION_INFORMATION='Opposition Information'
    OPPOSITION_IDENTIFIER_LIST='Opposition Identifier List'


class TransactionSubCodeType(str, Enum):
    NORMAL='Normal'
    ACCELERATED_REGISTRATION='Accelerated Registration'


class TranscriptionKindType(str, Enum):
    TO_UPPERCASE='To Uppercase'
    TO_LOWERCASE='To Lowercase'
    TO_PHONETIC_CODE='To Phonetic Code'


class TransliterationKindType(str, Enum):
    ARABICTO_LATIN='Arabic to Latin'
    ARMENIANTO_LATIN='Armenian to Latin'
    CHINESETO_LATIN='Chinese to Latin'
    CYRILLICTO_LATIN='Cyrillic to Latin'
    GEORGIANTO_LATIN='Georgian to Latin'
    GREEKTO_LATIN='Greek to Latin'
    HEBREWTO_LATIN='Hebrew to Latin'
    INDICTO_LATIN='Indic to Latin'
    JAPANESETO_LATIN='Japanese to Latin'
    KOREANTO_LATIN='Korean to Latin'
    THAITO_LATIN='Thai to Latin'


class UnitType(str, Enum):
    CENTIMETRE='Centimetre'
    INCH='Inch'
    PIXEL='Pixel'


class WIPOFormerST3CodeType(str, Enum):
    CS='CS'
    DL='DL'
    DD='DD'
    SU='SU'
    YD='YD'
    YU='YU'


class WIPOST3CodeType(str, Enum):
    """WIPO Standard ST.3 - TWO-LETTER CODES FOR THE REPRESENTATION
    OF STATES, OTHER ENTITIES AND INTERGOVERNMENTAL ORGANIZATIONS - Version
    April 2007"""
    AD='AD' # Andorra
    AE='AE' # United Arab Emirates
    AF='AF' # Afghanistan
    AG='AG' # Antigua And Barbuda
    AI='AI' # Anguilla
    AL='AL' # Albania
    AM='AM' # Armenia
    AN='AN' # Netherlands Antilles
    AO='AO' # Angola
    AP='AP' # African Regional Industrial Property Organization (ARIPO)
    AR='AR' # Argentina
    AT='AT' # Austria
    AU='AU' # Australia
    AW='AW' # Aruba
    AZ='AZ' # Azerbaijan
    BA='BA' # Bosnia and Herzegovina
    BB='BB' # Barbados
    BD='BD' # Bangladesh
    BE='BE' # Belgium
    BF='BF' # Burkina Faso
    BG='BG' # Bulgaria
    BH='BH' # Bahrain
    BI='BI' # Burundi
    BJ='BJ' # Benin
    BM='BM' # Bermuda
    BN='BN' # Brunei Darussalam
    BO='BO' # Bolivia
    BR='BR' # Brazil
    BS='BS' # Bahamas
    BT='BT' # Bhutan
    BV='BV' # Bouvet Island
    BW='BW' # Botswana
    BX='BX' # Benelux Office for Intellectual Property (BOIP)
    BY='BY' # Belarus
    BZ='BZ' # Belize
    CA='CA' # Canada
    CD='CD' # Democratic Republic of the Congo
    CF='CF' # Central African Republic
    CG='CG' # Congo
    CH='CH' # Switzerland
    CI='CI' # Cote D'Ivoire
    CK='CK' # Cook Islands
    CL='CL' # Chile
    CM='CM' # Cameroon
    CN='CN' # China
    CO='CO' # Colombia
    CR='CR' # Costa Rica
    CU='CU' # Cuba
    CV='CV' # Cape Verde
    CY='CY' # Cyprus
    CZ='CZ' # Czech Republic
    DE='DE' # Germany
    DJ='DJ' # Djibouti
    DK='DK' # Denmark
    DM='DM' # Dominica
    DO='DO' # Dominican Republic
    DZ='DZ' # Algeria
    EA='EA' # Eurasian Patent Organization (EAPO)
    EC='EC' # Ecuador
    EE='EE' # Estonia
    EG='EG' # Egypt
    EH='EH' # Western Sahara
    EM='EM' # Office for Harmonization in the Internal Market (Trademarks and Designs) (OHIM)
    EP='EP' # European Patent Office (EPO)
    ER='ER' # Eritrea
    ES='ES' # Spain
    ET='ET' # Ethiopia
    FI='FI' # Finland
    FJ='FJ' # Fiji
    FK='FK' # Falkland Islands (Malvinas)
    FO='FO' # Faroe Islands
    FR='FR' # France
    GA='GA' # Gabon
    GB='GB' # United Kingdom
    GC='GC' # Patent Office of the Cooperation Council for the Arab States of the Gulf (GCC)
    GD='GD' # Grenada
    GE='GE' # Georgia
    GG='GG' # Guernsey
    GH='GH' # Ghana
    GI='GI' # Gibraltar
    GL='GL' # Greenland
    GM='GM' # Gambia
    GN='GN' # Guinea
    GQ='GQ' # Equatorial Guinea
    GR='GR' # Greece
    GS='GS' # South Georgia and South Sandwich Islands
    GT='GT' # Guatemala
    GW='GW' # Guinea-Bissau
    GY='GY' # Guyana
    HK='HK' # The Hong Kong Special Administration Region of the People's Republic of China
    HN='HN' # Honduras
    HR='HR' # Croatia
    HT='HT' # Haiti
    HU='HU' # Hungary
    IB='IB' # International Bureau of the World Intellectual Property Organization (WIPO)
    ID='ID' # Indonesia
    IE='IE' # Ireland
    IL='IL' # Israel
    IM='IM' # Isle of Man
    IN='IN' # India
    IQ='IQ' # Iraq
    IR='IR' # Iran (Islamic Republic of)
    IS='IS' # Iceland
    IT='IT' # Italy
    JE='JE' # Jersey
    JM='JM' # Jamaica
    JO='JO' # Jordan
    JP='JP' # Japan
    KE='KE' # Kenya
    KG='KG' # Kyrgyzstan
    KH='KH' # Cambodia
    KI='KI' # Kiribati
    KM='KM' # Comoros
    KN='KN' # Saint Kitts and Nevis
    KP='KP' # Democratic People's Republic of Korea
    KR='KR' # Republic of Korea
    KW='KW' # Kuwait
    KY='KY' # Cayman Islands
    KZ='KZ' # Kazakhstan
    LA='LA' # Lao People's Democratic Republic
    LB='LB' # Lebanon
    LC='LC' # Saint Lucia
    LI='LI' # Liechtenstein
    LK='LK' # Sri Lanka
    LR='LR' # Liberia
    LS='LS' # Lesotho
    LT='LT' # Lithuania
    LU='LU' # Luxembourg
    LV='LV' # Latvia
    LY='LY' # Libyan Arab Jamahiriya
    MA='MA' # Morocco
    MC='MC' # Monaco
    MD='MD' # Republic of Moldova
    ME='ME' # Montenegro
    MG='MG' # Madagascar
    MK='MK' # The former Yugoslav Republic of Macedonia
    ML='ML' # Mali
    MM='MM' # Myanmar
    MN='MN' # Mongolia
    MO='MO' # Macau
    MP='MP' # Northern Mariana Islands
    MR='MR' # Mauritania
    MS='MS' # Montserrat
    MT='MT' # Malta
    MU='MU' # Mauritius
    MV='MV' # Maldives
    MW='MW' # Malawi
    MX='MX' # Mexico
    MY='MY' # Malaysia
    MZ='MZ' # Mozambique
    NA='NA' # Namibia
    NE='NE' # Niger
    NG='NG' # Nigeria
    NI='NI' # Nicaragua
    NL='NL' # Netherlands
    NO='NO' # Norway
    NP='NP' # Nepal
    NR='NR' # Nauru
    NZ='NZ' # New Zealand
    OA='OA' # African Intellectual Property Organization (OAPI)
    OM='OM' # Oman
    PA='PA' # Panama
    PE='PE' # Peru
    PG='PG' # Papua New Guinea
    PH='PH' # Philippines
    PK='PK' # Pakistan
    PL='PL' # Poland
    PT='PT' # Portugal
    PW='PW' # Palau
    PY='PY' # Paraguay
    QA='QA' # Qatar
    QZ='QZ' # Community Plant Variety Office (European Community) (CPVO)
    RO='RO' # Romania
    RS='RS' # Serbia
    RU='RU' # Russian Federation
    RW='RW' # Rwanda
    SA='SA' # Saudi Arabia
    SB='SB' # Solomon Islands
    SC='SC' # Seychelles
    SD='SD' # Sudan
    SE='SE' # Sweden
    SG='SG' # Singapore
    SH='SH' # Saint Helena
    SI='SI' # Slovenia
    SK='SK' # Slovakia
    SL='SL' # Sierra Leone
    SM='SM' # San Marino
    SN='SN' # Senegal
    SO='SO' # Somalia
    SR='SR' # Suriname
    ST='ST' # Sao Tome and Principe
    SV='SV' # El Salvador
    SY='SY' # Syrian Arab Republic
    SZ='SZ' # Swaziland
    TC='TC' # Turks and Caicos Islands
    TD='TD' # Chad
    TG='TG' # Togo
    TH='TH' # Thailand
    TJ='TJ' # Tajikistan
    TL='TL' # Timor-Leste
    TM='TM' # Turkmenistan
    TN='TN' # Tunisia
    TO='TO' # Tonga
    TR='TR' # Turkey
    TT='TT' # Trinidad and Tobago
    TV='TV' # Tuvalu
    TW='TW' # Taiwan, Province of China
    TZ='TZ' # United Republic of Tanzania
    UA='UA' # Ukraine
    UG='UG' # Uganda
    US='US' # United States of America
    UY='UY' # Uruguay
    UZ='UZ' # Uzbekistan
    VA='VA' # Holy See
    VC='VC' # Saint Vincent and the Grenadines
    VE='VE' # Venezuela
    VG='VG' # Virgin Islands (British)
    VN='VN' # Viet Nam
    VU='VU' # Vanuatu
    WO='WO' # World Intellectual Property Organization (WIPO) (International Bureau of)
    WS='WS' # Samoa
    XN='XN' # Nordic Patent Institute (NPI)
    YE='YE' # Yemen
    ZA='ZA' # South Africa
    ZM='ZM' # Zambia
    ZW='ZW' # Zimbabwe


class TradeMarkApplicationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequestSoftware=None, ApplicationFormName=None, RequestSearch=None, RequestExamination=None, DocumentIncludedDetails=None, TradeMarkDetails=None, PaymentDetails=None, ReimbursementDetails=None, SignatoryDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RequestSoftware = RequestSoftware
        self.RequestSoftware_nsprefix_ = None
        self.ApplicationFormName = ApplicationFormName
        self.ApplicationFormName_nsprefix_ = None
        self.RequestSearch = RequestSearch
        self.RequestSearch_nsprefix_ = None
        self.RequestExamination = RequestExamination
        self.RequestExamination_nsprefix_ = None
        self.DocumentIncludedDetails = DocumentIncludedDetails
        self.DocumentIncludedDetails_nsprefix_ = None
        self.TradeMarkDetails = TradeMarkDetails
        self.TradeMarkDetails_nsprefix_ = None
        self.PaymentDetails = PaymentDetails
        self.PaymentDetails_nsprefix_ = None
        self.ReimbursementDetails = ReimbursementDetails
        self.ReimbursementDetails_nsprefix_ = None
        self.SignatoryDetails = SignatoryDetails
        self.SignatoryDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkApplicationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkApplicationType.subclass:
            return TradeMarkApplicationType.subclass(*args_, **kwargs_)
        else:
            return TradeMarkApplicationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequestSoftware(self):
        return self.RequestSoftware
    def set_RequestSoftware(self, RequestSoftware):
        self.RequestSoftware = RequestSoftware
    def get_ApplicationFormName(self):
        return self.ApplicationFormName
    def set_ApplicationFormName(self, ApplicationFormName):
        self.ApplicationFormName = ApplicationFormName
    def get_RequestSearch(self):
        return self.RequestSearch
    def set_RequestSearch(self, RequestSearch):
        self.RequestSearch = RequestSearch
    def get_RequestExamination(self):
        return self.RequestExamination
    def set_RequestExamination(self, RequestExamination):
        self.RequestExamination = RequestExamination
    def get_DocumentIncludedDetails(self):
        return self.DocumentIncludedDetails
    def set_DocumentIncludedDetails(self, DocumentIncludedDetails):
        self.DocumentIncludedDetails = DocumentIncludedDetails
    def get_TradeMarkDetails(self):
        return self.TradeMarkDetails
    def set_TradeMarkDetails(self, TradeMarkDetails):
        self.TradeMarkDetails = TradeMarkDetails
    def get_PaymentDetails(self):
        return self.PaymentDetails
    def set_PaymentDetails(self, PaymentDetails):
        self.PaymentDetails = PaymentDetails
    def get_ReimbursementDetails(self):
        return self.ReimbursementDetails
    def set_ReimbursementDetails(self, ReimbursementDetails):
        self.ReimbursementDetails = ReimbursementDetails
    def get_SignatoryDetails(self):
        return self.SignatoryDetails
    def set_SignatoryDetails(self, SignatoryDetails):
        self.SignatoryDetails = SignatoryDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.RequestSoftware is not None or
            self.ApplicationFormName is not None or
            self.RequestSearch is not None or
            self.RequestExamination is not None or
            self.DocumentIncludedDetails is not None or
            self.TradeMarkDetails is not None or
            self.PaymentDetails is not None or
            self.ReimbursementDetails is not None or
            self.SignatoryDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkApplicationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkApplicationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkApplicationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkApplicationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkApplicationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkApplicationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkApplicationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestSoftware is not None:
            namespaceprefix_ = self.RequestSoftware_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSoftware_nsprefix_) else ''
            self.RequestSoftware.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestSoftware', pretty_print=pretty_print)
        if self.ApplicationFormName is not None:
            namespaceprefix_ = self.ApplicationFormName_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationFormName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationFormName>%s</%sApplicationFormName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationFormName), input_name='ApplicationFormName')), namespaceprefix_ , eol_))
        if self.RequestSearch is not None:
            namespaceprefix_ = self.RequestSearch_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSearch_nsprefix_) else ''
            self.RequestSearch.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestSearch', pretty_print=pretty_print)
        if self.RequestExamination is not None:
            namespaceprefix_ = self.RequestExamination_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestExamination_nsprefix_) else ''
            self.RequestExamination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestExamination', pretty_print=pretty_print)
        if self.DocumentIncludedDetails is not None:
            namespaceprefix_ = self.DocumentIncludedDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentIncludedDetails_nsprefix_) else ''
            self.DocumentIncludedDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentIncludedDetails', pretty_print=pretty_print)
        if self.TradeMarkDetails is not None:
            namespaceprefix_ = self.TradeMarkDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkDetails_nsprefix_) else ''
            self.TradeMarkDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkDetails', pretty_print=pretty_print)
        if self.PaymentDetails is not None:
            namespaceprefix_ = self.PaymentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentDetails_nsprefix_) else ''
            self.PaymentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentDetails', pretty_print=pretty_print)
        if self.ReimbursementDetails is not None:
            namespaceprefix_ = self.ReimbursementDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementDetails_nsprefix_) else ''
            self.ReimbursementDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReimbursementDetails', pretty_print=pretty_print)
        if self.SignatoryDetails is not None:
            namespaceprefix_ = self.SignatoryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatoryDetails_nsprefix_) else ''
            self.SignatoryDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatoryDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequestSoftware':
            obj_ = RequestSoftwareType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestSoftware = obj_
            obj_.original_tagname_ = 'RequestSoftware'
        elif nodeName_ == 'ApplicationFormName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationFormName')
            value_ = self.gds_validate_string(value_, node, 'ApplicationFormName')
            self.ApplicationFormName = value_
            self.ApplicationFormName_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestSearch':
            obj_ = RequestSearchType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestSearch = obj_
            obj_.original_tagname_ = 'RequestSearch'
        elif nodeName_ == 'RequestExamination':
            obj_ = RequestExaminationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestExamination = obj_
            obj_.original_tagname_ = 'RequestExamination'
        elif nodeName_ == 'DocumentIncludedDetails':
            obj_ = DocumentIncludedDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentIncludedDetails = obj_
            obj_.original_tagname_ = 'DocumentIncludedDetails'
        elif nodeName_ == 'TradeMarkDetails':
            obj_ = TradeMarkDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkDetails = obj_
            obj_.original_tagname_ = 'TradeMarkDetails'
        elif nodeName_ == 'PaymentDetails':
            obj_ = PaymentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentDetails = obj_
            obj_.original_tagname_ = 'PaymentDetails'
        elif nodeName_ == 'ReimbursementDetails':
            obj_ = ReimbursementDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReimbursementDetails = obj_
            obj_.original_tagname_ = 'ReimbursementDetails'
        elif nodeName_ == 'SignatoryDetails':
            obj_ = SignatoryDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatoryDetails = obj_
            obj_.original_tagname_ = 'SignatoryDetails'
        else:
            content_ = self.gds_build_any(child_, 'TradeMarkApplicationType')
            self.add_anytypeobjs_(content_)
# end class TradeMarkApplicationType


class TransactionBodyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransactionErrorDetails=None, TransactionContentDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransactionErrorDetails = TransactionErrorDetails
        self.TransactionErrorDetails_nsprefix_ = None
        self.TransactionContentDetails = TransactionContentDetails
        self.TransactionContentDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionBodyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionBodyType.subclass:
            return TransactionBodyType.subclass(*args_, **kwargs_)
        else:
            return TransactionBodyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransactionErrorDetails(self):
        return self.TransactionErrorDetails
    def set_TransactionErrorDetails(self, TransactionErrorDetails):
        self.TransactionErrorDetails = TransactionErrorDetails
    def get_TransactionContentDetails(self):
        return self.TransactionContentDetails
    def set_TransactionContentDetails(self, TransactionContentDetails):
        self.TransactionContentDetails = TransactionContentDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.TransactionErrorDetails is not None or
            self.TransactionContentDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionBodyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionBodyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionBodyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionBodyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionBodyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionBodyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionBodyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransactionErrorDetails is not None:
            namespaceprefix_ = self.TransactionErrorDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionErrorDetails_nsprefix_) else ''
            self.TransactionErrorDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionErrorDetails', pretty_print=pretty_print)
        if self.TransactionContentDetails is not None:
            namespaceprefix_ = self.TransactionContentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionContentDetails_nsprefix_) else ''
            self.TransactionContentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionContentDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransactionErrorDetails':
            obj_ = TransactionErrorDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionErrorDetails = obj_
            obj_.original_tagname_ = 'TransactionErrorDetails'
        elif nodeName_ == 'TransactionContentDetails':
            obj_ = TransactionContentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionContentDetails = obj_
            obj_.original_tagname_ = 'TransactionContentDetails'
        else:
            content_ = self.gds_build_any(child_, 'TransactionBodyType')
            self.add_anytypeobjs_(content_)
# end class TransactionBodyType


class TransactionDataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkApplication=None, TradeMarkDetails=None, ApplicantDetails=None, RepresentativeDetails=None, MarkRecordDetails=None, MarkRecordRelationDetails=None, ClassificationTermDetails=None, TermSynonymRelationDetails=None, TermTranslationRelationDetails=None, AppealDetails=None, DecisionDetails=None, DecisionCaseRelationDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TradeMarkApplication = TradeMarkApplication
        self.TradeMarkApplication_nsprefix_ = None
        self.TradeMarkDetails = TradeMarkDetails
        self.TradeMarkDetails_nsprefix_ = None
        self.ApplicantDetails = ApplicantDetails
        self.ApplicantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.MarkRecordDetails = MarkRecordDetails
        self.MarkRecordDetails_nsprefix_ = None
        self.MarkRecordRelationDetails = MarkRecordRelationDetails
        self.MarkRecordRelationDetails_nsprefix_ = None
        self.ClassificationTermDetails = ClassificationTermDetails
        self.ClassificationTermDetails_nsprefix_ = None
        self.TermSynonymRelationDetails = TermSynonymRelationDetails
        self.TermSynonymRelationDetails_nsprefix_ = None
        self.TermTranslationRelationDetails = TermTranslationRelationDetails
        self.TermTranslationRelationDetails_nsprefix_ = None
        self.AppealDetails = AppealDetails
        self.AppealDetails_nsprefix_ = None
        self.DecisionDetails = DecisionDetails
        self.DecisionDetails_nsprefix_ = None
        self.DecisionCaseRelationDetails = DecisionCaseRelationDetails
        self.DecisionCaseRelationDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDataType.subclass:
            return TransactionDataType.subclass(*args_, **kwargs_)
        else:
            return TransactionDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkApplication(self):
        return self.TradeMarkApplication
    def set_TradeMarkApplication(self, TradeMarkApplication):
        self.TradeMarkApplication = TradeMarkApplication
    def get_TradeMarkDetails(self):
        return self.TradeMarkDetails
    def set_TradeMarkDetails(self, TradeMarkDetails):
        self.TradeMarkDetails = TradeMarkDetails
    def get_ApplicantDetails(self):
        return self.ApplicantDetails
    def set_ApplicantDetails(self, ApplicantDetails):
        self.ApplicantDetails = ApplicantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_MarkRecordDetails(self):
        return self.MarkRecordDetails
    def set_MarkRecordDetails(self, MarkRecordDetails):
        self.MarkRecordDetails = MarkRecordDetails
    def get_MarkRecordRelationDetails(self):
        return self.MarkRecordRelationDetails
    def set_MarkRecordRelationDetails(self, MarkRecordRelationDetails):
        self.MarkRecordRelationDetails = MarkRecordRelationDetails
    def get_ClassificationTermDetails(self):
        return self.ClassificationTermDetails
    def set_ClassificationTermDetails(self, ClassificationTermDetails):
        self.ClassificationTermDetails = ClassificationTermDetails
    def get_TermSynonymRelationDetails(self):
        return self.TermSynonymRelationDetails
    def set_TermSynonymRelationDetails(self, TermSynonymRelationDetails):
        self.TermSynonymRelationDetails = TermSynonymRelationDetails
    def get_TermTranslationRelationDetails(self):
        return self.TermTranslationRelationDetails
    def set_TermTranslationRelationDetails(self, TermTranslationRelationDetails):
        self.TermTranslationRelationDetails = TermTranslationRelationDetails
    def get_AppealDetails(self):
        return self.AppealDetails
    def set_AppealDetails(self, AppealDetails):
        self.AppealDetails = AppealDetails
    def get_DecisionDetails(self):
        return self.DecisionDetails
    def set_DecisionDetails(self, DecisionDetails):
        self.DecisionDetails = DecisionDetails
    def get_DecisionCaseRelationDetails(self):
        return self.DecisionCaseRelationDetails
    def set_DecisionCaseRelationDetails(self, DecisionCaseRelationDetails):
        self.DecisionCaseRelationDetails = DecisionCaseRelationDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkApplication is not None or
            self.TradeMarkDetails is not None or
            self.ApplicantDetails is not None or
            self.RepresentativeDetails is not None or
            self.MarkRecordDetails is not None or
            self.MarkRecordRelationDetails is not None or
            self.ClassificationTermDetails is not None or
            self.TermSynonymRelationDetails is not None or
            self.TermTranslationRelationDetails is not None or
            self.AppealDetails is not None or
            self.DecisionDetails is not None or
            self.DecisionCaseRelationDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionDataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradeMarkApplication is not None:
            namespaceprefix_ = self.TradeMarkApplication_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkApplication_nsprefix_) else ''
            self.TradeMarkApplication.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkApplication', pretty_print=pretty_print)
        if self.TradeMarkDetails is not None:
            namespaceprefix_ = self.TradeMarkDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkDetails_nsprefix_) else ''
            self.TradeMarkDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkDetails', pretty_print=pretty_print)
        if self.ApplicantDetails is not None:
            namespaceprefix_ = self.ApplicantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantDetails_nsprefix_) else ''
            self.ApplicantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.MarkRecordDetails is not None:
            namespaceprefix_ = self.MarkRecordDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkRecordDetails_nsprefix_) else ''
            self.MarkRecordDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkRecordDetails', pretty_print=pretty_print)
        if self.MarkRecordRelationDetails is not None:
            namespaceprefix_ = self.MarkRecordRelationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkRecordRelationDetails_nsprefix_) else ''
            self.MarkRecordRelationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkRecordRelationDetails', pretty_print=pretty_print)
        if self.ClassificationTermDetails is not None:
            namespaceprefix_ = self.ClassificationTermDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermDetails_nsprefix_) else ''
            self.ClassificationTermDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassificationTermDetails', pretty_print=pretty_print)
        if self.TermSynonymRelationDetails is not None:
            namespaceprefix_ = self.TermSynonymRelationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TermSynonymRelationDetails_nsprefix_) else ''
            self.TermSynonymRelationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TermSynonymRelationDetails', pretty_print=pretty_print)
        if self.TermTranslationRelationDetails is not None:
            namespaceprefix_ = self.TermTranslationRelationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TermTranslationRelationDetails_nsprefix_) else ''
            self.TermTranslationRelationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TermTranslationRelationDetails', pretty_print=pretty_print)
        if self.AppealDetails is not None:
            namespaceprefix_ = self.AppealDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealDetails_nsprefix_) else ''
            self.AppealDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealDetails', pretty_print=pretty_print)
        if self.DecisionDetails is not None:
            namespaceprefix_ = self.DecisionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionDetails_nsprefix_) else ''
            self.DecisionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DecisionDetails', pretty_print=pretty_print)
        if self.DecisionCaseRelationDetails is not None:
            namespaceprefix_ = self.DecisionCaseRelationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionCaseRelationDetails_nsprefix_) else ''
            self.DecisionCaseRelationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DecisionCaseRelationDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkApplication':
            obj_ = TradeMarkApplicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkApplication = obj_
            obj_.original_tagname_ = 'TradeMarkApplication'
        elif nodeName_ == 'TradeMarkDetails':
            obj_ = TradeMarkDetailsType1.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkDetails = obj_
            obj_.original_tagname_ = 'TradeMarkDetails'
        elif nodeName_ == 'ApplicantDetails':
            obj_ = ApplicantDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantDetails = obj_
            obj_.original_tagname_ = 'ApplicantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'MarkRecordDetails':
            obj_ = MarkRecordDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkRecordDetails = obj_
            obj_.original_tagname_ = 'MarkRecordDetails'
        elif nodeName_ == 'MarkRecordRelationDetails':
            obj_ = MarkRecordRelationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkRecordRelationDetails = obj_
            obj_.original_tagname_ = 'MarkRecordRelationDetails'
        elif nodeName_ == 'ClassificationTermDetails':
            obj_ = ClassificationTermDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassificationTermDetails = obj_
            obj_.original_tagname_ = 'ClassificationTermDetails'
        elif nodeName_ == 'TermSynonymRelationDetails':
            obj_ = TermSynonymRelationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TermSynonymRelationDetails = obj_
            obj_.original_tagname_ = 'TermSynonymRelationDetails'
        elif nodeName_ == 'TermTranslationRelationDetails':
            obj_ = TermTranslationRelationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TermTranslationRelationDetails = obj_
            obj_.original_tagname_ = 'TermTranslationRelationDetails'
        elif nodeName_ == 'AppealDetails':
            obj_ = AppealDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealDetails = obj_
            obj_.original_tagname_ = 'AppealDetails'
        elif nodeName_ == 'DecisionDetails':
            obj_ = DecisionDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DecisionDetails = obj_
            obj_.original_tagname_ = 'DecisionDetails'
        elif nodeName_ == 'DecisionCaseRelationDetails':
            obj_ = DecisionCaseRelationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DecisionCaseRelationDetails = obj_
            obj_.original_tagname_ = 'DecisionCaseRelationDetails'
        else:
            content_ = self.gds_build_any(child_, 'TransactionDataType')
            self.add_anytypeobjs_(content_)
# end class TransactionDataType


class TransactionErrorType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransactionErrorCode=None, TransactionErrorText=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransactionErrorCode = TransactionErrorCode
        self.TransactionErrorCode_nsprefix_ = None
        self.TransactionErrorText = TransactionErrorText
        self.TransactionErrorText_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionErrorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionErrorType.subclass:
            return TransactionErrorType.subclass(*args_, **kwargs_)
        else:
            return TransactionErrorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransactionErrorCode(self):
        return self.TransactionErrorCode
    def set_TransactionErrorCode(self, TransactionErrorCode):
        self.TransactionErrorCode = TransactionErrorCode
    def get_TransactionErrorText(self):
        return self.TransactionErrorText
    def set_TransactionErrorText(self, TransactionErrorText):
        self.TransactionErrorText = TransactionErrorText
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.TransactionErrorCode is not None or
            self.TransactionErrorText is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionErrorType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionErrorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionErrorType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionErrorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionErrorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionErrorType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionErrorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransactionErrorCode is not None:
            namespaceprefix_ = self.TransactionErrorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionErrorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionErrorCode>%s</%sTransactionErrorCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionErrorCode), input_name='TransactionErrorCode')), namespaceprefix_ , eol_))
        if self.TransactionErrorText is not None:
            namespaceprefix_ = self.TransactionErrorText_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionErrorText_nsprefix_) else ''
            self.TransactionErrorText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionErrorText', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransactionErrorCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransactionErrorCode')
            value_ = self.gds_validate_string(value_, node, 'TransactionErrorCode')
            self.TransactionErrorCode = value_
            self.TransactionErrorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransactionErrorText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionErrorText = obj_
            obj_.original_tagname_ = 'TransactionErrorText'
        else:
            content_ = self.gds_build_any(child_, 'TransactionErrorType')
            self.add_anytypeobjs_(content_)
# end class TransactionErrorType


class TransactionHeaderType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SenderDetails=None, ReceiverDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SenderDetails = SenderDetails
        self.SenderDetails_nsprefix_ = None
        self.ReceiverDetails = ReceiverDetails
        self.ReceiverDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionHeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionHeaderType.subclass:
            return TransactionHeaderType.subclass(*args_, **kwargs_)
        else:
            return TransactionHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SenderDetails(self):
        return self.SenderDetails
    def set_SenderDetails(self, SenderDetails):
        self.SenderDetails = SenderDetails
    def get_ReceiverDetails(self):
        return self.ReceiverDetails
    def set_ReceiverDetails(self, ReceiverDetails):
        self.ReceiverDetails = ReceiverDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.SenderDetails is not None or
            self.ReceiverDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionHeaderType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionHeaderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionHeaderType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionHeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionHeaderType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SenderDetails is not None:
            namespaceprefix_ = self.SenderDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SenderDetails_nsprefix_) else ''
            self.SenderDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SenderDetails', pretty_print=pretty_print)
        if self.ReceiverDetails is not None:
            namespaceprefix_ = self.ReceiverDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceiverDetails_nsprefix_) else ''
            self.ReceiverDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReceiverDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SenderDetails':
            obj_ = SenderDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SenderDetails = obj_
            obj_.original_tagname_ = 'SenderDetails'
        elif nodeName_ == 'ReceiverDetails':
            obj_ = ReceiverDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReceiverDetails = obj_
            obj_.original_tagname_ = 'ReceiverDetails'
        else:
            content_ = self.gds_build_any(child_, 'TransactionHeaderType')
            self.add_anytypeobjs_(content_)
# end class TransactionHeaderType


class TransactionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransactionHeader=None, TradeMarkTransactionBody=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransactionHeader = TransactionHeader
        self.TransactionHeader_nsprefix_ = None
        if TradeMarkTransactionBody is None:
            self.TradeMarkTransactionBody = []
        else:
            self.TradeMarkTransactionBody = TradeMarkTransactionBody
        self.TradeMarkTransactionBody_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionType.subclass:
            return TransactionType.subclass(*args_, **kwargs_)
        else:
            return TransactionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransactionHeader(self):
        return self.TransactionHeader
    def set_TransactionHeader(self, TransactionHeader):
        self.TransactionHeader = TransactionHeader
    def get_TradeMarkTransactionBody(self):
        return self.TradeMarkTransactionBody
    def set_TradeMarkTransactionBody(self, TradeMarkTransactionBody):
        self.TradeMarkTransactionBody = TradeMarkTransactionBody
    def add_TradeMarkTransactionBody(self, value):
        self.TradeMarkTransactionBody.append(value)
    def insert_TradeMarkTransactionBody_at(self, index, value):
        self.TradeMarkTransactionBody.insert(index, value)
    def replace_TradeMarkTransactionBody_at(self, index, value):
        self.TradeMarkTransactionBody[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.TransactionHeader is not None or
            self.TradeMarkTransactionBody or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransactionHeader is not None:
            namespaceprefix_ = self.TransactionHeader_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionHeader_nsprefix_) else ''
            self.TransactionHeader.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionHeader', pretty_print=pretty_print)
        for TradeMarkTransactionBody_ in self.TradeMarkTransactionBody:
            namespaceprefix_ = self.TradeMarkTransactionBody_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkTransactionBody_nsprefix_) else ''
            TradeMarkTransactionBody_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkTransactionBody', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransactionHeader':
            obj_ = TransactionHeaderType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionHeader = obj_
            obj_.original_tagname_ = 'TransactionHeader'
        elif nodeName_ == 'TradeMarkTransactionBody':
            obj_ = TransactionBodyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkTransactionBody.append(obj_)
            obj_.original_tagname_ = 'TradeMarkTransactionBody'
        else:
            content_ = self.gds_build_any(child_, 'TransactionType')
            self.add_anytypeobjs_(content_)
# end class TransactionType


class AddressBookType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLanguageCode=None, FreeFormatAddressDetails=None, FormattedNameAddress=None, ContactInformationDetails=None, PostalAddress=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AddressLanguageCode = AddressLanguageCode
        self.validate_ISOLanguageCodeType(self.AddressLanguageCode)
        self.AddressLanguageCode_nsprefix_ = None
        self.FreeFormatAddressDetails = FreeFormatAddressDetails
        self.FreeFormatAddressDetails_nsprefix_ = None
        self.FormattedNameAddress = FormattedNameAddress
        self.FormattedNameAddress_nsprefix_ = None
        self.ContactInformationDetails = ContactInformationDetails
        self.ContactInformationDetails_nsprefix_ = None
        self.PostalAddress = PostalAddress
        self.PostalAddress_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressBookType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressBookType.subclass:
            return AddressBookType.subclass(*args_, **kwargs_)
        else:
            return AddressBookType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLanguageCode(self):
        return self.AddressLanguageCode
    def set_AddressLanguageCode(self, AddressLanguageCode):
        self.AddressLanguageCode = AddressLanguageCode
    def get_FreeFormatAddressDetails(self):
        return self.FreeFormatAddressDetails
    def set_FreeFormatAddressDetails(self, FreeFormatAddressDetails):
        self.FreeFormatAddressDetails = FreeFormatAddressDetails
    def get_FormattedNameAddress(self):
        return self.FormattedNameAddress
    def set_FormattedNameAddress(self, FormattedNameAddress):
        self.FormattedNameAddress = FormattedNameAddress
    def get_ContactInformationDetails(self):
        return self.ContactInformationDetails
    def set_ContactInformationDetails(self, ContactInformationDetails):
        self.ContactInformationDetails = ContactInformationDetails
    def get_PostalAddress(self):
        return self.PostalAddress
    def set_PostalAddress(self, PostalAddress):
        self.PostalAddress = PostalAddress
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ISOLanguageCodeType(self, value):
        result = True
        # Validate type ISOLanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['aa', 'ab', 'af', 'am', 'ar', 'as', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bn', 'bo', 'br', 'ca', 'co', 'cs', 'cy', 'da', 'de', 'dz', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'ha', 'he', 'hi', 'hr', 'hu', 'hy', 'ia', 'id', 'ie', 'ik', 'is', 'it', 'iu', 'ja', 'jw', 'ka', 'kk', 'kl', 'km', 'kn', 'ko', 'ks', 'ku', 'ky', 'la', 'ln', 'lo', 'lt', 'lv', 'mg', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'ne', 'nl', 'no', 'oc', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sd', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ug', 'uk', 'ur', 'uz', 'vi', 'vo', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOLanguageCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AddressLanguageCode is not None or
            self.FreeFormatAddressDetails is not None or
            self.FormattedNameAddress is not None or
            self.ContactInformationDetails is not None or
            self.PostalAddress is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AddressBookType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressBookType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressBookType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressBookType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressBookType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AddressBookType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AddressBookType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLanguageCode is not None:
            namespaceprefix_ = self.AddressLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLanguageCode>%s</%sAddressLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressLanguageCode), input_name='AddressLanguageCode')), namespaceprefix_ , eol_))
        if self.FreeFormatAddressDetails is not None:
            namespaceprefix_ = self.FreeFormatAddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.FreeFormatAddressDetails_nsprefix_) else ''
            self.FreeFormatAddressDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreeFormatAddressDetails', pretty_print=pretty_print)
        if self.FormattedNameAddress is not None:
            namespaceprefix_ = self.FormattedNameAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FormattedNameAddress_nsprefix_) else ''
            self.FormattedNameAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FormattedNameAddress', pretty_print=pretty_print)
        if self.ContactInformationDetails is not None:
            namespaceprefix_ = self.ContactInformationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactInformationDetails_nsprefix_) else ''
            self.ContactInformationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContactInformationDetails', pretty_print=pretty_print)
        if self.PostalAddress is not None:
            namespaceprefix_ = self.PostalAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalAddress>%s</%sPostalAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalAddress), input_name='PostalAddress')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'AddressLanguageCode')
            self.AddressLanguageCode = value_
            self.AddressLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.AddressLanguageCode)
        elif nodeName_ == 'FreeFormatAddressDetails':
            obj_ = FreeFormatAddressDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreeFormatAddressDetails = obj_
            obj_.original_tagname_ = 'FreeFormatAddressDetails'
        elif nodeName_ == 'FormattedNameAddress':
            obj_ = FormattedNameAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FormattedNameAddress = obj_
            obj_.original_tagname_ = 'FormattedNameAddress'
        elif nodeName_ == 'ContactInformationDetails':
            obj_ = ContactInformationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContactInformationDetails = obj_
            obj_.original_tagname_ = 'ContactInformationDetails'
        elif nodeName_ == 'PostalAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalAddress')
            value_ = self.gds_validate_string(value_, node, 'PostalAddress')
            self.PostalAddress = value_
            self.PostalAddress_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'AddressBookType')
            self.add_anytypeobjs_(content_)
# end class AddressBookType


class AddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressCountryCode=None, FreeFormatAddress=None, FormattedAddress=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AddressCountryCode = AddressCountryCode
        self.validate_ISOCountryCodeType(self.AddressCountryCode)
        self.AddressCountryCode_nsprefix_ = None
        self.FreeFormatAddress = FreeFormatAddress
        self.FreeFormatAddress_nsprefix_ = None
        self.FormattedAddress = FormattedAddress
        self.FormattedAddress_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressCountryCode(self):
        return self.AddressCountryCode
    def set_AddressCountryCode(self, AddressCountryCode):
        self.AddressCountryCode = AddressCountryCode
    def get_FreeFormatAddress(self):
        return self.FreeFormatAddress
    def set_FreeFormatAddress(self, FreeFormatAddress):
        self.FreeFormatAddress = FreeFormatAddress
    def get_FormattedAddress(self):
        return self.FormattedAddress
    def set_FormattedAddress(self, FormattedAddress):
        self.FormattedAddress = FormattedAddress
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AddressCountryCode is not None or
            self.FreeFormatAddress is not None or
            self.FormattedAddress is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressCountryCode is not None:
            namespaceprefix_ = self.AddressCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressCountryCode>%s</%sAddressCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressCountryCode), input_name='AddressCountryCode')), namespaceprefix_ , eol_))
        if self.FreeFormatAddress is not None:
            namespaceprefix_ = self.FreeFormatAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FreeFormatAddress_nsprefix_) else ''
            self.FreeFormatAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreeFormatAddress', pretty_print=pretty_print)
        if self.FormattedAddress is not None:
            namespaceprefix_ = self.FormattedAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FormattedAddress_nsprefix_) else ''
            self.FormattedAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FormattedAddress', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressCountryCode')
            value_ = self.gds_validate_string(value_, node, 'AddressCountryCode')
            self.AddressCountryCode = value_
            self.AddressCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.AddressCountryCode)
        elif nodeName_ == 'FreeFormatAddress':
            obj_ = FreeFormatAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreeFormatAddress = obj_
            obj_.original_tagname_ = 'FreeFormatAddress'
        elif nodeName_ == 'FormattedAddress':
            obj_ = FormattedAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FormattedAddress = obj_
            obj_.original_tagname_ = 'FormattedAddress'
        else:
            content_ = self.gds_build_any(child_, 'AddressType')
            self.add_anytypeobjs_(content_)
# end class AddressType


class AppealEventType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AppealEventDate=None, AppealEventDateTime=None, AppealEventCode=None, AppealEventResponseDate=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(AppealEventDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AppealEventDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AppealEventDate
        self.AppealEventDate = initvalue_
        self.AppealEventDate_nsprefix_ = None
        if isinstance(AppealEventDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AppealEventDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = AppealEventDateTime
        self.AppealEventDateTime = initvalue_
        self.AppealEventDateTime_nsprefix_ = None
        self.AppealEventCode = AppealEventCode
        self.validate_AppealEventCodeType(self.AppealEventCode)
        self.AppealEventCode_nsprefix_ = None
        if isinstance(AppealEventResponseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AppealEventResponseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AppealEventResponseDate
        self.AppealEventResponseDate = initvalue_
        self.AppealEventResponseDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppealEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppealEventType.subclass:
            return AppealEventType.subclass(*args_, **kwargs_)
        else:
            return AppealEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AppealEventDate(self):
        return self.AppealEventDate
    def set_AppealEventDate(self, AppealEventDate):
        self.AppealEventDate = AppealEventDate
    def get_AppealEventDateTime(self):
        return self.AppealEventDateTime
    def set_AppealEventDateTime(self, AppealEventDateTime):
        self.AppealEventDateTime = AppealEventDateTime
    def get_AppealEventCode(self):
        return self.AppealEventCode
    def set_AppealEventCode(self, AppealEventCode):
        self.AppealEventCode = AppealEventCode
    def get_AppealEventResponseDate(self):
        return self.AppealEventResponseDate
    def set_AppealEventResponseDate(self, AppealEventResponseDate):
        self.AppealEventResponseDate = AppealEventResponseDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_AppealEventCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.AppealEventDate is not None or
            self.AppealEventDateTime is not None or
            self.AppealEventCode is not None or
            self.AppealEventResponseDate is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealEventType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppealEventType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppealEventType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppealEventType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppealEventType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppealEventType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealEventType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AppealEventDate is not None:
            namespaceprefix_ = self.AppealEventDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealEventDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealEventDate>%s</%sAppealEventDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AppealEventDate, input_name='AppealEventDate'), namespaceprefix_ , eol_))
        if self.AppealEventDateTime is not None:
            namespaceprefix_ = self.AppealEventDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealEventDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealEventDateTime>%s</%sAppealEventDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.AppealEventDateTime, input_name='AppealEventDateTime'), namespaceprefix_ , eol_))
        if self.AppealEventCode is not None:
            namespaceprefix_ = self.AppealEventCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealEventCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealEventCode>%s</%sAppealEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppealEventCode), input_name='AppealEventCode')), namespaceprefix_ , eol_))
        if self.AppealEventResponseDate is not None:
            namespaceprefix_ = self.AppealEventResponseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealEventResponseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealEventResponseDate>%s</%sAppealEventResponseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AppealEventResponseDate, input_name='AppealEventResponseDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment), input_name='Comment')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AppealEventDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AppealEventDate = dval_
            self.AppealEventDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppealEventDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.AppealEventDateTime = dval_
            self.AppealEventDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppealEventCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AppealEventCode')
            value_ = self.gds_validate_string(value_, node, 'AppealEventCode')
            self.AppealEventCode = value_
            self.AppealEventCode_nsprefix_ = child_.prefix
            # validate type AppealEventCodeType
            self.validate_AppealEventCodeType(self.AppealEventCode)
        elif nodeName_ == 'AppealEventResponseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AppealEventResponseDate = dval_
            self.AppealEventResponseDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment')
            value_ = self.gds_validate_string(value_, node, 'Comment')
            self.Comment = value_
            self.Comment_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'AppealEventType')
            self.add_anytypeobjs_(content_)
# end class AppealEventType


class AppealType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AppealIdentifier=None, AppealDate=None, AppealReceptionDate=None, AppealReceptionIdentifier=None, AppealReference=None, AppealLanguageCode=None, AppealProceedingLanguageCode=None, AppealPartiesKind=None, AppealGroundText=None, RespondentReference=None, CaseReferenceDetails=None, ContestedDecisionPartialIndicator=None, ContestedDecisionPartText=None, AppealCurrentStatusCode=None, AppealCurrentStatusDate=None, Comment=None, AppealExaminer=None, AppealRapporteur=None, AppellantDetails=None, RepresentativeDetails=None, RespondentDetails=None, AppealEventDetails=None, AppealDocumentDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AppealIdentifier = AppealIdentifier
        self.AppealIdentifier_nsprefix_ = None
        if isinstance(AppealDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AppealDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AppealDate
        self.AppealDate = initvalue_
        self.AppealDate_nsprefix_ = None
        if isinstance(AppealReceptionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AppealReceptionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AppealReceptionDate
        self.AppealReceptionDate = initvalue_
        self.AppealReceptionDate_nsprefix_ = None
        self.AppealReceptionIdentifier = AppealReceptionIdentifier
        self.AppealReceptionIdentifier_nsprefix_ = None
        self.AppealReference = AppealReference
        self.AppealReference_nsprefix_ = None
        self.AppealLanguageCode = AppealLanguageCode
        self.validate_ISOLanguageCodeType(self.AppealLanguageCode)
        self.AppealLanguageCode_nsprefix_ = None
        self.AppealProceedingLanguageCode = AppealProceedingLanguageCode
        self.validate_ISOLanguageCodeType(self.AppealProceedingLanguageCode)
        self.AppealProceedingLanguageCode_nsprefix_ = None
        self.AppealPartiesKind = AppealPartiesKind
        self.validate_AppealPartiesKindType(self.AppealPartiesKind)
        self.AppealPartiesKind_nsprefix_ = None
        self.AppealGroundText = AppealGroundText
        self.AppealGroundText_nsprefix_ = None
        self.RespondentReference = RespondentReference
        self.RespondentReference_nsprefix_ = None
        self.CaseReferenceDetails = CaseReferenceDetails
        self.CaseReferenceDetails_nsprefix_ = None
        self.ContestedDecisionPartialIndicator = ContestedDecisionPartialIndicator
        self.ContestedDecisionPartialIndicator_nsprefix_ = None
        self.ContestedDecisionPartText = ContestedDecisionPartText
        self.ContestedDecisionPartText_nsprefix_ = None
        self.AppealCurrentStatusCode = AppealCurrentStatusCode
        self.validate_AppealCurrentStatusCodeType(self.AppealCurrentStatusCode)
        self.AppealCurrentStatusCode_nsprefix_ = None
        if isinstance(AppealCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AppealCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AppealCurrentStatusDate
        self.AppealCurrentStatusDate = initvalue_
        self.AppealCurrentStatusDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.AppealExaminer = AppealExaminer
        self.AppealExaminer_nsprefix_ = None
        self.AppealRapporteur = AppealRapporteur
        self.AppealRapporteur_nsprefix_ = None
        self.AppellantDetails = AppellantDetails
        self.AppellantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.RespondentDetails = RespondentDetails
        self.RespondentDetails_nsprefix_ = None
        self.AppealEventDetails = AppealEventDetails
        self.AppealEventDetails_nsprefix_ = None
        self.AppealDocumentDetails = AppealDocumentDetails
        self.AppealDocumentDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppealType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppealType.subclass:
            return AppealType.subclass(*args_, **kwargs_)
        else:
            return AppealType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AppealIdentifier(self):
        return self.AppealIdentifier
    def set_AppealIdentifier(self, AppealIdentifier):
        self.AppealIdentifier = AppealIdentifier
    def get_AppealDate(self):
        return self.AppealDate
    def set_AppealDate(self, AppealDate):
        self.AppealDate = AppealDate
    def get_AppealReceptionDate(self):
        return self.AppealReceptionDate
    def set_AppealReceptionDate(self, AppealReceptionDate):
        self.AppealReceptionDate = AppealReceptionDate
    def get_AppealReceptionIdentifier(self):
        return self.AppealReceptionIdentifier
    def set_AppealReceptionIdentifier(self, AppealReceptionIdentifier):
        self.AppealReceptionIdentifier = AppealReceptionIdentifier
    def get_AppealReference(self):
        return self.AppealReference
    def set_AppealReference(self, AppealReference):
        self.AppealReference = AppealReference
    def get_AppealLanguageCode(self):
        return self.AppealLanguageCode
    def set_AppealLanguageCode(self, AppealLanguageCode):
        self.AppealLanguageCode = AppealLanguageCode
    def get_AppealProceedingLanguageCode(self):
        return self.AppealProceedingLanguageCode
    def set_AppealProceedingLanguageCode(self, AppealProceedingLanguageCode):
        self.AppealProceedingLanguageCode = AppealProceedingLanguageCode
    def get_AppealPartiesKind(self):
        return self.AppealPartiesKind
    def set_AppealPartiesKind(self, AppealPartiesKind):
        self.AppealPartiesKind = AppealPartiesKind
    def get_AppealGroundText(self):
        return self.AppealGroundText
    def set_AppealGroundText(self, AppealGroundText):
        self.AppealGroundText = AppealGroundText
    def get_RespondentReference(self):
        return self.RespondentReference
    def set_RespondentReference(self, RespondentReference):
        self.RespondentReference = RespondentReference
    def get_CaseReferenceDetails(self):
        return self.CaseReferenceDetails
    def set_CaseReferenceDetails(self, CaseReferenceDetails):
        self.CaseReferenceDetails = CaseReferenceDetails
    def get_ContestedDecisionPartialIndicator(self):
        return self.ContestedDecisionPartialIndicator
    def set_ContestedDecisionPartialIndicator(self, ContestedDecisionPartialIndicator):
        self.ContestedDecisionPartialIndicator = ContestedDecisionPartialIndicator
    def get_ContestedDecisionPartText(self):
        return self.ContestedDecisionPartText
    def set_ContestedDecisionPartText(self, ContestedDecisionPartText):
        self.ContestedDecisionPartText = ContestedDecisionPartText
    def get_AppealCurrentStatusCode(self):
        return self.AppealCurrentStatusCode
    def set_AppealCurrentStatusCode(self, AppealCurrentStatusCode):
        self.AppealCurrentStatusCode = AppealCurrentStatusCode
    def get_AppealCurrentStatusDate(self):
        return self.AppealCurrentStatusDate
    def set_AppealCurrentStatusDate(self, AppealCurrentStatusDate):
        self.AppealCurrentStatusDate = AppealCurrentStatusDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_AppealExaminer(self):
        return self.AppealExaminer
    def set_AppealExaminer(self, AppealExaminer):
        self.AppealExaminer = AppealExaminer
    def get_AppealRapporteur(self):
        return self.AppealRapporteur
    def set_AppealRapporteur(self, AppealRapporteur):
        self.AppealRapporteur = AppealRapporteur
    def get_AppellantDetails(self):
        return self.AppellantDetails
    def set_AppellantDetails(self, AppellantDetails):
        self.AppellantDetails = AppellantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_RespondentDetails(self):
        return self.RespondentDetails
    def set_RespondentDetails(self, RespondentDetails):
        self.RespondentDetails = RespondentDetails
    def get_AppealEventDetails(self):
        return self.AppealEventDetails
    def set_AppealEventDetails(self, AppealEventDetails):
        self.AppealEventDetails = AppealEventDetails
    def get_AppealDocumentDetails(self):
        return self.AppealDocumentDetails
    def set_AppealDocumentDetails(self, AppealDocumentDetails):
        self.AppealDocumentDetails = AppealDocumentDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ISOLanguageCodeType(self, value):
        result = True
        # Validate type ISOLanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['aa', 'ab', 'af', 'am', 'ar', 'as', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bn', 'bo', 'br', 'ca', 'co', 'cs', 'cy', 'da', 'de', 'dz', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'ha', 'he', 'hi', 'hr', 'hu', 'hy', 'ia', 'id', 'ie', 'ik', 'is', 'it', 'iu', 'ja', 'jw', 'ka', 'kk', 'kl', 'km', 'kn', 'ko', 'ks', 'ku', 'ky', 'la', 'ln', 'lo', 'lt', 'lv', 'mg', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'ne', 'nl', 'no', 'oc', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sd', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ug', 'uk', 'ur', 'uz', 'vi', 'vo', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOLanguageCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_AppealPartiesKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_AppealCurrentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.AppealIdentifier is not None or
            self.AppealDate is not None or
            self.AppealReceptionDate is not None or
            self.AppealReceptionIdentifier is not None or
            self.AppealReference is not None or
            self.AppealLanguageCode is not None or
            self.AppealProceedingLanguageCode is not None or
            self.AppealPartiesKind is not None or
            self.AppealGroundText is not None or
            self.RespondentReference is not None or
            self.CaseReferenceDetails is not None or
            self.ContestedDecisionPartialIndicator is not None or
            self.ContestedDecisionPartText is not None or
            self.AppealCurrentStatusCode is not None or
            self.AppealCurrentStatusDate is not None or
            self.Comment is not None or
            self.AppealExaminer is not None or
            self.AppealRapporteur is not None or
            self.AppellantDetails is not None or
            self.RepresentativeDetails is not None or
            self.RespondentDetails is not None or
            self.AppealEventDetails is not None or
            self.AppealDocumentDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppealType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppealType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppealType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppealType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppealType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AppealIdentifier is not None:
            namespaceprefix_ = self.AppealIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealIdentifier_nsprefix_) else ''
            self.AppealIdentifier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealIdentifier', pretty_print=pretty_print)
        if self.AppealDate is not None:
            namespaceprefix_ = self.AppealDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealDate>%s</%sAppealDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AppealDate, input_name='AppealDate'), namespaceprefix_ , eol_))
        if self.AppealReceptionDate is not None:
            namespaceprefix_ = self.AppealReceptionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealReceptionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealReceptionDate>%s</%sAppealReceptionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AppealReceptionDate, input_name='AppealReceptionDate'), namespaceprefix_ , eol_))
        if self.AppealReceptionIdentifier is not None:
            namespaceprefix_ = self.AppealReceptionIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealReceptionIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealReceptionIdentifier>%s</%sAppealReceptionIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppealReceptionIdentifier), input_name='AppealReceptionIdentifier')), namespaceprefix_ , eol_))
        if self.AppealReference is not None:
            namespaceprefix_ = self.AppealReference_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealReference>%s</%sAppealReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppealReference), input_name='AppealReference')), namespaceprefix_ , eol_))
        if self.AppealLanguageCode is not None:
            namespaceprefix_ = self.AppealLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealLanguageCode>%s</%sAppealLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppealLanguageCode), input_name='AppealLanguageCode')), namespaceprefix_ , eol_))
        if self.AppealProceedingLanguageCode is not None:
            namespaceprefix_ = self.AppealProceedingLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealProceedingLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealProceedingLanguageCode>%s</%sAppealProceedingLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppealProceedingLanguageCode), input_name='AppealProceedingLanguageCode')), namespaceprefix_ , eol_))
        if self.AppealPartiesKind is not None:
            namespaceprefix_ = self.AppealPartiesKind_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealPartiesKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealPartiesKind>%s</%sAppealPartiesKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppealPartiesKind), input_name='AppealPartiesKind')), namespaceprefix_ , eol_))
        if self.AppealGroundText is not None:
            namespaceprefix_ = self.AppealGroundText_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealGroundText_nsprefix_) else ''
            self.AppealGroundText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealGroundText', pretty_print=pretty_print)
        if self.RespondentReference is not None:
            namespaceprefix_ = self.RespondentReference_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRespondentReference>%s</%sRespondentReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RespondentReference), input_name='RespondentReference')), namespaceprefix_ , eol_))
        if self.CaseReferenceDetails is not None:
            namespaceprefix_ = self.CaseReferenceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CaseReferenceDetails_nsprefix_) else ''
            self.CaseReferenceDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CaseReferenceDetails', pretty_print=pretty_print)
        if self.ContestedDecisionPartialIndicator is not None:
            namespaceprefix_ = self.ContestedDecisionPartialIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ContestedDecisionPartialIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContestedDecisionPartialIndicator>%s</%sContestedDecisionPartialIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ContestedDecisionPartialIndicator, input_name='ContestedDecisionPartialIndicator'), namespaceprefix_ , eol_))
        if self.ContestedDecisionPartText is not None:
            namespaceprefix_ = self.ContestedDecisionPartText_nsprefix_ + ':' if (UseCapturedNS_ and self.ContestedDecisionPartText_nsprefix_) else ''
            self.ContestedDecisionPartText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContestedDecisionPartText', pretty_print=pretty_print)
        if self.AppealCurrentStatusCode is not None:
            namespaceprefix_ = self.AppealCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealCurrentStatusCode>%s</%sAppealCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppealCurrentStatusCode), input_name='AppealCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.AppealCurrentStatusDate is not None:
            namespaceprefix_ = self.AppealCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppealCurrentStatusDate>%s</%sAppealCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AppealCurrentStatusDate, input_name='AppealCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.AppealExaminer is not None:
            namespaceprefix_ = self.AppealExaminer_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealExaminer_nsprefix_) else ''
            self.AppealExaminer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealExaminer', pretty_print=pretty_print)
        if self.AppealRapporteur is not None:
            namespaceprefix_ = self.AppealRapporteur_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealRapporteur_nsprefix_) else ''
            self.AppealRapporteur.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealRapporteur', pretty_print=pretty_print)
        if self.AppellantDetails is not None:
            namespaceprefix_ = self.AppellantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantDetails_nsprefix_) else ''
            self.AppellantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppellantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.RespondentDetails is not None:
            namespaceprefix_ = self.RespondentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentDetails_nsprefix_) else ''
            self.RespondentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RespondentDetails', pretty_print=pretty_print)
        if self.AppealEventDetails is not None:
            namespaceprefix_ = self.AppealEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealEventDetails_nsprefix_) else ''
            self.AppealEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealEventDetails', pretty_print=pretty_print)
        if self.AppealDocumentDetails is not None:
            namespaceprefix_ = self.AppealDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealDocumentDetails_nsprefix_) else ''
            self.AppealDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealDocumentDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AppealIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealIdentifier = obj_
            obj_.original_tagname_ = 'AppealIdentifier'
        elif nodeName_ == 'AppealDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AppealDate = dval_
            self.AppealDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppealReceptionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AppealReceptionDate = dval_
            self.AppealReceptionDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppealReceptionIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppealReceptionIdentifier')
            value_ = self.gds_validate_string(value_, node, 'AppealReceptionIdentifier')
            self.AppealReceptionIdentifier = value_
            self.AppealReceptionIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppealReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppealReference')
            value_ = self.gds_validate_string(value_, node, 'AppealReference')
            self.AppealReference = value_
            self.AppealReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppealLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppealLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'AppealLanguageCode')
            self.AppealLanguageCode = value_
            self.AppealLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.AppealLanguageCode)
        elif nodeName_ == 'AppealProceedingLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppealProceedingLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'AppealProceedingLanguageCode')
            self.AppealProceedingLanguageCode = value_
            self.AppealProceedingLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.AppealProceedingLanguageCode)
        elif nodeName_ == 'AppealPartiesKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AppealPartiesKind')
            value_ = self.gds_validate_string(value_, node, 'AppealPartiesKind')
            self.AppealPartiesKind = value_
            self.AppealPartiesKind_nsprefix_ = child_.prefix
            # validate type AppealPartiesKindType
            self.validate_AppealPartiesKindType(self.AppealPartiesKind)
        elif nodeName_ == 'AppealGroundText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealGroundText = obj_
            obj_.original_tagname_ = 'AppealGroundText'
        elif nodeName_ == 'RespondentReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RespondentReference')
            value_ = self.gds_validate_string(value_, node, 'RespondentReference')
            self.RespondentReference = value_
            self.RespondentReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'CaseReferenceDetails':
            obj_ = CaseReferenceDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CaseReferenceDetails = obj_
            obj_.original_tagname_ = 'CaseReferenceDetails'
        elif nodeName_ == 'ContestedDecisionPartialIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ContestedDecisionPartialIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'ContestedDecisionPartialIndicator')
            self.ContestedDecisionPartialIndicator = ival_
            self.ContestedDecisionPartialIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ContestedDecisionPartText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContestedDecisionPartText = obj_
            obj_.original_tagname_ = 'ContestedDecisionPartText'
        elif nodeName_ == 'AppealCurrentStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AppealCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'AppealCurrentStatusCode')
            self.AppealCurrentStatusCode = value_
            self.AppealCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type AppealCurrentStatusCodeType
            self.validate_AppealCurrentStatusCodeType(self.AppealCurrentStatusCode)
        elif nodeName_ == 'AppealCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AppealCurrentStatusDate = dval_
            self.AppealCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'AppealExaminer':
            obj_ = NameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealExaminer = obj_
            obj_.original_tagname_ = 'AppealExaminer'
        elif nodeName_ == 'AppealRapporteur':
            obj_ = NameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealRapporteur = obj_
            obj_.original_tagname_ = 'AppealRapporteur'
        elif nodeName_ == 'AppellantDetails':
            obj_ = AppellantDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppellantDetails = obj_
            obj_.original_tagname_ = 'AppellantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'RespondentDetails':
            obj_ = RespondentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RespondentDetails = obj_
            obj_.original_tagname_ = 'RespondentDetails'
        elif nodeName_ == 'AppealEventDetails':
            obj_ = AppealEventDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealEventDetails = obj_
            obj_.original_tagname_ = 'AppealEventDetails'
        elif nodeName_ == 'AppealDocumentDetails':
            obj_ = AppealDocumentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealDocumentDetails = obj_
            obj_.original_tagname_ = 'AppealDocumentDetails'
        else:
            content_ = self.gds_build_any(child_, 'AppealType')
            self.add_anytypeobjs_(content_)
# end class AppealType


class AppellantType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, AppellantIdentifier=None, AppellantSequenceNumber=None, AppellantNationalityCode=None, AppellantLegalEntity=None, AppellantIncorporationCountryCode=None, AppellantIncorporationState=None, Comment=None, AppellantAddressBook=None, AppellantEntitlement=None, AppellantVersion=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        if AppellantIdentifier is None:
            self.AppellantIdentifier = []
        else:
            self.AppellantIdentifier = AppellantIdentifier
        self.AppellantIdentifier_nsprefix_ = None
        self.AppellantSequenceNumber = AppellantSequenceNumber
        self.AppellantSequenceNumber_nsprefix_ = None
        self.AppellantNationalityCode = AppellantNationalityCode
        self.validate_NationalityCodeType(self.AppellantNationalityCode)
        self.AppellantNationalityCode_nsprefix_ = None
        self.AppellantLegalEntity = AppellantLegalEntity
        self.AppellantLegalEntity_nsprefix_ = None
        self.AppellantIncorporationCountryCode = AppellantIncorporationCountryCode
        self.validate_ISOCountryCodeType(self.AppellantIncorporationCountryCode)
        self.AppellantIncorporationCountryCode_nsprefix_ = None
        self.AppellantIncorporationState = AppellantIncorporationState
        self.AppellantIncorporationState_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.AppellantAddressBook = AppellantAddressBook
        self.AppellantAddressBook_nsprefix_ = None
        self.AppellantEntitlement = AppellantEntitlement
        self.AppellantEntitlement_nsprefix_ = None
        self.AppellantVersion = AppellantVersion
        self.AppellantVersion_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppellantType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppellantType.subclass:
            return AppellantType.subclass(*args_, **kwargs_)
        else:
            return AppellantType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AppellantIdentifier(self):
        return self.AppellantIdentifier
    def set_AppellantIdentifier(self, AppellantIdentifier):
        self.AppellantIdentifier = AppellantIdentifier
    def add_AppellantIdentifier(self, value):
        self.AppellantIdentifier.append(value)
    def insert_AppellantIdentifier_at(self, index, value):
        self.AppellantIdentifier.insert(index, value)
    def replace_AppellantIdentifier_at(self, index, value):
        self.AppellantIdentifier[index] = value
    def get_AppellantSequenceNumber(self):
        return self.AppellantSequenceNumber
    def set_AppellantSequenceNumber(self, AppellantSequenceNumber):
        self.AppellantSequenceNumber = AppellantSequenceNumber
    def get_AppellantNationalityCode(self):
        return self.AppellantNationalityCode
    def set_AppellantNationalityCode(self, AppellantNationalityCode):
        self.AppellantNationalityCode = AppellantNationalityCode
    def get_AppellantLegalEntity(self):
        return self.AppellantLegalEntity
    def set_AppellantLegalEntity(self, AppellantLegalEntity):
        self.AppellantLegalEntity = AppellantLegalEntity
    def get_AppellantIncorporationCountryCode(self):
        return self.AppellantIncorporationCountryCode
    def set_AppellantIncorporationCountryCode(self, AppellantIncorporationCountryCode):
        self.AppellantIncorporationCountryCode = AppellantIncorporationCountryCode
    def get_AppellantIncorporationState(self):
        return self.AppellantIncorporationState
    def set_AppellantIncorporationState(self, AppellantIncorporationState):
        self.AppellantIncorporationState = AppellantIncorporationState
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_AppellantAddressBook(self):
        return self.AppellantAddressBook
    def set_AppellantAddressBook(self, AppellantAddressBook):
        self.AppellantAddressBook = AppellantAddressBook
    def get_AppellantEntitlement(self):
        return self.AppellantEntitlement
    def set_AppellantEntitlement(self, AppellantEntitlement):
        self.AppellantEntitlement = AppellantEntitlement
    def get_AppellantVersion(self):
        return self.AppellantVersion
    def set_AppellantVersion(self, AppellantVersion):
        self.AppellantVersion = AppellantVersion
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.AppellantIdentifier or
            self.AppellantSequenceNumber is not None or
            self.AppellantNationalityCode is not None or
            self.AppellantLegalEntity is not None or
            self.AppellantIncorporationCountryCode is not None or
            self.AppellantIncorporationState is not None or
            self.Comment is not None or
            self.AppellantAddressBook is not None or
            self.AppellantEntitlement is not None or
            self.AppellantVersion is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppellantType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppellantType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppellantType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppellantType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppellantType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppellantType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppellantType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AppellantIdentifier_ in self.AppellantIdentifier:
            namespaceprefix_ = self.AppellantIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantIdentifier_nsprefix_) else ''
            AppellantIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppellantIdentifier', pretty_print=pretty_print)
        if self.AppellantSequenceNumber is not None:
            namespaceprefix_ = self.AppellantSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppellantSequenceNumber>%s</%sAppellantSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.AppellantSequenceNumber, input_name='AppellantSequenceNumber'), namespaceprefix_ , eol_))
        if self.AppellantNationalityCode is not None:
            namespaceprefix_ = self.AppellantNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppellantNationalityCode>%s</%sAppellantNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppellantNationalityCode), input_name='AppellantNationalityCode')), namespaceprefix_ , eol_))
        if self.AppellantLegalEntity is not None:
            namespaceprefix_ = self.AppellantLegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantLegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppellantLegalEntity>%s</%sAppellantLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppellantLegalEntity), input_name='AppellantLegalEntity')), namespaceprefix_ , eol_))
        if self.AppellantIncorporationCountryCode is not None:
            namespaceprefix_ = self.AppellantIncorporationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantIncorporationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppellantIncorporationCountryCode>%s</%sAppellantIncorporationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppellantIncorporationCountryCode), input_name='AppellantIncorporationCountryCode')), namespaceprefix_ , eol_))
        if self.AppellantIncorporationState is not None:
            namespaceprefix_ = self.AppellantIncorporationState_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantIncorporationState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppellantIncorporationState>%s</%sAppellantIncorporationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AppellantIncorporationState), input_name='AppellantIncorporationState')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment), input_name='Comment')), namespaceprefix_ , eol_))
        if self.AppellantAddressBook is not None:
            namespaceprefix_ = self.AppellantAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantAddressBook_nsprefix_) else ''
            self.AppellantAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppellantAddressBook', pretty_print=pretty_print)
        if self.AppellantEntitlement is not None:
            namespaceprefix_ = self.AppellantEntitlement_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantEntitlement_nsprefix_) else ''
            self.AppellantEntitlement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppellantEntitlement', pretty_print=pretty_print)
        if self.AppellantVersion is not None:
            namespaceprefix_ = self.AppellantVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantVersion_nsprefix_) else ''
            self.AppellantVersion.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppellantVersion', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AppellantIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppellantIdentifier.append(obj_)
            obj_.original_tagname_ = 'AppellantIdentifier'
        elif nodeName_ == 'AppellantSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AppellantSequenceNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'AppellantSequenceNumber')
            self.AppellantSequenceNumber = ival_
            self.AppellantSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppellantNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AppellantNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'AppellantNationalityCode')
            self.AppellantNationalityCode = value_
            self.AppellantNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.AppellantNationalityCode)
        elif nodeName_ == 'AppellantLegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppellantLegalEntity')
            value_ = self.gds_validate_string(value_, node, 'AppellantLegalEntity')
            self.AppellantLegalEntity = value_
            self.AppellantLegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppellantIncorporationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppellantIncorporationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'AppellantIncorporationCountryCode')
            self.AppellantIncorporationCountryCode = value_
            self.AppellantIncorporationCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.AppellantIncorporationCountryCode)
        elif nodeName_ == 'AppellantIncorporationState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppellantIncorporationState')
            value_ = self.gds_validate_string(value_, node, 'AppellantIncorporationState')
            self.AppellantIncorporationState = value_
            self.AppellantIncorporationState_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment')
            value_ = self.gds_validate_string(value_, node, 'Comment')
            self.Comment = value_
            self.Comment_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppellantAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppellantAddressBook = obj_
            obj_.original_tagname_ = 'AppellantAddressBook'
        elif nodeName_ == 'AppellantEntitlement':
            obj_ = EntitlementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppellantEntitlement = obj_
            obj_.original_tagname_ = 'AppellantEntitlement'
        elif nodeName_ == 'AppellantVersion':
            obj_ = VersionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppellantVersion = obj_
            obj_.original_tagname_ = 'AppellantVersion'
        else:
            content_ = self.gds_build_any(child_, 'AppellantType')
            self.add_anytypeobjs_(content_)
# end class AppellantType


class ApplicantType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, ApplicantIdentifier=None, ApplicantSequenceNumber=None, ApplicantNationalityCode=None, ApplicantLegalEntity=None, ApplicantIncorporationCountryCode=None, ApplicantIncorporationState=None, Comment=None, ApplicantAddressBook=None, ApplicantEntitlement=None, ApplicantVersion=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        if ApplicantIdentifier is None:
            self.ApplicantIdentifier = []
        else:
            self.ApplicantIdentifier = ApplicantIdentifier
        self.ApplicantIdentifier_nsprefix_ = None
        self.ApplicantSequenceNumber = ApplicantSequenceNumber
        self.ApplicantSequenceNumber_nsprefix_ = None
        self.ApplicantNationalityCode = ApplicantNationalityCode
        self.validate_NationalityCodeType(self.ApplicantNationalityCode)
        self.ApplicantNationalityCode_nsprefix_ = None
        self.ApplicantLegalEntity = ApplicantLegalEntity
        self.ApplicantLegalEntity_nsprefix_ = None
        self.ApplicantIncorporationCountryCode = ApplicantIncorporationCountryCode
        self.validate_ISOCountryCodeType(self.ApplicantIncorporationCountryCode)
        self.ApplicantIncorporationCountryCode_nsprefix_ = None
        self.ApplicantIncorporationState = ApplicantIncorporationState
        self.ApplicantIncorporationState_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.ApplicantAddressBook = ApplicantAddressBook
        self.ApplicantAddressBook_nsprefix_ = None
        self.ApplicantEntitlement = ApplicantEntitlement
        self.ApplicantEntitlement_nsprefix_ = None
        self.ApplicantVersion = ApplicantVersion
        self.ApplicantVersion_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ApplicantType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ApplicantType.subclass:
            return ApplicantType.subclass(*args_, **kwargs_)
        else:
            return ApplicantType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ApplicantIdentifier(self):
        return self.ApplicantIdentifier
    def set_ApplicantIdentifier(self, ApplicantIdentifier):
        self.ApplicantIdentifier = ApplicantIdentifier
    def add_ApplicantIdentifier(self, value):
        self.ApplicantIdentifier.append(value)
    def insert_ApplicantIdentifier_at(self, index, value):
        self.ApplicantIdentifier.insert(index, value)
    def replace_ApplicantIdentifier_at(self, index, value):
        self.ApplicantIdentifier[index] = value
    def get_ApplicantSequenceNumber(self):
        return self.ApplicantSequenceNumber
    def set_ApplicantSequenceNumber(self, ApplicantSequenceNumber):
        self.ApplicantSequenceNumber = ApplicantSequenceNumber
    def get_ApplicantNationalityCode(self):
        return self.ApplicantNationalityCode
    def set_ApplicantNationalityCode(self, ApplicantNationalityCode):
        self.ApplicantNationalityCode = ApplicantNationalityCode
    def get_ApplicantLegalEntity(self):
        return self.ApplicantLegalEntity
    def set_ApplicantLegalEntity(self, ApplicantLegalEntity):
        self.ApplicantLegalEntity = ApplicantLegalEntity
    def get_ApplicantIncorporationCountryCode(self):
        return self.ApplicantIncorporationCountryCode
    def set_ApplicantIncorporationCountryCode(self, ApplicantIncorporationCountryCode):
        self.ApplicantIncorporationCountryCode = ApplicantIncorporationCountryCode
    def get_ApplicantIncorporationState(self):
        return self.ApplicantIncorporationState
    def set_ApplicantIncorporationState(self, ApplicantIncorporationState):
        self.ApplicantIncorporationState = ApplicantIncorporationState
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_ApplicantAddressBook(self):
        return self.ApplicantAddressBook
    def set_ApplicantAddressBook(self, ApplicantAddressBook):
        self.ApplicantAddressBook = ApplicantAddressBook
    def get_ApplicantEntitlement(self):
        return self.ApplicantEntitlement
    def set_ApplicantEntitlement(self, ApplicantEntitlement):
        self.ApplicantEntitlement = ApplicantEntitlement
    def get_ApplicantVersion(self):
        return self.ApplicantVersion
    def set_ApplicantVersion(self, ApplicantVersion):
        self.ApplicantVersion = ApplicantVersion
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.ApplicantIdentifier or
            self.ApplicantSequenceNumber is not None or
            self.ApplicantNationalityCode is not None or
            self.ApplicantLegalEntity is not None or
            self.ApplicantIncorporationCountryCode is not None or
            self.ApplicantIncorporationState is not None or
            self.Comment is not None or
            self.ApplicantAddressBook is not None or
            self.ApplicantEntitlement is not None or
            self.ApplicantVersion is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ApplicantType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ApplicantType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ApplicantType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ApplicantType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ApplicantType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ApplicantIdentifier_ in self.ApplicantIdentifier:
            namespaceprefix_ = self.ApplicantIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantIdentifier_nsprefix_) else ''
            ApplicantIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantIdentifier', pretty_print=pretty_print)
        if self.ApplicantSequenceNumber is not None:
            namespaceprefix_ = self.ApplicantSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicantSequenceNumber>%s</%sApplicantSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.ApplicantSequenceNumber, input_name='ApplicantSequenceNumber'), namespaceprefix_ , eol_))
        if self.ApplicantNationalityCode is not None:
            namespaceprefix_ = self.ApplicantNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicantNationalityCode>%s</%sApplicantNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicantNationalityCode), input_name='ApplicantNationalityCode')), namespaceprefix_ , eol_))
        if self.ApplicantLegalEntity is not None:
            namespaceprefix_ = self.ApplicantLegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantLegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicantLegalEntity>%s</%sApplicantLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicantLegalEntity), input_name='ApplicantLegalEntity')), namespaceprefix_ , eol_))
        if self.ApplicantIncorporationCountryCode is not None:
            namespaceprefix_ = self.ApplicantIncorporationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantIncorporationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicantIncorporationCountryCode>%s</%sApplicantIncorporationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicantIncorporationCountryCode), input_name='ApplicantIncorporationCountryCode')), namespaceprefix_ , eol_))
        if self.ApplicantIncorporationState is not None:
            namespaceprefix_ = self.ApplicantIncorporationState_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantIncorporationState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicantIncorporationState>%s</%sApplicantIncorporationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicantIncorporationState), input_name='ApplicantIncorporationState')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.ApplicantAddressBook is not None:
            namespaceprefix_ = self.ApplicantAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantAddressBook_nsprefix_) else ''
            self.ApplicantAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantAddressBook', pretty_print=pretty_print)
        if self.ApplicantEntitlement is not None:
            namespaceprefix_ = self.ApplicantEntitlement_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantEntitlement_nsprefix_) else ''
            self.ApplicantEntitlement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantEntitlement', pretty_print=pretty_print)
        if self.ApplicantVersion is not None:
            namespaceprefix_ = self.ApplicantVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantVersion_nsprefix_) else ''
            self.ApplicantVersion.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantVersion', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ApplicantIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantIdentifier.append(obj_)
            obj_.original_tagname_ = 'ApplicantIdentifier'
        elif nodeName_ == 'ApplicantSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ApplicantSequenceNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'ApplicantSequenceNumber')
            self.ApplicantSequenceNumber = ival_
            self.ApplicantSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicantNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ApplicantNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'ApplicantNationalityCode')
            self.ApplicantNationalityCode = value_
            self.ApplicantNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.ApplicantNationalityCode)
        elif nodeName_ == 'ApplicantLegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicantLegalEntity')
            value_ = self.gds_validate_string(value_, node, 'ApplicantLegalEntity')
            self.ApplicantLegalEntity = value_
            self.ApplicantLegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicantIncorporationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicantIncorporationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'ApplicantIncorporationCountryCode')
            self.ApplicantIncorporationCountryCode = value_
            self.ApplicantIncorporationCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.ApplicantIncorporationCountryCode)
        elif nodeName_ == 'ApplicantIncorporationState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicantIncorporationState')
            value_ = self.gds_validate_string(value_, node, 'ApplicantIncorporationState')
            self.ApplicantIncorporationState = value_
            self.ApplicantIncorporationState_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'ApplicantAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantAddressBook = obj_
            obj_.original_tagname_ = 'ApplicantAddressBook'
        elif nodeName_ == 'ApplicantEntitlement':
            obj_ = EntitlementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantEntitlement = obj_
            obj_.original_tagname_ = 'ApplicantEntitlement'
        elif nodeName_ == 'ApplicantVersion':
            obj_ = VersionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantVersion = obj_
            obj_.original_tagname_ = 'ApplicantVersion'
        else:
            content_ = self.gds_build_any(child_, 'ApplicantType')
            self.add_anytypeobjs_(content_)
# end class ApplicantType


class AuthorizationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AuthorizationIdentifier=None, AuthorizationDate=None, AuthorizationKind=None, Comment=None, AuthorizationDocumentSupply=None, AuthorizationDocument=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AuthorizationIdentifier = AuthorizationIdentifier
        self.AuthorizationIdentifier_nsprefix_ = None
        if isinstance(AuthorizationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AuthorizationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AuthorizationDate
        self.AuthorizationDate = initvalue_
        self.AuthorizationDate_nsprefix_ = None
        self.AuthorizationKind = AuthorizationKind
        self.validate_AuthorizationKindType(self.AuthorizationKind)
        self.AuthorizationKind_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.AuthorizationDocumentSupply = AuthorizationDocumentSupply
        self.validate_AuthorizationDocumentSupplyType(self.AuthorizationDocumentSupply)
        self.AuthorizationDocumentSupply_nsprefix_ = None
        self.AuthorizationDocument = AuthorizationDocument
        self.AuthorizationDocument_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AuthorizationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuthorizationType.subclass:
            return AuthorizationType.subclass(*args_, **kwargs_)
        else:
            return AuthorizationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AuthorizationIdentifier(self):
        return self.AuthorizationIdentifier
    def set_AuthorizationIdentifier(self, AuthorizationIdentifier):
        self.AuthorizationIdentifier = AuthorizationIdentifier
    def get_AuthorizationDate(self):
        return self.AuthorizationDate
    def set_AuthorizationDate(self, AuthorizationDate):
        self.AuthorizationDate = AuthorizationDate
    def get_AuthorizationKind(self):
        return self.AuthorizationKind
    def set_AuthorizationKind(self, AuthorizationKind):
        self.AuthorizationKind = AuthorizationKind
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_AuthorizationDocumentSupply(self):
        return self.AuthorizationDocumentSupply
    def set_AuthorizationDocumentSupply(self, AuthorizationDocumentSupply):
        self.AuthorizationDocumentSupply = AuthorizationDocumentSupply
    def get_AuthorizationDocument(self):
        return self.AuthorizationDocument
    def set_AuthorizationDocument(self, AuthorizationDocument):
        self.AuthorizationDocument = AuthorizationDocument
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_AuthorizationKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_AuthorizationDocumentSupplyType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.AuthorizationIdentifier is not None or
            self.AuthorizationDate is not None or
            self.AuthorizationKind is not None or
            self.Comment is not None or
            self.AuthorizationDocumentSupply is not None or
            self.AuthorizationDocument is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AuthorizationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AuthorizationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AuthorizationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AuthorizationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AuthorizationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AuthorizationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AuthorizationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AuthorizationIdentifier is not None:
            namespaceprefix_ = self.AuthorizationIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationIdentifier>%s</%sAuthorizationIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorizationIdentifier), input_name='AuthorizationIdentifier')), namespaceprefix_ , eol_))
        if self.AuthorizationDate is not None:
            namespaceprefix_ = self.AuthorizationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationDate>%s</%sAuthorizationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AuthorizationDate, input_name='AuthorizationDate'), namespaceprefix_ , eol_))
        if self.AuthorizationKind is not None:
            namespaceprefix_ = self.AuthorizationKind_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationKind>%s</%sAuthorizationKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorizationKind), input_name='AuthorizationKind')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.AuthorizationDocumentSupply is not None:
            namespaceprefix_ = self.AuthorizationDocumentSupply_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationDocumentSupply_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationDocumentSupply>%s</%sAuthorizationDocumentSupply>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorizationDocumentSupply), input_name='AuthorizationDocumentSupply')), namespaceprefix_ , eol_))
        if self.AuthorizationDocument is not None:
            namespaceprefix_ = self.AuthorizationDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationDocument_nsprefix_) else ''
            self.AuthorizationDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AuthorizationDocument', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AuthorizationIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AuthorizationIdentifier')
            value_ = self.gds_validate_string(value_, node, 'AuthorizationIdentifier')
            self.AuthorizationIdentifier = value_
            self.AuthorizationIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'AuthorizationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AuthorizationDate = dval_
            self.AuthorizationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'AuthorizationKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AuthorizationKind')
            value_ = self.gds_validate_string(value_, node, 'AuthorizationKind')
            self.AuthorizationKind = value_
            self.AuthorizationKind_nsprefix_ = child_.prefix
            # validate type AuthorizationKindType
            self.validate_AuthorizationKindType(self.AuthorizationKind)
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'AuthorizationDocumentSupply':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AuthorizationDocumentSupply')
            value_ = self.gds_validate_string(value_, node, 'AuthorizationDocumentSupply')
            self.AuthorizationDocumentSupply = value_
            self.AuthorizationDocumentSupply_nsprefix_ = child_.prefix
            # validate type AuthorizationDocumentSupplyType
            self.validate_AuthorizationDocumentSupplyType(self.AuthorizationDocumentSupply)
        elif nodeName_ == 'AuthorizationDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AuthorizationDocument = obj_
            obj_.original_tagname_ = 'AuthorizationDocument'
        else:
            content_ = self.gds_build_any(child_, 'AuthorizationType')
            self.add_anytypeobjs_(content_)
# end class AuthorizationType


class BasicApplicationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BasicApplicationNumber=None, BasicApplicationDate=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BasicApplicationNumber = BasicApplicationNumber
        self.BasicApplicationNumber_nsprefix_ = None
        if isinstance(BasicApplicationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BasicApplicationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BasicApplicationDate
        self.BasicApplicationDate = initvalue_
        self.BasicApplicationDate_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicApplicationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicApplicationType.subclass:
            return BasicApplicationType.subclass(*args_, **kwargs_)
        else:
            return BasicApplicationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BasicApplicationNumber(self):
        return self.BasicApplicationNumber
    def set_BasicApplicationNumber(self, BasicApplicationNumber):
        self.BasicApplicationNumber = BasicApplicationNumber
    def get_BasicApplicationDate(self):
        return self.BasicApplicationDate
    def set_BasicApplicationDate(self, BasicApplicationDate):
        self.BasicApplicationDate = BasicApplicationDate
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.BasicApplicationNumber is not None or
            self.BasicApplicationDate is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicApplicationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicApplicationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasicApplicationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasicApplicationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasicApplicationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasicApplicationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicApplicationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BasicApplicationNumber is not None:
            namespaceprefix_ = self.BasicApplicationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicApplicationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBasicApplicationNumber>%s</%sBasicApplicationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BasicApplicationNumber), input_name='BasicApplicationNumber')), namespaceprefix_ , eol_))
        if self.BasicApplicationDate is not None:
            namespaceprefix_ = self.BasicApplicationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicApplicationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBasicApplicationDate>%s</%sBasicApplicationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BasicApplicationDate, input_name='BasicApplicationDate'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BasicApplicationNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BasicApplicationNumber')
            value_ = self.gds_validate_string(value_, node, 'BasicApplicationNumber')
            self.BasicApplicationNumber = value_
            self.BasicApplicationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'BasicApplicationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BasicApplicationDate = dval_
            self.BasicApplicationDate_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'BasicApplicationType')
            self.add_anytypeobjs_(content_)
# end class BasicApplicationType


class BasicRecordType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordIdentifier=None, RecordFilingDate=None, RecordNotificationDate=None, RecordEffectiveDate=None, BasicRecordKind=None, RecordReference=None, RecordLanguageCode=None, TradeMarkKeyDetails=None, RecordPublicationDetails=None, ClaimantDetails=None, RepresentativeDetails=None, RecordEventDetails=None, RecordDocumentDetails=None, RecordCurrentStatusCode=None, RecordCurrentStatusDate=None, FactDecisionText=None, RecordInterestedOfficeCode=None, RecordDesignatedCountryDetails=None, RecordUseIntentDetails=None, GoodsServicesLimitationDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecordIdentifier = RecordIdentifier
        self.RecordIdentifier_nsprefix_ = None
        if isinstance(RecordFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordFilingDate
        self.RecordFilingDate = initvalue_
        self.RecordFilingDate_nsprefix_ = None
        if isinstance(RecordNotificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordNotificationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordNotificationDate
        self.RecordNotificationDate = initvalue_
        self.RecordNotificationDate_nsprefix_ = None
        if isinstance(RecordEffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEffectiveDate
        self.RecordEffectiveDate = initvalue_
        self.RecordEffectiveDate_nsprefix_ = None
        self.BasicRecordKind = BasicRecordKind
        self.validate_BasicRecordKindType(self.BasicRecordKind)
        self.BasicRecordKind_nsprefix_ = None
        self.RecordReference = RecordReference
        self.RecordReference_nsprefix_ = None
        self.RecordLanguageCode = RecordLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        self.RecordLanguageCode_nsprefix_ = None
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
        self.TradeMarkKeyDetails_nsprefix_ = None
        self.RecordPublicationDetails = RecordPublicationDetails
        self.RecordPublicationDetails_nsprefix_ = None
        self.ClaimantDetails = ClaimantDetails
        self.ClaimantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.RecordEventDetails = RecordEventDetails
        self.RecordEventDetails_nsprefix_ = None
        self.RecordDocumentDetails = RecordDocumentDetails
        self.RecordDocumentDetails_nsprefix_ = None
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
        self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        self.RecordCurrentStatusCode_nsprefix_ = None
        if isinstance(RecordCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordCurrentStatusDate
        self.RecordCurrentStatusDate = initvalue_
        self.RecordCurrentStatusDate_nsprefix_ = None
        self.FactDecisionText = FactDecisionText
        self.FactDecisionText_nsprefix_ = None
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
        self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        self.RecordInterestedOfficeCode_nsprefix_ = None
        self.RecordDesignatedCountryDetails = RecordDesignatedCountryDetails
        self.RecordDesignatedCountryDetails_nsprefix_ = None
        self.RecordUseIntentDetails = RecordUseIntentDetails
        self.RecordUseIntentDetails_nsprefix_ = None
        self.GoodsServicesLimitationDetails = GoodsServicesLimitationDetails
        self.GoodsServicesLimitationDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicRecordType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicRecordType.subclass:
            return BasicRecordType.subclass(*args_, **kwargs_)
        else:
            return BasicRecordType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordIdentifier(self):
        return self.RecordIdentifier
    def set_RecordIdentifier(self, RecordIdentifier):
        self.RecordIdentifier = RecordIdentifier
    def get_RecordFilingDate(self):
        return self.RecordFilingDate
    def set_RecordFilingDate(self, RecordFilingDate):
        self.RecordFilingDate = RecordFilingDate
    def get_RecordNotificationDate(self):
        return self.RecordNotificationDate
    def set_RecordNotificationDate(self, RecordNotificationDate):
        self.RecordNotificationDate = RecordNotificationDate
    def get_RecordEffectiveDate(self):
        return self.RecordEffectiveDate
    def set_RecordEffectiveDate(self, RecordEffectiveDate):
        self.RecordEffectiveDate = RecordEffectiveDate
    def get_BasicRecordKind(self):
        return self.BasicRecordKind
    def set_BasicRecordKind(self, BasicRecordKind):
        self.BasicRecordKind = BasicRecordKind
    def get_RecordReference(self):
        return self.RecordReference
    def set_RecordReference(self, RecordReference):
        self.RecordReference = RecordReference
    def get_RecordLanguageCode(self):
        return self.RecordLanguageCode
    def set_RecordLanguageCode(self, RecordLanguageCode):
        self.RecordLanguageCode = RecordLanguageCode
    def get_TradeMarkKeyDetails(self):
        return self.TradeMarkKeyDetails
    def set_TradeMarkKeyDetails(self, TradeMarkKeyDetails):
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
    def get_RecordPublicationDetails(self):
        return self.RecordPublicationDetails
    def set_RecordPublicationDetails(self, RecordPublicationDetails):
        self.RecordPublicationDetails = RecordPublicationDetails
    def get_ClaimantDetails(self):
        return self.ClaimantDetails
    def set_ClaimantDetails(self, ClaimantDetails):
        self.ClaimantDetails = ClaimantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_RecordEventDetails(self):
        return self.RecordEventDetails
    def set_RecordEventDetails(self, RecordEventDetails):
        self.RecordEventDetails = RecordEventDetails
    def get_RecordDocumentDetails(self):
        return self.RecordDocumentDetails
    def set_RecordDocumentDetails(self, RecordDocumentDetails):
        self.RecordDocumentDetails = RecordDocumentDetails
    def get_RecordCurrentStatusCode(self):
        return self.RecordCurrentStatusCode
    def set_RecordCurrentStatusCode(self, RecordCurrentStatusCode):
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
    def get_RecordCurrentStatusDate(self):
        return self.RecordCurrentStatusDate
    def set_RecordCurrentStatusDate(self, RecordCurrentStatusDate):
        self.RecordCurrentStatusDate = RecordCurrentStatusDate
    def get_FactDecisionText(self):
        return self.FactDecisionText
    def set_FactDecisionText(self, FactDecisionText):
        self.FactDecisionText = FactDecisionText
    def get_RecordInterestedOfficeCode(self):
        return self.RecordInterestedOfficeCode
    def set_RecordInterestedOfficeCode(self, RecordInterestedOfficeCode):
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
    def get_RecordDesignatedCountryDetails(self):
        return self.RecordDesignatedCountryDetails
    def set_RecordDesignatedCountryDetails(self, RecordDesignatedCountryDetails):
        self.RecordDesignatedCountryDetails = RecordDesignatedCountryDetails
    def get_RecordUseIntentDetails(self):
        return self.RecordUseIntentDetails
    def set_RecordUseIntentDetails(self, RecordUseIntentDetails):
        self.RecordUseIntentDetails = RecordUseIntentDetails
    def get_GoodsServicesLimitationDetails(self):
        return self.GoodsServicesLimitationDetails
    def set_GoodsServicesLimitationDetails(self, GoodsServicesLimitationDetails):
        self.GoodsServicesLimitationDetails = GoodsServicesLimitationDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_BasicRecordKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedISOLanguageCodeType(self, value):
        return self.validate_restriction(inspect.currentframe().f_code.co_name, value)
    def validate_RecordCurrentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordIdentifier is not None or
            self.RecordFilingDate is not None or
            self.RecordNotificationDate is not None or
            self.RecordEffectiveDate is not None or
            self.BasicRecordKind is not None or
            self.RecordReference is not None or
            self.RecordLanguageCode is not None or
            self.TradeMarkKeyDetails is not None or
            self.RecordPublicationDetails is not None or
            self.ClaimantDetails is not None or
            self.RepresentativeDetails is not None or
            self.RecordEventDetails is not None or
            self.RecordDocumentDetails is not None or
            self.RecordCurrentStatusCode is not None or
            self.RecordCurrentStatusDate is not None or
            self.FactDecisionText is not None or
            self.RecordInterestedOfficeCode is not None or
            self.RecordDesignatedCountryDetails is not None or
            self.RecordUseIntentDetails is not None or
            self.GoodsServicesLimitationDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRecordType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicRecordType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasicRecordType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasicRecordType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasicRecordType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasicRecordType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRecordType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordIdentifier is not None:
            namespaceprefix_ = self.RecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier>%s</%sRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier), input_name='RecordIdentifier')), namespaceprefix_ , eol_))
        if self.RecordFilingDate is not None:
            namespaceprefix_ = self.RecordFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordFilingDate>%s</%sRecordFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordFilingDate, input_name='RecordFilingDate'), namespaceprefix_ , eol_))
        if self.RecordNotificationDate is not None:
            namespaceprefix_ = self.RecordNotificationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNotificationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordNotificationDate>%s</%sRecordNotificationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordNotificationDate, input_name='RecordNotificationDate'), namespaceprefix_ , eol_))
        if self.RecordEffectiveDate is not None:
            namespaceprefix_ = self.RecordEffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEffectiveDate>%s</%sRecordEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEffectiveDate, input_name='RecordEffectiveDate'), namespaceprefix_ , eol_))
        if self.BasicRecordKind is not None:
            namespaceprefix_ = self.BasicRecordKind_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRecordKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBasicRecordKind>%s</%sBasicRecordKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BasicRecordKind), input_name='BasicRecordKind')), namespaceprefix_ , eol_))
        if self.RecordReference is not None:
            namespaceprefix_ = self.RecordReference_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordReference>%s</%sRecordReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordReference), input_name='RecordReference')), namespaceprefix_ , eol_))
        if self.RecordLanguageCode is not None:
            namespaceprefix_ = self.RecordLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordLanguageCode>%s</%sRecordLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordLanguageCode), input_name='RecordLanguageCode')), namespaceprefix_ , eol_))
        if self.TradeMarkKeyDetails is not None:
            namespaceprefix_ = self.TradeMarkKeyDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKeyDetails_nsprefix_) else ''
            self.TradeMarkKeyDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKeyDetails', pretty_print=pretty_print)
        if self.RecordPublicationDetails is not None:
            namespaceprefix_ = self.RecordPublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublicationDetails_nsprefix_) else ''
            self.RecordPublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublicationDetails', pretty_print=pretty_print)
        if self.ClaimantDetails is not None:
            namespaceprefix_ = self.ClaimantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantDetails_nsprefix_) else ''
            self.ClaimantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.RecordEventDetails is not None:
            namespaceprefix_ = self.RecordEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDetails_nsprefix_) else ''
            self.RecordEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEventDetails', pretty_print=pretty_print)
        if self.RecordDocumentDetails is not None:
            namespaceprefix_ = self.RecordDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocumentDetails_nsprefix_) else ''
            self.RecordDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocumentDetails', pretty_print=pretty_print)
        if self.RecordCurrentStatusCode is not None:
            namespaceprefix_ = self.RecordCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusCode>%s</%sRecordCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordCurrentStatusCode), input_name='RecordCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.RecordCurrentStatusDate is not None:
            namespaceprefix_ = self.RecordCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusDate>%s</%sRecordCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordCurrentStatusDate, input_name='RecordCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.FactDecisionText is not None:
            namespaceprefix_ = self.FactDecisionText_nsprefix_ + ':' if (UseCapturedNS_ and self.FactDecisionText_nsprefix_) else ''
            self.FactDecisionText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FactDecisionText', pretty_print=pretty_print)
        if self.RecordInterestedOfficeCode is not None:
            namespaceprefix_ = self.RecordInterestedOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordInterestedOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordInterestedOfficeCode>%s</%sRecordInterestedOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordInterestedOfficeCode), input_name='RecordInterestedOfficeCode')), namespaceprefix_ , eol_))
        if self.RecordDesignatedCountryDetails is not None:
            namespaceprefix_ = self.RecordDesignatedCountryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDesignatedCountryDetails_nsprefix_) else ''
            self.RecordDesignatedCountryDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDesignatedCountryDetails', pretty_print=pretty_print)
        if self.RecordUseIntentDetails is not None:
            namespaceprefix_ = self.RecordUseIntentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordUseIntentDetails_nsprefix_) else ''
            self.RecordUseIntentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordUseIntentDetails', pretty_print=pretty_print)
        if self.GoodsServicesLimitationDetails is not None:
            namespaceprefix_ = self.GoodsServicesLimitationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitationDetails_nsprefix_) else ''
            self.GoodsServicesLimitationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitationDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier')
            self.RecordIdentifier = value_
            self.RecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordFilingDate = dval_
            self.RecordFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordNotificationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordNotificationDate = dval_
            self.RecordNotificationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEffectiveDate = dval_
            self.RecordEffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'BasicRecordKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BasicRecordKind')
            value_ = self.gds_validate_string(value_, node, 'BasicRecordKind')
            self.BasicRecordKind = value_
            self.BasicRecordKind_nsprefix_ = child_.prefix
            # validate type BasicRecordKindType
            self.validate_BasicRecordKindType(self.BasicRecordKind)
        elif nodeName_ == 'RecordReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordReference')
            value_ = self.gds_validate_string(value_, node, 'RecordReference')
            self.RecordReference = value_
            self.RecordReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'RecordLanguageCode')
            self.RecordLanguageCode = value_
            self.RecordLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        elif nodeName_ == 'TradeMarkKeyDetails':
            obj_ = TradeMarkKeyDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKeyDetails = obj_
            obj_.original_tagname_ = 'TradeMarkKeyDetails'
        elif nodeName_ == 'RecordPublicationDetails':
            obj_ = RecordPublicationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublicationDetails = obj_
            obj_.original_tagname_ = 'RecordPublicationDetails'
        elif nodeName_ == 'ClaimantDetails':
            obj_ = ClaimantDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantDetails = obj_
            obj_.original_tagname_ = 'ClaimantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'RecordEventDetails':
            obj_ = RecordEventDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEventDetails = obj_
            obj_.original_tagname_ = 'RecordEventDetails'
        elif nodeName_ == 'RecordDocumentDetails':
            obj_ = RecordDocumentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocumentDetails = obj_
            obj_.original_tagname_ = 'RecordDocumentDetails'
        elif nodeName_ == 'RecordCurrentStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'RecordCurrentStatusCode')
            self.RecordCurrentStatusCode = value_
            self.RecordCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type RecordCurrentStatusCodeType
            self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        elif nodeName_ == 'RecordCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordCurrentStatusDate = dval_
            self.RecordCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'FactDecisionText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FactDecisionText = obj_
            obj_.original_tagname_ = 'FactDecisionText'
        elif nodeName_ == 'RecordInterestedOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordInterestedOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RecordInterestedOfficeCode')
            self.RecordInterestedOfficeCode = value_
            self.RecordInterestedOfficeCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        elif nodeName_ == 'RecordDesignatedCountryDetails':
            obj_ = RecordDesignatedCountryDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDesignatedCountryDetails = obj_
            obj_.original_tagname_ = 'RecordDesignatedCountryDetails'
        elif nodeName_ == 'RecordUseIntentDetails':
            obj_ = RecordUseIntentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordUseIntentDetails = obj_
            obj_.original_tagname_ = 'RecordUseIntentDetails'
        elif nodeName_ == 'GoodsServicesLimitationDetails':
            obj_ = GoodsServicesLimitationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitationDetails = obj_
            obj_.original_tagname_ = 'GoodsServicesLimitationDetails'
        else:
            content_ = self.gds_build_any(child_, 'BasicRecordType')
            self.add_anytypeobjs_(content_)
# end class BasicRecordType


class BasicRegistrationApplicationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegistrationOfficeCode=None, BasicApplicationDetails=None, BasicRegistrationDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegistrationOfficeCode = RegistrationOfficeCode
        self.validate_WIPOST3CodeType(self.RegistrationOfficeCode)
        self.RegistrationOfficeCode_nsprefix_ = None
        self.BasicApplicationDetails = BasicApplicationDetails
        self.BasicApplicationDetails_nsprefix_ = None
        self.BasicRegistrationDetails = BasicRegistrationDetails
        self.BasicRegistrationDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicRegistrationApplicationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicRegistrationApplicationType.subclass:
            return BasicRegistrationApplicationType.subclass(*args_, **kwargs_)
        else:
            return BasicRegistrationApplicationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegistrationOfficeCode(self):
        return self.RegistrationOfficeCode
    def set_RegistrationOfficeCode(self, RegistrationOfficeCode):
        self.RegistrationOfficeCode = RegistrationOfficeCode
    def get_BasicApplicationDetails(self):
        return self.BasicApplicationDetails
    def set_BasicApplicationDetails(self, BasicApplicationDetails):
        self.BasicApplicationDetails = BasicApplicationDetails
    def get_BasicRegistrationDetails(self):
        return self.BasicRegistrationDetails
    def set_BasicRegistrationDetails(self, BasicRegistrationDetails):
        self.BasicRegistrationDetails = BasicRegistrationDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_WIPOST3CodeType(self, value):
        result = True
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RegistrationOfficeCode is not None or
            self.BasicApplicationDetails is not None or
            self.BasicRegistrationDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationApplicationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicRegistrationApplicationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasicRegistrationApplicationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasicRegistrationApplicationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasicRegistrationApplicationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasicRegistrationApplicationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationApplicationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegistrationOfficeCode is not None:
            namespaceprefix_ = self.RegistrationOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationOfficeCode>%s</%sRegistrationOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationOfficeCode), input_name='RegistrationOfficeCode')), namespaceprefix_ , eol_))
        if self.BasicApplicationDetails is not None:
            namespaceprefix_ = self.BasicApplicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicApplicationDetails_nsprefix_) else ''
            self.BasicApplicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BasicApplicationDetails', pretty_print=pretty_print)
        if self.BasicRegistrationDetails is not None:
            namespaceprefix_ = self.BasicRegistrationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRegistrationDetails_nsprefix_) else ''
            self.BasicRegistrationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BasicRegistrationDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegistrationOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RegistrationOfficeCode')
            self.RegistrationOfficeCode = value_
            self.RegistrationOfficeCode_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.RegistrationOfficeCode)
        elif nodeName_ == 'BasicApplicationDetails':
            obj_ = BasicApplicationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BasicApplicationDetails = obj_
            obj_.original_tagname_ = 'BasicApplicationDetails'
        elif nodeName_ == 'BasicRegistrationDetails':
            obj_ = BasicRegistrationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BasicRegistrationDetails = obj_
            obj_.original_tagname_ = 'BasicRegistrationDetails'
        else:
            content_ = self.gds_build_any(child_, 'BasicRegistrationApplicationType')
            self.add_anytypeobjs_(content_)
# end class BasicRegistrationApplicationType


class BasicRegistrationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BasicRegistrationNumber=None, BasicRegistrationDate=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BasicRegistrationNumber = BasicRegistrationNumber
        self.BasicRegistrationNumber_nsprefix_ = None
        if isinstance(BasicRegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BasicRegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BasicRegistrationDate
        self.BasicRegistrationDate = initvalue_
        self.BasicRegistrationDate_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicRegistrationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicRegistrationType.subclass:
            return BasicRegistrationType.subclass(*args_, **kwargs_)
        else:
            return BasicRegistrationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BasicRegistrationNumber(self):
        return self.BasicRegistrationNumber
    def set_BasicRegistrationNumber(self, BasicRegistrationNumber):
        self.BasicRegistrationNumber = BasicRegistrationNumber
    def get_BasicRegistrationDate(self):
        return self.BasicRegistrationDate
    def set_BasicRegistrationDate(self, BasicRegistrationDate):
        self.BasicRegistrationDate = BasicRegistrationDate
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.BasicRegistrationNumber is not None or
            self.BasicRegistrationDate is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicRegistrationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasicRegistrationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasicRegistrationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasicRegistrationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasicRegistrationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BasicRegistrationNumber is not None:
            namespaceprefix_ = self.BasicRegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBasicRegistrationNumber>%s</%sBasicRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BasicRegistrationNumber), input_name='BasicRegistrationNumber')), namespaceprefix_ , eol_))
        if self.BasicRegistrationDate is not None:
            namespaceprefix_ = self.BasicRegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBasicRegistrationDate>%s</%sBasicRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BasicRegistrationDate, input_name='BasicRegistrationDate'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BasicRegistrationNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BasicRegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'BasicRegistrationNumber')
            self.BasicRegistrationNumber = value_
            self.BasicRegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'BasicRegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BasicRegistrationDate = dval_
            self.BasicRegistrationDate_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'BasicRegistrationType')
            self.add_anytypeobjs_(content_)
# end class BasicRegistrationType


class CardAccountType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CardPrimaryAccountNumber=None, CardNetworkIdentifier=None, CardKindCode=None, CardCustomerIdentifier=None, CardValidityStartDate=None, CardExpiryDate=None, CardIssuerIdentifier=None, CardIssueNumber=None, CardCV2Identifier=None, CardChipCode=None, CardChipApplicationIdentifier=None, CardHolderName=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CardPrimaryAccountNumber = CardPrimaryAccountNumber
        self.CardPrimaryAccountNumber_nsprefix_ = None
        self.CardNetworkIdentifier = CardNetworkIdentifier
        self.CardNetworkIdentifier_nsprefix_ = None
        self.CardKindCode = CardKindCode
        self.validate_CardKindCodeType(self.CardKindCode)
        self.CardKindCode_nsprefix_ = None
        self.CardCustomerIdentifier = CardCustomerIdentifier
        self.CardCustomerIdentifier_nsprefix_ = None
        if isinstance(CardValidityStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CardValidityStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = CardValidityStartDate
        self.CardValidityStartDate = initvalue_
        self.CardValidityStartDate_nsprefix_ = None
        if isinstance(CardExpiryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CardExpiryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = CardExpiryDate
        self.CardExpiryDate = initvalue_
        self.CardExpiryDate_nsprefix_ = None
        self.CardIssuerIdentifier = CardIssuerIdentifier
        self.CardIssuerIdentifier_nsprefix_ = None
        self.CardIssueNumber = CardIssueNumber
        self.CardIssueNumber_nsprefix_ = None
        self.CardCV2Identifier = CardCV2Identifier
        self.CardCV2Identifier_nsprefix_ = None
        self.CardChipCode = CardChipCode
        self.validate_ChipCodeType(self.CardChipCode)
        self.CardChipCode_nsprefix_ = None
        self.CardChipApplicationIdentifier = CardChipApplicationIdentifier
        self.CardChipApplicationIdentifier_nsprefix_ = None
        self.CardHolderName = CardHolderName
        self.CardHolderName_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CardAccountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CardAccountType.subclass:
            return CardAccountType.subclass(*args_, **kwargs_)
        else:
            return CardAccountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CardPrimaryAccountNumber(self):
        return self.CardPrimaryAccountNumber
    def set_CardPrimaryAccountNumber(self, CardPrimaryAccountNumber):
        self.CardPrimaryAccountNumber = CardPrimaryAccountNumber
    def get_CardNetworkIdentifier(self):
        return self.CardNetworkIdentifier
    def set_CardNetworkIdentifier(self, CardNetworkIdentifier):
        self.CardNetworkIdentifier = CardNetworkIdentifier
    def get_CardKindCode(self):
        return self.CardKindCode
    def set_CardKindCode(self, CardKindCode):
        self.CardKindCode = CardKindCode
    def get_CardCustomerIdentifier(self):
        return self.CardCustomerIdentifier
    def set_CardCustomerIdentifier(self, CardCustomerIdentifier):
        self.CardCustomerIdentifier = CardCustomerIdentifier
    def get_CardValidityStartDate(self):
        return self.CardValidityStartDate
    def set_CardValidityStartDate(self, CardValidityStartDate):
        self.CardValidityStartDate = CardValidityStartDate
    def get_CardExpiryDate(self):
        return self.CardExpiryDate
    def set_CardExpiryDate(self, CardExpiryDate):
        self.CardExpiryDate = CardExpiryDate
    def get_CardIssuerIdentifier(self):
        return self.CardIssuerIdentifier
    def set_CardIssuerIdentifier(self, CardIssuerIdentifier):
        self.CardIssuerIdentifier = CardIssuerIdentifier
    def get_CardIssueNumber(self):
        return self.CardIssueNumber
    def set_CardIssueNumber(self, CardIssueNumber):
        self.CardIssueNumber = CardIssueNumber
    def get_CardCV2Identifier(self):
        return self.CardCV2Identifier
    def set_CardCV2Identifier(self, CardCV2Identifier):
        self.CardCV2Identifier = CardCV2Identifier
    def get_CardChipCode(self):
        return self.CardChipCode
    def set_CardChipCode(self, CardChipCode):
        self.CardChipCode = CardChipCode
    def get_CardChipApplicationIdentifier(self):
        return self.CardChipApplicationIdentifier
    def set_CardChipApplicationIdentifier(self, CardChipApplicationIdentifier):
        self.CardChipApplicationIdentifier = CardChipApplicationIdentifier
    def get_CardHolderName(self):
        return self.CardHolderName
    def set_CardHolderName(self, CardHolderName):
        self.CardHolderName = CardHolderName
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_CardKindCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ChipCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.CardPrimaryAccountNumber is not None or
            self.CardNetworkIdentifier is not None or
            self.CardKindCode is not None or
            self.CardCustomerIdentifier is not None or
            self.CardValidityStartDate is not None or
            self.CardExpiryDate is not None or
            self.CardIssuerIdentifier is not None or
            self.CardIssueNumber is not None or
            self.CardCV2Identifier is not None or
            self.CardChipCode is not None or
            self.CardChipApplicationIdentifier is not None or
            self.CardHolderName is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CardAccountType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CardAccountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CardAccountType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CardAccountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CardAccountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CardAccountType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CardAccountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CardPrimaryAccountNumber is not None:
            namespaceprefix_ = self.CardPrimaryAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.CardPrimaryAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardPrimaryAccountNumber>%s</%sCardPrimaryAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardPrimaryAccountNumber), input_name='CardPrimaryAccountNumber')), namespaceprefix_ , eol_))
        if self.CardNetworkIdentifier is not None:
            namespaceprefix_ = self.CardNetworkIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CardNetworkIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardNetworkIdentifier>%s</%sCardNetworkIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardNetworkIdentifier), input_name='CardNetworkIdentifier')), namespaceprefix_ , eol_))
        if self.CardKindCode is not None:
            namespaceprefix_ = self.CardKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CardKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardKindCode>%s</%sCardKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardKindCode), input_name='CardKindCode')), namespaceprefix_ , eol_))
        if self.CardCustomerIdentifier is not None:
            namespaceprefix_ = self.CardCustomerIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CardCustomerIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardCustomerIdentifier>%s</%sCardCustomerIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardCustomerIdentifier), input_name='CardCustomerIdentifier')), namespaceprefix_ , eol_))
        if self.CardValidityStartDate is not None:
            namespaceprefix_ = self.CardValidityStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CardValidityStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardValidityStartDate>%s</%sCardValidityStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.CardValidityStartDate, input_name='CardValidityStartDate'), namespaceprefix_ , eol_))
        if self.CardExpiryDate is not None:
            namespaceprefix_ = self.CardExpiryDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CardExpiryDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardExpiryDate>%s</%sCardExpiryDate>%s' % (namespaceprefix_ , self.gds_format_date(self.CardExpiryDate, input_name='CardExpiryDate'), namespaceprefix_ , eol_))
        if self.CardIssuerIdentifier is not None:
            namespaceprefix_ = self.CardIssuerIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CardIssuerIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardIssuerIdentifier>%s</%sCardIssuerIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardIssuerIdentifier), input_name='CardIssuerIdentifier')), namespaceprefix_ , eol_))
        if self.CardIssueNumber is not None:
            namespaceprefix_ = self.CardIssueNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.CardIssueNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardIssueNumber>%s</%sCardIssueNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardIssueNumber), input_name='CardIssueNumber')), namespaceprefix_ , eol_))
        if self.CardCV2Identifier is not None:
            namespaceprefix_ = self.CardCV2Identifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CardCV2Identifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardCV2Identifier>%s</%sCardCV2Identifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardCV2Identifier), input_name='CardCV2Identifier')), namespaceprefix_ , eol_))
        if self.CardChipCode is not None:
            namespaceprefix_ = self.CardChipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CardChipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardChipCode>%s</%sCardChipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardChipCode), input_name='CardChipCode')), namespaceprefix_ , eol_))
        if self.CardChipApplicationIdentifier is not None:
            namespaceprefix_ = self.CardChipApplicationIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CardChipApplicationIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCardChipApplicationIdentifier>%s</%sCardChipApplicationIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CardChipApplicationIdentifier), input_name='CardChipApplicationIdentifier')), namespaceprefix_ , eol_))
        if self.CardHolderName is not None:
            namespaceprefix_ = self.CardHolderName_nsprefix_ + ':' if (UseCapturedNS_ and self.CardHolderName_nsprefix_) else ''
            self.CardHolderName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CardHolderName', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CardPrimaryAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CardPrimaryAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'CardPrimaryAccountNumber')
            self.CardPrimaryAccountNumber = value_
            self.CardPrimaryAccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardNetworkIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CardNetworkIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CardNetworkIdentifier')
            self.CardNetworkIdentifier = value_
            self.CardNetworkIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CardKindCode')
            value_ = self.gds_validate_string(value_, node, 'CardKindCode')
            self.CardKindCode = value_
            self.CardKindCode_nsprefix_ = child_.prefix
            # validate type CardKindCodeType
            self.validate_CardKindCodeType(self.CardKindCode)
        elif nodeName_ == 'CardCustomerIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CardCustomerIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CardCustomerIdentifier')
            self.CardCustomerIdentifier = value_
            self.CardCustomerIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardValidityStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.CardValidityStartDate = dval_
            self.CardValidityStartDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardExpiryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.CardExpiryDate = dval_
            self.CardExpiryDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardIssuerIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CardIssuerIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CardIssuerIdentifier')
            self.CardIssuerIdentifier = value_
            self.CardIssuerIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardIssueNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CardIssueNumber')
            value_ = self.gds_validate_string(value_, node, 'CardIssueNumber')
            self.CardIssueNumber = value_
            self.CardIssueNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardCV2Identifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CardCV2Identifier')
            value_ = self.gds_validate_string(value_, node, 'CardCV2Identifier')
            self.CardCV2Identifier = value_
            self.CardCV2Identifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardChipCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CardChipCode')
            value_ = self.gds_validate_string(value_, node, 'CardChipCode')
            self.CardChipCode = value_
            self.CardChipCode_nsprefix_ = child_.prefix
            # validate type ChipCodeType
            self.validate_ChipCodeType(self.CardChipCode)
        elif nodeName_ == 'CardChipApplicationIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CardChipApplicationIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CardChipApplicationIdentifier')
            self.CardChipApplicationIdentifier = value_
            self.CardChipApplicationIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CardHolderName':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CardHolderName = obj_
            obj_.original_tagname_ = 'CardHolderName'
        else:
            content_ = self.gds_build_any(child_, 'CardAccountType')
            self.add_anytypeobjs_(content_)
# end class CardAccountType


class ClaimantType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, ClaimantIdentifier=None, ClaimantSequenceNumber=None, ClaimantNationalityCode=None, ClaimantLegalEntity=None, ClaimantIncorporationCountryCode=None, ClaimantIncorporationState=None, Comment=None, ClaimantAddressBook=None, ClaimantEntitlement=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        if ClaimantIdentifier is None:
            self.ClaimantIdentifier = []
        else:
            self.ClaimantIdentifier = ClaimantIdentifier
        self.ClaimantIdentifier_nsprefix_ = None
        self.ClaimantSequenceNumber = ClaimantSequenceNumber
        self.ClaimantSequenceNumber_nsprefix_ = None
        self.ClaimantNationalityCode = ClaimantNationalityCode
        self.validate_NationalityCodeType(self.ClaimantNationalityCode)
        self.ClaimantNationalityCode_nsprefix_ = None
        self.ClaimantLegalEntity = ClaimantLegalEntity
        self.ClaimantLegalEntity_nsprefix_ = None
        self.ClaimantIncorporationCountryCode = ClaimantIncorporationCountryCode
        self.validate_ISOCountryCodeType(self.ClaimantIncorporationCountryCode)
        self.ClaimantIncorporationCountryCode_nsprefix_ = None
        self.ClaimantIncorporationState = ClaimantIncorporationState
        self.ClaimantIncorporationState_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.ClaimantAddressBook = ClaimantAddressBook
        self.ClaimantAddressBook_nsprefix_ = None
        self.ClaimantEntitlement = ClaimantEntitlement
        self.ClaimantEntitlement_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClaimantType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClaimantType.subclass:
            return ClaimantType.subclass(*args_, **kwargs_)
        else:
            return ClaimantType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClaimantIdentifier(self):
        return self.ClaimantIdentifier
    def set_ClaimantIdentifier(self, ClaimantIdentifier):
        self.ClaimantIdentifier = ClaimantIdentifier
    def add_ClaimantIdentifier(self, value):
        self.ClaimantIdentifier.append(value)
    def insert_ClaimantIdentifier_at(self, index, value):
        self.ClaimantIdentifier.insert(index, value)
    def replace_ClaimantIdentifier_at(self, index, value):
        self.ClaimantIdentifier[index] = value
    def get_ClaimantSequenceNumber(self):
        return self.ClaimantSequenceNumber
    def set_ClaimantSequenceNumber(self, ClaimantSequenceNumber):
        self.ClaimantSequenceNumber = ClaimantSequenceNumber
    def get_ClaimantNationalityCode(self):
        return self.ClaimantNationalityCode
    def set_ClaimantNationalityCode(self, ClaimantNationalityCode):
        self.ClaimantNationalityCode = ClaimantNationalityCode
    def get_ClaimantLegalEntity(self):
        return self.ClaimantLegalEntity
    def set_ClaimantLegalEntity(self, ClaimantLegalEntity):
        self.ClaimantLegalEntity = ClaimantLegalEntity
    def get_ClaimantIncorporationCountryCode(self):
        return self.ClaimantIncorporationCountryCode
    def set_ClaimantIncorporationCountryCode(self, ClaimantIncorporationCountryCode):
        self.ClaimantIncorporationCountryCode = ClaimantIncorporationCountryCode
    def get_ClaimantIncorporationState(self):
        return self.ClaimantIncorporationState
    def set_ClaimantIncorporationState(self, ClaimantIncorporationState):
        self.ClaimantIncorporationState = ClaimantIncorporationState
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_ClaimantAddressBook(self):
        return self.ClaimantAddressBook
    def set_ClaimantAddressBook(self, ClaimantAddressBook):
        self.ClaimantAddressBook = ClaimantAddressBook
    def get_ClaimantEntitlement(self):
        return self.ClaimantEntitlement
    def set_ClaimantEntitlement(self, ClaimantEntitlement):
        self.ClaimantEntitlement = ClaimantEntitlement
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.ClaimantIdentifier or
            self.ClaimantSequenceNumber is not None or
            self.ClaimantNationalityCode is not None or
            self.ClaimantLegalEntity is not None or
            self.ClaimantIncorporationCountryCode is not None or
            self.ClaimantIncorporationState is not None or
            self.Comment is not None or
            self.ClaimantAddressBook is not None or
            self.ClaimantEntitlement is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClaimantType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClaimantType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClaimantType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClaimantType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClaimantType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClaimantIdentifier_ in self.ClaimantIdentifier:
            namespaceprefix_ = self.ClaimantIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantIdentifier_nsprefix_) else ''
            ClaimantIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantIdentifier', pretty_print=pretty_print)
        if self.ClaimantSequenceNumber is not None:
            namespaceprefix_ = self.ClaimantSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClaimantSequenceNumber>%s</%sClaimantSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.ClaimantSequenceNumber, input_name='ClaimantSequenceNumber'), namespaceprefix_ , eol_))
        if self.ClaimantNationalityCode is not None:
            namespaceprefix_ = self.ClaimantNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClaimantNationalityCode>%s</%sClaimantNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClaimantNationalityCode), input_name='ClaimantNationalityCode')), namespaceprefix_ , eol_))
        if self.ClaimantLegalEntity is not None:
            namespaceprefix_ = self.ClaimantLegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantLegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClaimantLegalEntity>%s</%sClaimantLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClaimantLegalEntity), input_name='ClaimantLegalEntity')), namespaceprefix_ , eol_))
        if self.ClaimantIncorporationCountryCode is not None:
            namespaceprefix_ = self.ClaimantIncorporationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantIncorporationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClaimantIncorporationCountryCode>%s</%sClaimantIncorporationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClaimantIncorporationCountryCode), input_name='ClaimantIncorporationCountryCode')), namespaceprefix_ , eol_))
        if self.ClaimantIncorporationState is not None:
            namespaceprefix_ = self.ClaimantIncorporationState_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantIncorporationState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClaimantIncorporationState>%s</%sClaimantIncorporationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClaimantIncorporationState), input_name='ClaimantIncorporationState')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.ClaimantAddressBook is not None:
            namespaceprefix_ = self.ClaimantAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantAddressBook_nsprefix_) else ''
            self.ClaimantAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantAddressBook', pretty_print=pretty_print)
        if self.ClaimantEntitlement is not None:
            namespaceprefix_ = self.ClaimantEntitlement_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantEntitlement_nsprefix_) else ''
            self.ClaimantEntitlement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantEntitlement', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClaimantIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantIdentifier.append(obj_)
            obj_.original_tagname_ = 'ClaimantIdentifier'
        elif nodeName_ == 'ClaimantSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ClaimantSequenceNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'ClaimantSequenceNumber')
            self.ClaimantSequenceNumber = ival_
            self.ClaimantSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClaimantNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ClaimantNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'ClaimantNationalityCode')
            self.ClaimantNationalityCode = value_
            self.ClaimantNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.ClaimantNationalityCode)
        elif nodeName_ == 'ClaimantLegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClaimantLegalEntity')
            value_ = self.gds_validate_string(value_, node, 'ClaimantLegalEntity')
            self.ClaimantLegalEntity = value_
            self.ClaimantLegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClaimantIncorporationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClaimantIncorporationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'ClaimantIncorporationCountryCode')
            self.ClaimantIncorporationCountryCode = value_
            self.ClaimantIncorporationCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.ClaimantIncorporationCountryCode)
        elif nodeName_ == 'ClaimantIncorporationState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClaimantIncorporationState')
            value_ = self.gds_validate_string(value_, node, 'ClaimantIncorporationState')
            self.ClaimantIncorporationState = value_
            self.ClaimantIncorporationState_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'ClaimantAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantAddressBook = obj_
            obj_.original_tagname_ = 'ClaimantAddressBook'
        elif nodeName_ == 'ClaimantEntitlement':
            obj_ = EntitlementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantEntitlement = obj_
            obj_.original_tagname_ = 'ClaimantEntitlement'
        else:
            content_ = self.gds_build_any(child_, 'ClaimantType')
            self.add_anytypeobjs_(content_)
# end class ClaimantType


class ClassDescriptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClassNumber=None, ClassNumberStatusCode=None, GoodsServicesDescription=None, UseNiceHeadingIndicator=None, ClassificationTermDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClassNumber = ClassNumber
        self.validate_ClassNumberType(self.ClassNumber)
        self.ClassNumber_nsprefix_ = None
        self.ClassNumberStatusCode = ClassNumberStatusCode
        self.validate_ClassNumberStatusCodeType(self.ClassNumberStatusCode)
        self.ClassNumberStatusCode_nsprefix_ = None
        if GoodsServicesDescription is None:
            self.GoodsServicesDescription = []
        else:
            self.GoodsServicesDescription = GoodsServicesDescription
        self.GoodsServicesDescription_nsprefix_ = None
        self.UseNiceHeadingIndicator = UseNiceHeadingIndicator
        self.UseNiceHeadingIndicator_nsprefix_ = None
        self.ClassificationTermDetails = ClassificationTermDetails
        self.ClassificationTermDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassDescriptionType.subclass:
            return ClassDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ClassDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClassNumber(self):
        return self.ClassNumber
    def set_ClassNumber(self, ClassNumber):
        self.ClassNumber = ClassNumber
    def get_ClassNumberStatusCode(self):
        return self.ClassNumberStatusCode
    def set_ClassNumberStatusCode(self, ClassNumberStatusCode):
        self.ClassNumberStatusCode = ClassNumberStatusCode
    def get_GoodsServicesDescription(self):
        return self.GoodsServicesDescription
    def set_GoodsServicesDescription(self, GoodsServicesDescription):
        self.GoodsServicesDescription = GoodsServicesDescription
    def add_GoodsServicesDescription(self, value):
        self.GoodsServicesDescription.append(value)
    def insert_GoodsServicesDescription_at(self, index, value):
        self.GoodsServicesDescription.insert(index, value)
    def replace_GoodsServicesDescription_at(self, index, value):
        self.GoodsServicesDescription[index] = value
    def get_UseNiceHeadingIndicator(self):
        return self.UseNiceHeadingIndicator
    def set_UseNiceHeadingIndicator(self, UseNiceHeadingIndicator):
        self.UseNiceHeadingIndicator = UseNiceHeadingIndicator
    def get_ClassificationTermDetails(self):
        return self.ClassificationTermDetails
    def set_ClassificationTermDetails(self, ClassificationTermDetails):
        self.ClassificationTermDetails = ClassificationTermDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ClassNumberType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ClassNumberStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.ClassNumber is not None or
            self.ClassNumberStatusCode is not None or
            self.GoodsServicesDescription or
            self.UseNiceHeadingIndicator is not None or
            self.ClassificationTermDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClassDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClassDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClassDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClassDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClassDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClassNumber is not None:
            namespaceprefix_ = self.ClassNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassNumber>%s</%sClassNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassNumber), input_name='ClassNumber')), namespaceprefix_ , eol_))
        if self.ClassNumberStatusCode is not None:
            namespaceprefix_ = self.ClassNumberStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassNumberStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassNumberStatusCode>%s</%sClassNumberStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassNumberStatusCode), input_name='ClassNumberStatusCode')), namespaceprefix_ , eol_))
        for GoodsServicesDescription_ in self.GoodsServicesDescription:
            namespaceprefix_ = self.GoodsServicesDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesDescription_nsprefix_) else ''
            GoodsServicesDescription_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesDescription', pretty_print=pretty_print)
        if self.UseNiceHeadingIndicator is not None:
            namespaceprefix_ = self.UseNiceHeadingIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.UseNiceHeadingIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUseNiceHeadingIndicator>%s</%sUseNiceHeadingIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.UseNiceHeadingIndicator, input_name='UseNiceHeadingIndicator'), namespaceprefix_ , eol_))
        if self.ClassificationTermDetails is not None:
            namespaceprefix_ = self.ClassificationTermDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermDetails_nsprefix_) else ''
            self.ClassificationTermDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassificationTermDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClassNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassNumber')
            value_ = self.gds_validate_string(value_, node, 'ClassNumber')
            self.ClassNumber = value_
            self.ClassNumber_nsprefix_ = child_.prefix
            # validate type ClassNumberType
            self.validate_ClassNumberType(self.ClassNumber)
        elif nodeName_ == 'ClassNumberStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ClassNumberStatusCode')
            value_ = self.gds_validate_string(value_, node, 'ClassNumberStatusCode')
            self.ClassNumberStatusCode = value_
            self.ClassNumberStatusCode_nsprefix_ = child_.prefix
            # validate type ClassNumberStatusCodeType
            self.validate_ClassNumberStatusCodeType(self.ClassNumberStatusCode)
        elif nodeName_ == 'GoodsServicesDescription':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesDescription.append(obj_)
            obj_.original_tagname_ = 'GoodsServicesDescription'
        elif nodeName_ == 'UseNiceHeadingIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'UseNiceHeadingIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'UseNiceHeadingIndicator')
            self.UseNiceHeadingIndicator = ival_
            self.UseNiceHeadingIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClassificationTermDetails':
            obj_ = ClassificationTermDetailsType4.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassificationTermDetails = obj_
            obj_.original_tagname_ = 'ClassificationTermDetails'
        else:
            content_ = self.gds_build_any(child_, 'ClassDescriptionType')
            self.add_anytypeobjs_(content_)
# end class ClassDescriptionType


class ClassificationTermType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, ClassificationTermIdentifier=None, ClassificationTermOffice=None, ClassificationTermOfficeKey=None, ClassificationTermSource=None, ClassificationTermEntryDate=None, ClassNumber=None, ClassificationTermLanguageCode=None, ClassificationTermText=None, ClassificationTermEquivalentGroup=None, ClassificationTermReferenceGroup=None, ClassificationTermTranslationGroup=None, ClassificationTermStatus=None, WIPOBasicNumber=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        self.ClassificationTermIdentifier = ClassificationTermIdentifier
        self.ClassificationTermIdentifier_nsprefix_ = None
        self.ClassificationTermOffice = ClassificationTermOffice
        self.validate_WIPOST3CodeType(self.ClassificationTermOffice)
        self.ClassificationTermOffice_nsprefix_ = None
        self.ClassificationTermOfficeKey = ClassificationTermOfficeKey
        self.ClassificationTermOfficeKey_nsprefix_ = None
        self.ClassificationTermSource = ClassificationTermSource
        self.validate_ClassificationTermSourceType(self.ClassificationTermSource)
        self.ClassificationTermSource_nsprefix_ = None
        if isinstance(ClassificationTermEntryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ClassificationTermEntryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ClassificationTermEntryDate
        self.ClassificationTermEntryDate = initvalue_
        self.ClassificationTermEntryDate_nsprefix_ = None
        self.ClassNumber = ClassNumber
        self.validate_ClassNumberType(self.ClassNumber)
        self.ClassNumber_nsprefix_ = None
        self.ClassificationTermLanguageCode = ClassificationTermLanguageCode
        self.validate_ISOLanguageCodeType(self.ClassificationTermLanguageCode)
        self.ClassificationTermLanguageCode_nsprefix_ = None
        self.ClassificationTermText = ClassificationTermText
        self.ClassificationTermText_nsprefix_ = None
        self.ClassificationTermEquivalentGroup = ClassificationTermEquivalentGroup
        self.ClassificationTermEquivalentGroup_nsprefix_ = None
        self.ClassificationTermReferenceGroup = ClassificationTermReferenceGroup
        self.ClassificationTermReferenceGroup_nsprefix_ = None
        self.ClassificationTermTranslationGroup = ClassificationTermTranslationGroup
        self.ClassificationTermTranslationGroup_nsprefix_ = None
        self.ClassificationTermStatus = ClassificationTermStatus
        self.ClassificationTermStatus_nsprefix_ = None
        self.WIPOBasicNumber = WIPOBasicNumber
        self.validate_WIPOBasicNumberType(self.WIPOBasicNumber)
        self.WIPOBasicNumber_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassificationTermType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassificationTermType.subclass:
            return ClassificationTermType.subclass(*args_, **kwargs_)
        else:
            return ClassificationTermType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClassificationTermIdentifier(self):
        return self.ClassificationTermIdentifier
    def set_ClassificationTermIdentifier(self, ClassificationTermIdentifier):
        self.ClassificationTermIdentifier = ClassificationTermIdentifier
    def get_ClassificationTermOffice(self):
        return self.ClassificationTermOffice
    def set_ClassificationTermOffice(self, ClassificationTermOffice):
        self.ClassificationTermOffice = ClassificationTermOffice
    def get_ClassificationTermOfficeKey(self):
        return self.ClassificationTermOfficeKey
    def set_ClassificationTermOfficeKey(self, ClassificationTermOfficeKey):
        self.ClassificationTermOfficeKey = ClassificationTermOfficeKey
    def get_ClassificationTermSource(self):
        return self.ClassificationTermSource
    def set_ClassificationTermSource(self, ClassificationTermSource):
        self.ClassificationTermSource = ClassificationTermSource
    def get_ClassificationTermEntryDate(self):
        return self.ClassificationTermEntryDate
    def set_ClassificationTermEntryDate(self, ClassificationTermEntryDate):
        self.ClassificationTermEntryDate = ClassificationTermEntryDate
    def get_ClassNumber(self):
        return self.ClassNumber
    def set_ClassNumber(self, ClassNumber):
        self.ClassNumber = ClassNumber
    def get_ClassificationTermLanguageCode(self):
        return self.ClassificationTermLanguageCode
    def set_ClassificationTermLanguageCode(self, ClassificationTermLanguageCode):
        self.ClassificationTermLanguageCode = ClassificationTermLanguageCode
    def get_ClassificationTermText(self):
        return self.ClassificationTermText
    def set_ClassificationTermText(self, ClassificationTermText):
        self.ClassificationTermText = ClassificationTermText
    def get_ClassificationTermEquivalentGroup(self):
        return self.ClassificationTermEquivalentGroup
    def set_ClassificationTermEquivalentGroup(self, ClassificationTermEquivalentGroup):
        self.ClassificationTermEquivalentGroup = ClassificationTermEquivalentGroup
    def get_ClassificationTermReferenceGroup(self):
        return self.ClassificationTermReferenceGroup
    def set_ClassificationTermReferenceGroup(self, ClassificationTermReferenceGroup):
        self.ClassificationTermReferenceGroup = ClassificationTermReferenceGroup
    def get_ClassificationTermTranslationGroup(self):
        return self.ClassificationTermTranslationGroup
    def set_ClassificationTermTranslationGroup(self, ClassificationTermTranslationGroup):
        self.ClassificationTermTranslationGroup = ClassificationTermTranslationGroup
    def get_ClassificationTermStatus(self):
        return self.ClassificationTermStatus
    def set_ClassificationTermStatus(self, ClassificationTermStatus):
        self.ClassificationTermStatus = ClassificationTermStatus
    def get_WIPOBasicNumber(self):
        return self.WIPOBasicNumber
    def set_WIPOBasicNumber(self, WIPOBasicNumber):
        self.WIPOBasicNumber = WIPOBasicNumber
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_WIPOST3CodeType(self, value):
        result = True
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ClassificationTermSourceType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ClassNumberType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOLanguageCodeType(self, value):
        result = True
        # Validate type ISOLanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['aa', 'ab', 'af', 'am', 'ar', 'as', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bn', 'bo', 'br', 'ca', 'co', 'cs', 'cy', 'da', 'de', 'dz', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'ha', 'he', 'hi', 'hr', 'hu', 'hy', 'ia', 'id', 'ie', 'ik', 'is', 'it', 'iu', 'ja', 'jw', 'ka', 'kk', 'kl', 'km', 'kn', 'ko', 'ks', 'ku', 'ky', 'la', 'ln', 'lo', 'lt', 'lv', 'mg', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'ne', 'nl', 'no', 'oc', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sd', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ug', 'uk', 'ur', 'uz', 'vi', 'vo', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOLanguageCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_WIPOBasicNumberType(self, value):
        result = True
        # Validate type WIPOBasicNumberType, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_WIPOBasicNumberType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_WIPOBasicNumberType_patterns_, ))
                result = False
        return result
    validate_WIPOBasicNumberType_patterns_ = [['^([0-9]{6})$']]
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.ClassificationTermIdentifier is not None or
            self.ClassificationTermOffice is not None or
            self.ClassificationTermOfficeKey is not None or
            self.ClassificationTermSource is not None or
            self.ClassificationTermEntryDate is not None or
            self.ClassNumber is not None or
            self.ClassificationTermLanguageCode is not None or
            self.ClassificationTermText is not None or
            self.ClassificationTermEquivalentGroup is not None or
            self.ClassificationTermReferenceGroup is not None or
            self.ClassificationTermTranslationGroup is not None or
            self.ClassificationTermStatus is not None or
            self.WIPOBasicNumber is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassificationTermType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClassificationTermType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClassificationTermType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClassificationTermType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClassificationTermType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClassificationTermType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassificationTermType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClassificationTermIdentifier is not None:
            namespaceprefix_ = self.ClassificationTermIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermIdentifier_nsprefix_) else ''
            self.ClassificationTermIdentifier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassificationTermIdentifier', pretty_print=pretty_print)
        if self.ClassificationTermOffice is not None:
            namespaceprefix_ = self.ClassificationTermOffice_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermOffice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermOffice>%s</%sClassificationTermOffice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationTermOffice), input_name='ClassificationTermOffice')), namespaceprefix_ , eol_))
        if self.ClassificationTermOfficeKey is not None:
            namespaceprefix_ = self.ClassificationTermOfficeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermOfficeKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermOfficeKey>%s</%sClassificationTermOfficeKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationTermOfficeKey), input_name='ClassificationTermOfficeKey')), namespaceprefix_ , eol_))
        if self.ClassificationTermSource is not None:
            namespaceprefix_ = self.ClassificationTermSource_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermSource_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermSource>%s</%sClassificationTermSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationTermSource), input_name='ClassificationTermSource')), namespaceprefix_ , eol_))
        if self.ClassificationTermEntryDate is not None:
            namespaceprefix_ = self.ClassificationTermEntryDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermEntryDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermEntryDate>%s</%sClassificationTermEntryDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ClassificationTermEntryDate, input_name='ClassificationTermEntryDate'), namespaceprefix_ , eol_))
        if self.ClassNumber is not None:
            namespaceprefix_ = self.ClassNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassNumber>%s</%sClassNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassNumber), input_name='ClassNumber')), namespaceprefix_ , eol_))
        if self.ClassificationTermLanguageCode is not None:
            namespaceprefix_ = self.ClassificationTermLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermLanguageCode>%s</%sClassificationTermLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationTermLanguageCode), input_name='ClassificationTermLanguageCode')), namespaceprefix_ , eol_))
        if self.ClassificationTermText is not None:
            namespaceprefix_ = self.ClassificationTermText_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermText_nsprefix_) else ''
            self.ClassificationTermText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassificationTermText', pretty_print=pretty_print)
        if self.ClassificationTermEquivalentGroup is not None:
            namespaceprefix_ = self.ClassificationTermEquivalentGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermEquivalentGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermEquivalentGroup>%s</%sClassificationTermEquivalentGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationTermEquivalentGroup), input_name='ClassificationTermEquivalentGroup')), namespaceprefix_ , eol_))
        if self.ClassificationTermReferenceGroup is not None:
            namespaceprefix_ = self.ClassificationTermReferenceGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermReferenceGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermReferenceGroup>%s</%sClassificationTermReferenceGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationTermReferenceGroup), input_name='ClassificationTermReferenceGroup')), namespaceprefix_ , eol_))
        if self.ClassificationTermTranslationGroup is not None:
            namespaceprefix_ = self.ClassificationTermTranslationGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermTranslationGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationTermTranslationGroup>%s</%sClassificationTermTranslationGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationTermTranslationGroup), input_name='ClassificationTermTranslationGroup')), namespaceprefix_ , eol_))
        if self.ClassificationTermStatus is not None:
            namespaceprefix_ = self.ClassificationTermStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTermStatus_nsprefix_) else ''
            self.ClassificationTermStatus.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassificationTermStatus', pretty_print=pretty_print)
        if self.WIPOBasicNumber is not None:
            namespaceprefix_ = self.WIPOBasicNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.WIPOBasicNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWIPOBasicNumber>%s</%sWIPOBasicNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WIPOBasicNumber), input_name='WIPOBasicNumber')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClassificationTermIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassificationTermIdentifier = obj_
            obj_.original_tagname_ = 'ClassificationTermIdentifier'
        elif nodeName_ == 'ClassificationTermOffice':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassificationTermOffice')
            value_ = self.gds_validate_string(value_, node, 'ClassificationTermOffice')
            self.ClassificationTermOffice = value_
            self.ClassificationTermOffice_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.ClassificationTermOffice)
        elif nodeName_ == 'ClassificationTermOfficeKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassificationTermOfficeKey')
            value_ = self.gds_validate_string(value_, node, 'ClassificationTermOfficeKey')
            self.ClassificationTermOfficeKey = value_
            self.ClassificationTermOfficeKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClassificationTermSource':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ClassificationTermSource')
            value_ = self.gds_validate_string(value_, node, 'ClassificationTermSource')
            self.ClassificationTermSource = value_
            self.ClassificationTermSource_nsprefix_ = child_.prefix
            # validate type ClassificationTermSourceType
            self.validate_ClassificationTermSourceType(self.ClassificationTermSource)
        elif nodeName_ == 'ClassificationTermEntryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ClassificationTermEntryDate = dval_
            self.ClassificationTermEntryDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClassNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassNumber')
            value_ = self.gds_validate_string(value_, node, 'ClassNumber')
            self.ClassNumber = value_
            self.ClassNumber_nsprefix_ = child_.prefix
            # validate type ClassNumberType
            self.validate_ClassNumberType(self.ClassNumber)
        elif nodeName_ == 'ClassificationTermLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassificationTermLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'ClassificationTermLanguageCode')
            self.ClassificationTermLanguageCode = value_
            self.ClassificationTermLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.ClassificationTermLanguageCode)
        elif nodeName_ == 'ClassificationTermText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassificationTermText = obj_
            obj_.original_tagname_ = 'ClassificationTermText'
        elif nodeName_ == 'ClassificationTermEquivalentGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassificationTermEquivalentGroup')
            value_ = self.gds_validate_string(value_, node, 'ClassificationTermEquivalentGroup')
            self.ClassificationTermEquivalentGroup = value_
            self.ClassificationTermEquivalentGroup_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClassificationTermReferenceGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassificationTermReferenceGroup')
            value_ = self.gds_validate_string(value_, node, 'ClassificationTermReferenceGroup')
            self.ClassificationTermReferenceGroup = value_
            self.ClassificationTermReferenceGroup_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClassificationTermTranslationGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassificationTermTranslationGroup')
            value_ = self.gds_validate_string(value_, node, 'ClassificationTermTranslationGroup')
            self.ClassificationTermTranslationGroup = value_
            self.ClassificationTermTranslationGroup_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClassificationTermStatus':
            obj_ = ClassificationTermStatusType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassificationTermStatus = obj_
            obj_.original_tagname_ = 'ClassificationTermStatus'
        elif nodeName_ == 'WIPOBasicNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'WIPOBasicNumber')
            value_ = self.gds_validate_string(value_, node, 'WIPOBasicNumber')
            self.WIPOBasicNumber = value_
            self.WIPOBasicNumber_nsprefix_ = child_.prefix
            # validate type WIPOBasicNumberType
            self.validate_WIPOBasicNumberType(self.WIPOBasicNumber)
        else:
            content_ = self.gds_build_any(child_, 'ClassificationTermType')
            self.add_anytypeobjs_(content_)
# end class ClassificationTermType


class CorrespondenceAddressKeyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CorrespondenceAddressIdentifier=None, CorrespondenceAddressParty=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CorrespondenceAddressIdentifier = CorrespondenceAddressIdentifier
        self.CorrespondenceAddressIdentifier_nsprefix_ = None
        self.CorrespondenceAddressParty = CorrespondenceAddressParty
        self.validate_CorrespondenceAddressPartyType(self.CorrespondenceAddressParty)
        self.CorrespondenceAddressParty_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CorrespondenceAddressKeyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CorrespondenceAddressKeyType.subclass:
            return CorrespondenceAddressKeyType.subclass(*args_, **kwargs_)
        else:
            return CorrespondenceAddressKeyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CorrespondenceAddressIdentifier(self):
        return self.CorrespondenceAddressIdentifier
    def set_CorrespondenceAddressIdentifier(self, CorrespondenceAddressIdentifier):
        self.CorrespondenceAddressIdentifier = CorrespondenceAddressIdentifier
    def get_CorrespondenceAddressParty(self):
        return self.CorrespondenceAddressParty
    def set_CorrespondenceAddressParty(self, CorrespondenceAddressParty):
        self.CorrespondenceAddressParty = CorrespondenceAddressParty
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_CorrespondenceAddressPartyType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.CorrespondenceAddressIdentifier is not None or
            self.CorrespondenceAddressParty is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CorrespondenceAddressKeyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CorrespondenceAddressKeyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CorrespondenceAddressKeyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CorrespondenceAddressKeyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CorrespondenceAddressKeyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CorrespondenceAddressKeyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CorrespondenceAddressKeyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CorrespondenceAddressIdentifier is not None:
            namespaceprefix_ = self.CorrespondenceAddressIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddressIdentifier_nsprefix_) else ''
            self.CorrespondenceAddressIdentifier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CorrespondenceAddressIdentifier', pretty_print=pretty_print)
        if self.CorrespondenceAddressParty is not None:
            namespaceprefix_ = self.CorrespondenceAddressParty_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddressParty_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCorrespondenceAddressParty>%s</%sCorrespondenceAddressParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CorrespondenceAddressParty), input_name='CorrespondenceAddressParty')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CorrespondenceAddressIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CorrespondenceAddressIdentifier = obj_
            obj_.original_tagname_ = 'CorrespondenceAddressIdentifier'
        elif nodeName_ == 'CorrespondenceAddressParty':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CorrespondenceAddressParty')
            value_ = self.gds_validate_string(value_, node, 'CorrespondenceAddressParty')
            self.CorrespondenceAddressParty = value_
            self.CorrespondenceAddressParty_nsprefix_ = child_.prefix
            # validate type CorrespondenceAddressPartyType
            self.validate_CorrespondenceAddressPartyType(self.CorrespondenceAddressParty)
        else:
            content_ = self.gds_build_any(child_, 'CorrespondenceAddressKeyType')
            self.add_anytypeobjs_(content_)
# end class CorrespondenceAddressKeyType


class CorrespondenceAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CorrespondenceAddressIdentifier=None, CorrespondenceAddressParty=None, CorrespondenceAddressBook=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CorrespondenceAddressIdentifier is None:
            self.CorrespondenceAddressIdentifier = []
        else:
            self.CorrespondenceAddressIdentifier = CorrespondenceAddressIdentifier
        self.CorrespondenceAddressIdentifier_nsprefix_ = None
        self.CorrespondenceAddressParty = CorrespondenceAddressParty
        self.validate_CorrespondenceAddressPartyType(self.CorrespondenceAddressParty)
        self.CorrespondenceAddressParty_nsprefix_ = None
        self.CorrespondenceAddressBook = CorrespondenceAddressBook
        self.CorrespondenceAddressBook_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CorrespondenceAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CorrespondenceAddressType.subclass:
            return CorrespondenceAddressType.subclass(*args_, **kwargs_)
        else:
            return CorrespondenceAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CorrespondenceAddressIdentifier(self):
        return self.CorrespondenceAddressIdentifier
    def set_CorrespondenceAddressIdentifier(self, CorrespondenceAddressIdentifier):
        self.CorrespondenceAddressIdentifier = CorrespondenceAddressIdentifier
    def add_CorrespondenceAddressIdentifier(self, value):
        self.CorrespondenceAddressIdentifier.append(value)
    def insert_CorrespondenceAddressIdentifier_at(self, index, value):
        self.CorrespondenceAddressIdentifier.insert(index, value)
    def replace_CorrespondenceAddressIdentifier_at(self, index, value):
        self.CorrespondenceAddressIdentifier[index] = value
    def get_CorrespondenceAddressParty(self):
        return self.CorrespondenceAddressParty
    def set_CorrespondenceAddressParty(self, CorrespondenceAddressParty):
        self.CorrespondenceAddressParty = CorrespondenceAddressParty
    def get_CorrespondenceAddressBook(self):
        return self.CorrespondenceAddressBook
    def set_CorrespondenceAddressBook(self, CorrespondenceAddressBook):
        self.CorrespondenceAddressBook = CorrespondenceAddressBook
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_CorrespondenceAddressPartyType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.CorrespondenceAddressIdentifier or
            self.CorrespondenceAddressParty is not None or
            self.CorrespondenceAddressBook is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CorrespondenceAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CorrespondenceAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CorrespondenceAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CorrespondenceAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CorrespondenceAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CorrespondenceAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CorrespondenceAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CorrespondenceAddressIdentifier_ in self.CorrespondenceAddressIdentifier:
            namespaceprefix_ = self.CorrespondenceAddressIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddressIdentifier_nsprefix_) else ''
            CorrespondenceAddressIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CorrespondenceAddressIdentifier', pretty_print=pretty_print)
        if self.CorrespondenceAddressParty is not None:
            namespaceprefix_ = self.CorrespondenceAddressParty_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddressParty_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCorrespondenceAddressParty>%s</%sCorrespondenceAddressParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CorrespondenceAddressParty), input_name='CorrespondenceAddressParty')), namespaceprefix_ , eol_))
        if self.CorrespondenceAddressBook is not None:
            namespaceprefix_ = self.CorrespondenceAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddressBook_nsprefix_) else ''
            self.CorrespondenceAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CorrespondenceAddressBook', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CorrespondenceAddressIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CorrespondenceAddressIdentifier.append(obj_)
            obj_.original_tagname_ = 'CorrespondenceAddressIdentifier'
        elif nodeName_ == 'CorrespondenceAddressParty':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CorrespondenceAddressParty')
            value_ = self.gds_validate_string(value_, node, 'CorrespondenceAddressParty')
            self.CorrespondenceAddressParty = value_
            self.CorrespondenceAddressParty_nsprefix_ = child_.prefix
            # validate type CorrespondenceAddressPartyType
            self.validate_CorrespondenceAddressPartyType(self.CorrespondenceAddressParty)
        elif nodeName_ == 'CorrespondenceAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CorrespondenceAddressBook = obj_
            obj_.original_tagname_ = 'CorrespondenceAddressBook'
        else:
            content_ = self.gds_build_any(child_, 'CorrespondenceAddressType')
            self.add_anytypeobjs_(content_)
# end class CorrespondenceAddressType


class DecisionCaseRelationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DecisionKey=None, CaseReferenceKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DecisionKey = DecisionKey
        self.DecisionKey_nsprefix_ = None
        self.CaseReferenceKey = CaseReferenceKey
        self.CaseReferenceKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DecisionCaseRelationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DecisionCaseRelationType.subclass:
            return DecisionCaseRelationType.subclass(*args_, **kwargs_)
        else:
            return DecisionCaseRelationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DecisionKey(self):
        return self.DecisionKey
    def set_DecisionKey(self, DecisionKey):
        self.DecisionKey = DecisionKey
    def get_CaseReferenceKey(self):
        return self.CaseReferenceKey
    def set_CaseReferenceKey(self, CaseReferenceKey):
        self.CaseReferenceKey = CaseReferenceKey
    def hasContent_(self):
        if (
            self.DecisionKey is not None or
            self.CaseReferenceKey is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionCaseRelationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DecisionCaseRelationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DecisionCaseRelationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DecisionCaseRelationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DecisionCaseRelationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DecisionCaseRelationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionCaseRelationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DecisionKey is not None:
            namespaceprefix_ = self.DecisionKey_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionKey>%s</%sDecisionKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DecisionKey), input_name='DecisionKey')), namespaceprefix_ , eol_))
        if self.CaseReferenceKey is not None:
            namespaceprefix_ = self.CaseReferenceKey_nsprefix_ + ':' if (UseCapturedNS_ and self.CaseReferenceKey_nsprefix_) else ''
            self.CaseReferenceKey.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CaseReferenceKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DecisionKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DecisionKey')
            value_ = self.gds_validate_string(value_, node, 'DecisionKey')
            self.DecisionKey = value_
            self.DecisionKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'CaseReferenceKey':
            obj_ = CaseReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CaseReferenceKey = obj_
            obj_.original_tagname_ = 'CaseReferenceKey'
# end class DecisionCaseRelationType


class DecisionEventType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DecisionEventDate=None, DecisionEventDateTime=None, DecisionEventCode=None, DecisionEventResponseDate=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(DecisionEventDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DecisionEventDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DecisionEventDate
        self.DecisionEventDate = initvalue_
        self.DecisionEventDate_nsprefix_ = None
        if isinstance(DecisionEventDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DecisionEventDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DecisionEventDateTime
        self.DecisionEventDateTime = initvalue_
        self.DecisionEventDateTime_nsprefix_ = None
        self.DecisionEventCode = DecisionEventCode
        self.validate_DecisionEventCodeType(self.DecisionEventCode)
        self.DecisionEventCode_nsprefix_ = None
        if isinstance(DecisionEventResponseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DecisionEventResponseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DecisionEventResponseDate
        self.DecisionEventResponseDate = initvalue_
        self.DecisionEventResponseDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DecisionEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DecisionEventType.subclass:
            return DecisionEventType.subclass(*args_, **kwargs_)
        else:
            return DecisionEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DecisionEventDate(self):
        return self.DecisionEventDate
    def set_DecisionEventDate(self, DecisionEventDate):
        self.DecisionEventDate = DecisionEventDate
    def get_DecisionEventDateTime(self):
        return self.DecisionEventDateTime
    def set_DecisionEventDateTime(self, DecisionEventDateTime):
        self.DecisionEventDateTime = DecisionEventDateTime
    def get_DecisionEventCode(self):
        return self.DecisionEventCode
    def set_DecisionEventCode(self, DecisionEventCode):
        self.DecisionEventCode = DecisionEventCode
    def get_DecisionEventResponseDate(self):
        return self.DecisionEventResponseDate
    def set_DecisionEventResponseDate(self, DecisionEventResponseDate):
        self.DecisionEventResponseDate = DecisionEventResponseDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_DecisionEventCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.DecisionEventDate is not None or
            self.DecisionEventDateTime is not None or
            self.DecisionEventCode is not None or
            self.DecisionEventResponseDate is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionEventType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DecisionEventType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DecisionEventType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DecisionEventType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DecisionEventType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DecisionEventType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionEventType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DecisionEventDate is not None:
            namespaceprefix_ = self.DecisionEventDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionEventDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionEventDate>%s</%sDecisionEventDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DecisionEventDate, input_name='DecisionEventDate'), namespaceprefix_ , eol_))
        if self.DecisionEventDateTime is not None:
            namespaceprefix_ = self.DecisionEventDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionEventDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionEventDateTime>%s</%sDecisionEventDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DecisionEventDateTime, input_name='DecisionEventDateTime'), namespaceprefix_ , eol_))
        if self.DecisionEventCode is not None:
            namespaceprefix_ = self.DecisionEventCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionEventCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionEventCode>%s</%sDecisionEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DecisionEventCode), input_name='DecisionEventCode')), namespaceprefix_ , eol_))
        if self.DecisionEventResponseDate is not None:
            namespaceprefix_ = self.DecisionEventResponseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionEventResponseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionEventResponseDate>%s</%sDecisionEventResponseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DecisionEventResponseDate, input_name='DecisionEventResponseDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment), input_name='Comment')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DecisionEventDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DecisionEventDate = dval_
            self.DecisionEventDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'DecisionEventDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DecisionEventDateTime = dval_
            self.DecisionEventDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'DecisionEventCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DecisionEventCode')
            value_ = self.gds_validate_string(value_, node, 'DecisionEventCode')
            self.DecisionEventCode = value_
            self.DecisionEventCode_nsprefix_ = child_.prefix
            # validate type DecisionEventCodeType
            self.validate_DecisionEventCodeType(self.DecisionEventCode)
        elif nodeName_ == 'DecisionEventResponseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DecisionEventResponseDate = dval_
            self.DecisionEventResponseDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment')
            value_ = self.gds_validate_string(value_, node, 'Comment')
            self.Comment = value_
            self.Comment_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'DecisionEventType')
            self.add_anytypeobjs_(content_)
# end class DecisionEventType


class DecisionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DecisionIdentifier=None, DecisionDate=None, DecisionText=None, DecisionResponsible=None, CaseReferenceDetails=None, DecisionCurrentStatusCode=None, DecisionCurrentStatusDate=None, DecisionEventDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DecisionIdentifier = DecisionIdentifier
        self.DecisionIdentifier_nsprefix_ = None
        if isinstance(DecisionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DecisionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DecisionDate
        self.DecisionDate = initvalue_
        self.DecisionDate_nsprefix_ = None
        self.DecisionText = DecisionText
        self.DecisionText_nsprefix_ = None
        self.DecisionResponsible = DecisionResponsible
        self.validate_DecisionResponsibleType(self.DecisionResponsible)
        self.DecisionResponsible_nsprefix_ = None
        self.CaseReferenceDetails = CaseReferenceDetails
        self.CaseReferenceDetails_nsprefix_ = None
        self.DecisionCurrentStatusCode = DecisionCurrentStatusCode
        self.validate_DecisionCurrentStatusCodeType(self.DecisionCurrentStatusCode)
        self.DecisionCurrentStatusCode_nsprefix_ = None
        if isinstance(DecisionCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DecisionCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DecisionCurrentStatusDate
        self.DecisionCurrentStatusDate = initvalue_
        self.DecisionCurrentStatusDate_nsprefix_ = None
        self.DecisionEventDetails = DecisionEventDetails
        self.DecisionEventDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DecisionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DecisionType.subclass:
            return DecisionType.subclass(*args_, **kwargs_)
        else:
            return DecisionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DecisionIdentifier(self):
        return self.DecisionIdentifier
    def set_DecisionIdentifier(self, DecisionIdentifier):
        self.DecisionIdentifier = DecisionIdentifier
    def get_DecisionDate(self):
        return self.DecisionDate
    def set_DecisionDate(self, DecisionDate):
        self.DecisionDate = DecisionDate
    def get_DecisionText(self):
        return self.DecisionText
    def set_DecisionText(self, DecisionText):
        self.DecisionText = DecisionText
    def get_DecisionResponsible(self):
        return self.DecisionResponsible
    def set_DecisionResponsible(self, DecisionResponsible):
        self.DecisionResponsible = DecisionResponsible
    def get_CaseReferenceDetails(self):
        return self.CaseReferenceDetails
    def set_CaseReferenceDetails(self, CaseReferenceDetails):
        self.CaseReferenceDetails = CaseReferenceDetails
    def get_DecisionCurrentStatusCode(self):
        return self.DecisionCurrentStatusCode
    def set_DecisionCurrentStatusCode(self, DecisionCurrentStatusCode):
        self.DecisionCurrentStatusCode = DecisionCurrentStatusCode
    def get_DecisionCurrentStatusDate(self):
        return self.DecisionCurrentStatusDate
    def set_DecisionCurrentStatusDate(self, DecisionCurrentStatusDate):
        self.DecisionCurrentStatusDate = DecisionCurrentStatusDate
    def get_DecisionEventDetails(self):
        return self.DecisionEventDetails
    def set_DecisionEventDetails(self, DecisionEventDetails):
        self.DecisionEventDetails = DecisionEventDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_DecisionResponsibleType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_DecisionCurrentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.DecisionIdentifier is not None or
            self.DecisionDate is not None or
            self.DecisionText is not None or
            self.DecisionResponsible is not None or
            self.CaseReferenceDetails is not None or
            self.DecisionCurrentStatusCode is not None or
            self.DecisionCurrentStatusDate is not None or
            self.DecisionEventDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DecisionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DecisionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DecisionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DecisionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DecisionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DecisionIdentifier is not None:
            namespaceprefix_ = self.DecisionIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionIdentifier_nsprefix_) else ''
            self.DecisionIdentifier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DecisionIdentifier', pretty_print=pretty_print)
        if self.DecisionDate is not None:
            namespaceprefix_ = self.DecisionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionDate>%s</%sDecisionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DecisionDate, input_name='DecisionDate'), namespaceprefix_ , eol_))
        if self.DecisionText is not None:
            namespaceprefix_ = self.DecisionText_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionText_nsprefix_) else ''
            self.DecisionText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DecisionText', pretty_print=pretty_print)
        if self.DecisionResponsible is not None:
            namespaceprefix_ = self.DecisionResponsible_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionResponsible_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionResponsible>%s</%sDecisionResponsible>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DecisionResponsible), input_name='DecisionResponsible')), namespaceprefix_ , eol_))
        if self.CaseReferenceDetails is not None:
            namespaceprefix_ = self.CaseReferenceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CaseReferenceDetails_nsprefix_) else ''
            self.CaseReferenceDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CaseReferenceDetails', pretty_print=pretty_print)
        if self.DecisionCurrentStatusCode is not None:
            namespaceprefix_ = self.DecisionCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionCurrentStatusCode>%s</%sDecisionCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DecisionCurrentStatusCode), input_name='DecisionCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.DecisionCurrentStatusDate is not None:
            namespaceprefix_ = self.DecisionCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionCurrentStatusDate>%s</%sDecisionCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DecisionCurrentStatusDate, input_name='DecisionCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.DecisionEventDetails is not None:
            namespaceprefix_ = self.DecisionEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionEventDetails_nsprefix_) else ''
            self.DecisionEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DecisionEventDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DecisionIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DecisionIdentifier = obj_
            obj_.original_tagname_ = 'DecisionIdentifier'
        elif nodeName_ == 'DecisionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DecisionDate = dval_
            self.DecisionDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'DecisionText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DecisionText = obj_
            obj_.original_tagname_ = 'DecisionText'
        elif nodeName_ == 'DecisionResponsible':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DecisionResponsible')
            value_ = self.gds_validate_string(value_, node, 'DecisionResponsible')
            self.DecisionResponsible = value_
            self.DecisionResponsible_nsprefix_ = child_.prefix
            # validate type DecisionResponsibleType
            self.validate_DecisionResponsibleType(self.DecisionResponsible)
        elif nodeName_ == 'CaseReferenceDetails':
            obj_ = CaseReferenceDetailsType5.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CaseReferenceDetails = obj_
            obj_.original_tagname_ = 'CaseReferenceDetails'
        elif nodeName_ == 'DecisionCurrentStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DecisionCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'DecisionCurrentStatusCode')
            self.DecisionCurrentStatusCode = value_
            self.DecisionCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type DecisionCurrentStatusCodeType
            self.validate_DecisionCurrentStatusCodeType(self.DecisionCurrentStatusCode)
        elif nodeName_ == 'DecisionCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DecisionCurrentStatusDate = dval_
            self.DecisionCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'DecisionEventDetails':
            obj_ = DecisionEventDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DecisionEventDetails = obj_
            obj_.original_tagname_ = 'DecisionEventDetails'
        else:
            content_ = self.gds_build_any(child_, 'DecisionType')
            self.add_anytypeobjs_(content_)
# end class DecisionType


class DesignatedCountryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DesignatedCountryCode=None, DesignatedUnderCode=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DesignatedCountryCode = DesignatedCountryCode
        self.validate_ExtendedWIPOST3CodeType(self.DesignatedCountryCode)
        self.DesignatedCountryCode_nsprefix_ = None
        self.DesignatedUnderCode = DesignatedUnderCode
        self.validate_DesignatedUnderCodeType(self.DesignatedUnderCode)
        self.DesignatedUnderCode_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DesignatedCountryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DesignatedCountryType.subclass:
            return DesignatedCountryType.subclass(*args_, **kwargs_)
        else:
            return DesignatedCountryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DesignatedCountryCode(self):
        return self.DesignatedCountryCode
    def set_DesignatedCountryCode(self, DesignatedCountryCode):
        self.DesignatedCountryCode = DesignatedCountryCode
    def get_DesignatedUnderCode(self):
        return self.DesignatedUnderCode
    def set_DesignatedUnderCode(self, DesignatedUnderCode):
        self.DesignatedUnderCode = DesignatedUnderCode
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_DesignatedUnderCodeType(self, value):
        result = True
        # Validate type DesignatedUnderCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Agreement', 'Protocol']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DesignatedUnderCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DesignatedCountryCode is not None or
            self.DesignatedUnderCode is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DesignatedCountryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DesignatedCountryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DesignatedCountryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DesignatedCountryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DesignatedCountryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DesignatedCountryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DesignatedCountryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DesignatedCountryCode is not None:
            namespaceprefix_ = self.DesignatedCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DesignatedCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesignatedCountryCode>%s</%sDesignatedCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DesignatedCountryCode), input_name='DesignatedCountryCode')), namespaceprefix_ , eol_))
        if self.DesignatedUnderCode is not None:
            namespaceprefix_ = self.DesignatedUnderCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DesignatedUnderCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesignatedUnderCode>%s</%sDesignatedUnderCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DesignatedUnderCode), input_name='DesignatedUnderCode')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DesignatedCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DesignatedCountryCode')
            value_ = self.gds_validate_string(value_, node, 'DesignatedCountryCode')
            self.DesignatedCountryCode = value_
            self.DesignatedCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.DesignatedCountryCode)
        elif nodeName_ == 'DesignatedUnderCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DesignatedUnderCode')
            value_ = self.gds_validate_string(value_, node, 'DesignatedUnderCode')
            self.DesignatedUnderCode = value_
            self.DesignatedUnderCode_nsprefix_ = child_.prefix
            # validate type DesignatedUnderCodeType
            self.validate_DesignatedUnderCodeType(self.DesignatedUnderCode)
        else:
            content_ = self.gds_build_any(child_, 'DesignatedCountryType')
            self.add_anytypeobjs_(content_)
# end class DesignatedCountryType


class DocumentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentName=None, DocumentFilename=None, DocumentFileFormat=None, DocumentDate=None, DocumentLanguageCode=None, DocumentMedia=None, DocumentLocation=None, DocumentVersion=None, DocumentSizeInByte=None, Comment=None, DocumentBinary=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentName = DocumentName
        self.DocumentName_nsprefix_ = None
        self.DocumentFilename = DocumentFilename
        self.DocumentFilename_nsprefix_ = None
        self.DocumentFileFormat = DocumentFileFormat
        self.validate_FileFormatType(self.DocumentFileFormat)
        self.DocumentFileFormat_nsprefix_ = None
        if isinstance(DocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocumentDate
        self.DocumentDate = initvalue_
        self.DocumentDate_nsprefix_ = None
        self.DocumentLanguageCode = DocumentLanguageCode
        self.validate_ISOLanguageCodeType(self.DocumentLanguageCode)
        self.DocumentLanguageCode_nsprefix_ = None
        self.DocumentMedia = DocumentMedia
        self.validate_DocumentMediaType(self.DocumentMedia)
        self.DocumentMedia_nsprefix_ = None
        self.DocumentLocation = DocumentLocation
        self.DocumentLocation_nsprefix_ = None
        self.DocumentVersion = DocumentVersion
        self.DocumentVersion_nsprefix_ = None
        self.DocumentSizeInByte = DocumentSizeInByte
        self.DocumentSizeInByte_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.DocumentBinary = DocumentBinary
        self.DocumentBinary_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentType.subclass:
            return DocumentType.subclass(*args_, **kwargs_)
        else:
            return DocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentName(self):
        return self.DocumentName
    def set_DocumentName(self, DocumentName):
        self.DocumentName = DocumentName
    def get_DocumentFilename(self):
        return self.DocumentFilename
    def set_DocumentFilename(self, DocumentFilename):
        self.DocumentFilename = DocumentFilename
    def get_DocumentFileFormat(self):
        return self.DocumentFileFormat
    def set_DocumentFileFormat(self, DocumentFileFormat):
        self.DocumentFileFormat = DocumentFileFormat
    def get_DocumentDate(self):
        return self.DocumentDate
    def set_DocumentDate(self, DocumentDate):
        self.DocumentDate = DocumentDate
    def get_DocumentLanguageCode(self):
        return self.DocumentLanguageCode
    def set_DocumentLanguageCode(self, DocumentLanguageCode):
        self.DocumentLanguageCode = DocumentLanguageCode
    def get_DocumentMedia(self):
        return self.DocumentMedia
    def set_DocumentMedia(self, DocumentMedia):
        self.DocumentMedia = DocumentMedia
    def get_DocumentLocation(self):
        return self.DocumentLocation
    def set_DocumentLocation(self, DocumentLocation):
        self.DocumentLocation = DocumentLocation
    def get_DocumentVersion(self):
        return self.DocumentVersion
    def set_DocumentVersion(self, DocumentVersion):
        self.DocumentVersion = DocumentVersion
    def get_DocumentSizeInByte(self):
        return self.DocumentSizeInByte
    def set_DocumentSizeInByte(self, DocumentSizeInByte):
        self.DocumentSizeInByte = DocumentSizeInByte
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_DocumentBinary(self):
        return self.DocumentBinary
    def set_DocumentBinary(self, DocumentBinary):
        self.DocumentBinary = DocumentBinary
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_FileFormatType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOLanguageCodeType(self, value):
        result = True
        # Validate type ISOLanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['aa', 'ab', 'af', 'am', 'ar', 'as', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bn', 'bo', 'br', 'ca', 'co', 'cs', 'cy', 'da', 'de', 'dz', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'ha', 'he', 'hi', 'hr', 'hu', 'hy', 'ia', 'id', 'ie', 'ik', 'is', 'it', 'iu', 'ja', 'jw', 'ka', 'kk', 'kl', 'km', 'kn', 'ko', 'ks', 'ku', 'ky', 'la', 'ln', 'lo', 'lt', 'lv', 'mg', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'ne', 'nl', 'no', 'oc', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sd', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ug', 'uk', 'ur', 'uz', 'vi', 'vo', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOLanguageCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DocumentMediaType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.DocumentName is not None or
            self.DocumentFilename is not None or
            self.DocumentFileFormat is not None or
            self.DocumentDate is not None or
            self.DocumentLanguageCode is not None or
            self.DocumentMedia is not None or
            self.DocumentLocation is not None or
            self.DocumentVersion is not None or
            self.DocumentSizeInByte is not None or
            self.Comment is not None or
            self.DocumentBinary is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DocumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DocumentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentName is not None:
            namespaceprefix_ = self.DocumentName_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentName>%s</%sDocumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentName), input_name='DocumentName')), namespaceprefix_ , eol_))
        if self.DocumentFilename is not None:
            namespaceprefix_ = self.DocumentFilename_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFilename_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentFilename>%s</%sDocumentFilename>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentFilename), input_name='DocumentFilename')), namespaceprefix_ , eol_))
        if self.DocumentFileFormat is not None:
            namespaceprefix_ = self.DocumentFileFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFileFormat_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentFileFormat>%s</%sDocumentFileFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentFileFormat), input_name='DocumentFileFormat')), namespaceprefix_ , eol_))
        if self.DocumentDate is not None:
            namespaceprefix_ = self.DocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentDate>%s</%sDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocumentDate, input_name='DocumentDate'), namespaceprefix_ , eol_))
        if self.DocumentLanguageCode is not None:
            namespaceprefix_ = self.DocumentLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentLanguageCode>%s</%sDocumentLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentLanguageCode), input_name='DocumentLanguageCode')), namespaceprefix_ , eol_))
        if self.DocumentMedia is not None:
            namespaceprefix_ = self.DocumentMedia_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentMedia_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentMedia>%s</%sDocumentMedia>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentMedia), input_name='DocumentMedia')), namespaceprefix_ , eol_))
        if self.DocumentLocation is not None:
            namespaceprefix_ = self.DocumentLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentLocation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentLocation>%s</%sDocumentLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentLocation), input_name='DocumentLocation')), namespaceprefix_ , eol_))
        if self.DocumentVersion is not None:
            namespaceprefix_ = self.DocumentVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentVersion>%s</%sDocumentVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentVersion), input_name='DocumentVersion')), namespaceprefix_ , eol_))
        if self.DocumentSizeInByte is not None:
            namespaceprefix_ = self.DocumentSizeInByte_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentSizeInByte_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentSizeInByte>%s</%sDocumentSizeInByte>%s' % (namespaceprefix_ , self.gds_format_integer(self.DocumentSizeInByte, input_name='DocumentSizeInByte'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.DocumentBinary is not None:
            namespaceprefix_ = self.DocumentBinary_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentBinary_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentBinary>%s</%sDocumentBinary>%s' % (namespaceprefix_ , self.gds_format_base64(self.DocumentBinary, input_name='DocumentBinary'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentName')
            value_ = self.gds_validate_string(value_, node, 'DocumentName')
            self.DocumentName = value_
            self.DocumentName_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentFilename':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentFilename')
            value_ = self.gds_validate_string(value_, node, 'DocumentFilename')
            self.DocumentFilename = value_
            self.DocumentFilename_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentFileFormat':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentFileFormat')
            value_ = self.gds_validate_string(value_, node, 'DocumentFileFormat')
            self.DocumentFileFormat = value_
            self.DocumentFileFormat_nsprefix_ = child_.prefix
            # validate type FileFormatType
            self.validate_FileFormatType(self.DocumentFileFormat)
        elif nodeName_ == 'DocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocumentDate = dval_
            self.DocumentDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'DocumentLanguageCode')
            self.DocumentLanguageCode = value_
            self.DocumentLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.DocumentLanguageCode)
        elif nodeName_ == 'DocumentMedia':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentMedia')
            value_ = self.gds_validate_string(value_, node, 'DocumentMedia')
            self.DocumentMedia = value_
            self.DocumentMedia_nsprefix_ = child_.prefix
            # validate type DocumentMediaType
            self.validate_DocumentMediaType(self.DocumentMedia)
        elif nodeName_ == 'DocumentLocation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentLocation')
            value_ = self.gds_validate_string(value_, node, 'DocumentLocation')
            self.DocumentLocation = value_
            self.DocumentLocation_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentVersion')
            value_ = self.gds_validate_string(value_, node, 'DocumentVersion')
            self.DocumentVersion = value_
            self.DocumentVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentSizeInByte' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DocumentSizeInByte')
            ival_ = self.gds_validate_integer(ival_, node, 'DocumentSizeInByte')
            self.DocumentSizeInByte = ival_
            self.DocumentSizeInByte_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'DocumentBinary':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DocumentBinary')
            else:
                bval_ = None
            self.DocumentBinary = bval_
            self.DocumentBinary_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'DocumentType')
            self.add_anytypeobjs_(content_)
# end class DocumentType


class EarlierMarkType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EarlierMarkCountryCode=None, EarlierMarkKind=None, ApplicationNumber=None, ApplicationDate=None, RegistrationNumber=None, RegistrationDate=None, MarkFeature=None, WordMarkSpecification=None, MarkImageDetails=None, BaseGoodsServicesDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EarlierMarkCountryCode = EarlierMarkCountryCode
        self.validate_WIPOST3CodeType(self.EarlierMarkCountryCode)
        self.EarlierMarkCountryCode_nsprefix_ = None
        self.EarlierMarkKind = EarlierMarkKind
        self.validate_KindMarkType(self.EarlierMarkKind)
        self.EarlierMarkKind_nsprefix_ = None
        self.ApplicationNumber = ApplicationNumber
        self.ApplicationNumber_nsprefix_ = None
        if isinstance(ApplicationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ApplicationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ApplicationDate
        self.ApplicationDate = initvalue_
        self.ApplicationDate_nsprefix_ = None
        self.RegistrationNumber = RegistrationNumber
        self.RegistrationNumber_nsprefix_ = None
        if isinstance(RegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RegistrationDate
        self.RegistrationDate = initvalue_
        self.RegistrationDate_nsprefix_ = None
        self.MarkFeature = MarkFeature
        self.validate_MarkFeatureType(self.MarkFeature)
        self.MarkFeature_nsprefix_ = None
        self.WordMarkSpecification = WordMarkSpecification
        self.WordMarkSpecification_nsprefix_ = None
        self.MarkImageDetails = MarkImageDetails
        self.MarkImageDetails_nsprefix_ = None
        self.BaseGoodsServicesDetails = BaseGoodsServicesDetails
        self.BaseGoodsServicesDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EarlierMarkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EarlierMarkType.subclass:
            return EarlierMarkType.subclass(*args_, **kwargs_)
        else:
            return EarlierMarkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EarlierMarkCountryCode(self):
        return self.EarlierMarkCountryCode
    def set_EarlierMarkCountryCode(self, EarlierMarkCountryCode):
        self.EarlierMarkCountryCode = EarlierMarkCountryCode
    def get_EarlierMarkKind(self):
        return self.EarlierMarkKind
    def set_EarlierMarkKind(self, EarlierMarkKind):
        self.EarlierMarkKind = EarlierMarkKind
    def get_ApplicationNumber(self):
        return self.ApplicationNumber
    def set_ApplicationNumber(self, ApplicationNumber):
        self.ApplicationNumber = ApplicationNumber
    def get_ApplicationDate(self):
        return self.ApplicationDate
    def set_ApplicationDate(self, ApplicationDate):
        self.ApplicationDate = ApplicationDate
    def get_RegistrationNumber(self):
        return self.RegistrationNumber
    def set_RegistrationNumber(self, RegistrationNumber):
        self.RegistrationNumber = RegistrationNumber
    def get_RegistrationDate(self):
        return self.RegistrationDate
    def set_RegistrationDate(self, RegistrationDate):
        self.RegistrationDate = RegistrationDate
    def get_MarkFeature(self):
        return self.MarkFeature
    def set_MarkFeature(self, MarkFeature):
        self.MarkFeature = MarkFeature
    def get_WordMarkSpecification(self):
        return self.WordMarkSpecification
    def set_WordMarkSpecification(self, WordMarkSpecification):
        self.WordMarkSpecification = WordMarkSpecification
    def get_MarkImageDetails(self):
        return self.MarkImageDetails
    def set_MarkImageDetails(self, MarkImageDetails):
        self.MarkImageDetails = MarkImageDetails
    def get_BaseGoodsServicesDetails(self):
        return self.BaseGoodsServicesDetails
    def set_BaseGoodsServicesDetails(self, BaseGoodsServicesDetails):
        self.BaseGoodsServicesDetails = BaseGoodsServicesDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_WIPOST3CodeType(self, value):
        result = True
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_KindMarkType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_MarkFeatureType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.EarlierMarkCountryCode is not None or
            self.EarlierMarkKind is not None or
            self.ApplicationNumber is not None or
            self.ApplicationDate is not None or
            self.RegistrationNumber is not None or
            self.RegistrationDate is not None or
            self.MarkFeature is not None or
            self.WordMarkSpecification is not None or
            self.MarkImageDetails is not None or
            self.BaseGoodsServicesDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EarlierMarkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EarlierMarkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EarlierMarkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EarlierMarkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EarlierMarkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EarlierMarkType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EarlierMarkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EarlierMarkCountryCode is not None:
            namespaceprefix_ = self.EarlierMarkCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierMarkCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarlierMarkCountryCode>%s</%sEarlierMarkCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EarlierMarkCountryCode), input_name='EarlierMarkCountryCode')), namespaceprefix_ , eol_))
        if self.EarlierMarkKind is not None:
            namespaceprefix_ = self.EarlierMarkKind_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierMarkKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarlierMarkKind>%s</%sEarlierMarkKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EarlierMarkKind), input_name='EarlierMarkKind')), namespaceprefix_ , eol_))
        if self.ApplicationNumber is not None:
            namespaceprefix_ = self.ApplicationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationNumber>%s</%sApplicationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationNumber), input_name='ApplicationNumber')), namespaceprefix_ , eol_))
        if self.ApplicationDate is not None:
            namespaceprefix_ = self.ApplicationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationDate>%s</%sApplicationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ApplicationDate, input_name='ApplicationDate'), namespaceprefix_ , eol_))
        if self.RegistrationNumber is not None:
            namespaceprefix_ = self.RegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumber>%s</%sRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumber), input_name='RegistrationNumber')), namespaceprefix_ , eol_))
        if self.RegistrationDate is not None:
            namespaceprefix_ = self.RegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationDate>%s</%sRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RegistrationDate, input_name='RegistrationDate'), namespaceprefix_ , eol_))
        if self.MarkFeature is not None:
            namespaceprefix_ = self.MarkFeature_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkFeature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkFeature>%s</%sMarkFeature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkFeature), input_name='MarkFeature')), namespaceprefix_ , eol_))
        if self.WordMarkSpecification is not None:
            namespaceprefix_ = self.WordMarkSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.WordMarkSpecification_nsprefix_) else ''
            self.WordMarkSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WordMarkSpecification', pretty_print=pretty_print)
        if self.MarkImageDetails is not None:
            namespaceprefix_ = self.MarkImageDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageDetails_nsprefix_) else ''
            self.MarkImageDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageDetails', pretty_print=pretty_print)
        if self.BaseGoodsServicesDetails is not None:
            namespaceprefix_ = self.BaseGoodsServicesDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BaseGoodsServicesDetails_nsprefix_) else ''
            self.BaseGoodsServicesDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BaseGoodsServicesDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EarlierMarkCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EarlierMarkCountryCode')
            value_ = self.gds_validate_string(value_, node, 'EarlierMarkCountryCode')
            self.EarlierMarkCountryCode = value_
            self.EarlierMarkCountryCode_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.EarlierMarkCountryCode)
        elif nodeName_ == 'EarlierMarkKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EarlierMarkKind')
            value_ = self.gds_validate_string(value_, node, 'EarlierMarkKind')
            self.EarlierMarkKind = value_
            self.EarlierMarkKind_nsprefix_ = child_.prefix
            # validate type KindMarkType
            self.validate_KindMarkType(self.EarlierMarkKind)
        elif nodeName_ == 'ApplicationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationNumber')
            value_ = self.gds_validate_string(value_, node, 'ApplicationNumber')
            self.ApplicationNumber = value_
            self.ApplicationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ApplicationDate = dval_
            self.ApplicationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegistrationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumber')
            self.RegistrationNumber = value_
            self.RegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RegistrationDate = dval_
            self.RegistrationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkFeature':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkFeature')
            value_ = self.gds_validate_string(value_, node, 'MarkFeature')
            self.MarkFeature = value_
            self.MarkFeature_nsprefix_ = child_.prefix
            # validate type MarkFeatureType
            self.validate_MarkFeatureType(self.MarkFeature)
        elif nodeName_ == 'WordMarkSpecification':
            obj_ = WordMarkSpecificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WordMarkSpecification = obj_
            obj_.original_tagname_ = 'WordMarkSpecification'
        elif nodeName_ == 'MarkImageDetails':
            obj_ = MarkImageDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageDetails = obj_
            obj_.original_tagname_ = 'MarkImageDetails'
        elif nodeName_ == 'BaseGoodsServicesDetails':
            obj_ = BaseGoodsServicesDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BaseGoodsServicesDetails = obj_
            obj_.original_tagname_ = 'BaseGoodsServicesDetails'
        else:
            content_ = self.gds_build_any(child_, 'EarlierMarkType')
            self.add_anytypeobjs_(content_)
# end class EarlierMarkType


class EntitlementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EntitlementNationalityCode=None, EntitlementEstablishment=None, EntitlementDomiciled=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EntitlementNationalityCode = EntitlementNationalityCode
        self.validate_NationalityCodeType(self.EntitlementNationalityCode)
        self.EntitlementNationalityCode_nsprefix_ = None
        self.EntitlementEstablishment = EntitlementEstablishment
        self.EntitlementEstablishment_nsprefix_ = None
        self.EntitlementDomiciled = EntitlementDomiciled
        self.EntitlementDomiciled_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntitlementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntitlementType.subclass:
            return EntitlementType.subclass(*args_, **kwargs_)
        else:
            return EntitlementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EntitlementNationalityCode(self):
        return self.EntitlementNationalityCode
    def set_EntitlementNationalityCode(self, EntitlementNationalityCode):
        self.EntitlementNationalityCode = EntitlementNationalityCode
    def get_EntitlementEstablishment(self):
        return self.EntitlementEstablishment
    def set_EntitlementEstablishment(self, EntitlementEstablishment):
        self.EntitlementEstablishment = EntitlementEstablishment
    def get_EntitlementDomiciled(self):
        return self.EntitlementDomiciled
    def set_EntitlementDomiciled(self, EntitlementDomiciled):
        self.EntitlementDomiciled = EntitlementDomiciled
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.EntitlementNationalityCode is not None or
            self.EntitlementEstablishment is not None or
            self.EntitlementDomiciled is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EntitlementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntitlementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntitlementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntitlementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EntitlementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntitlementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EntitlementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EntitlementNationalityCode is not None:
            namespaceprefix_ = self.EntitlementNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EntitlementNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntitlementNationalityCode>%s</%sEntitlementNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntitlementNationalityCode), input_name='EntitlementNationalityCode')), namespaceprefix_ , eol_))
        if self.EntitlementEstablishment is not None:
            namespaceprefix_ = self.EntitlementEstablishment_nsprefix_ + ':' if (UseCapturedNS_ and self.EntitlementEstablishment_nsprefix_) else ''
            self.EntitlementEstablishment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EntitlementEstablishment', pretty_print=pretty_print)
        if self.EntitlementDomiciled is not None:
            namespaceprefix_ = self.EntitlementDomiciled_nsprefix_ + ':' if (UseCapturedNS_ and self.EntitlementDomiciled_nsprefix_) else ''
            self.EntitlementDomiciled.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EntitlementDomiciled', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EntitlementNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EntitlementNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'EntitlementNationalityCode')
            self.EntitlementNationalityCode = value_
            self.EntitlementNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.EntitlementNationalityCode)
        elif nodeName_ == 'EntitlementEstablishment':
            obj_ = EntitlementEstablishmentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EntitlementEstablishment = obj_
            obj_.original_tagname_ = 'EntitlementEstablishment'
        elif nodeName_ == 'EntitlementDomiciled':
            obj_ = EntitlementDomiciledType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EntitlementDomiciled = obj_
            obj_.original_tagname_ = 'EntitlementDomiciled'
        else:
            content_ = self.gds_build_any(child_, 'EntitlementType')
            self.add_anytypeobjs_(content_)
# end class EntitlementType


class ExhibitionPriorityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExhibitionCountryCode=None, ExhibitionCityName=None, ExhibitionName=None, ExhibitionDate=None, ExhibitionFirstDisplayDate=None, ExhibitionStatusCode=None, ExhibitionStatusDate=None, Comment=None, ExhibitionDocument=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ExhibitionCountryCode = ExhibitionCountryCode
        self.validate_ExtendedISOCountryCodeType(self.ExhibitionCountryCode)
        self.ExhibitionCountryCode_nsprefix_ = None
        self.ExhibitionCityName = ExhibitionCityName
        self.ExhibitionCityName_nsprefix_ = None
        self.ExhibitionName = ExhibitionName
        self.ExhibitionName_nsprefix_ = None
        if isinstance(ExhibitionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExhibitionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExhibitionDate
        self.ExhibitionDate = initvalue_
        self.ExhibitionDate_nsprefix_ = None
        if isinstance(ExhibitionFirstDisplayDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExhibitionFirstDisplayDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExhibitionFirstDisplayDate
        self.ExhibitionFirstDisplayDate = initvalue_
        self.ExhibitionFirstDisplayDate_nsprefix_ = None
        self.ExhibitionStatusCode = ExhibitionStatusCode
        self.validate_ExhibitionStatusCodeType(self.ExhibitionStatusCode)
        self.ExhibitionStatusCode_nsprefix_ = None
        if isinstance(ExhibitionStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExhibitionStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExhibitionStatusDate
        self.ExhibitionStatusDate = initvalue_
        self.ExhibitionStatusDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if ExhibitionDocument is None:
            self.ExhibitionDocument = []
        else:
            self.ExhibitionDocument = ExhibitionDocument
        self.ExhibitionDocument_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExhibitionPriorityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExhibitionPriorityType.subclass:
            return ExhibitionPriorityType.subclass(*args_, **kwargs_)
        else:
            return ExhibitionPriorityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExhibitionCountryCode(self):
        return self.ExhibitionCountryCode
    def set_ExhibitionCountryCode(self, ExhibitionCountryCode):
        self.ExhibitionCountryCode = ExhibitionCountryCode
    def get_ExhibitionCityName(self):
        return self.ExhibitionCityName
    def set_ExhibitionCityName(self, ExhibitionCityName):
        self.ExhibitionCityName = ExhibitionCityName
    def get_ExhibitionName(self):
        return self.ExhibitionName
    def set_ExhibitionName(self, ExhibitionName):
        self.ExhibitionName = ExhibitionName
    def get_ExhibitionDate(self):
        return self.ExhibitionDate
    def set_ExhibitionDate(self, ExhibitionDate):
        self.ExhibitionDate = ExhibitionDate
    def get_ExhibitionFirstDisplayDate(self):
        return self.ExhibitionFirstDisplayDate
    def set_ExhibitionFirstDisplayDate(self, ExhibitionFirstDisplayDate):
        self.ExhibitionFirstDisplayDate = ExhibitionFirstDisplayDate
    def get_ExhibitionStatusCode(self):
        return self.ExhibitionStatusCode
    def set_ExhibitionStatusCode(self, ExhibitionStatusCode):
        self.ExhibitionStatusCode = ExhibitionStatusCode
    def get_ExhibitionStatusDate(self):
        return self.ExhibitionStatusDate
    def set_ExhibitionStatusDate(self, ExhibitionStatusDate):
        self.ExhibitionStatusDate = ExhibitionStatusDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_ExhibitionDocument(self):
        return self.ExhibitionDocument
    def set_ExhibitionDocument(self, ExhibitionDocument):
        self.ExhibitionDocument = ExhibitionDocument
    def add_ExhibitionDocument(self, value):
        self.ExhibitionDocument.append(value)
    def insert_ExhibitionDocument_at(self, index, value):
        self.ExhibitionDocument.insert(index, value)
    def replace_ExhibitionDocument_at(self, index, value):
        self.ExhibitionDocument[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ExtendedISOCountryCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExhibitionStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.ExhibitionCountryCode is not None or
            self.ExhibitionCityName is not None or
            self.ExhibitionName is not None or
            self.ExhibitionDate is not None or
            self.ExhibitionFirstDisplayDate is not None or
            self.ExhibitionStatusCode is not None or
            self.ExhibitionStatusDate is not None or
            self.Comment is not None or
            self.ExhibitionDocument or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ExhibitionPriorityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExhibitionPriorityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExhibitionPriorityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExhibitionPriorityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExhibitionPriorityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExhibitionPriorityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ExhibitionPriorityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExhibitionCountryCode is not None:
            namespaceprefix_ = self.ExhibitionCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExhibitionCountryCode>%s</%sExhibitionCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExhibitionCountryCode), input_name='ExhibitionCountryCode')), namespaceprefix_ , eol_))
        if self.ExhibitionCityName is not None:
            namespaceprefix_ = self.ExhibitionCityName_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionCityName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExhibitionCityName>%s</%sExhibitionCityName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExhibitionCityName), input_name='ExhibitionCityName')), namespaceprefix_ , eol_))
        if self.ExhibitionName is not None:
            namespaceprefix_ = self.ExhibitionName_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExhibitionName>%s</%sExhibitionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExhibitionName), input_name='ExhibitionName')), namespaceprefix_ , eol_))
        if self.ExhibitionDate is not None:
            namespaceprefix_ = self.ExhibitionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExhibitionDate>%s</%sExhibitionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExhibitionDate, input_name='ExhibitionDate'), namespaceprefix_ , eol_))
        if self.ExhibitionFirstDisplayDate is not None:
            namespaceprefix_ = self.ExhibitionFirstDisplayDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionFirstDisplayDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExhibitionFirstDisplayDate>%s</%sExhibitionFirstDisplayDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExhibitionFirstDisplayDate, input_name='ExhibitionFirstDisplayDate'), namespaceprefix_ , eol_))
        if self.ExhibitionStatusCode is not None:
            namespaceprefix_ = self.ExhibitionStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExhibitionStatusCode>%s</%sExhibitionStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExhibitionStatusCode), input_name='ExhibitionStatusCode')), namespaceprefix_ , eol_))
        if self.ExhibitionStatusDate is not None:
            namespaceprefix_ = self.ExhibitionStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExhibitionStatusDate>%s</%sExhibitionStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExhibitionStatusDate, input_name='ExhibitionStatusDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        for ExhibitionDocument_ in self.ExhibitionDocument:
            namespaceprefix_ = self.ExhibitionDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionDocument_nsprefix_) else ''
            ExhibitionDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExhibitionDocument', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExhibitionCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExhibitionCountryCode')
            value_ = self.gds_validate_string(value_, node, 'ExhibitionCountryCode')
            self.ExhibitionCountryCode = value_
            self.ExhibitionCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOCountryCodeType
            self.validate_ExtendedISOCountryCodeType(self.ExhibitionCountryCode)
        elif nodeName_ == 'ExhibitionCityName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExhibitionCityName')
            value_ = self.gds_validate_string(value_, node, 'ExhibitionCityName')
            self.ExhibitionCityName = value_
            self.ExhibitionCityName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExhibitionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExhibitionName')
            value_ = self.gds_validate_string(value_, node, 'ExhibitionName')
            self.ExhibitionName = value_
            self.ExhibitionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExhibitionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExhibitionDate = dval_
            self.ExhibitionDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExhibitionFirstDisplayDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExhibitionFirstDisplayDate = dval_
            self.ExhibitionFirstDisplayDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExhibitionStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ExhibitionStatusCode')
            value_ = self.gds_validate_string(value_, node, 'ExhibitionStatusCode')
            self.ExhibitionStatusCode = value_
            self.ExhibitionStatusCode_nsprefix_ = child_.prefix
            # validate type ExhibitionStatusCodeType
            self.validate_ExhibitionStatusCodeType(self.ExhibitionStatusCode)
        elif nodeName_ == 'ExhibitionStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExhibitionStatusDate = dval_
            self.ExhibitionStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'ExhibitionDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExhibitionDocument.append(obj_)
            obj_.original_tagname_ = 'ExhibitionDocument'
        else:
            content_ = self.gds_build_any(child_, 'ExhibitionPriorityType')
            self.add_anytypeobjs_(content_)
# end class ExhibitionPriorityType


class FormattedNameAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FormattedNameAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FormattedNameAddressType.subclass:
            return FormattedNameAddressType.subclass(*args_, **kwargs_)
        else:
            return FormattedNameAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FormattedNameAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FormattedNameAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FormattedNameAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FormattedNameAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FormattedNameAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FormattedNameAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FormattedNameAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            self.Name.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Name', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            obj_ = NameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Name = obj_
            obj_.original_tagname_ = 'Name'
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        else:
            content_ = self.gds_build_any(child_, 'FormattedNameAddressType')
            self.add_anytypeobjs_(content_)
# end class FormattedNameAddressType


class FreeFormatNameType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NameKind=None, FreeFormatNameDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NameKind = NameKind
        self.validate_NameKindType(self.NameKind)
        self.NameKind_nsprefix_ = None
        self.FreeFormatNameDetails = FreeFormatNameDetails
        self.FreeFormatNameDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreeFormatNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreeFormatNameType.subclass:
            return FreeFormatNameType.subclass(*args_, **kwargs_)
        else:
            return FreeFormatNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NameKind(self):
        return self.NameKind
    def set_NameKind(self, NameKind):
        self.NameKind = NameKind
    def get_FreeFormatNameDetails(self):
        return self.FreeFormatNameDetails
    def set_FreeFormatNameDetails(self, FreeFormatNameDetails):
        self.FreeFormatNameDetails = FreeFormatNameDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_NameKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.NameKind is not None or
            self.FreeFormatNameDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatNameType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreeFormatNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreeFormatNameType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreeFormatNameType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreeFormatNameType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreeFormatNameType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatNameType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NameKind is not None:
            namespaceprefix_ = self.NameKind_nsprefix_ + ':' if (UseCapturedNS_ and self.NameKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameKind>%s</%sNameKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NameKind), input_name='NameKind')), namespaceprefix_ , eol_))
        if self.FreeFormatNameDetails is not None:
            namespaceprefix_ = self.FreeFormatNameDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.FreeFormatNameDetails_nsprefix_) else ''
            self.FreeFormatNameDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreeFormatNameDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NameKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NameKind')
            value_ = self.gds_validate_string(value_, node, 'NameKind')
            self.NameKind = value_
            self.NameKind_nsprefix_ = child_.prefix
            # validate type NameKindType
            self.validate_NameKindType(self.NameKind)
        elif nodeName_ == 'FreeFormatNameDetails':
            obj_ = FreeFormatNameDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreeFormatNameDetails = obj_
            obj_.original_tagname_ = 'FreeFormatNameDetails'
        else:
            content_ = self.gds_build_any(child_, 'FreeFormatNameType')
            self.add_anytypeobjs_(content_)
# end class FreeFormatNameType


class GoodsServicesLimitationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LimitationCountryDetails=None, GoodsServicesLimitationCode=None, Comment=None, LimitationClassDescriptionDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LimitationCountryDetails = LimitationCountryDetails
        self.LimitationCountryDetails_nsprefix_ = None
        self.GoodsServicesLimitationCode = GoodsServicesLimitationCode
        self.validate_GoodsServicesLimitationCodeType(self.GoodsServicesLimitationCode)
        self.GoodsServicesLimitationCode_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.LimitationClassDescriptionDetails = LimitationClassDescriptionDetails
        self.LimitationClassDescriptionDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsServicesLimitationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsServicesLimitationType.subclass:
            return GoodsServicesLimitationType.subclass(*args_, **kwargs_)
        else:
            return GoodsServicesLimitationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LimitationCountryDetails(self):
        return self.LimitationCountryDetails
    def set_LimitationCountryDetails(self, LimitationCountryDetails):
        self.LimitationCountryDetails = LimitationCountryDetails
    def get_GoodsServicesLimitationCode(self):
        return self.GoodsServicesLimitationCode
    def set_GoodsServicesLimitationCode(self, GoodsServicesLimitationCode):
        self.GoodsServicesLimitationCode = GoodsServicesLimitationCode
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_LimitationClassDescriptionDetails(self):
        return self.LimitationClassDescriptionDetails
    def set_LimitationClassDescriptionDetails(self, LimitationClassDescriptionDetails):
        self.LimitationClassDescriptionDetails = LimitationClassDescriptionDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_GoodsServicesLimitationCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.LimitationCountryDetails is not None or
            self.GoodsServicesLimitationCode is not None or
            self.Comment is not None or
            self.LimitationClassDescriptionDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsServicesLimitationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsServicesLimitationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsServicesLimitationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsServicesLimitationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GoodsServicesLimitationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LimitationCountryDetails is not None:
            namespaceprefix_ = self.LimitationCountryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LimitationCountryDetails_nsprefix_) else ''
            self.LimitationCountryDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LimitationCountryDetails', pretty_print=pretty_print)
        if self.GoodsServicesLimitationCode is not None:
            namespaceprefix_ = self.GoodsServicesLimitationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsServicesLimitationCode>%s</%sGoodsServicesLimitationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsServicesLimitationCode), input_name='GoodsServicesLimitationCode')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.LimitationClassDescriptionDetails is not None:
            namespaceprefix_ = self.LimitationClassDescriptionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LimitationClassDescriptionDetails_nsprefix_) else ''
            self.LimitationClassDescriptionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LimitationClassDescriptionDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LimitationCountryDetails':
            obj_ = LimitationCountryDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LimitationCountryDetails = obj_
            obj_.original_tagname_ = 'LimitationCountryDetails'
        elif nodeName_ == 'GoodsServicesLimitationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsServicesLimitationCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsServicesLimitationCode')
            self.GoodsServicesLimitationCode = value_
            self.GoodsServicesLimitationCode_nsprefix_ = child_.prefix
            # validate type GoodsServicesLimitationCodeType
            self.validate_GoodsServicesLimitationCodeType(self.GoodsServicesLimitationCode)
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'LimitationClassDescriptionDetails':
            obj_ = LimitationClassDescriptionDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LimitationClassDescriptionDetails = obj_
            obj_.original_tagname_ = 'LimitationClassDescriptionDetails'
        else:
            content_ = self.gds_build_any(child_, 'GoodsServicesLimitationType')
            self.add_anytypeobjs_(content_)
# end class GoodsServicesLimitationType


class GoodsServicesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClassificationKindCode=None, ClassificationVersion=None, Comment=None, ProposedLeadingClassNumber=None, ClassDescriptionDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClassificationKindCode = ClassificationKindCode
        self.validate_ClassificationKindCodeType(self.ClassificationKindCode)
        self.ClassificationKindCode_nsprefix_ = None
        self.ClassificationVersion = ClassificationVersion
        self.ClassificationVersion_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.ProposedLeadingClassNumber = ProposedLeadingClassNumber
        self.validate_ClassNumberType(self.ProposedLeadingClassNumber)
        self.ProposedLeadingClassNumber_nsprefix_ = None
        self.ClassDescriptionDetails = ClassDescriptionDetails
        self.ClassDescriptionDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsServicesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsServicesType.subclass:
            return GoodsServicesType.subclass(*args_, **kwargs_)
        else:
            return GoodsServicesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClassificationKindCode(self):
        return self.ClassificationKindCode
    def set_ClassificationKindCode(self, ClassificationKindCode):
        self.ClassificationKindCode = ClassificationKindCode
    def get_ClassificationVersion(self):
        return self.ClassificationVersion
    def set_ClassificationVersion(self, ClassificationVersion):
        self.ClassificationVersion = ClassificationVersion
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_ProposedLeadingClassNumber(self):
        return self.ProposedLeadingClassNumber
    def set_ProposedLeadingClassNumber(self, ProposedLeadingClassNumber):
        self.ProposedLeadingClassNumber = ProposedLeadingClassNumber
    def get_ClassDescriptionDetails(self):
        return self.ClassDescriptionDetails
    def set_ClassDescriptionDetails(self, ClassDescriptionDetails):
        self.ClassDescriptionDetails = ClassDescriptionDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ClassificationKindCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ClassNumberType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.ClassificationKindCode is not None or
            self.ClassificationVersion is not None or
            self.Comment is not None or
            self.ProposedLeadingClassNumber is not None or
            self.ClassDescriptionDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsServicesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsServicesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsServicesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsServicesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GoodsServicesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClassificationKindCode is not None:
            namespaceprefix_ = self.ClassificationKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationKindCode>%s</%sClassificationKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationKindCode), input_name='ClassificationKindCode')), namespaceprefix_ , eol_))
        if self.ClassificationVersion is not None:
            namespaceprefix_ = self.ClassificationVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassificationVersion>%s</%sClassificationVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassificationVersion), input_name='ClassificationVersion')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.ProposedLeadingClassNumber is not None:
            namespaceprefix_ = self.ProposedLeadingClassNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ProposedLeadingClassNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProposedLeadingClassNumber>%s</%sProposedLeadingClassNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProposedLeadingClassNumber), input_name='ProposedLeadingClassNumber')), namespaceprefix_ , eol_))
        if self.ClassDescriptionDetails is not None:
            namespaceprefix_ = self.ClassDescriptionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassDescriptionDetails_nsprefix_) else ''
            self.ClassDescriptionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassDescriptionDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClassificationKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ClassificationKindCode')
            value_ = self.gds_validate_string(value_, node, 'ClassificationKindCode')
            self.ClassificationKindCode = value_
            self.ClassificationKindCode_nsprefix_ = child_.prefix
            # validate type ClassificationKindCodeType
            self.validate_ClassificationKindCodeType(self.ClassificationKindCode)
        elif nodeName_ == 'ClassificationVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassificationVersion')
            value_ = self.gds_validate_string(value_, node, 'ClassificationVersion')
            self.ClassificationVersion = value_
            self.ClassificationVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'ProposedLeadingClassNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProposedLeadingClassNumber')
            value_ = self.gds_validate_string(value_, node, 'ProposedLeadingClassNumber')
            self.ProposedLeadingClassNumber = value_
            self.ProposedLeadingClassNumber_nsprefix_ = child_.prefix
            # validate type ClassNumberType
            self.validate_ClassNumberType(self.ProposedLeadingClassNumber)
        elif nodeName_ == 'ClassDescriptionDetails':
            obj_ = ClassDescriptionDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassDescriptionDetails = obj_
            obj_.original_tagname_ = 'ClassDescriptionDetails'
        else:
            content_ = self.gds_build_any(child_, 'GoodsServicesType')
            self.add_anytypeobjs_(content_)
# end class GoodsServicesType


class KeyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identifier=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Identifier is None:
            self.Identifier = []
        else:
            self.Identifier = Identifier
        self.Identifier_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyType.subclass:
            return KeyType.subclass(*args_, **kwargs_)
        else:
            return KeyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identifier(self):
        return self.Identifier
    def set_Identifier(self, Identifier):
        self.Identifier = Identifier
    def add_Identifier(self, value):
        self.Identifier.append(value)
    def insert_Identifier_at(self, index, value):
        self.Identifier.insert(index, value)
    def replace_Identifier_at(self, index, value):
        self.Identifier[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.Identifier or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='KeyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'KeyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KeyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='KeyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='KeyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='KeyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Identifier_ in self.Identifier:
            namespaceprefix_ = self.Identifier_nsprefix_ + ':' if (UseCapturedNS_ and self.Identifier_nsprefix_) else ''
            Identifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Identifier', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Identifier.append(obj_)
            obj_.original_tagname_ = 'Identifier'
        else:
            content_ = self.gds_build_any(child_, 'KeyType')
            self.add_anytypeobjs_(content_)
# end class KeyType


class LicenceEventType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenceEventDate=None, LicenceEventDateTime=None, LicenceEventCode=None, LicenceEventResponseDate=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(LicenceEventDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenceEventDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LicenceEventDate
        self.LicenceEventDate = initvalue_
        self.LicenceEventDate_nsprefix_ = None
        if isinstance(LicenceEventDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenceEventDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = LicenceEventDateTime
        self.LicenceEventDateTime = initvalue_
        self.LicenceEventDateTime_nsprefix_ = None
        self.LicenceEventCode = LicenceEventCode
        self.validate_LicenceEventCodeType(self.LicenceEventCode)
        self.LicenceEventCode_nsprefix_ = None
        if isinstance(LicenceEventResponseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenceEventResponseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LicenceEventResponseDate
        self.LicenceEventResponseDate = initvalue_
        self.LicenceEventResponseDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenceEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenceEventType.subclass:
            return LicenceEventType.subclass(*args_, **kwargs_)
        else:
            return LicenceEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenceEventDate(self):
        return self.LicenceEventDate
    def set_LicenceEventDate(self, LicenceEventDate):
        self.LicenceEventDate = LicenceEventDate
    def get_LicenceEventDateTime(self):
        return self.LicenceEventDateTime
    def set_LicenceEventDateTime(self, LicenceEventDateTime):
        self.LicenceEventDateTime = LicenceEventDateTime
    def get_LicenceEventCode(self):
        return self.LicenceEventCode
    def set_LicenceEventCode(self, LicenceEventCode):
        self.LicenceEventCode = LicenceEventCode
    def get_LicenceEventResponseDate(self):
        return self.LicenceEventResponseDate
    def set_LicenceEventResponseDate(self, LicenceEventResponseDate):
        self.LicenceEventResponseDate = LicenceEventResponseDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_LicenceEventCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.LicenceEventDate is not None or
            self.LicenceEventDateTime is not None or
            self.LicenceEventCode is not None or
            self.LicenceEventResponseDate is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceEventType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenceEventType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenceEventType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenceEventType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenceEventType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenceEventType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceEventType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicenceEventDate is not None:
            namespaceprefix_ = self.LicenceEventDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceEventDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceEventDate>%s</%sLicenceEventDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LicenceEventDate, input_name='LicenceEventDate'), namespaceprefix_ , eol_))
        if self.LicenceEventDateTime is not None:
            namespaceprefix_ = self.LicenceEventDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceEventDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceEventDateTime>%s</%sLicenceEventDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.LicenceEventDateTime, input_name='LicenceEventDateTime'), namespaceprefix_ , eol_))
        if self.LicenceEventCode is not None:
            namespaceprefix_ = self.LicenceEventCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceEventCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceEventCode>%s</%sLicenceEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenceEventCode), input_name='LicenceEventCode')), namespaceprefix_ , eol_))
        if self.LicenceEventResponseDate is not None:
            namespaceprefix_ = self.LicenceEventResponseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceEventResponseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceEventResponseDate>%s</%sLicenceEventResponseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LicenceEventResponseDate, input_name='LicenceEventResponseDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenceEventDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LicenceEventDate = dval_
            self.LicenceEventDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenceEventDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.LicenceEventDateTime = dval_
            self.LicenceEventDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenceEventCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LicenceEventCode')
            value_ = self.gds_validate_string(value_, node, 'LicenceEventCode')
            self.LicenceEventCode = value_
            self.LicenceEventCode_nsprefix_ = child_.prefix
            # validate type LicenceEventCodeType
            self.validate_LicenceEventCodeType(self.LicenceEventCode)
        elif nodeName_ == 'LicenceEventResponseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LicenceEventResponseDate = dval_
            self.LicenceEventResponseDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'LicenceEventType')
            self.add_anytypeobjs_(content_)
# end class LicenceEventType


class LicenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenceIdentifier=None, LicenceDate=None, LicenceNumber=None, LicenceReference=None, LicenceKind=None, SubLicenceIndicator=None, RelatedLicenceIdentifier=None, GoodsServicesLimitationIndicator=None, GoodsServicesLimitation=None, TerritoryLimitationIndicator=None, TerritoryLimitationText=None, PeriodLimitationIndicator=None, PeriodLimitationText=None, PeriodLimitationStartDate=None, PeriodLimitationEndDate=None, LicenceStatusCode=None, LicenseeDetails=None, RepresentativeDetails=None, LicenceEventDetails=None, LicenceDocumentDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LicenceIdentifier = LicenceIdentifier
        self.LicenceIdentifier_nsprefix_ = None
        if isinstance(LicenceDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenceDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LicenceDate
        self.LicenceDate = initvalue_
        self.LicenceDate_nsprefix_ = None
        self.LicenceNumber = LicenceNumber
        self.LicenceNumber_nsprefix_ = None
        self.LicenceReference = LicenceReference
        self.LicenceReference_nsprefix_ = None
        self.LicenceKind = LicenceKind
        self.validate_LicenceKindType(self.LicenceKind)
        self.LicenceKind_nsprefix_ = None
        self.SubLicenceIndicator = SubLicenceIndicator
        self.SubLicenceIndicator_nsprefix_ = None
        self.RelatedLicenceIdentifier = RelatedLicenceIdentifier
        self.RelatedLicenceIdentifier_nsprefix_ = None
        self.GoodsServicesLimitationIndicator = GoodsServicesLimitationIndicator
        self.GoodsServicesLimitationIndicator_nsprefix_ = None
        self.GoodsServicesLimitation = GoodsServicesLimitation
        self.GoodsServicesLimitation_nsprefix_ = None
        self.TerritoryLimitationIndicator = TerritoryLimitationIndicator
        self.TerritoryLimitationIndicator_nsprefix_ = None
        self.TerritoryLimitationText = TerritoryLimitationText
        self.TerritoryLimitationText_nsprefix_ = None
        self.PeriodLimitationIndicator = PeriodLimitationIndicator
        self.PeriodLimitationIndicator_nsprefix_ = None
        self.PeriodLimitationText = PeriodLimitationText
        self.PeriodLimitationText_nsprefix_ = None
        if isinstance(PeriodLimitationStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PeriodLimitationStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PeriodLimitationStartDate
        self.PeriodLimitationStartDate = initvalue_
        self.PeriodLimitationStartDate_nsprefix_ = None
        if isinstance(PeriodLimitationEndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PeriodLimitationEndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PeriodLimitationEndDate
        self.PeriodLimitationEndDate = initvalue_
        self.PeriodLimitationEndDate_nsprefix_ = None
        self.LicenceStatusCode = LicenceStatusCode
        self.validate_LicenceStatusCodeType(self.LicenceStatusCode)
        self.LicenceStatusCode_nsprefix_ = None
        self.LicenseeDetails = LicenseeDetails
        self.LicenseeDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.LicenceEventDetails = LicenceEventDetails
        self.LicenceEventDetails_nsprefix_ = None
        self.LicenceDocumentDetails = LicenceDocumentDetails
        self.LicenceDocumentDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenceType.subclass:
            return LicenceType.subclass(*args_, **kwargs_)
        else:
            return LicenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenceIdentifier(self):
        return self.LicenceIdentifier
    def set_LicenceIdentifier(self, LicenceIdentifier):
        self.LicenceIdentifier = LicenceIdentifier
    def get_LicenceDate(self):
        return self.LicenceDate
    def set_LicenceDate(self, LicenceDate):
        self.LicenceDate = LicenceDate
    def get_LicenceNumber(self):
        return self.LicenceNumber
    def set_LicenceNumber(self, LicenceNumber):
        self.LicenceNumber = LicenceNumber
    def get_LicenceReference(self):
        return self.LicenceReference
    def set_LicenceReference(self, LicenceReference):
        self.LicenceReference = LicenceReference
    def get_LicenceKind(self):
        return self.LicenceKind
    def set_LicenceKind(self, LicenceKind):
        self.LicenceKind = LicenceKind
    def get_SubLicenceIndicator(self):
        return self.SubLicenceIndicator
    def set_SubLicenceIndicator(self, SubLicenceIndicator):
        self.SubLicenceIndicator = SubLicenceIndicator
    def get_RelatedLicenceIdentifier(self):
        return self.RelatedLicenceIdentifier
    def set_RelatedLicenceIdentifier(self, RelatedLicenceIdentifier):
        self.RelatedLicenceIdentifier = RelatedLicenceIdentifier
    def get_GoodsServicesLimitationIndicator(self):
        return self.GoodsServicesLimitationIndicator
    def set_GoodsServicesLimitationIndicator(self, GoodsServicesLimitationIndicator):
        self.GoodsServicesLimitationIndicator = GoodsServicesLimitationIndicator
    def get_GoodsServicesLimitation(self):
        return self.GoodsServicesLimitation
    def set_GoodsServicesLimitation(self, GoodsServicesLimitation):
        self.GoodsServicesLimitation = GoodsServicesLimitation
    def get_TerritoryLimitationIndicator(self):
        return self.TerritoryLimitationIndicator
    def set_TerritoryLimitationIndicator(self, TerritoryLimitationIndicator):
        self.TerritoryLimitationIndicator = TerritoryLimitationIndicator
    def get_TerritoryLimitationText(self):
        return self.TerritoryLimitationText
    def set_TerritoryLimitationText(self, TerritoryLimitationText):
        self.TerritoryLimitationText = TerritoryLimitationText
    def get_PeriodLimitationIndicator(self):
        return self.PeriodLimitationIndicator
    def set_PeriodLimitationIndicator(self, PeriodLimitationIndicator):
        self.PeriodLimitationIndicator = PeriodLimitationIndicator
    def get_PeriodLimitationText(self):
        return self.PeriodLimitationText
    def set_PeriodLimitationText(self, PeriodLimitationText):
        self.PeriodLimitationText = PeriodLimitationText
    def get_PeriodLimitationStartDate(self):
        return self.PeriodLimitationStartDate
    def set_PeriodLimitationStartDate(self, PeriodLimitationStartDate):
        self.PeriodLimitationStartDate = PeriodLimitationStartDate
    def get_PeriodLimitationEndDate(self):
        return self.PeriodLimitationEndDate
    def set_PeriodLimitationEndDate(self, PeriodLimitationEndDate):
        self.PeriodLimitationEndDate = PeriodLimitationEndDate
    def get_LicenceStatusCode(self):
        return self.LicenceStatusCode
    def set_LicenceStatusCode(self, LicenceStatusCode):
        self.LicenceStatusCode = LicenceStatusCode
    def get_LicenseeDetails(self):
        return self.LicenseeDetails
    def set_LicenseeDetails(self, LicenseeDetails):
        self.LicenseeDetails = LicenseeDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_LicenceEventDetails(self):
        return self.LicenceEventDetails
    def set_LicenceEventDetails(self, LicenceEventDetails):
        self.LicenceEventDetails = LicenceEventDetails
    def get_LicenceDocumentDetails(self):
        return self.LicenceDocumentDetails
    def set_LicenceDocumentDetails(self, LicenceDocumentDetails):
        self.LicenceDocumentDetails = LicenceDocumentDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_LicenceKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_LicenceStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.LicenceIdentifier is not None or
            self.LicenceDate is not None or
            self.LicenceNumber is not None or
            self.LicenceReference is not None or
            self.LicenceKind is not None or
            self.SubLicenceIndicator is not None or
            self.RelatedLicenceIdentifier is not None or
            self.GoodsServicesLimitationIndicator is not None or
            self.GoodsServicesLimitation is not None or
            self.TerritoryLimitationIndicator is not None or
            self.TerritoryLimitationText is not None or
            self.PeriodLimitationIndicator is not None or
            self.PeriodLimitationText is not None or
            self.PeriodLimitationStartDate is not None or
            self.PeriodLimitationEndDate is not None or
            self.LicenceStatusCode is not None or
            self.LicenseeDetails is not None or
            self.RepresentativeDetails is not None or
            self.LicenceEventDetails is not None or
            self.LicenceDocumentDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicenceIdentifier is not None:
            namespaceprefix_ = self.LicenceIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceIdentifier>%s</%sLicenceIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenceIdentifier), input_name='LicenceIdentifier')), namespaceprefix_ , eol_))
        if self.LicenceDate is not None:
            namespaceprefix_ = self.LicenceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceDate>%s</%sLicenceDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LicenceDate, input_name='LicenceDate'), namespaceprefix_ , eol_))
        if self.LicenceNumber is not None:
            namespaceprefix_ = self.LicenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceNumber>%s</%sLicenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenceNumber), input_name='LicenceNumber')), namespaceprefix_ , eol_))
        if self.LicenceReference is not None:
            namespaceprefix_ = self.LicenceReference_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceReference>%s</%sLicenceReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenceReference), input_name='LicenceReference')), namespaceprefix_ , eol_))
        if self.LicenceKind is not None:
            namespaceprefix_ = self.LicenceKind_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceKind>%s</%sLicenceKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenceKind), input_name='LicenceKind')), namespaceprefix_ , eol_))
        if self.SubLicenceIndicator is not None:
            namespaceprefix_ = self.SubLicenceIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SubLicenceIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubLicenceIndicator>%s</%sSubLicenceIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.SubLicenceIndicator, input_name='SubLicenceIndicator'), namespaceprefix_ , eol_))
        if self.RelatedLicenceIdentifier is not None:
            namespaceprefix_ = self.RelatedLicenceIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RelatedLicenceIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelatedLicenceIdentifier>%s</%sRelatedLicenceIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RelatedLicenceIdentifier), input_name='RelatedLicenceIdentifier')), namespaceprefix_ , eol_))
        if self.GoodsServicesLimitationIndicator is not None:
            namespaceprefix_ = self.GoodsServicesLimitationIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitationIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsServicesLimitationIndicator>%s</%sGoodsServicesLimitationIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.GoodsServicesLimitationIndicator, input_name='GoodsServicesLimitationIndicator'), namespaceprefix_ , eol_))
        if self.GoodsServicesLimitation is not None:
            namespaceprefix_ = self.GoodsServicesLimitation_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitation_nsprefix_) else ''
            self.GoodsServicesLimitation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitation', pretty_print=pretty_print)
        if self.TerritoryLimitationIndicator is not None:
            namespaceprefix_ = self.TerritoryLimitationIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TerritoryLimitationIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTerritoryLimitationIndicator>%s</%sTerritoryLimitationIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.TerritoryLimitationIndicator, input_name='TerritoryLimitationIndicator'), namespaceprefix_ , eol_))
        if self.TerritoryLimitationText is not None:
            namespaceprefix_ = self.TerritoryLimitationText_nsprefix_ + ':' if (UseCapturedNS_ and self.TerritoryLimitationText_nsprefix_) else ''
            self.TerritoryLimitationText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TerritoryLimitationText', pretty_print=pretty_print)
        if self.PeriodLimitationIndicator is not None:
            namespaceprefix_ = self.PeriodLimitationIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.PeriodLimitationIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPeriodLimitationIndicator>%s</%sPeriodLimitationIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.PeriodLimitationIndicator, input_name='PeriodLimitationIndicator'), namespaceprefix_ , eol_))
        if self.PeriodLimitationText is not None:
            namespaceprefix_ = self.PeriodLimitationText_nsprefix_ + ':' if (UseCapturedNS_ and self.PeriodLimitationText_nsprefix_) else ''
            self.PeriodLimitationText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PeriodLimitationText', pretty_print=pretty_print)
        if self.PeriodLimitationStartDate is not None:
            namespaceprefix_ = self.PeriodLimitationStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PeriodLimitationStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPeriodLimitationStartDate>%s</%sPeriodLimitationStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PeriodLimitationStartDate, input_name='PeriodLimitationStartDate'), namespaceprefix_ , eol_))
        if self.PeriodLimitationEndDate is not None:
            namespaceprefix_ = self.PeriodLimitationEndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PeriodLimitationEndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPeriodLimitationEndDate>%s</%sPeriodLimitationEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PeriodLimitationEndDate, input_name='PeriodLimitationEndDate'), namespaceprefix_ , eol_))
        if self.LicenceStatusCode is not None:
            namespaceprefix_ = self.LicenceStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenceStatusCode>%s</%sLicenceStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenceStatusCode), input_name='LicenceStatusCode')), namespaceprefix_ , eol_))
        if self.LicenseeDetails is not None:
            namespaceprefix_ = self.LicenseeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeDetails_nsprefix_) else ''
            self.LicenseeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenseeDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.LicenceEventDetails is not None:
            namespaceprefix_ = self.LicenceEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceEventDetails_nsprefix_) else ''
            self.LicenceEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenceEventDetails', pretty_print=pretty_print)
        if self.LicenceDocumentDetails is not None:
            namespaceprefix_ = self.LicenceDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceDocumentDetails_nsprefix_) else ''
            self.LicenceDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenceDocumentDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenceIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenceIdentifier')
            value_ = self.gds_validate_string(value_, node, 'LicenceIdentifier')
            self.LicenceIdentifier = value_
            self.LicenceIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenceDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LicenceDate = dval_
            self.LicenceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenceNumber')
            value_ = self.gds_validate_string(value_, node, 'LicenceNumber')
            self.LicenceNumber = value_
            self.LicenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenceReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenceReference')
            value_ = self.gds_validate_string(value_, node, 'LicenceReference')
            self.LicenceReference = value_
            self.LicenceReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenceKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LicenceKind')
            value_ = self.gds_validate_string(value_, node, 'LicenceKind')
            self.LicenceKind = value_
            self.LicenceKind_nsprefix_ = child_.prefix
            # validate type LicenceKindType
            self.validate_LicenceKindType(self.LicenceKind)
        elif nodeName_ == 'SubLicenceIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'SubLicenceIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'SubLicenceIndicator')
            self.SubLicenceIndicator = ival_
            self.SubLicenceIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'RelatedLicenceIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RelatedLicenceIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RelatedLicenceIdentifier')
            self.RelatedLicenceIdentifier = value_
            self.RelatedLicenceIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'GoodsServicesLimitationIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'GoodsServicesLimitationIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'GoodsServicesLimitationIndicator')
            self.GoodsServicesLimitationIndicator = ival_
            self.GoodsServicesLimitationIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'GoodsServicesLimitation':
            obj_ = GoodsServicesLimitationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitation = obj_
            obj_.original_tagname_ = 'GoodsServicesLimitation'
        elif nodeName_ == 'TerritoryLimitationIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'TerritoryLimitationIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'TerritoryLimitationIndicator')
            self.TerritoryLimitationIndicator = ival_
            self.TerritoryLimitationIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'TerritoryLimitationText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TerritoryLimitationText = obj_
            obj_.original_tagname_ = 'TerritoryLimitationText'
        elif nodeName_ == 'PeriodLimitationIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'PeriodLimitationIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'PeriodLimitationIndicator')
            self.PeriodLimitationIndicator = ival_
            self.PeriodLimitationIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PeriodLimitationText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PeriodLimitationText = obj_
            obj_.original_tagname_ = 'PeriodLimitationText'
        elif nodeName_ == 'PeriodLimitationStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PeriodLimitationStartDate = dval_
            self.PeriodLimitationStartDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PeriodLimitationEndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PeriodLimitationEndDate = dval_
            self.PeriodLimitationEndDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenceStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LicenceStatusCode')
            value_ = self.gds_validate_string(value_, node, 'LicenceStatusCode')
            self.LicenceStatusCode = value_
            self.LicenceStatusCode_nsprefix_ = child_.prefix
            # validate type LicenceStatusCodeType
            self.validate_LicenceStatusCodeType(self.LicenceStatusCode)
        elif nodeName_ == 'LicenseeDetails':
            obj_ = LicenseeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenseeDetails = obj_
            obj_.original_tagname_ = 'LicenseeDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType6.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'LicenceEventDetails':
            obj_ = LicenceEventDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenceEventDetails = obj_
            obj_.original_tagname_ = 'LicenceEventDetails'
        elif nodeName_ == 'LicenceDocumentDetails':
            obj_ = LicenceDocumentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenceDocumentDetails = obj_
            obj_.original_tagname_ = 'LicenceDocumentDetails'
        else:
            content_ = self.gds_build_any(child_, 'LicenceType')
            self.add_anytypeobjs_(content_)
# end class LicenceType


class LicenseeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, LicenseeIdentifier=None, LicenseeSequenceNumber=None, LicenseeNationalityCode=None, LicenseeLegalEntity=None, LicenseeIncorporationCountryCode=None, LicenseeIncorporationState=None, Comment=None, LicenseeAddressBook=None, LicenseeEntitlement=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        if LicenseeIdentifier is None:
            self.LicenseeIdentifier = []
        else:
            self.LicenseeIdentifier = LicenseeIdentifier
        self.LicenseeIdentifier_nsprefix_ = None
        self.LicenseeSequenceNumber = LicenseeSequenceNumber
        self.LicenseeSequenceNumber_nsprefix_ = None
        self.LicenseeNationalityCode = LicenseeNationalityCode
        self.validate_NationalityCodeType(self.LicenseeNationalityCode)
        self.LicenseeNationalityCode_nsprefix_ = None
        self.LicenseeLegalEntity = LicenseeLegalEntity
        self.LicenseeLegalEntity_nsprefix_ = None
        self.LicenseeIncorporationCountryCode = LicenseeIncorporationCountryCode
        self.validate_ISOCountryCodeType(self.LicenseeIncorporationCountryCode)
        self.LicenseeIncorporationCountryCode_nsprefix_ = None
        self.LicenseeIncorporationState = LicenseeIncorporationState
        self.LicenseeIncorporationState_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.LicenseeAddressBook = LicenseeAddressBook
        self.LicenseeAddressBook_nsprefix_ = None
        self.LicenseeEntitlement = LicenseeEntitlement
        self.LicenseeEntitlement_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseeType.subclass:
            return LicenseeType.subclass(*args_, **kwargs_)
        else:
            return LicenseeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenseeIdentifier(self):
        return self.LicenseeIdentifier
    def set_LicenseeIdentifier(self, LicenseeIdentifier):
        self.LicenseeIdentifier = LicenseeIdentifier
    def add_LicenseeIdentifier(self, value):
        self.LicenseeIdentifier.append(value)
    def insert_LicenseeIdentifier_at(self, index, value):
        self.LicenseeIdentifier.insert(index, value)
    def replace_LicenseeIdentifier_at(self, index, value):
        self.LicenseeIdentifier[index] = value
    def get_LicenseeSequenceNumber(self):
        return self.LicenseeSequenceNumber
    def set_LicenseeSequenceNumber(self, LicenseeSequenceNumber):
        self.LicenseeSequenceNumber = LicenseeSequenceNumber
    def get_LicenseeNationalityCode(self):
        return self.LicenseeNationalityCode
    def set_LicenseeNationalityCode(self, LicenseeNationalityCode):
        self.LicenseeNationalityCode = LicenseeNationalityCode
    def get_LicenseeLegalEntity(self):
        return self.LicenseeLegalEntity
    def set_LicenseeLegalEntity(self, LicenseeLegalEntity):
        self.LicenseeLegalEntity = LicenseeLegalEntity
    def get_LicenseeIncorporationCountryCode(self):
        return self.LicenseeIncorporationCountryCode
    def set_LicenseeIncorporationCountryCode(self, LicenseeIncorporationCountryCode):
        self.LicenseeIncorporationCountryCode = LicenseeIncorporationCountryCode
    def get_LicenseeIncorporationState(self):
        return self.LicenseeIncorporationState
    def set_LicenseeIncorporationState(self, LicenseeIncorporationState):
        self.LicenseeIncorporationState = LicenseeIncorporationState
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_LicenseeAddressBook(self):
        return self.LicenseeAddressBook
    def set_LicenseeAddressBook(self, LicenseeAddressBook):
        self.LicenseeAddressBook = LicenseeAddressBook
    def get_LicenseeEntitlement(self):
        return self.LicenseeEntitlement
    def set_LicenseeEntitlement(self, LicenseeEntitlement):
        self.LicenseeEntitlement = LicenseeEntitlement
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.LicenseeIdentifier or
            self.LicenseeSequenceNumber is not None or
            self.LicenseeNationalityCode is not None or
            self.LicenseeLegalEntity is not None or
            self.LicenseeIncorporationCountryCode is not None or
            self.LicenseeIncorporationState is not None or
            self.Comment is not None or
            self.LicenseeAddressBook is not None or
            self.LicenseeEntitlement is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenseeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenseeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenseeType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenseeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LicenseeIdentifier_ in self.LicenseeIdentifier:
            namespaceprefix_ = self.LicenseeIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeIdentifier_nsprefix_) else ''
            LicenseeIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenseeIdentifier', pretty_print=pretty_print)
        if self.LicenseeSequenceNumber is not None:
            namespaceprefix_ = self.LicenseeSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseeSequenceNumber>%s</%sLicenseeSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LicenseeSequenceNumber, input_name='LicenseeSequenceNumber'), namespaceprefix_ , eol_))
        if self.LicenseeNationalityCode is not None:
            namespaceprefix_ = self.LicenseeNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseeNationalityCode>%s</%sLicenseeNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseeNationalityCode), input_name='LicenseeNationalityCode')), namespaceprefix_ , eol_))
        if self.LicenseeLegalEntity is not None:
            namespaceprefix_ = self.LicenseeLegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeLegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseeLegalEntity>%s</%sLicenseeLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseeLegalEntity), input_name='LicenseeLegalEntity')), namespaceprefix_ , eol_))
        if self.LicenseeIncorporationCountryCode is not None:
            namespaceprefix_ = self.LicenseeIncorporationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeIncorporationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseeIncorporationCountryCode>%s</%sLicenseeIncorporationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseeIncorporationCountryCode), input_name='LicenseeIncorporationCountryCode')), namespaceprefix_ , eol_))
        if self.LicenseeIncorporationState is not None:
            namespaceprefix_ = self.LicenseeIncorporationState_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeIncorporationState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseeIncorporationState>%s</%sLicenseeIncorporationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseeIncorporationState), input_name='LicenseeIncorporationState')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.LicenseeAddressBook is not None:
            namespaceprefix_ = self.LicenseeAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeAddressBook_nsprefix_) else ''
            self.LicenseeAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenseeAddressBook', pretty_print=pretty_print)
        if self.LicenseeEntitlement is not None:
            namespaceprefix_ = self.LicenseeEntitlement_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseeEntitlement_nsprefix_) else ''
            self.LicenseeEntitlement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenseeEntitlement', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenseeIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenseeIdentifier.append(obj_)
            obj_.original_tagname_ = 'LicenseeIdentifier'
        elif nodeName_ == 'LicenseeSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LicenseeSequenceNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'LicenseeSequenceNumber')
            self.LicenseeSequenceNumber = ival_
            self.LicenseeSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseeNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LicenseeNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'LicenseeNationalityCode')
            self.LicenseeNationalityCode = value_
            self.LicenseeNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.LicenseeNationalityCode)
        elif nodeName_ == 'LicenseeLegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseeLegalEntity')
            value_ = self.gds_validate_string(value_, node, 'LicenseeLegalEntity')
            self.LicenseeLegalEntity = value_
            self.LicenseeLegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseeIncorporationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseeIncorporationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'LicenseeIncorporationCountryCode')
            self.LicenseeIncorporationCountryCode = value_
            self.LicenseeIncorporationCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.LicenseeIncorporationCountryCode)
        elif nodeName_ == 'LicenseeIncorporationState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseeIncorporationState')
            value_ = self.gds_validate_string(value_, node, 'LicenseeIncorporationState')
            self.LicenseeIncorporationState = value_
            self.LicenseeIncorporationState_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'LicenseeAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenseeAddressBook = obj_
            obj_.original_tagname_ = 'LicenseeAddressBook'
        elif nodeName_ == 'LicenseeEntitlement':
            obj_ = EntitlementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenseeEntitlement = obj_
            obj_.original_tagname_ = 'LicenseeEntitlement'
        else:
            content_ = self.gds_build_any(child_, 'LicenseeType')
            self.add_anytypeobjs_(content_)
# end class LicenseeType


class LoginInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Login=None, LoginEmail=None, Password=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Login = Login
        self.Login_nsprefix_ = None
        self.LoginEmail = LoginEmail
        self.LoginEmail_nsprefix_ = None
        if Password is None:
            self.Password = []
        else:
            self.Password = Password
        self.Password_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LoginInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LoginInformationType.subclass:
            return LoginInformationType.subclass(*args_, **kwargs_)
        else:
            return LoginInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Login(self):
        return self.Login
    def set_Login(self, Login):
        self.Login = Login
    def get_LoginEmail(self):
        return self.LoginEmail
    def set_LoginEmail(self, LoginEmail):
        self.LoginEmail = LoginEmail
    def get_Password(self):
        return self.Password
    def set_Password(self, Password):
        self.Password = Password
    def add_Password(self, value):
        self.Password.append(value)
    def insert_Password_at(self, index, value):
        self.Password.insert(index, value)
    def replace_Password_at(self, index, value):
        self.Password[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.Login is not None or
            self.LoginEmail is not None or
            self.Password or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LoginInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LoginInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LoginInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LoginInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LoginInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LoginInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LoginInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Login is not None:
            namespaceprefix_ = self.Login_nsprefix_ + ':' if (UseCapturedNS_ and self.Login_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLogin>%s</%sLogin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Login), input_name='Login')), namespaceprefix_ , eol_))
        if self.LoginEmail is not None:
            namespaceprefix_ = self.LoginEmail_nsprefix_ + ':' if (UseCapturedNS_ and self.LoginEmail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoginEmail>%s</%sLoginEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LoginEmail), input_name='LoginEmail')), namespaceprefix_ , eol_))
        for Password_ in self.Password:
            namespaceprefix_ = self.Password_nsprefix_ + ':' if (UseCapturedNS_ and self.Password_nsprefix_) else ''
            Password_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Password', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Login':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Login')
            value_ = self.gds_validate_string(value_, node, 'Login')
            self.Login = value_
            self.Login_nsprefix_ = child_.prefix
        elif nodeName_ == 'LoginEmail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LoginEmail')
            value_ = self.gds_validate_string(value_, node, 'LoginEmail')
            self.LoginEmail = value_
            self.LoginEmail_nsprefix_ = child_.prefix
        elif nodeName_ == 'Password':
            obj_ = xs_anySimpleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Password.append(obj_)
            obj_.original_tagname_ = 'Password'
        else:
            content_ = self.gds_build_any(child_, 'LoginInformationType')
            self.add_anytypeobjs_(content_)
# end class LoginInformationType


class MarkEventType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkEventDate=None, MarkEventDateTime=None, MarkEventCode=None, MarkEventResponseDate=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(MarkEventDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MarkEventDate, '%Y-%m-%d').date()
        else:
            initvalue_ = MarkEventDate
        self.MarkEventDate = initvalue_
        self.MarkEventDate_nsprefix_ = None
        if isinstance(MarkEventDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MarkEventDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = MarkEventDateTime
        self.MarkEventDateTime = initvalue_
        self.MarkEventDateTime_nsprefix_ = None
        self.MarkEventCode = MarkEventCode
        self.validate_MarkEventCodeType(self.MarkEventCode)
        self.MarkEventCode_nsprefix_ = None
        if isinstance(MarkEventResponseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MarkEventResponseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = MarkEventResponseDate
        self.MarkEventResponseDate = initvalue_
        self.MarkEventResponseDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkEventType.subclass:
            return MarkEventType.subclass(*args_, **kwargs_)
        else:
            return MarkEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkEventDate(self):
        return self.MarkEventDate
    def set_MarkEventDate(self, MarkEventDate):
        self.MarkEventDate = MarkEventDate
    def get_MarkEventDateTime(self):
        return self.MarkEventDateTime
    def set_MarkEventDateTime(self, MarkEventDateTime):
        self.MarkEventDateTime = MarkEventDateTime
    def get_MarkEventCode(self):
        return self.MarkEventCode
    def set_MarkEventCode(self, MarkEventCode):
        self.MarkEventCode = MarkEventCode
    def get_MarkEventResponseDate(self):
        return self.MarkEventResponseDate
    def set_MarkEventResponseDate(self, MarkEventResponseDate):
        self.MarkEventResponseDate = MarkEventResponseDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_MarkEventCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.MarkEventDate is not None or
            self.MarkEventDateTime is not None or
            self.MarkEventCode is not None or
            self.MarkEventResponseDate is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkEventType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkEventType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkEventType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkEventType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkEventType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkEventType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkEventType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarkEventDate is not None:
            namespaceprefix_ = self.MarkEventDate_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkEventDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkEventDate>%s</%sMarkEventDate>%s' % (namespaceprefix_ , self.gds_format_date(self.MarkEventDate, input_name='MarkEventDate'), namespaceprefix_ , eol_))
        if self.MarkEventDateTime is not None:
            namespaceprefix_ = self.MarkEventDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkEventDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkEventDateTime>%s</%sMarkEventDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.MarkEventDateTime, input_name='MarkEventDateTime'), namespaceprefix_ , eol_))
        if self.MarkEventCode is not None:
            namespaceprefix_ = self.MarkEventCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkEventCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkEventCode>%s</%sMarkEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkEventCode), input_name='MarkEventCode')), namespaceprefix_ , eol_))
        if self.MarkEventResponseDate is not None:
            namespaceprefix_ = self.MarkEventResponseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkEventResponseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkEventResponseDate>%s</%sMarkEventResponseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.MarkEventResponseDate, input_name='MarkEventResponseDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkEventDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MarkEventDate = dval_
            self.MarkEventDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkEventDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.MarkEventDateTime = dval_
            self.MarkEventDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkEventCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkEventCode')
            value_ = self.gds_validate_string(value_, node, 'MarkEventCode')
            self.MarkEventCode = value_
            self.MarkEventCode_nsprefix_ = child_.prefix
            # validate type MarkEventCodeType
            self.validate_MarkEventCodeType(self.MarkEventCode)
        elif nodeName_ == 'MarkEventResponseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MarkEventResponseDate = dval_
            self.MarkEventResponseDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'MarkEventType')
            self.add_anytypeobjs_(content_)
# end class MarkEventType


class MarkImageCategoryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CategoryKind=None, CategoryVersion=None, CategoryCodeDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CategoryKind = CategoryKind
        self.validate_CategoryKindType(self.CategoryKind)
        self.CategoryKind_nsprefix_ = None
        self.CategoryVersion = CategoryVersion
        self.CategoryVersion_nsprefix_ = None
        self.CategoryCodeDetails = CategoryCodeDetails
        self.CategoryCodeDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkImageCategoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkImageCategoryType.subclass:
            return MarkImageCategoryType.subclass(*args_, **kwargs_)
        else:
            return MarkImageCategoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CategoryKind(self):
        return self.CategoryKind
    def set_CategoryKind(self, CategoryKind):
        self.CategoryKind = CategoryKind
    def get_CategoryVersion(self):
        return self.CategoryVersion
    def set_CategoryVersion(self, CategoryVersion):
        self.CategoryVersion = CategoryVersion
    def get_CategoryCodeDetails(self):
        return self.CategoryCodeDetails
    def set_CategoryCodeDetails(self, CategoryCodeDetails):
        self.CategoryCodeDetails = CategoryCodeDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_CategoryKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.CategoryKind is not None or
            self.CategoryVersion is not None or
            self.CategoryCodeDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageCategoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkImageCategoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkImageCategoryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkImageCategoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkImageCategoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkImageCategoryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageCategoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CategoryKind is not None:
            namespaceprefix_ = self.CategoryKind_nsprefix_ + ':' if (UseCapturedNS_ and self.CategoryKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategoryKind>%s</%sCategoryKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CategoryKind), input_name='CategoryKind')), namespaceprefix_ , eol_))
        if self.CategoryVersion is not None:
            namespaceprefix_ = self.CategoryVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.CategoryVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategoryVersion>%s</%sCategoryVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CategoryVersion), input_name='CategoryVersion')), namespaceprefix_ , eol_))
        if self.CategoryCodeDetails is not None:
            namespaceprefix_ = self.CategoryCodeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CategoryCodeDetails_nsprefix_) else ''
            self.CategoryCodeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CategoryCodeDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CategoryKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CategoryKind')
            value_ = self.gds_validate_string(value_, node, 'CategoryKind')
            self.CategoryKind = value_
            self.CategoryKind_nsprefix_ = child_.prefix
            # validate type CategoryKindType
            self.validate_CategoryKindType(self.CategoryKind)
        elif nodeName_ == 'CategoryVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CategoryVersion')
            value_ = self.gds_validate_string(value_, node, 'CategoryVersion')
            self.CategoryVersion = value_
            self.CategoryVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'CategoryCodeDetails':
            obj_ = CategoryCodeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CategoryCodeDetails = obj_
            obj_.original_tagname_ = 'CategoryCodeDetails'
        else:
            content_ = self.gds_build_any(child_, 'MarkImageCategoryType')
            self.add_anytypeobjs_(content_)
# end class MarkImageCategoryType


class MarkImageRenditionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkImageRenditionKind=None, MarkImageRenditionFilename=None, MarkImageRenditionFileFormat=None, MarkImageRenditionColourMode=None, MarkImageRenditionRepresentationSize=None, MarkImageRenditionBinary=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MarkImageRenditionKind = MarkImageRenditionKind
        self.validate_MarkImageRenditionKindType(self.MarkImageRenditionKind)
        self.MarkImageRenditionKind_nsprefix_ = None
        self.MarkImageRenditionFilename = MarkImageRenditionFilename
        self.MarkImageRenditionFilename_nsprefix_ = None
        self.MarkImageRenditionFileFormat = MarkImageRenditionFileFormat
        self.validate_FileFormatType(self.MarkImageRenditionFileFormat)
        self.MarkImageRenditionFileFormat_nsprefix_ = None
        self.MarkImageRenditionColourMode = MarkImageRenditionColourMode
        self.validate_MarkImageColourModeType(self.MarkImageRenditionColourMode)
        self.MarkImageRenditionColourMode_nsprefix_ = None
        self.MarkImageRenditionRepresentationSize = MarkImageRenditionRepresentationSize
        self.MarkImageRenditionRepresentationSize_nsprefix_ = None
        self.MarkImageRenditionBinary = MarkImageRenditionBinary
        self.MarkImageRenditionBinary_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkImageRenditionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkImageRenditionType.subclass:
            return MarkImageRenditionType.subclass(*args_, **kwargs_)
        else:
            return MarkImageRenditionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkImageRenditionKind(self):
        return self.MarkImageRenditionKind
    def set_MarkImageRenditionKind(self, MarkImageRenditionKind):
        self.MarkImageRenditionKind = MarkImageRenditionKind
    def get_MarkImageRenditionFilename(self):
        return self.MarkImageRenditionFilename
    def set_MarkImageRenditionFilename(self, MarkImageRenditionFilename):
        self.MarkImageRenditionFilename = MarkImageRenditionFilename
    def get_MarkImageRenditionFileFormat(self):
        return self.MarkImageRenditionFileFormat
    def set_MarkImageRenditionFileFormat(self, MarkImageRenditionFileFormat):
        self.MarkImageRenditionFileFormat = MarkImageRenditionFileFormat
    def get_MarkImageRenditionColourMode(self):
        return self.MarkImageRenditionColourMode
    def set_MarkImageRenditionColourMode(self, MarkImageRenditionColourMode):
        self.MarkImageRenditionColourMode = MarkImageRenditionColourMode
    def get_MarkImageRenditionRepresentationSize(self):
        return self.MarkImageRenditionRepresentationSize
    def set_MarkImageRenditionRepresentationSize(self, MarkImageRenditionRepresentationSize):
        self.MarkImageRenditionRepresentationSize = MarkImageRenditionRepresentationSize
    def get_MarkImageRenditionBinary(self):
        return self.MarkImageRenditionBinary
    def set_MarkImageRenditionBinary(self, MarkImageRenditionBinary):
        self.MarkImageRenditionBinary = MarkImageRenditionBinary
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_MarkImageRenditionKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_FileFormatType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_MarkImageColourModeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.MarkImageRenditionKind is not None or
            self.MarkImageRenditionFilename is not None or
            self.MarkImageRenditionFileFormat is not None or
            self.MarkImageRenditionColourMode is not None or
            self.MarkImageRenditionRepresentationSize is not None or
            self.MarkImageRenditionBinary is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageRenditionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkImageRenditionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkImageRenditionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkImageRenditionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkImageRenditionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkImageRenditionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageRenditionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarkImageRenditionKind is not None:
            namespaceprefix_ = self.MarkImageRenditionKind_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRenditionKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageRenditionKind>%s</%sMarkImageRenditionKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkImageRenditionKind), input_name='MarkImageRenditionKind')), namespaceprefix_ , eol_))
        if self.MarkImageRenditionFilename is not None:
            namespaceprefix_ = self.MarkImageRenditionFilename_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRenditionFilename_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageRenditionFilename>%s</%sMarkImageRenditionFilename>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkImageRenditionFilename), input_name='MarkImageRenditionFilename')), namespaceprefix_ , eol_))
        if self.MarkImageRenditionFileFormat is not None:
            namespaceprefix_ = self.MarkImageRenditionFileFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRenditionFileFormat_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageRenditionFileFormat>%s</%sMarkImageRenditionFileFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkImageRenditionFileFormat), input_name='MarkImageRenditionFileFormat')), namespaceprefix_ , eol_))
        if self.MarkImageRenditionColourMode is not None:
            namespaceprefix_ = self.MarkImageRenditionColourMode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRenditionColourMode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageRenditionColourMode>%s</%sMarkImageRenditionColourMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkImageRenditionColourMode), input_name='MarkImageRenditionColourMode')), namespaceprefix_ , eol_))
        if self.MarkImageRenditionRepresentationSize is not None:
            namespaceprefix_ = self.MarkImageRenditionRepresentationSize_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRenditionRepresentationSize_nsprefix_) else ''
            self.MarkImageRenditionRepresentationSize.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageRenditionRepresentationSize', pretty_print=pretty_print)
        if self.MarkImageRenditionBinary is not None:
            namespaceprefix_ = self.MarkImageRenditionBinary_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRenditionBinary_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageRenditionBinary>%s</%sMarkImageRenditionBinary>%s' % (namespaceprefix_ , self.gds_format_base64(self.MarkImageRenditionBinary, input_name='MarkImageRenditionBinary'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkImageRenditionKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkImageRenditionKind')
            value_ = self.gds_validate_string(value_, node, 'MarkImageRenditionKind')
            self.MarkImageRenditionKind = value_
            self.MarkImageRenditionKind_nsprefix_ = child_.prefix
            # validate type MarkImageRenditionKindType
            self.validate_MarkImageRenditionKindType(self.MarkImageRenditionKind)
        elif nodeName_ == 'MarkImageRenditionFilename':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkImageRenditionFilename')
            value_ = self.gds_validate_string(value_, node, 'MarkImageRenditionFilename')
            self.MarkImageRenditionFilename = value_
            self.MarkImageRenditionFilename_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkImageRenditionFileFormat':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkImageRenditionFileFormat')
            value_ = self.gds_validate_string(value_, node, 'MarkImageRenditionFileFormat')
            self.MarkImageRenditionFileFormat = value_
            self.MarkImageRenditionFileFormat_nsprefix_ = child_.prefix
            # validate type FileFormatType
            self.validate_FileFormatType(self.MarkImageRenditionFileFormat)
        elif nodeName_ == 'MarkImageRenditionColourMode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkImageRenditionColourMode')
            value_ = self.gds_validate_string(value_, node, 'MarkImageRenditionColourMode')
            self.MarkImageRenditionColourMode = value_
            self.MarkImageRenditionColourMode_nsprefix_ = child_.prefix
            # validate type MarkImageColourModeType
            self.validate_MarkImageColourModeType(self.MarkImageRenditionColourMode)
        elif nodeName_ == 'MarkImageRenditionRepresentationSize':
            obj_ = RepresentationSizeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageRenditionRepresentationSize = obj_
            obj_.original_tagname_ = 'MarkImageRenditionRepresentationSize'
        elif nodeName_ == 'MarkImageRenditionBinary':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'MarkImageRenditionBinary')
            else:
                bval_ = None
            self.MarkImageRenditionBinary = bval_
            self.MarkImageRenditionBinary_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'MarkImageRenditionType')
            self.add_anytypeobjs_(content_)
# end class MarkImageRenditionType


class MarkImageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkImageFilename=None, MarkImageFileFormat=None, MarkImageColourIndicator=None, MarkImageColourMode=None, MarkImageColourClaimedText=None, MarkImageColourPartClaimedText=None, MarkImageRepresentationSize=None, MarkImageCategory=None, MarkImageQualityIndicator=None, MarkImageBinary=None, MarkImageRenditionDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MarkImageFilename = MarkImageFilename
        self.MarkImageFilename_nsprefix_ = None
        self.MarkImageFileFormat = MarkImageFileFormat
        self.validate_FileFormatType(self.MarkImageFileFormat)
        self.MarkImageFileFormat_nsprefix_ = None
        self.MarkImageColourIndicator = MarkImageColourIndicator
        self.MarkImageColourIndicator_nsprefix_ = None
        self.MarkImageColourMode = MarkImageColourMode
        self.validate_MarkImageColourModeType(self.MarkImageColourMode)
        self.MarkImageColourMode_nsprefix_ = None
        if MarkImageColourClaimedText is None:
            self.MarkImageColourClaimedText = []
        else:
            self.MarkImageColourClaimedText = MarkImageColourClaimedText
        self.MarkImageColourClaimedText_nsprefix_ = None
        if MarkImageColourPartClaimedText is None:
            self.MarkImageColourPartClaimedText = []
        else:
            self.MarkImageColourPartClaimedText = MarkImageColourPartClaimedText
        self.MarkImageColourPartClaimedText_nsprefix_ = None
        self.MarkImageRepresentationSize = MarkImageRepresentationSize
        self.MarkImageRepresentationSize_nsprefix_ = None
        self.MarkImageCategory = MarkImageCategory
        self.MarkImageCategory_nsprefix_ = None
        self.MarkImageQualityIndicator = MarkImageQualityIndicator
        self.MarkImageQualityIndicator_nsprefix_ = None
        self.MarkImageBinary = MarkImageBinary
        self.MarkImageBinary_nsprefix_ = None
        self.MarkImageRenditionDetails = MarkImageRenditionDetails
        self.MarkImageRenditionDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkImageType.subclass:
            return MarkImageType.subclass(*args_, **kwargs_)
        else:
            return MarkImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkImageFilename(self):
        return self.MarkImageFilename
    def set_MarkImageFilename(self, MarkImageFilename):
        self.MarkImageFilename = MarkImageFilename
    def get_MarkImageFileFormat(self):
        return self.MarkImageFileFormat
    def set_MarkImageFileFormat(self, MarkImageFileFormat):
        self.MarkImageFileFormat = MarkImageFileFormat
    def get_MarkImageColourIndicator(self):
        return self.MarkImageColourIndicator
    def set_MarkImageColourIndicator(self, MarkImageColourIndicator):
        self.MarkImageColourIndicator = MarkImageColourIndicator
    def get_MarkImageColourMode(self):
        return self.MarkImageColourMode
    def set_MarkImageColourMode(self, MarkImageColourMode):
        self.MarkImageColourMode = MarkImageColourMode
    def get_MarkImageColourClaimedText(self):
        return self.MarkImageColourClaimedText
    def set_MarkImageColourClaimedText(self, MarkImageColourClaimedText):
        self.MarkImageColourClaimedText = MarkImageColourClaimedText
    def add_MarkImageColourClaimedText(self, value):
        self.MarkImageColourClaimedText.append(value)
    def insert_MarkImageColourClaimedText_at(self, index, value):
        self.MarkImageColourClaimedText.insert(index, value)
    def replace_MarkImageColourClaimedText_at(self, index, value):
        self.MarkImageColourClaimedText[index] = value
    def get_MarkImageColourPartClaimedText(self):
        return self.MarkImageColourPartClaimedText
    def set_MarkImageColourPartClaimedText(self, MarkImageColourPartClaimedText):
        self.MarkImageColourPartClaimedText = MarkImageColourPartClaimedText
    def add_MarkImageColourPartClaimedText(self, value):
        self.MarkImageColourPartClaimedText.append(value)
    def insert_MarkImageColourPartClaimedText_at(self, index, value):
        self.MarkImageColourPartClaimedText.insert(index, value)
    def replace_MarkImageColourPartClaimedText_at(self, index, value):
        self.MarkImageColourPartClaimedText[index] = value
    def get_MarkImageRepresentationSize(self):
        return self.MarkImageRepresentationSize
    def set_MarkImageRepresentationSize(self, MarkImageRepresentationSize):
        self.MarkImageRepresentationSize = MarkImageRepresentationSize
    def get_MarkImageCategory(self):
        return self.MarkImageCategory
    def set_MarkImageCategory(self, MarkImageCategory):
        self.MarkImageCategory = MarkImageCategory
    def get_MarkImageQualityIndicator(self):
        return self.MarkImageQualityIndicator
    def set_MarkImageQualityIndicator(self, MarkImageQualityIndicator):
        self.MarkImageQualityIndicator = MarkImageQualityIndicator
    def get_MarkImageBinary(self):
        return self.MarkImageBinary
    def set_MarkImageBinary(self, MarkImageBinary):
        self.MarkImageBinary = MarkImageBinary
    def get_MarkImageRenditionDetails(self):
        return self.MarkImageRenditionDetails
    def set_MarkImageRenditionDetails(self, MarkImageRenditionDetails):
        self.MarkImageRenditionDetails = MarkImageRenditionDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_FileFormatType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_MarkImageColourModeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.MarkImageFilename is not None or
            self.MarkImageFileFormat is not None or
            self.MarkImageColourIndicator is not None or
            self.MarkImageColourMode is not None or
            self.MarkImageColourClaimedText or
            self.MarkImageColourPartClaimedText or
            self.MarkImageRepresentationSize is not None or
            self.MarkImageCategory is not None or
            self.MarkImageQualityIndicator is not None or
            self.MarkImageBinary is not None or
            self.MarkImageRenditionDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkImageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkImageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarkImageFilename is not None:
            namespaceprefix_ = self.MarkImageFilename_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageFilename_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageFilename>%s</%sMarkImageFilename>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkImageFilename), input_name='MarkImageFilename')), namespaceprefix_ , eol_))
        if self.MarkImageFileFormat is not None:
            namespaceprefix_ = self.MarkImageFileFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageFileFormat_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageFileFormat>%s</%sMarkImageFileFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkImageFileFormat), input_name='MarkImageFileFormat')), namespaceprefix_ , eol_))
        if self.MarkImageColourIndicator is not None:
            namespaceprefix_ = self.MarkImageColourIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageColourIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageColourIndicator>%s</%sMarkImageColourIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MarkImageColourIndicator, input_name='MarkImageColourIndicator'), namespaceprefix_ , eol_))
        if self.MarkImageColourMode is not None:
            namespaceprefix_ = self.MarkImageColourMode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageColourMode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageColourMode>%s</%sMarkImageColourMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkImageColourMode), input_name='MarkImageColourMode')), namespaceprefix_ , eol_))
        for MarkImageColourClaimedText_ in self.MarkImageColourClaimedText:
            namespaceprefix_ = self.MarkImageColourClaimedText_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageColourClaimedText_nsprefix_) else ''
            MarkImageColourClaimedText_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageColourClaimedText', pretty_print=pretty_print)
        for MarkImageColourPartClaimedText_ in self.MarkImageColourPartClaimedText:
            namespaceprefix_ = self.MarkImageColourPartClaimedText_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageColourPartClaimedText_nsprefix_) else ''
            MarkImageColourPartClaimedText_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageColourPartClaimedText', pretty_print=pretty_print)
        if self.MarkImageRepresentationSize is not None:
            namespaceprefix_ = self.MarkImageRepresentationSize_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRepresentationSize_nsprefix_) else ''
            self.MarkImageRepresentationSize.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageRepresentationSize', pretty_print=pretty_print)
        if self.MarkImageCategory is not None:
            namespaceprefix_ = self.MarkImageCategory_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageCategory_nsprefix_) else ''
            self.MarkImageCategory.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageCategory', pretty_print=pretty_print)
        if self.MarkImageQualityIndicator is not None:
            namespaceprefix_ = self.MarkImageQualityIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageQualityIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageQualityIndicator>%s</%sMarkImageQualityIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MarkImageQualityIndicator, input_name='MarkImageQualityIndicator'), namespaceprefix_ , eol_))
        if self.MarkImageBinary is not None:
            namespaceprefix_ = self.MarkImageBinary_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageBinary_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkImageBinary>%s</%sMarkImageBinary>%s' % (namespaceprefix_ , self.gds_format_base64(self.MarkImageBinary, input_name='MarkImageBinary'), namespaceprefix_ , eol_))
        if self.MarkImageRenditionDetails is not None:
            namespaceprefix_ = self.MarkImageRenditionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRenditionDetails_nsprefix_) else ''
            self.MarkImageRenditionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageRenditionDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkImageFilename':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkImageFilename')
            value_ = self.gds_validate_string(value_, node, 'MarkImageFilename')
            self.MarkImageFilename = value_
            self.MarkImageFilename_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkImageFileFormat':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkImageFileFormat')
            value_ = self.gds_validate_string(value_, node, 'MarkImageFileFormat')
            self.MarkImageFileFormat = value_
            self.MarkImageFileFormat_nsprefix_ = child_.prefix
            # validate type FileFormatType
            self.validate_FileFormatType(self.MarkImageFileFormat)
        elif nodeName_ == 'MarkImageColourIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MarkImageColourIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'MarkImageColourIndicator')
            self.MarkImageColourIndicator = ival_
            self.MarkImageColourIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkImageColourMode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkImageColourMode')
            value_ = self.gds_validate_string(value_, node, 'MarkImageColourMode')
            self.MarkImageColourMode = value_
            self.MarkImageColourMode_nsprefix_ = child_.prefix
            # validate type MarkImageColourModeType
            self.validate_MarkImageColourModeType(self.MarkImageColourMode)
        elif nodeName_ == 'MarkImageColourClaimedText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageColourClaimedText.append(obj_)
            obj_.original_tagname_ = 'MarkImageColourClaimedText'
        elif nodeName_ == 'MarkImageColourPartClaimedText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageColourPartClaimedText.append(obj_)
            obj_.original_tagname_ = 'MarkImageColourPartClaimedText'
        elif nodeName_ == 'MarkImageRepresentationSize':
            obj_ = RepresentationSizeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageRepresentationSize = obj_
            obj_.original_tagname_ = 'MarkImageRepresentationSize'
        elif nodeName_ == 'MarkImageCategory':
            obj_ = MarkImageCategoryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageCategory = obj_
            obj_.original_tagname_ = 'MarkImageCategory'
        elif nodeName_ == 'MarkImageQualityIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MarkImageQualityIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'MarkImageQualityIndicator')
            self.MarkImageQualityIndicator = ival_
            self.MarkImageQualityIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkImageBinary':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'MarkImageBinary')
            else:
                bval_ = None
            self.MarkImageBinary = bval_
            self.MarkImageBinary_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkImageRenditionDetails':
            obj_ = MarkImageRenditionDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageRenditionDetails = obj_
            obj_.original_tagname_ = 'MarkImageRenditionDetails'
        else:
            content_ = self.gds_build_any(child_, 'MarkImageType')
            self.add_anytypeobjs_(content_)
# end class MarkImageType


class MarkRecordRelationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkKey=None, RecordKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TradeMarkKey = TradeMarkKey
        self.TradeMarkKey_nsprefix_ = None
        self.RecordKey = RecordKey
        self.RecordKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkRecordRelationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkRecordRelationType.subclass:
            return MarkRecordRelationType.subclass(*args_, **kwargs_)
        else:
            return MarkRecordRelationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkKey(self):
        return self.TradeMarkKey
    def set_TradeMarkKey(self, TradeMarkKey):
        self.TradeMarkKey = TradeMarkKey
    def get_RecordKey(self):
        return self.RecordKey
    def set_RecordKey(self, RecordKey):
        self.RecordKey = RecordKey
    def hasContent_(self):
        if (
            self.TradeMarkKey is not None or
            self.RecordKey is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordRelationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkRecordRelationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkRecordRelationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkRecordRelationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkRecordRelationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkRecordRelationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordRelationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradeMarkKey is not None:
            namespaceprefix_ = self.TradeMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKey_nsprefix_) else ''
            self.TradeMarkKey.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKey', pretty_print=pretty_print)
        if self.RecordKey is not None:
            namespaceprefix_ = self.RecordKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordKey_nsprefix_) else ''
            self.RecordKey.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKey = obj_
            obj_.original_tagname_ = 'TradeMarkKey'
        elif nodeName_ == 'RecordKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordKey = obj_
            obj_.original_tagname_ = 'RecordKey'
# end class MarkRecordRelationType


class MarkRecordType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BasicRecord=None, RecordOppositionPeriod=None, RecordTransfer=None, RecordChangeNameAddress=None, RecordLicence=None, RecordNationalInternationalReplacement=None, RecordShortNotation=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BasicRecord = BasicRecord
        self.BasicRecord_nsprefix_ = None
        self.RecordOppositionPeriod = RecordOppositionPeriod
        self.RecordOppositionPeriod_nsprefix_ = None
        self.RecordTransfer = RecordTransfer
        self.RecordTransfer_nsprefix_ = None
        self.RecordChangeNameAddress = RecordChangeNameAddress
        self.RecordChangeNameAddress_nsprefix_ = None
        self.RecordLicence = RecordLicence
        self.RecordLicence_nsprefix_ = None
        self.RecordNationalInternationalReplacement = RecordNationalInternationalReplacement
        self.RecordNationalInternationalReplacement_nsprefix_ = None
        self.RecordShortNotation = RecordShortNotation
        self.RecordShortNotation_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkRecordType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkRecordType.subclass:
            return MarkRecordType.subclass(*args_, **kwargs_)
        else:
            return MarkRecordType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BasicRecord(self):
        return self.BasicRecord
    def set_BasicRecord(self, BasicRecord):
        self.BasicRecord = BasicRecord
    def get_RecordOppositionPeriod(self):
        return self.RecordOppositionPeriod
    def set_RecordOppositionPeriod(self, RecordOppositionPeriod):
        self.RecordOppositionPeriod = RecordOppositionPeriod
    def get_RecordTransfer(self):
        return self.RecordTransfer
    def set_RecordTransfer(self, RecordTransfer):
        self.RecordTransfer = RecordTransfer
    def get_RecordChangeNameAddress(self):
        return self.RecordChangeNameAddress
    def set_RecordChangeNameAddress(self, RecordChangeNameAddress):
        self.RecordChangeNameAddress = RecordChangeNameAddress
    def get_RecordLicence(self):
        return self.RecordLicence
    def set_RecordLicence(self, RecordLicence):
        self.RecordLicence = RecordLicence
    def get_RecordNationalInternationalReplacement(self):
        return self.RecordNationalInternationalReplacement
    def set_RecordNationalInternationalReplacement(self, RecordNationalInternationalReplacement):
        self.RecordNationalInternationalReplacement = RecordNationalInternationalReplacement
    def get_RecordShortNotation(self):
        return self.RecordShortNotation
    def set_RecordShortNotation(self, RecordShortNotation):
        self.RecordShortNotation = RecordShortNotation
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.BasicRecord is not None or
            self.RecordOppositionPeriod is not None or
            self.RecordTransfer is not None or
            self.RecordChangeNameAddress is not None or
            self.RecordLicence is not None or
            self.RecordNationalInternationalReplacement is not None or
            self.RecordShortNotation is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkRecordType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkRecordType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkRecordType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkRecordType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkRecordType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BasicRecord is not None:
            namespaceprefix_ = self.BasicRecord_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRecord_nsprefix_) else ''
            self.BasicRecord.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BasicRecord', pretty_print=pretty_print)
        if self.RecordOppositionPeriod is not None:
            namespaceprefix_ = self.RecordOppositionPeriod_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordOppositionPeriod_nsprefix_) else ''
            self.RecordOppositionPeriod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordOppositionPeriod', pretty_print=pretty_print)
        if self.RecordTransfer is not None:
            namespaceprefix_ = self.RecordTransfer_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordTransfer_nsprefix_) else ''
            self.RecordTransfer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordTransfer', pretty_print=pretty_print)
        if self.RecordChangeNameAddress is not None:
            namespaceprefix_ = self.RecordChangeNameAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordChangeNameAddress_nsprefix_) else ''
            self.RecordChangeNameAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordChangeNameAddress', pretty_print=pretty_print)
        if self.RecordLicence is not None:
            namespaceprefix_ = self.RecordLicence_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordLicence_nsprefix_) else ''
            self.RecordLicence.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordLicence', pretty_print=pretty_print)
        if self.RecordNationalInternationalReplacement is not None:
            namespaceprefix_ = self.RecordNationalInternationalReplacement_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNationalInternationalReplacement_nsprefix_) else ''
            self.RecordNationalInternationalReplacement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordNationalInternationalReplacement', pretty_print=pretty_print)
        if self.RecordShortNotation is not None:
            namespaceprefix_ = self.RecordShortNotation_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordShortNotation_nsprefix_) else ''
            self.RecordShortNotation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordShortNotation', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BasicRecord':
            obj_ = BasicRecordType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BasicRecord = obj_
            obj_.original_tagname_ = 'BasicRecord'
        elif nodeName_ == 'RecordOppositionPeriod':
            obj_ = RecordOppositionPeriodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordOppositionPeriod = obj_
            obj_.original_tagname_ = 'RecordOppositionPeriod'
        elif nodeName_ == 'RecordTransfer':
            obj_ = RecordTransferType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordTransfer = obj_
            obj_.original_tagname_ = 'RecordTransfer'
        elif nodeName_ == 'RecordChangeNameAddress':
            obj_ = RecordChangeNameAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordChangeNameAddress = obj_
            obj_.original_tagname_ = 'RecordChangeNameAddress'
        elif nodeName_ == 'RecordLicence':
            obj_ = RecordLicenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordLicence = obj_
            obj_.original_tagname_ = 'RecordLicence'
        elif nodeName_ == 'RecordNationalInternationalReplacement':
            obj_ = RecordNationalInternationalReplacementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordNationalInternationalReplacement = obj_
            obj_.original_tagname_ = 'RecordNationalInternationalReplacement'
        elif nodeName_ == 'RecordShortNotation':
            obj_ = RecordShortNotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordShortNotation = obj_
            obj_.original_tagname_ = 'RecordShortNotation'
        else:
            content_ = self.gds_build_any(child_, 'MarkRecordType')
            self.add_anytypeobjs_(content_)
# end class MarkRecordType


class MarkSoundType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkSoundFilename=None, MarkSoundFileFormat=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MarkSoundFilename = MarkSoundFilename
        self.MarkSoundFilename_nsprefix_ = None
        self.MarkSoundFileFormat = MarkSoundFileFormat
        self.validate_SoundFileFormatType(self.MarkSoundFileFormat)
        self.MarkSoundFileFormat_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkSoundType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkSoundType.subclass:
            return MarkSoundType.subclass(*args_, **kwargs_)
        else:
            return MarkSoundType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkSoundFilename(self):
        return self.MarkSoundFilename
    def set_MarkSoundFilename(self, MarkSoundFilename):
        self.MarkSoundFilename = MarkSoundFilename
    def get_MarkSoundFileFormat(self):
        return self.MarkSoundFileFormat
    def set_MarkSoundFileFormat(self, MarkSoundFileFormat):
        self.MarkSoundFileFormat = MarkSoundFileFormat
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_SoundFileFormatType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.MarkSoundFilename is not None or
            self.MarkSoundFileFormat is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkSoundType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkSoundType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkSoundType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkSoundType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkSoundType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkSoundType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkSoundType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarkSoundFilename is not None:
            namespaceprefix_ = self.MarkSoundFilename_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkSoundFilename_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkSoundFilename>%s</%sMarkSoundFilename>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkSoundFilename), input_name='MarkSoundFilename')), namespaceprefix_ , eol_))
        if self.MarkSoundFileFormat is not None:
            namespaceprefix_ = self.MarkSoundFileFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkSoundFileFormat_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkSoundFileFormat>%s</%sMarkSoundFileFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkSoundFileFormat), input_name='MarkSoundFileFormat')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkSoundFilename':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkSoundFilename')
            value_ = self.gds_validate_string(value_, node, 'MarkSoundFilename')
            self.MarkSoundFilename = value_
            self.MarkSoundFilename_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkSoundFileFormat':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkSoundFileFormat')
            value_ = self.gds_validate_string(value_, node, 'MarkSoundFileFormat')
            self.MarkSoundFileFormat = value_
            self.MarkSoundFileFormat_nsprefix_ = child_.prefix
            # validate type SoundFileFormatType
            self.validate_SoundFileFormatType(self.MarkSoundFileFormat)
        else:
            content_ = self.gds_build_any(child_, 'MarkSoundType')
            self.add_anytypeobjs_(content_)
# end class MarkSoundType


class NameType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreeFormatName=None, FormattedName=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FreeFormatName = FreeFormatName
        self.FreeFormatName_nsprefix_ = None
        self.FormattedName = FormattedName
        self.FormattedName_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NameType.subclass:
            return NameType.subclass(*args_, **kwargs_)
        else:
            return NameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreeFormatName(self):
        return self.FreeFormatName
    def set_FreeFormatName(self, FreeFormatName):
        self.FreeFormatName = FreeFormatName
    def get_FormattedName(self):
        return self.FormattedName
    def set_FormattedName(self, FormattedName):
        self.FormattedName = FormattedName
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.FreeFormatName is not None or
            self.FormattedName is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='NameType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NameType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NameType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NameType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NameType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='NameType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreeFormatName is not None:
            namespaceprefix_ = self.FreeFormatName_nsprefix_ + ':' if (UseCapturedNS_ and self.FreeFormatName_nsprefix_) else ''
            self.FreeFormatName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreeFormatName', pretty_print=pretty_print)
        if self.FormattedName is not None:
            namespaceprefix_ = self.FormattedName_nsprefix_ + ':' if (UseCapturedNS_ and self.FormattedName_nsprefix_) else ''
            self.FormattedName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FormattedName', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreeFormatName':
            obj_ = FreeFormatNameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreeFormatName = obj_
            obj_.original_tagname_ = 'FreeFormatName'
        elif nodeName_ == 'FormattedName':
            obj_ = FormattedNameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FormattedName = obj_
            obj_.original_tagname_ = 'FormattedName'
        else:
            content_ = self.gds_build_any(child_, 'NameType')
            self.add_anytypeobjs_(content_)
# end class NameType


class NationalMarkType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NationalMarkRegistrationNumber=None, NationalMarkFilingDate=None, NationalMarkRegistrationDate=None, NationalMarkPriorityDate=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NationalMarkRegistrationNumber = NationalMarkRegistrationNumber
        self.NationalMarkRegistrationNumber_nsprefix_ = None
        if isinstance(NationalMarkFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(NationalMarkFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = NationalMarkFilingDate
        self.NationalMarkFilingDate = initvalue_
        self.NationalMarkFilingDate_nsprefix_ = None
        if isinstance(NationalMarkRegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(NationalMarkRegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = NationalMarkRegistrationDate
        self.NationalMarkRegistrationDate = initvalue_
        self.NationalMarkRegistrationDate_nsprefix_ = None
        if isinstance(NationalMarkPriorityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(NationalMarkPriorityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = NationalMarkPriorityDate
        self.NationalMarkPriorityDate = initvalue_
        self.NationalMarkPriorityDate_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NationalMarkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NationalMarkType.subclass:
            return NationalMarkType.subclass(*args_, **kwargs_)
        else:
            return NationalMarkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NationalMarkRegistrationNumber(self):
        return self.NationalMarkRegistrationNumber
    def set_NationalMarkRegistrationNumber(self, NationalMarkRegistrationNumber):
        self.NationalMarkRegistrationNumber = NationalMarkRegistrationNumber
    def get_NationalMarkFilingDate(self):
        return self.NationalMarkFilingDate
    def set_NationalMarkFilingDate(self, NationalMarkFilingDate):
        self.NationalMarkFilingDate = NationalMarkFilingDate
    def get_NationalMarkRegistrationDate(self):
        return self.NationalMarkRegistrationDate
    def set_NationalMarkRegistrationDate(self, NationalMarkRegistrationDate):
        self.NationalMarkRegistrationDate = NationalMarkRegistrationDate
    def get_NationalMarkPriorityDate(self):
        return self.NationalMarkPriorityDate
    def set_NationalMarkPriorityDate(self, NationalMarkPriorityDate):
        self.NationalMarkPriorityDate = NationalMarkPriorityDate
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.NationalMarkRegistrationNumber is not None or
            self.NationalMarkFilingDate is not None or
            self.NationalMarkRegistrationDate is not None or
            self.NationalMarkPriorityDate is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='NationalMarkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NationalMarkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NationalMarkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NationalMarkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NationalMarkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NationalMarkType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='NationalMarkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NationalMarkRegistrationNumber is not None:
            namespaceprefix_ = self.NationalMarkRegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalMarkRegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalMarkRegistrationNumber>%s</%sNationalMarkRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NationalMarkRegistrationNumber), input_name='NationalMarkRegistrationNumber')), namespaceprefix_ , eol_))
        if self.NationalMarkFilingDate is not None:
            namespaceprefix_ = self.NationalMarkFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalMarkFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalMarkFilingDate>%s</%sNationalMarkFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.NationalMarkFilingDate, input_name='NationalMarkFilingDate'), namespaceprefix_ , eol_))
        if self.NationalMarkRegistrationDate is not None:
            namespaceprefix_ = self.NationalMarkRegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalMarkRegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalMarkRegistrationDate>%s</%sNationalMarkRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.NationalMarkRegistrationDate, input_name='NationalMarkRegistrationDate'), namespaceprefix_ , eol_))
        if self.NationalMarkPriorityDate is not None:
            namespaceprefix_ = self.NationalMarkPriorityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalMarkPriorityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalMarkPriorityDate>%s</%sNationalMarkPriorityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.NationalMarkPriorityDate, input_name='NationalMarkPriorityDate'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NationalMarkRegistrationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NationalMarkRegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'NationalMarkRegistrationNumber')
            self.NationalMarkRegistrationNumber = value_
            self.NationalMarkRegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'NationalMarkFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.NationalMarkFilingDate = dval_
            self.NationalMarkFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'NationalMarkRegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.NationalMarkRegistrationDate = dval_
            self.NationalMarkRegistrationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'NationalMarkPriorityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.NationalMarkPriorityDate = dval_
            self.NationalMarkPriorityDate_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'NationalMarkType')
            self.add_anytypeobjs_(content_)
# end class NationalMarkType


class OpponentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OpponentIdentifier=None, OpponentNationalityCode=None, OpponentLegalEntity=None, OpponentIncorporationCountryCode=None, OpponentIncorporationState=None, Comment=None, OpponentAddressBook=None, OpponentEntitlement=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if OpponentIdentifier is None:
            self.OpponentIdentifier = []
        else:
            self.OpponentIdentifier = OpponentIdentifier
        self.OpponentIdentifier_nsprefix_ = None
        self.OpponentNationalityCode = OpponentNationalityCode
        self.validate_NationalityCodeType(self.OpponentNationalityCode)
        self.OpponentNationalityCode_nsprefix_ = None
        self.OpponentLegalEntity = OpponentLegalEntity
        self.OpponentLegalEntity_nsprefix_ = None
        self.OpponentIncorporationCountryCode = OpponentIncorporationCountryCode
        self.validate_ISOCountryCodeType(self.OpponentIncorporationCountryCode)
        self.OpponentIncorporationCountryCode_nsprefix_ = None
        self.OpponentIncorporationState = OpponentIncorporationState
        self.OpponentIncorporationState_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.OpponentAddressBook = OpponentAddressBook
        self.OpponentAddressBook_nsprefix_ = None
        self.OpponentEntitlement = OpponentEntitlement
        self.OpponentEntitlement_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OpponentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OpponentType.subclass:
            return OpponentType.subclass(*args_, **kwargs_)
        else:
            return OpponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OpponentIdentifier(self):
        return self.OpponentIdentifier
    def set_OpponentIdentifier(self, OpponentIdentifier):
        self.OpponentIdentifier = OpponentIdentifier
    def add_OpponentIdentifier(self, value):
        self.OpponentIdentifier.append(value)
    def insert_OpponentIdentifier_at(self, index, value):
        self.OpponentIdentifier.insert(index, value)
    def replace_OpponentIdentifier_at(self, index, value):
        self.OpponentIdentifier[index] = value
    def get_OpponentNationalityCode(self):
        return self.OpponentNationalityCode
    def set_OpponentNationalityCode(self, OpponentNationalityCode):
        self.OpponentNationalityCode = OpponentNationalityCode
    def get_OpponentLegalEntity(self):
        return self.OpponentLegalEntity
    def set_OpponentLegalEntity(self, OpponentLegalEntity):
        self.OpponentLegalEntity = OpponentLegalEntity
    def get_OpponentIncorporationCountryCode(self):
        return self.OpponentIncorporationCountryCode
    def set_OpponentIncorporationCountryCode(self, OpponentIncorporationCountryCode):
        self.OpponentIncorporationCountryCode = OpponentIncorporationCountryCode
    def get_OpponentIncorporationState(self):
        return self.OpponentIncorporationState
    def set_OpponentIncorporationState(self, OpponentIncorporationState):
        self.OpponentIncorporationState = OpponentIncorporationState
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_OpponentAddressBook(self):
        return self.OpponentAddressBook
    def set_OpponentAddressBook(self, OpponentAddressBook):
        self.OpponentAddressBook = OpponentAddressBook
    def get_OpponentEntitlement(self):
        return self.OpponentEntitlement
    def set_OpponentEntitlement(self, OpponentEntitlement):
        self.OpponentEntitlement = OpponentEntitlement
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.OpponentIdentifier or
            self.OpponentNationalityCode is not None or
            self.OpponentLegalEntity is not None or
            self.OpponentIncorporationCountryCode is not None or
            self.OpponentIncorporationState is not None or
            self.Comment is not None or
            self.OpponentAddressBook is not None or
            self.OpponentEntitlement is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OpponentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OpponentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OpponentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OpponentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OpponentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OpponentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OpponentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OpponentIdentifier_ in self.OpponentIdentifier:
            namespaceprefix_ = self.OpponentIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentIdentifier_nsprefix_) else ''
            OpponentIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OpponentIdentifier', pretty_print=pretty_print)
        if self.OpponentNationalityCode is not None:
            namespaceprefix_ = self.OpponentNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpponentNationalityCode>%s</%sOpponentNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OpponentNationalityCode), input_name='OpponentNationalityCode')), namespaceprefix_ , eol_))
        if self.OpponentLegalEntity is not None:
            namespaceprefix_ = self.OpponentLegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentLegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpponentLegalEntity>%s</%sOpponentLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OpponentLegalEntity), input_name='OpponentLegalEntity')), namespaceprefix_ , eol_))
        if self.OpponentIncorporationCountryCode is not None:
            namespaceprefix_ = self.OpponentIncorporationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentIncorporationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpponentIncorporationCountryCode>%s</%sOpponentIncorporationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OpponentIncorporationCountryCode), input_name='OpponentIncorporationCountryCode')), namespaceprefix_ , eol_))
        if self.OpponentIncorporationState is not None:
            namespaceprefix_ = self.OpponentIncorporationState_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentIncorporationState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpponentIncorporationState>%s</%sOpponentIncorporationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OpponentIncorporationState), input_name='OpponentIncorporationState')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.OpponentAddressBook is not None:
            namespaceprefix_ = self.OpponentAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentAddressBook_nsprefix_) else ''
            self.OpponentAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OpponentAddressBook', pretty_print=pretty_print)
        if self.OpponentEntitlement is not None:
            namespaceprefix_ = self.OpponentEntitlement_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentEntitlement_nsprefix_) else ''
            self.OpponentEntitlement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OpponentEntitlement', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OpponentIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OpponentIdentifier.append(obj_)
            obj_.original_tagname_ = 'OpponentIdentifier'
        elif nodeName_ == 'OpponentNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OpponentNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'OpponentNationalityCode')
            self.OpponentNationalityCode = value_
            self.OpponentNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.OpponentNationalityCode)
        elif nodeName_ == 'OpponentLegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OpponentLegalEntity')
            value_ = self.gds_validate_string(value_, node, 'OpponentLegalEntity')
            self.OpponentLegalEntity = value_
            self.OpponentLegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'OpponentIncorporationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OpponentIncorporationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'OpponentIncorporationCountryCode')
            self.OpponentIncorporationCountryCode = value_
            self.OpponentIncorporationCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.OpponentIncorporationCountryCode)
        elif nodeName_ == 'OpponentIncorporationState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OpponentIncorporationState')
            value_ = self.gds_validate_string(value_, node, 'OpponentIncorporationState')
            self.OpponentIncorporationState = value_
            self.OpponentIncorporationState_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'OpponentAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OpponentAddressBook = obj_
            obj_.original_tagname_ = 'OpponentAddressBook'
        elif nodeName_ == 'OpponentEntitlement':
            obj_ = EntitlementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OpponentEntitlement = obj_
            obj_.original_tagname_ = 'OpponentEntitlement'
        else:
            content_ = self.gds_build_any(child_, 'OpponentType')
            self.add_anytypeobjs_(content_)
# end class OpponentType


class OppositionEventType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OppositionEventDate=None, OppositionEventDateTime=None, OppositionEventCode=None, OppositionEventResponseDate=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(OppositionEventDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OppositionEventDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OppositionEventDate
        self.OppositionEventDate = initvalue_
        self.OppositionEventDate_nsprefix_ = None
        if isinstance(OppositionEventDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OppositionEventDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OppositionEventDateTime
        self.OppositionEventDateTime = initvalue_
        self.OppositionEventDateTime_nsprefix_ = None
        self.OppositionEventCode = OppositionEventCode
        self.validate_OppositionEventCodeType(self.OppositionEventCode)
        self.OppositionEventCode_nsprefix_ = None
        if isinstance(OppositionEventResponseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OppositionEventResponseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OppositionEventResponseDate
        self.OppositionEventResponseDate = initvalue_
        self.OppositionEventResponseDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OppositionEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OppositionEventType.subclass:
            return OppositionEventType.subclass(*args_, **kwargs_)
        else:
            return OppositionEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OppositionEventDate(self):
        return self.OppositionEventDate
    def set_OppositionEventDate(self, OppositionEventDate):
        self.OppositionEventDate = OppositionEventDate
    def get_OppositionEventDateTime(self):
        return self.OppositionEventDateTime
    def set_OppositionEventDateTime(self, OppositionEventDateTime):
        self.OppositionEventDateTime = OppositionEventDateTime
    def get_OppositionEventCode(self):
        return self.OppositionEventCode
    def set_OppositionEventCode(self, OppositionEventCode):
        self.OppositionEventCode = OppositionEventCode
    def get_OppositionEventResponseDate(self):
        return self.OppositionEventResponseDate
    def set_OppositionEventResponseDate(self, OppositionEventResponseDate):
        self.OppositionEventResponseDate = OppositionEventResponseDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_OppositionEventCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.OppositionEventDate is not None or
            self.OppositionEventDateTime is not None or
            self.OppositionEventCode is not None or
            self.OppositionEventResponseDate is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionEventType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OppositionEventType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OppositionEventType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OppositionEventType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OppositionEventType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OppositionEventType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionEventType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OppositionEventDate is not None:
            namespaceprefix_ = self.OppositionEventDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionEventDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionEventDate>%s</%sOppositionEventDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OppositionEventDate, input_name='OppositionEventDate'), namespaceprefix_ , eol_))
        if self.OppositionEventDateTime is not None:
            namespaceprefix_ = self.OppositionEventDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionEventDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionEventDateTime>%s</%sOppositionEventDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.OppositionEventDateTime, input_name='OppositionEventDateTime'), namespaceprefix_ , eol_))
        if self.OppositionEventCode is not None:
            namespaceprefix_ = self.OppositionEventCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionEventCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionEventCode>%s</%sOppositionEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OppositionEventCode), input_name='OppositionEventCode')), namespaceprefix_ , eol_))
        if self.OppositionEventResponseDate is not None:
            namespaceprefix_ = self.OppositionEventResponseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionEventResponseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionEventResponseDate>%s</%sOppositionEventResponseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OppositionEventResponseDate, input_name='OppositionEventResponseDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OppositionEventDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OppositionEventDate = dval_
            self.OppositionEventDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'OppositionEventDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OppositionEventDateTime = dval_
            self.OppositionEventDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'OppositionEventCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OppositionEventCode')
            value_ = self.gds_validate_string(value_, node, 'OppositionEventCode')
            self.OppositionEventCode = value_
            self.OppositionEventCode_nsprefix_ = child_.prefix
            # validate type OppositionEventCodeType
            self.validate_OppositionEventCodeType(self.OppositionEventCode)
        elif nodeName_ == 'OppositionEventResponseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OppositionEventResponseDate = dval_
            self.OppositionEventResponseDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'OppositionEventType')
            self.add_anytypeobjs_(content_)
# end class OppositionEventType


class OppositionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OppositionIdentifier=None, OppositionDate=None, OppositionReference=None, OppositionLanguageCode=None, ProceedingLanguageCode=None, EarlierRightDate=None, EarlierRightKind=None, OppositionBasisCode=None, OppositionGroundText=None, OppositionExtentText=None, OppositionCurrentStatusCode=None, OppositionCurrentStatusDate=None, EarlierMarkDetails=None, OpponentDetails=None, RepresentativeDetails=None, OppositionEventDetails=None, OppositionDocumentDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OppositionIdentifier = OppositionIdentifier
        self.OppositionIdentifier_nsprefix_ = None
        if isinstance(OppositionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OppositionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OppositionDate
        self.OppositionDate = initvalue_
        self.OppositionDate_nsprefix_ = None
        self.OppositionReference = OppositionReference
        self.OppositionReference_nsprefix_ = None
        self.OppositionLanguageCode = OppositionLanguageCode
        self.validate_ISOLanguageCodeType(self.OppositionLanguageCode)
        self.OppositionLanguageCode_nsprefix_ = None
        self.ProceedingLanguageCode = ProceedingLanguageCode
        self.validate_ISOLanguageCodeType(self.ProceedingLanguageCode)
        self.ProceedingLanguageCode_nsprefix_ = None
        if isinstance(EarlierRightDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EarlierRightDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EarlierRightDate
        self.EarlierRightDate = initvalue_
        self.EarlierRightDate_nsprefix_ = None
        self.EarlierRightKind = EarlierRightKind
        self.validate_EarlierRightKindType(self.EarlierRightKind)
        self.EarlierRightKind_nsprefix_ = None
        self.OppositionBasisCode = OppositionBasisCode
        self.validate_OppositionBasisCodeType(self.OppositionBasisCode)
        self.OppositionBasisCode_nsprefix_ = None
        self.OppositionGroundText = OppositionGroundText
        self.OppositionGroundText_nsprefix_ = None
        self.OppositionExtentText = OppositionExtentText
        self.OppositionExtentText_nsprefix_ = None
        self.OppositionCurrentStatusCode = OppositionCurrentStatusCode
        self.validate_OppositionCurrentStatusCodeType(self.OppositionCurrentStatusCode)
        self.OppositionCurrentStatusCode_nsprefix_ = None
        if isinstance(OppositionCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OppositionCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OppositionCurrentStatusDate
        self.OppositionCurrentStatusDate = initvalue_
        self.OppositionCurrentStatusDate_nsprefix_ = None
        self.EarlierMarkDetails = EarlierMarkDetails
        self.EarlierMarkDetails_nsprefix_ = None
        self.OpponentDetails = OpponentDetails
        self.OpponentDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.OppositionEventDetails = OppositionEventDetails
        self.OppositionEventDetails_nsprefix_ = None
        self.OppositionDocumentDetails = OppositionDocumentDetails
        self.OppositionDocumentDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OppositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OppositionType.subclass:
            return OppositionType.subclass(*args_, **kwargs_)
        else:
            return OppositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OppositionIdentifier(self):
        return self.OppositionIdentifier
    def set_OppositionIdentifier(self, OppositionIdentifier):
        self.OppositionIdentifier = OppositionIdentifier
    def get_OppositionDate(self):
        return self.OppositionDate
    def set_OppositionDate(self, OppositionDate):
        self.OppositionDate = OppositionDate
    def get_OppositionReference(self):
        return self.OppositionReference
    def set_OppositionReference(self, OppositionReference):
        self.OppositionReference = OppositionReference
    def get_OppositionLanguageCode(self):
        return self.OppositionLanguageCode
    def set_OppositionLanguageCode(self, OppositionLanguageCode):
        self.OppositionLanguageCode = OppositionLanguageCode
    def get_ProceedingLanguageCode(self):
        return self.ProceedingLanguageCode
    def set_ProceedingLanguageCode(self, ProceedingLanguageCode):
        self.ProceedingLanguageCode = ProceedingLanguageCode
    def get_EarlierRightDate(self):
        return self.EarlierRightDate
    def set_EarlierRightDate(self, EarlierRightDate):
        self.EarlierRightDate = EarlierRightDate
    def get_EarlierRightKind(self):
        return self.EarlierRightKind
    def set_EarlierRightKind(self, EarlierRightKind):
        self.EarlierRightKind = EarlierRightKind
    def get_OppositionBasisCode(self):
        return self.OppositionBasisCode
    def set_OppositionBasisCode(self, OppositionBasisCode):
        self.OppositionBasisCode = OppositionBasisCode
    def get_OppositionGroundText(self):
        return self.OppositionGroundText
    def set_OppositionGroundText(self, OppositionGroundText):
        self.OppositionGroundText = OppositionGroundText
    def get_OppositionExtentText(self):
        return self.OppositionExtentText
    def set_OppositionExtentText(self, OppositionExtentText):
        self.OppositionExtentText = OppositionExtentText
    def get_OppositionCurrentStatusCode(self):
        return self.OppositionCurrentStatusCode
    def set_OppositionCurrentStatusCode(self, OppositionCurrentStatusCode):
        self.OppositionCurrentStatusCode = OppositionCurrentStatusCode
    def get_OppositionCurrentStatusDate(self):
        return self.OppositionCurrentStatusDate
    def set_OppositionCurrentStatusDate(self, OppositionCurrentStatusDate):
        self.OppositionCurrentStatusDate = OppositionCurrentStatusDate
    def get_EarlierMarkDetails(self):
        return self.EarlierMarkDetails
    def set_EarlierMarkDetails(self, EarlierMarkDetails):
        self.EarlierMarkDetails = EarlierMarkDetails
    def get_OpponentDetails(self):
        return self.OpponentDetails
    def set_OpponentDetails(self, OpponentDetails):
        self.OpponentDetails = OpponentDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_OppositionEventDetails(self):
        return self.OppositionEventDetails
    def set_OppositionEventDetails(self, OppositionEventDetails):
        self.OppositionEventDetails = OppositionEventDetails
    def get_OppositionDocumentDetails(self):
        return self.OppositionDocumentDetails
    def set_OppositionDocumentDetails(self, OppositionDocumentDetails):
        self.OppositionDocumentDetails = OppositionDocumentDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ISOLanguageCodeType(self, value):
        result = True
        # Validate type ISOLanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['aa', 'ab', 'af', 'am', 'ar', 'as', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bn', 'bo', 'br', 'ca', 'co', 'cs', 'cy', 'da', 'de', 'dz', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'ha', 'he', 'hi', 'hr', 'hu', 'hy', 'ia', 'id', 'ie', 'ik', 'is', 'it', 'iu', 'ja', 'jw', 'ka', 'kk', 'kl', 'km', 'kn', 'ko', 'ks', 'ku', 'ky', 'la', 'ln', 'lo', 'lt', 'lv', 'mg', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'ne', 'nl', 'no', 'oc', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sd', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ug', 'uk', 'ur', 'uz', 'vi', 'vo', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOLanguageCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EarlierRightKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_OppositionBasisCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_OppositionCurrentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.OppositionIdentifier is not None or
            self.OppositionDate is not None or
            self.OppositionReference is not None or
            self.OppositionLanguageCode is not None or
            self.ProceedingLanguageCode is not None or
            self.EarlierRightDate is not None or
            self.EarlierRightKind is not None or
            self.OppositionBasisCode is not None or
            self.OppositionGroundText is not None or
            self.OppositionExtentText is not None or
            self.OppositionCurrentStatusCode is not None or
            self.OppositionCurrentStatusDate is not None or
            self.EarlierMarkDetails is not None or
            self.OpponentDetails is not None or
            self.RepresentativeDetails is not None or
            self.OppositionEventDetails is not None or
            self.OppositionDocumentDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OppositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OppositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OppositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OppositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OppositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OppositionIdentifier is not None:
            namespaceprefix_ = self.OppositionIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionIdentifier>%s</%sOppositionIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OppositionIdentifier), input_name='OppositionIdentifier')), namespaceprefix_ , eol_))
        if self.OppositionDate is not None:
            namespaceprefix_ = self.OppositionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionDate>%s</%sOppositionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OppositionDate, input_name='OppositionDate'), namespaceprefix_ , eol_))
        if self.OppositionReference is not None:
            namespaceprefix_ = self.OppositionReference_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionReference>%s</%sOppositionReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OppositionReference), input_name='OppositionReference')), namespaceprefix_ , eol_))
        if self.OppositionLanguageCode is not None:
            namespaceprefix_ = self.OppositionLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionLanguageCode>%s</%sOppositionLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OppositionLanguageCode), input_name='OppositionLanguageCode')), namespaceprefix_ , eol_))
        if self.ProceedingLanguageCode is not None:
            namespaceprefix_ = self.ProceedingLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProceedingLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProceedingLanguageCode>%s</%sProceedingLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProceedingLanguageCode), input_name='ProceedingLanguageCode')), namespaceprefix_ , eol_))
        if self.EarlierRightDate is not None:
            namespaceprefix_ = self.EarlierRightDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierRightDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarlierRightDate>%s</%sEarlierRightDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EarlierRightDate, input_name='EarlierRightDate'), namespaceprefix_ , eol_))
        if self.EarlierRightKind is not None:
            namespaceprefix_ = self.EarlierRightKind_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierRightKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarlierRightKind>%s</%sEarlierRightKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EarlierRightKind), input_name='EarlierRightKind')), namespaceprefix_ , eol_))
        if self.OppositionBasisCode is not None:
            namespaceprefix_ = self.OppositionBasisCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionBasisCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionBasisCode>%s</%sOppositionBasisCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OppositionBasisCode), input_name='OppositionBasisCode')), namespaceprefix_ , eol_))
        if self.OppositionGroundText is not None:
            namespaceprefix_ = self.OppositionGroundText_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionGroundText_nsprefix_) else ''
            self.OppositionGroundText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OppositionGroundText', pretty_print=pretty_print)
        if self.OppositionExtentText is not None:
            namespaceprefix_ = self.OppositionExtentText_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionExtentText_nsprefix_) else ''
            self.OppositionExtentText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OppositionExtentText', pretty_print=pretty_print)
        if self.OppositionCurrentStatusCode is not None:
            namespaceprefix_ = self.OppositionCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionCurrentStatusCode>%s</%sOppositionCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OppositionCurrentStatusCode), input_name='OppositionCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.OppositionCurrentStatusDate is not None:
            namespaceprefix_ = self.OppositionCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionCurrentStatusDate>%s</%sOppositionCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OppositionCurrentStatusDate, input_name='OppositionCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.EarlierMarkDetails is not None:
            namespaceprefix_ = self.EarlierMarkDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierMarkDetails_nsprefix_) else ''
            self.EarlierMarkDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EarlierMarkDetails', pretty_print=pretty_print)
        if self.OpponentDetails is not None:
            namespaceprefix_ = self.OpponentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.OpponentDetails_nsprefix_) else ''
            self.OpponentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OpponentDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.OppositionEventDetails is not None:
            namespaceprefix_ = self.OppositionEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionEventDetails_nsprefix_) else ''
            self.OppositionEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OppositionEventDetails', pretty_print=pretty_print)
        if self.OppositionDocumentDetails is not None:
            namespaceprefix_ = self.OppositionDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionDocumentDetails_nsprefix_) else ''
            self.OppositionDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OppositionDocumentDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OppositionIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OppositionIdentifier')
            value_ = self.gds_validate_string(value_, node, 'OppositionIdentifier')
            self.OppositionIdentifier = value_
            self.OppositionIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'OppositionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OppositionDate = dval_
            self.OppositionDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'OppositionReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OppositionReference')
            value_ = self.gds_validate_string(value_, node, 'OppositionReference')
            self.OppositionReference = value_
            self.OppositionReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'OppositionLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OppositionLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'OppositionLanguageCode')
            self.OppositionLanguageCode = value_
            self.OppositionLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.OppositionLanguageCode)
        elif nodeName_ == 'ProceedingLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProceedingLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'ProceedingLanguageCode')
            self.ProceedingLanguageCode = value_
            self.ProceedingLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.ProceedingLanguageCode)
        elif nodeName_ == 'EarlierRightDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EarlierRightDate = dval_
            self.EarlierRightDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EarlierRightKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EarlierRightKind')
            value_ = self.gds_validate_string(value_, node, 'EarlierRightKind')
            self.EarlierRightKind = value_
            self.EarlierRightKind_nsprefix_ = child_.prefix
            # validate type EarlierRightKindType
            self.validate_EarlierRightKindType(self.EarlierRightKind)
        elif nodeName_ == 'OppositionBasisCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OppositionBasisCode')
            value_ = self.gds_validate_string(value_, node, 'OppositionBasisCode')
            self.OppositionBasisCode = value_
            self.OppositionBasisCode_nsprefix_ = child_.prefix
            # validate type OppositionBasisCodeType
            self.validate_OppositionBasisCodeType(self.OppositionBasisCode)
        elif nodeName_ == 'OppositionGroundText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OppositionGroundText = obj_
            obj_.original_tagname_ = 'OppositionGroundText'
        elif nodeName_ == 'OppositionExtentText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OppositionExtentText = obj_
            obj_.original_tagname_ = 'OppositionExtentText'
        elif nodeName_ == 'OppositionCurrentStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OppositionCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'OppositionCurrentStatusCode')
            self.OppositionCurrentStatusCode = value_
            self.OppositionCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type OppositionCurrentStatusCodeType
            self.validate_OppositionCurrentStatusCodeType(self.OppositionCurrentStatusCode)
        elif nodeName_ == 'OppositionCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OppositionCurrentStatusDate = dval_
            self.OppositionCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EarlierMarkDetails':
            obj_ = EarlierMarkDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EarlierMarkDetails = obj_
            obj_.original_tagname_ = 'EarlierMarkDetails'
        elif nodeName_ == 'OpponentDetails':
            obj_ = OpponentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OpponentDetails = obj_
            obj_.original_tagname_ = 'OpponentDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType7.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'OppositionEventDetails':
            obj_ = OppositionEventDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OppositionEventDetails = obj_
            obj_.original_tagname_ = 'OppositionEventDetails'
        elif nodeName_ == 'OppositionDocumentDetails':
            obj_ = OppositionDocumentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OppositionDocumentDetails = obj_
            obj_.original_tagname_ = 'OppositionDocumentDetails'
        else:
            content_ = self.gds_build_any(child_, 'OppositionType')
            self.add_anytypeobjs_(content_)
# end class OppositionType


class PaymentFeeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FeeIdentifier=None, FeeReference=None, FeeAmount=None, FeeUnitQuantity=None, FeeUnitAmount=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FeeIdentifier = FeeIdentifier
        self.FeeIdentifier_nsprefix_ = None
        self.FeeReference = FeeReference
        self.FeeReference_nsprefix_ = None
        self.FeeAmount = FeeAmount
        self.FeeAmount_nsprefix_ = None
        self.FeeUnitQuantity = FeeUnitQuantity
        self.FeeUnitQuantity_nsprefix_ = None
        self.FeeUnitAmount = FeeUnitAmount
        self.FeeUnitAmount_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentFeeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentFeeType.subclass:
            return PaymentFeeType.subclass(*args_, **kwargs_)
        else:
            return PaymentFeeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FeeIdentifier(self):
        return self.FeeIdentifier
    def set_FeeIdentifier(self, FeeIdentifier):
        self.FeeIdentifier = FeeIdentifier
    def get_FeeReference(self):
        return self.FeeReference
    def set_FeeReference(self, FeeReference):
        self.FeeReference = FeeReference
    def get_FeeAmount(self):
        return self.FeeAmount
    def set_FeeAmount(self, FeeAmount):
        self.FeeAmount = FeeAmount
    def get_FeeUnitQuantity(self):
        return self.FeeUnitQuantity
    def set_FeeUnitQuantity(self, FeeUnitQuantity):
        self.FeeUnitQuantity = FeeUnitQuantity
    def get_FeeUnitAmount(self):
        return self.FeeUnitAmount
    def set_FeeUnitAmount(self, FeeUnitAmount):
        self.FeeUnitAmount = FeeUnitAmount
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.FeeIdentifier is not None or
            self.FeeReference is not None or
            self.FeeAmount is not None or
            self.FeeUnitQuantity is not None or
            self.FeeUnitAmount is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentFeeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentFeeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentFeeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentFeeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentFeeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentFeeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentFeeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FeeIdentifier is not None:
            namespaceprefix_ = self.FeeIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeeIdentifier>%s</%sFeeIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FeeIdentifier), input_name='FeeIdentifier')), namespaceprefix_ , eol_))
        if self.FeeReference is not None:
            namespaceprefix_ = self.FeeReference_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeeReference>%s</%sFeeReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FeeReference), input_name='FeeReference')), namespaceprefix_ , eol_))
        if self.FeeAmount is not None:
            namespaceprefix_ = self.FeeAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeAmount_nsprefix_) else ''
            self.FeeAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FeeAmount', pretty_print=pretty_print)
        if self.FeeUnitQuantity is not None:
            namespaceprefix_ = self.FeeUnitQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeUnitQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeeUnitQuantity>%s</%sFeeUnitQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.FeeUnitQuantity, input_name='FeeUnitQuantity'), namespaceprefix_ , eol_))
        if self.FeeUnitAmount is not None:
            namespaceprefix_ = self.FeeUnitAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeUnitAmount_nsprefix_) else ''
            self.FeeUnitAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FeeUnitAmount', pretty_print=pretty_print)
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FeeIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FeeIdentifier')
            value_ = self.gds_validate_string(value_, node, 'FeeIdentifier')
            self.FeeIdentifier = value_
            self.FeeIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'FeeReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FeeReference')
            value_ = self.gds_validate_string(value_, node, 'FeeReference')
            self.FeeReference = value_
            self.FeeReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'FeeAmount':
            obj_ = AmountType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FeeAmount = obj_
            obj_.original_tagname_ = 'FeeAmount'
        elif nodeName_ == 'FeeUnitQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'FeeUnitQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'FeeUnitQuantity')
            self.FeeUnitQuantity = fval_
            self.FeeUnitQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'FeeUnitAmount':
            obj_ = AmountType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FeeUnitAmount = obj_
            obj_.original_tagname_ = 'FeeUnitAmount'
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'PaymentFeeType')
            self.add_anytypeobjs_(content_)
# end class PaymentFeeType


class PaymentMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Account=None, CardAccount=None, Cheque=None, BankTransfer=None, OtherPaymentMethod=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Account = Account
        self.Account_nsprefix_ = None
        self.CardAccount = CardAccount
        self.CardAccount_nsprefix_ = None
        self.Cheque = Cheque
        self.Cheque_nsprefix_ = None
        self.BankTransfer = BankTransfer
        self.BankTransfer_nsprefix_ = None
        self.OtherPaymentMethod = OtherPaymentMethod
        self.OtherPaymentMethod_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentMethodType.subclass:
            return PaymentMethodType.subclass(*args_, **kwargs_)
        else:
            return PaymentMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Account(self):
        return self.Account
    def set_Account(self, Account):
        self.Account = Account
    def get_CardAccount(self):
        return self.CardAccount
    def set_CardAccount(self, CardAccount):
        self.CardAccount = CardAccount
    def get_Cheque(self):
        return self.Cheque
    def set_Cheque(self, Cheque):
        self.Cheque = Cheque
    def get_BankTransfer(self):
        return self.BankTransfer
    def set_BankTransfer(self, BankTransfer):
        self.BankTransfer = BankTransfer
    def get_OtherPaymentMethod(self):
        return self.OtherPaymentMethod
    def set_OtherPaymentMethod(self, OtherPaymentMethod):
        self.OtherPaymentMethod = OtherPaymentMethod
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.Account is not None or
            self.CardAccount is not None or
            self.Cheque is not None or
            self.BankTransfer is not None or
            self.OtherPaymentMethod is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentMethodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Account is not None:
            namespaceprefix_ = self.Account_nsprefix_ + ':' if (UseCapturedNS_ and self.Account_nsprefix_) else ''
            self.Account.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Account', pretty_print=pretty_print)
        if self.CardAccount is not None:
            namespaceprefix_ = self.CardAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.CardAccount_nsprefix_) else ''
            self.CardAccount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CardAccount', pretty_print=pretty_print)
        if self.Cheque is not None:
            namespaceprefix_ = self.Cheque_nsprefix_ + ':' if (UseCapturedNS_ and self.Cheque_nsprefix_) else ''
            self.Cheque.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Cheque', pretty_print=pretty_print)
        if self.BankTransfer is not None:
            namespaceprefix_ = self.BankTransfer_nsprefix_ + ':' if (UseCapturedNS_ and self.BankTransfer_nsprefix_) else ''
            self.BankTransfer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BankTransfer', pretty_print=pretty_print)
        if self.OtherPaymentMethod is not None:
            namespaceprefix_ = self.OtherPaymentMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherPaymentMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherPaymentMethod>%s</%sOtherPaymentMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OtherPaymentMethod), input_name='OtherPaymentMethod')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Account':
            obj_ = AccountType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Account = obj_
            obj_.original_tagname_ = 'Account'
        elif nodeName_ == 'CardAccount':
            obj_ = CardAccountType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CardAccount = obj_
            obj_.original_tagname_ = 'CardAccount'
        elif nodeName_ == 'Cheque':
            obj_ = ChequeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Cheque = obj_
            obj_.original_tagname_ = 'Cheque'
        elif nodeName_ == 'BankTransfer':
            obj_ = BankTransferType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankTransfer = obj_
            obj_.original_tagname_ = 'BankTransfer'
        elif nodeName_ == 'OtherPaymentMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OtherPaymentMethod')
            value_ = self.gds_validate_string(value_, node, 'OtherPaymentMethod')
            self.OtherPaymentMethod = value_
            self.OtherPaymentMethod_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'PaymentMethodType')
            self.add_anytypeobjs_(content_)
# end class PaymentMethodType


class PaymentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentIdentifier=None, PaymentReference=None, PayerName=None, PaymentStatus=None, Comment=None, PaymentDate=None, PaymentMethod=None, PaymentFeeDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PaymentIdentifier = PaymentIdentifier
        self.PaymentIdentifier_nsprefix_ = None
        self.PaymentReference = PaymentReference
        self.PaymentReference_nsprefix_ = None
        self.PayerName = PayerName
        self.PayerName_nsprefix_ = None
        self.PaymentStatus = PaymentStatus
        self.validate_PaymentStatusCodeType(self.PaymentStatus)
        self.PaymentStatus_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if isinstance(PaymentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PaymentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PaymentDate
        self.PaymentDate = initvalue_
        self.PaymentDate_nsprefix_ = None
        self.PaymentMethod = PaymentMethod
        self.PaymentMethod_nsprefix_ = None
        self.PaymentFeeDetails = PaymentFeeDetails
        self.PaymentFeeDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentType.subclass:
            return PaymentType.subclass(*args_, **kwargs_)
        else:
            return PaymentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentIdentifier(self):
        return self.PaymentIdentifier
    def set_PaymentIdentifier(self, PaymentIdentifier):
        self.PaymentIdentifier = PaymentIdentifier
    def get_PaymentReference(self):
        return self.PaymentReference
    def set_PaymentReference(self, PaymentReference):
        self.PaymentReference = PaymentReference
    def get_PayerName(self):
        return self.PayerName
    def set_PayerName(self, PayerName):
        self.PayerName = PayerName
    def get_PaymentStatus(self):
        return self.PaymentStatus
    def set_PaymentStatus(self, PaymentStatus):
        self.PaymentStatus = PaymentStatus
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_PaymentDate(self):
        return self.PaymentDate
    def set_PaymentDate(self, PaymentDate):
        self.PaymentDate = PaymentDate
    def get_PaymentMethod(self):
        return self.PaymentMethod
    def set_PaymentMethod(self, PaymentMethod):
        self.PaymentMethod = PaymentMethod
    def get_PaymentFeeDetails(self):
        return self.PaymentFeeDetails
    def set_PaymentFeeDetails(self, PaymentFeeDetails):
        self.PaymentFeeDetails = PaymentFeeDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_PaymentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.PaymentIdentifier is not None or
            self.PaymentReference is not None or
            self.PayerName is not None or
            self.PaymentStatus is not None or
            self.Comment is not None or
            self.PaymentDate is not None or
            self.PaymentMethod is not None or
            self.PaymentFeeDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentIdentifier is not None:
            namespaceprefix_ = self.PaymentIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentIdentifier>%s</%sPaymentIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentIdentifier), input_name='PaymentIdentifier')), namespaceprefix_ , eol_))
        if self.PaymentReference is not None:
            namespaceprefix_ = self.PaymentReference_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentReference>%s</%sPaymentReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentReference), input_name='PaymentReference')), namespaceprefix_ , eol_))
        if self.PayerName is not None:
            namespaceprefix_ = self.PayerName_nsprefix_ + ':' if (UseCapturedNS_ and self.PayerName_nsprefix_) else ''
            self.PayerName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PayerName', pretty_print=pretty_print)
        if self.PaymentStatus is not None:
            namespaceprefix_ = self.PaymentStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentStatus>%s</%sPaymentStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentStatus), input_name='PaymentStatus')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.PaymentDate is not None:
            namespaceprefix_ = self.PaymentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentDate>%s</%sPaymentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PaymentDate, input_name='PaymentDate'), namespaceprefix_ , eol_))
        if self.PaymentMethod is not None:
            namespaceprefix_ = self.PaymentMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentMethod_nsprefix_) else ''
            self.PaymentMethod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentMethod', pretty_print=pretty_print)
        if self.PaymentFeeDetails is not None:
            namespaceprefix_ = self.PaymentFeeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentFeeDetails_nsprefix_) else ''
            self.PaymentFeeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentFeeDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentIdentifier')
            value_ = self.gds_validate_string(value_, node, 'PaymentIdentifier')
            self.PaymentIdentifier = value_
            self.PaymentIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'PaymentReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentReference')
            value_ = self.gds_validate_string(value_, node, 'PaymentReference')
            self.PaymentReference = value_
            self.PaymentReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'PayerName':
            obj_ = NameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PayerName = obj_
            obj_.original_tagname_ = 'PayerName'
        elif nodeName_ == 'PaymentStatus':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentStatus')
            value_ = self.gds_validate_string(value_, node, 'PaymentStatus')
            self.PaymentStatus = value_
            self.PaymentStatus_nsprefix_ = child_.prefix
            # validate type PaymentStatusCodeType
            self.validate_PaymentStatusCodeType(self.PaymentStatus)
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'PaymentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PaymentDate = dval_
            self.PaymentDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PaymentMethod':
            obj_ = PaymentMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentMethod = obj_
            obj_.original_tagname_ = 'PaymentMethod'
        elif nodeName_ == 'PaymentFeeDetails':
            obj_ = PaymentFeeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentFeeDetails = obj_
            obj_.original_tagname_ = 'PaymentFeeDetails'
        else:
            content_ = self.gds_build_any(child_, 'PaymentType')
            self.add_anytypeobjs_(content_)
# end class PaymentType


class PreviousRegistrationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegistrationOfficeCode=None, PreviousRegistrationNumber=None, PreviousRegistrationDate=None, PreviousRegistrationBasis=None, PreviousRegistrationCancellationDate=None, PreviousRegistrationPriorityDate=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegistrationOfficeCode = RegistrationOfficeCode
        self.validate_WIPOST3CodeType(self.RegistrationOfficeCode)
        self.RegistrationOfficeCode_nsprefix_ = None
        self.PreviousRegistrationNumber = PreviousRegistrationNumber
        self.PreviousRegistrationNumber_nsprefix_ = None
        if isinstance(PreviousRegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PreviousRegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PreviousRegistrationDate
        self.PreviousRegistrationDate = initvalue_
        self.PreviousRegistrationDate_nsprefix_ = None
        self.PreviousRegistrationBasis = PreviousRegistrationBasis
        self.validate_PreviousRegistrationBasisType(self.PreviousRegistrationBasis)
        self.PreviousRegistrationBasis_nsprefix_ = None
        if isinstance(PreviousRegistrationCancellationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PreviousRegistrationCancellationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PreviousRegistrationCancellationDate
        self.PreviousRegistrationCancellationDate = initvalue_
        self.PreviousRegistrationCancellationDate_nsprefix_ = None
        if isinstance(PreviousRegistrationPriorityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PreviousRegistrationPriorityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PreviousRegistrationPriorityDate
        self.PreviousRegistrationPriorityDate = initvalue_
        self.PreviousRegistrationPriorityDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreviousRegistrationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreviousRegistrationType.subclass:
            return PreviousRegistrationType.subclass(*args_, **kwargs_)
        else:
            return PreviousRegistrationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegistrationOfficeCode(self):
        return self.RegistrationOfficeCode
    def set_RegistrationOfficeCode(self, RegistrationOfficeCode):
        self.RegistrationOfficeCode = RegistrationOfficeCode
    def get_PreviousRegistrationNumber(self):
        return self.PreviousRegistrationNumber
    def set_PreviousRegistrationNumber(self, PreviousRegistrationNumber):
        self.PreviousRegistrationNumber = PreviousRegistrationNumber
    def get_PreviousRegistrationDate(self):
        return self.PreviousRegistrationDate
    def set_PreviousRegistrationDate(self, PreviousRegistrationDate):
        self.PreviousRegistrationDate = PreviousRegistrationDate
    def get_PreviousRegistrationBasis(self):
        return self.PreviousRegistrationBasis
    def set_PreviousRegistrationBasis(self, PreviousRegistrationBasis):
        self.PreviousRegistrationBasis = PreviousRegistrationBasis
    def get_PreviousRegistrationCancellationDate(self):
        return self.PreviousRegistrationCancellationDate
    def set_PreviousRegistrationCancellationDate(self, PreviousRegistrationCancellationDate):
        self.PreviousRegistrationCancellationDate = PreviousRegistrationCancellationDate
    def get_PreviousRegistrationPriorityDate(self):
        return self.PreviousRegistrationPriorityDate
    def set_PreviousRegistrationPriorityDate(self, PreviousRegistrationPriorityDate):
        self.PreviousRegistrationPriorityDate = PreviousRegistrationPriorityDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_WIPOST3CodeType(self, value):
        result = True
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PreviousRegistrationBasisType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RegistrationOfficeCode is not None or
            self.PreviousRegistrationNumber is not None or
            self.PreviousRegistrationDate is not None or
            self.PreviousRegistrationBasis is not None or
            self.PreviousRegistrationCancellationDate is not None or
            self.PreviousRegistrationPriorityDate is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PreviousRegistrationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreviousRegistrationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PreviousRegistrationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreviousRegistrationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PreviousRegistrationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreviousRegistrationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PreviousRegistrationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegistrationOfficeCode is not None:
            namespaceprefix_ = self.RegistrationOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationOfficeCode>%s</%sRegistrationOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationOfficeCode), input_name='RegistrationOfficeCode')), namespaceprefix_ , eol_))
        if self.PreviousRegistrationNumber is not None:
            namespaceprefix_ = self.PreviousRegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousRegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreviousRegistrationNumber>%s</%sPreviousRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreviousRegistrationNumber), input_name='PreviousRegistrationNumber')), namespaceprefix_ , eol_))
        if self.PreviousRegistrationDate is not None:
            namespaceprefix_ = self.PreviousRegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousRegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreviousRegistrationDate>%s</%sPreviousRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PreviousRegistrationDate, input_name='PreviousRegistrationDate'), namespaceprefix_ , eol_))
        if self.PreviousRegistrationBasis is not None:
            namespaceprefix_ = self.PreviousRegistrationBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousRegistrationBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreviousRegistrationBasis>%s</%sPreviousRegistrationBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreviousRegistrationBasis), input_name='PreviousRegistrationBasis')), namespaceprefix_ , eol_))
        if self.PreviousRegistrationCancellationDate is not None:
            namespaceprefix_ = self.PreviousRegistrationCancellationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousRegistrationCancellationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreviousRegistrationCancellationDate>%s</%sPreviousRegistrationCancellationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PreviousRegistrationCancellationDate, input_name='PreviousRegistrationCancellationDate'), namespaceprefix_ , eol_))
        if self.PreviousRegistrationPriorityDate is not None:
            namespaceprefix_ = self.PreviousRegistrationPriorityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousRegistrationPriorityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreviousRegistrationPriorityDate>%s</%sPreviousRegistrationPriorityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PreviousRegistrationPriorityDate, input_name='PreviousRegistrationPriorityDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegistrationOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RegistrationOfficeCode')
            self.RegistrationOfficeCode = value_
            self.RegistrationOfficeCode_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.RegistrationOfficeCode)
        elif nodeName_ == 'PreviousRegistrationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreviousRegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'PreviousRegistrationNumber')
            self.PreviousRegistrationNumber = value_
            self.PreviousRegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PreviousRegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PreviousRegistrationDate = dval_
            self.PreviousRegistrationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PreviousRegistrationBasis':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PreviousRegistrationBasis')
            value_ = self.gds_validate_string(value_, node, 'PreviousRegistrationBasis')
            self.PreviousRegistrationBasis = value_
            self.PreviousRegistrationBasis_nsprefix_ = child_.prefix
            # validate type PreviousRegistrationBasisType
            self.validate_PreviousRegistrationBasisType(self.PreviousRegistrationBasis)
        elif nodeName_ == 'PreviousRegistrationCancellationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PreviousRegistrationCancellationDate = dval_
            self.PreviousRegistrationCancellationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PreviousRegistrationPriorityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PreviousRegistrationPriorityDate = dval_
            self.PreviousRegistrationPriorityDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'PreviousRegistrationType')
            self.add_anytypeobjs_(content_)
# end class PreviousRegistrationType


class PriorityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PriorityCountryCode=None, PriorityNumber=None, PriorityDate=None, PriorityHolderName=None, PriorityPartialIndicator=None, PriorityPartialGoodsServices=None, PriorityStatusCode=None, PriorityStatusDate=None, Comment=None, PriorityDocument=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PriorityCountryCode = PriorityCountryCode
        self.validate_ExtendedWIPOST3CodeType(self.PriorityCountryCode)
        self.PriorityCountryCode_nsprefix_ = None
        self.PriorityNumber = PriorityNumber
        self.PriorityNumber_nsprefix_ = None
        if isinstance(PriorityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PriorityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PriorityDate
        self.PriorityDate = initvalue_
        self.PriorityDate_nsprefix_ = None
        self.PriorityHolderName = PriorityHolderName
        self.PriorityHolderName_nsprefix_ = None
        self.PriorityPartialIndicator = PriorityPartialIndicator
        self.PriorityPartialIndicator_nsprefix_ = None
        self.PriorityPartialGoodsServices = PriorityPartialGoodsServices
        self.PriorityPartialGoodsServices_nsprefix_ = None
        self.PriorityStatusCode = PriorityStatusCode
        self.validate_PriorityStatusCodeType(self.PriorityStatusCode)
        self.PriorityStatusCode_nsprefix_ = None
        if isinstance(PriorityStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PriorityStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PriorityStatusDate
        self.PriorityStatusDate = initvalue_
        self.PriorityStatusDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if PriorityDocument is None:
            self.PriorityDocument = []
        else:
            self.PriorityDocument = PriorityDocument
        self.PriorityDocument_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriorityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriorityType.subclass:
            return PriorityType.subclass(*args_, **kwargs_)
        else:
            return PriorityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PriorityCountryCode(self):
        return self.PriorityCountryCode
    def set_PriorityCountryCode(self, PriorityCountryCode):
        self.PriorityCountryCode = PriorityCountryCode
    def get_PriorityNumber(self):
        return self.PriorityNumber
    def set_PriorityNumber(self, PriorityNumber):
        self.PriorityNumber = PriorityNumber
    def get_PriorityDate(self):
        return self.PriorityDate
    def set_PriorityDate(self, PriorityDate):
        self.PriorityDate = PriorityDate
    def get_PriorityHolderName(self):
        return self.PriorityHolderName
    def set_PriorityHolderName(self, PriorityHolderName):
        self.PriorityHolderName = PriorityHolderName
    def get_PriorityPartialIndicator(self):
        return self.PriorityPartialIndicator
    def set_PriorityPartialIndicator(self, PriorityPartialIndicator):
        self.PriorityPartialIndicator = PriorityPartialIndicator
    def get_PriorityPartialGoodsServices(self):
        return self.PriorityPartialGoodsServices
    def set_PriorityPartialGoodsServices(self, PriorityPartialGoodsServices):
        self.PriorityPartialGoodsServices = PriorityPartialGoodsServices
    def get_PriorityStatusCode(self):
        return self.PriorityStatusCode
    def set_PriorityStatusCode(self, PriorityStatusCode):
        self.PriorityStatusCode = PriorityStatusCode
    def get_PriorityStatusDate(self):
        return self.PriorityStatusDate
    def set_PriorityStatusDate(self, PriorityStatusDate):
        self.PriorityStatusDate = PriorityStatusDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_PriorityDocument(self):
        return self.PriorityDocument
    def set_PriorityDocument(self, PriorityDocument):
        self.PriorityDocument = PriorityDocument
    def add_PriorityDocument(self, value):
        self.PriorityDocument.append(value)
    def insert_PriorityDocument_at(self, index, value):
        self.PriorityDocument.insert(index, value)
    def replace_PriorityDocument_at(self, index, value):
        self.PriorityDocument[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_PriorityStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.PriorityCountryCode is not None or
            self.PriorityNumber is not None or
            self.PriorityDate is not None or
            self.PriorityHolderName is not None or
            self.PriorityPartialIndicator is not None or
            self.PriorityPartialGoodsServices is not None or
            self.PriorityStatusCode is not None or
            self.PriorityStatusDate is not None or
            self.Comment is not None or
            self.PriorityDocument or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PriorityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriorityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PriorityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriorityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriorityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriorityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PriorityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PriorityCountryCode is not None:
            namespaceprefix_ = self.PriorityCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriorityCountryCode>%s</%sPriorityCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriorityCountryCode), input_name='PriorityCountryCode')), namespaceprefix_ , eol_))
        if self.PriorityNumber is not None:
            namespaceprefix_ = self.PriorityNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriorityNumber>%s</%sPriorityNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriorityNumber), input_name='PriorityNumber')), namespaceprefix_ , eol_))
        if self.PriorityDate is not None:
            namespaceprefix_ = self.PriorityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriorityDate>%s</%sPriorityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PriorityDate, input_name='PriorityDate'), namespaceprefix_ , eol_))
        if self.PriorityHolderName is not None:
            namespaceprefix_ = self.PriorityHolderName_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityHolderName_nsprefix_) else ''
            self.PriorityHolderName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityHolderName', pretty_print=pretty_print)
        if self.PriorityPartialIndicator is not None:
            namespaceprefix_ = self.PriorityPartialIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityPartialIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriorityPartialIndicator>%s</%sPriorityPartialIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.PriorityPartialIndicator, input_name='PriorityPartialIndicator'), namespaceprefix_ , eol_))
        if self.PriorityPartialGoodsServices is not None:
            namespaceprefix_ = self.PriorityPartialGoodsServices_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityPartialGoodsServices_nsprefix_) else ''
            self.PriorityPartialGoodsServices.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityPartialGoodsServices', pretty_print=pretty_print)
        if self.PriorityStatusCode is not None:
            namespaceprefix_ = self.PriorityStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriorityStatusCode>%s</%sPriorityStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PriorityStatusCode), input_name='PriorityStatusCode')), namespaceprefix_ , eol_))
        if self.PriorityStatusDate is not None:
            namespaceprefix_ = self.PriorityStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPriorityStatusDate>%s</%sPriorityStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PriorityStatusDate, input_name='PriorityStatusDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        for PriorityDocument_ in self.PriorityDocument:
            namespaceprefix_ = self.PriorityDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityDocument_nsprefix_) else ''
            PriorityDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityDocument', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PriorityCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PriorityCountryCode')
            value_ = self.gds_validate_string(value_, node, 'PriorityCountryCode')
            self.PriorityCountryCode = value_
            self.PriorityCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.PriorityCountryCode)
        elif nodeName_ == 'PriorityNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PriorityNumber')
            value_ = self.gds_validate_string(value_, node, 'PriorityNumber')
            self.PriorityNumber = value_
            self.PriorityNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PriorityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PriorityDate = dval_
            self.PriorityDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PriorityHolderName':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityHolderName = obj_
            obj_.original_tagname_ = 'PriorityHolderName'
        elif nodeName_ == 'PriorityPartialIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'PriorityPartialIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'PriorityPartialIndicator')
            self.PriorityPartialIndicator = ival_
            self.PriorityPartialIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PriorityPartialGoodsServices':
            obj_ = GoodsServicesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityPartialGoodsServices = obj_
            obj_.original_tagname_ = 'PriorityPartialGoodsServices'
        elif nodeName_ == 'PriorityStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PriorityStatusCode')
            value_ = self.gds_validate_string(value_, node, 'PriorityStatusCode')
            self.PriorityStatusCode = value_
            self.PriorityStatusCode_nsprefix_ = child_.prefix
            # validate type PriorityStatusCodeType
            self.validate_PriorityStatusCodeType(self.PriorityStatusCode)
        elif nodeName_ == 'PriorityStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PriorityStatusDate = dval_
            self.PriorityStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'PriorityDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityDocument.append(obj_)
            obj_.original_tagname_ = 'PriorityDocument'
        else:
            content_ = self.gds_build_any(child_, 'PriorityType')
            self.add_anytypeobjs_(content_)
# end class PriorityType


class PublicationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PublicationIdentifier=None, PublicationSection=None, PublicationSubsection=None, PublicationDate=None, PublicationPage=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PublicationIdentifier = PublicationIdentifier
        self.PublicationIdentifier_nsprefix_ = None
        self.PublicationSection = PublicationSection
        self.validate_PublicationSectionType(self.PublicationSection)
        self.PublicationSection_nsprefix_ = None
        self.PublicationSubsection = PublicationSubsection
        self.validate_PublicationSubsectionType(self.PublicationSubsection)
        self.PublicationSubsection_nsprefix_ = None
        if isinstance(PublicationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PublicationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PublicationDate
        self.PublicationDate = initvalue_
        self.PublicationDate_nsprefix_ = None
        self.PublicationPage = PublicationPage
        self.PublicationPage_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PublicationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PublicationType.subclass:
            return PublicationType.subclass(*args_, **kwargs_)
        else:
            return PublicationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PublicationIdentifier(self):
        return self.PublicationIdentifier
    def set_PublicationIdentifier(self, PublicationIdentifier):
        self.PublicationIdentifier = PublicationIdentifier
    def get_PublicationSection(self):
        return self.PublicationSection
    def set_PublicationSection(self, PublicationSection):
        self.PublicationSection = PublicationSection
    def get_PublicationSubsection(self):
        return self.PublicationSubsection
    def set_PublicationSubsection(self, PublicationSubsection):
        self.PublicationSubsection = PublicationSubsection
    def get_PublicationDate(self):
        return self.PublicationDate
    def set_PublicationDate(self, PublicationDate):
        self.PublicationDate = PublicationDate
    def get_PublicationPage(self):
        return self.PublicationPage
    def set_PublicationPage(self, PublicationPage):
        self.PublicationPage = PublicationPage
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_PublicationSectionType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_PublicationSubsectionType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.PublicationIdentifier is not None or
            self.PublicationSection is not None or
            self.PublicationSubsection is not None or
            self.PublicationDate is not None or
            self.PublicationPage is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PublicationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PublicationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PublicationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PublicationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PublicationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PublicationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PublicationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PublicationIdentifier is not None:
            namespaceprefix_ = self.PublicationIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicationIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublicationIdentifier>%s</%sPublicationIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublicationIdentifier), input_name='PublicationIdentifier')), namespaceprefix_ , eol_))
        if self.PublicationSection is not None:
            namespaceprefix_ = self.PublicationSection_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicationSection_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublicationSection>%s</%sPublicationSection>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublicationSection), input_name='PublicationSection')), namespaceprefix_ , eol_))
        if self.PublicationSubsection is not None:
            namespaceprefix_ = self.PublicationSubsection_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicationSubsection_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublicationSubsection>%s</%sPublicationSubsection>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublicationSubsection), input_name='PublicationSubsection')), namespaceprefix_ , eol_))
        if self.PublicationDate is not None:
            namespaceprefix_ = self.PublicationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublicationDate>%s</%sPublicationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PublicationDate, input_name='PublicationDate'), namespaceprefix_ , eol_))
        if self.PublicationPage is not None:
            namespaceprefix_ = self.PublicationPage_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicationPage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublicationPage>%s</%sPublicationPage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublicationPage), input_name='PublicationPage')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PublicationIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PublicationIdentifier')
            value_ = self.gds_validate_string(value_, node, 'PublicationIdentifier')
            self.PublicationIdentifier = value_
            self.PublicationIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'PublicationSection':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PublicationSection')
            value_ = self.gds_validate_string(value_, node, 'PublicationSection')
            self.PublicationSection = value_
            self.PublicationSection_nsprefix_ = child_.prefix
            # validate type PublicationSectionType
            self.validate_PublicationSectionType(self.PublicationSection)
        elif nodeName_ == 'PublicationSubsection':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PublicationSubsection')
            value_ = self.gds_validate_string(value_, node, 'PublicationSubsection')
            self.PublicationSubsection = value_
            self.PublicationSubsection_nsprefix_ = child_.prefix
            # validate type PublicationSubsectionType
            self.validate_PublicationSubsectionType(self.PublicationSubsection)
        elif nodeName_ == 'PublicationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PublicationDate = dval_
            self.PublicationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PublicationPage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PublicationPage')
            value_ = self.gds_validate_string(value_, node, 'PublicationPage')
            self.PublicationPage = value_
            self.PublicationPage_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'PublicationType')
            self.add_anytypeobjs_(content_)
# end class PublicationType


class RecordChangeNameAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordIdentifier=None, RecordFilingDate=None, RecordNotificationDate=None, RecordEffectiveDate=None, RecordChangeNameAddressKind=None, RecordReference=None, RecordLanguageCode=None, TradeMarkKeyDetails=None, RecordPublicationDetails=None, ClaimantDetails=None, RepresentativeDetails=None, RecordEventDetails=None, RecordDocumentDetails=None, RecordCurrentStatusCode=None, RecordCurrentStatusDate=None, CorrespondenceAddress=None, HolderDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecordIdentifier = RecordIdentifier
        self.RecordIdentifier_nsprefix_ = None
        if isinstance(RecordFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordFilingDate
        self.RecordFilingDate = initvalue_
        self.RecordFilingDate_nsprefix_ = None
        if isinstance(RecordNotificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordNotificationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordNotificationDate
        self.RecordNotificationDate = initvalue_
        self.RecordNotificationDate_nsprefix_ = None
        if isinstance(RecordEffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEffectiveDate
        self.RecordEffectiveDate = initvalue_
        self.RecordEffectiveDate_nsprefix_ = None
        self.RecordChangeNameAddressKind = RecordChangeNameAddressKind
        self.validate_RecordChangeNameAddressKindType(self.RecordChangeNameAddressKind)
        self.RecordChangeNameAddressKind_nsprefix_ = None
        self.RecordReference = RecordReference
        self.RecordReference_nsprefix_ = None
        self.RecordLanguageCode = RecordLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        self.RecordLanguageCode_nsprefix_ = None
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
        self.TradeMarkKeyDetails_nsprefix_ = None
        self.RecordPublicationDetails = RecordPublicationDetails
        self.RecordPublicationDetails_nsprefix_ = None
        self.ClaimantDetails = ClaimantDetails
        self.ClaimantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.RecordEventDetails = RecordEventDetails
        self.RecordEventDetails_nsprefix_ = None
        self.RecordDocumentDetails = RecordDocumentDetails
        self.RecordDocumentDetails_nsprefix_ = None
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
        self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        self.RecordCurrentStatusCode_nsprefix_ = None
        if isinstance(RecordCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordCurrentStatusDate
        self.RecordCurrentStatusDate = initvalue_
        self.RecordCurrentStatusDate_nsprefix_ = None
        self.CorrespondenceAddress = CorrespondenceAddress
        self.CorrespondenceAddress_nsprefix_ = None
        self.HolderDetails = HolderDetails
        self.HolderDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordChangeNameAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordChangeNameAddressType.subclass:
            return RecordChangeNameAddressType.subclass(*args_, **kwargs_)
        else:
            return RecordChangeNameAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordIdentifier(self):
        return self.RecordIdentifier
    def set_RecordIdentifier(self, RecordIdentifier):
        self.RecordIdentifier = RecordIdentifier
    def get_RecordFilingDate(self):
        return self.RecordFilingDate
    def set_RecordFilingDate(self, RecordFilingDate):
        self.RecordFilingDate = RecordFilingDate
    def get_RecordNotificationDate(self):
        return self.RecordNotificationDate
    def set_RecordNotificationDate(self, RecordNotificationDate):
        self.RecordNotificationDate = RecordNotificationDate
    def get_RecordEffectiveDate(self):
        return self.RecordEffectiveDate
    def set_RecordEffectiveDate(self, RecordEffectiveDate):
        self.RecordEffectiveDate = RecordEffectiveDate
    def get_RecordChangeNameAddressKind(self):
        return self.RecordChangeNameAddressKind
    def set_RecordChangeNameAddressKind(self, RecordChangeNameAddressKind):
        self.RecordChangeNameAddressKind = RecordChangeNameAddressKind
    def get_RecordReference(self):
        return self.RecordReference
    def set_RecordReference(self, RecordReference):
        self.RecordReference = RecordReference
    def get_RecordLanguageCode(self):
        return self.RecordLanguageCode
    def set_RecordLanguageCode(self, RecordLanguageCode):
        self.RecordLanguageCode = RecordLanguageCode
    def get_TradeMarkKeyDetails(self):
        return self.TradeMarkKeyDetails
    def set_TradeMarkKeyDetails(self, TradeMarkKeyDetails):
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
    def get_RecordPublicationDetails(self):
        return self.RecordPublicationDetails
    def set_RecordPublicationDetails(self, RecordPublicationDetails):
        self.RecordPublicationDetails = RecordPublicationDetails
    def get_ClaimantDetails(self):
        return self.ClaimantDetails
    def set_ClaimantDetails(self, ClaimantDetails):
        self.ClaimantDetails = ClaimantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_RecordEventDetails(self):
        return self.RecordEventDetails
    def set_RecordEventDetails(self, RecordEventDetails):
        self.RecordEventDetails = RecordEventDetails
    def get_RecordDocumentDetails(self):
        return self.RecordDocumentDetails
    def set_RecordDocumentDetails(self, RecordDocumentDetails):
        self.RecordDocumentDetails = RecordDocumentDetails
    def get_RecordCurrentStatusCode(self):
        return self.RecordCurrentStatusCode
    def set_RecordCurrentStatusCode(self, RecordCurrentStatusCode):
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
    def get_RecordCurrentStatusDate(self):
        return self.RecordCurrentStatusDate
    def set_RecordCurrentStatusDate(self, RecordCurrentStatusDate):
        self.RecordCurrentStatusDate = RecordCurrentStatusDate
    def get_CorrespondenceAddress(self):
        return self.CorrespondenceAddress
    def set_CorrespondenceAddress(self, CorrespondenceAddress):
        self.CorrespondenceAddress = CorrespondenceAddress
    def get_HolderDetails(self):
        return self.HolderDetails
    def set_HolderDetails(self, HolderDetails):
        self.HolderDetails = HolderDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RecordChangeNameAddressKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedISOLanguageCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_RecordCurrentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordIdentifier is not None or
            self.RecordFilingDate is not None or
            self.RecordNotificationDate is not None or
            self.RecordEffectiveDate is not None or
            self.RecordChangeNameAddressKind is not None or
            self.RecordReference is not None or
            self.RecordLanguageCode is not None or
            self.TradeMarkKeyDetails is not None or
            self.RecordPublicationDetails is not None or
            self.ClaimantDetails is not None or
            self.RepresentativeDetails is not None or
            self.RecordEventDetails is not None or
            self.RecordDocumentDetails is not None or
            self.RecordCurrentStatusCode is not None or
            self.RecordCurrentStatusDate is not None or
            self.CorrespondenceAddress is not None or
            self.HolderDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordChangeNameAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordChangeNameAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordChangeNameAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordChangeNameAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordChangeNameAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordChangeNameAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordChangeNameAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordIdentifier is not None:
            namespaceprefix_ = self.RecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier>%s</%sRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier), input_name='RecordIdentifier')), namespaceprefix_ , eol_))
        if self.RecordFilingDate is not None:
            namespaceprefix_ = self.RecordFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordFilingDate>%s</%sRecordFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordFilingDate, input_name='RecordFilingDate'), namespaceprefix_ , eol_))
        if self.RecordNotificationDate is not None:
            namespaceprefix_ = self.RecordNotificationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNotificationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordNotificationDate>%s</%sRecordNotificationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordNotificationDate, input_name='RecordNotificationDate'), namespaceprefix_ , eol_))
        if self.RecordEffectiveDate is not None:
            namespaceprefix_ = self.RecordEffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEffectiveDate>%s</%sRecordEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEffectiveDate, input_name='RecordEffectiveDate'), namespaceprefix_ , eol_))
        if self.RecordChangeNameAddressKind is not None:
            namespaceprefix_ = self.RecordChangeNameAddressKind_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordChangeNameAddressKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordChangeNameAddressKind>%s</%sRecordChangeNameAddressKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordChangeNameAddressKind), input_name='RecordChangeNameAddressKind')), namespaceprefix_ , eol_))
        if self.RecordReference is not None:
            namespaceprefix_ = self.RecordReference_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordReference>%s</%sRecordReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordReference), input_name='RecordReference')), namespaceprefix_ , eol_))
        if self.RecordLanguageCode is not None:
            namespaceprefix_ = self.RecordLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordLanguageCode>%s</%sRecordLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordLanguageCode), input_name='RecordLanguageCode')), namespaceprefix_ , eol_))
        if self.TradeMarkKeyDetails is not None:
            namespaceprefix_ = self.TradeMarkKeyDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKeyDetails_nsprefix_) else ''
            self.TradeMarkKeyDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKeyDetails', pretty_print=pretty_print)
        if self.RecordPublicationDetails is not None:
            namespaceprefix_ = self.RecordPublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublicationDetails_nsprefix_) else ''
            self.RecordPublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublicationDetails', pretty_print=pretty_print)
        if self.ClaimantDetails is not None:
            namespaceprefix_ = self.ClaimantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantDetails_nsprefix_) else ''
            self.ClaimantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.RecordEventDetails is not None:
            namespaceprefix_ = self.RecordEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDetails_nsprefix_) else ''
            self.RecordEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEventDetails', pretty_print=pretty_print)
        if self.RecordDocumentDetails is not None:
            namespaceprefix_ = self.RecordDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocumentDetails_nsprefix_) else ''
            self.RecordDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocumentDetails', pretty_print=pretty_print)
        if self.RecordCurrentStatusCode is not None:
            namespaceprefix_ = self.RecordCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusCode>%s</%sRecordCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordCurrentStatusCode), input_name='RecordCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.RecordCurrentStatusDate is not None:
            namespaceprefix_ = self.RecordCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusDate>%s</%sRecordCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordCurrentStatusDate, input_name='RecordCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.CorrespondenceAddress is not None:
            namespaceprefix_ = self.CorrespondenceAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddress_nsprefix_) else ''
            self.CorrespondenceAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CorrespondenceAddress', pretty_print=pretty_print)
        if self.HolderDetails is not None:
            namespaceprefix_ = self.HolderDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.HolderDetails_nsprefix_) else ''
            self.HolderDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HolderDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier')
            self.RecordIdentifier = value_
            self.RecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordFilingDate = dval_
            self.RecordFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordNotificationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordNotificationDate = dval_
            self.RecordNotificationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEffectiveDate = dval_
            self.RecordEffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordChangeNameAddressKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordChangeNameAddressKind')
            value_ = self.gds_validate_string(value_, node, 'RecordChangeNameAddressKind')
            self.RecordChangeNameAddressKind = value_
            self.RecordChangeNameAddressKind_nsprefix_ = child_.prefix
            # validate type RecordChangeNameAddressKindType
            self.validate_RecordChangeNameAddressKindType(self.RecordChangeNameAddressKind)
        elif nodeName_ == 'RecordReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordReference')
            value_ = self.gds_validate_string(value_, node, 'RecordReference')
            self.RecordReference = value_
            self.RecordReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'RecordLanguageCode')
            self.RecordLanguageCode = value_
            self.RecordLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        elif nodeName_ == 'TradeMarkKeyDetails':
            obj_ = TradeMarkKeyDetailsType8.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKeyDetails = obj_
            obj_.original_tagname_ = 'TradeMarkKeyDetails'
        elif nodeName_ == 'RecordPublicationDetails':
            obj_ = RecordPublicationDetailsType9.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublicationDetails = obj_
            obj_.original_tagname_ = 'RecordPublicationDetails'
        elif nodeName_ == 'ClaimantDetails':
            obj_ = ClaimantDetailsType10.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantDetails = obj_
            obj_.original_tagname_ = 'ClaimantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType11.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'RecordEventDetails':
            obj_ = RecordEventDetailsType12.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEventDetails = obj_
            obj_.original_tagname_ = 'RecordEventDetails'
        elif nodeName_ == 'RecordDocumentDetails':
            obj_ = RecordDocumentDetailsType13.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocumentDetails = obj_
            obj_.original_tagname_ = 'RecordDocumentDetails'
        elif nodeName_ == 'RecordCurrentStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'RecordCurrentStatusCode')
            self.RecordCurrentStatusCode = value_
            self.RecordCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type RecordCurrentStatusCodeType
            self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        elif nodeName_ == 'RecordCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordCurrentStatusDate = dval_
            self.RecordCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CorrespondenceAddress':
            obj_ = CorrespondenceAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CorrespondenceAddress = obj_
            obj_.original_tagname_ = 'CorrespondenceAddress'
        elif nodeName_ == 'HolderDetails':
            obj_ = HolderDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HolderDetails = obj_
            obj_.original_tagname_ = 'HolderDetails'
        else:
            content_ = self.gds_build_any(child_, 'RecordChangeNameAddressType')
            self.add_anytypeobjs_(content_)
# end class RecordChangeNameAddressType


class RecordEventType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordEventDate=None, RecordEventDateTime=None, RecordEventCode=None, RecordEventResponseDate=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(RecordEventDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEventDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEventDate
        self.RecordEventDate = initvalue_
        self.RecordEventDate_nsprefix_ = None
        if isinstance(RecordEventDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEventDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RecordEventDateTime
        self.RecordEventDateTime = initvalue_
        self.RecordEventDateTime_nsprefix_ = None
        self.RecordEventCode = RecordEventCode
        self.validate_RecordEventCodeType(self.RecordEventCode)
        self.RecordEventCode_nsprefix_ = None
        if isinstance(RecordEventResponseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEventResponseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEventResponseDate
        self.RecordEventResponseDate = initvalue_
        self.RecordEventResponseDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordEventType.subclass:
            return RecordEventType.subclass(*args_, **kwargs_)
        else:
            return RecordEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordEventDate(self):
        return self.RecordEventDate
    def set_RecordEventDate(self, RecordEventDate):
        self.RecordEventDate = RecordEventDate
    def get_RecordEventDateTime(self):
        return self.RecordEventDateTime
    def set_RecordEventDateTime(self, RecordEventDateTime):
        self.RecordEventDateTime = RecordEventDateTime
    def get_RecordEventCode(self):
        return self.RecordEventCode
    def set_RecordEventCode(self, RecordEventCode):
        self.RecordEventCode = RecordEventCode
    def get_RecordEventResponseDate(self):
        return self.RecordEventResponseDate
    def set_RecordEventResponseDate(self, RecordEventResponseDate):
        self.RecordEventResponseDate = RecordEventResponseDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RecordEventCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordEventDate is not None or
            self.RecordEventDateTime is not None or
            self.RecordEventCode is not None or
            self.RecordEventResponseDate is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordEventType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordEventType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordEventType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordEventType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordEventType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordEventDate is not None:
            namespaceprefix_ = self.RecordEventDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEventDate>%s</%sRecordEventDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEventDate, input_name='RecordEventDate'), namespaceprefix_ , eol_))
        if self.RecordEventDateTime is not None:
            namespaceprefix_ = self.RecordEventDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEventDateTime>%s</%sRecordEventDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RecordEventDateTime, input_name='RecordEventDateTime'), namespaceprefix_ , eol_))
        if self.RecordEventCode is not None:
            namespaceprefix_ = self.RecordEventCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEventCode>%s</%sRecordEventCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordEventCode), input_name='RecordEventCode')), namespaceprefix_ , eol_))
        if self.RecordEventResponseDate is not None:
            namespaceprefix_ = self.RecordEventResponseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventResponseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEventResponseDate>%s</%sRecordEventResponseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEventResponseDate, input_name='RecordEventResponseDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordEventDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEventDate = dval_
            self.RecordEventDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEventDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RecordEventDateTime = dval_
            self.RecordEventDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEventCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordEventCode')
            value_ = self.gds_validate_string(value_, node, 'RecordEventCode')
            self.RecordEventCode = value_
            self.RecordEventCode_nsprefix_ = child_.prefix
            # validate type RecordEventCodeType
            self.validate_RecordEventCodeType(self.RecordEventCode)
        elif nodeName_ == 'RecordEventResponseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEventResponseDate = dval_
            self.RecordEventResponseDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'RecordEventType')
            self.add_anytypeobjs_(content_)
# end class RecordEventType


class RecordLicenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordIdentifier=None, RecordFilingDate=None, RecordNotificationDate=None, RecordEffectiveDate=None, RecordLicenceKind=None, RecordReference=None, RecordLanguageCode=None, TradeMarkKeyDetails=None, RecordPublicationDetails=None, ClaimantDetails=None, RepresentativeDetails=None, RecordEventDetails=None, RecordDocumentDetails=None, RecordCurrentStatusCode=None, RecordCurrentStatusDate=None, RecordInterestedOfficeCode=None, RecordDesignatedCountryDetails=None, LicenceDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecordIdentifier = RecordIdentifier
        self.RecordIdentifier_nsprefix_ = None
        if isinstance(RecordFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordFilingDate
        self.RecordFilingDate = initvalue_
        self.RecordFilingDate_nsprefix_ = None
        if isinstance(RecordNotificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordNotificationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordNotificationDate
        self.RecordNotificationDate = initvalue_
        self.RecordNotificationDate_nsprefix_ = None
        if isinstance(RecordEffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEffectiveDate
        self.RecordEffectiveDate = initvalue_
        self.RecordEffectiveDate_nsprefix_ = None
        self.RecordLicenceKind = RecordLicenceKind
        self.validate_RecordLicenceKindType(self.RecordLicenceKind)
        self.RecordLicenceKind_nsprefix_ = None
        self.RecordReference = RecordReference
        self.RecordReference_nsprefix_ = None
        self.RecordLanguageCode = RecordLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        self.RecordLanguageCode_nsprefix_ = None
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
        self.TradeMarkKeyDetails_nsprefix_ = None
        self.RecordPublicationDetails = RecordPublicationDetails
        self.RecordPublicationDetails_nsprefix_ = None
        self.ClaimantDetails = ClaimantDetails
        self.ClaimantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.RecordEventDetails = RecordEventDetails
        self.RecordEventDetails_nsprefix_ = None
        self.RecordDocumentDetails = RecordDocumentDetails
        self.RecordDocumentDetails_nsprefix_ = None
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
        self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        self.RecordCurrentStatusCode_nsprefix_ = None
        if isinstance(RecordCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordCurrentStatusDate
        self.RecordCurrentStatusDate = initvalue_
        self.RecordCurrentStatusDate_nsprefix_ = None
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
        self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        self.RecordInterestedOfficeCode_nsprefix_ = None
        self.RecordDesignatedCountryDetails = RecordDesignatedCountryDetails
        self.RecordDesignatedCountryDetails_nsprefix_ = None
        self.LicenceDetails = LicenceDetails
        self.LicenceDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordLicenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordLicenceType.subclass:
            return RecordLicenceType.subclass(*args_, **kwargs_)
        else:
            return RecordLicenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordIdentifier(self):
        return self.RecordIdentifier
    def set_RecordIdentifier(self, RecordIdentifier):
        self.RecordIdentifier = RecordIdentifier
    def get_RecordFilingDate(self):
        return self.RecordFilingDate
    def set_RecordFilingDate(self, RecordFilingDate):
        self.RecordFilingDate = RecordFilingDate
    def get_RecordNotificationDate(self):
        return self.RecordNotificationDate
    def set_RecordNotificationDate(self, RecordNotificationDate):
        self.RecordNotificationDate = RecordNotificationDate
    def get_RecordEffectiveDate(self):
        return self.RecordEffectiveDate
    def set_RecordEffectiveDate(self, RecordEffectiveDate):
        self.RecordEffectiveDate = RecordEffectiveDate
    def get_RecordLicenceKind(self):
        return self.RecordLicenceKind
    def set_RecordLicenceKind(self, RecordLicenceKind):
        self.RecordLicenceKind = RecordLicenceKind
    def get_RecordReference(self):
        return self.RecordReference
    def set_RecordReference(self, RecordReference):
        self.RecordReference = RecordReference
    def get_RecordLanguageCode(self):
        return self.RecordLanguageCode
    def set_RecordLanguageCode(self, RecordLanguageCode):
        self.RecordLanguageCode = RecordLanguageCode
    def get_TradeMarkKeyDetails(self):
        return self.TradeMarkKeyDetails
    def set_TradeMarkKeyDetails(self, TradeMarkKeyDetails):
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
    def get_RecordPublicationDetails(self):
        return self.RecordPublicationDetails
    def set_RecordPublicationDetails(self, RecordPublicationDetails):
        self.RecordPublicationDetails = RecordPublicationDetails
    def get_ClaimantDetails(self):
        return self.ClaimantDetails
    def set_ClaimantDetails(self, ClaimantDetails):
        self.ClaimantDetails = ClaimantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_RecordEventDetails(self):
        return self.RecordEventDetails
    def set_RecordEventDetails(self, RecordEventDetails):
        self.RecordEventDetails = RecordEventDetails
    def get_RecordDocumentDetails(self):
        return self.RecordDocumentDetails
    def set_RecordDocumentDetails(self, RecordDocumentDetails):
        self.RecordDocumentDetails = RecordDocumentDetails
    def get_RecordCurrentStatusCode(self):
        return self.RecordCurrentStatusCode
    def set_RecordCurrentStatusCode(self, RecordCurrentStatusCode):
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
    def get_RecordCurrentStatusDate(self):
        return self.RecordCurrentStatusDate
    def set_RecordCurrentStatusDate(self, RecordCurrentStatusDate):
        self.RecordCurrentStatusDate = RecordCurrentStatusDate
    def get_RecordInterestedOfficeCode(self):
        return self.RecordInterestedOfficeCode
    def set_RecordInterestedOfficeCode(self, RecordInterestedOfficeCode):
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
    def get_RecordDesignatedCountryDetails(self):
        return self.RecordDesignatedCountryDetails
    def set_RecordDesignatedCountryDetails(self, RecordDesignatedCountryDetails):
        self.RecordDesignatedCountryDetails = RecordDesignatedCountryDetails
    def get_LicenceDetails(self):
        return self.LicenceDetails
    def set_LicenceDetails(self, LicenceDetails):
        self.LicenceDetails = LicenceDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RecordLicenceKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedISOLanguageCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_RecordCurrentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordIdentifier is not None or
            self.RecordFilingDate is not None or
            self.RecordNotificationDate is not None or
            self.RecordEffectiveDate is not None or
            self.RecordLicenceKind is not None or
            self.RecordReference is not None or
            self.RecordLanguageCode is not None or
            self.TradeMarkKeyDetails is not None or
            self.RecordPublicationDetails is not None or
            self.ClaimantDetails is not None or
            self.RepresentativeDetails is not None or
            self.RecordEventDetails is not None or
            self.RecordDocumentDetails is not None or
            self.RecordCurrentStatusCode is not None or
            self.RecordCurrentStatusDate is not None or
            self.RecordInterestedOfficeCode is not None or
            self.RecordDesignatedCountryDetails is not None or
            self.LicenceDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordLicenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordLicenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordLicenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordLicenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordLicenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordLicenceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordLicenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordIdentifier is not None:
            namespaceprefix_ = self.RecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier>%s</%sRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier), input_name='RecordIdentifier')), namespaceprefix_ , eol_))
        if self.RecordFilingDate is not None:
            namespaceprefix_ = self.RecordFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordFilingDate>%s</%sRecordFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordFilingDate, input_name='RecordFilingDate'), namespaceprefix_ , eol_))
        if self.RecordNotificationDate is not None:
            namespaceprefix_ = self.RecordNotificationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNotificationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordNotificationDate>%s</%sRecordNotificationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordNotificationDate, input_name='RecordNotificationDate'), namespaceprefix_ , eol_))
        if self.RecordEffectiveDate is not None:
            namespaceprefix_ = self.RecordEffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEffectiveDate>%s</%sRecordEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEffectiveDate, input_name='RecordEffectiveDate'), namespaceprefix_ , eol_))
        if self.RecordLicenceKind is not None:
            namespaceprefix_ = self.RecordLicenceKind_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordLicenceKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordLicenceKind>%s</%sRecordLicenceKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordLicenceKind), input_name='RecordLicenceKind')), namespaceprefix_ , eol_))
        if self.RecordReference is not None:
            namespaceprefix_ = self.RecordReference_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordReference>%s</%sRecordReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordReference), input_name='RecordReference')), namespaceprefix_ , eol_))
        if self.RecordLanguageCode is not None:
            namespaceprefix_ = self.RecordLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordLanguageCode>%s</%sRecordLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordLanguageCode), input_name='RecordLanguageCode')), namespaceprefix_ , eol_))
        if self.TradeMarkKeyDetails is not None:
            namespaceprefix_ = self.TradeMarkKeyDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKeyDetails_nsprefix_) else ''
            self.TradeMarkKeyDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKeyDetails', pretty_print=pretty_print)
        if self.RecordPublicationDetails is not None:
            namespaceprefix_ = self.RecordPublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublicationDetails_nsprefix_) else ''
            self.RecordPublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublicationDetails', pretty_print=pretty_print)
        if self.ClaimantDetails is not None:
            namespaceprefix_ = self.ClaimantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantDetails_nsprefix_) else ''
            self.ClaimantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.RecordEventDetails is not None:
            namespaceprefix_ = self.RecordEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDetails_nsprefix_) else ''
            self.RecordEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEventDetails', pretty_print=pretty_print)
        if self.RecordDocumentDetails is not None:
            namespaceprefix_ = self.RecordDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocumentDetails_nsprefix_) else ''
            self.RecordDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocumentDetails', pretty_print=pretty_print)
        if self.RecordCurrentStatusCode is not None:
            namespaceprefix_ = self.RecordCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusCode>%s</%sRecordCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordCurrentStatusCode), input_name='RecordCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.RecordCurrentStatusDate is not None:
            namespaceprefix_ = self.RecordCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusDate>%s</%sRecordCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordCurrentStatusDate, input_name='RecordCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.RecordInterestedOfficeCode is not None:
            namespaceprefix_ = self.RecordInterestedOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordInterestedOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordInterestedOfficeCode>%s</%sRecordInterestedOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordInterestedOfficeCode), input_name='RecordInterestedOfficeCode')), namespaceprefix_ , eol_))
        if self.RecordDesignatedCountryDetails is not None:
            namespaceprefix_ = self.RecordDesignatedCountryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDesignatedCountryDetails_nsprefix_) else ''
            self.RecordDesignatedCountryDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDesignatedCountryDetails', pretty_print=pretty_print)
        if self.LicenceDetails is not None:
            namespaceprefix_ = self.LicenceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceDetails_nsprefix_) else ''
            self.LicenceDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenceDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier')
            self.RecordIdentifier = value_
            self.RecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordFilingDate = dval_
            self.RecordFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordNotificationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordNotificationDate = dval_
            self.RecordNotificationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEffectiveDate = dval_
            self.RecordEffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordLicenceKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordLicenceKind')
            value_ = self.gds_validate_string(value_, node, 'RecordLicenceKind')
            self.RecordLicenceKind = value_
            self.RecordLicenceKind_nsprefix_ = child_.prefix
            # validate type RecordLicenceKindType
            self.validate_RecordLicenceKindType(self.RecordLicenceKind)
        elif nodeName_ == 'RecordReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordReference')
            value_ = self.gds_validate_string(value_, node, 'RecordReference')
            self.RecordReference = value_
            self.RecordReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'RecordLanguageCode')
            self.RecordLanguageCode = value_
            self.RecordLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        elif nodeName_ == 'TradeMarkKeyDetails':
            obj_ = TradeMarkKeyDetailsType14.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKeyDetails = obj_
            obj_.original_tagname_ = 'TradeMarkKeyDetails'
        elif nodeName_ == 'RecordPublicationDetails':
            obj_ = RecordPublicationDetailsType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublicationDetails = obj_
            obj_.original_tagname_ = 'RecordPublicationDetails'
        elif nodeName_ == 'ClaimantDetails':
            obj_ = ClaimantDetailsType16.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantDetails = obj_
            obj_.original_tagname_ = 'ClaimantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType17.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'RecordEventDetails':
            obj_ = RecordEventDetailsType18.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEventDetails = obj_
            obj_.original_tagname_ = 'RecordEventDetails'
        elif nodeName_ == 'RecordDocumentDetails':
            obj_ = RecordDocumentDetailsType19.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocumentDetails = obj_
            obj_.original_tagname_ = 'RecordDocumentDetails'
        elif nodeName_ == 'RecordCurrentStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'RecordCurrentStatusCode')
            self.RecordCurrentStatusCode = value_
            self.RecordCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type RecordCurrentStatusCodeType
            self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        elif nodeName_ == 'RecordCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordCurrentStatusDate = dval_
            self.RecordCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordInterestedOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordInterestedOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RecordInterestedOfficeCode')
            self.RecordInterestedOfficeCode = value_
            self.RecordInterestedOfficeCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        elif nodeName_ == 'RecordDesignatedCountryDetails':
            obj_ = RecordDesignatedCountryDetailsType20.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDesignatedCountryDetails = obj_
            obj_.original_tagname_ = 'RecordDesignatedCountryDetails'
        elif nodeName_ == 'LicenceDetails':
            obj_ = LicenceDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenceDetails = obj_
            obj_.original_tagname_ = 'LicenceDetails'
        else:
            content_ = self.gds_build_any(child_, 'RecordLicenceType')
            self.add_anytypeobjs_(content_)
# end class RecordLicenceType


class RecordNationalInternationalReplacementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordIdentifier=None, RecordFilingDate=None, RecordNotificationDate=None, RecordEffectiveDate=None, TradeMarkKeyDetails=None, RecordPublicationDetails=None, ClaimantDetails=None, RepresentativeDetails=None, RecordEventDetails=None, RecordDocumentDetails=None, RecordInterestedOfficeCode=None, GoodsServicesLimitationDetails=None, NationalMarkDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecordIdentifier = RecordIdentifier
        self.RecordIdentifier_nsprefix_ = None
        if isinstance(RecordFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordFilingDate
        self.RecordFilingDate = initvalue_
        self.RecordFilingDate_nsprefix_ = None
        if isinstance(RecordNotificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordNotificationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordNotificationDate
        self.RecordNotificationDate = initvalue_
        self.RecordNotificationDate_nsprefix_ = None
        if isinstance(RecordEffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEffectiveDate
        self.RecordEffectiveDate = initvalue_
        self.RecordEffectiveDate_nsprefix_ = None
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
        self.TradeMarkKeyDetails_nsprefix_ = None
        self.RecordPublicationDetails = RecordPublicationDetails
        self.RecordPublicationDetails_nsprefix_ = None
        self.ClaimantDetails = ClaimantDetails
        self.ClaimantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.RecordEventDetails = RecordEventDetails
        self.RecordEventDetails_nsprefix_ = None
        self.RecordDocumentDetails = RecordDocumentDetails
        self.RecordDocumentDetails_nsprefix_ = None
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
        self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        self.RecordInterestedOfficeCode_nsprefix_ = None
        self.GoodsServicesLimitationDetails = GoodsServicesLimitationDetails
        self.GoodsServicesLimitationDetails_nsprefix_ = None
        self.NationalMarkDetails = NationalMarkDetails
        self.NationalMarkDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordNationalInternationalReplacementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordNationalInternationalReplacementType.subclass:
            return RecordNationalInternationalReplacementType.subclass(*args_, **kwargs_)
        else:
            return RecordNationalInternationalReplacementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordIdentifier(self):
        return self.RecordIdentifier
    def set_RecordIdentifier(self, RecordIdentifier):
        self.RecordIdentifier = RecordIdentifier
    def get_RecordFilingDate(self):
        return self.RecordFilingDate
    def set_RecordFilingDate(self, RecordFilingDate):
        self.RecordFilingDate = RecordFilingDate
    def get_RecordNotificationDate(self):
        return self.RecordNotificationDate
    def set_RecordNotificationDate(self, RecordNotificationDate):
        self.RecordNotificationDate = RecordNotificationDate
    def get_RecordEffectiveDate(self):
        return self.RecordEffectiveDate
    def set_RecordEffectiveDate(self, RecordEffectiveDate):
        self.RecordEffectiveDate = RecordEffectiveDate
    def get_TradeMarkKeyDetails(self):
        return self.TradeMarkKeyDetails
    def set_TradeMarkKeyDetails(self, TradeMarkKeyDetails):
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
    def get_RecordPublicationDetails(self):
        return self.RecordPublicationDetails
    def set_RecordPublicationDetails(self, RecordPublicationDetails):
        self.RecordPublicationDetails = RecordPublicationDetails
    def get_ClaimantDetails(self):
        return self.ClaimantDetails
    def set_ClaimantDetails(self, ClaimantDetails):
        self.ClaimantDetails = ClaimantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_RecordEventDetails(self):
        return self.RecordEventDetails
    def set_RecordEventDetails(self, RecordEventDetails):
        self.RecordEventDetails = RecordEventDetails
    def get_RecordDocumentDetails(self):
        return self.RecordDocumentDetails
    def set_RecordDocumentDetails(self, RecordDocumentDetails):
        self.RecordDocumentDetails = RecordDocumentDetails
    def get_RecordInterestedOfficeCode(self):
        return self.RecordInterestedOfficeCode
    def set_RecordInterestedOfficeCode(self, RecordInterestedOfficeCode):
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
    def get_GoodsServicesLimitationDetails(self):
        return self.GoodsServicesLimitationDetails
    def set_GoodsServicesLimitationDetails(self, GoodsServicesLimitationDetails):
        self.GoodsServicesLimitationDetails = GoodsServicesLimitationDetails
    def get_NationalMarkDetails(self):
        return self.NationalMarkDetails
    def set_NationalMarkDetails(self, NationalMarkDetails):
        self.NationalMarkDetails = NationalMarkDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordIdentifier is not None or
            self.RecordFilingDate is not None or
            self.RecordNotificationDate is not None or
            self.RecordEffectiveDate is not None or
            self.TradeMarkKeyDetails is not None or
            self.RecordPublicationDetails is not None or
            self.ClaimantDetails is not None or
            self.RepresentativeDetails is not None or
            self.RecordEventDetails is not None or
            self.RecordDocumentDetails is not None or
            self.RecordInterestedOfficeCode is not None or
            self.GoodsServicesLimitationDetails is not None or
            self.NationalMarkDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordNationalInternationalReplacementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordNationalInternationalReplacementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordNationalInternationalReplacementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordNationalInternationalReplacementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordNationalInternationalReplacementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordNationalInternationalReplacementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordNationalInternationalReplacementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordIdentifier is not None:
            namespaceprefix_ = self.RecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier>%s</%sRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier), input_name='RecordIdentifier')), namespaceprefix_ , eol_))
        if self.RecordFilingDate is not None:
            namespaceprefix_ = self.RecordFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordFilingDate>%s</%sRecordFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordFilingDate, input_name='RecordFilingDate'), namespaceprefix_ , eol_))
        if self.RecordNotificationDate is not None:
            namespaceprefix_ = self.RecordNotificationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNotificationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordNotificationDate>%s</%sRecordNotificationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordNotificationDate, input_name='RecordNotificationDate'), namespaceprefix_ , eol_))
        if self.RecordEffectiveDate is not None:
            namespaceprefix_ = self.RecordEffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEffectiveDate>%s</%sRecordEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEffectiveDate, input_name='RecordEffectiveDate'), namespaceprefix_ , eol_))
        if self.TradeMarkKeyDetails is not None:
            namespaceprefix_ = self.TradeMarkKeyDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKeyDetails_nsprefix_) else ''
            self.TradeMarkKeyDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKeyDetails', pretty_print=pretty_print)
        if self.RecordPublicationDetails is not None:
            namespaceprefix_ = self.RecordPublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublicationDetails_nsprefix_) else ''
            self.RecordPublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublicationDetails', pretty_print=pretty_print)
        if self.ClaimantDetails is not None:
            namespaceprefix_ = self.ClaimantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantDetails_nsprefix_) else ''
            self.ClaimantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.RecordEventDetails is not None:
            namespaceprefix_ = self.RecordEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDetails_nsprefix_) else ''
            self.RecordEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEventDetails', pretty_print=pretty_print)
        if self.RecordDocumentDetails is not None:
            namespaceprefix_ = self.RecordDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocumentDetails_nsprefix_) else ''
            self.RecordDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocumentDetails', pretty_print=pretty_print)
        if self.RecordInterestedOfficeCode is not None:
            namespaceprefix_ = self.RecordInterestedOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordInterestedOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordInterestedOfficeCode>%s</%sRecordInterestedOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordInterestedOfficeCode), input_name='RecordInterestedOfficeCode')), namespaceprefix_ , eol_))
        if self.GoodsServicesLimitationDetails is not None:
            namespaceprefix_ = self.GoodsServicesLimitationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitationDetails_nsprefix_) else ''
            self.GoodsServicesLimitationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitationDetails', pretty_print=pretty_print)
        if self.NationalMarkDetails is not None:
            namespaceprefix_ = self.NationalMarkDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalMarkDetails_nsprefix_) else ''
            self.NationalMarkDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NationalMarkDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier')
            self.RecordIdentifier = value_
            self.RecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordFilingDate = dval_
            self.RecordFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordNotificationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordNotificationDate = dval_
            self.RecordNotificationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEffectiveDate = dval_
            self.RecordEffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'TradeMarkKeyDetails':
            obj_ = TradeMarkKeyDetailsType21.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKeyDetails = obj_
            obj_.original_tagname_ = 'TradeMarkKeyDetails'
        elif nodeName_ == 'RecordPublicationDetails':
            obj_ = RecordPublicationDetailsType22.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublicationDetails = obj_
            obj_.original_tagname_ = 'RecordPublicationDetails'
        elif nodeName_ == 'ClaimantDetails':
            obj_ = ClaimantDetailsType23.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantDetails = obj_
            obj_.original_tagname_ = 'ClaimantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType24.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'RecordEventDetails':
            obj_ = RecordEventDetailsType25.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEventDetails = obj_
            obj_.original_tagname_ = 'RecordEventDetails'
        elif nodeName_ == 'RecordDocumentDetails':
            obj_ = RecordDocumentDetailsType26.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocumentDetails = obj_
            obj_.original_tagname_ = 'RecordDocumentDetails'
        elif nodeName_ == 'RecordInterestedOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordInterestedOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RecordInterestedOfficeCode')
            self.RecordInterestedOfficeCode = value_
            self.RecordInterestedOfficeCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        elif nodeName_ == 'GoodsServicesLimitationDetails':
            obj_ = GoodsServicesLimitationDetailsType27.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitationDetails = obj_
            obj_.original_tagname_ = 'GoodsServicesLimitationDetails'
        elif nodeName_ == 'NationalMarkDetails':
            obj_ = NationalMarkDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NationalMarkDetails = obj_
            obj_.original_tagname_ = 'NationalMarkDetails'
        else:
            content_ = self.gds_build_any(child_, 'RecordNationalInternationalReplacementType')
            self.add_anytypeobjs_(content_)
# end class RecordNationalInternationalReplacementType


class RecordOppositionPeriodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordIdentifier=None, RecordFilingDate=None, RecordNotificationDate=None, RecordEffectiveDate=None, RecordOppositionPeriodKind=None, TradeMarkKeyDetails=None, RecordPublicationDetails=None, RecordInterestedOfficeCode=None, RecordOppositionPeriodStartDate=None, RecordOppositionPeriodEndDate=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecordIdentifier = RecordIdentifier
        self.RecordIdentifier_nsprefix_ = None
        if isinstance(RecordFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordFilingDate
        self.RecordFilingDate = initvalue_
        self.RecordFilingDate_nsprefix_ = None
        if isinstance(RecordNotificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordNotificationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordNotificationDate
        self.RecordNotificationDate = initvalue_
        self.RecordNotificationDate_nsprefix_ = None
        if isinstance(RecordEffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEffectiveDate
        self.RecordEffectiveDate = initvalue_
        self.RecordEffectiveDate_nsprefix_ = None
        self.RecordOppositionPeriodKind = RecordOppositionPeriodKind
        self.validate_RecordOppositionPeriodKindType(self.RecordOppositionPeriodKind)
        self.RecordOppositionPeriodKind_nsprefix_ = None
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
        self.TradeMarkKeyDetails_nsprefix_ = None
        self.RecordPublicationDetails = RecordPublicationDetails
        self.RecordPublicationDetails_nsprefix_ = None
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
        self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        self.RecordInterestedOfficeCode_nsprefix_ = None
        if isinstance(RecordOppositionPeriodStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordOppositionPeriodStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordOppositionPeriodStartDate
        self.RecordOppositionPeriodStartDate = initvalue_
        self.RecordOppositionPeriodStartDate_nsprefix_ = None
        if isinstance(RecordOppositionPeriodEndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordOppositionPeriodEndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordOppositionPeriodEndDate
        self.RecordOppositionPeriodEndDate = initvalue_
        self.RecordOppositionPeriodEndDate_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordOppositionPeriodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordOppositionPeriodType.subclass:
            return RecordOppositionPeriodType.subclass(*args_, **kwargs_)
        else:
            return RecordOppositionPeriodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordIdentifier(self):
        return self.RecordIdentifier
    def set_RecordIdentifier(self, RecordIdentifier):
        self.RecordIdentifier = RecordIdentifier
    def get_RecordFilingDate(self):
        return self.RecordFilingDate
    def set_RecordFilingDate(self, RecordFilingDate):
        self.RecordFilingDate = RecordFilingDate
    def get_RecordNotificationDate(self):
        return self.RecordNotificationDate
    def set_RecordNotificationDate(self, RecordNotificationDate):
        self.RecordNotificationDate = RecordNotificationDate
    def get_RecordEffectiveDate(self):
        return self.RecordEffectiveDate
    def set_RecordEffectiveDate(self, RecordEffectiveDate):
        self.RecordEffectiveDate = RecordEffectiveDate
    def get_RecordOppositionPeriodKind(self):
        return self.RecordOppositionPeriodKind
    def set_RecordOppositionPeriodKind(self, RecordOppositionPeriodKind):
        self.RecordOppositionPeriodKind = RecordOppositionPeriodKind
    def get_TradeMarkKeyDetails(self):
        return self.TradeMarkKeyDetails
    def set_TradeMarkKeyDetails(self, TradeMarkKeyDetails):
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
    def get_RecordPublicationDetails(self):
        return self.RecordPublicationDetails
    def set_RecordPublicationDetails(self, RecordPublicationDetails):
        self.RecordPublicationDetails = RecordPublicationDetails
    def get_RecordInterestedOfficeCode(self):
        return self.RecordInterestedOfficeCode
    def set_RecordInterestedOfficeCode(self, RecordInterestedOfficeCode):
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
    def get_RecordOppositionPeriodStartDate(self):
        return self.RecordOppositionPeriodStartDate
    def set_RecordOppositionPeriodStartDate(self, RecordOppositionPeriodStartDate):
        self.RecordOppositionPeriodStartDate = RecordOppositionPeriodStartDate
    def get_RecordOppositionPeriodEndDate(self):
        return self.RecordOppositionPeriodEndDate
    def set_RecordOppositionPeriodEndDate(self, RecordOppositionPeriodEndDate):
        self.RecordOppositionPeriodEndDate = RecordOppositionPeriodEndDate
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RecordOppositionPeriodKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordIdentifier is not None or
            self.RecordFilingDate is not None or
            self.RecordNotificationDate is not None or
            self.RecordEffectiveDate is not None or
            self.RecordOppositionPeriodKind is not None or
            self.TradeMarkKeyDetails is not None or
            self.RecordPublicationDetails is not None or
            self.RecordInterestedOfficeCode is not None or
            self.RecordOppositionPeriodStartDate is not None or
            self.RecordOppositionPeriodEndDate is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordOppositionPeriodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordOppositionPeriodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordOppositionPeriodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordOppositionPeriodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordOppositionPeriodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordOppositionPeriodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordOppositionPeriodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordIdentifier is not None:
            namespaceprefix_ = self.RecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier>%s</%sRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier), input_name='RecordIdentifier')), namespaceprefix_ , eol_))
        if self.RecordFilingDate is not None:
            namespaceprefix_ = self.RecordFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordFilingDate>%s</%sRecordFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordFilingDate, input_name='RecordFilingDate'), namespaceprefix_ , eol_))
        if self.RecordNotificationDate is not None:
            namespaceprefix_ = self.RecordNotificationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNotificationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordNotificationDate>%s</%sRecordNotificationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordNotificationDate, input_name='RecordNotificationDate'), namespaceprefix_ , eol_))
        if self.RecordEffectiveDate is not None:
            namespaceprefix_ = self.RecordEffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEffectiveDate>%s</%sRecordEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEffectiveDate, input_name='RecordEffectiveDate'), namespaceprefix_ , eol_))
        if self.RecordOppositionPeriodKind is not None:
            namespaceprefix_ = self.RecordOppositionPeriodKind_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordOppositionPeriodKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordOppositionPeriodKind>%s</%sRecordOppositionPeriodKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordOppositionPeriodKind), input_name='RecordOppositionPeriodKind')), namespaceprefix_ , eol_))
        if self.TradeMarkKeyDetails is not None:
            namespaceprefix_ = self.TradeMarkKeyDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKeyDetails_nsprefix_) else ''
            self.TradeMarkKeyDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKeyDetails', pretty_print=pretty_print)
        if self.RecordPublicationDetails is not None:
            namespaceprefix_ = self.RecordPublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublicationDetails_nsprefix_) else ''
            self.RecordPublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublicationDetails', pretty_print=pretty_print)
        if self.RecordInterestedOfficeCode is not None:
            namespaceprefix_ = self.RecordInterestedOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordInterestedOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordInterestedOfficeCode>%s</%sRecordInterestedOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordInterestedOfficeCode), input_name='RecordInterestedOfficeCode')), namespaceprefix_ , eol_))
        if self.RecordOppositionPeriodStartDate is not None:
            namespaceprefix_ = self.RecordOppositionPeriodStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordOppositionPeriodStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordOppositionPeriodStartDate>%s</%sRecordOppositionPeriodStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordOppositionPeriodStartDate, input_name='RecordOppositionPeriodStartDate'), namespaceprefix_ , eol_))
        if self.RecordOppositionPeriodEndDate is not None:
            namespaceprefix_ = self.RecordOppositionPeriodEndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordOppositionPeriodEndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordOppositionPeriodEndDate>%s</%sRecordOppositionPeriodEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordOppositionPeriodEndDate, input_name='RecordOppositionPeriodEndDate'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier')
            self.RecordIdentifier = value_
            self.RecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordFilingDate = dval_
            self.RecordFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordNotificationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordNotificationDate = dval_
            self.RecordNotificationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEffectiveDate = dval_
            self.RecordEffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordOppositionPeriodKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordOppositionPeriodKind')
            value_ = self.gds_validate_string(value_, node, 'RecordOppositionPeriodKind')
            self.RecordOppositionPeriodKind = value_
            self.RecordOppositionPeriodKind_nsprefix_ = child_.prefix
            # validate type RecordOppositionPeriodKindType
            self.validate_RecordOppositionPeriodKindType(self.RecordOppositionPeriodKind)
        elif nodeName_ == 'TradeMarkKeyDetails':
            obj_ = TradeMarkKeyDetailsType28.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKeyDetails = obj_
            obj_.original_tagname_ = 'TradeMarkKeyDetails'
        elif nodeName_ == 'RecordPublicationDetails':
            obj_ = RecordPublicationDetailsType29.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublicationDetails = obj_
            obj_.original_tagname_ = 'RecordPublicationDetails'
        elif nodeName_ == 'RecordInterestedOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordInterestedOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RecordInterestedOfficeCode')
            self.RecordInterestedOfficeCode = value_
            self.RecordInterestedOfficeCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        elif nodeName_ == 'RecordOppositionPeriodStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordOppositionPeriodStartDate = dval_
            self.RecordOppositionPeriodStartDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordOppositionPeriodEndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordOppositionPeriodEndDate = dval_
            self.RecordOppositionPeriodEndDate_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'RecordOppositionPeriodType')
            self.add_anytypeobjs_(content_)
# end class RecordOppositionPeriodType


class RecordShortNotationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordIdentifier=None, RecordFilingDate=None, RecordNotificationDate=None, RecordEffectiveDate=None, RecordShortNotationKind=None, RecordReference=None, RecordLanguageCode=None, RecordPublicationDetails=None, ClaimantDetails=None, RepresentativeDetails=None, RecordEventDetails=None, RecordDocumentDetails=None, RecordInterestedOfficeCode=None, RecordToRegistration=None, RecordFromRegistrationDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecordIdentifier = RecordIdentifier
        self.RecordIdentifier_nsprefix_ = None
        if isinstance(RecordFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordFilingDate
        self.RecordFilingDate = initvalue_
        self.RecordFilingDate_nsprefix_ = None
        if isinstance(RecordNotificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordNotificationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordNotificationDate
        self.RecordNotificationDate = initvalue_
        self.RecordNotificationDate_nsprefix_ = None
        if isinstance(RecordEffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEffectiveDate
        self.RecordEffectiveDate = initvalue_
        self.RecordEffectiveDate_nsprefix_ = None
        self.RecordShortNotationKind = RecordShortNotationKind
        self.validate_RecordShortNotationKindType(self.RecordShortNotationKind)
        self.RecordShortNotationKind_nsprefix_ = None
        self.RecordReference = RecordReference
        self.RecordReference_nsprefix_ = None
        self.RecordLanguageCode = RecordLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        self.RecordLanguageCode_nsprefix_ = None
        self.RecordPublicationDetails = RecordPublicationDetails
        self.RecordPublicationDetails_nsprefix_ = None
        self.ClaimantDetails = ClaimantDetails
        self.ClaimantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.RecordEventDetails = RecordEventDetails
        self.RecordEventDetails_nsprefix_ = None
        self.RecordDocumentDetails = RecordDocumentDetails
        self.RecordDocumentDetails_nsprefix_ = None
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
        self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        self.RecordInterestedOfficeCode_nsprefix_ = None
        self.RecordToRegistration = RecordToRegistration
        self.RecordToRegistration_nsprefix_ = None
        self.RecordFromRegistrationDetails = RecordFromRegistrationDetails
        self.RecordFromRegistrationDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordShortNotationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordShortNotationType.subclass:
            return RecordShortNotationType.subclass(*args_, **kwargs_)
        else:
            return RecordShortNotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordIdentifier(self):
        return self.RecordIdentifier
    def set_RecordIdentifier(self, RecordIdentifier):
        self.RecordIdentifier = RecordIdentifier
    def get_RecordFilingDate(self):
        return self.RecordFilingDate
    def set_RecordFilingDate(self, RecordFilingDate):
        self.RecordFilingDate = RecordFilingDate
    def get_RecordNotificationDate(self):
        return self.RecordNotificationDate
    def set_RecordNotificationDate(self, RecordNotificationDate):
        self.RecordNotificationDate = RecordNotificationDate
    def get_RecordEffectiveDate(self):
        return self.RecordEffectiveDate
    def set_RecordEffectiveDate(self, RecordEffectiveDate):
        self.RecordEffectiveDate = RecordEffectiveDate
    def get_RecordShortNotationKind(self):
        return self.RecordShortNotationKind
    def set_RecordShortNotationKind(self, RecordShortNotationKind):
        self.RecordShortNotationKind = RecordShortNotationKind
    def get_RecordReference(self):
        return self.RecordReference
    def set_RecordReference(self, RecordReference):
        self.RecordReference = RecordReference
    def get_RecordLanguageCode(self):
        return self.RecordLanguageCode
    def set_RecordLanguageCode(self, RecordLanguageCode):
        self.RecordLanguageCode = RecordLanguageCode
    def get_RecordPublicationDetails(self):
        return self.RecordPublicationDetails
    def set_RecordPublicationDetails(self, RecordPublicationDetails):
        self.RecordPublicationDetails = RecordPublicationDetails
    def get_ClaimantDetails(self):
        return self.ClaimantDetails
    def set_ClaimantDetails(self, ClaimantDetails):
        self.ClaimantDetails = ClaimantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_RecordEventDetails(self):
        return self.RecordEventDetails
    def set_RecordEventDetails(self, RecordEventDetails):
        self.RecordEventDetails = RecordEventDetails
    def get_RecordDocumentDetails(self):
        return self.RecordDocumentDetails
    def set_RecordDocumentDetails(self, RecordDocumentDetails):
        self.RecordDocumentDetails = RecordDocumentDetails
    def get_RecordInterestedOfficeCode(self):
        return self.RecordInterestedOfficeCode
    def set_RecordInterestedOfficeCode(self, RecordInterestedOfficeCode):
        self.RecordInterestedOfficeCode = RecordInterestedOfficeCode
    def get_RecordToRegistration(self):
        return self.RecordToRegistration
    def set_RecordToRegistration(self, RecordToRegistration):
        self.RecordToRegistration = RecordToRegistration
    def get_RecordFromRegistrationDetails(self):
        return self.RecordFromRegistrationDetails
    def set_RecordFromRegistrationDetails(self, RecordFromRegistrationDetails):
        self.RecordFromRegistrationDetails = RecordFromRegistrationDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RecordShortNotationKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedISOLanguageCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordIdentifier is not None or
            self.RecordFilingDate is not None or
            self.RecordNotificationDate is not None or
            self.RecordEffectiveDate is not None or
            self.RecordShortNotationKind is not None or
            self.RecordReference is not None or
            self.RecordLanguageCode is not None or
            self.RecordPublicationDetails is not None or
            self.ClaimantDetails is not None or
            self.RepresentativeDetails is not None or
            self.RecordEventDetails is not None or
            self.RecordDocumentDetails is not None or
            self.RecordInterestedOfficeCode is not None or
            self.RecordToRegistration is not None or
            self.RecordFromRegistrationDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordShortNotationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordShortNotationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordShortNotationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordShortNotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordShortNotationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordShortNotationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordShortNotationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordIdentifier is not None:
            namespaceprefix_ = self.RecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier>%s</%sRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier), input_name='RecordIdentifier')), namespaceprefix_ , eol_))
        if self.RecordFilingDate is not None:
            namespaceprefix_ = self.RecordFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordFilingDate>%s</%sRecordFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordFilingDate, input_name='RecordFilingDate'), namespaceprefix_ , eol_))
        if self.RecordNotificationDate is not None:
            namespaceprefix_ = self.RecordNotificationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNotificationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordNotificationDate>%s</%sRecordNotificationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordNotificationDate, input_name='RecordNotificationDate'), namespaceprefix_ , eol_))
        if self.RecordEffectiveDate is not None:
            namespaceprefix_ = self.RecordEffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEffectiveDate>%s</%sRecordEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEffectiveDate, input_name='RecordEffectiveDate'), namespaceprefix_ , eol_))
        if self.RecordShortNotationKind is not None:
            namespaceprefix_ = self.RecordShortNotationKind_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordShortNotationKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordShortNotationKind>%s</%sRecordShortNotationKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordShortNotationKind), input_name='RecordShortNotationKind')), namespaceprefix_ , eol_))
        if self.RecordReference is not None:
            namespaceprefix_ = self.RecordReference_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordReference>%s</%sRecordReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordReference), input_name='RecordReference')), namespaceprefix_ , eol_))
        if self.RecordLanguageCode is not None:
            namespaceprefix_ = self.RecordLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordLanguageCode>%s</%sRecordLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordLanguageCode), input_name='RecordLanguageCode')), namespaceprefix_ , eol_))
        if self.RecordPublicationDetails is not None:
            namespaceprefix_ = self.RecordPublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublicationDetails_nsprefix_) else ''
            self.RecordPublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublicationDetails', pretty_print=pretty_print)
        if self.ClaimantDetails is not None:
            namespaceprefix_ = self.ClaimantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantDetails_nsprefix_) else ''
            self.ClaimantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.RecordEventDetails is not None:
            namespaceprefix_ = self.RecordEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDetails_nsprefix_) else ''
            self.RecordEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEventDetails', pretty_print=pretty_print)
        if self.RecordDocumentDetails is not None:
            namespaceprefix_ = self.RecordDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocumentDetails_nsprefix_) else ''
            self.RecordDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocumentDetails', pretty_print=pretty_print)
        if self.RecordInterestedOfficeCode is not None:
            namespaceprefix_ = self.RecordInterestedOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordInterestedOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordInterestedOfficeCode>%s</%sRecordInterestedOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordInterestedOfficeCode), input_name='RecordInterestedOfficeCode')), namespaceprefix_ , eol_))
        if self.RecordToRegistration is not None:
            namespaceprefix_ = self.RecordToRegistration_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordToRegistration_nsprefix_) else ''
            self.RecordToRegistration.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordToRegistration', pretty_print=pretty_print)
        if self.RecordFromRegistrationDetails is not None:
            namespaceprefix_ = self.RecordFromRegistrationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFromRegistrationDetails_nsprefix_) else ''
            self.RecordFromRegistrationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordFromRegistrationDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier')
            self.RecordIdentifier = value_
            self.RecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordFilingDate = dval_
            self.RecordFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordNotificationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordNotificationDate = dval_
            self.RecordNotificationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEffectiveDate = dval_
            self.RecordEffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordShortNotationKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordShortNotationKind')
            value_ = self.gds_validate_string(value_, node, 'RecordShortNotationKind')
            self.RecordShortNotationKind = value_
            self.RecordShortNotationKind_nsprefix_ = child_.prefix
            # validate type RecordShortNotationKindType
            self.validate_RecordShortNotationKindType(self.RecordShortNotationKind)
        elif nodeName_ == 'RecordReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordReference')
            value_ = self.gds_validate_string(value_, node, 'RecordReference')
            self.RecordReference = value_
            self.RecordReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'RecordLanguageCode')
            self.RecordLanguageCode = value_
            self.RecordLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        elif nodeName_ == 'RecordPublicationDetails':
            obj_ = RecordPublicationDetailsType30.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublicationDetails = obj_
            obj_.original_tagname_ = 'RecordPublicationDetails'
        elif nodeName_ == 'ClaimantDetails':
            obj_ = ClaimantDetailsType31.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantDetails = obj_
            obj_.original_tagname_ = 'ClaimantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType32.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'RecordEventDetails':
            obj_ = RecordEventDetailsType33.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEventDetails = obj_
            obj_.original_tagname_ = 'RecordEventDetails'
        elif nodeName_ == 'RecordDocumentDetails':
            obj_ = RecordDocumentDetailsType34.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocumentDetails = obj_
            obj_.original_tagname_ = 'RecordDocumentDetails'
        elif nodeName_ == 'RecordInterestedOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordInterestedOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RecordInterestedOfficeCode')
            self.RecordInterestedOfficeCode = value_
            self.RecordInterestedOfficeCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordInterestedOfficeCode)
        elif nodeName_ == 'RecordToRegistration':
            obj_ = RegistrationShortNotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordToRegistration = obj_
            obj_.original_tagname_ = 'RecordToRegistration'
        elif nodeName_ == 'RecordFromRegistrationDetails':
            obj_ = RecordFromRegistrationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordFromRegistrationDetails = obj_
            obj_.original_tagname_ = 'RecordFromRegistrationDetails'
        else:
            content_ = self.gds_build_any(child_, 'RecordShortNotationType')
            self.add_anytypeobjs_(content_)
# end class RecordShortNotationType


class RecordTransferType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordIdentifier=None, RecordFilingDate=None, RecordNotificationDate=None, RecordEffectiveDate=None, RecordTransferKind=None, RecordReference=None, RecordLanguageCode=None, TradeMarkKeyDetails=None, RecordPublicationDetails=None, ClaimantDetails=None, RepresentativeDetails=None, RecordEventDetails=None, RecordDocumentDetails=None, RecordCurrentStatusCode=None, RecordCurrentStatusDate=None, CorrespondenceAddress=None, HolderDetails=None, GoodsServicesLimitationDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecordIdentifier = RecordIdentifier
        self.RecordIdentifier_nsprefix_ = None
        if isinstance(RecordFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordFilingDate
        self.RecordFilingDate = initvalue_
        self.RecordFilingDate_nsprefix_ = None
        if isinstance(RecordNotificationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordNotificationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordNotificationDate
        self.RecordNotificationDate = initvalue_
        self.RecordNotificationDate_nsprefix_ = None
        if isinstance(RecordEffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordEffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordEffectiveDate
        self.RecordEffectiveDate = initvalue_
        self.RecordEffectiveDate_nsprefix_ = None
        self.RecordTransferKind = RecordTransferKind
        self.validate_RecordTransferKindType(self.RecordTransferKind)
        self.RecordTransferKind_nsprefix_ = None
        self.RecordReference = RecordReference
        self.RecordReference_nsprefix_ = None
        self.RecordLanguageCode = RecordLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        self.RecordLanguageCode_nsprefix_ = None
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
        self.TradeMarkKeyDetails_nsprefix_ = None
        self.RecordPublicationDetails = RecordPublicationDetails
        self.RecordPublicationDetails_nsprefix_ = None
        self.ClaimantDetails = ClaimantDetails
        self.ClaimantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.RecordEventDetails = RecordEventDetails
        self.RecordEventDetails_nsprefix_ = None
        self.RecordDocumentDetails = RecordDocumentDetails
        self.RecordDocumentDetails_nsprefix_ = None
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
        self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        self.RecordCurrentStatusCode_nsprefix_ = None
        if isinstance(RecordCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RecordCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RecordCurrentStatusDate
        self.RecordCurrentStatusDate = initvalue_
        self.RecordCurrentStatusDate_nsprefix_ = None
        self.CorrespondenceAddress = CorrespondenceAddress
        self.CorrespondenceAddress_nsprefix_ = None
        self.HolderDetails = HolderDetails
        self.HolderDetails_nsprefix_ = None
        self.GoodsServicesLimitationDetails = GoodsServicesLimitationDetails
        self.GoodsServicesLimitationDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordTransferType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordTransferType.subclass:
            return RecordTransferType.subclass(*args_, **kwargs_)
        else:
            return RecordTransferType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordIdentifier(self):
        return self.RecordIdentifier
    def set_RecordIdentifier(self, RecordIdentifier):
        self.RecordIdentifier = RecordIdentifier
    def get_RecordFilingDate(self):
        return self.RecordFilingDate
    def set_RecordFilingDate(self, RecordFilingDate):
        self.RecordFilingDate = RecordFilingDate
    def get_RecordNotificationDate(self):
        return self.RecordNotificationDate
    def set_RecordNotificationDate(self, RecordNotificationDate):
        self.RecordNotificationDate = RecordNotificationDate
    def get_RecordEffectiveDate(self):
        return self.RecordEffectiveDate
    def set_RecordEffectiveDate(self, RecordEffectiveDate):
        self.RecordEffectiveDate = RecordEffectiveDate
    def get_RecordTransferKind(self):
        return self.RecordTransferKind
    def set_RecordTransferKind(self, RecordTransferKind):
        self.RecordTransferKind = RecordTransferKind
    def get_RecordReference(self):
        return self.RecordReference
    def set_RecordReference(self, RecordReference):
        self.RecordReference = RecordReference
    def get_RecordLanguageCode(self):
        return self.RecordLanguageCode
    def set_RecordLanguageCode(self, RecordLanguageCode):
        self.RecordLanguageCode = RecordLanguageCode
    def get_TradeMarkKeyDetails(self):
        return self.TradeMarkKeyDetails
    def set_TradeMarkKeyDetails(self, TradeMarkKeyDetails):
        self.TradeMarkKeyDetails = TradeMarkKeyDetails
    def get_RecordPublicationDetails(self):
        return self.RecordPublicationDetails
    def set_RecordPublicationDetails(self, RecordPublicationDetails):
        self.RecordPublicationDetails = RecordPublicationDetails
    def get_ClaimantDetails(self):
        return self.ClaimantDetails
    def set_ClaimantDetails(self, ClaimantDetails):
        self.ClaimantDetails = ClaimantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_RecordEventDetails(self):
        return self.RecordEventDetails
    def set_RecordEventDetails(self, RecordEventDetails):
        self.RecordEventDetails = RecordEventDetails
    def get_RecordDocumentDetails(self):
        return self.RecordDocumentDetails
    def set_RecordDocumentDetails(self, RecordDocumentDetails):
        self.RecordDocumentDetails = RecordDocumentDetails
    def get_RecordCurrentStatusCode(self):
        return self.RecordCurrentStatusCode
    def set_RecordCurrentStatusCode(self, RecordCurrentStatusCode):
        self.RecordCurrentStatusCode = RecordCurrentStatusCode
    def get_RecordCurrentStatusDate(self):
        return self.RecordCurrentStatusDate
    def set_RecordCurrentStatusDate(self, RecordCurrentStatusDate):
        self.RecordCurrentStatusDate = RecordCurrentStatusDate
    def get_CorrespondenceAddress(self):
        return self.CorrespondenceAddress
    def set_CorrespondenceAddress(self, CorrespondenceAddress):
        self.CorrespondenceAddress = CorrespondenceAddress
    def get_HolderDetails(self):
        return self.HolderDetails
    def set_HolderDetails(self, HolderDetails):
        self.HolderDetails = HolderDetails
    def get_GoodsServicesLimitationDetails(self):
        return self.GoodsServicesLimitationDetails
    def set_GoodsServicesLimitationDetails(self, GoodsServicesLimitationDetails):
        self.GoodsServicesLimitationDetails = GoodsServicesLimitationDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RecordTransferKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ExtendedISOLanguageCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_RecordCurrentStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordIdentifier is not None or
            self.RecordFilingDate is not None or
            self.RecordNotificationDate is not None or
            self.RecordEffectiveDate is not None or
            self.RecordTransferKind is not None or
            self.RecordReference is not None or
            self.RecordLanguageCode is not None or
            self.TradeMarkKeyDetails is not None or
            self.RecordPublicationDetails is not None or
            self.ClaimantDetails is not None or
            self.RepresentativeDetails is not None or
            self.RecordEventDetails is not None or
            self.RecordDocumentDetails is not None or
            self.RecordCurrentStatusCode is not None or
            self.RecordCurrentStatusDate is not None or
            self.CorrespondenceAddress is not None or
            self.HolderDetails is not None or
            self.GoodsServicesLimitationDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordTransferType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordTransferType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordTransferType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordTransferType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordTransferType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordTransferType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordTransferType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecordIdentifier is not None:
            namespaceprefix_ = self.RecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier>%s</%sRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier), input_name='RecordIdentifier')), namespaceprefix_ , eol_))
        if self.RecordFilingDate is not None:
            namespaceprefix_ = self.RecordFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordFilingDate>%s</%sRecordFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordFilingDate, input_name='RecordFilingDate'), namespaceprefix_ , eol_))
        if self.RecordNotificationDate is not None:
            namespaceprefix_ = self.RecordNotificationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordNotificationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordNotificationDate>%s</%sRecordNotificationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordNotificationDate, input_name='RecordNotificationDate'), namespaceprefix_ , eol_))
        if self.RecordEffectiveDate is not None:
            namespaceprefix_ = self.RecordEffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordEffectiveDate>%s</%sRecordEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordEffectiveDate, input_name='RecordEffectiveDate'), namespaceprefix_ , eol_))
        if self.RecordTransferKind is not None:
            namespaceprefix_ = self.RecordTransferKind_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordTransferKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordTransferKind>%s</%sRecordTransferKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordTransferKind), input_name='RecordTransferKind')), namespaceprefix_ , eol_))
        if self.RecordReference is not None:
            namespaceprefix_ = self.RecordReference_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordReference>%s</%sRecordReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordReference), input_name='RecordReference')), namespaceprefix_ , eol_))
        if self.RecordLanguageCode is not None:
            namespaceprefix_ = self.RecordLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordLanguageCode>%s</%sRecordLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordLanguageCode), input_name='RecordLanguageCode')), namespaceprefix_ , eol_))
        if self.TradeMarkKeyDetails is not None:
            namespaceprefix_ = self.TradeMarkKeyDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKeyDetails_nsprefix_) else ''
            self.TradeMarkKeyDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKeyDetails', pretty_print=pretty_print)
        if self.RecordPublicationDetails is not None:
            namespaceprefix_ = self.RecordPublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublicationDetails_nsprefix_) else ''
            self.RecordPublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublicationDetails', pretty_print=pretty_print)
        if self.ClaimantDetails is not None:
            namespaceprefix_ = self.ClaimantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantDetails_nsprefix_) else ''
            self.ClaimantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.RecordEventDetails is not None:
            namespaceprefix_ = self.RecordEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEventDetails_nsprefix_) else ''
            self.RecordEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEventDetails', pretty_print=pretty_print)
        if self.RecordDocumentDetails is not None:
            namespaceprefix_ = self.RecordDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocumentDetails_nsprefix_) else ''
            self.RecordDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocumentDetails', pretty_print=pretty_print)
        if self.RecordCurrentStatusCode is not None:
            namespaceprefix_ = self.RecordCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusCode>%s</%sRecordCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordCurrentStatusCode), input_name='RecordCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.RecordCurrentStatusDate is not None:
            namespaceprefix_ = self.RecordCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordCurrentStatusDate>%s</%sRecordCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RecordCurrentStatusDate, input_name='RecordCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.CorrespondenceAddress is not None:
            namespaceprefix_ = self.CorrespondenceAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddress_nsprefix_) else ''
            self.CorrespondenceAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CorrespondenceAddress', pretty_print=pretty_print)
        if self.HolderDetails is not None:
            namespaceprefix_ = self.HolderDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.HolderDetails_nsprefix_) else ''
            self.HolderDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HolderDetails', pretty_print=pretty_print)
        if self.GoodsServicesLimitationDetails is not None:
            namespaceprefix_ = self.GoodsServicesLimitationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitationDetails_nsprefix_) else ''
            self.GoodsServicesLimitationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitationDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier')
            self.RecordIdentifier = value_
            self.RecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordFilingDate = dval_
            self.RecordFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordNotificationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordNotificationDate = dval_
            self.RecordNotificationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordEffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordEffectiveDate = dval_
            self.RecordEffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordTransferKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordTransferKind')
            value_ = self.gds_validate_string(value_, node, 'RecordTransferKind')
            self.RecordTransferKind = value_
            self.RecordTransferKind_nsprefix_ = child_.prefix
            # validate type RecordTransferKindType
            self.validate_RecordTransferKindType(self.RecordTransferKind)
        elif nodeName_ == 'RecordReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordReference')
            value_ = self.gds_validate_string(value_, node, 'RecordReference')
            self.RecordReference = value_
            self.RecordReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'RecordLanguageCode')
            self.RecordLanguageCode = value_
            self.RecordLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.RecordLanguageCode)
        elif nodeName_ == 'TradeMarkKeyDetails':
            obj_ = TradeMarkKeyDetailsType35.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKeyDetails = obj_
            obj_.original_tagname_ = 'TradeMarkKeyDetails'
        elif nodeName_ == 'RecordPublicationDetails':
            obj_ = RecordPublicationDetailsType36.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublicationDetails = obj_
            obj_.original_tagname_ = 'RecordPublicationDetails'
        elif nodeName_ == 'ClaimantDetails':
            obj_ = ClaimantDetailsType37.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantDetails = obj_
            obj_.original_tagname_ = 'ClaimantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType38.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'RecordEventDetails':
            obj_ = RecordEventDetailsType39.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEventDetails = obj_
            obj_.original_tagname_ = 'RecordEventDetails'
        elif nodeName_ == 'RecordDocumentDetails':
            obj_ = RecordDocumentDetailsType40.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocumentDetails = obj_
            obj_.original_tagname_ = 'RecordDocumentDetails'
        elif nodeName_ == 'RecordCurrentStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'RecordCurrentStatusCode')
            self.RecordCurrentStatusCode = value_
            self.RecordCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type RecordCurrentStatusCodeType
            self.validate_RecordCurrentStatusCodeType(self.RecordCurrentStatusCode)
        elif nodeName_ == 'RecordCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RecordCurrentStatusDate = dval_
            self.RecordCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CorrespondenceAddress':
            obj_ = CorrespondenceAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CorrespondenceAddress = obj_
            obj_.original_tagname_ = 'CorrespondenceAddress'
        elif nodeName_ == 'HolderDetails':
            obj_ = HolderDetailsType41.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HolderDetails = obj_
            obj_.original_tagname_ = 'HolderDetails'
        elif nodeName_ == 'GoodsServicesLimitationDetails':
            obj_ = GoodsServicesLimitationDetailsType42.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitationDetails = obj_
            obj_.original_tagname_ = 'GoodsServicesLimitationDetails'
        else:
            content_ = self.gds_build_any(child_, 'RecordTransferType')
            self.add_anytypeobjs_(content_)
# end class RecordTransferType


class RegistrationShortNotationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegistrationIdentifier=None, RegistrationDate=None, MarkVerbalElementText=None, DesignatedCountryDetails=None, GoodsServicesLimitation=None, ApplicantDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegistrationIdentifier = RegistrationIdentifier
        self.RegistrationIdentifier_nsprefix_ = None
        if isinstance(RegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RegistrationDate
        self.RegistrationDate = initvalue_
        self.RegistrationDate_nsprefix_ = None
        self.MarkVerbalElementText = MarkVerbalElementText
        self.MarkVerbalElementText_nsprefix_ = None
        self.DesignatedCountryDetails = DesignatedCountryDetails
        self.DesignatedCountryDetails_nsprefix_ = None
        self.GoodsServicesLimitation = GoodsServicesLimitation
        self.GoodsServicesLimitation_nsprefix_ = None
        self.ApplicantDetails = ApplicantDetails
        self.ApplicantDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegistrationShortNotationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegistrationShortNotationType.subclass:
            return RegistrationShortNotationType.subclass(*args_, **kwargs_)
        else:
            return RegistrationShortNotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegistrationIdentifier(self):
        return self.RegistrationIdentifier
    def set_RegistrationIdentifier(self, RegistrationIdentifier):
        self.RegistrationIdentifier = RegistrationIdentifier
    def get_RegistrationDate(self):
        return self.RegistrationDate
    def set_RegistrationDate(self, RegistrationDate):
        self.RegistrationDate = RegistrationDate
    def get_MarkVerbalElementText(self):
        return self.MarkVerbalElementText
    def set_MarkVerbalElementText(self, MarkVerbalElementText):
        self.MarkVerbalElementText = MarkVerbalElementText
    def get_DesignatedCountryDetails(self):
        return self.DesignatedCountryDetails
    def set_DesignatedCountryDetails(self, DesignatedCountryDetails):
        self.DesignatedCountryDetails = DesignatedCountryDetails
    def get_GoodsServicesLimitation(self):
        return self.GoodsServicesLimitation
    def set_GoodsServicesLimitation(self, GoodsServicesLimitation):
        self.GoodsServicesLimitation = GoodsServicesLimitation
    def get_ApplicantDetails(self):
        return self.ApplicantDetails
    def set_ApplicantDetails(self, ApplicantDetails):
        self.ApplicantDetails = ApplicantDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.RegistrationIdentifier is not None or
            self.RegistrationDate is not None or
            self.MarkVerbalElementText is not None or
            self.DesignatedCountryDetails is not None or
            self.GoodsServicesLimitation is not None or
            self.ApplicantDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RegistrationShortNotationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegistrationShortNotationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegistrationShortNotationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegistrationShortNotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegistrationShortNotationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RegistrationShortNotationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RegistrationShortNotationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegistrationIdentifier is not None:
            namespaceprefix_ = self.RegistrationIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationIdentifier>%s</%sRegistrationIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationIdentifier), input_name='RegistrationIdentifier')), namespaceprefix_ , eol_))
        if self.RegistrationDate is not None:
            namespaceprefix_ = self.RegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationDate>%s</%sRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RegistrationDate, input_name='RegistrationDate'), namespaceprefix_ , eol_))
        if self.MarkVerbalElementText is not None:
            namespaceprefix_ = self.MarkVerbalElementText_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkVerbalElementText_nsprefix_) else ''
            self.MarkVerbalElementText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkVerbalElementText', pretty_print=pretty_print)
        if self.DesignatedCountryDetails is not None:
            namespaceprefix_ = self.DesignatedCountryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DesignatedCountryDetails_nsprefix_) else ''
            self.DesignatedCountryDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DesignatedCountryDetails', pretty_print=pretty_print)
        if self.GoodsServicesLimitation is not None:
            namespaceprefix_ = self.GoodsServicesLimitation_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitation_nsprefix_) else ''
            self.GoodsServicesLimitation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitation', pretty_print=pretty_print)
        if self.ApplicantDetails is not None:
            namespaceprefix_ = self.ApplicantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantDetails_nsprefix_) else ''
            self.ApplicantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegistrationIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RegistrationIdentifier')
            self.RegistrationIdentifier = value_
            self.RegistrationIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RegistrationDate = dval_
            self.RegistrationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkVerbalElementText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkVerbalElementText = obj_
            obj_.original_tagname_ = 'MarkVerbalElementText'
        elif nodeName_ == 'DesignatedCountryDetails':
            obj_ = DesignatedCountryDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DesignatedCountryDetails = obj_
            obj_.original_tagname_ = 'DesignatedCountryDetails'
        elif nodeName_ == 'GoodsServicesLimitation':
            obj_ = GoodsServicesLimitationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitation = obj_
            obj_.original_tagname_ = 'GoodsServicesLimitation'
        elif nodeName_ == 'ApplicantDetails':
            obj_ = ApplicantDetailsType43.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantDetails = obj_
            obj_.original_tagname_ = 'ApplicantDetails'
        else:
            content_ = self.gds_build_any(child_, 'RegistrationShortNotationType')
            self.add_anytypeobjs_(content_)
# end class RegistrationShortNotationType


class ReimbursementFeeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FeeIdentifier=None, FeeReference=None, FeeAmount=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FeeIdentifier = FeeIdentifier
        self.FeeIdentifier_nsprefix_ = None
        self.FeeReference = FeeReference
        self.FeeReference_nsprefix_ = None
        self.FeeAmount = FeeAmount
        self.FeeAmount_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReimbursementFeeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReimbursementFeeType.subclass:
            return ReimbursementFeeType.subclass(*args_, **kwargs_)
        else:
            return ReimbursementFeeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FeeIdentifier(self):
        return self.FeeIdentifier
    def set_FeeIdentifier(self, FeeIdentifier):
        self.FeeIdentifier = FeeIdentifier
    def get_FeeReference(self):
        return self.FeeReference
    def set_FeeReference(self, FeeReference):
        self.FeeReference = FeeReference
    def get_FeeAmount(self):
        return self.FeeAmount
    def set_FeeAmount(self, FeeAmount):
        self.FeeAmount = FeeAmount
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.FeeIdentifier is not None or
            self.FeeReference is not None or
            self.FeeAmount is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementFeeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReimbursementFeeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReimbursementFeeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReimbursementFeeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReimbursementFeeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReimbursementFeeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementFeeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FeeIdentifier is not None:
            namespaceprefix_ = self.FeeIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeeIdentifier>%s</%sFeeIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FeeIdentifier), input_name='FeeIdentifier')), namespaceprefix_ , eol_))
        if self.FeeReference is not None:
            namespaceprefix_ = self.FeeReference_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeeReference>%s</%sFeeReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FeeReference), input_name='FeeReference')), namespaceprefix_ , eol_))
        if self.FeeAmount is not None:
            namespaceprefix_ = self.FeeAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.FeeAmount_nsprefix_) else ''
            self.FeeAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FeeAmount', pretty_print=pretty_print)
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FeeIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FeeIdentifier')
            value_ = self.gds_validate_string(value_, node, 'FeeIdentifier')
            self.FeeIdentifier = value_
            self.FeeIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'FeeReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FeeReference')
            value_ = self.gds_validate_string(value_, node, 'FeeReference')
            self.FeeReference = value_
            self.FeeReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'FeeAmount':
            obj_ = AmountType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FeeAmount = obj_
            obj_.original_tagname_ = 'FeeAmount'
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'ReimbursementFeeType')
            self.add_anytypeobjs_(content_)
# end class ReimbursementFeeType


class ReimbursementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReimbursementIdentifier=None, ReimbursementReference=None, PayeeName=None, ReimbursementStatus=None, Comment=None, ReimbursementDate=None, ReimbursementMethod=None, ReimbursementFeeDetails=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ReimbursementIdentifier = ReimbursementIdentifier
        self.ReimbursementIdentifier_nsprefix_ = None
        self.ReimbursementReference = ReimbursementReference
        self.ReimbursementReference_nsprefix_ = None
        self.PayeeName = PayeeName
        self.PayeeName_nsprefix_ = None
        self.ReimbursementStatus = ReimbursementStatus
        self.validate_ReimbursementStatusCodeType(self.ReimbursementStatus)
        self.ReimbursementStatus_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if isinstance(ReimbursementDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReimbursementDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ReimbursementDate
        self.ReimbursementDate = initvalue_
        self.ReimbursementDate_nsprefix_ = None
        self.ReimbursementMethod = ReimbursementMethod
        self.ReimbursementMethod_nsprefix_ = None
        self.ReimbursementFeeDetails = ReimbursementFeeDetails
        self.ReimbursementFeeDetails_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReimbursementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReimbursementType.subclass:
            return ReimbursementType.subclass(*args_, **kwargs_)
        else:
            return ReimbursementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReimbursementIdentifier(self):
        return self.ReimbursementIdentifier
    def set_ReimbursementIdentifier(self, ReimbursementIdentifier):
        self.ReimbursementIdentifier = ReimbursementIdentifier
    def get_ReimbursementReference(self):
        return self.ReimbursementReference
    def set_ReimbursementReference(self, ReimbursementReference):
        self.ReimbursementReference = ReimbursementReference
    def get_PayeeName(self):
        return self.PayeeName
    def set_PayeeName(self, PayeeName):
        self.PayeeName = PayeeName
    def get_ReimbursementStatus(self):
        return self.ReimbursementStatus
    def set_ReimbursementStatus(self, ReimbursementStatus):
        self.ReimbursementStatus = ReimbursementStatus
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_ReimbursementDate(self):
        return self.ReimbursementDate
    def set_ReimbursementDate(self, ReimbursementDate):
        self.ReimbursementDate = ReimbursementDate
    def get_ReimbursementMethod(self):
        return self.ReimbursementMethod
    def set_ReimbursementMethod(self, ReimbursementMethod):
        self.ReimbursementMethod = ReimbursementMethod
    def get_ReimbursementFeeDetails(self):
        return self.ReimbursementFeeDetails
    def set_ReimbursementFeeDetails(self, ReimbursementFeeDetails):
        self.ReimbursementFeeDetails = ReimbursementFeeDetails
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_ReimbursementStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.ReimbursementIdentifier is not None or
            self.ReimbursementReference is not None or
            self.PayeeName is not None or
            self.ReimbursementStatus is not None or
            self.Comment is not None or
            self.ReimbursementDate is not None or
            self.ReimbursementMethod is not None or
            self.ReimbursementFeeDetails is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReimbursementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReimbursementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReimbursementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReimbursementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReimbursementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReimbursementIdentifier is not None:
            namespaceprefix_ = self.ReimbursementIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReimbursementIdentifier>%s</%sReimbursementIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReimbursementIdentifier), input_name='ReimbursementIdentifier')), namespaceprefix_ , eol_))
        if self.ReimbursementReference is not None:
            namespaceprefix_ = self.ReimbursementReference_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReimbursementReference>%s</%sReimbursementReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReimbursementReference), input_name='ReimbursementReference')), namespaceprefix_ , eol_))
        if self.PayeeName is not None:
            namespaceprefix_ = self.PayeeName_nsprefix_ + ':' if (UseCapturedNS_ and self.PayeeName_nsprefix_) else ''
            self.PayeeName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PayeeName', pretty_print=pretty_print)
        if self.ReimbursementStatus is not None:
            namespaceprefix_ = self.ReimbursementStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReimbursementStatus>%s</%sReimbursementStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReimbursementStatus), input_name='ReimbursementStatus')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.ReimbursementDate is not None:
            namespaceprefix_ = self.ReimbursementDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReimbursementDate>%s</%sReimbursementDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ReimbursementDate, input_name='ReimbursementDate'), namespaceprefix_ , eol_))
        if self.ReimbursementMethod is not None:
            namespaceprefix_ = self.ReimbursementMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementMethod_nsprefix_) else ''
            self.ReimbursementMethod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReimbursementMethod', pretty_print=pretty_print)
        if self.ReimbursementFeeDetails is not None:
            namespaceprefix_ = self.ReimbursementFeeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementFeeDetails_nsprefix_) else ''
            self.ReimbursementFeeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReimbursementFeeDetails', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReimbursementIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReimbursementIdentifier')
            value_ = self.gds_validate_string(value_, node, 'ReimbursementIdentifier')
            self.ReimbursementIdentifier = value_
            self.ReimbursementIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReimbursementReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReimbursementReference')
            value_ = self.gds_validate_string(value_, node, 'ReimbursementReference')
            self.ReimbursementReference = value_
            self.ReimbursementReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'PayeeName':
            obj_ = NameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PayeeName = obj_
            obj_.original_tagname_ = 'PayeeName'
        elif nodeName_ == 'ReimbursementStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReimbursementStatus')
            value_ = self.gds_validate_string(value_, node, 'ReimbursementStatus')
            self.ReimbursementStatus = value_
            self.ReimbursementStatus_nsprefix_ = child_.prefix
            # validate type ReimbursementStatusCodeType
            self.validate_ReimbursementStatusCodeType(self.ReimbursementStatus)
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'ReimbursementDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ReimbursementDate = dval_
            self.ReimbursementDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReimbursementMethod':
            obj_ = PaymentMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReimbursementMethod = obj_
            obj_.original_tagname_ = 'ReimbursementMethod'
        elif nodeName_ == 'ReimbursementFeeDetails':
            obj_ = ReimbursementFeeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReimbursementFeeDetails = obj_
            obj_.original_tagname_ = 'ReimbursementFeeDetails'
        else:
            content_ = self.gds_build_any(child_, 'ReimbursementType')
            self.add_anytypeobjs_(content_)
# end class ReimbursementType


class RepresentationSizeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Height=None, Width=None, Unit=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Unit = Unit
        self.validate_UnitType(self.Unit)
        self.Unit_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentationSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentationSizeType.subclass:
            return RepresentationSizeType.subclass(*args_, **kwargs_)
        else:
            return RepresentationSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Unit(self):
        return self.Unit
    def set_Unit(self, Unit):
        self.Unit = Unit
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_UnitType(self, value):
        result = True
        # Validate type UnitType, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Centimetre', 'Inch', 'Pixel']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UnitType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Height is not None or
            self.Width is not None or
            self.Unit is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentationSizeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentationSizeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentationSizeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentationSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentationSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentationSizeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentationSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.Height, input_name='Height'), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_format_integer(self.Width, input_name='Width'), namespaceprefix_ , eol_))
        if self.Unit is not None:
            namespaceprefix_ = self.Unit_nsprefix_ + ':' if (UseCapturedNS_ and self.Unit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnit>%s</%sUnit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Unit), input_name='Unit')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Height' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Height')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Width')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Unit':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Unit')
            value_ = self.gds_validate_string(value_, node, 'Unit')
            self.Unit = value_
            self.Unit_nsprefix_ = child_.prefix
            # validate type UnitType
            self.validate_UnitType(self.Unit)
        else:
            content_ = self.gds_build_any(child_, 'RepresentationSizeType')
            self.add_anytypeobjs_(content_)
# end class RepresentationSizeType


class RepresentativeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, RepresentativeIdentifier=None, RepresentativeSequenceNumber=None, RepresentativeKindCode=None, RepresentativeNationalityCode=None, RepresentativeLegalEntity=None, RepresentativeIncorporationCountryCode=None, RepresentativeIncorporationState=None, Comment=None, RepresentativeAddressBook=None, RepresentativeVersion=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        if RepresentativeIdentifier is None:
            self.RepresentativeIdentifier = []
        else:
            self.RepresentativeIdentifier = RepresentativeIdentifier
        self.RepresentativeIdentifier_nsprefix_ = None
        self.RepresentativeSequenceNumber = RepresentativeSequenceNumber
        self.RepresentativeSequenceNumber_nsprefix_ = None
        self.RepresentativeKindCode = RepresentativeKindCode
        self.validate_RepresentativeKindCodeType(self.RepresentativeKindCode)
        self.RepresentativeKindCode_nsprefix_ = None
        self.RepresentativeNationalityCode = RepresentativeNationalityCode
        self.validate_NationalityCodeType(self.RepresentativeNationalityCode)
        self.RepresentativeNationalityCode_nsprefix_ = None
        self.RepresentativeLegalEntity = RepresentativeLegalEntity
        self.RepresentativeLegalEntity_nsprefix_ = None
        self.RepresentativeIncorporationCountryCode = RepresentativeIncorporationCountryCode
        self.validate_ISOCountryCodeType(self.RepresentativeIncorporationCountryCode)
        self.RepresentativeIncorporationCountryCode_nsprefix_ = None
        self.RepresentativeIncorporationState = RepresentativeIncorporationState
        self.RepresentativeIncorporationState_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.RepresentativeAddressBook = RepresentativeAddressBook
        self.RepresentativeAddressBook_nsprefix_ = None
        self.RepresentativeVersion = RepresentativeVersion
        self.RepresentativeVersion_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeType.subclass:
            return RepresentativeType.subclass(*args_, **kwargs_)
        else:
            return RepresentativeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeIdentifier(self):
        return self.RepresentativeIdentifier
    def set_RepresentativeIdentifier(self, RepresentativeIdentifier):
        self.RepresentativeIdentifier = RepresentativeIdentifier
    def add_RepresentativeIdentifier(self, value):
        self.RepresentativeIdentifier.append(value)
    def insert_RepresentativeIdentifier_at(self, index, value):
        self.RepresentativeIdentifier.insert(index, value)
    def replace_RepresentativeIdentifier_at(self, index, value):
        self.RepresentativeIdentifier[index] = value
    def get_RepresentativeSequenceNumber(self):
        return self.RepresentativeSequenceNumber
    def set_RepresentativeSequenceNumber(self, RepresentativeSequenceNumber):
        self.RepresentativeSequenceNumber = RepresentativeSequenceNumber
    def get_RepresentativeKindCode(self):
        return self.RepresentativeKindCode
    def set_RepresentativeKindCode(self, RepresentativeKindCode):
        self.RepresentativeKindCode = RepresentativeKindCode
    def get_RepresentativeNationalityCode(self):
        return self.RepresentativeNationalityCode
    def set_RepresentativeNationalityCode(self, RepresentativeNationalityCode):
        self.RepresentativeNationalityCode = RepresentativeNationalityCode
    def get_RepresentativeLegalEntity(self):
        return self.RepresentativeLegalEntity
    def set_RepresentativeLegalEntity(self, RepresentativeLegalEntity):
        self.RepresentativeLegalEntity = RepresentativeLegalEntity
    def get_RepresentativeIncorporationCountryCode(self):
        return self.RepresentativeIncorporationCountryCode
    def set_RepresentativeIncorporationCountryCode(self, RepresentativeIncorporationCountryCode):
        self.RepresentativeIncorporationCountryCode = RepresentativeIncorporationCountryCode
    def get_RepresentativeIncorporationState(self):
        return self.RepresentativeIncorporationState
    def set_RepresentativeIncorporationState(self, RepresentativeIncorporationState):
        self.RepresentativeIncorporationState = RepresentativeIncorporationState
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_RepresentativeAddressBook(self):
        return self.RepresentativeAddressBook
    def set_RepresentativeAddressBook(self, RepresentativeAddressBook):
        self.RepresentativeAddressBook = RepresentativeAddressBook
    def get_RepresentativeVersion(self):
        return self.RepresentativeVersion
    def set_RepresentativeVersion(self, RepresentativeVersion):
        self.RepresentativeVersion = RepresentativeVersion
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_RepresentativeKindCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.RepresentativeIdentifier or
            self.RepresentativeSequenceNumber is not None or
            self.RepresentativeKindCode is not None or
            self.RepresentativeNationalityCode is not None or
            self.RepresentativeLegalEntity is not None or
            self.RepresentativeIncorporationCountryCode is not None or
            self.RepresentativeIncorporationState is not None or
            self.Comment is not None or
            self.RepresentativeAddressBook is not None or
            self.RepresentativeVersion is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeIdentifier_ in self.RepresentativeIdentifier:
            namespaceprefix_ = self.RepresentativeIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeIdentifier_nsprefix_) else ''
            RepresentativeIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeIdentifier', pretty_print=pretty_print)
        if self.RepresentativeSequenceNumber is not None:
            namespaceprefix_ = self.RepresentativeSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepresentativeSequenceNumber>%s</%sRepresentativeSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.RepresentativeSequenceNumber, input_name='RepresentativeSequenceNumber'), namespaceprefix_ , eol_))
        if self.RepresentativeKindCode is not None:
            namespaceprefix_ = self.RepresentativeKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepresentativeKindCode>%s</%sRepresentativeKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RepresentativeKindCode), input_name='RepresentativeKindCode')), namespaceprefix_ , eol_))
        if self.RepresentativeNationalityCode is not None:
            namespaceprefix_ = self.RepresentativeNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepresentativeNationalityCode>%s</%sRepresentativeNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RepresentativeNationalityCode), input_name='RepresentativeNationalityCode')), namespaceprefix_ , eol_))
        if self.RepresentativeLegalEntity is not None:
            namespaceprefix_ = self.RepresentativeLegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeLegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepresentativeLegalEntity>%s</%sRepresentativeLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RepresentativeLegalEntity), input_name='RepresentativeLegalEntity')), namespaceprefix_ , eol_))
        if self.RepresentativeIncorporationCountryCode is not None:
            namespaceprefix_ = self.RepresentativeIncorporationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeIncorporationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepresentativeIncorporationCountryCode>%s</%sRepresentativeIncorporationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RepresentativeIncorporationCountryCode), input_name='RepresentativeIncorporationCountryCode')), namespaceprefix_ , eol_))
        if self.RepresentativeIncorporationState is not None:
            namespaceprefix_ = self.RepresentativeIncorporationState_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeIncorporationState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepresentativeIncorporationState>%s</%sRepresentativeIncorporationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RepresentativeIncorporationState), input_name='RepresentativeIncorporationState')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if self.RepresentativeAddressBook is not None:
            namespaceprefix_ = self.RepresentativeAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeAddressBook_nsprefix_) else ''
            self.RepresentativeAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeAddressBook', pretty_print=pretty_print)
        if self.RepresentativeVersion is not None:
            namespaceprefix_ = self.RepresentativeVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeVersion_nsprefix_) else ''
            self.RepresentativeVersion.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeVersion', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeIdentifier.append(obj_)
            obj_.original_tagname_ = 'RepresentativeIdentifier'
        elif nodeName_ == 'RepresentativeSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'RepresentativeSequenceNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'RepresentativeSequenceNumber')
            self.RepresentativeSequenceNumber = ival_
            self.RepresentativeSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'RepresentativeKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RepresentativeKindCode')
            value_ = self.gds_validate_string(value_, node, 'RepresentativeKindCode')
            self.RepresentativeKindCode = value_
            self.RepresentativeKindCode_nsprefix_ = child_.prefix
            # validate type RepresentativeKindCodeType
            self.validate_RepresentativeKindCodeType(self.RepresentativeKindCode)
        elif nodeName_ == 'RepresentativeNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RepresentativeNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'RepresentativeNationalityCode')
            self.RepresentativeNationalityCode = value_
            self.RepresentativeNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.RepresentativeNationalityCode)
        elif nodeName_ == 'RepresentativeLegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RepresentativeLegalEntity')
            value_ = self.gds_validate_string(value_, node, 'RepresentativeLegalEntity')
            self.RepresentativeLegalEntity = value_
            self.RepresentativeLegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'RepresentativeIncorporationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RepresentativeIncorporationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RepresentativeIncorporationCountryCode')
            self.RepresentativeIncorporationCountryCode = value_
            self.RepresentativeIncorporationCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.RepresentativeIncorporationCountryCode)
        elif nodeName_ == 'RepresentativeIncorporationState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RepresentativeIncorporationState')
            value_ = self.gds_validate_string(value_, node, 'RepresentativeIncorporationState')
            self.RepresentativeIncorporationState = value_
            self.RepresentativeIncorporationState_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'RepresentativeAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeAddressBook = obj_
            obj_.original_tagname_ = 'RepresentativeAddressBook'
        elif nodeName_ == 'RepresentativeVersion':
            obj_ = VersionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeVersion = obj_
            obj_.original_tagname_ = 'RepresentativeVersion'
        else:
            content_ = self.gds_build_any(child_, 'RepresentativeType')
            self.add_anytypeobjs_(content_)
# end class RepresentativeType


class RequestExaminationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequestExaminationAuthority=None, RequestExaminationKindCode=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RequestExaminationAuthority = RequestExaminationAuthority
        self.RequestExaminationAuthority_nsprefix_ = None
        self.RequestExaminationKindCode = RequestExaminationKindCode
        self.validate_RequestExaminationKindCodeType(self.RequestExaminationKindCode)
        self.RequestExaminationKindCode_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestExaminationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestExaminationType.subclass:
            return RequestExaminationType.subclass(*args_, **kwargs_)
        else:
            return RequestExaminationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequestExaminationAuthority(self):
        return self.RequestExaminationAuthority
    def set_RequestExaminationAuthority(self, RequestExaminationAuthority):
        self.RequestExaminationAuthority = RequestExaminationAuthority
    def get_RequestExaminationKindCode(self):
        return self.RequestExaminationKindCode
    def set_RequestExaminationKindCode(self, RequestExaminationKindCode):
        self.RequestExaminationKindCode = RequestExaminationKindCode
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RequestExaminationKindCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RequestExaminationAuthority is not None or
            self.RequestExaminationKindCode is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RequestExaminationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestExaminationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestExaminationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestExaminationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestExaminationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestExaminationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RequestExaminationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestExaminationAuthority is not None:
            namespaceprefix_ = self.RequestExaminationAuthority_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestExaminationAuthority_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestExaminationAuthority>%s</%sRequestExaminationAuthority>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestExaminationAuthority), input_name='RequestExaminationAuthority')), namespaceprefix_ , eol_))
        if self.RequestExaminationKindCode is not None:
            namespaceprefix_ = self.RequestExaminationKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestExaminationKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestExaminationKindCode>%s</%sRequestExaminationKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestExaminationKindCode), input_name='RequestExaminationKindCode')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequestExaminationAuthority':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestExaminationAuthority')
            value_ = self.gds_validate_string(value_, node, 'RequestExaminationAuthority')
            self.RequestExaminationAuthority = value_
            self.RequestExaminationAuthority_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestExaminationKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RequestExaminationKindCode')
            value_ = self.gds_validate_string(value_, node, 'RequestExaminationKindCode')
            self.RequestExaminationKindCode = value_
            self.RequestExaminationKindCode_nsprefix_ = child_.prefix
            # validate type RequestExaminationKindCodeType
            self.validate_RequestExaminationKindCodeType(self.RequestExaminationKindCode)
        else:
            content_ = self.gds_build_any(child_, 'RequestExaminationType')
            self.add_anytypeobjs_(content_)
# end class RequestExaminationType


class RequestSearchType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequestSearchAuthority=None, RequestSearchKindCode=None, EarlierSearchIdentifier=None, EarlierSearchDate=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RequestSearchAuthority = RequestSearchAuthority
        self.RequestSearchAuthority_nsprefix_ = None
        self.RequestSearchKindCode = RequestSearchKindCode
        self.validate_RequestSearchKindCodeType(self.RequestSearchKindCode)
        self.RequestSearchKindCode_nsprefix_ = None
        self.EarlierSearchIdentifier = EarlierSearchIdentifier
        self.EarlierSearchIdentifier_nsprefix_ = None
        if isinstance(EarlierSearchDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EarlierSearchDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EarlierSearchDate
        self.EarlierSearchDate = initvalue_
        self.EarlierSearchDate_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestSearchType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestSearchType.subclass:
            return RequestSearchType.subclass(*args_, **kwargs_)
        else:
            return RequestSearchType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequestSearchAuthority(self):
        return self.RequestSearchAuthority
    def set_RequestSearchAuthority(self, RequestSearchAuthority):
        self.RequestSearchAuthority = RequestSearchAuthority
    def get_RequestSearchKindCode(self):
        return self.RequestSearchKindCode
    def set_RequestSearchKindCode(self, RequestSearchKindCode):
        self.RequestSearchKindCode = RequestSearchKindCode
    def get_EarlierSearchIdentifier(self):
        return self.EarlierSearchIdentifier
    def set_EarlierSearchIdentifier(self, EarlierSearchIdentifier):
        self.EarlierSearchIdentifier = EarlierSearchIdentifier
    def get_EarlierSearchDate(self):
        return self.EarlierSearchDate
    def set_EarlierSearchDate(self, EarlierSearchDate):
        self.EarlierSearchDate = EarlierSearchDate
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_RequestSearchKindCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RequestSearchAuthority is not None or
            self.RequestSearchKindCode is not None or
            self.EarlierSearchIdentifier is not None or
            self.EarlierSearchDate is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RequestSearchType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestSearchType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestSearchType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestSearchType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestSearchType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestSearchType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RequestSearchType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestSearchAuthority is not None:
            namespaceprefix_ = self.RequestSearchAuthority_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSearchAuthority_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestSearchAuthority>%s</%sRequestSearchAuthority>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestSearchAuthority), input_name='RequestSearchAuthority')), namespaceprefix_ , eol_))
        if self.RequestSearchKindCode is not None:
            namespaceprefix_ = self.RequestSearchKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSearchKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestSearchKindCode>%s</%sRequestSearchKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestSearchKindCode), input_name='RequestSearchKindCode')), namespaceprefix_ , eol_))
        if self.EarlierSearchIdentifier is not None:
            namespaceprefix_ = self.EarlierSearchIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierSearchIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarlierSearchIdentifier>%s</%sEarlierSearchIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EarlierSearchIdentifier), input_name='EarlierSearchIdentifier')), namespaceprefix_ , eol_))
        if self.EarlierSearchDate is not None:
            namespaceprefix_ = self.EarlierSearchDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierSearchDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarlierSearchDate>%s</%sEarlierSearchDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EarlierSearchDate, input_name='EarlierSearchDate'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequestSearchAuthority':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestSearchAuthority')
            value_ = self.gds_validate_string(value_, node, 'RequestSearchAuthority')
            self.RequestSearchAuthority = value_
            self.RequestSearchAuthority_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestSearchKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RequestSearchKindCode')
            value_ = self.gds_validate_string(value_, node, 'RequestSearchKindCode')
            self.RequestSearchKindCode = value_
            self.RequestSearchKindCode_nsprefix_ = child_.prefix
            # validate type RequestSearchKindCodeType
            self.validate_RequestSearchKindCodeType(self.RequestSearchKindCode)
        elif nodeName_ == 'EarlierSearchIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EarlierSearchIdentifier')
            value_ = self.gds_validate_string(value_, node, 'EarlierSearchIdentifier')
            self.EarlierSearchIdentifier = value_
            self.EarlierSearchIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'EarlierSearchDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EarlierSearchDate = dval_
            self.EarlierSearchDate_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'RequestSearchType')
            self.add_anytypeobjs_(content_)
# end class RequestSearchType


class RequestSoftwareType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequestSoftwareName=None, RequestSoftwareVersion=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RequestSoftwareName = RequestSoftwareName
        self.RequestSoftwareName_nsprefix_ = None
        self.RequestSoftwareVersion = RequestSoftwareVersion
        self.RequestSoftwareVersion_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestSoftwareType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestSoftwareType.subclass:
            return RequestSoftwareType.subclass(*args_, **kwargs_)
        else:
            return RequestSoftwareType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequestSoftwareName(self):
        return self.RequestSoftwareName
    def set_RequestSoftwareName(self, RequestSoftwareName):
        self.RequestSoftwareName = RequestSoftwareName
    def get_RequestSoftwareVersion(self):
        return self.RequestSoftwareVersion
    def set_RequestSoftwareVersion(self, RequestSoftwareVersion):
        self.RequestSoftwareVersion = RequestSoftwareVersion
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.RequestSoftwareName is not None or
            self.RequestSoftwareVersion is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RequestSoftwareType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestSoftwareType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestSoftwareType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestSoftwareType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestSoftwareType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestSoftwareType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RequestSoftwareType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestSoftwareName is not None:
            namespaceprefix_ = self.RequestSoftwareName_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSoftwareName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestSoftwareName>%s</%sRequestSoftwareName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestSoftwareName), input_name='RequestSoftwareName')), namespaceprefix_ , eol_))
        if self.RequestSoftwareVersion is not None:
            namespaceprefix_ = self.RequestSoftwareVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSoftwareVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestSoftwareVersion>%s</%sRequestSoftwareVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestSoftwareVersion), input_name='RequestSoftwareVersion')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequestSoftwareName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestSoftwareName')
            value_ = self.gds_validate_string(value_, node, 'RequestSoftwareName')
            self.RequestSoftwareName = value_
            self.RequestSoftwareName_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestSoftwareVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestSoftwareVersion')
            value_ = self.gds_validate_string(value_, node, 'RequestSoftwareVersion')
            self.RequestSoftwareVersion = value_
            self.RequestSoftwareVersion_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'RequestSoftwareType')
            self.add_anytypeobjs_(content_)
# end class RequestSoftwareType


class RespondentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, RespondentIdentifier=None, RespondentSequenceNumber=None, RespondentNationalityCode=None, RespondentLegalEntity=None, RespondentIncorporationCountryCode=None, RespondentIncorporationState=None, Comment=None, RespondentAddressBook=None, RespondentEntitlement=None, RespondentVersion=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        if RespondentIdentifier is None:
            self.RespondentIdentifier = []
        else:
            self.RespondentIdentifier = RespondentIdentifier
        self.RespondentIdentifier_nsprefix_ = None
        self.RespondentSequenceNumber = RespondentSequenceNumber
        self.RespondentSequenceNumber_nsprefix_ = None
        self.RespondentNationalityCode = RespondentNationalityCode
        self.validate_NationalityCodeType(self.RespondentNationalityCode)
        self.RespondentNationalityCode_nsprefix_ = None
        self.RespondentLegalEntity = RespondentLegalEntity
        self.RespondentLegalEntity_nsprefix_ = None
        self.RespondentIncorporationCountryCode = RespondentIncorporationCountryCode
        self.validate_ISOCountryCodeType(self.RespondentIncorporationCountryCode)
        self.RespondentIncorporationCountryCode_nsprefix_ = None
        self.RespondentIncorporationState = RespondentIncorporationState
        self.RespondentIncorporationState_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        self.RespondentAddressBook = RespondentAddressBook
        self.RespondentAddressBook_nsprefix_ = None
        self.RespondentEntitlement = RespondentEntitlement
        self.RespondentEntitlement_nsprefix_ = None
        self.RespondentVersion = RespondentVersion
        self.RespondentVersion_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RespondentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RespondentType.subclass:
            return RespondentType.subclass(*args_, **kwargs_)
        else:
            return RespondentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RespondentIdentifier(self):
        return self.RespondentIdentifier
    def set_RespondentIdentifier(self, RespondentIdentifier):
        self.RespondentIdentifier = RespondentIdentifier
    def add_RespondentIdentifier(self, value):
        self.RespondentIdentifier.append(value)
    def insert_RespondentIdentifier_at(self, index, value):
        self.RespondentIdentifier.insert(index, value)
    def replace_RespondentIdentifier_at(self, index, value):
        self.RespondentIdentifier[index] = value
    def get_RespondentSequenceNumber(self):
        return self.RespondentSequenceNumber
    def set_RespondentSequenceNumber(self, RespondentSequenceNumber):
        self.RespondentSequenceNumber = RespondentSequenceNumber
    def get_RespondentNationalityCode(self):
        return self.RespondentNationalityCode
    def set_RespondentNationalityCode(self, RespondentNationalityCode):
        self.RespondentNationalityCode = RespondentNationalityCode
    def get_RespondentLegalEntity(self):
        return self.RespondentLegalEntity
    def set_RespondentLegalEntity(self, RespondentLegalEntity):
        self.RespondentLegalEntity = RespondentLegalEntity
    def get_RespondentIncorporationCountryCode(self):
        return self.RespondentIncorporationCountryCode
    def set_RespondentIncorporationCountryCode(self, RespondentIncorporationCountryCode):
        self.RespondentIncorporationCountryCode = RespondentIncorporationCountryCode
    def get_RespondentIncorporationState(self):
        return self.RespondentIncorporationState
    def set_RespondentIncorporationState(self, RespondentIncorporationState):
        self.RespondentIncorporationState = RespondentIncorporationState
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_RespondentAddressBook(self):
        return self.RespondentAddressBook
    def set_RespondentAddressBook(self, RespondentAddressBook):
        self.RespondentAddressBook = RespondentAddressBook
    def get_RespondentEntitlement(self):
        return self.RespondentEntitlement
    def set_RespondentEntitlement(self, RespondentEntitlement):
        self.RespondentEntitlement = RespondentEntitlement
    def get_RespondentVersion(self):
        return self.RespondentVersion
    def set_RespondentVersion(self, RespondentVersion):
        self.RespondentVersion = RespondentVersion
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.RespondentIdentifier or
            self.RespondentSequenceNumber is not None or
            self.RespondentNationalityCode is not None or
            self.RespondentLegalEntity is not None or
            self.RespondentIncorporationCountryCode is not None or
            self.RespondentIncorporationState is not None or
            self.Comment is not None or
            self.RespondentAddressBook is not None or
            self.RespondentEntitlement is not None or
            self.RespondentVersion is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RespondentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RespondentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RespondentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RespondentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RespondentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RespondentType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RespondentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RespondentIdentifier_ in self.RespondentIdentifier:
            namespaceprefix_ = self.RespondentIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentIdentifier_nsprefix_) else ''
            RespondentIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RespondentIdentifier', pretty_print=pretty_print)
        if self.RespondentSequenceNumber is not None:
            namespaceprefix_ = self.RespondentSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRespondentSequenceNumber>%s</%sRespondentSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.RespondentSequenceNumber, input_name='RespondentSequenceNumber'), namespaceprefix_ , eol_))
        if self.RespondentNationalityCode is not None:
            namespaceprefix_ = self.RespondentNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRespondentNationalityCode>%s</%sRespondentNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RespondentNationalityCode), input_name='RespondentNationalityCode')), namespaceprefix_ , eol_))
        if self.RespondentLegalEntity is not None:
            namespaceprefix_ = self.RespondentLegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentLegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRespondentLegalEntity>%s</%sRespondentLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RespondentLegalEntity), input_name='RespondentLegalEntity')), namespaceprefix_ , eol_))
        if self.RespondentIncorporationCountryCode is not None:
            namespaceprefix_ = self.RespondentIncorporationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentIncorporationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRespondentIncorporationCountryCode>%s</%sRespondentIncorporationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RespondentIncorporationCountryCode), input_name='RespondentIncorporationCountryCode')), namespaceprefix_ , eol_))
        if self.RespondentIncorporationState is not None:
            namespaceprefix_ = self.RespondentIncorporationState_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentIncorporationState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRespondentIncorporationState>%s</%sRespondentIncorporationState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RespondentIncorporationState), input_name='RespondentIncorporationState')), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment), input_name='Comment')), namespaceprefix_ , eol_))
        if self.RespondentAddressBook is not None:
            namespaceprefix_ = self.RespondentAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentAddressBook_nsprefix_) else ''
            self.RespondentAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RespondentAddressBook', pretty_print=pretty_print)
        if self.RespondentEntitlement is not None:
            namespaceprefix_ = self.RespondentEntitlement_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentEntitlement_nsprefix_) else ''
            self.RespondentEntitlement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RespondentEntitlement', pretty_print=pretty_print)
        if self.RespondentVersion is not None:
            namespaceprefix_ = self.RespondentVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentVersion_nsprefix_) else ''
            self.RespondentVersion.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RespondentVersion', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RespondentIdentifier':
            obj_ = IdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RespondentIdentifier.append(obj_)
            obj_.original_tagname_ = 'RespondentIdentifier'
        elif nodeName_ == 'RespondentSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'RespondentSequenceNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'RespondentSequenceNumber')
            self.RespondentSequenceNumber = ival_
            self.RespondentSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'RespondentNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RespondentNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'RespondentNationalityCode')
            self.RespondentNationalityCode = value_
            self.RespondentNationalityCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.RespondentNationalityCode)
        elif nodeName_ == 'RespondentLegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RespondentLegalEntity')
            value_ = self.gds_validate_string(value_, node, 'RespondentLegalEntity')
            self.RespondentLegalEntity = value_
            self.RespondentLegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'RespondentIncorporationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RespondentIncorporationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RespondentIncorporationCountryCode')
            self.RespondentIncorporationCountryCode = value_
            self.RespondentIncorporationCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.RespondentIncorporationCountryCode)
        elif nodeName_ == 'RespondentIncorporationState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RespondentIncorporationState')
            value_ = self.gds_validate_string(value_, node, 'RespondentIncorporationState')
            self.RespondentIncorporationState = value_
            self.RespondentIncorporationState_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment')
            value_ = self.gds_validate_string(value_, node, 'Comment')
            self.Comment = value_
            self.Comment_nsprefix_ = child_.prefix
        elif nodeName_ == 'RespondentAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RespondentAddressBook = obj_
            obj_.original_tagname_ = 'RespondentAddressBook'
        elif nodeName_ == 'RespondentEntitlement':
            obj_ = EntitlementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RespondentEntitlement = obj_
            obj_.original_tagname_ = 'RespondentEntitlement'
        elif nodeName_ == 'RespondentVersion':
            obj_ = VersionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RespondentVersion = obj_
            obj_.original_tagname_ = 'RespondentVersion'
        else:
            content_ = self.gds_build_any(child_, 'RespondentType')
            self.add_anytypeobjs_(content_)
# end class RespondentType


class SeniorityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SeniorityCountryCode=None, SeniorityApplicationNumber=None, SeniorityApplicationDate=None, SeniorityFilingDate=None, SeniorityRegistrationNumber=None, SeniorityRegistrationDate=None, SeniorityPublicationDate=None, InternationalTradeMarkCode=None, SeniorityPartialIndicator=None, SeniorityPartialGoodsServices=None, SeniorityStatusCode=None, SeniorityStatusDate=None, Comment=None, SeniorityDocument=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SeniorityCountryCode = SeniorityCountryCode
        self.validate_WIPOST3CodeType(self.SeniorityCountryCode)
        self.SeniorityCountryCode_nsprefix_ = None
        self.SeniorityApplicationNumber = SeniorityApplicationNumber
        self.SeniorityApplicationNumber_nsprefix_ = None
        if isinstance(SeniorityApplicationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SeniorityApplicationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SeniorityApplicationDate
        self.SeniorityApplicationDate = initvalue_
        self.SeniorityApplicationDate_nsprefix_ = None
        if isinstance(SeniorityFilingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SeniorityFilingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SeniorityFilingDate
        self.SeniorityFilingDate = initvalue_
        self.SeniorityFilingDate_nsprefix_ = None
        self.SeniorityRegistrationNumber = SeniorityRegistrationNumber
        self.SeniorityRegistrationNumber_nsprefix_ = None
        if isinstance(SeniorityRegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SeniorityRegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SeniorityRegistrationDate
        self.SeniorityRegistrationDate = initvalue_
        self.SeniorityRegistrationDate_nsprefix_ = None
        if isinstance(SeniorityPublicationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SeniorityPublicationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SeniorityPublicationDate
        self.SeniorityPublicationDate = initvalue_
        self.SeniorityPublicationDate_nsprefix_ = None
        self.InternationalTradeMarkCode = InternationalTradeMarkCode
        self.validate_InternationalTradeMarkCodeType(self.InternationalTradeMarkCode)
        self.InternationalTradeMarkCode_nsprefix_ = None
        self.SeniorityPartialIndicator = SeniorityPartialIndicator
        self.SeniorityPartialIndicator_nsprefix_ = None
        self.SeniorityPartialGoodsServices = SeniorityPartialGoodsServices
        self.SeniorityPartialGoodsServices_nsprefix_ = None
        self.SeniorityStatusCode = SeniorityStatusCode
        self.validate_SeniorityStatusCodeType(self.SeniorityStatusCode)
        self.SeniorityStatusCode_nsprefix_ = None
        if isinstance(SeniorityStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SeniorityStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SeniorityStatusDate
        self.SeniorityStatusDate = initvalue_
        self.SeniorityStatusDate_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if SeniorityDocument is None:
            self.SeniorityDocument = []
        else:
            self.SeniorityDocument = SeniorityDocument
        self.SeniorityDocument_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SeniorityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SeniorityType.subclass:
            return SeniorityType.subclass(*args_, **kwargs_)
        else:
            return SeniorityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SeniorityCountryCode(self):
        return self.SeniorityCountryCode
    def set_SeniorityCountryCode(self, SeniorityCountryCode):
        self.SeniorityCountryCode = SeniorityCountryCode
    def get_SeniorityApplicationNumber(self):
        return self.SeniorityApplicationNumber
    def set_SeniorityApplicationNumber(self, SeniorityApplicationNumber):
        self.SeniorityApplicationNumber = SeniorityApplicationNumber
    def get_SeniorityApplicationDate(self):
        return self.SeniorityApplicationDate
    def set_SeniorityApplicationDate(self, SeniorityApplicationDate):
        self.SeniorityApplicationDate = SeniorityApplicationDate
    def get_SeniorityFilingDate(self):
        return self.SeniorityFilingDate
    def set_SeniorityFilingDate(self, SeniorityFilingDate):
        self.SeniorityFilingDate = SeniorityFilingDate
    def get_SeniorityRegistrationNumber(self):
        return self.SeniorityRegistrationNumber
    def set_SeniorityRegistrationNumber(self, SeniorityRegistrationNumber):
        self.SeniorityRegistrationNumber = SeniorityRegistrationNumber
    def get_SeniorityRegistrationDate(self):
        return self.SeniorityRegistrationDate
    def set_SeniorityRegistrationDate(self, SeniorityRegistrationDate):
        self.SeniorityRegistrationDate = SeniorityRegistrationDate
    def get_SeniorityPublicationDate(self):
        return self.SeniorityPublicationDate
    def set_SeniorityPublicationDate(self, SeniorityPublicationDate):
        self.SeniorityPublicationDate = SeniorityPublicationDate
    def get_InternationalTradeMarkCode(self):
        return self.InternationalTradeMarkCode
    def set_InternationalTradeMarkCode(self, InternationalTradeMarkCode):
        self.InternationalTradeMarkCode = InternationalTradeMarkCode
    def get_SeniorityPartialIndicator(self):
        return self.SeniorityPartialIndicator
    def set_SeniorityPartialIndicator(self, SeniorityPartialIndicator):
        self.SeniorityPartialIndicator = SeniorityPartialIndicator
    def get_SeniorityPartialGoodsServices(self):
        return self.SeniorityPartialGoodsServices
    def set_SeniorityPartialGoodsServices(self, SeniorityPartialGoodsServices):
        self.SeniorityPartialGoodsServices = SeniorityPartialGoodsServices
    def get_SeniorityStatusCode(self):
        return self.SeniorityStatusCode
    def set_SeniorityStatusCode(self, SeniorityStatusCode):
        self.SeniorityStatusCode = SeniorityStatusCode
    def get_SeniorityStatusDate(self):
        return self.SeniorityStatusDate
    def set_SeniorityStatusDate(self, SeniorityStatusDate):
        self.SeniorityStatusDate = SeniorityStatusDate
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_SeniorityDocument(self):
        return self.SeniorityDocument
    def set_SeniorityDocument(self, SeniorityDocument):
        self.SeniorityDocument = SeniorityDocument
    def add_SeniorityDocument(self, value):
        self.SeniorityDocument.append(value)
    def insert_SeniorityDocument_at(self, index, value):
        self.SeniorityDocument.insert(index, value)
    def replace_SeniorityDocument_at(self, index, value):
        self.SeniorityDocument[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_WIPOST3CodeType(self, value):
        result = True
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_InternationalTradeMarkCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_SeniorityStatusCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.SeniorityCountryCode is not None or
            self.SeniorityApplicationNumber is not None or
            self.SeniorityApplicationDate is not None or
            self.SeniorityFilingDate is not None or
            self.SeniorityRegistrationNumber is not None or
            self.SeniorityRegistrationDate is not None or
            self.SeniorityPublicationDate is not None or
            self.InternationalTradeMarkCode is not None or
            self.SeniorityPartialIndicator is not None or
            self.SeniorityPartialGoodsServices is not None or
            self.SeniorityStatusCode is not None or
            self.SeniorityStatusDate is not None or
            self.Comment is not None or
            self.SeniorityDocument or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SeniorityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SeniorityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SeniorityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SeniorityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SeniorityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SeniorityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SeniorityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SeniorityCountryCode is not None:
            namespaceprefix_ = self.SeniorityCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityCountryCode>%s</%sSeniorityCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SeniorityCountryCode), input_name='SeniorityCountryCode')), namespaceprefix_ , eol_))
        if self.SeniorityApplicationNumber is not None:
            namespaceprefix_ = self.SeniorityApplicationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityApplicationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityApplicationNumber>%s</%sSeniorityApplicationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SeniorityApplicationNumber), input_name='SeniorityApplicationNumber')), namespaceprefix_ , eol_))
        if self.SeniorityApplicationDate is not None:
            namespaceprefix_ = self.SeniorityApplicationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityApplicationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityApplicationDate>%s</%sSeniorityApplicationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SeniorityApplicationDate, input_name='SeniorityApplicationDate'), namespaceprefix_ , eol_))
        if self.SeniorityFilingDate is not None:
            namespaceprefix_ = self.SeniorityFilingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityFilingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityFilingDate>%s</%sSeniorityFilingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SeniorityFilingDate, input_name='SeniorityFilingDate'), namespaceprefix_ , eol_))
        if self.SeniorityRegistrationNumber is not None:
            namespaceprefix_ = self.SeniorityRegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityRegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityRegistrationNumber>%s</%sSeniorityRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SeniorityRegistrationNumber), input_name='SeniorityRegistrationNumber')), namespaceprefix_ , eol_))
        if self.SeniorityRegistrationDate is not None:
            namespaceprefix_ = self.SeniorityRegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityRegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityRegistrationDate>%s</%sSeniorityRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SeniorityRegistrationDate, input_name='SeniorityRegistrationDate'), namespaceprefix_ , eol_))
        if self.SeniorityPublicationDate is not None:
            namespaceprefix_ = self.SeniorityPublicationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityPublicationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityPublicationDate>%s</%sSeniorityPublicationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SeniorityPublicationDate, input_name='SeniorityPublicationDate'), namespaceprefix_ , eol_))
        if self.InternationalTradeMarkCode is not None:
            namespaceprefix_ = self.InternationalTradeMarkCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalTradeMarkCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalTradeMarkCode>%s</%sInternationalTradeMarkCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternationalTradeMarkCode), input_name='InternationalTradeMarkCode')), namespaceprefix_ , eol_))
        if self.SeniorityPartialIndicator is not None:
            namespaceprefix_ = self.SeniorityPartialIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityPartialIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityPartialIndicator>%s</%sSeniorityPartialIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.SeniorityPartialIndicator, input_name='SeniorityPartialIndicator'), namespaceprefix_ , eol_))
        if self.SeniorityPartialGoodsServices is not None:
            namespaceprefix_ = self.SeniorityPartialGoodsServices_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityPartialGoodsServices_nsprefix_) else ''
            self.SeniorityPartialGoodsServices.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SeniorityPartialGoodsServices', pretty_print=pretty_print)
        if self.SeniorityStatusCode is not None:
            namespaceprefix_ = self.SeniorityStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityStatusCode>%s</%sSeniorityStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SeniorityStatusCode), input_name='SeniorityStatusCode')), namespaceprefix_ , eol_))
        if self.SeniorityStatusDate is not None:
            namespaceprefix_ = self.SeniorityStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeniorityStatusDate>%s</%sSeniorityStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SeniorityStatusDate, input_name='SeniorityStatusDate'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        for SeniorityDocument_ in self.SeniorityDocument:
            namespaceprefix_ = self.SeniorityDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityDocument_nsprefix_) else ''
            SeniorityDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SeniorityDocument', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SeniorityCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SeniorityCountryCode')
            value_ = self.gds_validate_string(value_, node, 'SeniorityCountryCode')
            self.SeniorityCountryCode = value_
            self.SeniorityCountryCode_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.SeniorityCountryCode)
        elif nodeName_ == 'SeniorityApplicationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SeniorityApplicationNumber')
            value_ = self.gds_validate_string(value_, node, 'SeniorityApplicationNumber')
            self.SeniorityApplicationNumber = value_
            self.SeniorityApplicationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeniorityApplicationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SeniorityApplicationDate = dval_
            self.SeniorityApplicationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeniorityFilingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SeniorityFilingDate = dval_
            self.SeniorityFilingDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeniorityRegistrationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SeniorityRegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'SeniorityRegistrationNumber')
            self.SeniorityRegistrationNumber = value_
            self.SeniorityRegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeniorityRegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SeniorityRegistrationDate = dval_
            self.SeniorityRegistrationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeniorityPublicationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SeniorityPublicationDate = dval_
            self.SeniorityPublicationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'InternationalTradeMarkCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InternationalTradeMarkCode')
            value_ = self.gds_validate_string(value_, node, 'InternationalTradeMarkCode')
            self.InternationalTradeMarkCode = value_
            self.InternationalTradeMarkCode_nsprefix_ = child_.prefix
            # validate type InternationalTradeMarkCodeType
            self.validate_InternationalTradeMarkCodeType(self.InternationalTradeMarkCode)
        elif nodeName_ == 'SeniorityPartialIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'SeniorityPartialIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'SeniorityPartialIndicator')
            self.SeniorityPartialIndicator = ival_
            self.SeniorityPartialIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeniorityPartialGoodsServices':
            obj_ = GoodsServicesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SeniorityPartialGoodsServices = obj_
            obj_.original_tagname_ = 'SeniorityPartialGoodsServices'
        elif nodeName_ == 'SeniorityStatusCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SeniorityStatusCode')
            value_ = self.gds_validate_string(value_, node, 'SeniorityStatusCode')
            self.SeniorityStatusCode = value_
            self.SeniorityStatusCode_nsprefix_ = child_.prefix
            # validate type SeniorityStatusCodeType
            self.validate_SeniorityStatusCodeType(self.SeniorityStatusCode)
        elif nodeName_ == 'SeniorityStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SeniorityStatusDate = dval_
            self.SeniorityStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        elif nodeName_ == 'SeniorityDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SeniorityDocument.append(obj_)
            obj_.original_tagname_ = 'SeniorityDocument'
        else:
            content_ = self.gds_build_any(child_, 'SeniorityType')
            self.add_anytypeobjs_(content_)
# end class SeniorityType


class SignatoryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SignatoryName=None, SignatoryAddress=None, SignatureDate=None, SignaturePlace=None, SignatureManner=None, SignatureAssociatedText=None, SignatoryCapacityCode=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SignatoryName = SignatoryName
        self.SignatoryName_nsprefix_ = None
        self.SignatoryAddress = SignatoryAddress
        self.SignatoryAddress_nsprefix_ = None
        if isinstance(SignatureDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SignatureDate, '%Y-%m-%d').date()
        else:
            initvalue_ = SignatureDate
        self.SignatureDate = initvalue_
        self.SignatureDate_nsprefix_ = None
        self.SignaturePlace = SignaturePlace
        self.SignaturePlace_nsprefix_ = None
        self.SignatureManner = SignatureManner
        self.validate_SignatureMannerType(self.SignatureManner)
        self.SignatureManner_nsprefix_ = None
        self.SignatureAssociatedText = SignatureAssociatedText
        self.SignatureAssociatedText_nsprefix_ = None
        self.SignatoryCapacityCode = SignatoryCapacityCode
        self.validate_RoleType(self.SignatoryCapacityCode)
        self.SignatoryCapacityCode_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatoryType.subclass:
            return SignatoryType.subclass(*args_, **kwargs_)
        else:
            return SignatoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SignatoryName(self):
        return self.SignatoryName
    def set_SignatoryName(self, SignatoryName):
        self.SignatoryName = SignatoryName
    def get_SignatoryAddress(self):
        return self.SignatoryAddress
    def set_SignatoryAddress(self, SignatoryAddress):
        self.SignatoryAddress = SignatoryAddress
    def get_SignatureDate(self):
        return self.SignatureDate
    def set_SignatureDate(self, SignatureDate):
        self.SignatureDate = SignatureDate
    def get_SignaturePlace(self):
        return self.SignaturePlace
    def set_SignaturePlace(self, SignaturePlace):
        self.SignaturePlace = SignaturePlace
    def get_SignatureManner(self):
        return self.SignatureManner
    def set_SignatureManner(self, SignatureManner):
        self.SignatureManner = SignatureManner
    def get_SignatureAssociatedText(self):
        return self.SignatureAssociatedText
    def set_SignatureAssociatedText(self, SignatureAssociatedText):
        self.SignatureAssociatedText = SignatureAssociatedText
    def get_SignatoryCapacityCode(self):
        return self.SignatoryCapacityCode
    def set_SignatoryCapacityCode(self, SignatoryCapacityCode):
        self.SignatoryCapacityCode = SignatoryCapacityCode
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def validate_SignatureMannerType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_RoleType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.SignatoryName is not None or
            self.SignatoryAddress is not None or
            self.SignatureDate is not None or
            self.SignaturePlace is not None or
            self.SignatureManner is not None or
            self.SignatureAssociatedText is not None or
            self.SignatoryCapacityCode is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SignatoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatoryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SignatoryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SignatoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignatoryName is not None:
            namespaceprefix_ = self.SignatoryName_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatoryName_nsprefix_) else ''
            self.SignatoryName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatoryName', pretty_print=pretty_print)
        if self.SignatoryAddress is not None:
            namespaceprefix_ = self.SignatoryAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatoryAddress_nsprefix_) else ''
            self.SignatoryAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatoryAddress', pretty_print=pretty_print)
        if self.SignatureDate is not None:
            namespaceprefix_ = self.SignatureDate_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureDate>%s</%sSignatureDate>%s' % (namespaceprefix_ , self.gds_format_date(self.SignatureDate, input_name='SignatureDate'), namespaceprefix_ , eol_))
        if self.SignaturePlace is not None:
            namespaceprefix_ = self.SignaturePlace_nsprefix_ + ':' if (UseCapturedNS_ and self.SignaturePlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignaturePlace>%s</%sSignaturePlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignaturePlace), input_name='SignaturePlace')), namespaceprefix_ , eol_))
        if self.SignatureManner is not None:
            namespaceprefix_ = self.SignatureManner_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureManner_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureManner>%s</%sSignatureManner>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatureManner), input_name='SignatureManner')), namespaceprefix_ , eol_))
        if self.SignatureAssociatedText is not None:
            namespaceprefix_ = self.SignatureAssociatedText_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureAssociatedText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureAssociatedText>%s</%sSignatureAssociatedText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatureAssociatedText), input_name='SignatureAssociatedText')), namespaceprefix_ , eol_))
        if self.SignatoryCapacityCode is not None:
            namespaceprefix_ = self.SignatoryCapacityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatoryCapacityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatoryCapacityCode>%s</%sSignatoryCapacityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatoryCapacityCode), input_name='SignatoryCapacityCode')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SignatoryName':
            obj_ = NameType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatoryName = obj_
            obj_.original_tagname_ = 'SignatoryName'
        elif nodeName_ == 'SignatoryAddress':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatoryAddress = obj_
            obj_.original_tagname_ = 'SignatoryAddress'
        elif nodeName_ == 'SignatureDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.SignatureDate = dval_
            self.SignatureDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'SignaturePlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignaturePlace')
            value_ = self.gds_validate_string(value_, node, 'SignaturePlace')
            self.SignaturePlace = value_
            self.SignaturePlace_nsprefix_ = child_.prefix
        elif nodeName_ == 'SignatureManner':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SignatureManner')
            value_ = self.gds_validate_string(value_, node, 'SignatureManner')
            self.SignatureManner = value_
            self.SignatureManner_nsprefix_ = child_.prefix
            # validate type SignatureMannerType
            self.validate_SignatureMannerType(self.SignatureManner)
        elif nodeName_ == 'SignatureAssociatedText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignatureAssociatedText')
            value_ = self.gds_validate_string(value_, node, 'SignatureAssociatedText')
            self.SignatureAssociatedText = value_
            self.SignatureAssociatedText_nsprefix_ = child_.prefix
        elif nodeName_ == 'SignatoryCapacityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SignatoryCapacityCode')
            value_ = self.gds_validate_string(value_, node, 'SignatoryCapacityCode')
            self.SignatoryCapacityCode = value_
            self.SignatoryCapacityCode_nsprefix_ = child_.prefix
            # validate type RoleType
            self.validate_RoleType(self.SignatoryCapacityCode)
        else:
            content_ = self.gds_build_any(child_, 'SignatoryType')
            self.add_anytypeobjs_(content_)
# end class SignatoryType


class StaffType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StaffIdentifier=None, StaffName=None, OfficialTitle=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.StaffIdentifier = StaffIdentifier
        self.StaffIdentifier_nsprefix_ = None
        self.StaffName = StaffName
        self.StaffName_nsprefix_ = None
        self.OfficialTitle = OfficialTitle
        self.OfficialTitle_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StaffType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StaffType.subclass:
            return StaffType.subclass(*args_, **kwargs_)
        else:
            return StaffType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StaffIdentifier(self):
        return self.StaffIdentifier
    def set_StaffIdentifier(self, StaffIdentifier):
        self.StaffIdentifier = StaffIdentifier
    def get_StaffName(self):
        return self.StaffName
    def set_StaffName(self, StaffName):
        self.StaffName = StaffName
    def get_OfficialTitle(self):
        return self.OfficialTitle
    def set_OfficialTitle(self, OfficialTitle):
        self.OfficialTitle = OfficialTitle
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.StaffIdentifier is not None or
            self.StaffName is not None or
            self.OfficialTitle is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='StaffType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StaffType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StaffType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StaffType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StaffType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StaffType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='StaffType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StaffIdentifier is not None:
            namespaceprefix_ = self.StaffIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.StaffIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStaffIdentifier>%s</%sStaffIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StaffIdentifier), input_name='StaffIdentifier')), namespaceprefix_ , eol_))
        if self.StaffName is not None:
            namespaceprefix_ = self.StaffName_nsprefix_ + ':' if (UseCapturedNS_ and self.StaffName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStaffName>%s</%sStaffName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StaffName), input_name='StaffName')), namespaceprefix_ , eol_))
        if self.OfficialTitle is not None:
            namespaceprefix_ = self.OfficialTitle_nsprefix_ + ':' if (UseCapturedNS_ and self.OfficialTitle_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOfficialTitle>%s</%sOfficialTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OfficialTitle), input_name='OfficialTitle')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StaffIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'StaffIdentifier')
            value_ = self.gds_validate_string(value_, node, 'StaffIdentifier')
            self.StaffIdentifier = value_
            self.StaffIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'StaffName':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'StaffName')
            value_ = self.gds_validate_string(value_, node, 'StaffName')
            self.StaffName = value_
            self.StaffName_nsprefix_ = child_.prefix
        elif nodeName_ == 'OfficialTitle':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OfficialTitle')
            value_ = self.gds_validate_string(value_, node, 'OfficialTitle')
            self.OfficialTitle = value_
            self.OfficialTitle_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'StaffType')
            self.add_anytypeobjs_(content_)
# end class StaffType


class TermSynonymRelationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, TermKey=None, TermSynonymKey=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        self.TermKey = TermKey
        self.TermKey_nsprefix_ = None
        self.TermSynonymKey = TermSynonymKey
        self.TermSynonymKey_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TermSynonymRelationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TermSynonymRelationType.subclass:
            return TermSynonymRelationType.subclass(*args_, **kwargs_)
        else:
            return TermSynonymRelationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TermKey(self):
        return self.TermKey
    def set_TermKey(self, TermKey):
        self.TermKey = TermKey
    def get_TermSynonymKey(self):
        return self.TermSynonymKey
    def set_TermSynonymKey(self, TermSynonymKey):
        self.TermSynonymKey = TermSynonymKey
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.TermKey is not None or
            self.TermSynonymKey is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermSynonymRelationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TermSynonymRelationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TermSynonymRelationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TermSynonymRelationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TermSynonymRelationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TermSynonymRelationType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermSynonymRelationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TermKey is not None:
            namespaceprefix_ = self.TermKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TermKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermKey>%s</%sTermKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermKey), input_name='TermKey')), namespaceprefix_ , eol_))
        if self.TermSynonymKey is not None:
            namespaceprefix_ = self.TermSynonymKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TermSynonymKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermSynonymKey>%s</%sTermSynonymKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermSynonymKey), input_name='TermSynonymKey')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TermKey':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TermKey')
            value_ = self.gds_validate_string(value_, node, 'TermKey')
            self.TermKey = value_
            self.TermKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'TermSynonymKey':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TermSynonymKey')
            value_ = self.gds_validate_string(value_, node, 'TermSynonymKey')
            self.TermSynonymKey = value_
            self.TermSynonymKey_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'TermSynonymRelationType')
            self.add_anytypeobjs_(content_)
# end class TermSynonymRelationType


class TermTranslationRelationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, TermKey=None, TermTranslationKey=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        self.TermKey = TermKey
        self.TermKey_nsprefix_ = None
        self.TermTranslationKey = TermTranslationKey
        self.TermTranslationKey_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TermTranslationRelationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TermTranslationRelationType.subclass:
            return TermTranslationRelationType.subclass(*args_, **kwargs_)
        else:
            return TermTranslationRelationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TermKey(self):
        return self.TermKey
    def set_TermKey(self, TermKey):
        self.TermKey = TermKey
    def get_TermTranslationKey(self):
        return self.TermTranslationKey
    def set_TermTranslationKey(self, TermTranslationKey):
        self.TermTranslationKey = TermTranslationKey
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.TermKey is not None or
            self.TermTranslationKey is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermTranslationRelationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TermTranslationRelationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TermTranslationRelationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TermTranslationRelationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TermTranslationRelationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TermTranslationRelationType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermTranslationRelationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TermKey is not None:
            namespaceprefix_ = self.TermKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TermKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermKey>%s</%sTermKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermKey), input_name='TermKey')), namespaceprefix_ , eol_))
        if self.TermTranslationKey is not None:
            namespaceprefix_ = self.TermTranslationKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TermTranslationKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermTranslationKey>%s</%sTermTranslationKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermTranslationKey), input_name='TermTranslationKey')), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TermKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TermKey')
            value_ = self.gds_validate_string(value_, node, 'TermKey')
            self.TermKey = value_
            self.TermKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'TermTranslationKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TermTranslationKey')
            value_ = self.gds_validate_string(value_, node, 'TermTranslationKey')
            self.TermTranslationKey = value_
            self.TermTranslationKey_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'TermTranslationRelationType')
            self.add_anytypeobjs_(content_)
# end class TermTranslationRelationType


class TradeMarkType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, operationCode=None, RegistrationOfficeCode=None, ReceivingOfficeCode=None, ReceivingOfficeDate=None, ApplicationNumber=None, ApplicationDate=None, ApplicationDateTime=None, RegistrationNumber=None, RegistrationDate=None, OtherDate=None, FilingPlace=None, ApplicationReference=None, ApplicantSideCaseKey=None, ApplicationLanguageCode=None, SecondLanguageCode=None, CorrespondenceLanguageCode=None, ExaminedApplicationNumber=None, ExpiryDate=None, TerminationDate=None, MarkCurrentStatusCode=None, MarkCurrentStatusDate=None, DesignatedCountryDetails=None, PreviousRegistrationDetails=None, AssociatedMarkDetails=None, DivisionalApplicationDetails=None, BasicRegistrationApplicationDetails=None, InternationalMarkKey=None, KindMark=None, MarkFeature=None, MarkDescriptionDetails=None, MarkDisclaimerDetails=None, NonUseCancelledIndicator=None, SpecialCircumstanceText=None, TotalMarkSeries=None, TradeDistinctivenessIndicator=None, TradeDistinctivenessText=None, UseRight=None, AsItIsProtectionIndicator=None, UseRequirementText=None, UseLimitationText=None, Comment=None, OppositionPeriodStartDate=None, OppositionPeriodEndDate=None, WordMarkSpecification=None, MarkImageDetails=None, MarkSoundDetails=None, GoodsServicesDetails=None, PriorityDetails=None, ExhibitionPriorityDetails=None, SeniorityDetails=None, PublicationDetails=None, ApplicantDetails=None, RepresentativeDetails=None, StaffDetails=None, Authorization=None, CorrespondenceAddressKey=None, CorrespondenceAddress=None, OppositionDetails=None, MarkRecordDetails=None, MarkEventDetails=None, TradeMarkDocumentDetails=None, TradeMarkVersion=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.operationCode = _cast(None, operationCode)
        self.operationCode_nsprefix_ = None
        self.RegistrationOfficeCode = RegistrationOfficeCode
        self.validate_WIPOST3CodeType(self.RegistrationOfficeCode)
        self.RegistrationOfficeCode_nsprefix_ = None
        self.ReceivingOfficeCode = ReceivingOfficeCode
        self.validate_WIPOST3CodeType(self.ReceivingOfficeCode)
        self.ReceivingOfficeCode_nsprefix_ = None
        if isinstance(ReceivingOfficeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReceivingOfficeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ReceivingOfficeDate
        self.ReceivingOfficeDate = initvalue_
        self.ReceivingOfficeDate_nsprefix_ = None
        self.ApplicationNumber = ApplicationNumber
        self.ApplicationNumber_nsprefix_ = None
        if isinstance(ApplicationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ApplicationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ApplicationDate
        self.ApplicationDate = initvalue_
        self.ApplicationDate_nsprefix_ = None
        if isinstance(ApplicationDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ApplicationDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ApplicationDateTime
        self.ApplicationDateTime = initvalue_
        self.ApplicationDateTime_nsprefix_ = None
        self.RegistrationNumber = RegistrationNumber
        self.RegistrationNumber_nsprefix_ = None
        if isinstance(RegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RegistrationDate
        self.RegistrationDate = initvalue_
        self.RegistrationDate_nsprefix_ = None
        if OtherDate is None:
            self.OtherDate = []
        else:
            self.OtherDate = OtherDate
        self.OtherDate_nsprefix_ = None
        self.FilingPlace = FilingPlace
        self.FilingPlace_nsprefix_ = None
        self.ApplicationReference = ApplicationReference
        self.ApplicationReference_nsprefix_ = None
        self.ApplicantSideCaseKey = ApplicantSideCaseKey
        self.ApplicantSideCaseKey_nsprefix_ = None
        self.ApplicationLanguageCode = ApplicationLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.ApplicationLanguageCode)
        self.ApplicationLanguageCode_nsprefix_ = None
        self.SecondLanguageCode = SecondLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.SecondLanguageCode)
        self.SecondLanguageCode_nsprefix_ = None
        self.CorrespondenceLanguageCode = CorrespondenceLanguageCode
        self.validate_ExtendedISOLanguageCodeType(self.CorrespondenceLanguageCode)
        self.CorrespondenceLanguageCode_nsprefix_ = None
        self.ExaminedApplicationNumber = ExaminedApplicationNumber
        self.ExaminedApplicationNumber_nsprefix_ = None
        if isinstance(ExpiryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpiryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpiryDate
        self.ExpiryDate = initvalue_
        self.ExpiryDate_nsprefix_ = None
        if isinstance(TerminationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TerminationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TerminationDate
        self.TerminationDate = initvalue_
        self.TerminationDate_nsprefix_ = None
        self.MarkCurrentStatusCode = MarkCurrentStatusCode
        self.validate_MarkCurrentStatusCodeType(self.MarkCurrentStatusCode)
        self.MarkCurrentStatusCode_nsprefix_ = None
        if isinstance(MarkCurrentStatusDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(MarkCurrentStatusDate, '%Y-%m-%d').date()
        else:
            initvalue_ = MarkCurrentStatusDate
        self.MarkCurrentStatusDate = initvalue_
        self.MarkCurrentStatusDate_nsprefix_ = None
        self.DesignatedCountryDetails = DesignatedCountryDetails
        self.DesignatedCountryDetails_nsprefix_ = None
        self.PreviousRegistrationDetails = PreviousRegistrationDetails
        self.PreviousRegistrationDetails_nsprefix_ = None
        self.AssociatedMarkDetails = AssociatedMarkDetails
        self.AssociatedMarkDetails_nsprefix_ = None
        self.DivisionalApplicationDetails = DivisionalApplicationDetails
        self.DivisionalApplicationDetails_nsprefix_ = None
        self.BasicRegistrationApplicationDetails = BasicRegistrationApplicationDetails
        self.BasicRegistrationApplicationDetails_nsprefix_ = None
        if InternationalMarkKey is None:
            self.InternationalMarkKey = []
        else:
            self.InternationalMarkKey = InternationalMarkKey
        self.InternationalMarkKey_nsprefix_ = None
        self.KindMark = KindMark
        self.validate_KindMarkType(self.KindMark)
        self.KindMark_nsprefix_ = None
        self.MarkFeature = MarkFeature
        self.validate_MarkFeatureType(self.MarkFeature)
        self.MarkFeature_nsprefix_ = None
        self.MarkDescriptionDetails = MarkDescriptionDetails
        self.MarkDescriptionDetails_nsprefix_ = None
        self.MarkDisclaimerDetails = MarkDisclaimerDetails
        self.MarkDisclaimerDetails_nsprefix_ = None
        self.NonUseCancelledIndicator = NonUseCancelledIndicator
        self.NonUseCancelledIndicator_nsprefix_ = None
        self.SpecialCircumstanceText = SpecialCircumstanceText
        self.SpecialCircumstanceText_nsprefix_ = None
        self.TotalMarkSeries = TotalMarkSeries
        self.TotalMarkSeries_nsprefix_ = None
        self.TradeDistinctivenessIndicator = TradeDistinctivenessIndicator
        self.TradeDistinctivenessIndicator_nsprefix_ = None
        self.TradeDistinctivenessText = TradeDistinctivenessText
        self.TradeDistinctivenessText_nsprefix_ = None
        self.UseRight = UseRight
        self.UseRight_nsprefix_ = None
        self.AsItIsProtectionIndicator = AsItIsProtectionIndicator
        self.AsItIsProtectionIndicator_nsprefix_ = None
        self.UseRequirementText = UseRequirementText
        self.UseRequirementText_nsprefix_ = None
        self.UseLimitationText = UseLimitationText
        self.UseLimitationText_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if isinstance(OppositionPeriodStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OppositionPeriodStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OppositionPeriodStartDate
        self.OppositionPeriodStartDate = initvalue_
        self.OppositionPeriodStartDate_nsprefix_ = None
        if isinstance(OppositionPeriodEndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OppositionPeriodEndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OppositionPeriodEndDate
        self.OppositionPeriodEndDate = initvalue_
        self.OppositionPeriodEndDate_nsprefix_ = None
        self.WordMarkSpecification = WordMarkSpecification
        self.WordMarkSpecification_nsprefix_ = None
        self.MarkImageDetails = MarkImageDetails
        self.MarkImageDetails_nsprefix_ = None
        self.MarkSoundDetails = MarkSoundDetails
        self.MarkSoundDetails_nsprefix_ = None
        self.GoodsServicesDetails = GoodsServicesDetails
        self.GoodsServicesDetails_nsprefix_ = None
        self.PriorityDetails = PriorityDetails
        self.PriorityDetails_nsprefix_ = None
        self.ExhibitionPriorityDetails = ExhibitionPriorityDetails
        self.ExhibitionPriorityDetails_nsprefix_ = None
        self.SeniorityDetails = SeniorityDetails
        self.SeniorityDetails_nsprefix_ = None
        self.PublicationDetails = PublicationDetails
        self.PublicationDetails_nsprefix_ = None
        self.ApplicantDetails = ApplicantDetails
        self.ApplicantDetails_nsprefix_ = None
        self.RepresentativeDetails = RepresentativeDetails
        self.RepresentativeDetails_nsprefix_ = None
        self.StaffDetails = StaffDetails
        self.StaffDetails_nsprefix_ = None
        self.Authorization = Authorization
        self.Authorization_nsprefix_ = None
        self.CorrespondenceAddressKey = CorrespondenceAddressKey
        self.CorrespondenceAddressKey_nsprefix_ = None
        self.CorrespondenceAddress = CorrespondenceAddress
        self.CorrespondenceAddress_nsprefix_ = None
        self.OppositionDetails = OppositionDetails
        self.OppositionDetails_nsprefix_ = None
        self.MarkRecordDetails = MarkRecordDetails
        self.MarkRecordDetails_nsprefix_ = None
        self.MarkEventDetails = MarkEventDetails
        self.MarkEventDetails_nsprefix_ = None
        self.TradeMarkDocumentDetails = TradeMarkDocumentDetails
        self.TradeMarkDocumentDetails_nsprefix_ = None
        self.TradeMarkVersion = TradeMarkVersion
        self.TradeMarkVersion_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkType.subclass:
            return TradeMarkType.subclass(*args_, **kwargs_)
        else:
            return TradeMarkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegistrationOfficeCode(self):
        return self.RegistrationOfficeCode
    def set_RegistrationOfficeCode(self, RegistrationOfficeCode):
        self.RegistrationOfficeCode = RegistrationOfficeCode
    def get_ReceivingOfficeCode(self):
        return self.ReceivingOfficeCode
    def set_ReceivingOfficeCode(self, ReceivingOfficeCode):
        self.ReceivingOfficeCode = ReceivingOfficeCode
    def get_ReceivingOfficeDate(self):
        return self.ReceivingOfficeDate
    def set_ReceivingOfficeDate(self, ReceivingOfficeDate):
        self.ReceivingOfficeDate = ReceivingOfficeDate
    def get_ApplicationNumber(self):
        return self.ApplicationNumber
    def set_ApplicationNumber(self, ApplicationNumber):
        self.ApplicationNumber = ApplicationNumber
    def get_ApplicationDate(self):
        return self.ApplicationDate
    def set_ApplicationDate(self, ApplicationDate):
        self.ApplicationDate = ApplicationDate
    def get_ApplicationDateTime(self):
        return self.ApplicationDateTime
    def set_ApplicationDateTime(self, ApplicationDateTime):
        self.ApplicationDateTime = ApplicationDateTime
    def get_RegistrationNumber(self):
        return self.RegistrationNumber
    def set_RegistrationNumber(self, RegistrationNumber):
        self.RegistrationNumber = RegistrationNumber
    def get_RegistrationDate(self):
        return self.RegistrationDate
    def set_RegistrationDate(self, RegistrationDate):
        self.RegistrationDate = RegistrationDate
    def get_OtherDate(self):
        return self.OtherDate
    def set_OtherDate(self, OtherDate):
        self.OtherDate = OtherDate
    def add_OtherDate(self, value):
        self.OtherDate.append(value)
    def insert_OtherDate_at(self, index, value):
        self.OtherDate.insert(index, value)
    def replace_OtherDate_at(self, index, value):
        self.OtherDate[index] = value
    def get_FilingPlace(self):
        return self.FilingPlace
    def set_FilingPlace(self, FilingPlace):
        self.FilingPlace = FilingPlace
    def get_ApplicationReference(self):
        return self.ApplicationReference
    def set_ApplicationReference(self, ApplicationReference):
        self.ApplicationReference = ApplicationReference
    def get_ApplicantSideCaseKey(self):
        return self.ApplicantSideCaseKey
    def set_ApplicantSideCaseKey(self, ApplicantSideCaseKey):
        self.ApplicantSideCaseKey = ApplicantSideCaseKey
    def get_ApplicationLanguageCode(self):
        return self.ApplicationLanguageCode
    def set_ApplicationLanguageCode(self, ApplicationLanguageCode):
        self.ApplicationLanguageCode = ApplicationLanguageCode
    def get_SecondLanguageCode(self):
        return self.SecondLanguageCode
    def set_SecondLanguageCode(self, SecondLanguageCode):
        self.SecondLanguageCode = SecondLanguageCode
    def get_CorrespondenceLanguageCode(self):
        return self.CorrespondenceLanguageCode
    def set_CorrespondenceLanguageCode(self, CorrespondenceLanguageCode):
        self.CorrespondenceLanguageCode = CorrespondenceLanguageCode
    def get_ExaminedApplicationNumber(self):
        return self.ExaminedApplicationNumber
    def set_ExaminedApplicationNumber(self, ExaminedApplicationNumber):
        self.ExaminedApplicationNumber = ExaminedApplicationNumber
    def get_ExpiryDate(self):
        return self.ExpiryDate
    def set_ExpiryDate(self, ExpiryDate):
        self.ExpiryDate = ExpiryDate
    def get_TerminationDate(self):
        return self.TerminationDate
    def set_TerminationDate(self, TerminationDate):
        self.TerminationDate = TerminationDate
    def get_MarkCurrentStatusCode(self):
        return self.MarkCurrentStatusCode
    def set_MarkCurrentStatusCode(self, MarkCurrentStatusCode):
        self.MarkCurrentStatusCode = MarkCurrentStatusCode
    def get_MarkCurrentStatusDate(self):
        return self.MarkCurrentStatusDate
    def set_MarkCurrentStatusDate(self, MarkCurrentStatusDate):
        self.MarkCurrentStatusDate = MarkCurrentStatusDate
    def get_DesignatedCountryDetails(self):
        return self.DesignatedCountryDetails
    def set_DesignatedCountryDetails(self, DesignatedCountryDetails):
        self.DesignatedCountryDetails = DesignatedCountryDetails
    def get_PreviousRegistrationDetails(self):
        return self.PreviousRegistrationDetails
    def set_PreviousRegistrationDetails(self, PreviousRegistrationDetails):
        self.PreviousRegistrationDetails = PreviousRegistrationDetails
    def get_AssociatedMarkDetails(self):
        return self.AssociatedMarkDetails
    def set_AssociatedMarkDetails(self, AssociatedMarkDetails):
        self.AssociatedMarkDetails = AssociatedMarkDetails
    def get_DivisionalApplicationDetails(self):
        return self.DivisionalApplicationDetails
    def set_DivisionalApplicationDetails(self, DivisionalApplicationDetails):
        self.DivisionalApplicationDetails = DivisionalApplicationDetails
    def get_BasicRegistrationApplicationDetails(self):
        return self.BasicRegistrationApplicationDetails
    def set_BasicRegistrationApplicationDetails(self, BasicRegistrationApplicationDetails):
        self.BasicRegistrationApplicationDetails = BasicRegistrationApplicationDetails
    def get_InternationalMarkKey(self):
        return self.InternationalMarkKey
    def set_InternationalMarkKey(self, InternationalMarkKey):
        self.InternationalMarkKey = InternationalMarkKey
    def add_InternationalMarkKey(self, value):
        self.InternationalMarkKey.append(value)
    def insert_InternationalMarkKey_at(self, index, value):
        self.InternationalMarkKey.insert(index, value)
    def replace_InternationalMarkKey_at(self, index, value):
        self.InternationalMarkKey[index] = value
    def get_KindMark(self):
        return self.KindMark
    def set_KindMark(self, KindMark):
        self.KindMark = KindMark
    def get_MarkFeature(self):
        return self.MarkFeature
    def set_MarkFeature(self, MarkFeature):
        self.MarkFeature = MarkFeature
    def get_MarkDescriptionDetails(self):
        return self.MarkDescriptionDetails
    def set_MarkDescriptionDetails(self, MarkDescriptionDetails):
        self.MarkDescriptionDetails = MarkDescriptionDetails
    def get_MarkDisclaimerDetails(self):
        return self.MarkDisclaimerDetails
    def set_MarkDisclaimerDetails(self, MarkDisclaimerDetails):
        self.MarkDisclaimerDetails = MarkDisclaimerDetails
    def get_NonUseCancelledIndicator(self):
        return self.NonUseCancelledIndicator
    def set_NonUseCancelledIndicator(self, NonUseCancelledIndicator):
        self.NonUseCancelledIndicator = NonUseCancelledIndicator
    def get_SpecialCircumstanceText(self):
        return self.SpecialCircumstanceText
    def set_SpecialCircumstanceText(self, SpecialCircumstanceText):
        self.SpecialCircumstanceText = SpecialCircumstanceText
    def get_TotalMarkSeries(self):
        return self.TotalMarkSeries
    def set_TotalMarkSeries(self, TotalMarkSeries):
        self.TotalMarkSeries = TotalMarkSeries
    def get_TradeDistinctivenessIndicator(self):
        return self.TradeDistinctivenessIndicator
    def set_TradeDistinctivenessIndicator(self, TradeDistinctivenessIndicator):
        self.TradeDistinctivenessIndicator = TradeDistinctivenessIndicator
    def get_TradeDistinctivenessText(self):
        return self.TradeDistinctivenessText
    def set_TradeDistinctivenessText(self, TradeDistinctivenessText):
        self.TradeDistinctivenessText = TradeDistinctivenessText
    def get_UseRight(self):
        return self.UseRight
    def set_UseRight(self, UseRight):
        self.UseRight = UseRight
    def get_AsItIsProtectionIndicator(self):
        return self.AsItIsProtectionIndicator
    def set_AsItIsProtectionIndicator(self, AsItIsProtectionIndicator):
        self.AsItIsProtectionIndicator = AsItIsProtectionIndicator
    def get_UseRequirementText(self):
        return self.UseRequirementText
    def set_UseRequirementText(self, UseRequirementText):
        self.UseRequirementText = UseRequirementText
    def get_UseLimitationText(self):
        return self.UseLimitationText
    def set_UseLimitationText(self, UseLimitationText):
        self.UseLimitationText = UseLimitationText
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_OppositionPeriodStartDate(self):
        return self.OppositionPeriodStartDate
    def set_OppositionPeriodStartDate(self, OppositionPeriodStartDate):
        self.OppositionPeriodStartDate = OppositionPeriodStartDate
    def get_OppositionPeriodEndDate(self):
        return self.OppositionPeriodEndDate
    def set_OppositionPeriodEndDate(self, OppositionPeriodEndDate):
        self.OppositionPeriodEndDate = OppositionPeriodEndDate
    def get_WordMarkSpecification(self):
        return self.WordMarkSpecification
    def set_WordMarkSpecification(self, WordMarkSpecification):
        self.WordMarkSpecification = WordMarkSpecification
    def get_MarkImageDetails(self):
        return self.MarkImageDetails
    def set_MarkImageDetails(self, MarkImageDetails):
        self.MarkImageDetails = MarkImageDetails
    def get_MarkSoundDetails(self):
        return self.MarkSoundDetails
    def set_MarkSoundDetails(self, MarkSoundDetails):
        self.MarkSoundDetails = MarkSoundDetails
    def get_GoodsServicesDetails(self):
        return self.GoodsServicesDetails
    def set_GoodsServicesDetails(self, GoodsServicesDetails):
        self.GoodsServicesDetails = GoodsServicesDetails
    def get_PriorityDetails(self):
        return self.PriorityDetails
    def set_PriorityDetails(self, PriorityDetails):
        self.PriorityDetails = PriorityDetails
    def get_ExhibitionPriorityDetails(self):
        return self.ExhibitionPriorityDetails
    def set_ExhibitionPriorityDetails(self, ExhibitionPriorityDetails):
        self.ExhibitionPriorityDetails = ExhibitionPriorityDetails
    def get_SeniorityDetails(self):
        return self.SeniorityDetails
    def set_SeniorityDetails(self, SeniorityDetails):
        self.SeniorityDetails = SeniorityDetails
    def get_PublicationDetails(self):
        return self.PublicationDetails
    def set_PublicationDetails(self, PublicationDetails):
        self.PublicationDetails = PublicationDetails
    def get_ApplicantDetails(self):
        return self.ApplicantDetails
    def set_ApplicantDetails(self, ApplicantDetails):
        self.ApplicantDetails = ApplicantDetails
    def get_RepresentativeDetails(self):
        return self.RepresentativeDetails
    def set_RepresentativeDetails(self, RepresentativeDetails):
        self.RepresentativeDetails = RepresentativeDetails
    def get_StaffDetails(self):
        return self.StaffDetails
    def set_StaffDetails(self, StaffDetails):
        self.StaffDetails = StaffDetails
    def get_Authorization(self):
        return self.Authorization
    def set_Authorization(self, Authorization):
        self.Authorization = Authorization
    def get_CorrespondenceAddressKey(self):
        return self.CorrespondenceAddressKey
    def set_CorrespondenceAddressKey(self, CorrespondenceAddressKey):
        self.CorrespondenceAddressKey = CorrespondenceAddressKey
    def get_CorrespondenceAddress(self):
        return self.CorrespondenceAddress
    def set_CorrespondenceAddress(self, CorrespondenceAddress):
        self.CorrespondenceAddress = CorrespondenceAddress
    def get_OppositionDetails(self):
        return self.OppositionDetails
    def set_OppositionDetails(self, OppositionDetails):
        self.OppositionDetails = OppositionDetails
    def get_MarkRecordDetails(self):
        return self.MarkRecordDetails
    def set_MarkRecordDetails(self, MarkRecordDetails):
        self.MarkRecordDetails = MarkRecordDetails
    def get_MarkEventDetails(self):
        return self.MarkEventDetails
    def set_MarkEventDetails(self, MarkEventDetails):
        self.MarkEventDetails = MarkEventDetails
    def get_TradeMarkDocumentDetails(self):
        return self.TradeMarkDocumentDetails
    def set_TradeMarkDocumentDetails(self, TradeMarkDocumentDetails):
        self.TradeMarkDocumentDetails = TradeMarkDocumentDetails
    def get_TradeMarkVersion(self):
        return self.TradeMarkVersion
    def set_TradeMarkVersion(self, TradeMarkVersion):
        self.TradeMarkVersion = TradeMarkVersion
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_operationCode(self):
        return self.operationCode
    def set_operationCode(self, operationCode):
        self.operationCode = operationCode
    def validate_WIPOST3CodeType(self, value):
        result = True
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ExtendedISOLanguageCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_MarkCurrentStatusCodeType(self, value):
        result = True
        # Validate type MarkCurrentStatusCodeType, a restriction on xs:string.
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_KindMarkType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_MarkFeatureType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_OperationCodeType(self, value):
        # Validate type OperationCodeType, a restriction on xs:NMTOKEN.
        pass
    def hasContent_(self):
        if (
            self.RegistrationOfficeCode is not None or
            self.ReceivingOfficeCode is not None or
            self.ReceivingOfficeDate is not None or
            self.ApplicationNumber is not None or
            self.ApplicationDate is not None or
            self.ApplicationDateTime is not None or
            self.RegistrationNumber is not None or
            self.RegistrationDate is not None or
            self.OtherDate or
            self.FilingPlace is not None or
            self.ApplicationReference is not None or
            self.ApplicantSideCaseKey is not None or
            self.ApplicationLanguageCode is not None or
            self.SecondLanguageCode is not None or
            self.CorrespondenceLanguageCode is not None or
            self.ExaminedApplicationNumber is not None or
            self.ExpiryDate is not None or
            self.TerminationDate is not None or
            self.MarkCurrentStatusCode is not None or
            self.MarkCurrentStatusDate is not None or
            self.DesignatedCountryDetails is not None or
            self.PreviousRegistrationDetails is not None or
            self.AssociatedMarkDetails is not None or
            self.DivisionalApplicationDetails is not None or
            self.BasicRegistrationApplicationDetails is not None or
            self.InternationalMarkKey or
            self.KindMark is not None or
            self.MarkFeature is not None or
            self.MarkDescriptionDetails is not None or
            self.MarkDisclaimerDetails is not None or
            self.NonUseCancelledIndicator is not None or
            self.SpecialCircumstanceText is not None or
            self.TotalMarkSeries is not None or
            self.TradeDistinctivenessIndicator is not None or
            self.TradeDistinctivenessText is not None or
            self.UseRight is not None or
            self.AsItIsProtectionIndicator is not None or
            self.UseRequirementText is not None or
            self.UseLimitationText is not None or
            self.Comment is not None or
            self.OppositionPeriodStartDate is not None or
            self.OppositionPeriodEndDate is not None or
            self.WordMarkSpecification is not None or
            self.MarkImageDetails is not None or
            self.MarkSoundDetails is not None or
            self.GoodsServicesDetails is not None or
            self.PriorityDetails is not None or
            self.ExhibitionPriorityDetails is not None or
            self.SeniorityDetails is not None or
            self.PublicationDetails is not None or
            self.ApplicantDetails is not None or
            self.RepresentativeDetails is not None or
            self.StaffDetails is not None or
            self.Authorization is not None or
            self.CorrespondenceAddressKey is not None or
            self.CorrespondenceAddress is not None or
            self.OppositionDetails is not None or
            self.MarkRecordDetails is not None or
            self.MarkEventDetails is not None or
            self.TradeMarkDocumentDetails is not None or
            self.TradeMarkVersion is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkType'):
        if self.operationCode is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            outfile.write(' operationCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.operationCode), input_name='operationCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegistrationOfficeCode is not None:
            namespaceprefix_ = self.RegistrationOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationOfficeCode>%s</%sRegistrationOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationOfficeCode), input_name='RegistrationOfficeCode')), namespaceprefix_ , eol_))
        if self.ReceivingOfficeCode is not None:
            namespaceprefix_ = self.ReceivingOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceivingOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceivingOfficeCode>%s</%sReceivingOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReceivingOfficeCode), input_name='ReceivingOfficeCode')), namespaceprefix_ , eol_))
        if self.ReceivingOfficeDate is not None:
            namespaceprefix_ = self.ReceivingOfficeDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceivingOfficeDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceivingOfficeDate>%s</%sReceivingOfficeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ReceivingOfficeDate, input_name='ReceivingOfficeDate'), namespaceprefix_ , eol_))
        if self.ApplicationNumber is not None:
            namespaceprefix_ = self.ApplicationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationNumber>%s</%sApplicationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationNumber), input_name='ApplicationNumber')), namespaceprefix_ , eol_))
        if self.ApplicationDate is not None:
            namespaceprefix_ = self.ApplicationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationDate>%s</%sApplicationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ApplicationDate, input_name='ApplicationDate'), namespaceprefix_ , eol_))
        if self.ApplicationDateTime is not None:
            namespaceprefix_ = self.ApplicationDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationDateTime>%s</%sApplicationDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ApplicationDateTime, input_name='ApplicationDateTime'), namespaceprefix_ , eol_))
        if self.RegistrationNumber is not None:
            namespaceprefix_ = self.RegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumber>%s</%sRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumber), input_name='RegistrationNumber')), namespaceprefix_ , eol_))
        if self.RegistrationDate is not None:
            namespaceprefix_ = self.RegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationDate>%s</%sRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RegistrationDate, input_name='RegistrationDate'), namespaceprefix_ , eol_))
        for OtherDate_ in self.OtherDate:
            namespaceprefix_ = self.OtherDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherDate_nsprefix_) else ''
            OtherDate_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OtherDate', pretty_print=pretty_print)
        if self.FilingPlace is not None:
            namespaceprefix_ = self.FilingPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.FilingPlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFilingPlace>%s</%sFilingPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FilingPlace), input_name='FilingPlace')), namespaceprefix_ , eol_))
        if self.ApplicationReference is not None:
            namespaceprefix_ = self.ApplicationReference_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationReference>%s</%sApplicationReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationReference), input_name='ApplicationReference')), namespaceprefix_ , eol_))
        if self.ApplicantSideCaseKey is not None:
            namespaceprefix_ = self.ApplicantSideCaseKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantSideCaseKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicantSideCaseKey>%s</%sApplicantSideCaseKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicantSideCaseKey), input_name='ApplicantSideCaseKey')), namespaceprefix_ , eol_))
        if self.ApplicationLanguageCode is not None:
            namespaceprefix_ = self.ApplicationLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationLanguageCode>%s</%sApplicationLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationLanguageCode), input_name='ApplicationLanguageCode')), namespaceprefix_ , eol_))
        if self.SecondLanguageCode is not None:
            namespaceprefix_ = self.SecondLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SecondLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecondLanguageCode>%s</%sSecondLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecondLanguageCode), input_name='SecondLanguageCode')), namespaceprefix_ , eol_))
        if self.CorrespondenceLanguageCode is not None:
            namespaceprefix_ = self.CorrespondenceLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCorrespondenceLanguageCode>%s</%sCorrespondenceLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CorrespondenceLanguageCode), input_name='CorrespondenceLanguageCode')), namespaceprefix_ , eol_))
        if self.ExaminedApplicationNumber is not None:
            namespaceprefix_ = self.ExaminedApplicationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ExaminedApplicationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExaminedApplicationNumber>%s</%sExaminedApplicationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExaminedApplicationNumber), input_name='ExaminedApplicationNumber')), namespaceprefix_ , eol_))
        if self.ExpiryDate is not None:
            namespaceprefix_ = self.ExpiryDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpiryDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpiryDate>%s</%sExpiryDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExpiryDate, input_name='ExpiryDate'), namespaceprefix_ , eol_))
        if self.TerminationDate is not None:
            namespaceprefix_ = self.TerminationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TerminationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTerminationDate>%s</%sTerminationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TerminationDate, input_name='TerminationDate'), namespaceprefix_ , eol_))
        if self.MarkCurrentStatusCode is not None:
            namespaceprefix_ = self.MarkCurrentStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCurrentStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkCurrentStatusCode>%s</%sMarkCurrentStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkCurrentStatusCode), input_name='MarkCurrentStatusCode')), namespaceprefix_ , eol_))
        if self.MarkCurrentStatusDate is not None:
            namespaceprefix_ = self.MarkCurrentStatusDate_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCurrentStatusDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkCurrentStatusDate>%s</%sMarkCurrentStatusDate>%s' % (namespaceprefix_ , self.gds_format_date(self.MarkCurrentStatusDate, input_name='MarkCurrentStatusDate'), namespaceprefix_ , eol_))
        if self.DesignatedCountryDetails is not None:
            namespaceprefix_ = self.DesignatedCountryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DesignatedCountryDetails_nsprefix_) else ''
            self.DesignatedCountryDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DesignatedCountryDetails', pretty_print=pretty_print)
        if self.PreviousRegistrationDetails is not None:
            namespaceprefix_ = self.PreviousRegistrationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousRegistrationDetails_nsprefix_) else ''
            self.PreviousRegistrationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PreviousRegistrationDetails', pretty_print=pretty_print)
        if self.AssociatedMarkDetails is not None:
            namespaceprefix_ = self.AssociatedMarkDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedMarkDetails_nsprefix_) else ''
            self.AssociatedMarkDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedMarkDetails', pretty_print=pretty_print)
        if self.DivisionalApplicationDetails is not None:
            namespaceprefix_ = self.DivisionalApplicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DivisionalApplicationDetails_nsprefix_) else ''
            self.DivisionalApplicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DivisionalApplicationDetails', pretty_print=pretty_print)
        if self.BasicRegistrationApplicationDetails is not None:
            namespaceprefix_ = self.BasicRegistrationApplicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRegistrationApplicationDetails_nsprefix_) else ''
            self.BasicRegistrationApplicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BasicRegistrationApplicationDetails', pretty_print=pretty_print)
        for InternationalMarkKey_ in self.InternationalMarkKey:
            namespaceprefix_ = self.InternationalMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalMarkKey_nsprefix_) else ''
            InternationalMarkKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalMarkKey', pretty_print=pretty_print)
        if self.KindMark is not None:
            namespaceprefix_ = self.KindMark_nsprefix_ + ':' if (UseCapturedNS_ and self.KindMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKindMark>%s</%sKindMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KindMark), input_name='KindMark')), namespaceprefix_ , eol_))
        if self.MarkFeature is not None:
            namespaceprefix_ = self.MarkFeature_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkFeature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkFeature>%s</%sMarkFeature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkFeature), input_name='MarkFeature')), namespaceprefix_ , eol_))
        if self.MarkDescriptionDetails is not None:
            namespaceprefix_ = self.MarkDescriptionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkDescriptionDetails_nsprefix_) else ''
            self.MarkDescriptionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkDescriptionDetails', pretty_print=pretty_print)
        if self.MarkDisclaimerDetails is not None:
            namespaceprefix_ = self.MarkDisclaimerDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkDisclaimerDetails_nsprefix_) else ''
            self.MarkDisclaimerDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkDisclaimerDetails', pretty_print=pretty_print)
        if self.NonUseCancelledIndicator is not None:
            namespaceprefix_ = self.NonUseCancelledIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.NonUseCancelledIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNonUseCancelledIndicator>%s</%sNonUseCancelledIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.NonUseCancelledIndicator, input_name='NonUseCancelledIndicator'), namespaceprefix_ , eol_))
        if self.SpecialCircumstanceText is not None:
            namespaceprefix_ = self.SpecialCircumstanceText_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialCircumstanceText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialCircumstanceText>%s</%sSpecialCircumstanceText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialCircumstanceText), input_name='SpecialCircumstanceText')), namespaceprefix_ , eol_))
        if self.TotalMarkSeries is not None:
            namespaceprefix_ = self.TotalMarkSeries_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalMarkSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalMarkSeries>%s</%sTotalMarkSeries>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalMarkSeries, input_name='TotalMarkSeries'), namespaceprefix_ , eol_))
        if self.TradeDistinctivenessIndicator is not None:
            namespaceprefix_ = self.TradeDistinctivenessIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeDistinctivenessIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeDistinctivenessIndicator>%s</%sTradeDistinctivenessIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.TradeDistinctivenessIndicator, input_name='TradeDistinctivenessIndicator'), namespaceprefix_ , eol_))
        if self.TradeDistinctivenessText is not None:
            namespaceprefix_ = self.TradeDistinctivenessText_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeDistinctivenessText_nsprefix_) else ''
            self.TradeDistinctivenessText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeDistinctivenessText', pretty_print=pretty_print)
        if self.UseRight is not None:
            namespaceprefix_ = self.UseRight_nsprefix_ + ':' if (UseCapturedNS_ and self.UseRight_nsprefix_) else ''
            self.UseRight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UseRight', pretty_print=pretty_print)
        if self.AsItIsProtectionIndicator is not None:
            namespaceprefix_ = self.AsItIsProtectionIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AsItIsProtectionIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAsItIsProtectionIndicator>%s</%sAsItIsProtectionIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.AsItIsProtectionIndicator, input_name='AsItIsProtectionIndicator'), namespaceprefix_ , eol_))
        if self.UseRequirementText is not None:
            namespaceprefix_ = self.UseRequirementText_nsprefix_ + ':' if (UseCapturedNS_ and self.UseRequirementText_nsprefix_) else ''
            self.UseRequirementText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UseRequirementText', pretty_print=pretty_print)
        if self.UseLimitationText is not None:
            namespaceprefix_ = self.UseLimitationText_nsprefix_ + ':' if (UseCapturedNS_ and self.UseLimitationText_nsprefix_) else ''
            self.UseLimitationText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UseLimitationText', pretty_print=pretty_print)
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment), input_name='Comment')), namespaceprefix_ , eol_))
        if self.OppositionPeriodStartDate is not None:
            namespaceprefix_ = self.OppositionPeriodStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionPeriodStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionPeriodStartDate>%s</%sOppositionPeriodStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OppositionPeriodStartDate, input_name='OppositionPeriodStartDate'), namespaceprefix_ , eol_))
        if self.OppositionPeriodEndDate is not None:
            namespaceprefix_ = self.OppositionPeriodEndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionPeriodEndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOppositionPeriodEndDate>%s</%sOppositionPeriodEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OppositionPeriodEndDate, input_name='OppositionPeriodEndDate'), namespaceprefix_ , eol_))
        if self.WordMarkSpecification is not None:
            namespaceprefix_ = self.WordMarkSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.WordMarkSpecification_nsprefix_) else ''
            self.WordMarkSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WordMarkSpecification', pretty_print=pretty_print)
        if self.MarkImageDetails is not None:
            namespaceprefix_ = self.MarkImageDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageDetails_nsprefix_) else ''
            self.MarkImageDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageDetails', pretty_print=pretty_print)
        if self.MarkSoundDetails is not None:
            namespaceprefix_ = self.MarkSoundDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkSoundDetails_nsprefix_) else ''
            self.MarkSoundDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkSoundDetails', pretty_print=pretty_print)
        if self.GoodsServicesDetails is not None:
            namespaceprefix_ = self.GoodsServicesDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesDetails_nsprefix_) else ''
            self.GoodsServicesDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesDetails', pretty_print=pretty_print)
        if self.PriorityDetails is not None:
            namespaceprefix_ = self.PriorityDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityDetails_nsprefix_) else ''
            self.PriorityDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityDetails', pretty_print=pretty_print)
        if self.ExhibitionPriorityDetails is not None:
            namespaceprefix_ = self.ExhibitionPriorityDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionPriorityDetails_nsprefix_) else ''
            self.ExhibitionPriorityDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExhibitionPriorityDetails', pretty_print=pretty_print)
        if self.SeniorityDetails is not None:
            namespaceprefix_ = self.SeniorityDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SeniorityDetails_nsprefix_) else ''
            self.SeniorityDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SeniorityDetails', pretty_print=pretty_print)
        if self.PublicationDetails is not None:
            namespaceprefix_ = self.PublicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicationDetails_nsprefix_) else ''
            self.PublicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PublicationDetails', pretty_print=pretty_print)
        if self.ApplicantDetails is not None:
            namespaceprefix_ = self.ApplicantDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantDetails_nsprefix_) else ''
            self.ApplicantDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantDetails', pretty_print=pretty_print)
        if self.RepresentativeDetails is not None:
            namespaceprefix_ = self.RepresentativeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeDetails_nsprefix_) else ''
            self.RepresentativeDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeDetails', pretty_print=pretty_print)
        if self.StaffDetails is not None:
            namespaceprefix_ = self.StaffDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.StaffDetails_nsprefix_) else ''
            self.StaffDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StaffDetails', pretty_print=pretty_print)
        if self.Authorization is not None:
            namespaceprefix_ = self.Authorization_nsprefix_ + ':' if (UseCapturedNS_ and self.Authorization_nsprefix_) else ''
            self.Authorization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Authorization', pretty_print=pretty_print)
        if self.CorrespondenceAddressKey is not None:
            namespaceprefix_ = self.CorrespondenceAddressKey_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddressKey_nsprefix_) else ''
            self.CorrespondenceAddressKey.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CorrespondenceAddressKey', pretty_print=pretty_print)
        if self.CorrespondenceAddress is not None:
            namespaceprefix_ = self.CorrespondenceAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrespondenceAddress_nsprefix_) else ''
            self.CorrespondenceAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CorrespondenceAddress', pretty_print=pretty_print)
        if self.OppositionDetails is not None:
            namespaceprefix_ = self.OppositionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionDetails_nsprefix_) else ''
            self.OppositionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OppositionDetails', pretty_print=pretty_print)
        if self.MarkRecordDetails is not None:
            namespaceprefix_ = self.MarkRecordDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkRecordDetails_nsprefix_) else ''
            self.MarkRecordDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkRecordDetails', pretty_print=pretty_print)
        if self.MarkEventDetails is not None:
            namespaceprefix_ = self.MarkEventDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkEventDetails_nsprefix_) else ''
            self.MarkEventDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkEventDetails', pretty_print=pretty_print)
        if self.TradeMarkDocumentDetails is not None:
            namespaceprefix_ = self.TradeMarkDocumentDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkDocumentDetails_nsprefix_) else ''
            self.TradeMarkDocumentDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkDocumentDetails', pretty_print=pretty_print)
        if self.TradeMarkVersion is not None:
            namespaceprefix_ = self.TradeMarkVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkVersion_nsprefix_) else ''
            self.TradeMarkVersion.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkVersion', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operationCode', node)
        if value is not None and 'operationCode' not in already_processed:
            already_processed.add('operationCode')
            self.operationCode = value
            self.validate_OperationCodeType(self.operationCode)    # validate type OperationCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegistrationOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RegistrationOfficeCode')
            self.RegistrationOfficeCode = value_
            self.RegistrationOfficeCode_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.RegistrationOfficeCode)
        elif nodeName_ == 'ReceivingOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReceivingOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'ReceivingOfficeCode')
            self.ReceivingOfficeCode = value_
            self.ReceivingOfficeCode_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.ReceivingOfficeCode)
        elif nodeName_ == 'ReceivingOfficeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ReceivingOfficeDate = dval_
            self.ReceivingOfficeDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationNumber')
            value_ = self.gds_validate_string(value_, node, 'ApplicationNumber')
            self.ApplicationNumber = value_
            self.ApplicationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ApplicationDate = dval_
            self.ApplicationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicationDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ApplicationDateTime = dval_
            self.ApplicationDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegistrationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumber')
            self.RegistrationNumber = value_
            self.RegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RegistrationDate = dval_
            self.RegistrationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'OtherDate':
            obj_ = OtherDateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OtherDate.append(obj_)
            obj_.original_tagname_ = 'OtherDate'
        elif nodeName_ == 'FilingPlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FilingPlace')
            value_ = self.gds_validate_string(value_, node, 'FilingPlace')
            self.FilingPlace = value_
            self.FilingPlace_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicationReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationReference')
            value_ = self.gds_validate_string(value_, node, 'ApplicationReference')
            self.ApplicationReference = value_
            self.ApplicationReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicantSideCaseKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicantSideCaseKey')
            value_ = self.gds_validate_string(value_, node, 'ApplicantSideCaseKey')
            self.ApplicantSideCaseKey = value_
            self.ApplicantSideCaseKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'ApplicationLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ApplicationLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'ApplicationLanguageCode')
            self.ApplicationLanguageCode = value_
            self.ApplicationLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.ApplicationLanguageCode)
        elif nodeName_ == 'SecondLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SecondLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'SecondLanguageCode')
            self.SecondLanguageCode = value_
            self.SecondLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.SecondLanguageCode)
        elif nodeName_ == 'CorrespondenceLanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CorrespondenceLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'CorrespondenceLanguageCode')
            self.CorrespondenceLanguageCode = value_
            self.CorrespondenceLanguageCode_nsprefix_ = child_.prefix
            # validate type ExtendedISOLanguageCodeType
            self.validate_ExtendedISOLanguageCodeType(self.CorrespondenceLanguageCode)
        elif nodeName_ == 'ExaminedApplicationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExaminedApplicationNumber')
            value_ = self.gds_validate_string(value_, node, 'ExaminedApplicationNumber')
            self.ExaminedApplicationNumber = value_
            self.ExaminedApplicationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpiryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpiryDate = dval_
            self.ExpiryDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'TerminationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TerminationDate = dval_
            self.TerminationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkCurrentStatusCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkCurrentStatusCode')
            value_ = self.gds_validate_string(value_, node, 'MarkCurrentStatusCode')
            self.MarkCurrentStatusCode = value_
            self.MarkCurrentStatusCode_nsprefix_ = child_.prefix
            # validate type MarkCurrentStatusCodeType
            self.validate_MarkCurrentStatusCodeType(self.MarkCurrentStatusCode)
        elif nodeName_ == 'MarkCurrentStatusDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.MarkCurrentStatusDate = dval_
            self.MarkCurrentStatusDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'DesignatedCountryDetails':
            obj_ = DesignatedCountryDetailsType44.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DesignatedCountryDetails = obj_
            obj_.original_tagname_ = 'DesignatedCountryDetails'
        elif nodeName_ == 'PreviousRegistrationDetails':
            obj_ = PreviousRegistrationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PreviousRegistrationDetails = obj_
            obj_.original_tagname_ = 'PreviousRegistrationDetails'
        elif nodeName_ == 'AssociatedMarkDetails':
            obj_ = AssociatedMarkDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedMarkDetails = obj_
            obj_.original_tagname_ = 'AssociatedMarkDetails'
        elif nodeName_ == 'DivisionalApplicationDetails':
            obj_ = DivisionalApplicationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DivisionalApplicationDetails = obj_
            obj_.original_tagname_ = 'DivisionalApplicationDetails'
        elif nodeName_ == 'BasicRegistrationApplicationDetails':
            obj_ = BasicRegistrationApplicationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BasicRegistrationApplicationDetails = obj_
            obj_.original_tagname_ = 'BasicRegistrationApplicationDetails'
        elif nodeName_ == 'InternationalMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalMarkKey.append(obj_)
            obj_.original_tagname_ = 'InternationalMarkKey'
        elif nodeName_ == 'KindMark':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KindMark')
            value_ = self.gds_validate_string(value_, node, 'KindMark')
            self.KindMark = value_
            self.KindMark_nsprefix_ = child_.prefix
            # validate type KindMarkType
            self.validate_KindMarkType(self.KindMark)
        elif nodeName_ == 'MarkFeature':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkFeature')
            value_ = self.gds_validate_string(value_, node, 'MarkFeature')
            self.MarkFeature = value_
            self.MarkFeature_nsprefix_ = child_.prefix
            # validate type MarkFeatureType
            self.validate_MarkFeatureType(self.MarkFeature)
        elif nodeName_ == 'MarkDescriptionDetails':
            obj_ = MarkDescriptionDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkDescriptionDetails = obj_
            obj_.original_tagname_ = 'MarkDescriptionDetails'
        elif nodeName_ == 'MarkDisclaimerDetails':
            obj_ = MarkDisclaimerDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkDisclaimerDetails = obj_
            obj_.original_tagname_ = 'MarkDisclaimerDetails'
        elif nodeName_ == 'NonUseCancelledIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'NonUseCancelledIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'NonUseCancelledIndicator')
            self.NonUseCancelledIndicator = ival_
            self.NonUseCancelledIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialCircumstanceText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialCircumstanceText')
            value_ = self.gds_validate_string(value_, node, 'SpecialCircumstanceText')
            self.SpecialCircumstanceText = value_
            self.SpecialCircumstanceText_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalMarkSeries' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalMarkSeries')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalMarkSeries')
            self.TotalMarkSeries = ival_
            self.TotalMarkSeries_nsprefix_ = child_.prefix
        elif nodeName_ == 'TradeDistinctivenessIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'TradeDistinctivenessIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'TradeDistinctivenessIndicator')
            self.TradeDistinctivenessIndicator = ival_
            self.TradeDistinctivenessIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'TradeDistinctivenessText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeDistinctivenessText = obj_
            obj_.original_tagname_ = 'TradeDistinctivenessText'
        elif nodeName_ == 'UseRight':
            obj_ = UseRightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UseRight = obj_
            obj_.original_tagname_ = 'UseRight'
        elif nodeName_ == 'AsItIsProtectionIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'AsItIsProtectionIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'AsItIsProtectionIndicator')
            self.AsItIsProtectionIndicator = ival_
            self.AsItIsProtectionIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'UseRequirementText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UseRequirementText = obj_
            obj_.original_tagname_ = 'UseRequirementText'
        elif nodeName_ == 'UseLimitationText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UseLimitationText = obj_
            obj_.original_tagname_ = 'UseLimitationText'
        elif nodeName_ == 'Comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment')
            value_ = self.gds_validate_string(value_, node, 'Comment')
            self.Comment = value_
            self.Comment_nsprefix_ = child_.prefix
        elif nodeName_ == 'OppositionPeriodStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OppositionPeriodStartDate = dval_
            self.OppositionPeriodStartDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'OppositionPeriodEndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OppositionPeriodEndDate = dval_
            self.OppositionPeriodEndDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'WordMarkSpecification':
            obj_ = WordMarkSpecificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WordMarkSpecification = obj_
            obj_.original_tagname_ = 'WordMarkSpecification'
        elif nodeName_ == 'MarkImageDetails':
            obj_ = MarkImageDetailsType45.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageDetails = obj_
            obj_.original_tagname_ = 'MarkImageDetails'
        elif nodeName_ == 'MarkSoundDetails':
            obj_ = MarkSoundDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkSoundDetails = obj_
            obj_.original_tagname_ = 'MarkSoundDetails'
        elif nodeName_ == 'GoodsServicesDetails':
            obj_ = GoodsServicesDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesDetails = obj_
            obj_.original_tagname_ = 'GoodsServicesDetails'
        elif nodeName_ == 'PriorityDetails':
            obj_ = PriorityDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityDetails = obj_
            obj_.original_tagname_ = 'PriorityDetails'
        elif nodeName_ == 'ExhibitionPriorityDetails':
            obj_ = ExhibitionPriorityDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExhibitionPriorityDetails = obj_
            obj_.original_tagname_ = 'ExhibitionPriorityDetails'
        elif nodeName_ == 'SeniorityDetails':
            obj_ = SeniorityDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SeniorityDetails = obj_
            obj_.original_tagname_ = 'SeniorityDetails'
        elif nodeName_ == 'PublicationDetails':
            obj_ = PublicationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PublicationDetails = obj_
            obj_.original_tagname_ = 'PublicationDetails'
        elif nodeName_ == 'ApplicantDetails':
            obj_ = ApplicantDetailsType46.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantDetails = obj_
            obj_.original_tagname_ = 'ApplicantDetails'
        elif nodeName_ == 'RepresentativeDetails':
            obj_ = RepresentativeDetailsType47.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeDetails = obj_
            obj_.original_tagname_ = 'RepresentativeDetails'
        elif nodeName_ == 'StaffDetails':
            obj_ = StaffDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StaffDetails = obj_
            obj_.original_tagname_ = 'StaffDetails'
        elif nodeName_ == 'Authorization':
            obj_ = AuthorizationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Authorization = obj_
            obj_.original_tagname_ = 'Authorization'
        elif nodeName_ == 'CorrespondenceAddressKey':
            obj_ = CorrespondenceAddressKeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CorrespondenceAddressKey = obj_
            obj_.original_tagname_ = 'CorrespondenceAddressKey'
        elif nodeName_ == 'CorrespondenceAddress':
            obj_ = CorrespondenceAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CorrespondenceAddress = obj_
            obj_.original_tagname_ = 'CorrespondenceAddress'
        elif nodeName_ == 'OppositionDetails':
            obj_ = OppositionDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OppositionDetails = obj_
            obj_.original_tagname_ = 'OppositionDetails'
        elif nodeName_ == 'MarkRecordDetails':
            obj_ = MarkRecordDetailsType48.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkRecordDetails = obj_
            obj_.original_tagname_ = 'MarkRecordDetails'
        elif nodeName_ == 'MarkEventDetails':
            obj_ = MarkEventDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkEventDetails = obj_
            obj_.original_tagname_ = 'MarkEventDetails'
        elif nodeName_ == 'TradeMarkDocumentDetails':
            obj_ = TradeMarkDocumentDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkDocumentDetails = obj_
            obj_.original_tagname_ = 'TradeMarkDocumentDetails'
        elif nodeName_ == 'TradeMarkVersion':
            obj_ = VersionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkVersion = obj_
            obj_.original_tagname_ = 'TradeMarkVersion'
        else:
            content_ = self.gds_build_any(child_, 'TradeMarkType')
            self.add_anytypeobjs_(content_)
# end class TradeMarkType


class UseRightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UseRightIndicator=None, UseRightText=None, UseRightGoodsServices=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UseRightIndicator = UseRightIndicator
        self.UseRightIndicator_nsprefix_ = None
        self.UseRightText = UseRightText
        self.UseRightText_nsprefix_ = None
        if UseRightGoodsServices is None:
            self.UseRightGoodsServices = []
        else:
            self.UseRightGoodsServices = UseRightGoodsServices
        self.UseRightGoodsServices_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UseRightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UseRightType.subclass:
            return UseRightType.subclass(*args_, **kwargs_)
        else:
            return UseRightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UseRightIndicator(self):
        return self.UseRightIndicator
    def set_UseRightIndicator(self, UseRightIndicator):
        self.UseRightIndicator = UseRightIndicator
    def get_UseRightText(self):
        return self.UseRightText
    def set_UseRightText(self, UseRightText):
        self.UseRightText = UseRightText
    def get_UseRightGoodsServices(self):
        return self.UseRightGoodsServices
    def set_UseRightGoodsServices(self, UseRightGoodsServices):
        self.UseRightGoodsServices = UseRightGoodsServices
    def add_UseRightGoodsServices(self, value):
        self.UseRightGoodsServices.append(value)
    def insert_UseRightGoodsServices_at(self, index, value):
        self.UseRightGoodsServices.insert(index, value)
    def replace_UseRightGoodsServices_at(self, index, value):
        self.UseRightGoodsServices[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.UseRightIndicator is not None or
            self.UseRightText is not None or
            self.UseRightGoodsServices or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='UseRightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UseRightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UseRightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UseRightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UseRightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UseRightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='UseRightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UseRightIndicator is not None:
            namespaceprefix_ = self.UseRightIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.UseRightIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUseRightIndicator>%s</%sUseRightIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.UseRightIndicator, input_name='UseRightIndicator'), namespaceprefix_ , eol_))
        if self.UseRightText is not None:
            namespaceprefix_ = self.UseRightText_nsprefix_ + ':' if (UseCapturedNS_ and self.UseRightText_nsprefix_) else ''
            self.UseRightText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UseRightText', pretty_print=pretty_print)
        for UseRightGoodsServices_ in self.UseRightGoodsServices:
            namespaceprefix_ = self.UseRightGoodsServices_nsprefix_ + ':' if (UseCapturedNS_ and self.UseRightGoodsServices_nsprefix_) else ''
            UseRightGoodsServices_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UseRightGoodsServices', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UseRightIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'UseRightIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'UseRightIndicator')
            self.UseRightIndicator = ival_
            self.UseRightIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'UseRightText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UseRightText = obj_
            obj_.original_tagname_ = 'UseRightText'
        elif nodeName_ == 'UseRightGoodsServices':
            obj_ = GoodsServicesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UseRightGoodsServices.append(obj_)
            obj_.original_tagname_ = 'UseRightGoodsServices'
        else:
            content_ = self.gds_build_any(child_, 'UseRightType')
            self.add_anytypeobjs_(content_)
# end class UseRightType


class VersionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, VersionNumber=None, VersionDate=None, VersionDateTime=None, Comment=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.VersionNumber = VersionNumber
        self.VersionNumber_nsprefix_ = None
        if isinstance(VersionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VersionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = VersionDate
        self.VersionDate = initvalue_
        self.VersionDate_nsprefix_ = None
        if isinstance(VersionDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VersionDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = VersionDateTime
        self.VersionDateTime = initvalue_
        self.VersionDateTime_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionType.subclass:
            return VersionType.subclass(*args_, **kwargs_)
        else:
            return VersionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_VersionNumber(self):
        return self.VersionNumber
    def set_VersionNumber(self, VersionNumber):
        self.VersionNumber = VersionNumber
    def get_VersionDate(self):
        return self.VersionDate
    def set_VersionDate(self, VersionDate):
        self.VersionDate = VersionDate
    def get_VersionDateTime(self):
        return self.VersionDateTime
    def set_VersionDateTime(self, VersionDateTime):
        self.VersionDateTime = VersionDateTime
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.VersionNumber is not None or
            self.VersionDate is not None or
            self.VersionDateTime is not None or
            self.Comment is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='VersionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VersionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VersionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VersionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VersionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='VersionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.VersionNumber is not None:
            namespaceprefix_ = self.VersionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.VersionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVersionNumber>%s</%sVersionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VersionNumber), input_name='VersionNumber')), namespaceprefix_ , eol_))
        if self.VersionDate is not None:
            namespaceprefix_ = self.VersionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.VersionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVersionDate>%s</%sVersionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.VersionDate, input_name='VersionDate'), namespaceprefix_ , eol_))
        if self.VersionDateTime is not None:
            namespaceprefix_ = self.VersionDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.VersionDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVersionDateTime>%s</%sVersionDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.VersionDateTime, input_name='VersionDateTime'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'VersionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VersionNumber')
            value_ = self.gds_validate_string(value_, node, 'VersionNumber')
            self.VersionNumber = value_
            self.VersionNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'VersionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.VersionDate = dval_
            self.VersionDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'VersionDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.VersionDateTime = dval_
            self.VersionDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
        else:
            content_ = self.gds_build_any(child_, 'VersionType')
            self.add_anytypeobjs_(content_)
# end class VersionType


class WordMarkSpecificationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkVerbalElementText=None, MarkSignificantVerbalElement=None, MarkVerbalElementSignificantIndicator=None, MarkTranslation=None, MarkTransliteration=None, MarkTranscription=None, MarkStandardCharacterIndicator=None, anytypeobjs_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MarkVerbalElementText = MarkVerbalElementText
        self.MarkVerbalElementText_nsprefix_ = None
        if MarkSignificantVerbalElement is None:
            self.MarkSignificantVerbalElement = []
        else:
            self.MarkSignificantVerbalElement = MarkSignificantVerbalElement
        self.MarkSignificantVerbalElement_nsprefix_ = None
        self.MarkVerbalElementSignificantIndicator = MarkVerbalElementSignificantIndicator
        self.MarkVerbalElementSignificantIndicator_nsprefix_ = None
        if MarkTranslation is None:
            self.MarkTranslation = []
        else:
            self.MarkTranslation = MarkTranslation
        self.MarkTranslation_nsprefix_ = None
        self.MarkTransliteration = MarkTransliteration
        self.MarkTransliteration_nsprefix_ = None
        if MarkTranscription is None:
            self.MarkTranscription = []
        else:
            self.MarkTranscription = MarkTranscription
        self.MarkTranscription_nsprefix_ = None
        self.MarkStandardCharacterIndicator = MarkStandardCharacterIndicator
        self.MarkStandardCharacterIndicator_nsprefix_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WordMarkSpecificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WordMarkSpecificationType.subclass:
            return WordMarkSpecificationType.subclass(*args_, **kwargs_)
        else:
            return WordMarkSpecificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkVerbalElementText(self):
        return self.MarkVerbalElementText
    def set_MarkVerbalElementText(self, MarkVerbalElementText):
        self.MarkVerbalElementText = MarkVerbalElementText
    def get_MarkSignificantVerbalElement(self):
        return self.MarkSignificantVerbalElement
    def set_MarkSignificantVerbalElement(self, MarkSignificantVerbalElement):
        self.MarkSignificantVerbalElement = MarkSignificantVerbalElement
    def add_MarkSignificantVerbalElement(self, value):
        self.MarkSignificantVerbalElement.append(value)
    def insert_MarkSignificantVerbalElement_at(self, index, value):
        self.MarkSignificantVerbalElement.insert(index, value)
    def replace_MarkSignificantVerbalElement_at(self, index, value):
        self.MarkSignificantVerbalElement[index] = value
    def get_MarkVerbalElementSignificantIndicator(self):
        return self.MarkVerbalElementSignificantIndicator
    def set_MarkVerbalElementSignificantIndicator(self, MarkVerbalElementSignificantIndicator):
        self.MarkVerbalElementSignificantIndicator = MarkVerbalElementSignificantIndicator
    def get_MarkTranslation(self):
        return self.MarkTranslation
    def set_MarkTranslation(self, MarkTranslation):
        self.MarkTranslation = MarkTranslation
    def add_MarkTranslation(self, value):
        self.MarkTranslation.append(value)
    def insert_MarkTranslation_at(self, index, value):
        self.MarkTranslation.insert(index, value)
    def replace_MarkTranslation_at(self, index, value):
        self.MarkTranslation[index] = value
    def get_MarkTransliteration(self):
        return self.MarkTransliteration
    def set_MarkTransliteration(self, MarkTransliteration):
        self.MarkTransliteration = MarkTransliteration
    def get_MarkTranscription(self):
        return self.MarkTranscription
    def set_MarkTranscription(self, MarkTranscription):
        self.MarkTranscription = MarkTranscription
    def add_MarkTranscription(self, value):
        self.MarkTranscription.append(value)
    def insert_MarkTranscription_at(self, index, value):
        self.MarkTranscription.insert(index, value)
    def replace_MarkTranscription_at(self, index, value):
        self.MarkTranscription[index] = value
    def get_MarkStandardCharacterIndicator(self):
        return self.MarkStandardCharacterIndicator
    def set_MarkStandardCharacterIndicator(self, MarkStandardCharacterIndicator):
        self.MarkStandardCharacterIndicator = MarkStandardCharacterIndicator
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.MarkVerbalElementText is not None or
            self.MarkSignificantVerbalElement or
            self.MarkVerbalElementSignificantIndicator is not None or
            self.MarkTranslation or
            self.MarkTransliteration is not None or
            self.MarkTranscription or
            self.MarkStandardCharacterIndicator is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='WordMarkSpecificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WordMarkSpecificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WordMarkSpecificationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WordMarkSpecificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WordMarkSpecificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WordMarkSpecificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='WordMarkSpecificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarkVerbalElementText is not None:
            namespaceprefix_ = self.MarkVerbalElementText_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkVerbalElementText_nsprefix_) else ''
            self.MarkVerbalElementText.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkVerbalElementText', pretty_print=pretty_print)
        for MarkSignificantVerbalElement_ in self.MarkSignificantVerbalElement:
            namespaceprefix_ = self.MarkSignificantVerbalElement_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkSignificantVerbalElement_nsprefix_) else ''
            MarkSignificantVerbalElement_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkSignificantVerbalElement', pretty_print=pretty_print)
        if self.MarkVerbalElementSignificantIndicator is not None:
            namespaceprefix_ = self.MarkVerbalElementSignificantIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkVerbalElementSignificantIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkVerbalElementSignificantIndicator>%s</%sMarkVerbalElementSignificantIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MarkVerbalElementSignificantIndicator, input_name='MarkVerbalElementSignificantIndicator'), namespaceprefix_ , eol_))
        for MarkTranslation_ in self.MarkTranslation:
            namespaceprefix_ = self.MarkTranslation_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkTranslation_nsprefix_) else ''
            MarkTranslation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkTranslation', pretty_print=pretty_print)
        if self.MarkTransliteration is not None:
            namespaceprefix_ = self.MarkTransliteration_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkTransliteration_nsprefix_) else ''
            self.MarkTransliteration.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkTransliteration', pretty_print=pretty_print)
        for MarkTranscription_ in self.MarkTranscription:
            namespaceprefix_ = self.MarkTranscription_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkTranscription_nsprefix_) else ''
            MarkTranscription_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkTranscription', pretty_print=pretty_print)
        if self.MarkStandardCharacterIndicator is not None:
            namespaceprefix_ = self.MarkStandardCharacterIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkStandardCharacterIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkStandardCharacterIndicator>%s</%sMarkStandardCharacterIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MarkStandardCharacterIndicator, input_name='MarkStandardCharacterIndicator'), namespaceprefix_ , eol_))
        if not fromsubclass_:
            for obj_ in self.anytypeobjs_:
                showIndent(outfile, level, pretty_print)
                outfile.write(obj_)
                outfile.write('\n')
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkVerbalElementText':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkVerbalElementText = obj_
            obj_.original_tagname_ = 'MarkVerbalElementText'
        elif nodeName_ == 'MarkSignificantVerbalElement':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkSignificantVerbalElement.append(obj_)
            obj_.original_tagname_ = 'MarkSignificantVerbalElement'
        elif nodeName_ == 'MarkVerbalElementSignificantIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MarkVerbalElementSignificantIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'MarkVerbalElementSignificantIndicator')
            self.MarkVerbalElementSignificantIndicator = ival_
            self.MarkVerbalElementSignificantIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarkTranslation':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkTranslation.append(obj_)
            obj_.original_tagname_ = 'MarkTranslation'
        elif nodeName_ == 'MarkTransliteration':
            obj_ = MarkTransliterationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkTransliteration = obj_
            obj_.original_tagname_ = 'MarkTransliteration'
        elif nodeName_ == 'MarkTranscription':
            obj_ = MarkTranscriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkTranscription.append(obj_)
            obj_.original_tagname_ = 'MarkTranscription'
        elif nodeName_ == 'MarkStandardCharacterIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MarkStandardCharacterIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'MarkStandardCharacterIndicator')
            self.MarkStandardCharacterIndicator = ival_
            self.MarkStandardCharacterIndicator_nsprefix_ = child_.prefix
        else:
            content_ = self.gds_build_any(child_, 'WordMarkSpecificationType')
            self.add_anytypeobjs_(content_)
# end class WordMarkSpecificationType


class AmountType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, currencyCode=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.currencyCode = _cast(None, currencyCode)
        self.currencyCode_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AmountType.subclass:
            return AmountType.subclass(*args_, **kwargs_)
        else:
            return AmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_currencyCode(self):
        return self.currencyCode
    def set_currencyCode(self, currencyCode):
        self.currencyCode = currencyCode
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_ISOCurrencyCodeType(self, value):
        # Validate type ISOCurrencyCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYR', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CSD', 'CUP', 'CVE', 'CYP', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EEK', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GHC', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LTL', 'LVL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRO', 'MTL', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'ROL', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDD', 'SEK', 'SGD', 'SHP', 'SIT', 'SKK', 'SLL', 'SOS', 'SRD', 'STD', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMM', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEB', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XCD', 'XDR', 'XOF', 'XPD', 'XPF', 'XPT', 'YER', 'ZAR', 'ZMK', 'ZWD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCurrencyCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AmountType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AmountType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AmountType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AmountType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AmountType'):
        if self.currencyCode is not None and 'currencyCode' not in already_processed:
            already_processed.add('currencyCode')
            outfile.write(' currencyCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.currencyCode), input_name='currencyCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AmountType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('currencyCode', node)
        if value is not None and 'currencyCode' not in already_processed:
            already_processed.add('currencyCode')
            self.currencyCode = value
            self.validate_ISOCurrencyCodeType(self.currencyCode)    # validate type ISOCurrencyCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class AmountType


class ClassificationTermStatusType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, officeCode=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.officeCode = _cast(None, officeCode)
        self.officeCode_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassificationTermStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassificationTermStatusType.subclass:
            return ClassificationTermStatusType.subclass(*args_, **kwargs_)
        else:
            return ClassificationTermStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_officeCode(self):
        return self.officeCode
    def set_officeCode(self, officeCode):
        self.officeCode = officeCode
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_WIPOST3CodeType(self, value):
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClassificationTermStatusType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClassificationTermStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClassificationTermStatusType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClassificationTermStatusType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClassificationTermStatusType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClassificationTermStatusType'):
        if self.officeCode is not None and 'officeCode' not in already_processed:
            already_processed.add('officeCode')
            outfile.write(' officeCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.officeCode), input_name='officeCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClassificationTermStatusType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('officeCode', node)
        if value is not None and 'officeCode' not in already_processed:
            already_processed.add('officeCode')
            self.officeCode = value
            self.validate_WIPOST3CodeType(self.officeCode)    # validate type WIPOST3CodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class ClassificationTermStatusType


class IdentifierType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, identifierKindCode=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.identifierKindCode = _cast(None, identifierKindCode)
        self.identifierKindCode_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentifierType.subclass:
            return IdentifierType.subclass(*args_, **kwargs_)
        else:
            return IdentifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_identifierKindCode(self):
        return self.identifierKindCode
    def set_identifierKindCode(self, identifierKindCode):
        self.identifierKindCode = identifierKindCode
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_WIPOST3CodeType(self, value):
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IdentifierType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IdentifierType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentifierType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentifierType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IdentifierType'):
        if self.identifierKindCode is not None and 'identifierKindCode' not in already_processed:
            already_processed.add('identifierKindCode')
            outfile.write(' identifierKindCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.identifierKindCode), input_name='identifierKindCode')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IdentifierType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('identifierKindCode', node)
        if value is not None and 'identifierKindCode' not in already_processed:
            already_processed.add('identifierKindCode')
            self.identifierKindCode = value
            self.validate_WIPOST3CodeType(self.identifierKindCode)    # validate type WIPOST3CodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class IdentifierType


class MarkTranscriptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, transcriptionKind=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.transcriptionKind = _cast(None, transcriptionKind)
        self.transcriptionKind_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkTranscriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkTranscriptionType.subclass:
            return MarkTranscriptionType.subclass(*args_, **kwargs_)
        else:
            return MarkTranscriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_transcriptionKind(self):
        return self.transcriptionKind
    def set_transcriptionKind(self, transcriptionKind):
        self.transcriptionKind = transcriptionKind
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_TranscriptionKindType(self, value):
        # Validate type TranscriptionKindType, a restriction on xs:token.
        pass
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkTranscriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkTranscriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkTranscriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkTranscriptionType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkTranscriptionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkTranscriptionType'):
        if self.transcriptionKind is not None and 'transcriptionKind' not in already_processed:
            already_processed.add('transcriptionKind')
            outfile.write(' transcriptionKind=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.transcriptionKind), input_name='transcriptionKind')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkTranscriptionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('transcriptionKind', node)
        if value is not None and 'transcriptionKind' not in already_processed:
            already_processed.add('transcriptionKind')
            self.transcriptionKind = value
            self.transcriptionKind = ' '.join(self.transcriptionKind.split())
            self.validate_TranscriptionKindType(self.transcriptionKind)    # validate type TranscriptionKindType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class MarkTranscriptionType


class MarkTransliterationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, transliterationKind=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.transliterationKind = _cast(None, transliterationKind)
        self.transliterationKind_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkTransliterationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkTransliterationType.subclass:
            return MarkTransliterationType.subclass(*args_, **kwargs_)
        else:
            return MarkTransliterationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_transliterationKind(self):
        return self.transliterationKind
    def set_transliterationKind(self, transliterationKind):
        self.transliterationKind = transliterationKind
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_TransliterationKindType(self, value):
        # Validate type TransliterationKindType, a restriction on xs:token.
        pass
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkTransliterationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkTransliterationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkTransliterationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkTransliterationType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkTransliterationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkTransliterationType'):
        if self.transliterationKind is not None and 'transliterationKind' not in already_processed:
            already_processed.add('transliterationKind')
            outfile.write(' transliterationKind=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.transliterationKind), input_name='transliterationKind')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkTransliterationType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('transliterationKind', node)
        if value is not None and 'transliterationKind' not in already_processed:
            already_processed.add('transliterationKind')
            self.transliterationKind = value
            self.transliterationKind = ' '.join(self.transliterationKind.split())
            self.validate_TransliterationKindType(self.transliterationKind)    # validate type TransliterationKindType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class MarkTransliterationType


class OtherDateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, otherDateKind=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.otherDateKind = _cast(None, otherDateKind)
        self.otherDateKind_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OtherDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OtherDateType.subclass:
            return OtherDateType.subclass(*args_, **kwargs_)
        else:
            return OtherDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_otherDateKind(self):
        return self.otherDateKind
    def set_otherDateKind(self, otherDateKind):
        self.otherDateKind = otherDateKind
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_OtherDateKindType(self, value):
        # Validate type OtherDateKindType, a restriction on xs:token.
        pass
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OtherDateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OtherDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OtherDateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OtherDateType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OtherDateType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OtherDateType'):
        if self.otherDateKind is not None and 'otherDateKind' not in already_processed:
            already_processed.add('otherDateKind')
            outfile.write(' otherDateKind=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.otherDateKind), input_name='otherDateKind')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OtherDateType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('otherDateKind', node)
        if value is not None and 'otherDateKind' not in already_processed:
            already_processed.add('otherDateKind')
            self.otherDateKind = value
            self.otherDateKind = ' '.join(self.otherDateKind.split())
            self.validate_OtherDateKindType(self.otherDateKind)    # validate type OtherDateKindType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class OtherDateType


class PhoneType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, phoneKind=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.phoneKind = _cast(None, phoneKind)
        self.phoneKind_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneType.subclass:
            return PhoneType.subclass(*args_, **kwargs_)
        else:
            return PhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_phoneKind(self):
        return self.phoneKind
    def set_phoneKind(self, phoneKind):
        self.phoneKind = phoneKind
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_PhoneKindType(self, value):
        # Validate type PhoneKindType, a restriction on xs:token.
        pass
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PhoneType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PhoneType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PhoneType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PhoneType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PhoneType'):
        if self.phoneKind is not None and 'phoneKind' not in already_processed:
            already_processed.add('phoneKind')
            outfile.write(' phoneKind=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.phoneKind), input_name='phoneKind')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PhoneType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('phoneKind', node)
        if value is not None and 'phoneKind' not in already_processed:
            already_processed.add('phoneKind')
            self.phoneKind = value
            self.phoneKind = ' '.join(self.phoneKind.split())
            self.validate_PhoneKindType(self.phoneKind)    # validate type PhoneKindType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class PhoneType


class TextType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, languageCode=None, sequenceNumber=None, valueOf_=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.languageCode = _cast(None, languageCode)
        self.languageCode_nsprefix_ = None
        self.sequenceNumber = _cast(int, sequenceNumber)
        self.sequenceNumber_nsprefix_ = None
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TextType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TextType.subclass:
            return TextType.subclass(*args_, **kwargs_)
        else:
            return TextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_languageCode(self):
        return self.languageCode
    def set_languageCode(self, languageCode):
        self.languageCode = languageCode
    def get_sequenceNumber(self):
        return self.sequenceNumber
    def set_sequenceNumber(self, sequenceNumber):
        self.sequenceNumber = sequenceNumber
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TextType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TextType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TextType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TextType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TextType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TextType'):
        if self.languageCode is not None and 'languageCode' not in already_processed:
            already_processed.add('languageCode')
            outfile.write(' languageCode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.languageCode), input_name='languageCode')), ))
        if self.sequenceNumber is not None and 'sequenceNumber' not in already_processed:
            already_processed.add('sequenceNumber')
            outfile.write(' sequenceNumber="%s"' % self.gds_format_integer(self.sequenceNumber, input_name='sequenceNumber'))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TextType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('languageCode', node)
        if value is not None and 'languageCode' not in already_processed:
            already_processed.add('languageCode')
            self.languageCode = value
        value = find_attr_value_('sequenceNumber', node)
        if value is not None and 'sequenceNumber' not in already_processed:
            already_processed.add('sequenceNumber')
            self.sequenceNumber = self.gds_parse_integer(value, node, 'sequenceNumber')
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class TextType


class DocumentIncludedDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentIncluded=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DocumentIncluded is None:
            self.DocumentIncluded = []
        else:
            self.DocumentIncluded = DocumentIncluded
        self.DocumentIncluded_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentIncludedDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentIncludedDetailsType.subclass:
            return DocumentIncludedDetailsType.subclass(*args_, **kwargs_)
        else:
            return DocumentIncludedDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentIncluded(self):
        return self.DocumentIncluded
    def set_DocumentIncluded(self, DocumentIncluded):
        self.DocumentIncluded = DocumentIncluded
    def add_DocumentIncluded(self, value):
        self.DocumentIncluded.append(value)
    def insert_DocumentIncluded_at(self, index, value):
        self.DocumentIncluded.insert(index, value)
    def replace_DocumentIncluded_at(self, index, value):
        self.DocumentIncluded[index] = value
    def hasContent_(self):
        if (
            self.DocumentIncluded
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DocumentIncludedDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentIncludedDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentIncludedDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentIncludedDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentIncludedDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentIncludedDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DocumentIncludedDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocumentIncluded_ in self.DocumentIncluded:
            namespaceprefix_ = self.DocumentIncluded_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentIncluded_nsprefix_) else ''
            DocumentIncluded_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentIncluded', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentIncluded':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentIncluded.append(obj_)
            obj_.original_tagname_ = 'DocumentIncluded'
# end class DocumentIncludedDetailsType


class TradeMarkDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMark=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMark is None:
            self.TradeMark = []
        else:
            self.TradeMark = TradeMark
        self.TradeMark_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkDetailsType.subclass:
            return TradeMarkDetailsType.subclass(*args_, **kwargs_)
        else:
            return TradeMarkDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMark(self):
        return self.TradeMark
    def set_TradeMark(self, TradeMark):
        self.TradeMark = TradeMark
    def add_TradeMark(self, value):
        self.TradeMark.append(value)
    def insert_TradeMark_at(self, index, value):
        self.TradeMark.insert(index, value)
    def replace_TradeMark_at(self, index, value):
        self.TradeMark[index] = value
    def hasContent_(self):
        if (
            self.TradeMark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMark_ in self.TradeMark:
            namespaceprefix_ = self.TradeMark_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMark_nsprefix_) else ''
            TradeMark_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMark', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMark':
            obj_ = TradeMarkType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMark.append(obj_)
            obj_.original_tagname_ = 'TradeMark'
# end class TradeMarkDetailsType


class PaymentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Payment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Payment is None:
            self.Payment = []
        else:
            self.Payment = Payment
        self.Payment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentDetailsType.subclass:
            return PaymentDetailsType.subclass(*args_, **kwargs_)
        else:
            return PaymentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Payment(self):
        return self.Payment
    def set_Payment(self, Payment):
        self.Payment = Payment
    def add_Payment(self, value):
        self.Payment.append(value)
    def insert_Payment_at(self, index, value):
        self.Payment.insert(index, value)
    def replace_Payment_at(self, index, value):
        self.Payment[index] = value
    def hasContent_(self):
        if (
            self.Payment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Payment_ in self.Payment:
            namespaceprefix_ = self.Payment_nsprefix_ + ':' if (UseCapturedNS_ and self.Payment_nsprefix_) else ''
            Payment_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Payment':
            obj_ = PaymentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payment.append(obj_)
            obj_.original_tagname_ = 'Payment'
# end class PaymentDetailsType


class ReimbursementDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Reimbursement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Reimbursement is None:
            self.Reimbursement = []
        else:
            self.Reimbursement = Reimbursement
        self.Reimbursement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReimbursementDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReimbursementDetailsType.subclass:
            return ReimbursementDetailsType.subclass(*args_, **kwargs_)
        else:
            return ReimbursementDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Reimbursement(self):
        return self.Reimbursement
    def set_Reimbursement(self, Reimbursement):
        self.Reimbursement = Reimbursement
    def add_Reimbursement(self, value):
        self.Reimbursement.append(value)
    def insert_Reimbursement_at(self, index, value):
        self.Reimbursement.insert(index, value)
    def replace_Reimbursement_at(self, index, value):
        self.Reimbursement[index] = value
    def hasContent_(self):
        if (
            self.Reimbursement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReimbursementDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReimbursementDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReimbursementDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReimbursementDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReimbursementDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reimbursement_ in self.Reimbursement:
            namespaceprefix_ = self.Reimbursement_nsprefix_ + ':' if (UseCapturedNS_ and self.Reimbursement_nsprefix_) else ''
            Reimbursement_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Reimbursement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Reimbursement':
            obj_ = ReimbursementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reimbursement.append(obj_)
            obj_.original_tagname_ = 'Reimbursement'
# end class ReimbursementDetailsType


class SignatoryDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Signatory=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Signatory is None:
            self.Signatory = []
        else:
            self.Signatory = Signatory
        self.Signatory_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatoryDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatoryDetailsType.subclass:
            return SignatoryDetailsType.subclass(*args_, **kwargs_)
        else:
            return SignatoryDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Signatory(self):
        return self.Signatory
    def set_Signatory(self, Signatory):
        self.Signatory = Signatory
    def add_Signatory(self, value):
        self.Signatory.append(value)
    def insert_Signatory_at(self, index, value):
        self.Signatory.insert(index, value)
    def replace_Signatory_at(self, index, value):
        self.Signatory[index] = value
    def hasContent_(self):
        if (
            self.Signatory
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SignatoryDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatoryDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatoryDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatoryDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatoryDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SignatoryDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SignatoryDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Signatory_ in self.Signatory:
            namespaceprefix_ = self.Signatory_nsprefix_ + ':' if (UseCapturedNS_ and self.Signatory_nsprefix_) else ''
            Signatory_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Signatory', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Signatory':
            obj_ = SignatoryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signatory.append(obj_)
            obj_.original_tagname_ = 'Signatory'
# end class SignatoryDetailsType


class TransactionErrorDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransactionError=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TransactionError is None:
            self.TransactionError = []
        else:
            self.TransactionError = TransactionError
        self.TransactionError_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionErrorDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionErrorDetailsType.subclass:
            return TransactionErrorDetailsType.subclass(*args_, **kwargs_)
        else:
            return TransactionErrorDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransactionError(self):
        return self.TransactionError
    def set_TransactionError(self, TransactionError):
        self.TransactionError = TransactionError
    def add_TransactionError(self, value):
        self.TransactionError.append(value)
    def insert_TransactionError_at(self, index, value):
        self.TransactionError.insert(index, value)
    def replace_TransactionError_at(self, index, value):
        self.TransactionError[index] = value
    def hasContent_(self):
        if (
            self.TransactionError
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionErrorDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionErrorDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionErrorDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionErrorDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionErrorDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionErrorDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionErrorDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TransactionError_ in self.TransactionError:
            namespaceprefix_ = self.TransactionError_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionError_nsprefix_) else ''
            TransactionError_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionError', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransactionError':
            obj_ = TransactionErrorType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionError.append(obj_)
            obj_.original_tagname_ = 'TransactionError'
# end class TransactionErrorDetailsType


class TransactionContentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransactionIdentifier=None, TransactionCode=None, TransactionSubCode=None, TransactionData=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransactionIdentifier = TransactionIdentifier
        self.TransactionIdentifier_nsprefix_ = None
        self.TransactionCode = TransactionCode
        self.validate_TransactionCodeType(self.TransactionCode)
        self.TransactionCode_nsprefix_ = None
        self.TransactionSubCode = TransactionSubCode
        self.validate_TransactionSubCodeType(self.TransactionSubCode)
        self.TransactionSubCode_nsprefix_ = None
        self.TransactionData = TransactionData
        self.TransactionData_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionContentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionContentDetailsType.subclass:
            return TransactionContentDetailsType.subclass(*args_, **kwargs_)
        else:
            return TransactionContentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransactionIdentifier(self):
        return self.TransactionIdentifier
    def set_TransactionIdentifier(self, TransactionIdentifier):
        self.TransactionIdentifier = TransactionIdentifier
    def get_TransactionCode(self):
        return self.TransactionCode
    def set_TransactionCode(self, TransactionCode):
        self.TransactionCode = TransactionCode
    def get_TransactionSubCode(self):
        return self.TransactionSubCode
    def set_TransactionSubCode(self, TransactionSubCode):
        self.TransactionSubCode = TransactionSubCode
    def get_TransactionData(self):
        return self.TransactionData
    def set_TransactionData(self, TransactionData):
        self.TransactionData = TransactionData
    def validate_TransactionCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def validate_TransactionSubCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.TransactionIdentifier is not None or
            self.TransactionCode is not None or
            self.TransactionSubCode is not None or
            self.TransactionData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionContentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionContentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionContentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionContentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionContentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionContentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TransactionContentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransactionIdentifier is not None:
            namespaceprefix_ = self.TransactionIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionIdentifier>%s</%sTransactionIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionIdentifier), input_name='TransactionIdentifier')), namespaceprefix_ , eol_))
        if self.TransactionCode is not None:
            namespaceprefix_ = self.TransactionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionCode>%s</%sTransactionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionCode), input_name='TransactionCode')), namespaceprefix_ , eol_))
        if self.TransactionSubCode is not None:
            namespaceprefix_ = self.TransactionSubCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionSubCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionSubCode>%s</%sTransactionSubCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionSubCode), input_name='TransactionSubCode')), namespaceprefix_ , eol_))
        if self.TransactionData is not None:
            namespaceprefix_ = self.TransactionData_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionData_nsprefix_) else ''
            self.TransactionData.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionData', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransactionIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransactionIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TransactionIdentifier')
            self.TransactionIdentifier = value_
            self.TransactionIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransactionCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransactionCode')
            value_ = self.gds_validate_string(value_, node, 'TransactionCode')
            self.TransactionCode = value_
            self.TransactionCode_nsprefix_ = child_.prefix
            # validate type TransactionCodeType
            self.validate_TransactionCodeType(self.TransactionCode)
        elif nodeName_ == 'TransactionSubCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransactionSubCode')
            value_ = self.gds_validate_string(value_, node, 'TransactionSubCode')
            self.TransactionSubCode = value_
            self.TransactionSubCode_nsprefix_ = child_.prefix
            # validate type TransactionSubCodeType
            self.validate_TransactionSubCodeType(self.TransactionSubCode)
        elif nodeName_ == 'TransactionData':
            obj_ = TransactionDataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionData = obj_
            obj_.original_tagname_ = 'TransactionData'
# end class TransactionContentDetailsType


class TradeMarkDetailsType1(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMark=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMark is None:
            self.TradeMark = []
        else:
            self.TradeMark = TradeMark
        self.TradeMark_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkDetailsType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkDetailsType1.subclass:
            return TradeMarkDetailsType1.subclass(*args_, **kwargs_)
        else:
            return TradeMarkDetailsType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMark(self):
        return self.TradeMark
    def set_TradeMark(self, TradeMark):
        self.TradeMark = TradeMark
    def add_TradeMark(self, value):
        self.TradeMark.append(value)
    def insert_TradeMark_at(self, index, value):
        self.TradeMark.insert(index, value)
    def replace_TradeMark_at(self, index, value):
        self.TradeMark[index] = value
    def hasContent_(self):
        if (
            self.TradeMark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkDetailsType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkDetailsType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkDetailsType1':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkDetailsType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkDetailsType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkDetailsType1'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkDetailsType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMark_ in self.TradeMark:
            namespaceprefix_ = self.TradeMark_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMark_nsprefix_) else ''
            TradeMark_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMark', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMark':
            obj_ = TradeMarkType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMark.append(obj_)
            obj_.original_tagname_ = 'TradeMark'
# end class TradeMarkDetailsType1


class ApplicantDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Applicant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Applicant is None:
            self.Applicant = []
        else:
            self.Applicant = Applicant
        self.Applicant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ApplicantDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ApplicantDetailsType.subclass:
            return ApplicantDetailsType.subclass(*args_, **kwargs_)
        else:
            return ApplicantDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Applicant(self):
        return self.Applicant
    def set_Applicant(self, Applicant):
        self.Applicant = Applicant
    def add_Applicant(self, value):
        self.Applicant.append(value)
    def insert_Applicant_at(self, index, value):
        self.Applicant.insert(index, value)
    def replace_Applicant_at(self, index, value):
        self.Applicant[index] = value
    def hasContent_(self):
        if (
            self.Applicant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ApplicantDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ApplicantDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ApplicantDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ApplicantDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ApplicantDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Applicant_ in self.Applicant:
            namespaceprefix_ = self.Applicant_nsprefix_ + ':' if (UseCapturedNS_ and self.Applicant_nsprefix_) else ''
            Applicant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Applicant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Applicant':
            obj_ = ApplicantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Applicant.append(obj_)
            obj_.original_tagname_ = 'Applicant'
# end class ApplicantDetailsType


class RepresentativeDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType.subclass:
            return RepresentativeDetailsType.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType


class MarkRecordDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkRecord=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkRecord is None:
            self.MarkRecord = []
        else:
            self.MarkRecord = MarkRecord
        self.MarkRecord_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkRecordDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkRecordDetailsType.subclass:
            return MarkRecordDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkRecordDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkRecord(self):
        return self.MarkRecord
    def set_MarkRecord(self, MarkRecord):
        self.MarkRecord = MarkRecord
    def add_MarkRecord(self, value):
        self.MarkRecord.append(value)
    def insert_MarkRecord_at(self, index, value):
        self.MarkRecord.insert(index, value)
    def replace_MarkRecord_at(self, index, value):
        self.MarkRecord[index] = value
    def hasContent_(self):
        if (
            self.MarkRecord
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkRecordDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkRecordDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkRecordDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkRecordDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkRecordDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkRecord_ in self.MarkRecord:
            namespaceprefix_ = self.MarkRecord_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkRecord_nsprefix_) else ''
            MarkRecord_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkRecord', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkRecord':
            obj_ = MarkRecordType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkRecord.append(obj_)
            obj_.original_tagname_ = 'MarkRecord'
# end class MarkRecordDetailsType


class MarkRecordRelationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkRecordRelation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkRecordRelation is None:
            self.MarkRecordRelation = []
        else:
            self.MarkRecordRelation = MarkRecordRelation
        self.MarkRecordRelation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkRecordRelationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkRecordRelationDetailsType.subclass:
            return MarkRecordRelationDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkRecordRelationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkRecordRelation(self):
        return self.MarkRecordRelation
    def set_MarkRecordRelation(self, MarkRecordRelation):
        self.MarkRecordRelation = MarkRecordRelation
    def add_MarkRecordRelation(self, value):
        self.MarkRecordRelation.append(value)
    def insert_MarkRecordRelation_at(self, index, value):
        self.MarkRecordRelation.insert(index, value)
    def replace_MarkRecordRelation_at(self, index, value):
        self.MarkRecordRelation[index] = value
    def hasContent_(self):
        if (
            self.MarkRecordRelation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordRelationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkRecordRelationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkRecordRelationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkRecordRelationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkRecordRelationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkRecordRelationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordRelationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkRecordRelation_ in self.MarkRecordRelation:
            namespaceprefix_ = self.MarkRecordRelation_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkRecordRelation_nsprefix_) else ''
            MarkRecordRelation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkRecordRelation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkRecordRelation':
            obj_ = MarkRecordRelationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkRecordRelation.append(obj_)
            obj_.original_tagname_ = 'MarkRecordRelation'
# end class MarkRecordRelationDetailsType


class ClassificationTermDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClassificationTerm=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClassificationTerm is None:
            self.ClassificationTerm = []
        else:
            self.ClassificationTerm = ClassificationTerm
        self.ClassificationTerm_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassificationTermDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassificationTermDetailsType.subclass:
            return ClassificationTermDetailsType.subclass(*args_, **kwargs_)
        else:
            return ClassificationTermDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClassificationTerm(self):
        return self.ClassificationTerm
    def set_ClassificationTerm(self, ClassificationTerm):
        self.ClassificationTerm = ClassificationTerm
    def add_ClassificationTerm(self, value):
        self.ClassificationTerm.append(value)
    def insert_ClassificationTerm_at(self, index, value):
        self.ClassificationTerm.insert(index, value)
    def replace_ClassificationTerm_at(self, index, value):
        self.ClassificationTerm[index] = value
    def hasContent_(self):
        if (
            self.ClassificationTerm
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassificationTermDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClassificationTermDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClassificationTermDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClassificationTermDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClassificationTermDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClassificationTermDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassificationTermDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClassificationTerm_ in self.ClassificationTerm:
            namespaceprefix_ = self.ClassificationTerm_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTerm_nsprefix_) else ''
            ClassificationTerm_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassificationTerm', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClassificationTerm':
            obj_ = ClassificationTermType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassificationTerm.append(obj_)
            obj_.original_tagname_ = 'ClassificationTerm'
# end class ClassificationTermDetailsType


class TermSynonymRelationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TermSynonymRelation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TermSynonymRelation is None:
            self.TermSynonymRelation = []
        else:
            self.TermSynonymRelation = TermSynonymRelation
        self.TermSynonymRelation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TermSynonymRelationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TermSynonymRelationDetailsType.subclass:
            return TermSynonymRelationDetailsType.subclass(*args_, **kwargs_)
        else:
            return TermSynonymRelationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TermSynonymRelation(self):
        return self.TermSynonymRelation
    def set_TermSynonymRelation(self, TermSynonymRelation):
        self.TermSynonymRelation = TermSynonymRelation
    def add_TermSynonymRelation(self, value):
        self.TermSynonymRelation.append(value)
    def insert_TermSynonymRelation_at(self, index, value):
        self.TermSynonymRelation.insert(index, value)
    def replace_TermSynonymRelation_at(self, index, value):
        self.TermSynonymRelation[index] = value
    def hasContent_(self):
        if (
            self.TermSynonymRelation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermSynonymRelationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TermSynonymRelationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TermSynonymRelationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TermSynonymRelationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TermSynonymRelationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TermSynonymRelationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermSynonymRelationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TermSynonymRelation_ in self.TermSynonymRelation:
            namespaceprefix_ = self.TermSynonymRelation_nsprefix_ + ':' if (UseCapturedNS_ and self.TermSynonymRelation_nsprefix_) else ''
            TermSynonymRelation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TermSynonymRelation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TermSynonymRelation':
            obj_ = TermSynonymRelationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TermSynonymRelation.append(obj_)
            obj_.original_tagname_ = 'TermSynonymRelation'
# end class TermSynonymRelationDetailsType


class TermTranslationRelationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TermTranslationRelation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TermTranslationRelation is None:
            self.TermTranslationRelation = []
        else:
            self.TermTranslationRelation = TermTranslationRelation
        self.TermTranslationRelation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TermTranslationRelationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TermTranslationRelationDetailsType.subclass:
            return TermTranslationRelationDetailsType.subclass(*args_, **kwargs_)
        else:
            return TermTranslationRelationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TermTranslationRelation(self):
        return self.TermTranslationRelation
    def set_TermTranslationRelation(self, TermTranslationRelation):
        self.TermTranslationRelation = TermTranslationRelation
    def add_TermTranslationRelation(self, value):
        self.TermTranslationRelation.append(value)
    def insert_TermTranslationRelation_at(self, index, value):
        self.TermTranslationRelation.insert(index, value)
    def replace_TermTranslationRelation_at(self, index, value):
        self.TermTranslationRelation[index] = value
    def hasContent_(self):
        if (
            self.TermTranslationRelation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermTranslationRelationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TermTranslationRelationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TermTranslationRelationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TermTranslationRelationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TermTranslationRelationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TermTranslationRelationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TermTranslationRelationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TermTranslationRelation_ in self.TermTranslationRelation:
            namespaceprefix_ = self.TermTranslationRelation_nsprefix_ + ':' if (UseCapturedNS_ and self.TermTranslationRelation_nsprefix_) else ''
            TermTranslationRelation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TermTranslationRelation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TermTranslationRelation':
            obj_ = TermTranslationRelationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TermTranslationRelation.append(obj_)
            obj_.original_tagname_ = 'TermTranslationRelation'
# end class TermTranslationRelationDetailsType


class AppealDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Appeal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Appeal is None:
            self.Appeal = []
        else:
            self.Appeal = Appeal
        self.Appeal_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppealDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppealDetailsType.subclass:
            return AppealDetailsType.subclass(*args_, **kwargs_)
        else:
            return AppealDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Appeal(self):
        return self.Appeal
    def set_Appeal(self, Appeal):
        self.Appeal = Appeal
    def add_Appeal(self, value):
        self.Appeal.append(value)
    def insert_Appeal_at(self, index, value):
        self.Appeal.insert(index, value)
    def replace_Appeal_at(self, index, value):
        self.Appeal[index] = value
    def hasContent_(self):
        if (
            self.Appeal
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppealDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppealDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppealDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppealDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppealDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Appeal_ in self.Appeal:
            namespaceprefix_ = self.Appeal_nsprefix_ + ':' if (UseCapturedNS_ and self.Appeal_nsprefix_) else ''
            Appeal_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Appeal', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Appeal':
            obj_ = AppealType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Appeal.append(obj_)
            obj_.original_tagname_ = 'Appeal'
# end class AppealDetailsType


class DecisionDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Decision=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Decision is None:
            self.Decision = []
        else:
            self.Decision = Decision
        self.Decision_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DecisionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DecisionDetailsType.subclass:
            return DecisionDetailsType.subclass(*args_, **kwargs_)
        else:
            return DecisionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Decision(self):
        return self.Decision
    def set_Decision(self, Decision):
        self.Decision = Decision
    def add_Decision(self, value):
        self.Decision.append(value)
    def insert_Decision_at(self, index, value):
        self.Decision.insert(index, value)
    def replace_Decision_at(self, index, value):
        self.Decision[index] = value
    def hasContent_(self):
        if (
            self.Decision
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DecisionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DecisionDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DecisionDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DecisionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DecisionDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Decision_ in self.Decision:
            namespaceprefix_ = self.Decision_nsprefix_ + ':' if (UseCapturedNS_ and self.Decision_nsprefix_) else ''
            Decision_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Decision', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Decision':
            obj_ = DecisionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Decision.append(obj_)
            obj_.original_tagname_ = 'Decision'
# end class DecisionDetailsType


class DecisionCaseRelationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DecisionCaseRelation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DecisionCaseRelation is None:
            self.DecisionCaseRelation = []
        else:
            self.DecisionCaseRelation = DecisionCaseRelation
        self.DecisionCaseRelation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DecisionCaseRelationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DecisionCaseRelationDetailsType.subclass:
            return DecisionCaseRelationDetailsType.subclass(*args_, **kwargs_)
        else:
            return DecisionCaseRelationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DecisionCaseRelation(self):
        return self.DecisionCaseRelation
    def set_DecisionCaseRelation(self, DecisionCaseRelation):
        self.DecisionCaseRelation = DecisionCaseRelation
    def add_DecisionCaseRelation(self, value):
        self.DecisionCaseRelation.append(value)
    def insert_DecisionCaseRelation_at(self, index, value):
        self.DecisionCaseRelation.insert(index, value)
    def replace_DecisionCaseRelation_at(self, index, value):
        self.DecisionCaseRelation[index] = value
    def hasContent_(self):
        if (
            self.DecisionCaseRelation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionCaseRelationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DecisionCaseRelationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DecisionCaseRelationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DecisionCaseRelationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DecisionCaseRelationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DecisionCaseRelationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionCaseRelationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DecisionCaseRelation_ in self.DecisionCaseRelation:
            namespaceprefix_ = self.DecisionCaseRelation_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionCaseRelation_nsprefix_) else ''
            DecisionCaseRelation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DecisionCaseRelation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DecisionCaseRelation':
            obj_ = DecisionCaseRelationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DecisionCaseRelation.append(obj_)
            obj_.original_tagname_ = 'DecisionCaseRelation'
# end class DecisionCaseRelationDetailsType


class SenderDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequestIdentifier=None, RequestLanguageCode=None, RequestXSDVersion=None, RequestFilename=None, RequestStatus=None, RequestProducer=None, RequestProducerDate=None, RequestProducerDateTime=None, RequestReceivingOfficeCode=None, LoginInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RequestIdentifier = RequestIdentifier
        self.RequestIdentifier_nsprefix_ = None
        self.RequestLanguageCode = RequestLanguageCode
        self.validate_ISOLanguageCodeType(self.RequestLanguageCode)
        self.RequestLanguageCode_nsprefix_ = None
        self.RequestXSDVersion = RequestXSDVersion
        self.RequestXSDVersion_nsprefix_ = None
        self.RequestFilename = RequestFilename
        self.RequestFilename_nsprefix_ = None
        self.RequestStatus = RequestStatus
        self.RequestStatus_nsprefix_ = None
        self.RequestProducer = RequestProducer
        self.RequestProducer_nsprefix_ = None
        if isinstance(RequestProducerDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestProducerDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RequestProducerDate
        self.RequestProducerDate = initvalue_
        self.RequestProducerDate_nsprefix_ = None
        if isinstance(RequestProducerDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestProducerDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RequestProducerDateTime
        self.RequestProducerDateTime = initvalue_
        self.RequestProducerDateTime_nsprefix_ = None
        self.RequestReceivingOfficeCode = RequestReceivingOfficeCode
        self.validate_WIPOST3CodeType(self.RequestReceivingOfficeCode)
        self.RequestReceivingOfficeCode_nsprefix_ = None
        self.LoginInformation = LoginInformation
        self.LoginInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SenderDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SenderDetailsType.subclass:
            return SenderDetailsType.subclass(*args_, **kwargs_)
        else:
            return SenderDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequestIdentifier(self):
        return self.RequestIdentifier
    def set_RequestIdentifier(self, RequestIdentifier):
        self.RequestIdentifier = RequestIdentifier
    def get_RequestLanguageCode(self):
        return self.RequestLanguageCode
    def set_RequestLanguageCode(self, RequestLanguageCode):
        self.RequestLanguageCode = RequestLanguageCode
    def get_RequestXSDVersion(self):
        return self.RequestXSDVersion
    def set_RequestXSDVersion(self, RequestXSDVersion):
        self.RequestXSDVersion = RequestXSDVersion
    def get_RequestFilename(self):
        return self.RequestFilename
    def set_RequestFilename(self, RequestFilename):
        self.RequestFilename = RequestFilename
    def get_RequestStatus(self):
        return self.RequestStatus
    def set_RequestStatus(self, RequestStatus):
        self.RequestStatus = RequestStatus
    def get_RequestProducer(self):
        return self.RequestProducer
    def set_RequestProducer(self, RequestProducer):
        self.RequestProducer = RequestProducer
    def get_RequestProducerDate(self):
        return self.RequestProducerDate
    def set_RequestProducerDate(self, RequestProducerDate):
        self.RequestProducerDate = RequestProducerDate
    def get_RequestProducerDateTime(self):
        return self.RequestProducerDateTime
    def set_RequestProducerDateTime(self, RequestProducerDateTime):
        self.RequestProducerDateTime = RequestProducerDateTime
    def get_RequestReceivingOfficeCode(self):
        return self.RequestReceivingOfficeCode
    def set_RequestReceivingOfficeCode(self, RequestReceivingOfficeCode):
        self.RequestReceivingOfficeCode = RequestReceivingOfficeCode
    def get_LoginInformation(self):
        return self.LoginInformation
    def set_LoginInformation(self, LoginInformation):
        self.LoginInformation = LoginInformation
    def validate_ISOLanguageCodeType(self, value):
        result = True
        # Validate type ISOLanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['aa', 'ab', 'af', 'am', 'ar', 'as', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bn', 'bo', 'br', 'ca', 'co', 'cs', 'cy', 'da', 'de', 'dz', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'ha', 'he', 'hi', 'hr', 'hu', 'hy', 'ia', 'id', 'ie', 'ik', 'is', 'it', 'iu', 'ja', 'jw', 'ka', 'kk', 'kl', 'km', 'kn', 'ko', 'ks', 'ku', 'ky', 'la', 'ln', 'lo', 'lt', 'lv', 'mg', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'ne', 'nl', 'no', 'oc', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sd', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ug', 'uk', 'ur', 'uz', 'vi', 'vo', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOLanguageCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_WIPOST3CodeType(self, value):
        result = True
        # Validate type WIPOST3CodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AP', 'AR', 'AT', 'AU', 'AW', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EA', 'EC', 'EE', 'EG', 'EH', 'EM', 'EP', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FO', 'FR', 'GA', 'GB', 'GC', 'GD', 'GE', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GQ', 'GR', 'GS', 'GT', 'GW', 'GY', 'HK', 'HN', 'HR', 'HT', 'HU', 'IB', 'ID', 'IE', 'IL', 'IM', 'IN', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NE', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NZ', 'OA', 'OM', 'PA', 'PE', 'PG', 'PH', 'PK', 'PL', 'PT', 'PW', 'PY', 'QA', 'QZ', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TG', 'TH', 'TJ', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VN', 'VU', 'WO', 'WS', 'XN', 'YE', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WIPOST3CodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RequestIdentifier is not None or
            self.RequestLanguageCode is not None or
            self.RequestXSDVersion is not None or
            self.RequestFilename is not None or
            self.RequestStatus is not None or
            self.RequestProducer is not None or
            self.RequestProducerDate is not None or
            self.RequestProducerDateTime is not None or
            self.RequestReceivingOfficeCode is not None or
            self.LoginInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SenderDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SenderDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SenderDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SenderDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SenderDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SenderDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SenderDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestIdentifier is not None:
            namespaceprefix_ = self.RequestIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestIdentifier>%s</%sRequestIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestIdentifier), input_name='RequestIdentifier')), namespaceprefix_ , eol_))
        if self.RequestLanguageCode is not None:
            namespaceprefix_ = self.RequestLanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestLanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestLanguageCode>%s</%sRequestLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestLanguageCode), input_name='RequestLanguageCode')), namespaceprefix_ , eol_))
        if self.RequestXSDVersion is not None:
            namespaceprefix_ = self.RequestXSDVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestXSDVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestXSDVersion>%s</%sRequestXSDVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestXSDVersion), input_name='RequestXSDVersion')), namespaceprefix_ , eol_))
        if self.RequestFilename is not None:
            namespaceprefix_ = self.RequestFilename_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestFilename_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestFilename>%s</%sRequestFilename>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestFilename), input_name='RequestFilename')), namespaceprefix_ , eol_))
        if self.RequestStatus is not None:
            namespaceprefix_ = self.RequestStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestStatus>%s</%sRequestStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestStatus), input_name='RequestStatus')), namespaceprefix_ , eol_))
        if self.RequestProducer is not None:
            namespaceprefix_ = self.RequestProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestProducer>%s</%sRequestProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestProducer), input_name='RequestProducer')), namespaceprefix_ , eol_))
        if self.RequestProducerDate is not None:
            namespaceprefix_ = self.RequestProducerDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestProducerDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestProducerDate>%s</%sRequestProducerDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RequestProducerDate, input_name='RequestProducerDate'), namespaceprefix_ , eol_))
        if self.RequestProducerDateTime is not None:
            namespaceprefix_ = self.RequestProducerDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestProducerDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestProducerDateTime>%s</%sRequestProducerDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RequestProducerDateTime, input_name='RequestProducerDateTime'), namespaceprefix_ , eol_))
        if self.RequestReceivingOfficeCode is not None:
            namespaceprefix_ = self.RequestReceivingOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestReceivingOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestReceivingOfficeCode>%s</%sRequestReceivingOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestReceivingOfficeCode), input_name='RequestReceivingOfficeCode')), namespaceprefix_ , eol_))
        if self.LoginInformation is not None:
            namespaceprefix_ = self.LoginInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.LoginInformation_nsprefix_) else ''
            self.LoginInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LoginInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequestIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RequestIdentifier')
            self.RequestIdentifier = value_
            self.RequestIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestLanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestLanguageCode')
            value_ = self.gds_validate_string(value_, node, 'RequestLanguageCode')
            self.RequestLanguageCode = value_
            self.RequestLanguageCode_nsprefix_ = child_.prefix
            # validate type ISOLanguageCodeType
            self.validate_ISOLanguageCodeType(self.RequestLanguageCode)
        elif nodeName_ == 'RequestXSDVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestXSDVersion')
            value_ = self.gds_validate_string(value_, node, 'RequestXSDVersion')
            self.RequestXSDVersion = value_
            self.RequestXSDVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestFilename':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestFilename')
            value_ = self.gds_validate_string(value_, node, 'RequestFilename')
            self.RequestFilename = value_
            self.RequestFilename_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestStatus')
            value_ = self.gds_validate_string(value_, node, 'RequestStatus')
            self.RequestStatus = value_
            self.RequestStatus_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestProducer')
            value_ = self.gds_validate_string(value_, node, 'RequestProducer')
            self.RequestProducer = value_
            self.RequestProducer_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestProducerDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RequestProducerDate = dval_
            self.RequestProducerDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestProducerDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RequestProducerDateTime = dval_
            self.RequestProducerDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestReceivingOfficeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestReceivingOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'RequestReceivingOfficeCode')
            self.RequestReceivingOfficeCode = value_
            self.RequestReceivingOfficeCode_nsprefix_ = child_.prefix
            # validate type WIPOST3CodeType
            self.validate_WIPOST3CodeType(self.RequestReceivingOfficeCode)
        elif nodeName_ == 'LoginInformation':
            obj_ = LoginInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LoginInformation = obj_
            obj_.original_tagname_ = 'LoginInformation'
# end class SenderDetailsType


class ReceiverDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReceiverDateTime=None, Comment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(ReceiverDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReceiverDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReceiverDateTime
        self.ReceiverDateTime = initvalue_
        self.ReceiverDateTime_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReceiverDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReceiverDetailsType.subclass:
            return ReceiverDetailsType.subclass(*args_, **kwargs_)
        else:
            return ReceiverDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReceiverDateTime(self):
        return self.ReceiverDateTime
    def set_ReceiverDateTime(self, ReceiverDateTime):
        self.ReceiverDateTime = ReceiverDateTime
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def hasContent_(self):
        if (
            self.ReceiverDateTime is not None or
            self.Comment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReceiverDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReceiverDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReceiverDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReceiverDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReceiverDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReceiverDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReceiverDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReceiverDateTime is not None:
            namespaceprefix_ = self.ReceiverDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceiverDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceiverDateTime>%s</%sReceiverDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ReceiverDateTime, input_name='ReceiverDateTime'), namespaceprefix_ , eol_))
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            self.Comment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Comment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReceiverDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReceiverDateTime = dval_
            self.ReceiverDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comment':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Comment = obj_
            obj_.original_tagname_ = 'Comment'
# end class ReceiverDetailsType


class FreeFormatAddressDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreeFormatNameAddressLine=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if FreeFormatNameAddressLine is None:
            self.FreeFormatNameAddressLine = []
        else:
            self.FreeFormatNameAddressLine = FreeFormatNameAddressLine
        self.FreeFormatNameAddressLine_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreeFormatAddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreeFormatAddressDetailsType.subclass:
            return FreeFormatAddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return FreeFormatAddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreeFormatNameAddressLine(self):
        return self.FreeFormatNameAddressLine
    def set_FreeFormatNameAddressLine(self, FreeFormatNameAddressLine):
        self.FreeFormatNameAddressLine = FreeFormatNameAddressLine
    def add_FreeFormatNameAddressLine(self, value):
        self.FreeFormatNameAddressLine.append(value)
    def insert_FreeFormatNameAddressLine_at(self, index, value):
        self.FreeFormatNameAddressLine.insert(index, value)
    def replace_FreeFormatNameAddressLine_at(self, index, value):
        self.FreeFormatNameAddressLine[index] = value
    def hasContent_(self):
        if (
            self.FreeFormatNameAddressLine
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatAddressDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreeFormatAddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreeFormatAddressDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreeFormatAddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreeFormatAddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreeFormatAddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatAddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FreeFormatNameAddressLine_ in self.FreeFormatNameAddressLine:
            namespaceprefix_ = self.FreeFormatNameAddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.FreeFormatNameAddressLine_nsprefix_) else ''
            FreeFormatNameAddressLine_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreeFormatNameAddressLine', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreeFormatNameAddressLine':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreeFormatNameAddressLine.append(obj_)
            obj_.original_tagname_ = 'FreeFormatNameAddressLine'
# end class FreeFormatAddressDetailsType


class ContactInformationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Phone=None, Fax=None, Email=None, URL=None, OtherElectronicAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Phone is None:
            self.Phone = []
        else:
            self.Phone = Phone
        self.Phone_nsprefix_ = None
        if Fax is None:
            self.Fax = []
        else:
            self.Fax = Fax
        self.Fax_nsprefix_ = None
        if Email is None:
            self.Email = []
        else:
            self.Email = Email
        self.Email_nsprefix_ = None
        if URL is None:
            self.URL = []
        else:
            self.URL = URL
        self.URL_nsprefix_ = None
        if OtherElectronicAddress is None:
            self.OtherElectronicAddress = []
        else:
            self.OtherElectronicAddress = OtherElectronicAddress
        self.OtherElectronicAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactInformationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactInformationDetailsType.subclass:
            return ContactInformationDetailsType.subclass(*args_, **kwargs_)
        else:
            return ContactInformationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def add_Phone(self, value):
        self.Phone.append(value)
    def insert_Phone_at(self, index, value):
        self.Phone.insert(index, value)
    def replace_Phone_at(self, index, value):
        self.Phone[index] = value
    def get_Fax(self):
        return self.Fax
    def set_Fax(self, Fax):
        self.Fax = Fax
    def add_Fax(self, value):
        self.Fax.append(value)
    def insert_Fax_at(self, index, value):
        self.Fax.insert(index, value)
    def replace_Fax_at(self, index, value):
        self.Fax[index] = value
    def get_Email(self):
        return self.Email
    def set_Email(self, Email):
        self.Email = Email
    def add_Email(self, value):
        self.Email.append(value)
    def insert_Email_at(self, index, value):
        self.Email.insert(index, value)
    def replace_Email_at(self, index, value):
        self.Email[index] = value
    def get_URL(self):
        return self.URL
    def set_URL(self, URL):
        self.URL = URL
    def add_URL(self, value):
        self.URL.append(value)
    def insert_URL_at(self, index, value):
        self.URL.insert(index, value)
    def replace_URL_at(self, index, value):
        self.URL[index] = value
    def get_OtherElectronicAddress(self):
        return self.OtherElectronicAddress
    def set_OtherElectronicAddress(self, OtherElectronicAddress):
        self.OtherElectronicAddress = OtherElectronicAddress
    def add_OtherElectronicAddress(self, value):
        self.OtherElectronicAddress.append(value)
    def insert_OtherElectronicAddress_at(self, index, value):
        self.OtherElectronicAddress.insert(index, value)
    def replace_OtherElectronicAddress_at(self, index, value):
        self.OtherElectronicAddress[index] = value
    def hasContent_(self):
        if (
            self.Phone or
            self.Fax or
            self.Email or
            self.URL or
            self.OtherElectronicAddress
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ContactInformationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactInformationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactInformationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactInformationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactInformationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContactInformationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ContactInformationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Phone_ in self.Phone:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            Phone_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        for Fax_ in self.Fax:
            namespaceprefix_ = self.Fax_nsprefix_ + ':' if (UseCapturedNS_ and self.Fax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFax>%s</%sFax>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Fax_), input_name='Fax')), namespaceprefix_ , eol_))
        for Email_ in self.Email:
            namespaceprefix_ = self.Email_nsprefix_ + ':' if (UseCapturedNS_ and self.Email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmail>%s</%sEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Email_), input_name='Email')), namespaceprefix_ , eol_))
        for URL_ in self.URL:
            namespaceprefix_ = self.URL_nsprefix_ + ':' if (UseCapturedNS_ and self.URL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sURL>%s</%sURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(URL_), input_name='URL')), namespaceprefix_ , eol_))
        for OtherElectronicAddress_ in self.OtherElectronicAddress:
            namespaceprefix_ = self.OtherElectronicAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherElectronicAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherElectronicAddress>%s</%sOtherElectronicAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(OtherElectronicAddress_), input_name='OtherElectronicAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Phone':
            obj_ = PhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone.append(obj_)
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'Fax':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Fax')
            value_ = self.gds_validate_string(value_, node, 'Fax')
            self.Fax.append(value_)
            self.Fax_nsprefix_ = child_.prefix
        elif nodeName_ == 'Email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Email')
            value_ = self.gds_validate_string(value_, node, 'Email')
            self.Email.append(value_)
            self.Email_nsprefix_ = child_.prefix
        elif nodeName_ == 'URL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'URL')
            value_ = self.gds_validate_string(value_, node, 'URL')
            self.URL.append(value_)
            self.URL_nsprefix_ = child_.prefix
        elif nodeName_ == 'OtherElectronicAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OtherElectronicAddress')
            value_ = self.gds_validate_string(value_, node, 'OtherElectronicAddress')
            self.OtherElectronicAddress.append(value_)
            self.OtherElectronicAddress_nsprefix_ = child_.prefix
# end class ContactInformationDetailsType


class FreeFormatAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreeFormatAddressLine=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if FreeFormatAddressLine is None:
            self.FreeFormatAddressLine = []
        else:
            self.FreeFormatAddressLine = FreeFormatAddressLine
        self.FreeFormatAddressLine_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreeFormatAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreeFormatAddressType.subclass:
            return FreeFormatAddressType.subclass(*args_, **kwargs_)
        else:
            return FreeFormatAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreeFormatAddressLine(self):
        return self.FreeFormatAddressLine
    def set_FreeFormatAddressLine(self, FreeFormatAddressLine):
        self.FreeFormatAddressLine = FreeFormatAddressLine
    def add_FreeFormatAddressLine(self, value):
        self.FreeFormatAddressLine.append(value)
    def insert_FreeFormatAddressLine_at(self, index, value):
        self.FreeFormatAddressLine.insert(index, value)
    def replace_FreeFormatAddressLine_at(self, index, value):
        self.FreeFormatAddressLine[index] = value
    def hasContent_(self):
        if (
            self.FreeFormatAddressLine
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreeFormatAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreeFormatAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreeFormatAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreeFormatAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreeFormatAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FreeFormatAddressLine_ in self.FreeFormatAddressLine:
            namespaceprefix_ = self.FreeFormatAddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.FreeFormatAddressLine_nsprefix_) else ''
            FreeFormatAddressLine_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreeFormatAddressLine', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreeFormatAddressLine':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreeFormatAddressLine.append(obj_)
            obj_.original_tagname_ = 'FreeFormatAddressLine'
# end class FreeFormatAddressType


class FormattedAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, AddressMailCode=None, AddressPostOfficeBox=None, AddressRoom=None, AddressFloor=None, AddressBuilding=None, AddressStreet=None, AddressCity=None, AddressCounty=None, AddressState=None, AddressPostcode=None, FormattedAddressCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.AddressMailCode = AddressMailCode
        self.AddressMailCode_nsprefix_ = None
        self.AddressPostOfficeBox = AddressPostOfficeBox
        self.AddressPostOfficeBox_nsprefix_ = None
        self.AddressRoom = AddressRoom
        self.AddressRoom_nsprefix_ = None
        self.AddressFloor = AddressFloor
        self.AddressFloor_nsprefix_ = None
        self.AddressBuilding = AddressBuilding
        self.AddressBuilding_nsprefix_ = None
        self.AddressStreet = AddressStreet
        self.AddressStreet_nsprefix_ = None
        self.AddressCity = AddressCity
        self.AddressCity_nsprefix_ = None
        self.AddressCounty = AddressCounty
        self.AddressCounty_nsprefix_ = None
        self.AddressState = AddressState
        self.AddressState_nsprefix_ = None
        self.AddressPostcode = AddressPostcode
        self.AddressPostcode_nsprefix_ = None
        self.FormattedAddressCountryCode = FormattedAddressCountryCode
        self.validate_ISOCountryCodeType(self.FormattedAddressCountryCode)
        self.FormattedAddressCountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FormattedAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FormattedAddressType.subclass:
            return FormattedAddressType.subclass(*args_, **kwargs_)
        else:
            return FormattedAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_AddressMailCode(self):
        return self.AddressMailCode
    def set_AddressMailCode(self, AddressMailCode):
        self.AddressMailCode = AddressMailCode
    def get_AddressPostOfficeBox(self):
        return self.AddressPostOfficeBox
    def set_AddressPostOfficeBox(self, AddressPostOfficeBox):
        self.AddressPostOfficeBox = AddressPostOfficeBox
    def get_AddressRoom(self):
        return self.AddressRoom
    def set_AddressRoom(self, AddressRoom):
        self.AddressRoom = AddressRoom
    def get_AddressFloor(self):
        return self.AddressFloor
    def set_AddressFloor(self, AddressFloor):
        self.AddressFloor = AddressFloor
    def get_AddressBuilding(self):
        return self.AddressBuilding
    def set_AddressBuilding(self, AddressBuilding):
        self.AddressBuilding = AddressBuilding
    def get_AddressStreet(self):
        return self.AddressStreet
    def set_AddressStreet(self, AddressStreet):
        self.AddressStreet = AddressStreet
    def get_AddressCity(self):
        return self.AddressCity
    def set_AddressCity(self, AddressCity):
        self.AddressCity = AddressCity
    def get_AddressCounty(self):
        return self.AddressCounty
    def set_AddressCounty(self, AddressCounty):
        self.AddressCounty = AddressCounty
    def get_AddressState(self):
        return self.AddressState
    def set_AddressState(self, AddressState):
        self.AddressState = AddressState
    def get_AddressPostcode(self):
        return self.AddressPostcode
    def set_AddressPostcode(self, AddressPostcode):
        self.AddressPostcode = AddressPostcode
    def get_FormattedAddressCountryCode(self):
        return self.FormattedAddressCountryCode
    def set_FormattedAddressCountryCode(self, FormattedAddressCountryCode):
        self.FormattedAddressCountryCode = FormattedAddressCountryCode
    def validate_ISOCountryCodeType(self, value):
        result = True
        # Validate type ISOCountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AN', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BM', 'BN', 'BO', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'ST', 'SV', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ISOCountryCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AddressLine or
            self.AddressMailCode is not None or
            self.AddressPostOfficeBox is not None or
            self.AddressRoom is not None or
            self.AddressFloor is not None or
            self.AddressBuilding is not None or
            self.AddressStreet is not None or
            self.AddressCity is not None or
            self.AddressCounty is not None or
            self.AddressState is not None or
            self.AddressPostcode is not None or
            self.FormattedAddressCountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FormattedAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FormattedAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FormattedAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FormattedAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FormattedAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FormattedAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FormattedAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            AddressLine_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressLine', pretty_print=pretty_print)
        if self.AddressMailCode is not None:
            namespaceprefix_ = self.AddressMailCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressMailCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressMailCode>%s</%sAddressMailCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressMailCode), input_name='AddressMailCode')), namespaceprefix_ , eol_))
        if self.AddressPostOfficeBox is not None:
            namespaceprefix_ = self.AddressPostOfficeBox_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressPostOfficeBox_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressPostOfficeBox>%s</%sAddressPostOfficeBox>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressPostOfficeBox), input_name='AddressPostOfficeBox')), namespaceprefix_ , eol_))
        if self.AddressRoom is not None:
            namespaceprefix_ = self.AddressRoom_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressRoom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressRoom>%s</%sAddressRoom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressRoom), input_name='AddressRoom')), namespaceprefix_ , eol_))
        if self.AddressFloor is not None:
            namespaceprefix_ = self.AddressFloor_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressFloor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressFloor>%s</%sAddressFloor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressFloor), input_name='AddressFloor')), namespaceprefix_ , eol_))
        if self.AddressBuilding is not None:
            namespaceprefix_ = self.AddressBuilding_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressBuilding_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressBuilding>%s</%sAddressBuilding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressBuilding), input_name='AddressBuilding')), namespaceprefix_ , eol_))
        if self.AddressStreet is not None:
            namespaceprefix_ = self.AddressStreet_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressStreet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressStreet>%s</%sAddressStreet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressStreet), input_name='AddressStreet')), namespaceprefix_ , eol_))
        if self.AddressCity is not None:
            namespaceprefix_ = self.AddressCity_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressCity>%s</%sAddressCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressCity), input_name='AddressCity')), namespaceprefix_ , eol_))
        if self.AddressCounty is not None:
            namespaceprefix_ = self.AddressCounty_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressCounty_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressCounty>%s</%sAddressCounty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressCounty), input_name='AddressCounty')), namespaceprefix_ , eol_))
        if self.AddressState is not None:
            namespaceprefix_ = self.AddressState_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressState_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressState>%s</%sAddressState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressState), input_name='AddressState')), namespaceprefix_ , eol_))
        if self.AddressPostcode is not None:
            namespaceprefix_ = self.AddressPostcode_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressPostcode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressPostcode>%s</%sAddressPostcode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressPostcode), input_name='AddressPostcode')), namespaceprefix_ , eol_))
        if self.FormattedAddressCountryCode is not None:
            namespaceprefix_ = self.FormattedAddressCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.FormattedAddressCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormattedAddressCountryCode>%s</%sFormattedAddressCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormattedAddressCountryCode), input_name='FormattedAddressCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressLine.append(obj_)
            obj_.original_tagname_ = 'AddressLine'
        elif nodeName_ == 'AddressMailCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressMailCode')
            value_ = self.gds_validate_string(value_, node, 'AddressMailCode')
            self.AddressMailCode = value_
            self.AddressMailCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressPostOfficeBox':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressPostOfficeBox')
            value_ = self.gds_validate_string(value_, node, 'AddressPostOfficeBox')
            self.AddressPostOfficeBox = value_
            self.AddressPostOfficeBox_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressRoom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressRoom')
            value_ = self.gds_validate_string(value_, node, 'AddressRoom')
            self.AddressRoom = value_
            self.AddressRoom_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressFloor':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressFloor')
            value_ = self.gds_validate_string(value_, node, 'AddressFloor')
            self.AddressFloor = value_
            self.AddressFloor_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressBuilding':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressBuilding')
            value_ = self.gds_validate_string(value_, node, 'AddressBuilding')
            self.AddressBuilding = value_
            self.AddressBuilding_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressStreet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressStreet')
            value_ = self.gds_validate_string(value_, node, 'AddressStreet')
            self.AddressStreet = value_
            self.AddressStreet_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressCity')
            value_ = self.gds_validate_string(value_, node, 'AddressCity')
            self.AddressCity = value_
            self.AddressCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressCounty':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressCounty')
            value_ = self.gds_validate_string(value_, node, 'AddressCounty')
            self.AddressCounty = value_
            self.AddressCounty_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressState':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressState')
            value_ = self.gds_validate_string(value_, node, 'AddressState')
            self.AddressState = value_
            self.AddressState_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressPostcode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressPostcode')
            value_ = self.gds_validate_string(value_, node, 'AddressPostcode')
            self.AddressPostcode = value_
            self.AddressPostcode_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormattedAddressCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormattedAddressCountryCode')
            value_ = self.gds_validate_string(value_, node, 'FormattedAddressCountryCode')
            self.FormattedAddressCountryCode = value_
            self.FormattedAddressCountryCode_nsprefix_ = child_.prefix
            # validate type ISOCountryCodeType
            self.validate_ISOCountryCodeType(self.FormattedAddressCountryCode)
# end class FormattedAddressType


class CaseReferenceDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CaseReference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CaseReference is None:
            self.CaseReference = []
        else:
            self.CaseReference = CaseReference
        self.CaseReference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CaseReferenceDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CaseReferenceDetailsType.subclass:
            return CaseReferenceDetailsType.subclass(*args_, **kwargs_)
        else:
            return CaseReferenceDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CaseReference(self):
        return self.CaseReference
    def set_CaseReference(self, CaseReference):
        self.CaseReference = CaseReference
    def add_CaseReference(self, value):
        self.CaseReference.append(value)
    def insert_CaseReference_at(self, index, value):
        self.CaseReference.insert(index, value)
    def replace_CaseReference_at(self, index, value):
        self.CaseReference[index] = value
    def hasContent_(self):
        if (
            self.CaseReference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CaseReferenceDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CaseReferenceDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CaseReferenceDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CaseReferenceDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CaseReferenceDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CaseReferenceDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CaseReferenceDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CaseReference_ in self.CaseReference:
            namespaceprefix_ = self.CaseReference_nsprefix_ + ':' if (UseCapturedNS_ and self.CaseReference_nsprefix_) else ''
            CaseReference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CaseReference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CaseReference':
            obj_ = CaseReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CaseReference.append(obj_)
            obj_.original_tagname_ = 'CaseReference'
# end class CaseReferenceDetailsType


class AppellantDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AppellantKey=None, Appellant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AppellantKey is None:
            self.AppellantKey = []
        else:
            self.AppellantKey = AppellantKey
        self.AppellantKey_nsprefix_ = None
        if Appellant is None:
            self.Appellant = []
        else:
            self.Appellant = Appellant
        self.Appellant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppellantDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppellantDetailsType.subclass:
            return AppellantDetailsType.subclass(*args_, **kwargs_)
        else:
            return AppellantDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AppellantKey(self):
        return self.AppellantKey
    def set_AppellantKey(self, AppellantKey):
        self.AppellantKey = AppellantKey
    def add_AppellantKey(self, value):
        self.AppellantKey.append(value)
    def insert_AppellantKey_at(self, index, value):
        self.AppellantKey.insert(index, value)
    def replace_AppellantKey_at(self, index, value):
        self.AppellantKey[index] = value
    def get_Appellant(self):
        return self.Appellant
    def set_Appellant(self, Appellant):
        self.Appellant = Appellant
    def add_Appellant(self, value):
        self.Appellant.append(value)
    def insert_Appellant_at(self, index, value):
        self.Appellant.insert(index, value)
    def replace_Appellant_at(self, index, value):
        self.Appellant[index] = value
    def hasContent_(self):
        if (
            self.AppellantKey or
            self.Appellant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppellantDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppellantDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppellantDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppellantDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppellantDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppellantDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppellantDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AppellantKey_ in self.AppellantKey:
            namespaceprefix_ = self.AppellantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.AppellantKey_nsprefix_) else ''
            AppellantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppellantKey', pretty_print=pretty_print)
        for Appellant_ in self.Appellant:
            namespaceprefix_ = self.Appellant_nsprefix_ + ':' if (UseCapturedNS_ and self.Appellant_nsprefix_) else ''
            Appellant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Appellant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AppellantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppellantKey.append(obj_)
            obj_.original_tagname_ = 'AppellantKey'
        elif nodeName_ == 'Appellant':
            obj_ = AppellantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Appellant.append(obj_)
            obj_.original_tagname_ = 'Appellant'
# end class AppellantDetailsType


class RepresentativeDetailsType2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType2.subclass:
            return RepresentativeDetailsType2.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType2


class RespondentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RespondentKey=None, Respondent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RespondentKey is None:
            self.RespondentKey = []
        else:
            self.RespondentKey = RespondentKey
        self.RespondentKey_nsprefix_ = None
        if Respondent is None:
            self.Respondent = []
        else:
            self.Respondent = Respondent
        self.Respondent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RespondentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RespondentDetailsType.subclass:
            return RespondentDetailsType.subclass(*args_, **kwargs_)
        else:
            return RespondentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RespondentKey(self):
        return self.RespondentKey
    def set_RespondentKey(self, RespondentKey):
        self.RespondentKey = RespondentKey
    def add_RespondentKey(self, value):
        self.RespondentKey.append(value)
    def insert_RespondentKey_at(self, index, value):
        self.RespondentKey.insert(index, value)
    def replace_RespondentKey_at(self, index, value):
        self.RespondentKey[index] = value
    def get_Respondent(self):
        return self.Respondent
    def set_Respondent(self, Respondent):
        self.Respondent = Respondent
    def add_Respondent(self, value):
        self.Respondent.append(value)
    def insert_Respondent_at(self, index, value):
        self.Respondent.insert(index, value)
    def replace_Respondent_at(self, index, value):
        self.Respondent[index] = value
    def hasContent_(self):
        if (
            self.RespondentKey or
            self.Respondent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RespondentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RespondentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RespondentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RespondentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RespondentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RespondentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RespondentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RespondentKey_ in self.RespondentKey:
            namespaceprefix_ = self.RespondentKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RespondentKey_nsprefix_) else ''
            RespondentKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RespondentKey', pretty_print=pretty_print)
        for Respondent_ in self.Respondent:
            namespaceprefix_ = self.Respondent_nsprefix_ + ':' if (UseCapturedNS_ and self.Respondent_nsprefix_) else ''
            Respondent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Respondent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RespondentKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RespondentKey.append(obj_)
            obj_.original_tagname_ = 'RespondentKey'
        elif nodeName_ == 'Respondent':
            obj_ = RespondentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Respondent.append(obj_)
            obj_.original_tagname_ = 'Respondent'
# end class RespondentDetailsType


class AppealEventDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AppealEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AppealEvent is None:
            self.AppealEvent = []
        else:
            self.AppealEvent = AppealEvent
        self.AppealEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppealEventDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppealEventDetailsType.subclass:
            return AppealEventDetailsType.subclass(*args_, **kwargs_)
        else:
            return AppealEventDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AppealEvent(self):
        return self.AppealEvent
    def set_AppealEvent(self, AppealEvent):
        self.AppealEvent = AppealEvent
    def add_AppealEvent(self, value):
        self.AppealEvent.append(value)
    def insert_AppealEvent_at(self, index, value):
        self.AppealEvent.insert(index, value)
    def replace_AppealEvent_at(self, index, value):
        self.AppealEvent[index] = value
    def hasContent_(self):
        if (
            self.AppealEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealEventDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppealEventDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppealEventDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppealEventDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppealEventDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppealEventDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealEventDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AppealEvent_ in self.AppealEvent:
            namespaceprefix_ = self.AppealEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealEvent_nsprefix_) else ''
            AppealEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AppealEvent':
            obj_ = AppealEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealEvent.append(obj_)
            obj_.original_tagname_ = 'AppealEvent'
# end class AppealEventDetailsType


class AppealDocumentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AppealDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AppealDocument is None:
            self.AppealDocument = []
        else:
            self.AppealDocument = AppealDocument
        self.AppealDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppealDocumentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppealDocumentDetailsType.subclass:
            return AppealDocumentDetailsType.subclass(*args_, **kwargs_)
        else:
            return AppealDocumentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AppealDocument(self):
        return self.AppealDocument
    def set_AppealDocument(self, AppealDocument):
        self.AppealDocument = AppealDocument
    def add_AppealDocument(self, value):
        self.AppealDocument.append(value)
    def insert_AppealDocument_at(self, index, value):
        self.AppealDocument.insert(index, value)
    def replace_AppealDocument_at(self, index, value):
        self.AppealDocument[index] = value
    def hasContent_(self):
        if (
            self.AppealDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealDocumentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppealDocumentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppealDocumentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppealDocumentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppealDocumentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppealDocumentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AppealDocumentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AppealDocument_ in self.AppealDocument:
            namespaceprefix_ = self.AppealDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.AppealDocument_nsprefix_) else ''
            AppealDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppealDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AppealDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppealDocument.append(obj_)
            obj_.original_tagname_ = 'AppealDocument'
# end class AppealDocumentDetailsType


class TradeMarkKeyDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMarkKey is None:
            self.TradeMarkKey = []
        else:
            self.TradeMarkKey = TradeMarkKey
        self.TradeMarkKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkKeyDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkKeyDetailsType.subclass:
            return TradeMarkKeyDetailsType.subclass(*args_, **kwargs_)
        else:
            return TradeMarkKeyDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkKey(self):
        return self.TradeMarkKey
    def set_TradeMarkKey(self, TradeMarkKey):
        self.TradeMarkKey = TradeMarkKey
    def add_TradeMarkKey(self, value):
        self.TradeMarkKey.append(value)
    def insert_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey.insert(index, value)
    def replace_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkKey
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkKeyDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkKeyDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkKeyDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkKeyDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkKeyDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMarkKey_ in self.TradeMarkKey:
            namespaceprefix_ = self.TradeMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKey_nsprefix_) else ''
            TradeMarkKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKey.append(obj_)
            obj_.original_tagname_ = 'TradeMarkKey'
# end class TradeMarkKeyDetailsType


class RecordPublicationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordPublication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordPublication is None:
            self.RecordPublication = []
        else:
            self.RecordPublication = RecordPublication
        self.RecordPublication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPublicationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPublicationDetailsType.subclass:
            return RecordPublicationDetailsType.subclass(*args_, **kwargs_)
        else:
            return RecordPublicationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordPublication(self):
        return self.RecordPublication
    def set_RecordPublication(self, RecordPublication):
        self.RecordPublication = RecordPublication
    def add_RecordPublication(self, value):
        self.RecordPublication.append(value)
    def insert_RecordPublication_at(self, index, value):
        self.RecordPublication.insert(index, value)
    def replace_RecordPublication_at(self, index, value):
        self.RecordPublication[index] = value
    def hasContent_(self):
        if (
            self.RecordPublication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPublicationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordPublicationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordPublicationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordPublicationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordPublicationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordPublication_ in self.RecordPublication:
            namespaceprefix_ = self.RecordPublication_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublication_nsprefix_) else ''
            RecordPublication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordPublication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublication.append(obj_)
            obj_.original_tagname_ = 'RecordPublication'
# end class RecordPublicationDetailsType


class ClaimantDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClaimantKey=None, Claimant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClaimantKey is None:
            self.ClaimantKey = []
        else:
            self.ClaimantKey = ClaimantKey
        self.ClaimantKey_nsprefix_ = None
        if Claimant is None:
            self.Claimant = []
        else:
            self.Claimant = Claimant
        self.Claimant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClaimantDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClaimantDetailsType.subclass:
            return ClaimantDetailsType.subclass(*args_, **kwargs_)
        else:
            return ClaimantDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClaimantKey(self):
        return self.ClaimantKey
    def set_ClaimantKey(self, ClaimantKey):
        self.ClaimantKey = ClaimantKey
    def add_ClaimantKey(self, value):
        self.ClaimantKey.append(value)
    def insert_ClaimantKey_at(self, index, value):
        self.ClaimantKey.insert(index, value)
    def replace_ClaimantKey_at(self, index, value):
        self.ClaimantKey[index] = value
    def get_Claimant(self):
        return self.Claimant
    def set_Claimant(self, Claimant):
        self.Claimant = Claimant
    def add_Claimant(self, value):
        self.Claimant.append(value)
    def insert_Claimant_at(self, index, value):
        self.Claimant.insert(index, value)
    def replace_Claimant_at(self, index, value):
        self.Claimant[index] = value
    def hasContent_(self):
        if (
            self.ClaimantKey or
            self.Claimant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClaimantDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClaimantDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClaimantDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClaimantDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClaimantDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClaimantKey_ in self.ClaimantKey:
            namespaceprefix_ = self.ClaimantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantKey_nsprefix_) else ''
            ClaimantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantKey', pretty_print=pretty_print)
        for Claimant_ in self.Claimant:
            namespaceprefix_ = self.Claimant_nsprefix_ + ':' if (UseCapturedNS_ and self.Claimant_nsprefix_) else ''
            Claimant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Claimant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClaimantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantKey.append(obj_)
            obj_.original_tagname_ = 'ClaimantKey'
        elif nodeName_ == 'Claimant':
            obj_ = ClaimantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Claimant.append(obj_)
            obj_.original_tagname_ = 'Claimant'
# end class ClaimantDetailsType


class RepresentativeDetailsType3(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType3.subclass:
            return RepresentativeDetailsType3.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType3'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType3


class RecordEventDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordEvent is None:
            self.RecordEvent = []
        else:
            self.RecordEvent = RecordEvent
        self.RecordEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordEventDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordEventDetailsType.subclass:
            return RecordEventDetailsType.subclass(*args_, **kwargs_)
        else:
            return RecordEventDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordEvent(self):
        return self.RecordEvent
    def set_RecordEvent(self, RecordEvent):
        self.RecordEvent = RecordEvent
    def add_RecordEvent(self, value):
        self.RecordEvent.append(value)
    def insert_RecordEvent_at(self, index, value):
        self.RecordEvent.insert(index, value)
    def replace_RecordEvent_at(self, index, value):
        self.RecordEvent[index] = value
    def hasContent_(self):
        if (
            self.RecordEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordEventDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordEventDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordEventDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordEventDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordEventDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordEvent_ in self.RecordEvent:
            namespaceprefix_ = self.RecordEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEvent_nsprefix_) else ''
            RecordEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordEvent':
            obj_ = RecordEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEvent.append(obj_)
            obj_.original_tagname_ = 'RecordEvent'
# end class RecordEventDetailsType


class RecordDocumentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDocument is None:
            self.RecordDocument = []
        else:
            self.RecordDocument = RecordDocument
        self.RecordDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDocumentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDocumentDetailsType.subclass:
            return RecordDocumentDetailsType.subclass(*args_, **kwargs_)
        else:
            return RecordDocumentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDocument(self):
        return self.RecordDocument
    def set_RecordDocument(self, RecordDocument):
        self.RecordDocument = RecordDocument
    def add_RecordDocument(self, value):
        self.RecordDocument.append(value)
    def insert_RecordDocument_at(self, index, value):
        self.RecordDocument.insert(index, value)
    def replace_RecordDocument_at(self, index, value):
        self.RecordDocument[index] = value
    def hasContent_(self):
        if (
            self.RecordDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDocumentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDocumentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDocumentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDocumentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDocumentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDocument_ in self.RecordDocument:
            namespaceprefix_ = self.RecordDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocument_nsprefix_) else ''
            RecordDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocument.append(obj_)
            obj_.original_tagname_ = 'RecordDocument'
# end class RecordDocumentDetailsType


class RecordDesignatedCountryDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDesignatedCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDesignatedCountryCode is None:
            self.RecordDesignatedCountryCode = []
        else:
            self.RecordDesignatedCountryCode = RecordDesignatedCountryCode
        self.RecordDesignatedCountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDesignatedCountryDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDesignatedCountryDetailsType.subclass:
            return RecordDesignatedCountryDetailsType.subclass(*args_, **kwargs_)
        else:
            return RecordDesignatedCountryDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDesignatedCountryCode(self):
        return self.RecordDesignatedCountryCode
    def set_RecordDesignatedCountryCode(self, RecordDesignatedCountryCode):
        self.RecordDesignatedCountryCode = RecordDesignatedCountryCode
    def add_RecordDesignatedCountryCode(self, value):
        self.RecordDesignatedCountryCode.append(value)
    def insert_RecordDesignatedCountryCode_at(self, index, value):
        self.RecordDesignatedCountryCode.insert(index, value)
    def replace_RecordDesignatedCountryCode_at(self, index, value):
        self.RecordDesignatedCountryCode[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordDesignatedCountryCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDesignatedCountryDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDesignatedCountryDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDesignatedCountryDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDesignatedCountryDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDesignatedCountryDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDesignatedCountryDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDesignatedCountryDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDesignatedCountryCode_ in self.RecordDesignatedCountryCode:
            namespaceprefix_ = self.RecordDesignatedCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDesignatedCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordDesignatedCountryCode>%s</%sRecordDesignatedCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RecordDesignatedCountryCode_), input_name='RecordDesignatedCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDesignatedCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordDesignatedCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RecordDesignatedCountryCode')
            self.RecordDesignatedCountryCode.append(value_)
            self.RecordDesignatedCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordDesignatedCountryCode[-1])
# end class RecordDesignatedCountryDetailsType


class RecordUseIntentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordUseIntentCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordUseIntentCountryCode is None:
            self.RecordUseIntentCountryCode = []
        else:
            self.RecordUseIntentCountryCode = RecordUseIntentCountryCode
        self.RecordUseIntentCountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordUseIntentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordUseIntentDetailsType.subclass:
            return RecordUseIntentDetailsType.subclass(*args_, **kwargs_)
        else:
            return RecordUseIntentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordUseIntentCountryCode(self):
        return self.RecordUseIntentCountryCode
    def set_RecordUseIntentCountryCode(self, RecordUseIntentCountryCode):
        self.RecordUseIntentCountryCode = RecordUseIntentCountryCode
    def add_RecordUseIntentCountryCode(self, value):
        self.RecordUseIntentCountryCode.append(value)
    def insert_RecordUseIntentCountryCode_at(self, index, value):
        self.RecordUseIntentCountryCode.insert(index, value)
    def replace_RecordUseIntentCountryCode_at(self, index, value):
        self.RecordUseIntentCountryCode[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordUseIntentCountryCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordUseIntentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordUseIntentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordUseIntentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordUseIntentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordUseIntentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordUseIntentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordUseIntentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordUseIntentCountryCode_ in self.RecordUseIntentCountryCode:
            namespaceprefix_ = self.RecordUseIntentCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordUseIntentCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordUseIntentCountryCode>%s</%sRecordUseIntentCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RecordUseIntentCountryCode_), input_name='RecordUseIntentCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordUseIntentCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordUseIntentCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RecordUseIntentCountryCode')
            self.RecordUseIntentCountryCode.append(value_)
            self.RecordUseIntentCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordUseIntentCountryCode[-1])
# end class RecordUseIntentDetailsType


class GoodsServicesLimitationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsServicesLimitation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if GoodsServicesLimitation is None:
            self.GoodsServicesLimitation = []
        else:
            self.GoodsServicesLimitation = GoodsServicesLimitation
        self.GoodsServicesLimitation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsServicesLimitationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsServicesLimitationDetailsType.subclass:
            return GoodsServicesLimitationDetailsType.subclass(*args_, **kwargs_)
        else:
            return GoodsServicesLimitationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsServicesLimitation(self):
        return self.GoodsServicesLimitation
    def set_GoodsServicesLimitation(self, GoodsServicesLimitation):
        self.GoodsServicesLimitation = GoodsServicesLimitation
    def add_GoodsServicesLimitation(self, value):
        self.GoodsServicesLimitation.append(value)
    def insert_GoodsServicesLimitation_at(self, index, value):
        self.GoodsServicesLimitation.insert(index, value)
    def replace_GoodsServicesLimitation_at(self, index, value):
        self.GoodsServicesLimitation[index] = value
    def hasContent_(self):
        if (
            self.GoodsServicesLimitation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsServicesLimitationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsServicesLimitationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsServicesLimitationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsServicesLimitationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GoodsServicesLimitationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GoodsServicesLimitation_ in self.GoodsServicesLimitation:
            namespaceprefix_ = self.GoodsServicesLimitation_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitation_nsprefix_) else ''
            GoodsServicesLimitation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsServicesLimitation':
            obj_ = GoodsServicesLimitationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitation.append(obj_)
            obj_.original_tagname_ = 'GoodsServicesLimitation'
# end class GoodsServicesLimitationDetailsType


class BasicApplicationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BasicApplication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if BasicApplication is None:
            self.BasicApplication = []
        else:
            self.BasicApplication = BasicApplication
        self.BasicApplication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicApplicationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicApplicationDetailsType.subclass:
            return BasicApplicationDetailsType.subclass(*args_, **kwargs_)
        else:
            return BasicApplicationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BasicApplication(self):
        return self.BasicApplication
    def set_BasicApplication(self, BasicApplication):
        self.BasicApplication = BasicApplication
    def add_BasicApplication(self, value):
        self.BasicApplication.append(value)
    def insert_BasicApplication_at(self, index, value):
        self.BasicApplication.insert(index, value)
    def replace_BasicApplication_at(self, index, value):
        self.BasicApplication[index] = value
    def hasContent_(self):
        if (
            self.BasicApplication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicApplicationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicApplicationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasicApplicationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasicApplicationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasicApplicationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasicApplicationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicApplicationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BasicApplication_ in self.BasicApplication:
            namespaceprefix_ = self.BasicApplication_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicApplication_nsprefix_) else ''
            BasicApplication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BasicApplication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BasicApplication':
            obj_ = BasicApplicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BasicApplication.append(obj_)
            obj_.original_tagname_ = 'BasicApplication'
# end class BasicApplicationDetailsType


class BasicRegistrationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BasicRegistration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if BasicRegistration is None:
            self.BasicRegistration = []
        else:
            self.BasicRegistration = BasicRegistration
        self.BasicRegistration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicRegistrationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicRegistrationDetailsType.subclass:
            return BasicRegistrationDetailsType.subclass(*args_, **kwargs_)
        else:
            return BasicRegistrationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BasicRegistration(self):
        return self.BasicRegistration
    def set_BasicRegistration(self, BasicRegistration):
        self.BasicRegistration = BasicRegistration
    def add_BasicRegistration(self, value):
        self.BasicRegistration.append(value)
    def insert_BasicRegistration_at(self, index, value):
        self.BasicRegistration.insert(index, value)
    def replace_BasicRegistration_at(self, index, value):
        self.BasicRegistration[index] = value
    def hasContent_(self):
        if (
            self.BasicRegistration
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicRegistrationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasicRegistrationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasicRegistrationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasicRegistrationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasicRegistrationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BasicRegistration_ in self.BasicRegistration:
            namespaceprefix_ = self.BasicRegistration_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRegistration_nsprefix_) else ''
            BasicRegistration_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BasicRegistration', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BasicRegistration':
            obj_ = BasicRegistrationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BasicRegistration.append(obj_)
            obj_.original_tagname_ = 'BasicRegistration'
# end class BasicRegistrationDetailsType


class ClassificationTermDetailsType4(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClassificationTerm=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClassificationTerm is None:
            self.ClassificationTerm = []
        else:
            self.ClassificationTerm = ClassificationTerm
        self.ClassificationTerm_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassificationTermDetailsType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassificationTermDetailsType4.subclass:
            return ClassificationTermDetailsType4.subclass(*args_, **kwargs_)
        else:
            return ClassificationTermDetailsType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClassificationTerm(self):
        return self.ClassificationTerm
    def set_ClassificationTerm(self, ClassificationTerm):
        self.ClassificationTerm = ClassificationTerm
    def add_ClassificationTerm(self, value):
        self.ClassificationTerm.append(value)
    def insert_ClassificationTerm_at(self, index, value):
        self.ClassificationTerm.insert(index, value)
    def replace_ClassificationTerm_at(self, index, value):
        self.ClassificationTerm[index] = value
    def hasContent_(self):
        if (
            self.ClassificationTerm
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassificationTermDetailsType4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClassificationTermDetailsType4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClassificationTermDetailsType4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClassificationTermDetailsType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClassificationTermDetailsType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClassificationTermDetailsType4'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassificationTermDetailsType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClassificationTerm_ in self.ClassificationTerm:
            namespaceprefix_ = self.ClassificationTerm_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassificationTerm_nsprefix_) else ''
            ClassificationTerm_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassificationTerm', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClassificationTerm':
            obj_ = ClassificationTermType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassificationTerm.append(obj_)
            obj_.original_tagname_ = 'ClassificationTerm'
# end class ClassificationTermDetailsType4


class CaseReferenceDetailsType5(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CaseReference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CaseReference is None:
            self.CaseReference = []
        else:
            self.CaseReference = CaseReference
        self.CaseReference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CaseReferenceDetailsType5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CaseReferenceDetailsType5.subclass:
            return CaseReferenceDetailsType5.subclass(*args_, **kwargs_)
        else:
            return CaseReferenceDetailsType5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CaseReference(self):
        return self.CaseReference
    def set_CaseReference(self, CaseReference):
        self.CaseReference = CaseReference
    def add_CaseReference(self, value):
        self.CaseReference.append(value)
    def insert_CaseReference_at(self, index, value):
        self.CaseReference.insert(index, value)
    def replace_CaseReference_at(self, index, value):
        self.CaseReference[index] = value
    def hasContent_(self):
        if (
            self.CaseReference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CaseReferenceDetailsType5', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CaseReferenceDetailsType5')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CaseReferenceDetailsType5':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CaseReferenceDetailsType5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CaseReferenceDetailsType5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CaseReferenceDetailsType5'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CaseReferenceDetailsType5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CaseReference_ in self.CaseReference:
            namespaceprefix_ = self.CaseReference_nsprefix_ + ':' if (UseCapturedNS_ and self.CaseReference_nsprefix_) else ''
            CaseReference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CaseReference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CaseReference':
            obj_ = CaseReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CaseReference.append(obj_)
            obj_.original_tagname_ = 'CaseReference'
# end class CaseReferenceDetailsType5


class DecisionEventDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DecisionEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DecisionEvent is None:
            self.DecisionEvent = []
        else:
            self.DecisionEvent = DecisionEvent
        self.DecisionEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DecisionEventDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DecisionEventDetailsType.subclass:
            return DecisionEventDetailsType.subclass(*args_, **kwargs_)
        else:
            return DecisionEventDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DecisionEvent(self):
        return self.DecisionEvent
    def set_DecisionEvent(self, DecisionEvent):
        self.DecisionEvent = DecisionEvent
    def add_DecisionEvent(self, value):
        self.DecisionEvent.append(value)
    def insert_DecisionEvent_at(self, index, value):
        self.DecisionEvent.insert(index, value)
    def replace_DecisionEvent_at(self, index, value):
        self.DecisionEvent[index] = value
    def hasContent_(self):
        if (
            self.DecisionEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionEventDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DecisionEventDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DecisionEventDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DecisionEventDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DecisionEventDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DecisionEventDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DecisionEventDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DecisionEvent_ in self.DecisionEvent:
            namespaceprefix_ = self.DecisionEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionEvent_nsprefix_) else ''
            DecisionEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DecisionEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DecisionEvent':
            obj_ = DecisionEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DecisionEvent.append(obj_)
            obj_.original_tagname_ = 'DecisionEvent'
# end class DecisionEventDetailsType


class MarkImageDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkImage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkImage is None:
            self.MarkImage = []
        else:
            self.MarkImage = MarkImage
        self.MarkImage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkImageDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkImageDetailsType.subclass:
            return MarkImageDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkImageDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkImage(self):
        return self.MarkImage
    def set_MarkImage(self, MarkImage):
        self.MarkImage = MarkImage
    def add_MarkImage(self, value):
        self.MarkImage.append(value)
    def insert_MarkImage_at(self, index, value):
        self.MarkImage.insert(index, value)
    def replace_MarkImage_at(self, index, value):
        self.MarkImage[index] = value
    def hasContent_(self):
        if (
            self.MarkImage
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkImageDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkImageDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkImageDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkImageDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkImageDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkImage_ in self.MarkImage:
            namespaceprefix_ = self.MarkImage_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImage_nsprefix_) else ''
            MarkImage_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImage', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkImage':
            obj_ = MarkImageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImage.append(obj_)
            obj_.original_tagname_ = 'MarkImage'
# end class MarkImageDetailsType


class BaseGoodsServicesDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsServices=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if GoodsServices is None:
            self.GoodsServices = []
        else:
            self.GoodsServices = GoodsServices
        self.GoodsServices_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BaseGoodsServicesDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BaseGoodsServicesDetailsType.subclass:
            return BaseGoodsServicesDetailsType.subclass(*args_, **kwargs_)
        else:
            return BaseGoodsServicesDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsServices(self):
        return self.GoodsServices
    def set_GoodsServices(self, GoodsServices):
        self.GoodsServices = GoodsServices
    def add_GoodsServices(self, value):
        self.GoodsServices.append(value)
    def insert_GoodsServices_at(self, index, value):
        self.GoodsServices.insert(index, value)
    def replace_GoodsServices_at(self, index, value):
        self.GoodsServices[index] = value
    def hasContent_(self):
        if (
            self.GoodsServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BaseGoodsServicesDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BaseGoodsServicesDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BaseGoodsServicesDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BaseGoodsServicesDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BaseGoodsServicesDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BaseGoodsServicesDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BaseGoodsServicesDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GoodsServices_ in self.GoodsServices:
            namespaceprefix_ = self.GoodsServices_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServices_nsprefix_) else ''
            GoodsServices_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServices', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsServices':
            obj_ = GoodsServicesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServices.append(obj_)
            obj_.original_tagname_ = 'GoodsServices'
# end class BaseGoodsServicesDetailsType


class EntitlementEstablishmentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EntitlementEstablishmentCode=None, EntitlementEstablishmentAddressBook=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EntitlementEstablishmentCode = EntitlementEstablishmentCode
        self.validate_NationalityCodeType(self.EntitlementEstablishmentCode)
        self.EntitlementEstablishmentCode_nsprefix_ = None
        self.EntitlementEstablishmentAddressBook = EntitlementEstablishmentAddressBook
        self.EntitlementEstablishmentAddressBook_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntitlementEstablishmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntitlementEstablishmentType.subclass:
            return EntitlementEstablishmentType.subclass(*args_, **kwargs_)
        else:
            return EntitlementEstablishmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EntitlementEstablishmentCode(self):
        return self.EntitlementEstablishmentCode
    def set_EntitlementEstablishmentCode(self, EntitlementEstablishmentCode):
        self.EntitlementEstablishmentCode = EntitlementEstablishmentCode
    def get_EntitlementEstablishmentAddressBook(self):
        return self.EntitlementEstablishmentAddressBook
    def set_EntitlementEstablishmentAddressBook(self, EntitlementEstablishmentAddressBook):
        self.EntitlementEstablishmentAddressBook = EntitlementEstablishmentAddressBook
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.EntitlementEstablishmentCode is not None or
            self.EntitlementEstablishmentAddressBook is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EntitlementEstablishmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntitlementEstablishmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntitlementEstablishmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntitlementEstablishmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EntitlementEstablishmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntitlementEstablishmentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EntitlementEstablishmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EntitlementEstablishmentCode is not None:
            namespaceprefix_ = self.EntitlementEstablishmentCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EntitlementEstablishmentCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntitlementEstablishmentCode>%s</%sEntitlementEstablishmentCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntitlementEstablishmentCode), input_name='EntitlementEstablishmentCode')), namespaceprefix_ , eol_))
        if self.EntitlementEstablishmentAddressBook is not None:
            namespaceprefix_ = self.EntitlementEstablishmentAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.EntitlementEstablishmentAddressBook_nsprefix_) else ''
            self.EntitlementEstablishmentAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EntitlementEstablishmentAddressBook', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EntitlementEstablishmentCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EntitlementEstablishmentCode')
            value_ = self.gds_validate_string(value_, node, 'EntitlementEstablishmentCode')
            self.EntitlementEstablishmentCode = value_
            self.EntitlementEstablishmentCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.EntitlementEstablishmentCode)
        elif nodeName_ == 'EntitlementEstablishmentAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EntitlementEstablishmentAddressBook = obj_
            obj_.original_tagname_ = 'EntitlementEstablishmentAddressBook'
# end class EntitlementEstablishmentType


class EntitlementDomiciledType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EntitlementDomiciledCode=None, EntitlementDomiciledAddressBook=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EntitlementDomiciledCode = EntitlementDomiciledCode
        self.validate_NationalityCodeType(self.EntitlementDomiciledCode)
        self.EntitlementDomiciledCode_nsprefix_ = None
        self.EntitlementDomiciledAddressBook = EntitlementDomiciledAddressBook
        self.EntitlementDomiciledAddressBook_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntitlementDomiciledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntitlementDomiciledType.subclass:
            return EntitlementDomiciledType.subclass(*args_, **kwargs_)
        else:
            return EntitlementDomiciledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EntitlementDomiciledCode(self):
        return self.EntitlementDomiciledCode
    def set_EntitlementDomiciledCode(self, EntitlementDomiciledCode):
        self.EntitlementDomiciledCode = EntitlementDomiciledCode
    def get_EntitlementDomiciledAddressBook(self):
        return self.EntitlementDomiciledAddressBook
    def set_EntitlementDomiciledAddressBook(self, EntitlementDomiciledAddressBook):
        self.EntitlementDomiciledAddressBook = EntitlementDomiciledAddressBook
    def validate_NationalityCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.EntitlementDomiciledCode is not None or
            self.EntitlementDomiciledAddressBook is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EntitlementDomiciledType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntitlementDomiciledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EntitlementDomiciledType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EntitlementDomiciledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EntitlementDomiciledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EntitlementDomiciledType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EntitlementDomiciledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EntitlementDomiciledCode is not None:
            namespaceprefix_ = self.EntitlementDomiciledCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EntitlementDomiciledCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntitlementDomiciledCode>%s</%sEntitlementDomiciledCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntitlementDomiciledCode), input_name='EntitlementDomiciledCode')), namespaceprefix_ , eol_))
        if self.EntitlementDomiciledAddressBook is not None:
            namespaceprefix_ = self.EntitlementDomiciledAddressBook_nsprefix_ + ':' if (UseCapturedNS_ and self.EntitlementDomiciledAddressBook_nsprefix_) else ''
            self.EntitlementDomiciledAddressBook.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EntitlementDomiciledAddressBook', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EntitlementDomiciledCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EntitlementDomiciledCode')
            value_ = self.gds_validate_string(value_, node, 'EntitlementDomiciledCode')
            self.EntitlementDomiciledCode = value_
            self.EntitlementDomiciledCode_nsprefix_ = child_.prefix
            # validate type NationalityCodeType
            self.validate_NationalityCodeType(self.EntitlementDomiciledCode)
        elif nodeName_ == 'EntitlementDomiciledAddressBook':
            obj_ = AddressBookType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EntitlementDomiciledAddressBook = obj_
            obj_.original_tagname_ = 'EntitlementDomiciledAddressBook'
# end class EntitlementDomiciledType


class FreeFormatNameDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreeFormatNameLine=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if FreeFormatNameLine is None:
            self.FreeFormatNameLine = []
        else:
            self.FreeFormatNameLine = FreeFormatNameLine
        self.FreeFormatNameLine_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreeFormatNameDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreeFormatNameDetailsType.subclass:
            return FreeFormatNameDetailsType.subclass(*args_, **kwargs_)
        else:
            return FreeFormatNameDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreeFormatNameLine(self):
        return self.FreeFormatNameLine
    def set_FreeFormatNameLine(self, FreeFormatNameLine):
        self.FreeFormatNameLine = FreeFormatNameLine
    def add_FreeFormatNameLine(self, value):
        self.FreeFormatNameLine.append(value)
    def insert_FreeFormatNameLine_at(self, index, value):
        self.FreeFormatNameLine.insert(index, value)
    def replace_FreeFormatNameLine_at(self, index, value):
        self.FreeFormatNameLine[index] = value
    def hasContent_(self):
        if (
            self.FreeFormatNameLine
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatNameDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreeFormatNameDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreeFormatNameDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreeFormatNameDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreeFormatNameDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreeFormatNameDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FreeFormatNameDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FreeFormatNameLine_ in self.FreeFormatNameLine:
            namespaceprefix_ = self.FreeFormatNameLine_nsprefix_ + ':' if (UseCapturedNS_ and self.FreeFormatNameLine_nsprefix_) else ''
            FreeFormatNameLine_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreeFormatNameLine', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreeFormatNameLine':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreeFormatNameLine.append(obj_)
            obj_.original_tagname_ = 'FreeFormatNameLine'
# end class FreeFormatNameDetailsType


class LimitationCountryDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LimitationCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if LimitationCountryCode is None:
            self.LimitationCountryCode = []
        else:
            self.LimitationCountryCode = LimitationCountryCode
        self.LimitationCountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LimitationCountryDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LimitationCountryDetailsType.subclass:
            return LimitationCountryDetailsType.subclass(*args_, **kwargs_)
        else:
            return LimitationCountryDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LimitationCountryCode(self):
        return self.LimitationCountryCode
    def set_LimitationCountryCode(self, LimitationCountryCode):
        self.LimitationCountryCode = LimitationCountryCode
    def add_LimitationCountryCode(self, value):
        self.LimitationCountryCode.append(value)
    def insert_LimitationCountryCode_at(self, index, value):
        self.LimitationCountryCode.insert(index, value)
    def replace_LimitationCountryCode_at(self, index, value):
        self.LimitationCountryCode[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.LimitationCountryCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LimitationCountryDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LimitationCountryDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LimitationCountryDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LimitationCountryDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LimitationCountryDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LimitationCountryDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LimitationCountryDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LimitationCountryCode_ in self.LimitationCountryCode:
            namespaceprefix_ = self.LimitationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LimitationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLimitationCountryCode>%s</%sLimitationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(LimitationCountryCode_), input_name='LimitationCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LimitationCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LimitationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'LimitationCountryCode')
            self.LimitationCountryCode.append(value_)
            self.LimitationCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.LimitationCountryCode[-1])
# end class LimitationCountryDetailsType


class LimitationClassDescriptionDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClassDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClassDescription is None:
            self.ClassDescription = []
        else:
            self.ClassDescription = ClassDescription
        self.ClassDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LimitationClassDescriptionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LimitationClassDescriptionDetailsType.subclass:
            return LimitationClassDescriptionDetailsType.subclass(*args_, **kwargs_)
        else:
            return LimitationClassDescriptionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClassDescription(self):
        return self.ClassDescription
    def set_ClassDescription(self, ClassDescription):
        self.ClassDescription = ClassDescription
    def add_ClassDescription(self, value):
        self.ClassDescription.append(value)
    def insert_ClassDescription_at(self, index, value):
        self.ClassDescription.insert(index, value)
    def replace_ClassDescription_at(self, index, value):
        self.ClassDescription[index] = value
    def hasContent_(self):
        if (
            self.ClassDescription
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LimitationClassDescriptionDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LimitationClassDescriptionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LimitationClassDescriptionDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LimitationClassDescriptionDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LimitationClassDescriptionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LimitationClassDescriptionDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LimitationClassDescriptionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClassDescription_ in self.ClassDescription:
            namespaceprefix_ = self.ClassDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassDescription_nsprefix_) else ''
            ClassDescription_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassDescription', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClassDescription':
            obj_ = ClassDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassDescription.append(obj_)
            obj_.original_tagname_ = 'ClassDescription'
# end class LimitationClassDescriptionDetailsType


class ClassDescriptionDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClassDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClassDescription is None:
            self.ClassDescription = []
        else:
            self.ClassDescription = ClassDescription
        self.ClassDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClassDescriptionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClassDescriptionDetailsType.subclass:
            return ClassDescriptionDetailsType.subclass(*args_, **kwargs_)
        else:
            return ClassDescriptionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClassDescription(self):
        return self.ClassDescription
    def set_ClassDescription(self, ClassDescription):
        self.ClassDescription = ClassDescription
    def add_ClassDescription(self, value):
        self.ClassDescription.append(value)
    def insert_ClassDescription_at(self, index, value):
        self.ClassDescription.insert(index, value)
    def replace_ClassDescription_at(self, index, value):
        self.ClassDescription[index] = value
    def hasContent_(self):
        if (
            self.ClassDescription
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassDescriptionDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClassDescriptionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClassDescriptionDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClassDescriptionDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClassDescriptionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClassDescriptionDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClassDescriptionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClassDescription_ in self.ClassDescription:
            namespaceprefix_ = self.ClassDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassDescription_nsprefix_) else ''
            ClassDescription_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClassDescription', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClassDescription':
            obj_ = ClassDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClassDescription.append(obj_)
            obj_.original_tagname_ = 'ClassDescription'
# end class ClassDescriptionDetailsType


class LicenseeDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Licensee=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Licensee is None:
            self.Licensee = []
        else:
            self.Licensee = Licensee
        self.Licensee_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseeDetailsType.subclass:
            return LicenseeDetailsType.subclass(*args_, **kwargs_)
        else:
            return LicenseeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Licensee(self):
        return self.Licensee
    def set_Licensee(self, Licensee):
        self.Licensee = Licensee
    def add_Licensee(self, value):
        self.Licensee.append(value)
    def insert_Licensee_at(self, index, value):
        self.Licensee.insert(index, value)
    def replace_Licensee_at(self, index, value):
        self.Licensee[index] = value
    def hasContent_(self):
        if (
            self.Licensee
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenseeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenseeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseeDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenseeDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenseeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Licensee_ in self.Licensee:
            namespaceprefix_ = self.Licensee_nsprefix_ + ':' if (UseCapturedNS_ and self.Licensee_nsprefix_) else ''
            Licensee_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Licensee', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Licensee':
            obj_ = LicenseeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Licensee.append(obj_)
            obj_.original_tagname_ = 'Licensee'
# end class LicenseeDetailsType


class RepresentativeDetailsType6(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType6.subclass:
            return RepresentativeDetailsType6.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType6', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType6')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType6':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType6'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType6


class LicenceEventDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenceEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if LicenceEvent is None:
            self.LicenceEvent = []
        else:
            self.LicenceEvent = LicenceEvent
        self.LicenceEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenceEventDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenceEventDetailsType.subclass:
            return LicenceEventDetailsType.subclass(*args_, **kwargs_)
        else:
            return LicenceEventDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenceEvent(self):
        return self.LicenceEvent
    def set_LicenceEvent(self, LicenceEvent):
        self.LicenceEvent = LicenceEvent
    def add_LicenceEvent(self, value):
        self.LicenceEvent.append(value)
    def insert_LicenceEvent_at(self, index, value):
        self.LicenceEvent.insert(index, value)
    def replace_LicenceEvent_at(self, index, value):
        self.LicenceEvent[index] = value
    def hasContent_(self):
        if (
            self.LicenceEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceEventDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenceEventDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenceEventDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenceEventDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenceEventDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenceEventDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceEventDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LicenceEvent_ in self.LicenceEvent:
            namespaceprefix_ = self.LicenceEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceEvent_nsprefix_) else ''
            LicenceEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenceEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenceEvent':
            obj_ = LicenceEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenceEvent.append(obj_)
            obj_.original_tagname_ = 'LicenceEvent'
# end class LicenceEventDetailsType


class LicenceDocumentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenceDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if LicenceDocument is None:
            self.LicenceDocument = []
        else:
            self.LicenceDocument = LicenceDocument
        self.LicenceDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenceDocumentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenceDocumentDetailsType.subclass:
            return LicenceDocumentDetailsType.subclass(*args_, **kwargs_)
        else:
            return LicenceDocumentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenceDocument(self):
        return self.LicenceDocument
    def set_LicenceDocument(self, LicenceDocument):
        self.LicenceDocument = LicenceDocument
    def add_LicenceDocument(self, value):
        self.LicenceDocument.append(value)
    def insert_LicenceDocument_at(self, index, value):
        self.LicenceDocument.insert(index, value)
    def replace_LicenceDocument_at(self, index, value):
        self.LicenceDocument[index] = value
    def hasContent_(self):
        if (
            self.LicenceDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceDocumentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenceDocumentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenceDocumentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenceDocumentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenceDocumentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenceDocumentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceDocumentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LicenceDocument_ in self.LicenceDocument:
            namespaceprefix_ = self.LicenceDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenceDocument_nsprefix_) else ''
            LicenceDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenceDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenceDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenceDocument.append(obj_)
            obj_.original_tagname_ = 'LicenceDocument'
# end class LicenceDocumentDetailsType


class CategoryCodeDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CategoryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CategoryCode is None:
            self.CategoryCode = []
        else:
            self.CategoryCode = CategoryCode
        self.CategoryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CategoryCodeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CategoryCodeDetailsType.subclass:
            return CategoryCodeDetailsType.subclass(*args_, **kwargs_)
        else:
            return CategoryCodeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CategoryCode(self):
        return self.CategoryCode
    def set_CategoryCode(self, CategoryCode):
        self.CategoryCode = CategoryCode
    def add_CategoryCode(self, value):
        self.CategoryCode.append(value)
    def insert_CategoryCode_at(self, index, value):
        self.CategoryCode.insert(index, value)
    def replace_CategoryCode_at(self, index, value):
        self.CategoryCode[index] = value
    def validate_CategoryCodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.CategoryCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CategoryCodeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CategoryCodeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CategoryCodeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CategoryCodeDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CategoryCodeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CategoryCodeDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='CategoryCodeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CategoryCode_ in self.CategoryCode:
            namespaceprefix_ = self.CategoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CategoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategoryCode>%s</%sCategoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CategoryCode_), input_name='CategoryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CategoryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CategoryCode')
            value_ = self.gds_validate_string(value_, node, 'CategoryCode')
            self.CategoryCode.append(value_)
            self.CategoryCode_nsprefix_ = child_.prefix
            # validate type CategoryCodeType
            self.validate_CategoryCodeType(self.CategoryCode[-1])
# end class CategoryCodeDetailsType


class MarkImageRenditionDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkImageRendition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkImageRendition is None:
            self.MarkImageRendition = []
        else:
            self.MarkImageRendition = MarkImageRendition
        self.MarkImageRendition_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkImageRenditionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkImageRenditionDetailsType.subclass:
            return MarkImageRenditionDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkImageRenditionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkImageRendition(self):
        return self.MarkImageRendition
    def set_MarkImageRendition(self, MarkImageRendition):
        self.MarkImageRendition = MarkImageRendition
    def add_MarkImageRendition(self, value):
        self.MarkImageRendition.append(value)
    def insert_MarkImageRendition_at(self, index, value):
        self.MarkImageRendition.insert(index, value)
    def replace_MarkImageRendition_at(self, index, value):
        self.MarkImageRendition[index] = value
    def hasContent_(self):
        if (
            self.MarkImageRendition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageRenditionDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkImageRenditionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkImageRenditionDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkImageRenditionDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkImageRenditionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkImageRenditionDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageRenditionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkImageRendition_ in self.MarkImageRendition:
            namespaceprefix_ = self.MarkImageRendition_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImageRendition_nsprefix_) else ''
            MarkImageRendition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImageRendition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkImageRendition':
            obj_ = MarkImageRenditionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImageRendition.append(obj_)
            obj_.original_tagname_ = 'MarkImageRendition'
# end class MarkImageRenditionDetailsType


class FormattedNameType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NamePrefix=None, FirstName=None, MiddleName=None, LastName=None, SecondLastName=None, NameSuffix=None, Gender=None, IndividualIdentifier=None, PersonRole=None, OrganizationName=None, OrganizationDepartment=None, NameSynonym=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NamePrefix = NamePrefix
        self.NamePrefix_nsprefix_ = None
        self.FirstName = FirstName
        self.FirstName_nsprefix_ = None
        self.MiddleName = MiddleName
        self.MiddleName_nsprefix_ = None
        self.LastName = LastName
        self.LastName_nsprefix_ = None
        self.SecondLastName = SecondLastName
        self.SecondLastName_nsprefix_ = None
        self.NameSuffix = NameSuffix
        self.NameSuffix_nsprefix_ = None
        self.Gender = Gender
        self.validate_GenderType(self.Gender)
        self.Gender_nsprefix_ = None
        self.IndividualIdentifier = IndividualIdentifier
        self.validate_IndividualIdentifierType(self.IndividualIdentifier)
        self.IndividualIdentifier_nsprefix_ = None
        self.PersonRole = PersonRole
        self.PersonRole_nsprefix_ = None
        self.OrganizationName = OrganizationName
        self.OrganizationName_nsprefix_ = None
        self.OrganizationDepartment = OrganizationDepartment
        self.OrganizationDepartment_nsprefix_ = None
        if NameSynonym is None:
            self.NameSynonym = []
        else:
            self.NameSynonym = NameSynonym
        self.NameSynonym_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FormattedNameType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FormattedNameType.subclass:
            return FormattedNameType.subclass(*args_, **kwargs_)
        else:
            return FormattedNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NamePrefix(self):
        return self.NamePrefix
    def set_NamePrefix(self, NamePrefix):
        self.NamePrefix = NamePrefix
    def get_FirstName(self):
        return self.FirstName
    def set_FirstName(self, FirstName):
        self.FirstName = FirstName
    def get_MiddleName(self):
        return self.MiddleName
    def set_MiddleName(self, MiddleName):
        self.MiddleName = MiddleName
    def get_LastName(self):
        return self.LastName
    def set_LastName(self, LastName):
        self.LastName = LastName
    def get_SecondLastName(self):
        return self.SecondLastName
    def set_SecondLastName(self, SecondLastName):
        self.SecondLastName = SecondLastName
    def get_NameSuffix(self):
        return self.NameSuffix
    def set_NameSuffix(self, NameSuffix):
        self.NameSuffix = NameSuffix
    def get_Gender(self):
        return self.Gender
    def set_Gender(self, Gender):
        self.Gender = Gender
    def get_IndividualIdentifier(self):
        return self.IndividualIdentifier
    def set_IndividualIdentifier(self, IndividualIdentifier):
        self.IndividualIdentifier = IndividualIdentifier
    def get_PersonRole(self):
        return self.PersonRole
    def set_PersonRole(self, PersonRole):
        self.PersonRole = PersonRole
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def get_OrganizationDepartment(self):
        return self.OrganizationDepartment
    def set_OrganizationDepartment(self, OrganizationDepartment):
        self.OrganizationDepartment = OrganizationDepartment
    def get_NameSynonym(self):
        return self.NameSynonym
    def set_NameSynonym(self, NameSynonym):
        self.NameSynonym = NameSynonym
    def add_NameSynonym(self, value):
        self.NameSynonym.append(value)
    def insert_NameSynonym_at(self, index, value):
        self.NameSynonym.insert(index, value)
    def replace_NameSynonym_at(self, index, value):
        self.NameSynonym[index] = value
    def validate_GenderType(self, value):
        result = True
        # Validate type GenderType, a restriction on xs:token.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['Male', 'Female', 'Unknown']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GenderType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_IndividualIdentifierType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.NamePrefix is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.SecondLastName is not None or
            self.NameSuffix is not None or
            self.Gender is not None or
            self.IndividualIdentifier is not None or
            self.PersonRole is not None or
            self.OrganizationName is not None or
            self.OrganizationDepartment is not None or
            self.NameSynonym
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FormattedNameType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FormattedNameType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FormattedNameType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FormattedNameType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FormattedNameType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FormattedNameType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='FormattedNameType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NamePrefix is not None:
            namespaceprefix_ = self.NamePrefix_nsprefix_ + ':' if (UseCapturedNS_ and self.NamePrefix_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNamePrefix>%s</%sNamePrefix>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NamePrefix), input_name='NamePrefix')), namespaceprefix_ , eol_))
        if self.FirstName is not None:
            namespaceprefix_ = self.FirstName_nsprefix_ + ':' if (UseCapturedNS_ and self.FirstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirstName), input_name='FirstName')), namespaceprefix_ , eol_))
        if self.MiddleName is not None:
            namespaceprefix_ = self.MiddleName_nsprefix_ + ':' if (UseCapturedNS_ and self.MiddleName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MiddleName), input_name='MiddleName')), namespaceprefix_ , eol_))
        if self.LastName is not None:
            namespaceprefix_ = self.LastName_nsprefix_ + ':' if (UseCapturedNS_ and self.LastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LastName), input_name='LastName')), namespaceprefix_ , eol_))
        if self.SecondLastName is not None:
            namespaceprefix_ = self.SecondLastName_nsprefix_ + ':' if (UseCapturedNS_ and self.SecondLastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecondLastName>%s</%sSecondLastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecondLastName), input_name='SecondLastName')), namespaceprefix_ , eol_))
        if self.NameSuffix is not None:
            namespaceprefix_ = self.NameSuffix_nsprefix_ + ':' if (UseCapturedNS_ and self.NameSuffix_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameSuffix>%s</%sNameSuffix>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NameSuffix), input_name='NameSuffix')), namespaceprefix_ , eol_))
        if self.Gender is not None:
            namespaceprefix_ = self.Gender_nsprefix_ + ':' if (UseCapturedNS_ and self.Gender_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGender>%s</%sGender>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Gender), input_name='Gender')), namespaceprefix_ , eol_))
        if self.IndividualIdentifier is not None:
            namespaceprefix_ = self.IndividualIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.IndividualIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndividualIdentifier>%s</%sIndividualIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IndividualIdentifier), input_name='IndividualIdentifier')), namespaceprefix_ , eol_))
        if self.PersonRole is not None:
            namespaceprefix_ = self.PersonRole_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonRole_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonRole>%s</%sPersonRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonRole), input_name='PersonRole')), namespaceprefix_ , eol_))
        if self.OrganizationName is not None:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationName), input_name='OrganizationName')), namespaceprefix_ , eol_))
        if self.OrganizationDepartment is not None:
            namespaceprefix_ = self.OrganizationDepartment_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationDepartment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationDepartment>%s</%sOrganizationDepartment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationDepartment), input_name='OrganizationDepartment')), namespaceprefix_ , eol_))
        for NameSynonym_ in self.NameSynonym:
            namespaceprefix_ = self.NameSynonym_nsprefix_ + ':' if (UseCapturedNS_ and self.NameSynonym_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameSynonym>%s</%sNameSynonym>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(NameSynonym_), input_name='NameSynonym')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NamePrefix':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NamePrefix')
            value_ = self.gds_validate_string(value_, node, 'NamePrefix')
            self.NamePrefix = value_
            self.NamePrefix_nsprefix_ = child_.prefix
        elif nodeName_ == 'FirstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FirstName')
            value_ = self.gds_validate_string(value_, node, 'FirstName')
            self.FirstName = value_
            self.FirstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'MiddleName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MiddleName')
            value_ = self.gds_validate_string(value_, node, 'MiddleName')
            self.MiddleName = value_
            self.MiddleName_nsprefix_ = child_.prefix
        elif nodeName_ == 'LastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LastName')
            value_ = self.gds_validate_string(value_, node, 'LastName')
            self.LastName = value_
            self.LastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'SecondLastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecondLastName')
            value_ = self.gds_validate_string(value_, node, 'SecondLastName')
            self.SecondLastName = value_
            self.SecondLastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'NameSuffix':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NameSuffix')
            value_ = self.gds_validate_string(value_, node, 'NameSuffix')
            self.NameSuffix = value_
            self.NameSuffix_nsprefix_ = child_.prefix
        elif nodeName_ == 'Gender':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Gender')
            value_ = self.gds_validate_string(value_, node, 'Gender')
            self.Gender = value_
            self.Gender_nsprefix_ = child_.prefix
            # validate type GenderType
            self.validate_GenderType(self.Gender)
        elif nodeName_ == 'IndividualIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IndividualIdentifier')
            value_ = self.gds_validate_string(value_, node, 'IndividualIdentifier')
            self.IndividualIdentifier = value_
            self.IndividualIdentifier_nsprefix_ = child_.prefix
            # validate type IndividualIdentifierType
            self.validate_IndividualIdentifierType(self.IndividualIdentifier)
        elif nodeName_ == 'PersonRole':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonRole')
            value_ = self.gds_validate_string(value_, node, 'PersonRole')
            self.PersonRole = value_
            self.PersonRole_nsprefix_ = child_.prefix
        elif nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName = value_
            self.OrganizationName_nsprefix_ = child_.prefix
        elif nodeName_ == 'OrganizationDepartment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationDepartment')
            value_ = self.gds_validate_string(value_, node, 'OrganizationDepartment')
            self.OrganizationDepartment = value_
            self.OrganizationDepartment_nsprefix_ = child_.prefix
        elif nodeName_ == 'NameSynonym':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NameSynonym')
            value_ = self.gds_validate_string(value_, node, 'NameSynonym')
            self.NameSynonym.append(value_)
            self.NameSynonym_nsprefix_ = child_.prefix
# end class FormattedNameType


class EarlierMarkDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EarlierMark=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EarlierMark is None:
            self.EarlierMark = []
        else:
            self.EarlierMark = EarlierMark
        self.EarlierMark_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EarlierMarkDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EarlierMarkDetailsType.subclass:
            return EarlierMarkDetailsType.subclass(*args_, **kwargs_)
        else:
            return EarlierMarkDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EarlierMark(self):
        return self.EarlierMark
    def set_EarlierMark(self, EarlierMark):
        self.EarlierMark = EarlierMark
    def add_EarlierMark(self, value):
        self.EarlierMark.append(value)
    def insert_EarlierMark_at(self, index, value):
        self.EarlierMark.insert(index, value)
    def replace_EarlierMark_at(self, index, value):
        self.EarlierMark[index] = value
    def hasContent_(self):
        if (
            self.EarlierMark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EarlierMarkDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EarlierMarkDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EarlierMarkDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EarlierMarkDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EarlierMarkDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EarlierMarkDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='EarlierMarkDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EarlierMark_ in self.EarlierMark:
            namespaceprefix_ = self.EarlierMark_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlierMark_nsprefix_) else ''
            EarlierMark_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EarlierMark', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EarlierMark':
            obj_ = EarlierMarkType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EarlierMark.append(obj_)
            obj_.original_tagname_ = 'EarlierMark'
# end class EarlierMarkDetailsType


class OpponentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Opponent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Opponent is None:
            self.Opponent = []
        else:
            self.Opponent = Opponent
        self.Opponent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OpponentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OpponentDetailsType.subclass:
            return OpponentDetailsType.subclass(*args_, **kwargs_)
        else:
            return OpponentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Opponent(self):
        return self.Opponent
    def set_Opponent(self, Opponent):
        self.Opponent = Opponent
    def add_Opponent(self, value):
        self.Opponent.append(value)
    def insert_Opponent_at(self, index, value):
        self.Opponent.insert(index, value)
    def replace_Opponent_at(self, index, value):
        self.Opponent[index] = value
    def hasContent_(self):
        if (
            self.Opponent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OpponentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OpponentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OpponentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OpponentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OpponentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OpponentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OpponentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Opponent_ in self.Opponent:
            namespaceprefix_ = self.Opponent_nsprefix_ + ':' if (UseCapturedNS_ and self.Opponent_nsprefix_) else ''
            Opponent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Opponent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Opponent':
            obj_ = OpponentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Opponent.append(obj_)
            obj_.original_tagname_ = 'Opponent'
# end class OpponentDetailsType


class RepresentativeDetailsType7(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType7.subclass:
            return RepresentativeDetailsType7.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType7', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType7')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType7':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType7'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType7


class OppositionEventDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OppositionEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if OppositionEvent is None:
            self.OppositionEvent = []
        else:
            self.OppositionEvent = OppositionEvent
        self.OppositionEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OppositionEventDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OppositionEventDetailsType.subclass:
            return OppositionEventDetailsType.subclass(*args_, **kwargs_)
        else:
            return OppositionEventDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OppositionEvent(self):
        return self.OppositionEvent
    def set_OppositionEvent(self, OppositionEvent):
        self.OppositionEvent = OppositionEvent
    def add_OppositionEvent(self, value):
        self.OppositionEvent.append(value)
    def insert_OppositionEvent_at(self, index, value):
        self.OppositionEvent.insert(index, value)
    def replace_OppositionEvent_at(self, index, value):
        self.OppositionEvent[index] = value
    def hasContent_(self):
        if (
            self.OppositionEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionEventDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OppositionEventDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OppositionEventDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OppositionEventDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OppositionEventDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OppositionEventDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionEventDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OppositionEvent_ in self.OppositionEvent:
            namespaceprefix_ = self.OppositionEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionEvent_nsprefix_) else ''
            OppositionEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OppositionEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OppositionEvent':
            obj_ = OppositionEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OppositionEvent.append(obj_)
            obj_.original_tagname_ = 'OppositionEvent'
# end class OppositionEventDetailsType


class OppositionDocumentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OppositionDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if OppositionDocument is None:
            self.OppositionDocument = []
        else:
            self.OppositionDocument = OppositionDocument
        self.OppositionDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OppositionDocumentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OppositionDocumentDetailsType.subclass:
            return OppositionDocumentDetailsType.subclass(*args_, **kwargs_)
        else:
            return OppositionDocumentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OppositionDocument(self):
        return self.OppositionDocument
    def set_OppositionDocument(self, OppositionDocument):
        self.OppositionDocument = OppositionDocument
    def add_OppositionDocument(self, value):
        self.OppositionDocument.append(value)
    def insert_OppositionDocument_at(self, index, value):
        self.OppositionDocument.insert(index, value)
    def replace_OppositionDocument_at(self, index, value):
        self.OppositionDocument[index] = value
    def hasContent_(self):
        if (
            self.OppositionDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionDocumentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OppositionDocumentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OppositionDocumentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OppositionDocumentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OppositionDocumentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OppositionDocumentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionDocumentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OppositionDocument_ in self.OppositionDocument:
            namespaceprefix_ = self.OppositionDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.OppositionDocument_nsprefix_) else ''
            OppositionDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OppositionDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OppositionDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OppositionDocument.append(obj_)
            obj_.original_tagname_ = 'OppositionDocument'
# end class OppositionDocumentDetailsType


class AccountType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountIdentifier=None, AccountKind=None, AccountHolderName=None, AccountDebitKind=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountIdentifier = AccountIdentifier
        self.AccountIdentifier_nsprefix_ = None
        self.AccountKind = AccountKind
        self.AccountKind_nsprefix_ = None
        self.AccountHolderName = AccountHolderName
        self.AccountHolderName_nsprefix_ = None
        self.AccountDebitKind = AccountDebitKind
        self.validate_AccountDebitKindType(self.AccountDebitKind)
        self.AccountDebitKind_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountType.subclass:
            return AccountType.subclass(*args_, **kwargs_)
        else:
            return AccountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountIdentifier(self):
        return self.AccountIdentifier
    def set_AccountIdentifier(self, AccountIdentifier):
        self.AccountIdentifier = AccountIdentifier
    def get_AccountKind(self):
        return self.AccountKind
    def set_AccountKind(self, AccountKind):
        self.AccountKind = AccountKind
    def get_AccountHolderName(self):
        return self.AccountHolderName
    def set_AccountHolderName(self, AccountHolderName):
        self.AccountHolderName = AccountHolderName
    def get_AccountDebitKind(self):
        return self.AccountDebitKind
    def set_AccountDebitKind(self, AccountDebitKind):
        self.AccountDebitKind = AccountDebitKind
    def validate_AccountDebitKindType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.AccountIdentifier is not None or
            self.AccountKind is not None or
            self.AccountHolderName is not None or
            self.AccountDebitKind is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AccountType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccountType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AccountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountIdentifier is not None:
            namespaceprefix_ = self.AccountIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountIdentifier>%s</%sAccountIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountIdentifier), input_name='AccountIdentifier')), namespaceprefix_ , eol_))
        if self.AccountKind is not None:
            namespaceprefix_ = self.AccountKind_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountKind>%s</%sAccountKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountKind), input_name='AccountKind')), namespaceprefix_ , eol_))
        if self.AccountHolderName is not None:
            namespaceprefix_ = self.AccountHolderName_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountHolderName_nsprefix_) else ''
            self.AccountHolderName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccountHolderName', pretty_print=pretty_print)
        if self.AccountDebitKind is not None:
            namespaceprefix_ = self.AccountDebitKind_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountDebitKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountDebitKind>%s</%sAccountDebitKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountDebitKind), input_name='AccountDebitKind')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountIdentifier')
            value_ = self.gds_validate_string(value_, node, 'AccountIdentifier')
            self.AccountIdentifier = value_
            self.AccountIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccountKind':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountKind')
            value_ = self.gds_validate_string(value_, node, 'AccountKind')
            self.AccountKind = value_
            self.AccountKind_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccountHolderName':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccountHolderName = obj_
            obj_.original_tagname_ = 'AccountHolderName'
        elif nodeName_ == 'AccountDebitKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AccountDebitKind')
            value_ = self.gds_validate_string(value_, node, 'AccountDebitKind')
            self.AccountDebitKind = value_
            self.AccountDebitKind_nsprefix_ = child_.prefix
            # validate type AccountDebitKindType
            self.validate_AccountDebitKindType(self.AccountDebitKind)
# end class AccountType


class ChequeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ChequeIdentifier=None, ChequeKind=None, BankName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ChequeIdentifier = ChequeIdentifier
        self.ChequeIdentifier_nsprefix_ = None
        self.ChequeKind = ChequeKind
        self.ChequeKind_nsprefix_ = None
        self.BankName = BankName
        self.BankName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ChequeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ChequeType.subclass:
            return ChequeType.subclass(*args_, **kwargs_)
        else:
            return ChequeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ChequeIdentifier(self):
        return self.ChequeIdentifier
    def set_ChequeIdentifier(self, ChequeIdentifier):
        self.ChequeIdentifier = ChequeIdentifier
    def get_ChequeKind(self):
        return self.ChequeKind
    def set_ChequeKind(self, ChequeKind):
        self.ChequeKind = ChequeKind
    def get_BankName(self):
        return self.BankName
    def set_BankName(self, BankName):
        self.BankName = BankName
    def hasContent_(self):
        if (
            self.ChequeIdentifier is not None or
            self.ChequeKind is not None or
            self.BankName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ChequeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ChequeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ChequeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ChequeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ChequeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ChequeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ChequeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ChequeIdentifier is not None:
            namespaceprefix_ = self.ChequeIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ChequeIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChequeIdentifier>%s</%sChequeIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChequeIdentifier), input_name='ChequeIdentifier')), namespaceprefix_ , eol_))
        if self.ChequeKind is not None:
            namespaceprefix_ = self.ChequeKind_nsprefix_ + ':' if (UseCapturedNS_ and self.ChequeKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChequeKind>%s</%sChequeKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChequeKind), input_name='ChequeKind')), namespaceprefix_ , eol_))
        if self.BankName is not None:
            namespaceprefix_ = self.BankName_nsprefix_ + ':' if (UseCapturedNS_ and self.BankName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankName>%s</%sBankName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankName), input_name='BankName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ChequeIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChequeIdentifier')
            value_ = self.gds_validate_string(value_, node, 'ChequeIdentifier')
            self.ChequeIdentifier = value_
            self.ChequeIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'ChequeKind':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChequeKind')
            value_ = self.gds_validate_string(value_, node, 'ChequeKind')
            self.ChequeKind = value_
            self.ChequeKind_nsprefix_ = child_.prefix
        elif nodeName_ == 'BankName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankName')
            value_ = self.gds_validate_string(value_, node, 'BankName')
            self.BankName = value_
            self.BankName_nsprefix_ = child_.prefix
# end class ChequeType


class BankTransferType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BankTransferIdentifier=None, BankTransferDate=None, OriginBankName=None, BankDestinationAccount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BankTransferIdentifier = BankTransferIdentifier
        self.BankTransferIdentifier_nsprefix_ = None
        if isinstance(BankTransferDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BankTransferDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BankTransferDate
        self.BankTransferDate = initvalue_
        self.BankTransferDate_nsprefix_ = None
        self.OriginBankName = OriginBankName
        self.OriginBankName_nsprefix_ = None
        self.BankDestinationAccount = BankDestinationAccount
        self.BankDestinationAccount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BankTransferType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BankTransferType.subclass:
            return BankTransferType.subclass(*args_, **kwargs_)
        else:
            return BankTransferType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BankTransferIdentifier(self):
        return self.BankTransferIdentifier
    def set_BankTransferIdentifier(self, BankTransferIdentifier):
        self.BankTransferIdentifier = BankTransferIdentifier
    def get_BankTransferDate(self):
        return self.BankTransferDate
    def set_BankTransferDate(self, BankTransferDate):
        self.BankTransferDate = BankTransferDate
    def get_OriginBankName(self):
        return self.OriginBankName
    def set_OriginBankName(self, OriginBankName):
        self.OriginBankName = OriginBankName
    def get_BankDestinationAccount(self):
        return self.BankDestinationAccount
    def set_BankDestinationAccount(self, BankDestinationAccount):
        self.BankDestinationAccount = BankDestinationAccount
    def hasContent_(self):
        if (
            self.BankTransferIdentifier is not None or
            self.BankTransferDate is not None or
            self.OriginBankName is not None or
            self.BankDestinationAccount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BankTransferType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BankTransferType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BankTransferType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BankTransferType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BankTransferType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BankTransferType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BankTransferType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BankTransferIdentifier is not None:
            namespaceprefix_ = self.BankTransferIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.BankTransferIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankTransferIdentifier>%s</%sBankTransferIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankTransferIdentifier), input_name='BankTransferIdentifier')), namespaceprefix_ , eol_))
        if self.BankTransferDate is not None:
            namespaceprefix_ = self.BankTransferDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BankTransferDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankTransferDate>%s</%sBankTransferDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BankTransferDate, input_name='BankTransferDate'), namespaceprefix_ , eol_))
        if self.OriginBankName is not None:
            namespaceprefix_ = self.OriginBankName_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginBankName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginBankName>%s</%sOriginBankName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginBankName), input_name='OriginBankName')), namespaceprefix_ , eol_))
        if self.BankDestinationAccount is not None:
            namespaceprefix_ = self.BankDestinationAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.BankDestinationAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankDestinationAccount>%s</%sBankDestinationAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankDestinationAccount), input_name='BankDestinationAccount')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BankTransferIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankTransferIdentifier')
            value_ = self.gds_validate_string(value_, node, 'BankTransferIdentifier')
            self.BankTransferIdentifier = value_
            self.BankTransferIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'BankTransferDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BankTransferDate = dval_
            self.BankTransferDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginBankName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginBankName')
            value_ = self.gds_validate_string(value_, node, 'OriginBankName')
            self.OriginBankName = value_
            self.OriginBankName_nsprefix_ = child_.prefix
        elif nodeName_ == 'BankDestinationAccount':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankDestinationAccount')
            value_ = self.gds_validate_string(value_, node, 'BankDestinationAccount')
            self.BankDestinationAccount = value_
            self.BankDestinationAccount_nsprefix_ = child_.prefix
# end class BankTransferType


class PaymentFeeDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentFee=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PaymentFee is None:
            self.PaymentFee = []
        else:
            self.PaymentFee = PaymentFee
        self.PaymentFee_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentFeeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentFeeDetailsType.subclass:
            return PaymentFeeDetailsType.subclass(*args_, **kwargs_)
        else:
            return PaymentFeeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentFee(self):
        return self.PaymentFee
    def set_PaymentFee(self, PaymentFee):
        self.PaymentFee = PaymentFee
    def add_PaymentFee(self, value):
        self.PaymentFee.append(value)
    def insert_PaymentFee_at(self, index, value):
        self.PaymentFee.insert(index, value)
    def replace_PaymentFee_at(self, index, value):
        self.PaymentFee[index] = value
    def hasContent_(self):
        if (
            self.PaymentFee
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentFeeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentFeeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentFeeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentFeeDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentFeeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentFeeDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PaymentFeeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PaymentFee_ in self.PaymentFee:
            namespaceprefix_ = self.PaymentFee_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentFee_nsprefix_) else ''
            PaymentFee_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentFee', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentFee':
            obj_ = PaymentFeeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentFee.append(obj_)
            obj_.original_tagname_ = 'PaymentFee'
# end class PaymentFeeDetailsType


class TradeMarkKeyDetailsType8(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMarkKey is None:
            self.TradeMarkKey = []
        else:
            self.TradeMarkKey = TradeMarkKey
        self.TradeMarkKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkKeyDetailsType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkKeyDetailsType8.subclass:
            return TradeMarkKeyDetailsType8.subclass(*args_, **kwargs_)
        else:
            return TradeMarkKeyDetailsType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkKey(self):
        return self.TradeMarkKey
    def set_TradeMarkKey(self, TradeMarkKey):
        self.TradeMarkKey = TradeMarkKey
    def add_TradeMarkKey(self, value):
        self.TradeMarkKey.append(value)
    def insert_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey.insert(index, value)
    def replace_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkKey
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType8', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkKeyDetailsType8')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkKeyDetailsType8':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkKeyDetailsType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkKeyDetailsType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkKeyDetailsType8'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMarkKey_ in self.TradeMarkKey:
            namespaceprefix_ = self.TradeMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKey_nsprefix_) else ''
            TradeMarkKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKey.append(obj_)
            obj_.original_tagname_ = 'TradeMarkKey'
# end class TradeMarkKeyDetailsType8


class RecordPublicationDetailsType9(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordPublication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordPublication is None:
            self.RecordPublication = []
        else:
            self.RecordPublication = RecordPublication
        self.RecordPublication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPublicationDetailsType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPublicationDetailsType9.subclass:
            return RecordPublicationDetailsType9.subclass(*args_, **kwargs_)
        else:
            return RecordPublicationDetailsType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordPublication(self):
        return self.RecordPublication
    def set_RecordPublication(self, RecordPublication):
        self.RecordPublication = RecordPublication
    def add_RecordPublication(self, value):
        self.RecordPublication.append(value)
    def insert_RecordPublication_at(self, index, value):
        self.RecordPublication.insert(index, value)
    def replace_RecordPublication_at(self, index, value):
        self.RecordPublication[index] = value
    def hasContent_(self):
        if (
            self.RecordPublication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType9', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPublicationDetailsType9')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordPublicationDetailsType9':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordPublicationDetailsType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordPublicationDetailsType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordPublicationDetailsType9'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordPublication_ in self.RecordPublication:
            namespaceprefix_ = self.RecordPublication_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublication_nsprefix_) else ''
            RecordPublication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordPublication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublication.append(obj_)
            obj_.original_tagname_ = 'RecordPublication'
# end class RecordPublicationDetailsType9


class ClaimantDetailsType10(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClaimantKey=None, Claimant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClaimantKey is None:
            self.ClaimantKey = []
        else:
            self.ClaimantKey = ClaimantKey
        self.ClaimantKey_nsprefix_ = None
        if Claimant is None:
            self.Claimant = []
        else:
            self.Claimant = Claimant
        self.Claimant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClaimantDetailsType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClaimantDetailsType10.subclass:
            return ClaimantDetailsType10.subclass(*args_, **kwargs_)
        else:
            return ClaimantDetailsType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClaimantKey(self):
        return self.ClaimantKey
    def set_ClaimantKey(self, ClaimantKey):
        self.ClaimantKey = ClaimantKey
    def add_ClaimantKey(self, value):
        self.ClaimantKey.append(value)
    def insert_ClaimantKey_at(self, index, value):
        self.ClaimantKey.insert(index, value)
    def replace_ClaimantKey_at(self, index, value):
        self.ClaimantKey[index] = value
    def get_Claimant(self):
        return self.Claimant
    def set_Claimant(self, Claimant):
        self.Claimant = Claimant
    def add_Claimant(self, value):
        self.Claimant.append(value)
    def insert_Claimant_at(self, index, value):
        self.Claimant.insert(index, value)
    def replace_Claimant_at(self, index, value):
        self.Claimant[index] = value
    def hasContent_(self):
        if (
            self.ClaimantKey or
            self.Claimant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType10', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClaimantDetailsType10')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClaimantDetailsType10':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClaimantDetailsType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClaimantDetailsType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClaimantDetailsType10'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClaimantKey_ in self.ClaimantKey:
            namespaceprefix_ = self.ClaimantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantKey_nsprefix_) else ''
            ClaimantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantKey', pretty_print=pretty_print)
        for Claimant_ in self.Claimant:
            namespaceprefix_ = self.Claimant_nsprefix_ + ':' if (UseCapturedNS_ and self.Claimant_nsprefix_) else ''
            Claimant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Claimant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClaimantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantKey.append(obj_)
            obj_.original_tagname_ = 'ClaimantKey'
        elif nodeName_ == 'Claimant':
            obj_ = ClaimantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Claimant.append(obj_)
            obj_.original_tagname_ = 'Claimant'
# end class ClaimantDetailsType10


class RepresentativeDetailsType11(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType11)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType11.subclass:
            return RepresentativeDetailsType11.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType11', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType11')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType11':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType11')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType11', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType11'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType11


class RecordEventDetailsType12(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordEvent is None:
            self.RecordEvent = []
        else:
            self.RecordEvent = RecordEvent
        self.RecordEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordEventDetailsType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordEventDetailsType12.subclass:
            return RecordEventDetailsType12.subclass(*args_, **kwargs_)
        else:
            return RecordEventDetailsType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordEvent(self):
        return self.RecordEvent
    def set_RecordEvent(self, RecordEvent):
        self.RecordEvent = RecordEvent
    def add_RecordEvent(self, value):
        self.RecordEvent.append(value)
    def insert_RecordEvent_at(self, index, value):
        self.RecordEvent.insert(index, value)
    def replace_RecordEvent_at(self, index, value):
        self.RecordEvent[index] = value
    def hasContent_(self):
        if (
            self.RecordEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType12', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordEventDetailsType12')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordEventDetailsType12':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordEventDetailsType12')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordEventDetailsType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordEventDetailsType12'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordEvent_ in self.RecordEvent:
            namespaceprefix_ = self.RecordEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEvent_nsprefix_) else ''
            RecordEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordEvent':
            obj_ = RecordEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEvent.append(obj_)
            obj_.original_tagname_ = 'RecordEvent'
# end class RecordEventDetailsType12


class RecordDocumentDetailsType13(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDocument is None:
            self.RecordDocument = []
        else:
            self.RecordDocument = RecordDocument
        self.RecordDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDocumentDetailsType13)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDocumentDetailsType13.subclass:
            return RecordDocumentDetailsType13.subclass(*args_, **kwargs_)
        else:
            return RecordDocumentDetailsType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDocument(self):
        return self.RecordDocument
    def set_RecordDocument(self, RecordDocument):
        self.RecordDocument = RecordDocument
    def add_RecordDocument(self, value):
        self.RecordDocument.append(value)
    def insert_RecordDocument_at(self, index, value):
        self.RecordDocument.insert(index, value)
    def replace_RecordDocument_at(self, index, value):
        self.RecordDocument[index] = value
    def hasContent_(self):
        if (
            self.RecordDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType13', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDocumentDetailsType13')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDocumentDetailsType13':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDocumentDetailsType13')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDocumentDetailsType13', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDocumentDetailsType13'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDocument_ in self.RecordDocument:
            namespaceprefix_ = self.RecordDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocument_nsprefix_) else ''
            RecordDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocument.append(obj_)
            obj_.original_tagname_ = 'RecordDocument'
# end class RecordDocumentDetailsType13


class HolderDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PreviousHolder=None, NewHolder=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PreviousHolder is None:
            self.PreviousHolder = []
        else:
            self.PreviousHolder = PreviousHolder
        self.PreviousHolder_nsprefix_ = None
        if NewHolder is None:
            self.NewHolder = []
        else:
            self.NewHolder = NewHolder
        self.NewHolder_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HolderDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HolderDetailsType.subclass:
            return HolderDetailsType.subclass(*args_, **kwargs_)
        else:
            return HolderDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PreviousHolder(self):
        return self.PreviousHolder
    def set_PreviousHolder(self, PreviousHolder):
        self.PreviousHolder = PreviousHolder
    def add_PreviousHolder(self, value):
        self.PreviousHolder.append(value)
    def insert_PreviousHolder_at(self, index, value):
        self.PreviousHolder.insert(index, value)
    def replace_PreviousHolder_at(self, index, value):
        self.PreviousHolder[index] = value
    def get_NewHolder(self):
        return self.NewHolder
    def set_NewHolder(self, NewHolder):
        self.NewHolder = NewHolder
    def add_NewHolder(self, value):
        self.NewHolder.append(value)
    def insert_NewHolder_at(self, index, value):
        self.NewHolder.insert(index, value)
    def replace_NewHolder_at(self, index, value):
        self.NewHolder[index] = value
    def hasContent_(self):
        if (
            self.PreviousHolder or
            self.NewHolder
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='HolderDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HolderDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HolderDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HolderDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HolderDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HolderDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='HolderDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PreviousHolder_ in self.PreviousHolder:
            namespaceprefix_ = self.PreviousHolder_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousHolder_nsprefix_) else ''
            PreviousHolder_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PreviousHolder', pretty_print=pretty_print)
        for NewHolder_ in self.NewHolder:
            namespaceprefix_ = self.NewHolder_nsprefix_ + ':' if (UseCapturedNS_ and self.NewHolder_nsprefix_) else ''
            NewHolder_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NewHolder', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PreviousHolder':
            obj_ = ApplicantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PreviousHolder.append(obj_)
            obj_.original_tagname_ = 'PreviousHolder'
        elif nodeName_ == 'NewHolder':
            obj_ = ApplicantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NewHolder.append(obj_)
            obj_.original_tagname_ = 'NewHolder'
# end class HolderDetailsType


class TradeMarkKeyDetailsType14(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMarkKey is None:
            self.TradeMarkKey = []
        else:
            self.TradeMarkKey = TradeMarkKey
        self.TradeMarkKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkKeyDetailsType14)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkKeyDetailsType14.subclass:
            return TradeMarkKeyDetailsType14.subclass(*args_, **kwargs_)
        else:
            return TradeMarkKeyDetailsType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkKey(self):
        return self.TradeMarkKey
    def set_TradeMarkKey(self, TradeMarkKey):
        self.TradeMarkKey = TradeMarkKey
    def add_TradeMarkKey(self, value):
        self.TradeMarkKey.append(value)
    def insert_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey.insert(index, value)
    def replace_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkKey
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType14', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkKeyDetailsType14')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkKeyDetailsType14':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkKeyDetailsType14')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkKeyDetailsType14', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkKeyDetailsType14'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMarkKey_ in self.TradeMarkKey:
            namespaceprefix_ = self.TradeMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKey_nsprefix_) else ''
            TradeMarkKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKey.append(obj_)
            obj_.original_tagname_ = 'TradeMarkKey'
# end class TradeMarkKeyDetailsType14


class RecordPublicationDetailsType15(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordPublication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordPublication is None:
            self.RecordPublication = []
        else:
            self.RecordPublication = RecordPublication
        self.RecordPublication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPublicationDetailsType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPublicationDetailsType15.subclass:
            return RecordPublicationDetailsType15.subclass(*args_, **kwargs_)
        else:
            return RecordPublicationDetailsType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordPublication(self):
        return self.RecordPublication
    def set_RecordPublication(self, RecordPublication):
        self.RecordPublication = RecordPublication
    def add_RecordPublication(self, value):
        self.RecordPublication.append(value)
    def insert_RecordPublication_at(self, index, value):
        self.RecordPublication.insert(index, value)
    def replace_RecordPublication_at(self, index, value):
        self.RecordPublication[index] = value
    def hasContent_(self):
        if (
            self.RecordPublication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType15', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPublicationDetailsType15')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordPublicationDetailsType15':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordPublicationDetailsType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordPublicationDetailsType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordPublicationDetailsType15'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordPublication_ in self.RecordPublication:
            namespaceprefix_ = self.RecordPublication_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublication_nsprefix_) else ''
            RecordPublication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordPublication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublication.append(obj_)
            obj_.original_tagname_ = 'RecordPublication'
# end class RecordPublicationDetailsType15


class ClaimantDetailsType16(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClaimantKey=None, Claimant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClaimantKey is None:
            self.ClaimantKey = []
        else:
            self.ClaimantKey = ClaimantKey
        self.ClaimantKey_nsprefix_ = None
        if Claimant is None:
            self.Claimant = []
        else:
            self.Claimant = Claimant
        self.Claimant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClaimantDetailsType16)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClaimantDetailsType16.subclass:
            return ClaimantDetailsType16.subclass(*args_, **kwargs_)
        else:
            return ClaimantDetailsType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClaimantKey(self):
        return self.ClaimantKey
    def set_ClaimantKey(self, ClaimantKey):
        self.ClaimantKey = ClaimantKey
    def add_ClaimantKey(self, value):
        self.ClaimantKey.append(value)
    def insert_ClaimantKey_at(self, index, value):
        self.ClaimantKey.insert(index, value)
    def replace_ClaimantKey_at(self, index, value):
        self.ClaimantKey[index] = value
    def get_Claimant(self):
        return self.Claimant
    def set_Claimant(self, Claimant):
        self.Claimant = Claimant
    def add_Claimant(self, value):
        self.Claimant.append(value)
    def insert_Claimant_at(self, index, value):
        self.Claimant.insert(index, value)
    def replace_Claimant_at(self, index, value):
        self.Claimant[index] = value
    def hasContent_(self):
        if (
            self.ClaimantKey or
            self.Claimant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType16', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClaimantDetailsType16')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClaimantDetailsType16':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClaimantDetailsType16')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClaimantDetailsType16', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClaimantDetailsType16'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClaimantKey_ in self.ClaimantKey:
            namespaceprefix_ = self.ClaimantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantKey_nsprefix_) else ''
            ClaimantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantKey', pretty_print=pretty_print)
        for Claimant_ in self.Claimant:
            namespaceprefix_ = self.Claimant_nsprefix_ + ':' if (UseCapturedNS_ and self.Claimant_nsprefix_) else ''
            Claimant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Claimant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClaimantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantKey.append(obj_)
            obj_.original_tagname_ = 'ClaimantKey'
        elif nodeName_ == 'Claimant':
            obj_ = ClaimantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Claimant.append(obj_)
            obj_.original_tagname_ = 'Claimant'
# end class ClaimantDetailsType16


class RepresentativeDetailsType17(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType17.subclass:
            return RepresentativeDetailsType17.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType17', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType17')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType17':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType17')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType17'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType17', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType17


class RecordEventDetailsType18(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordEvent is None:
            self.RecordEvent = []
        else:
            self.RecordEvent = RecordEvent
        self.RecordEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordEventDetailsType18)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordEventDetailsType18.subclass:
            return RecordEventDetailsType18.subclass(*args_, **kwargs_)
        else:
            return RecordEventDetailsType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordEvent(self):
        return self.RecordEvent
    def set_RecordEvent(self, RecordEvent):
        self.RecordEvent = RecordEvent
    def add_RecordEvent(self, value):
        self.RecordEvent.append(value)
    def insert_RecordEvent_at(self, index, value):
        self.RecordEvent.insert(index, value)
    def replace_RecordEvent_at(self, index, value):
        self.RecordEvent[index] = value
    def hasContent_(self):
        if (
            self.RecordEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType18', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordEventDetailsType18')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordEventDetailsType18':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordEventDetailsType18')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordEventDetailsType18', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordEventDetailsType18'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType18', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordEvent_ in self.RecordEvent:
            namespaceprefix_ = self.RecordEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEvent_nsprefix_) else ''
            RecordEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordEvent':
            obj_ = RecordEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEvent.append(obj_)
            obj_.original_tagname_ = 'RecordEvent'
# end class RecordEventDetailsType18


class RecordDocumentDetailsType19(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDocument is None:
            self.RecordDocument = []
        else:
            self.RecordDocument = RecordDocument
        self.RecordDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDocumentDetailsType19)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDocumentDetailsType19.subclass:
            return RecordDocumentDetailsType19.subclass(*args_, **kwargs_)
        else:
            return RecordDocumentDetailsType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDocument(self):
        return self.RecordDocument
    def set_RecordDocument(self, RecordDocument):
        self.RecordDocument = RecordDocument
    def add_RecordDocument(self, value):
        self.RecordDocument.append(value)
    def insert_RecordDocument_at(self, index, value):
        self.RecordDocument.insert(index, value)
    def replace_RecordDocument_at(self, index, value):
        self.RecordDocument[index] = value
    def hasContent_(self):
        if (
            self.RecordDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType19', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDocumentDetailsType19')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDocumentDetailsType19':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDocumentDetailsType19')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDocumentDetailsType19', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDocumentDetailsType19'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType19', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDocument_ in self.RecordDocument:
            namespaceprefix_ = self.RecordDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocument_nsprefix_) else ''
            RecordDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocument.append(obj_)
            obj_.original_tagname_ = 'RecordDocument'
# end class RecordDocumentDetailsType19


class RecordDesignatedCountryDetailsType20(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDesignatedCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDesignatedCountryCode is None:
            self.RecordDesignatedCountryCode = []
        else:
            self.RecordDesignatedCountryCode = RecordDesignatedCountryCode
        self.RecordDesignatedCountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDesignatedCountryDetailsType20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDesignatedCountryDetailsType20.subclass:
            return RecordDesignatedCountryDetailsType20.subclass(*args_, **kwargs_)
        else:
            return RecordDesignatedCountryDetailsType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDesignatedCountryCode(self):
        return self.RecordDesignatedCountryCode
    def set_RecordDesignatedCountryCode(self, RecordDesignatedCountryCode):
        self.RecordDesignatedCountryCode = RecordDesignatedCountryCode
    def add_RecordDesignatedCountryCode(self, value):
        self.RecordDesignatedCountryCode.append(value)
    def insert_RecordDesignatedCountryCode_at(self, index, value):
        self.RecordDesignatedCountryCode.insert(index, value)
    def replace_RecordDesignatedCountryCode_at(self, index, value):
        self.RecordDesignatedCountryCode[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.RecordDesignatedCountryCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDesignatedCountryDetailsType20', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDesignatedCountryDetailsType20')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDesignatedCountryDetailsType20':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDesignatedCountryDetailsType20')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDesignatedCountryDetailsType20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDesignatedCountryDetailsType20'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDesignatedCountryDetailsType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDesignatedCountryCode_ in self.RecordDesignatedCountryCode:
            namespaceprefix_ = self.RecordDesignatedCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDesignatedCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordDesignatedCountryCode>%s</%sRecordDesignatedCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RecordDesignatedCountryCode_), input_name='RecordDesignatedCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDesignatedCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordDesignatedCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RecordDesignatedCountryCode')
            self.RecordDesignatedCountryCode.append(value_)
            self.RecordDesignatedCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.RecordDesignatedCountryCode[-1])
# end class RecordDesignatedCountryDetailsType20


class LicenceDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Licence=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Licence is None:
            self.Licence = []
        else:
            self.Licence = Licence
        self.Licence_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenceDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenceDetailsType.subclass:
            return LicenceDetailsType.subclass(*args_, **kwargs_)
        else:
            return LicenceDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Licence(self):
        return self.Licence
    def set_Licence(self, Licence):
        self.Licence = Licence
    def add_Licence(self, value):
        self.Licence.append(value)
    def insert_Licence_at(self, index, value):
        self.Licence.insert(index, value)
    def replace_Licence_at(self, index, value):
        self.Licence[index] = value
    def hasContent_(self):
        if (
            self.Licence
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenceDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenceDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenceDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenceDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenceDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='LicenceDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Licence_ in self.Licence:
            namespaceprefix_ = self.Licence_nsprefix_ + ':' if (UseCapturedNS_ and self.Licence_nsprefix_) else ''
            Licence_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Licence', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Licence':
            obj_ = LicenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Licence.append(obj_)
            obj_.original_tagname_ = 'Licence'
# end class LicenceDetailsType


class TradeMarkKeyDetailsType21(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMarkKey is None:
            self.TradeMarkKey = []
        else:
            self.TradeMarkKey = TradeMarkKey
        self.TradeMarkKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkKeyDetailsType21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkKeyDetailsType21.subclass:
            return TradeMarkKeyDetailsType21.subclass(*args_, **kwargs_)
        else:
            return TradeMarkKeyDetailsType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkKey(self):
        return self.TradeMarkKey
    def set_TradeMarkKey(self, TradeMarkKey):
        self.TradeMarkKey = TradeMarkKey
    def add_TradeMarkKey(self, value):
        self.TradeMarkKey.append(value)
    def insert_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey.insert(index, value)
    def replace_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkKey
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType21', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkKeyDetailsType21')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkKeyDetailsType21':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkKeyDetailsType21')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkKeyDetailsType21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkKeyDetailsType21'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMarkKey_ in self.TradeMarkKey:
            namespaceprefix_ = self.TradeMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKey_nsprefix_) else ''
            TradeMarkKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKey.append(obj_)
            obj_.original_tagname_ = 'TradeMarkKey'
# end class TradeMarkKeyDetailsType21


class RecordPublicationDetailsType22(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordPublication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordPublication is None:
            self.RecordPublication = []
        else:
            self.RecordPublication = RecordPublication
        self.RecordPublication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPublicationDetailsType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPublicationDetailsType22.subclass:
            return RecordPublicationDetailsType22.subclass(*args_, **kwargs_)
        else:
            return RecordPublicationDetailsType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordPublication(self):
        return self.RecordPublication
    def set_RecordPublication(self, RecordPublication):
        self.RecordPublication = RecordPublication
    def add_RecordPublication(self, value):
        self.RecordPublication.append(value)
    def insert_RecordPublication_at(self, index, value):
        self.RecordPublication.insert(index, value)
    def replace_RecordPublication_at(self, index, value):
        self.RecordPublication[index] = value
    def hasContent_(self):
        if (
            self.RecordPublication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType22', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPublicationDetailsType22')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordPublicationDetailsType22':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordPublicationDetailsType22')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordPublicationDetailsType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordPublicationDetailsType22'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordPublication_ in self.RecordPublication:
            namespaceprefix_ = self.RecordPublication_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublication_nsprefix_) else ''
            RecordPublication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordPublication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublication.append(obj_)
            obj_.original_tagname_ = 'RecordPublication'
# end class RecordPublicationDetailsType22


class ClaimantDetailsType23(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClaimantKey=None, Claimant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClaimantKey is None:
            self.ClaimantKey = []
        else:
            self.ClaimantKey = ClaimantKey
        self.ClaimantKey_nsprefix_ = None
        if Claimant is None:
            self.Claimant = []
        else:
            self.Claimant = Claimant
        self.Claimant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClaimantDetailsType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClaimantDetailsType23.subclass:
            return ClaimantDetailsType23.subclass(*args_, **kwargs_)
        else:
            return ClaimantDetailsType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClaimantKey(self):
        return self.ClaimantKey
    def set_ClaimantKey(self, ClaimantKey):
        self.ClaimantKey = ClaimantKey
    def add_ClaimantKey(self, value):
        self.ClaimantKey.append(value)
    def insert_ClaimantKey_at(self, index, value):
        self.ClaimantKey.insert(index, value)
    def replace_ClaimantKey_at(self, index, value):
        self.ClaimantKey[index] = value
    def get_Claimant(self):
        return self.Claimant
    def set_Claimant(self, Claimant):
        self.Claimant = Claimant
    def add_Claimant(self, value):
        self.Claimant.append(value)
    def insert_Claimant_at(self, index, value):
        self.Claimant.insert(index, value)
    def replace_Claimant_at(self, index, value):
        self.Claimant[index] = value
    def hasContent_(self):
        if (
            self.ClaimantKey or
            self.Claimant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType23', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClaimantDetailsType23')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClaimantDetailsType23':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClaimantDetailsType23')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClaimantDetailsType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClaimantDetailsType23'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClaimantKey_ in self.ClaimantKey:
            namespaceprefix_ = self.ClaimantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantKey_nsprefix_) else ''
            ClaimantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantKey', pretty_print=pretty_print)
        for Claimant_ in self.Claimant:
            namespaceprefix_ = self.Claimant_nsprefix_ + ':' if (UseCapturedNS_ and self.Claimant_nsprefix_) else ''
            Claimant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Claimant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClaimantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantKey.append(obj_)
            obj_.original_tagname_ = 'ClaimantKey'
        elif nodeName_ == 'Claimant':
            obj_ = ClaimantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Claimant.append(obj_)
            obj_.original_tagname_ = 'Claimant'
# end class ClaimantDetailsType23


class RepresentativeDetailsType24(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType24.subclass:
            return RepresentativeDetailsType24.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType24', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType24')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType24':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType24'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType24


class RecordEventDetailsType25(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordEvent is None:
            self.RecordEvent = []
        else:
            self.RecordEvent = RecordEvent
        self.RecordEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordEventDetailsType25)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordEventDetailsType25.subclass:
            return RecordEventDetailsType25.subclass(*args_, **kwargs_)
        else:
            return RecordEventDetailsType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordEvent(self):
        return self.RecordEvent
    def set_RecordEvent(self, RecordEvent):
        self.RecordEvent = RecordEvent
    def add_RecordEvent(self, value):
        self.RecordEvent.append(value)
    def insert_RecordEvent_at(self, index, value):
        self.RecordEvent.insert(index, value)
    def replace_RecordEvent_at(self, index, value):
        self.RecordEvent[index] = value
    def hasContent_(self):
        if (
            self.RecordEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType25', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordEventDetailsType25')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordEventDetailsType25':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordEventDetailsType25')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordEventDetailsType25', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordEventDetailsType25'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordEvent_ in self.RecordEvent:
            namespaceprefix_ = self.RecordEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEvent_nsprefix_) else ''
            RecordEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordEvent':
            obj_ = RecordEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEvent.append(obj_)
            obj_.original_tagname_ = 'RecordEvent'
# end class RecordEventDetailsType25


class RecordDocumentDetailsType26(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDocument is None:
            self.RecordDocument = []
        else:
            self.RecordDocument = RecordDocument
        self.RecordDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDocumentDetailsType26)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDocumentDetailsType26.subclass:
            return RecordDocumentDetailsType26.subclass(*args_, **kwargs_)
        else:
            return RecordDocumentDetailsType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDocument(self):
        return self.RecordDocument
    def set_RecordDocument(self, RecordDocument):
        self.RecordDocument = RecordDocument
    def add_RecordDocument(self, value):
        self.RecordDocument.append(value)
    def insert_RecordDocument_at(self, index, value):
        self.RecordDocument.insert(index, value)
    def replace_RecordDocument_at(self, index, value):
        self.RecordDocument[index] = value
    def hasContent_(self):
        if (
            self.RecordDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType26', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDocumentDetailsType26')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDocumentDetailsType26':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDocumentDetailsType26')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDocumentDetailsType26', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDocumentDetailsType26'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDocument_ in self.RecordDocument:
            namespaceprefix_ = self.RecordDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocument_nsprefix_) else ''
            RecordDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocument.append(obj_)
            obj_.original_tagname_ = 'RecordDocument'
# end class RecordDocumentDetailsType26


class GoodsServicesLimitationDetailsType27(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsServicesLimitation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if GoodsServicesLimitation is None:
            self.GoodsServicesLimitation = []
        else:
            self.GoodsServicesLimitation = GoodsServicesLimitation
        self.GoodsServicesLimitation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsServicesLimitationDetailsType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsServicesLimitationDetailsType27.subclass:
            return GoodsServicesLimitationDetailsType27.subclass(*args_, **kwargs_)
        else:
            return GoodsServicesLimitationDetailsType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsServicesLimitation(self):
        return self.GoodsServicesLimitation
    def set_GoodsServicesLimitation(self, GoodsServicesLimitation):
        self.GoodsServicesLimitation = GoodsServicesLimitation
    def add_GoodsServicesLimitation(self, value):
        self.GoodsServicesLimitation.append(value)
    def insert_GoodsServicesLimitation_at(self, index, value):
        self.GoodsServicesLimitation.insert(index, value)
    def replace_GoodsServicesLimitation_at(self, index, value):
        self.GoodsServicesLimitation[index] = value
    def hasContent_(self):
        if (
            self.GoodsServicesLimitation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationDetailsType27', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsServicesLimitationDetailsType27')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsServicesLimitationDetailsType27':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsServicesLimitationDetailsType27')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsServicesLimitationDetailsType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GoodsServicesLimitationDetailsType27'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationDetailsType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GoodsServicesLimitation_ in self.GoodsServicesLimitation:
            namespaceprefix_ = self.GoodsServicesLimitation_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitation_nsprefix_) else ''
            GoodsServicesLimitation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsServicesLimitation':
            obj_ = GoodsServicesLimitationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitation.append(obj_)
            obj_.original_tagname_ = 'GoodsServicesLimitation'
# end class GoodsServicesLimitationDetailsType27


class NationalMarkDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NationalMark=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if NationalMark is None:
            self.NationalMark = []
        else:
            self.NationalMark = NationalMark
        self.NationalMark_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NationalMarkDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NationalMarkDetailsType.subclass:
            return NationalMarkDetailsType.subclass(*args_, **kwargs_)
        else:
            return NationalMarkDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NationalMark(self):
        return self.NationalMark
    def set_NationalMark(self, NationalMark):
        self.NationalMark = NationalMark
    def add_NationalMark(self, value):
        self.NationalMark.append(value)
    def insert_NationalMark_at(self, index, value):
        self.NationalMark.insert(index, value)
    def replace_NationalMark_at(self, index, value):
        self.NationalMark[index] = value
    def hasContent_(self):
        if (
            self.NationalMark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='NationalMarkDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NationalMarkDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NationalMarkDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NationalMarkDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NationalMarkDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NationalMarkDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='NationalMarkDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NationalMark_ in self.NationalMark:
            namespaceprefix_ = self.NationalMark_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalMark_nsprefix_) else ''
            NationalMark_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NationalMark', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NationalMark':
            obj_ = NationalMarkType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NationalMark.append(obj_)
            obj_.original_tagname_ = 'NationalMark'
# end class NationalMarkDetailsType


class TradeMarkKeyDetailsType28(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMarkKey is None:
            self.TradeMarkKey = []
        else:
            self.TradeMarkKey = TradeMarkKey
        self.TradeMarkKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkKeyDetailsType28)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkKeyDetailsType28.subclass:
            return TradeMarkKeyDetailsType28.subclass(*args_, **kwargs_)
        else:
            return TradeMarkKeyDetailsType28(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkKey(self):
        return self.TradeMarkKey
    def set_TradeMarkKey(self, TradeMarkKey):
        self.TradeMarkKey = TradeMarkKey
    def add_TradeMarkKey(self, value):
        self.TradeMarkKey.append(value)
    def insert_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey.insert(index, value)
    def replace_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkKey
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType28', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkKeyDetailsType28')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkKeyDetailsType28':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkKeyDetailsType28')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkKeyDetailsType28', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkKeyDetailsType28'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType28', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMarkKey_ in self.TradeMarkKey:
            namespaceprefix_ = self.TradeMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKey_nsprefix_) else ''
            TradeMarkKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKey.append(obj_)
            obj_.original_tagname_ = 'TradeMarkKey'
# end class TradeMarkKeyDetailsType28


class RecordPublicationDetailsType29(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordPublication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordPublication is None:
            self.RecordPublication = []
        else:
            self.RecordPublication = RecordPublication
        self.RecordPublication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPublicationDetailsType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPublicationDetailsType29.subclass:
            return RecordPublicationDetailsType29.subclass(*args_, **kwargs_)
        else:
            return RecordPublicationDetailsType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordPublication(self):
        return self.RecordPublication
    def set_RecordPublication(self, RecordPublication):
        self.RecordPublication = RecordPublication
    def add_RecordPublication(self, value):
        self.RecordPublication.append(value)
    def insert_RecordPublication_at(self, index, value):
        self.RecordPublication.insert(index, value)
    def replace_RecordPublication_at(self, index, value):
        self.RecordPublication[index] = value
    def hasContent_(self):
        if (
            self.RecordPublication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType29', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPublicationDetailsType29')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordPublicationDetailsType29':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordPublicationDetailsType29')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordPublicationDetailsType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordPublicationDetailsType29'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType29', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordPublication_ in self.RecordPublication:
            namespaceprefix_ = self.RecordPublication_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublication_nsprefix_) else ''
            RecordPublication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordPublication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublication.append(obj_)
            obj_.original_tagname_ = 'RecordPublication'
# end class RecordPublicationDetailsType29


class RecordPublicationDetailsType30(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordPublication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordPublication is None:
            self.RecordPublication = []
        else:
            self.RecordPublication = RecordPublication
        self.RecordPublication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPublicationDetailsType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPublicationDetailsType30.subclass:
            return RecordPublicationDetailsType30.subclass(*args_, **kwargs_)
        else:
            return RecordPublicationDetailsType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordPublication(self):
        return self.RecordPublication
    def set_RecordPublication(self, RecordPublication):
        self.RecordPublication = RecordPublication
    def add_RecordPublication(self, value):
        self.RecordPublication.append(value)
    def insert_RecordPublication_at(self, index, value):
        self.RecordPublication.insert(index, value)
    def replace_RecordPublication_at(self, index, value):
        self.RecordPublication[index] = value
    def hasContent_(self):
        if (
            self.RecordPublication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType30', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPublicationDetailsType30')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordPublicationDetailsType30':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordPublicationDetailsType30')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordPublicationDetailsType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordPublicationDetailsType30'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType30', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordPublication_ in self.RecordPublication:
            namespaceprefix_ = self.RecordPublication_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublication_nsprefix_) else ''
            RecordPublication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordPublication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublication.append(obj_)
            obj_.original_tagname_ = 'RecordPublication'
# end class RecordPublicationDetailsType30


class ClaimantDetailsType31(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClaimantKey=None, Claimant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClaimantKey is None:
            self.ClaimantKey = []
        else:
            self.ClaimantKey = ClaimantKey
        self.ClaimantKey_nsprefix_ = None
        if Claimant is None:
            self.Claimant = []
        else:
            self.Claimant = Claimant
        self.Claimant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClaimantDetailsType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClaimantDetailsType31.subclass:
            return ClaimantDetailsType31.subclass(*args_, **kwargs_)
        else:
            return ClaimantDetailsType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClaimantKey(self):
        return self.ClaimantKey
    def set_ClaimantKey(self, ClaimantKey):
        self.ClaimantKey = ClaimantKey
    def add_ClaimantKey(self, value):
        self.ClaimantKey.append(value)
    def insert_ClaimantKey_at(self, index, value):
        self.ClaimantKey.insert(index, value)
    def replace_ClaimantKey_at(self, index, value):
        self.ClaimantKey[index] = value
    def get_Claimant(self):
        return self.Claimant
    def set_Claimant(self, Claimant):
        self.Claimant = Claimant
    def add_Claimant(self, value):
        self.Claimant.append(value)
    def insert_Claimant_at(self, index, value):
        self.Claimant.insert(index, value)
    def replace_Claimant_at(self, index, value):
        self.Claimant[index] = value
    def hasContent_(self):
        if (
            self.ClaimantKey or
            self.Claimant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType31', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClaimantDetailsType31')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClaimantDetailsType31':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClaimantDetailsType31')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClaimantDetailsType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClaimantDetailsType31'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClaimantKey_ in self.ClaimantKey:
            namespaceprefix_ = self.ClaimantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantKey_nsprefix_) else ''
            ClaimantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantKey', pretty_print=pretty_print)
        for Claimant_ in self.Claimant:
            namespaceprefix_ = self.Claimant_nsprefix_ + ':' if (UseCapturedNS_ and self.Claimant_nsprefix_) else ''
            Claimant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Claimant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClaimantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantKey.append(obj_)
            obj_.original_tagname_ = 'ClaimantKey'
        elif nodeName_ == 'Claimant':
            obj_ = ClaimantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Claimant.append(obj_)
            obj_.original_tagname_ = 'Claimant'
# end class ClaimantDetailsType31


class RepresentativeDetailsType32(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType32)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType32.subclass:
            return RepresentativeDetailsType32.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType32(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType32', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType32')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType32':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType32')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType32', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType32'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType32', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType32


class RecordEventDetailsType33(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordEvent is None:
            self.RecordEvent = []
        else:
            self.RecordEvent = RecordEvent
        self.RecordEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordEventDetailsType33)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordEventDetailsType33.subclass:
            return RecordEventDetailsType33.subclass(*args_, **kwargs_)
        else:
            return RecordEventDetailsType33(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordEvent(self):
        return self.RecordEvent
    def set_RecordEvent(self, RecordEvent):
        self.RecordEvent = RecordEvent
    def add_RecordEvent(self, value):
        self.RecordEvent.append(value)
    def insert_RecordEvent_at(self, index, value):
        self.RecordEvent.insert(index, value)
    def replace_RecordEvent_at(self, index, value):
        self.RecordEvent[index] = value
    def hasContent_(self):
        if (
            self.RecordEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType33', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordEventDetailsType33')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordEventDetailsType33':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordEventDetailsType33')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordEventDetailsType33', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordEventDetailsType33'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType33', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordEvent_ in self.RecordEvent:
            namespaceprefix_ = self.RecordEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEvent_nsprefix_) else ''
            RecordEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordEvent':
            obj_ = RecordEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEvent.append(obj_)
            obj_.original_tagname_ = 'RecordEvent'
# end class RecordEventDetailsType33


class RecordDocumentDetailsType34(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDocument is None:
            self.RecordDocument = []
        else:
            self.RecordDocument = RecordDocument
        self.RecordDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDocumentDetailsType34)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDocumentDetailsType34.subclass:
            return RecordDocumentDetailsType34.subclass(*args_, **kwargs_)
        else:
            return RecordDocumentDetailsType34(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDocument(self):
        return self.RecordDocument
    def set_RecordDocument(self, RecordDocument):
        self.RecordDocument = RecordDocument
    def add_RecordDocument(self, value):
        self.RecordDocument.append(value)
    def insert_RecordDocument_at(self, index, value):
        self.RecordDocument.insert(index, value)
    def replace_RecordDocument_at(self, index, value):
        self.RecordDocument[index] = value
    def hasContent_(self):
        if (
            self.RecordDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType34', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDocumentDetailsType34')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDocumentDetailsType34':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDocumentDetailsType34')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDocumentDetailsType34', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDocumentDetailsType34'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType34', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDocument_ in self.RecordDocument:
            namespaceprefix_ = self.RecordDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocument_nsprefix_) else ''
            RecordDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocument.append(obj_)
            obj_.original_tagname_ = 'RecordDocument'
# end class RecordDocumentDetailsType34


class RecordFromRegistrationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordFromRegistration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordFromRegistration is None:
            self.RecordFromRegistration = []
        else:
            self.RecordFromRegistration = RecordFromRegistration
        self.RecordFromRegistration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordFromRegistrationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordFromRegistrationDetailsType.subclass:
            return RecordFromRegistrationDetailsType.subclass(*args_, **kwargs_)
        else:
            return RecordFromRegistrationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordFromRegistration(self):
        return self.RecordFromRegistration
    def set_RecordFromRegistration(self, RecordFromRegistration):
        self.RecordFromRegistration = RecordFromRegistration
    def add_RecordFromRegistration(self, value):
        self.RecordFromRegistration.append(value)
    def insert_RecordFromRegistration_at(self, index, value):
        self.RecordFromRegistration.insert(index, value)
    def replace_RecordFromRegistration_at(self, index, value):
        self.RecordFromRegistration[index] = value
    def hasContent_(self):
        if (
            self.RecordFromRegistration
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordFromRegistrationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordFromRegistrationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordFromRegistrationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordFromRegistrationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordFromRegistrationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordFromRegistrationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordFromRegistrationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordFromRegistration_ in self.RecordFromRegistration:
            namespaceprefix_ = self.RecordFromRegistration_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordFromRegistration_nsprefix_) else ''
            RecordFromRegistration_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordFromRegistration', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordFromRegistration':
            obj_ = RegistrationShortNotationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordFromRegistration.append(obj_)
            obj_.original_tagname_ = 'RecordFromRegistration'
# end class RecordFromRegistrationDetailsType


class TradeMarkKeyDetailsType35(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkKey=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMarkKey is None:
            self.TradeMarkKey = []
        else:
            self.TradeMarkKey = TradeMarkKey
        self.TradeMarkKey_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkKeyDetailsType35)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkKeyDetailsType35.subclass:
            return TradeMarkKeyDetailsType35.subclass(*args_, **kwargs_)
        else:
            return TradeMarkKeyDetailsType35(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkKey(self):
        return self.TradeMarkKey
    def set_TradeMarkKey(self, TradeMarkKey):
        self.TradeMarkKey = TradeMarkKey
    def add_TradeMarkKey(self, value):
        self.TradeMarkKey.append(value)
    def insert_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey.insert(index, value)
    def replace_TradeMarkKey_at(self, index, value):
        self.TradeMarkKey[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkKey
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType35', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkKeyDetailsType35')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkKeyDetailsType35':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkKeyDetailsType35')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkKeyDetailsType35', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkKeyDetailsType35'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkKeyDetailsType35', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMarkKey_ in self.TradeMarkKey:
            namespaceprefix_ = self.TradeMarkKey_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkKey_nsprefix_) else ''
            TradeMarkKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkKey', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkKey.append(obj_)
            obj_.original_tagname_ = 'TradeMarkKey'
# end class TradeMarkKeyDetailsType35


class RecordPublicationDetailsType36(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordPublication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordPublication is None:
            self.RecordPublication = []
        else:
            self.RecordPublication = RecordPublication
        self.RecordPublication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordPublicationDetailsType36)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordPublicationDetailsType36.subclass:
            return RecordPublicationDetailsType36.subclass(*args_, **kwargs_)
        else:
            return RecordPublicationDetailsType36(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordPublication(self):
        return self.RecordPublication
    def set_RecordPublication(self, RecordPublication):
        self.RecordPublication = RecordPublication
    def add_RecordPublication(self, value):
        self.RecordPublication.append(value)
    def insert_RecordPublication_at(self, index, value):
        self.RecordPublication.insert(index, value)
    def replace_RecordPublication_at(self, index, value):
        self.RecordPublication[index] = value
    def hasContent_(self):
        if (
            self.RecordPublication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType36', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordPublicationDetailsType36')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordPublicationDetailsType36':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordPublicationDetailsType36')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordPublicationDetailsType36', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordPublicationDetailsType36'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordPublicationDetailsType36', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordPublication_ in self.RecordPublication:
            namespaceprefix_ = self.RecordPublication_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordPublication_nsprefix_) else ''
            RecordPublication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordPublication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordPublication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordPublication.append(obj_)
            obj_.original_tagname_ = 'RecordPublication'
# end class RecordPublicationDetailsType36


class ClaimantDetailsType37(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClaimantKey=None, Claimant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ClaimantKey is None:
            self.ClaimantKey = []
        else:
            self.ClaimantKey = ClaimantKey
        self.ClaimantKey_nsprefix_ = None
        if Claimant is None:
            self.Claimant = []
        else:
            self.Claimant = Claimant
        self.Claimant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClaimantDetailsType37)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClaimantDetailsType37.subclass:
            return ClaimantDetailsType37.subclass(*args_, **kwargs_)
        else:
            return ClaimantDetailsType37(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClaimantKey(self):
        return self.ClaimantKey
    def set_ClaimantKey(self, ClaimantKey):
        self.ClaimantKey = ClaimantKey
    def add_ClaimantKey(self, value):
        self.ClaimantKey.append(value)
    def insert_ClaimantKey_at(self, index, value):
        self.ClaimantKey.insert(index, value)
    def replace_ClaimantKey_at(self, index, value):
        self.ClaimantKey[index] = value
    def get_Claimant(self):
        return self.Claimant
    def set_Claimant(self, Claimant):
        self.Claimant = Claimant
    def add_Claimant(self, value):
        self.Claimant.append(value)
    def insert_Claimant_at(self, index, value):
        self.Claimant.insert(index, value)
    def replace_Claimant_at(self, index, value):
        self.Claimant[index] = value
    def hasContent_(self):
        if (
            self.ClaimantKey or
            self.Claimant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType37', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClaimantDetailsType37')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClaimantDetailsType37':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClaimantDetailsType37')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClaimantDetailsType37', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClaimantDetailsType37'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ClaimantDetailsType37', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ClaimantKey_ in self.ClaimantKey:
            namespaceprefix_ = self.ClaimantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ClaimantKey_nsprefix_) else ''
            ClaimantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClaimantKey', pretty_print=pretty_print)
        for Claimant_ in self.Claimant:
            namespaceprefix_ = self.Claimant_nsprefix_ + ':' if (UseCapturedNS_ and self.Claimant_nsprefix_) else ''
            Claimant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Claimant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClaimantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClaimantKey.append(obj_)
            obj_.original_tagname_ = 'ClaimantKey'
        elif nodeName_ == 'Claimant':
            obj_ = ClaimantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Claimant.append(obj_)
            obj_.original_tagname_ = 'Claimant'
# end class ClaimantDetailsType37


class RepresentativeDetailsType38(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType38)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType38.subclass:
            return RepresentativeDetailsType38.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType38(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType38', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType38')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType38':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType38')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType38', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType38'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType38', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType38


class RecordEventDetailsType39(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordEvent is None:
            self.RecordEvent = []
        else:
            self.RecordEvent = RecordEvent
        self.RecordEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordEventDetailsType39)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordEventDetailsType39.subclass:
            return RecordEventDetailsType39.subclass(*args_, **kwargs_)
        else:
            return RecordEventDetailsType39(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordEvent(self):
        return self.RecordEvent
    def set_RecordEvent(self, RecordEvent):
        self.RecordEvent = RecordEvent
    def add_RecordEvent(self, value):
        self.RecordEvent.append(value)
    def insert_RecordEvent_at(self, index, value):
        self.RecordEvent.insert(index, value)
    def replace_RecordEvent_at(self, index, value):
        self.RecordEvent[index] = value
    def hasContent_(self):
        if (
            self.RecordEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType39', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordEventDetailsType39')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordEventDetailsType39':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordEventDetailsType39')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordEventDetailsType39', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordEventDetailsType39'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordEventDetailsType39', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordEvent_ in self.RecordEvent:
            namespaceprefix_ = self.RecordEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordEvent_nsprefix_) else ''
            RecordEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordEvent':
            obj_ = RecordEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordEvent.append(obj_)
            obj_.original_tagname_ = 'RecordEvent'
# end class RecordEventDetailsType39


class RecordDocumentDetailsType40(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecordDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RecordDocument is None:
            self.RecordDocument = []
        else:
            self.RecordDocument = RecordDocument
        self.RecordDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecordDocumentDetailsType40)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecordDocumentDetailsType40.subclass:
            return RecordDocumentDetailsType40.subclass(*args_, **kwargs_)
        else:
            return RecordDocumentDetailsType40(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecordDocument(self):
        return self.RecordDocument
    def set_RecordDocument(self, RecordDocument):
        self.RecordDocument = RecordDocument
    def add_RecordDocument(self, value):
        self.RecordDocument.append(value)
    def insert_RecordDocument_at(self, index, value):
        self.RecordDocument.insert(index, value)
    def replace_RecordDocument_at(self, index, value):
        self.RecordDocument[index] = value
    def hasContent_(self):
        if (
            self.RecordDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType40', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecordDocumentDetailsType40')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecordDocumentDetailsType40':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecordDocumentDetailsType40')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecordDocumentDetailsType40', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecordDocumentDetailsType40'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RecordDocumentDetailsType40', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RecordDocument_ in self.RecordDocument:
            namespaceprefix_ = self.RecordDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordDocument_nsprefix_) else ''
            RecordDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecordDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecordDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecordDocument.append(obj_)
            obj_.original_tagname_ = 'RecordDocument'
# end class RecordDocumentDetailsType40


class HolderDetailsType41(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PreviousHolder=None, NewHolder=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PreviousHolder is None:
            self.PreviousHolder = []
        else:
            self.PreviousHolder = PreviousHolder
        self.PreviousHolder_nsprefix_ = None
        if NewHolder is None:
            self.NewHolder = []
        else:
            self.NewHolder = NewHolder
        self.NewHolder_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HolderDetailsType41)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HolderDetailsType41.subclass:
            return HolderDetailsType41.subclass(*args_, **kwargs_)
        else:
            return HolderDetailsType41(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PreviousHolder(self):
        return self.PreviousHolder
    def set_PreviousHolder(self, PreviousHolder):
        self.PreviousHolder = PreviousHolder
    def add_PreviousHolder(self, value):
        self.PreviousHolder.append(value)
    def insert_PreviousHolder_at(self, index, value):
        self.PreviousHolder.insert(index, value)
    def replace_PreviousHolder_at(self, index, value):
        self.PreviousHolder[index] = value
    def get_NewHolder(self):
        return self.NewHolder
    def set_NewHolder(self, NewHolder):
        self.NewHolder = NewHolder
    def add_NewHolder(self, value):
        self.NewHolder.append(value)
    def insert_NewHolder_at(self, index, value):
        self.NewHolder.insert(index, value)
    def replace_NewHolder_at(self, index, value):
        self.NewHolder[index] = value
    def hasContent_(self):
        if (
            self.PreviousHolder or
            self.NewHolder
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='HolderDetailsType41', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HolderDetailsType41')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HolderDetailsType41':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HolderDetailsType41')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HolderDetailsType41', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HolderDetailsType41'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='HolderDetailsType41', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PreviousHolder_ in self.PreviousHolder:
            namespaceprefix_ = self.PreviousHolder_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousHolder_nsprefix_) else ''
            PreviousHolder_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PreviousHolder', pretty_print=pretty_print)
        for NewHolder_ in self.NewHolder:
            namespaceprefix_ = self.NewHolder_nsprefix_ + ':' if (UseCapturedNS_ and self.NewHolder_nsprefix_) else ''
            NewHolder_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NewHolder', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PreviousHolder':
            obj_ = ApplicantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PreviousHolder.append(obj_)
            obj_.original_tagname_ = 'PreviousHolder'
        elif nodeName_ == 'NewHolder':
            obj_ = ApplicantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NewHolder.append(obj_)
            obj_.original_tagname_ = 'NewHolder'
# end class HolderDetailsType41


class GoodsServicesLimitationDetailsType42(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsServicesLimitation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if GoodsServicesLimitation is None:
            self.GoodsServicesLimitation = []
        else:
            self.GoodsServicesLimitation = GoodsServicesLimitation
        self.GoodsServicesLimitation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsServicesLimitationDetailsType42)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsServicesLimitationDetailsType42.subclass:
            return GoodsServicesLimitationDetailsType42.subclass(*args_, **kwargs_)
        else:
            return GoodsServicesLimitationDetailsType42(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsServicesLimitation(self):
        return self.GoodsServicesLimitation
    def set_GoodsServicesLimitation(self, GoodsServicesLimitation):
        self.GoodsServicesLimitation = GoodsServicesLimitation
    def add_GoodsServicesLimitation(self, value):
        self.GoodsServicesLimitation.append(value)
    def insert_GoodsServicesLimitation_at(self, index, value):
        self.GoodsServicesLimitation.insert(index, value)
    def replace_GoodsServicesLimitation_at(self, index, value):
        self.GoodsServicesLimitation[index] = value
    def hasContent_(self):
        if (
            self.GoodsServicesLimitation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationDetailsType42', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsServicesLimitationDetailsType42')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsServicesLimitationDetailsType42':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsServicesLimitationDetailsType42')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsServicesLimitationDetailsType42', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GoodsServicesLimitationDetailsType42'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesLimitationDetailsType42', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GoodsServicesLimitation_ in self.GoodsServicesLimitation:
            namespaceprefix_ = self.GoodsServicesLimitation_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesLimitation_nsprefix_) else ''
            GoodsServicesLimitation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesLimitation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsServicesLimitation':
            obj_ = GoodsServicesLimitationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesLimitation.append(obj_)
            obj_.original_tagname_ = 'GoodsServicesLimitation'
# end class GoodsServicesLimitationDetailsType42


class DesignatedCountryDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DesignatedCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DesignatedCountryCode is None:
            self.DesignatedCountryCode = []
        else:
            self.DesignatedCountryCode = DesignatedCountryCode
        self.DesignatedCountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DesignatedCountryDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DesignatedCountryDetailsType.subclass:
            return DesignatedCountryDetailsType.subclass(*args_, **kwargs_)
        else:
            return DesignatedCountryDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DesignatedCountryCode(self):
        return self.DesignatedCountryCode
    def set_DesignatedCountryCode(self, DesignatedCountryCode):
        self.DesignatedCountryCode = DesignatedCountryCode
    def add_DesignatedCountryCode(self, value):
        self.DesignatedCountryCode.append(value)
    def insert_DesignatedCountryCode_at(self, index, value):
        self.DesignatedCountryCode.insert(index, value)
    def replace_DesignatedCountryCode_at(self, index, value):
        self.DesignatedCountryCode[index] = value
    def validate_ExtendedWIPOST3CodeType(self, value):
        result = True
        #
        self.validate_restriction(inspect.currentframe().f_code.co_name, value)
        return result
    def hasContent_(self):
        if (
            self.DesignatedCountryCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DesignatedCountryDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DesignatedCountryDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DesignatedCountryDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DesignatedCountryDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DesignatedCountryDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DesignatedCountryDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DesignatedCountryDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DesignatedCountryCode_ in self.DesignatedCountryCode:
            namespaceprefix_ = self.DesignatedCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DesignatedCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesignatedCountryCode>%s</%sDesignatedCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DesignatedCountryCode_), input_name='DesignatedCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DesignatedCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DesignatedCountryCode')
            value_ = self.gds_validate_string(value_, node, 'DesignatedCountryCode')
            self.DesignatedCountryCode.append(value_)
            self.DesignatedCountryCode_nsprefix_ = child_.prefix
            # validate type ExtendedWIPOST3CodeType
            self.validate_ExtendedWIPOST3CodeType(self.DesignatedCountryCode[-1])
# end class DesignatedCountryDetailsType


class ApplicantDetailsType43(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Applicant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Applicant is None:
            self.Applicant = []
        else:
            self.Applicant = Applicant
        self.Applicant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ApplicantDetailsType43)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ApplicantDetailsType43.subclass:
            return ApplicantDetailsType43.subclass(*args_, **kwargs_)
        else:
            return ApplicantDetailsType43(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Applicant(self):
        return self.Applicant
    def set_Applicant(self, Applicant):
        self.Applicant = Applicant
    def add_Applicant(self, value):
        self.Applicant.append(value)
    def insert_Applicant_at(self, index, value):
        self.Applicant.insert(index, value)
    def replace_Applicant_at(self, index, value):
        self.Applicant[index] = value
    def hasContent_(self):
        if (
            self.Applicant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantDetailsType43', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ApplicantDetailsType43')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ApplicantDetailsType43':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ApplicantDetailsType43')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ApplicantDetailsType43', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ApplicantDetailsType43'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantDetailsType43', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Applicant_ in self.Applicant:
            namespaceprefix_ = self.Applicant_nsprefix_ + ':' if (UseCapturedNS_ and self.Applicant_nsprefix_) else ''
            Applicant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Applicant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Applicant':
            obj_ = ApplicantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Applicant.append(obj_)
            obj_.original_tagname_ = 'Applicant'
# end class ApplicantDetailsType43


class ReimbursementFeeDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReimbursementFee=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ReimbursementFee is None:
            self.ReimbursementFee = []
        else:
            self.ReimbursementFee = ReimbursementFee
        self.ReimbursementFee_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReimbursementFeeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReimbursementFeeDetailsType.subclass:
            return ReimbursementFeeDetailsType.subclass(*args_, **kwargs_)
        else:
            return ReimbursementFeeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReimbursementFee(self):
        return self.ReimbursementFee
    def set_ReimbursementFee(self, ReimbursementFee):
        self.ReimbursementFee = ReimbursementFee
    def add_ReimbursementFee(self, value):
        self.ReimbursementFee.append(value)
    def insert_ReimbursementFee_at(self, index, value):
        self.ReimbursementFee.insert(index, value)
    def replace_ReimbursementFee_at(self, index, value):
        self.ReimbursementFee[index] = value
    def hasContent_(self):
        if (
            self.ReimbursementFee
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementFeeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReimbursementFeeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReimbursementFeeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReimbursementFeeDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReimbursementFeeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReimbursementFeeDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ReimbursementFeeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ReimbursementFee_ in self.ReimbursementFee:
            namespaceprefix_ = self.ReimbursementFee_nsprefix_ + ':' if (UseCapturedNS_ and self.ReimbursementFee_nsprefix_) else ''
            ReimbursementFee_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReimbursementFee', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReimbursementFee':
            obj_ = ReimbursementFeeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReimbursementFee.append(obj_)
            obj_.original_tagname_ = 'ReimbursementFee'
# end class ReimbursementFeeDetailsType


class DesignatedCountryDetailsType44(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DesignatedCountry=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DesignatedCountry is None:
            self.DesignatedCountry = []
        else:
            self.DesignatedCountry = DesignatedCountry
        self.DesignatedCountry_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DesignatedCountryDetailsType44)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DesignatedCountryDetailsType44.subclass:
            return DesignatedCountryDetailsType44.subclass(*args_, **kwargs_)
        else:
            return DesignatedCountryDetailsType44(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DesignatedCountry(self):
        return self.DesignatedCountry
    def set_DesignatedCountry(self, DesignatedCountry):
        self.DesignatedCountry = DesignatedCountry
    def add_DesignatedCountry(self, value):
        self.DesignatedCountry.append(value)
    def insert_DesignatedCountry_at(self, index, value):
        self.DesignatedCountry.insert(index, value)
    def replace_DesignatedCountry_at(self, index, value):
        self.DesignatedCountry[index] = value
    def hasContent_(self):
        if (
            self.DesignatedCountry
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DesignatedCountryDetailsType44', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DesignatedCountryDetailsType44')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DesignatedCountryDetailsType44':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DesignatedCountryDetailsType44')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DesignatedCountryDetailsType44', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DesignatedCountryDetailsType44'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DesignatedCountryDetailsType44', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DesignatedCountry_ in self.DesignatedCountry:
            namespaceprefix_ = self.DesignatedCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.DesignatedCountry_nsprefix_) else ''
            DesignatedCountry_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DesignatedCountry', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DesignatedCountry':
            obj_ = DesignatedCountryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DesignatedCountry.append(obj_)
            obj_.original_tagname_ = 'DesignatedCountry'
# end class DesignatedCountryDetailsType44


class PreviousRegistrationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PreviousRegistration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PreviousRegistration is None:
            self.PreviousRegistration = []
        else:
            self.PreviousRegistration = PreviousRegistration
        self.PreviousRegistration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreviousRegistrationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreviousRegistrationDetailsType.subclass:
            return PreviousRegistrationDetailsType.subclass(*args_, **kwargs_)
        else:
            return PreviousRegistrationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PreviousRegistration(self):
        return self.PreviousRegistration
    def set_PreviousRegistration(self, PreviousRegistration):
        self.PreviousRegistration = PreviousRegistration
    def add_PreviousRegistration(self, value):
        self.PreviousRegistration.append(value)
    def insert_PreviousRegistration_at(self, index, value):
        self.PreviousRegistration.insert(index, value)
    def replace_PreviousRegistration_at(self, index, value):
        self.PreviousRegistration[index] = value
    def hasContent_(self):
        if (
            self.PreviousRegistration
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PreviousRegistrationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreviousRegistrationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PreviousRegistrationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreviousRegistrationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PreviousRegistrationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreviousRegistrationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PreviousRegistrationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PreviousRegistration_ in self.PreviousRegistration:
            namespaceprefix_ = self.PreviousRegistration_nsprefix_ + ':' if (UseCapturedNS_ and self.PreviousRegistration_nsprefix_) else ''
            PreviousRegistration_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PreviousRegistration', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PreviousRegistration':
            obj_ = PreviousRegistrationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PreviousRegistration.append(obj_)
            obj_.original_tagname_ = 'PreviousRegistration'
# end class PreviousRegistrationDetailsType


class AssociatedMarkDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AssociatedApplicationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AssociatedApplicationNumber is None:
            self.AssociatedApplicationNumber = []
        else:
            self.AssociatedApplicationNumber = AssociatedApplicationNumber
        self.AssociatedApplicationNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedMarkDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedMarkDetailsType.subclass:
            return AssociatedMarkDetailsType.subclass(*args_, **kwargs_)
        else:
            return AssociatedMarkDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AssociatedApplicationNumber(self):
        return self.AssociatedApplicationNumber
    def set_AssociatedApplicationNumber(self, AssociatedApplicationNumber):
        self.AssociatedApplicationNumber = AssociatedApplicationNumber
    def add_AssociatedApplicationNumber(self, value):
        self.AssociatedApplicationNumber.append(value)
    def insert_AssociatedApplicationNumber_at(self, index, value):
        self.AssociatedApplicationNumber.insert(index, value)
    def replace_AssociatedApplicationNumber_at(self, index, value):
        self.AssociatedApplicationNumber[index] = value
    def hasContent_(self):
        if (
            self.AssociatedApplicationNumber
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AssociatedMarkDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedMarkDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssociatedMarkDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssociatedMarkDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssociatedMarkDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssociatedMarkDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='AssociatedMarkDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AssociatedApplicationNumber_ in self.AssociatedApplicationNumber:
            namespaceprefix_ = self.AssociatedApplicationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedApplicationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssociatedApplicationNumber>%s</%sAssociatedApplicationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AssociatedApplicationNumber_), input_name='AssociatedApplicationNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AssociatedApplicationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AssociatedApplicationNumber')
            value_ = self.gds_validate_string(value_, node, 'AssociatedApplicationNumber')
            self.AssociatedApplicationNumber.append(value_)
            self.AssociatedApplicationNumber_nsprefix_ = child_.prefix
# end class AssociatedMarkDetailsType


class DivisionalApplicationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InitialApplicationNumber=None, InitialApplicationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InitialApplicationNumber = InitialApplicationNumber
        self.InitialApplicationNumber_nsprefix_ = None
        if isinstance(InitialApplicationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(InitialApplicationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = InitialApplicationDate
        self.InitialApplicationDate = initvalue_
        self.InitialApplicationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DivisionalApplicationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DivisionalApplicationDetailsType.subclass:
            return DivisionalApplicationDetailsType.subclass(*args_, **kwargs_)
        else:
            return DivisionalApplicationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InitialApplicationNumber(self):
        return self.InitialApplicationNumber
    def set_InitialApplicationNumber(self, InitialApplicationNumber):
        self.InitialApplicationNumber = InitialApplicationNumber
    def get_InitialApplicationDate(self):
        return self.InitialApplicationDate
    def set_InitialApplicationDate(self, InitialApplicationDate):
        self.InitialApplicationDate = InitialApplicationDate
    def hasContent_(self):
        if (
            self.InitialApplicationNumber is not None or
            self.InitialApplicationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DivisionalApplicationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DivisionalApplicationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DivisionalApplicationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DivisionalApplicationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DivisionalApplicationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DivisionalApplicationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='DivisionalApplicationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InitialApplicationNumber is not None:
            namespaceprefix_ = self.InitialApplicationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.InitialApplicationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInitialApplicationNumber>%s</%sInitialApplicationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InitialApplicationNumber), input_name='InitialApplicationNumber')), namespaceprefix_ , eol_))
        if self.InitialApplicationDate is not None:
            namespaceprefix_ = self.InitialApplicationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.InitialApplicationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInitialApplicationDate>%s</%sInitialApplicationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.InitialApplicationDate, input_name='InitialApplicationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InitialApplicationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InitialApplicationNumber')
            value_ = self.gds_validate_string(value_, node, 'InitialApplicationNumber')
            self.InitialApplicationNumber = value_
            self.InitialApplicationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'InitialApplicationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.InitialApplicationDate = dval_
            self.InitialApplicationDate_nsprefix_ = child_.prefix
# end class DivisionalApplicationDetailsType


class BasicRegistrationApplicationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BasicRegistrationApplication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if BasicRegistrationApplication is None:
            self.BasicRegistrationApplication = []
        else:
            self.BasicRegistrationApplication = BasicRegistrationApplication
        self.BasicRegistrationApplication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasicRegistrationApplicationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasicRegistrationApplicationDetailsType.subclass:
            return BasicRegistrationApplicationDetailsType.subclass(*args_, **kwargs_)
        else:
            return BasicRegistrationApplicationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BasicRegistrationApplication(self):
        return self.BasicRegistrationApplication
    def set_BasicRegistrationApplication(self, BasicRegistrationApplication):
        self.BasicRegistrationApplication = BasicRegistrationApplication
    def add_BasicRegistrationApplication(self, value):
        self.BasicRegistrationApplication.append(value)
    def insert_BasicRegistrationApplication_at(self, index, value):
        self.BasicRegistrationApplication.insert(index, value)
    def replace_BasicRegistrationApplication_at(self, index, value):
        self.BasicRegistrationApplication[index] = value
    def hasContent_(self):
        if (
            self.BasicRegistrationApplication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationApplicationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasicRegistrationApplicationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasicRegistrationApplicationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasicRegistrationApplicationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasicRegistrationApplicationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BasicRegistrationApplicationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='BasicRegistrationApplicationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BasicRegistrationApplication_ in self.BasicRegistrationApplication:
            namespaceprefix_ = self.BasicRegistrationApplication_nsprefix_ + ':' if (UseCapturedNS_ and self.BasicRegistrationApplication_nsprefix_) else ''
            BasicRegistrationApplication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BasicRegistrationApplication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BasicRegistrationApplication':
            obj_ = BasicRegistrationApplicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BasicRegistrationApplication.append(obj_)
            obj_.original_tagname_ = 'BasicRegistrationApplication'
# end class BasicRegistrationApplicationDetailsType


class MarkDescriptionDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkDescription is None:
            self.MarkDescription = []
        else:
            self.MarkDescription = MarkDescription
        self.MarkDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkDescriptionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkDescriptionDetailsType.subclass:
            return MarkDescriptionDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkDescriptionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkDescription(self):
        return self.MarkDescription
    def set_MarkDescription(self, MarkDescription):
        self.MarkDescription = MarkDescription
    def add_MarkDescription(self, value):
        self.MarkDescription.append(value)
    def insert_MarkDescription_at(self, index, value):
        self.MarkDescription.insert(index, value)
    def replace_MarkDescription_at(self, index, value):
        self.MarkDescription[index] = value
    def hasContent_(self):
        if (
            self.MarkDescription
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkDescriptionDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkDescriptionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkDescriptionDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkDescriptionDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkDescriptionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkDescriptionDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkDescriptionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkDescription_ in self.MarkDescription:
            namespaceprefix_ = self.MarkDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkDescription_nsprefix_) else ''
            MarkDescription_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkDescription', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkDescription':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkDescription.append(obj_)
            obj_.original_tagname_ = 'MarkDescription'
# end class MarkDescriptionDetailsType


class MarkDisclaimerDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkDisclaimer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkDisclaimer is None:
            self.MarkDisclaimer = []
        else:
            self.MarkDisclaimer = MarkDisclaimer
        self.MarkDisclaimer_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkDisclaimerDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkDisclaimerDetailsType.subclass:
            return MarkDisclaimerDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkDisclaimerDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkDisclaimer(self):
        return self.MarkDisclaimer
    def set_MarkDisclaimer(self, MarkDisclaimer):
        self.MarkDisclaimer = MarkDisclaimer
    def add_MarkDisclaimer(self, value):
        self.MarkDisclaimer.append(value)
    def insert_MarkDisclaimer_at(self, index, value):
        self.MarkDisclaimer.insert(index, value)
    def replace_MarkDisclaimer_at(self, index, value):
        self.MarkDisclaimer[index] = value
    def hasContent_(self):
        if (
            self.MarkDisclaimer
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkDisclaimerDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkDisclaimerDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkDisclaimerDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkDisclaimerDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkDisclaimerDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkDisclaimerDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkDisclaimerDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkDisclaimer_ in self.MarkDisclaimer:
            namespaceprefix_ = self.MarkDisclaimer_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkDisclaimer_nsprefix_) else ''
            MarkDisclaimer_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkDisclaimer', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkDisclaimer':
            class_obj_ = self.get_class_obj_(child_, TextType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkDisclaimer.append(obj_)
            obj_.original_tagname_ = 'MarkDisclaimer'
# end class MarkDisclaimerDetailsType


class MarkImageDetailsType45(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkImage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkImage is None:
            self.MarkImage = []
        else:
            self.MarkImage = MarkImage
        self.MarkImage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkImageDetailsType45)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkImageDetailsType45.subclass:
            return MarkImageDetailsType45.subclass(*args_, **kwargs_)
        else:
            return MarkImageDetailsType45(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkImage(self):
        return self.MarkImage
    def set_MarkImage(self, MarkImage):
        self.MarkImage = MarkImage
    def add_MarkImage(self, value):
        self.MarkImage.append(value)
    def insert_MarkImage_at(self, index, value):
        self.MarkImage.insert(index, value)
    def replace_MarkImage_at(self, index, value):
        self.MarkImage[index] = value
    def hasContent_(self):
        if (
            self.MarkImage
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageDetailsType45', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkImageDetailsType45')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkImageDetailsType45':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkImageDetailsType45')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkImageDetailsType45', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkImageDetailsType45'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkImageDetailsType45', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkImage_ in self.MarkImage:
            namespaceprefix_ = self.MarkImage_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkImage_nsprefix_) else ''
            MarkImage_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkImage', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkImage':
            obj_ = MarkImageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkImage.append(obj_)
            obj_.original_tagname_ = 'MarkImage'
# end class MarkImageDetailsType45


class MarkSoundDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkSound=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MarkSound = MarkSound
        self.MarkSound_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkSoundDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkSoundDetailsType.subclass:
            return MarkSoundDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkSoundDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkSound(self):
        return self.MarkSound
    def set_MarkSound(self, MarkSound):
        self.MarkSound = MarkSound
    def hasContent_(self):
        if (
            self.MarkSound is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkSoundDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkSoundDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkSoundDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkSoundDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkSoundDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkSoundDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkSoundDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MarkSound is not None:
            namespaceprefix_ = self.MarkSound_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkSound_nsprefix_) else ''
            self.MarkSound.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkSound', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkSound':
            obj_ = MarkSoundType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkSound = obj_
            obj_.original_tagname_ = 'MarkSound'
# end class MarkSoundDetailsType


class GoodsServicesDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsServices=None, GoodsServicesSameListAs=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if GoodsServices is None:
            self.GoodsServices = []
        else:
            self.GoodsServices = GoodsServices
        self.GoodsServices_nsprefix_ = None
        if GoodsServicesSameListAs is None:
            self.GoodsServicesSameListAs = []
        else:
            self.GoodsServicesSameListAs = GoodsServicesSameListAs
        self.GoodsServicesSameListAs_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsServicesDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsServicesDetailsType.subclass:
            return GoodsServicesDetailsType.subclass(*args_, **kwargs_)
        else:
            return GoodsServicesDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsServices(self):
        return self.GoodsServices
    def set_GoodsServices(self, GoodsServices):
        self.GoodsServices = GoodsServices
    def add_GoodsServices(self, value):
        self.GoodsServices.append(value)
    def insert_GoodsServices_at(self, index, value):
        self.GoodsServices.insert(index, value)
    def replace_GoodsServices_at(self, index, value):
        self.GoodsServices[index] = value
    def get_GoodsServicesSameListAs(self):
        return self.GoodsServicesSameListAs
    def set_GoodsServicesSameListAs(self, GoodsServicesSameListAs):
        self.GoodsServicesSameListAs = GoodsServicesSameListAs
    def add_GoodsServicesSameListAs(self, value):
        self.GoodsServicesSameListAs.append(value)
    def insert_GoodsServicesSameListAs_at(self, index, value):
        self.GoodsServicesSameListAs.insert(index, value)
    def replace_GoodsServicesSameListAs_at(self, index, value):
        self.GoodsServicesSameListAs[index] = value
    def hasContent_(self):
        if (
            self.GoodsServices or
            self.GoodsServicesSameListAs
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsServicesDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsServicesDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsServicesDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsServicesDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GoodsServicesDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='GoodsServicesDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GoodsServices_ in self.GoodsServices:
            namespaceprefix_ = self.GoodsServices_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServices_nsprefix_) else ''
            GoodsServices_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServices', pretty_print=pretty_print)
        for GoodsServicesSameListAs_ in self.GoodsServicesSameListAs:
            namespaceprefix_ = self.GoodsServicesSameListAs_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsServicesSameListAs_nsprefix_) else ''
            GoodsServicesSameListAs_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsServicesSameListAs', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsServices':
            obj_ = GoodsServicesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServices.append(obj_)
            obj_.original_tagname_ = 'GoodsServices'
        elif nodeName_ == 'GoodsServicesSameListAs':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsServicesSameListAs.append(obj_)
            obj_.original_tagname_ = 'GoodsServicesSameListAs'
# end class GoodsServicesDetailsType


class PriorityDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Priority=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Priority is None:
            self.Priority = []
        else:
            self.Priority = Priority
        self.Priority_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriorityDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriorityDetailsType.subclass:
            return PriorityDetailsType.subclass(*args_, **kwargs_)
        else:
            return PriorityDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Priority(self):
        return self.Priority
    def set_Priority(self, Priority):
        self.Priority = Priority
    def add_Priority(self, value):
        self.Priority.append(value)
    def insert_Priority_at(self, index, value):
        self.Priority.insert(index, value)
    def replace_Priority_at(self, index, value):
        self.Priority[index] = value
    def hasContent_(self):
        if (
            self.Priority
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PriorityDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriorityDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PriorityDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriorityDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriorityDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriorityDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PriorityDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Priority_ in self.Priority:
            namespaceprefix_ = self.Priority_nsprefix_ + ':' if (UseCapturedNS_ and self.Priority_nsprefix_) else ''
            Priority_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Priority', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Priority':
            obj_ = PriorityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Priority.append(obj_)
            obj_.original_tagname_ = 'Priority'
# end class PriorityDetailsType


class ExhibitionPriorityDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExhibitionPriority=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ExhibitionPriority is None:
            self.ExhibitionPriority = []
        else:
            self.ExhibitionPriority = ExhibitionPriority
        self.ExhibitionPriority_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExhibitionPriorityDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExhibitionPriorityDetailsType.subclass:
            return ExhibitionPriorityDetailsType.subclass(*args_, **kwargs_)
        else:
            return ExhibitionPriorityDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExhibitionPriority(self):
        return self.ExhibitionPriority
    def set_ExhibitionPriority(self, ExhibitionPriority):
        self.ExhibitionPriority = ExhibitionPriority
    def add_ExhibitionPriority(self, value):
        self.ExhibitionPriority.append(value)
    def insert_ExhibitionPriority_at(self, index, value):
        self.ExhibitionPriority.insert(index, value)
    def replace_ExhibitionPriority_at(self, index, value):
        self.ExhibitionPriority[index] = value
    def hasContent_(self):
        if (
            self.ExhibitionPriority
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ExhibitionPriorityDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExhibitionPriorityDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExhibitionPriorityDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExhibitionPriorityDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExhibitionPriorityDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExhibitionPriorityDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ExhibitionPriorityDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ExhibitionPriority_ in self.ExhibitionPriority:
            namespaceprefix_ = self.ExhibitionPriority_nsprefix_ + ':' if (UseCapturedNS_ and self.ExhibitionPriority_nsprefix_) else ''
            ExhibitionPriority_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExhibitionPriority', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExhibitionPriority':
            obj_ = ExhibitionPriorityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExhibitionPriority.append(obj_)
            obj_.original_tagname_ = 'ExhibitionPriority'
# end class ExhibitionPriorityDetailsType


class SeniorityDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Seniority=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Seniority is None:
            self.Seniority = []
        else:
            self.Seniority = Seniority
        self.Seniority_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SeniorityDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SeniorityDetailsType.subclass:
            return SeniorityDetailsType.subclass(*args_, **kwargs_)
        else:
            return SeniorityDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Seniority(self):
        return self.Seniority
    def set_Seniority(self, Seniority):
        self.Seniority = Seniority
    def add_Seniority(self, value):
        self.Seniority.append(value)
    def insert_Seniority_at(self, index, value):
        self.Seniority.insert(index, value)
    def replace_Seniority_at(self, index, value):
        self.Seniority[index] = value
    def hasContent_(self):
        if (
            self.Seniority
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SeniorityDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SeniorityDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SeniorityDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SeniorityDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SeniorityDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SeniorityDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='SeniorityDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Seniority_ in self.Seniority:
            namespaceprefix_ = self.Seniority_nsprefix_ + ':' if (UseCapturedNS_ and self.Seniority_nsprefix_) else ''
            Seniority_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Seniority', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Seniority':
            obj_ = SeniorityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Seniority.append(obj_)
            obj_.original_tagname_ = 'Seniority'
# end class SeniorityDetailsType


class PublicationDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Publication=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Publication is None:
            self.Publication = []
        else:
            self.Publication = Publication
        self.Publication_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PublicationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PublicationDetailsType.subclass:
            return PublicationDetailsType.subclass(*args_, **kwargs_)
        else:
            return PublicationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Publication(self):
        return self.Publication
    def set_Publication(self, Publication):
        self.Publication = Publication
    def add_Publication(self, value):
        self.Publication.append(value)
    def insert_Publication_at(self, index, value):
        self.Publication.insert(index, value)
    def replace_Publication_at(self, index, value):
        self.Publication[index] = value
    def hasContent_(self):
        if (
            self.Publication
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PublicationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PublicationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PublicationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PublicationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PublicationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PublicationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='PublicationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Publication_ in self.Publication:
            namespaceprefix_ = self.Publication_nsprefix_ + ':' if (UseCapturedNS_ and self.Publication_nsprefix_) else ''
            Publication_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Publication', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Publication':
            obj_ = PublicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Publication.append(obj_)
            obj_.original_tagname_ = 'Publication'
# end class PublicationDetailsType


class ApplicantDetailsType46(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ApplicantKey=None, Applicant=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ApplicantKey is None:
            self.ApplicantKey = []
        else:
            self.ApplicantKey = ApplicantKey
        self.ApplicantKey_nsprefix_ = None
        if Applicant is None:
            self.Applicant = []
        else:
            self.Applicant = Applicant
        self.Applicant_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ApplicantDetailsType46)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ApplicantDetailsType46.subclass:
            return ApplicantDetailsType46.subclass(*args_, **kwargs_)
        else:
            return ApplicantDetailsType46(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ApplicantKey(self):
        return self.ApplicantKey
    def set_ApplicantKey(self, ApplicantKey):
        self.ApplicantKey = ApplicantKey
    def add_ApplicantKey(self, value):
        self.ApplicantKey.append(value)
    def insert_ApplicantKey_at(self, index, value):
        self.ApplicantKey.insert(index, value)
    def replace_ApplicantKey_at(self, index, value):
        self.ApplicantKey[index] = value
    def get_Applicant(self):
        return self.Applicant
    def set_Applicant(self, Applicant):
        self.Applicant = Applicant
    def add_Applicant(self, value):
        self.Applicant.append(value)
    def insert_Applicant_at(self, index, value):
        self.Applicant.insert(index, value)
    def replace_Applicant_at(self, index, value):
        self.Applicant[index] = value
    def hasContent_(self):
        if (
            self.ApplicantKey or
            self.Applicant
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantDetailsType46', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ApplicantDetailsType46')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ApplicantDetailsType46':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ApplicantDetailsType46')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ApplicantDetailsType46', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ApplicantDetailsType46'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='ApplicantDetailsType46', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ApplicantKey_ in self.ApplicantKey:
            namespaceprefix_ = self.ApplicantKey_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicantKey_nsprefix_) else ''
            ApplicantKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApplicantKey', pretty_print=pretty_print)
        for Applicant_ in self.Applicant:
            namespaceprefix_ = self.Applicant_nsprefix_ + ':' if (UseCapturedNS_ and self.Applicant_nsprefix_) else ''
            Applicant_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Applicant', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ApplicantKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApplicantKey.append(obj_)
            obj_.original_tagname_ = 'ApplicantKey'
        elif nodeName_ == 'Applicant':
            obj_ = ApplicantType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Applicant.append(obj_)
            obj_.original_tagname_ = 'Applicant'
# end class ApplicantDetailsType46


class RepresentativeDetailsType47(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RepresentativeKey=None, Representative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RepresentativeKey is None:
            self.RepresentativeKey = []
        else:
            self.RepresentativeKey = RepresentativeKey
        self.RepresentativeKey_nsprefix_ = None
        if Representative is None:
            self.Representative = []
        else:
            self.Representative = Representative
        self.Representative_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeDetailsType47)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeDetailsType47.subclass:
            return RepresentativeDetailsType47.subclass(*args_, **kwargs_)
        else:
            return RepresentativeDetailsType47(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RepresentativeKey(self):
        return self.RepresentativeKey
    def set_RepresentativeKey(self, RepresentativeKey):
        self.RepresentativeKey = RepresentativeKey
    def add_RepresentativeKey(self, value):
        self.RepresentativeKey.append(value)
    def insert_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey.insert(index, value)
    def replace_RepresentativeKey_at(self, index, value):
        self.RepresentativeKey[index] = value
    def get_Representative(self):
        return self.Representative
    def set_Representative(self, Representative):
        self.Representative = Representative
    def add_Representative(self, value):
        self.Representative.append(value)
    def insert_Representative_at(self, index, value):
        self.Representative.insert(index, value)
    def replace_Representative_at(self, index, value):
        self.Representative[index] = value
    def hasContent_(self):
        if (
            self.RepresentativeKey or
            self.Representative
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType47', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeDetailsType47')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeDetailsType47':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeDetailsType47')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeDetailsType47', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RepresentativeDetailsType47'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='RepresentativeDetailsType47', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RepresentativeKey_ in self.RepresentativeKey:
            namespaceprefix_ = self.RepresentativeKey_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeKey_nsprefix_) else ''
            RepresentativeKey_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeKey', pretty_print=pretty_print)
        for Representative_ in self.Representative:
            namespaceprefix_ = self.Representative_nsprefix_ + ':' if (UseCapturedNS_ and self.Representative_nsprefix_) else ''
            Representative_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Representative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RepresentativeKey':
            obj_ = KeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeKey.append(obj_)
            obj_.original_tagname_ = 'RepresentativeKey'
        elif nodeName_ == 'Representative':
            obj_ = RepresentativeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Representative.append(obj_)
            obj_.original_tagname_ = 'Representative'
# end class RepresentativeDetailsType47


class StaffDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Staff=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Staff is None:
            self.Staff = []
        else:
            self.Staff = Staff
        self.Staff_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StaffDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StaffDetailsType.subclass:
            return StaffDetailsType.subclass(*args_, **kwargs_)
        else:
            return StaffDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Staff(self):
        return self.Staff
    def set_Staff(self, Staff):
        self.Staff = Staff
    def add_Staff(self, value):
        self.Staff.append(value)
    def insert_Staff_at(self, index, value):
        self.Staff.insert(index, value)
    def replace_Staff_at(self, index, value):
        self.Staff[index] = value
    def hasContent_(self):
        if (
            self.Staff
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='StaffDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StaffDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StaffDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StaffDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StaffDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StaffDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='StaffDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Staff_ in self.Staff:
            namespaceprefix_ = self.Staff_nsprefix_ + ':' if (UseCapturedNS_ and self.Staff_nsprefix_) else ''
            Staff_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Staff', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Staff':
            obj_ = StaffType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Staff.append(obj_)
            obj_.original_tagname_ = 'Staff'
# end class StaffDetailsType


class OppositionDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Opposition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Opposition is None:
            self.Opposition = []
        else:
            self.Opposition = Opposition
        self.Opposition_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OppositionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OppositionDetailsType.subclass:
            return OppositionDetailsType.subclass(*args_, **kwargs_)
        else:
            return OppositionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Opposition(self):
        return self.Opposition
    def set_Opposition(self, Opposition):
        self.Opposition = Opposition
    def add_Opposition(self, value):
        self.Opposition.append(value)
    def insert_Opposition_at(self, index, value):
        self.Opposition.insert(index, value)
    def replace_Opposition_at(self, index, value):
        self.Opposition[index] = value
    def hasContent_(self):
        if (
            self.Opposition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OppositionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OppositionDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OppositionDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OppositionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OppositionDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='OppositionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Opposition_ in self.Opposition:
            namespaceprefix_ = self.Opposition_nsprefix_ + ':' if (UseCapturedNS_ and self.Opposition_nsprefix_) else ''
            Opposition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Opposition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Opposition':
            obj_ = OppositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Opposition.append(obj_)
            obj_.original_tagname_ = 'Opposition'
# end class OppositionDetailsType


class MarkRecordDetailsType48(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkRecord=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkRecord is None:
            self.MarkRecord = []
        else:
            self.MarkRecord = MarkRecord
        self.MarkRecord_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkRecordDetailsType48)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkRecordDetailsType48.subclass:
            return MarkRecordDetailsType48.subclass(*args_, **kwargs_)
        else:
            return MarkRecordDetailsType48(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkRecord(self):
        return self.MarkRecord
    def set_MarkRecord(self, MarkRecord):
        self.MarkRecord = MarkRecord
    def add_MarkRecord(self, value):
        self.MarkRecord.append(value)
    def insert_MarkRecord_at(self, index, value):
        self.MarkRecord.insert(index, value)
    def replace_MarkRecord_at(self, index, value):
        self.MarkRecord[index] = value
    def hasContent_(self):
        if (
            self.MarkRecord
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordDetailsType48', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkRecordDetailsType48')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkRecordDetailsType48':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkRecordDetailsType48')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkRecordDetailsType48', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkRecordDetailsType48'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkRecordDetailsType48', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkRecord_ in self.MarkRecord:
            namespaceprefix_ = self.MarkRecord_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkRecord_nsprefix_) else ''
            MarkRecord_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkRecord', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkRecord':
            obj_ = MarkRecordType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkRecord.append(obj_)
            obj_.original_tagname_ = 'MarkRecord'
# end class MarkRecordDetailsType48


class MarkEventDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkEvent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkEvent is None:
            self.MarkEvent = []
        else:
            self.MarkEvent = MarkEvent
        self.MarkEvent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkEventDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkEventDetailsType.subclass:
            return MarkEventDetailsType.subclass(*args_, **kwargs_)
        else:
            return MarkEventDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkEvent(self):
        return self.MarkEvent
    def set_MarkEvent(self, MarkEvent):
        self.MarkEvent = MarkEvent
    def add_MarkEvent(self, value):
        self.MarkEvent.append(value)
    def insert_MarkEvent_at(self, index, value):
        self.MarkEvent.insert(index, value)
    def replace_MarkEvent_at(self, index, value):
        self.MarkEvent[index] = value
    def hasContent_(self):
        if (
            self.MarkEvent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkEventDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkEventDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkEventDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkEventDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkEventDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkEventDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='MarkEventDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkEvent_ in self.MarkEvent:
            namespaceprefix_ = self.MarkEvent_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkEvent_nsprefix_) else ''
            MarkEvent_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkEvent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkEvent':
            obj_ = MarkEventType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkEvent.append(obj_)
            obj_.original_tagname_ = 'MarkEvent'
# end class MarkEventDetailsType


class TradeMarkDocumentDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TradeMarkDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if TradeMarkDocument is None:
            self.TradeMarkDocument = []
        else:
            self.TradeMarkDocument = TradeMarkDocument
        self.TradeMarkDocument_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeMarkDocumentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeMarkDocumentDetailsType.subclass:
            return TradeMarkDocumentDetailsType.subclass(*args_, **kwargs_)
        else:
            return TradeMarkDocumentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeMarkDocument(self):
        return self.TradeMarkDocument
    def set_TradeMarkDocument(self, TradeMarkDocument):
        self.TradeMarkDocument = TradeMarkDocument
    def add_TradeMarkDocument(self, value):
        self.TradeMarkDocument.append(value)
    def insert_TradeMarkDocument_at(self, index, value):
        self.TradeMarkDocument.insert(index, value)
    def replace_TradeMarkDocument_at(self, index, value):
        self.TradeMarkDocument[index] = value
    def hasContent_(self):
        if (
            self.TradeMarkDocument
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkDocumentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeMarkDocumentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeMarkDocumentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeMarkDocumentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeMarkDocumentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TradeMarkDocumentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_=' xmlns:None="http://www.wipo.int/standards/XMLSchema/common" ', name_='TradeMarkDocumentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TradeMarkDocument_ in self.TradeMarkDocument:
            namespaceprefix_ = self.TradeMarkDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkDocument_nsprefix_) else ''
            TradeMarkDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TradeMarkDocument', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeMarkDocument':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TradeMarkDocument.append(obj_)
            obj_.original_tagname_ = 'TradeMarkDocument'
# end class TradeMarkDocumentDetailsType


class CaseReferenceType(TextType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = TextType
    def __init__(self, languageCode=None, sequenceNumber=None, caseReferenceKind=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(CaseReferenceType, self).__init__(languageCode, sequenceNumber, valueOf_,  **kwargs_)
        self.caseReferenceKind = _cast(None, caseReferenceKind)
        self.caseReferenceKind_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CaseReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CaseReferenceType.subclass:
            return CaseReferenceType.subclass(*args_, **kwargs_)
        else:
            return CaseReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_caseReferenceKind(self):
        return self.caseReferenceKind
    def set_caseReferenceKind(self, caseReferenceKind):
        self.caseReferenceKind = caseReferenceKind
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_CaseReferenceKindType(self, value):
        # Validate type CaseReferenceKindType, a restriction on xs:token.
        pass
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(CaseReferenceType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CaseReferenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CaseReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CaseReferenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CaseReferenceType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CaseReferenceType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CaseReferenceType'):
        super(CaseReferenceType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CaseReferenceType')
        if self.caseReferenceKind is not None and 'caseReferenceKind' not in already_processed:
            already_processed.add('caseReferenceKind')
            outfile.write(' caseReferenceKind=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.caseReferenceKind), input_name='caseReferenceKind')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CaseReferenceType', fromsubclass_=False, pretty_print=True):
        super(CaseReferenceType, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('caseReferenceKind', node)
        if value is not None and 'caseReferenceKind' not in already_processed:
            already_processed.add('caseReferenceKind')
            self.caseReferenceKind = value
            self.caseReferenceKind = ' '.join(self.caseReferenceKind.split())
            self.validate_CaseReferenceKindType(self.caseReferenceKind)    # validate type CaseReferenceKindType
        super(CaseReferenceType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class CaseReferenceType


GDSClassesMapping = {
    'Transaction': TransactionType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TransactionType'
        rootClass = TransactionType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TransactionType'
        rootClass = TransactionType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if mapping is None:
        mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping, nsmap_=nsmap)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TransactionType'
        rootClass = TransactionType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    return gds_collector.get_messages()


def parseLiteral(inFileName, silence=False, print_warnings=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TransactionType'
        rootClass = TransactionType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "AccountType",
    "AddressBookType",
    "AddressType",
    "AmountType",
    "AppealDetailsType",
    "AppealDocumentDetailsType",
    "AppealEventDetailsType",
    "AppealEventType",
    "AppealType",
    "AppellantDetailsType",
    "AppellantType",
    "ApplicantDetailsType",
    "ApplicantDetailsType43",
    "ApplicantDetailsType46",
    "ApplicantType",
    "AssociatedMarkDetailsType",
    "AuthorizationType",
    "BankTransferType",
    "BaseGoodsServicesDetailsType",
    "BasicApplicationDetailsType",
    "BasicApplicationType",
    "BasicRecordType",
    "BasicRegistrationApplicationDetailsType",
    "BasicRegistrationApplicationType",
    "BasicRegistrationDetailsType",
    "BasicRegistrationType",
    "CardAccountType",
    "CaseReferenceDetailsType",
    "CaseReferenceDetailsType5",
    "CaseReferenceType",
    "CategoryCodeDetailsType",
    "ChequeType",
    "ClaimantDetailsType",
    "ClaimantDetailsType10",
    "ClaimantDetailsType16",
    "ClaimantDetailsType23",
    "ClaimantDetailsType31",
    "ClaimantDetailsType37",
    "ClaimantType",
    "ClassDescriptionDetailsType",
    "ClassDescriptionType",
    "ClassificationTermDetailsType",
    "ClassificationTermDetailsType4",
    "ClassificationTermStatusType",
    "ClassificationTermType",
    "ContactInformationDetailsType",
    "CorrespondenceAddressKeyType",
    "CorrespondenceAddressType",
    "DecisionCaseRelationDetailsType",
    "DecisionCaseRelationType",
    "DecisionDetailsType",
    "DecisionEventDetailsType",
    "DecisionEventType",
    "DecisionType",
    "DesignatedCountryDetailsType",
    "DesignatedCountryDetailsType44",
    "DesignatedCountryType",
    "DivisionalApplicationDetailsType",
    "DocumentIncludedDetailsType",
    "DocumentType",
    "EarlierMarkDetailsType",
    "EarlierMarkType",
    "EntitlementDomiciledType",
    "EntitlementEstablishmentType",
    "EntitlementType",
    "ExhibitionPriorityDetailsType",
    "ExhibitionPriorityType",
    "FormattedAddressType",
    "FormattedNameAddressType",
    "FormattedNameType",
    "FreeFormatAddressDetailsType",
    "FreeFormatAddressType",
    "FreeFormatNameDetailsType",
    "FreeFormatNameType",
    "GoodsServicesDetailsType",
    "GoodsServicesLimitationDetailsType",
    "GoodsServicesLimitationDetailsType27",
    "GoodsServicesLimitationDetailsType42",
    "GoodsServicesLimitationType",
    "GoodsServicesType",
    "HolderDetailsType",
    "HolderDetailsType41",
    "IdentifierType",
    "KeyType",
    "LicenceDetailsType",
    "LicenceDocumentDetailsType",
    "LicenceEventDetailsType",
    "LicenceEventType",
    "LicenceType",
    "LicenseeDetailsType",
    "LicenseeType",
    "LimitationClassDescriptionDetailsType",
    "LimitationCountryDetailsType",
    "LoginInformationType",
    "MarkDescriptionDetailsType",
    "MarkDisclaimerDetailsType",
    "MarkEventDetailsType",
    "MarkEventType",
    "MarkImageCategoryType",
    "MarkImageDetailsType",
    "MarkImageDetailsType45",
    "MarkImageRenditionDetailsType",
    "MarkImageRenditionType",
    "MarkImageType",
    "MarkRecordDetailsType",
    "MarkRecordDetailsType48",
    "MarkRecordRelationDetailsType",
    "MarkRecordRelationType",
    "MarkRecordType",
    "MarkSoundDetailsType",
    "MarkSoundType",
    "MarkTranscriptionType",
    "MarkTransliterationType",
    "NameType",
    "NationalMarkDetailsType",
    "NationalMarkType",
    "OpponentDetailsType",
    "OpponentType",
    "OppositionDetailsType",
    "OppositionDocumentDetailsType",
    "OppositionEventDetailsType",
    "OppositionEventType",
    "OppositionType",
    "OtherDateType",
    "PaymentDetailsType",
    "PaymentFeeDetailsType",
    "PaymentFeeType",
    "PaymentMethodType",
    "PaymentType",
    "PhoneType",
    "PreviousRegistrationDetailsType",
    "PreviousRegistrationType",
    "PriorityDetailsType",
    "PriorityType",
    "PublicationDetailsType",
    "PublicationType",
    "ReceiverDetailsType",
    "RecordChangeNameAddressType",
    "RecordDesignatedCountryDetailsType",
    "RecordDesignatedCountryDetailsType20",
    "RecordDocumentDetailsType",
    "RecordDocumentDetailsType13",
    "RecordDocumentDetailsType19",
    "RecordDocumentDetailsType26",
    "RecordDocumentDetailsType34",
    "RecordDocumentDetailsType40",
    "RecordEventDetailsType",
    "RecordEventDetailsType12",
    "RecordEventDetailsType18",
    "RecordEventDetailsType25",
    "RecordEventDetailsType33",
    "RecordEventDetailsType39",
    "RecordEventType",
    "RecordFromRegistrationDetailsType",
    "RecordLicenceType",
    "RecordNationalInternationalReplacementType",
    "RecordOppositionPeriodType",
    "RecordPublicationDetailsType",
    "RecordPublicationDetailsType15",
    "RecordPublicationDetailsType22",
    "RecordPublicationDetailsType29",
    "RecordPublicationDetailsType30",
    "RecordPublicationDetailsType36",
    "RecordPublicationDetailsType9",
    "RecordShortNotationType",
    "RecordTransferType",
    "RecordUseIntentDetailsType",
    "RegistrationShortNotationType",
    "ReimbursementDetailsType",
    "ReimbursementFeeDetailsType",
    "ReimbursementFeeType",
    "ReimbursementType",
    "RepresentationSizeType",
    "RepresentativeDetailsType",
    "RepresentativeDetailsType11",
    "RepresentativeDetailsType17",
    "RepresentativeDetailsType2",
    "RepresentativeDetailsType24",
    "RepresentativeDetailsType3",
    "RepresentativeDetailsType32",
    "RepresentativeDetailsType38",
    "RepresentativeDetailsType47",
    "RepresentativeDetailsType6",
    "RepresentativeDetailsType7",
    "RepresentativeType",
    "RequestExaminationType",
    "RequestSearchType",
    "RequestSoftwareType",
    "RespondentDetailsType",
    "RespondentType",
    "SenderDetailsType",
    "SeniorityDetailsType",
    "SeniorityType",
    "SignatoryDetailsType",
    "SignatoryType",
    "StaffDetailsType",
    "StaffType",
    "TermSynonymRelationDetailsType",
    "TermSynonymRelationType",
    "TermTranslationRelationDetailsType",
    "TermTranslationRelationType",
    "TextType",
    "TradeMarkApplicationType",
    "TradeMarkDetailsType",
    "TradeMarkDetailsType1",
    "TradeMarkDocumentDetailsType",
    "TradeMarkKeyDetailsType",
    "TradeMarkKeyDetailsType14",
    "TradeMarkKeyDetailsType21",
    "TradeMarkKeyDetailsType28",
    "TradeMarkKeyDetailsType35",
    "TradeMarkKeyDetailsType8",
    "TradeMarkType",
    "TransactionBodyType",
    "TransactionContentDetailsType",
    "TransactionDataType",
    "TransactionErrorDetailsType",
    "TransactionErrorType",
    "TransactionHeaderType",
    "TransactionType",
    "UseRightType",
    "VersionType",
    "WordMarkSpecificationType"
]
