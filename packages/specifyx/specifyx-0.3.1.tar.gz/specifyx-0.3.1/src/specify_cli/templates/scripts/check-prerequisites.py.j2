#!/usr/bin/env python3
"""
Check task prerequisites and return available documents.

Scans for design documents in the current feature directory and validates
that prerequisites are met before proceeding with task generation.

Generated by SpecifyX init command for {{ ai_assistant }}.
"""

import json
from pathlib import Path
from typing import Dict, List, Tuple

import typer
from rich.console import Console

from specify_cli.utils.script_helpers import (
    ScriptHelpers,
    echo_debug,
    echo_error,
    echo_info,
    echo_success,
)

app = typer.Typer(add_completion=False)
console = Console()


def scan_available_documents(feature_dir: Path) -> List[str]:
    """
    Scan for available design documents in the feature directory.

    This function looks for standard SpecifyX design documents and
    validates that they contain content (non-empty files).

    Scanned documents include:
    - Core planning: plan.md (required)
    - Specifications: spec.md
    - Design: data-model.md
    - Context: research.md, quickstart.md
    - Contracts: JSON/YAML files in contracts/ subdirectory

    Args:
        feature_dir: Path to the feature directory to scan

    Returns:
        List of absolute file paths for documents that exist and have content.
        Returns empty list if feature directory doesn't exist.

    Note:
        Only returns files that exist AND have size > 0 bytes.
        Contract files are included from contracts/ subdirectory if present.
    """
    available_docs = []

    # Return empty list if feature directory doesn't exist
    if not feature_dir.exists():
        return available_docs

    # Standard SpecifyX documents to check for
    docs_to_check = [
        "plan.md",  # Primary planning document (required)
        "spec.md",  # Detailed specification
        "data-model.md",  # Data structure and model definitions
        "research.md",  # Background research and analysis
        "quickstart.md",  # Getting started guide
    ]

    # Check each standard document
    for doc in docs_to_check:
        doc_path = feature_dir / doc
        if doc_path.exists() and doc_path.stat().st_size > 0:
            available_docs.append(str(doc_path.absolute()))

    # Check for contracts directory and include contract files
    contracts_dir = feature_dir / "contracts"
    if contracts_dir.exists() and contracts_dir.is_dir():
        # Look for JSON and YAML contract files
        contract_extensions = ["*.json", "*.yaml", "*.yml"]
        contract_files = []

        for extension in contract_extensions:
            contract_files.extend(list(contracts_dir.glob(extension)))

        # Only include non-empty contract files
        for contract_file in contract_files:
            if contract_file.stat().st_size > 0:
                available_docs.append(str(contract_file.absolute()))

    return available_docs


def check_prerequisites() -> Tuple[bool, Dict]:
    """
    Check prerequisites for task generation with detailed error reporting.

    Returns:
        Tuple of (success: bool, result: dict) where result contains either
        the document information on success or error details on failure.
    """
    try:
        # Initialize SpecifyX helpers
        helpers = ScriptHelpers()

        # Check if we're in a git repository
        try:
            repo_root = helpers.get_repo_root()
        except Exception as e:
            return False, {
                "error": f"Git repository error: {str(e)}. "
                f"Ensure you're in a valid git repository with git properly installed."
            }

        # Check current branch
        try:
            current_branch = helpers.get_current_branch()
            if not current_branch or current_branch == "HEAD":
                return False, {
                    "error": "Unable to determine current git branch. "
                    "Make sure you're on a named branch (not detached HEAD)."
                }
        except Exception as e:
            return False, {
                "error": f"Failed to get current git branch: {str(e)}. "
                f"Ensure git is properly configured."
            }

        # Find feature directory using ScriptHelpers
        feature_dir = helpers.find_feature_directory()
        if feature_dir is None:
            # Use expected path based on current branch
            specs_dir = repo_root / "specs"
            feature_dir = specs_dir / current_branch

        # Check if specs directory exists
        specs_dir = repo_root / "specs"
        if not specs_dir.exists():
            return False, {
                "error": f"Specs directory not found at {specs_dir}. "
                f"Create the directory structure: mkdir -p {specs_dir}"
            }

        # Scan for available documents
        available_docs = scan_available_documents(feature_dir)

        # Must have at least plan.md
        plan_path = feature_dir / "plan.md"
        if not plan_path.exists():
            # Provide specific guidance based on directory existence
            if not feature_dir.exists():
                return False, {
                    "error": f"Feature directory {feature_dir} does not exist. "
                    f"Create it with: mkdir -p {feature_dir}"
                }
            else:
                return False, {
                    "error": f"Required plan.md not found in {feature_dir}. "
                    f"Create plan.md with your feature specification. "
                    f"This is the primary planning document needed before "
                    f"proceeding with implementation."
                }

        # Check if plan.md has content
        if plan_path.stat().st_size == 0:
            return False, {
                "error": f"plan.md exists but is empty in {feature_dir}. "
                f"Add content describing your feature specification."
            }

        result = {
            "FEATURE_DIR": str(feature_dir.absolute()),
            "AVAILABLE_DOCS": available_docs,
            "REQUIRED_DOCS": ["plan.md"],
            "OPTIONAL_DOCS": [
                "data-model.md",
                "contracts/",
                "research.md",
                "quickstart.md",
            ],
            "CURRENT_BRANCH": current_branch,
            "REPO_ROOT": str(repo_root.absolute()),
        }

        return True, result

    except PermissionError as e:
        return False, {
            "error": f"Permission denied accessing files: {e}. "
            f"Check file permissions in the repository."
        }
    except FileNotFoundError as e:
        return False, {
            "error": f"Required file or directory not found: {e}. "
            f"Ensure you're running from the correct directory."
        }
    except Exception as e:
        return False, {
            "error": f"Unexpected error during prerequisites check: {str(e)}. "
            f"Use --verbose for more details."
        }


@app.command()
def check(
    json_mode: bool = typer.Option(False, "--json", help="Output in JSON format"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Show detailed output"),
    quiet: bool = typer.Option(
        False, "--quiet", "-q", help="Suppress informational messages"
    ),
    require_spec: bool = typer.Option(
        False, "--require-spec", help="Require spec.md to be present"
    ),
    check_contracts: bool = typer.Option(
        False, "--check-contracts", help="Validate contract files"
    ),
    debug: bool = typer.Option(False, "--debug", help="Enable debug output"),
):
    """Check task prerequisites and return available design documents for {{ project_name }}.

    Scans for design documents in the current feature directory and validates
    that prerequisites are met before proceeding with task generation.

    Examples:
        specifyx run check-prerequisites
        specifyx run check-prerequisites --json
        specifyx run check-prerequisites --require-spec

    Note: If 'specifyx' is not found, try: uvx specifyx run check-prerequisites
    """
    # Validate argument combinations
    if quiet and verbose:
        echo_error("--quiet and --verbose are mutually exclusive")
        raise typer.Exit(1)

    try:
        echo_debug("Starting prerequisites check", debug)

        # Run the main check
        success, result = check_prerequisites()

        # Add additional validation if requested
        if success and require_spec:
            feature_dir = Path(result["FEATURE_DIR"])
            spec_path = feature_dir / "spec.md"
            if not spec_path.exists():
                success = False
                result = {"error": f"Required spec.md not found in {feature_dir}"}

        if success and check_contracts:
            feature_dir = Path(result["FEATURE_DIR"])
            contracts_dir = feature_dir / "contracts"
            if contracts_dir.exists():
                for contract_file in contracts_dir.glob("*.json"):
                    try:
                        max_size = 10 * 1024 * 1024  # 10MB safety limit
                        if contract_file.stat().st_size > max_size:
                            success = False
                            result = {
                                "error": (
                                    f"Contract file {contract_file} exceeds size limit"
                                )
                            }
                            break

                        with open(contract_file, "r", encoding="utf-8") as f:
                            json.load(f)
                    except json.JSONDecodeError as e:
                        success = False
                        result = {"error": f"Invalid JSON in {contract_file}: {e}"}
                        break
                    except (OSError, MemoryError) as e:
                        success = False
                        result = {"error": f"Failed to read {contract_file}: {e}"}
                        break

        # Output results
        if json_mode:
            print(json.dumps(result, indent=2 if verbose else None))
        else:
            if success:
                if not quiet:
                    echo_success("Prerequisites Check: PASSED", quiet, json_mode)
                    echo_info(f"Feature Directory: {result['FEATURE_DIR']}", quiet)
                    if result["AVAILABLE_DOCS"]:
                        echo_info(
                            f"Available Documents ({len(result['AVAILABLE_DOCS'])}):",
                            quiet,
                        )
                        for doc in result["AVAILABLE_DOCS"]:
                            echo_info(f"  ✓ {Path(doc).name}", quiet)
                    else:
                        echo_info("Available Documents: None found", quiet)
            else:
                echo_error(
                    f"Prerequisites Check Failed: {result.get('error', 'Unknown error')}"
                )

        if not success:
            raise typer.Exit(1)

    except Exception as e:
        if json_mode:
            print(json.dumps({"error": f"Unexpected error: {str(e)}"}))
        else:
            echo_error(f"Unexpected error: {str(e)}")
        echo_debug(f"Exception details: {type(e).__name__}: {e}", debug)
        raise typer.Exit(1) from None


if __name__ == "__main__":
    app()
