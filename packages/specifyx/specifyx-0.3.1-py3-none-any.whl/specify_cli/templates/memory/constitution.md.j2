# {{ project_name | title }} Constitution

## Core Principles

### I. Spec-Driven Development
- Every feature starts with a specification
- Implementation follows: Specify → Clarify → Plan → Tasks → Analyze → Implement
- No code without user-approved specifications
- Clear acceptance criteria required for all features

### II. Template-Based Consistency
- All specifications, plans, and tasks follow standardized templates
- Templates ensure consistent variable substitution
- Project structure maintained across all features
- Documentation generated from templates stays current

### III. Test-First Implementation (NON-NEGOTIABLE)
- TDD mandatory: Tests written → User approved → Tests fail → Then implement
- Red-Green-Refactor cycle strictly enforced
- Integration tests required for new services and API changes
- Contract tests validate all external interfaces

### IV. AI Assistant Integration
{% if assistant_memory_configuration -%}
{{ assistant_memory_configuration }}
{% else -%}
- Python scripts provide cross-platform automation
- Templates include patterns for AI workflow integration
- Extensible structure for future AI assistant features
{% endif %}

### V. Cross-Platform Python Implementation
- Python scripts replace bash dependencies for Windows compatibility
- SpecifyX utilities imported for consistency and code reuse
- Error handling and validation built into all generated scripts
- JSON output modes for programmatic integration

## Development Workflow

### Branch Naming Standards
{% if branch_pattern -%}
- Branch pattern: `{{ branch_pattern }}`
- Spec directories use numbered format (001-feature-name)
- Feature numbers increment automatically for proper ordering
{% else -%}
- Default branch pattern: `001-feature-name`
- Spec directories match branch names for consistency
- Sequential numbering ensures proper feature ordering
- Custom patterns can be configured per project
{% endif %}

### File Organization
- Configuration: `.specify/config.toml` (TOML format)
- Templates: `.specify/templates/` (user customization)
- Scripts: `.specify/scripts/` (executable permissions)
- Memory: `.specify/memory/` (project documentation)
{% if assistant_context_file_path -%}
- Context: `{{ assistant_context_file_path }}` (AI-specific)
{% endif %}
{% if assistant_command_prefix -%}
- Commands use `{{ assistant_command_prefix }}` prefix
{% endif %}

### Quality Gates
- All generated files must pass validation before use
- Templates must render without errors
- Python scripts must execute successfully
- Git operations must complete cleanly
- User prompts must validate input before processing

## Technology Standards

### Template Processing
- Jinja2 templates with AI-aware conditional logic
- One template generates exactly one target file
- Variable substitution for project context and user preferences
- Template inheritance discouraged in favor of composition
- Runtime templates stay as .j2 for dynamic generation

### Script Implementation
- Python 3.11+ compatibility required
- SpecifyX service imports for consistency
- Argparse for command-line interface
- JSON output modes for automation
- Proper error handling with meaningful messages

### Configuration Management
- TOML format for all configuration files
- Project-specific settings in `.specify/config.toml`
- No global configuration dependencies
- ConfigService integration for validation
- Branch naming patterns and AI assistant preferences

## Governance

- Constitution supersedes all generated code and templates
- Amendments require template updates and regeneration
- Project-specific overrides allowed through configuration
- Use generated scripts for runtime development guidance
- AI assistant commands must follow constitutional principles

**Version**: 1.0.0 | **Generated by**: SpecifyX {{ ai_assistant }} template