# Tasks: {{ feature_name | title }}

**Input**: Design documents from `{{ feature_dir | default('specs/' + spec_number + '-' + feature_name) }}/`
**Prerequisites**: plan.md (required){% if 'research.md' in available_documents %}, research.md{% endif %}{% if 'data-model.md' in available_documents %}, data-model.md{% endif %}{% if 'contracts/' in available_documents %}, contracts/{% endif %}

## Execution Flow (main)
```
1. Load plan.md from feature directory
   → If not found: ERROR "No implementation plan found"
   → Extract: tech stack, libraries, structure
2. Load optional design documents:
   → data-model.md: Extract entities → model tasks
   → contracts/: Each file → contract test task
   → research.md: Extract decisions → setup tasks
3. Generate tasks by category:
   → Setup: project init, dependencies, linting
   → Tests: contract tests, integration tests
   → Core: models, services, CLI commands
   → Integration: DB, middleware, logging
   → Polish: unit tests, performance, docs
4. Apply task rules:
   → Different files = mark [P] for parallel
   → Same file = sequential (no [P])
   → Tests before implementation (TDD)
5. Number tasks sequentially (T001, T002...)
6. Generate dependency graph
7. Create parallel execution examples
8. Validate task completeness:
   → All contracts have tests?
   → All entities have models?
   → All endpoints implemented?
9. Return: SUCCESS (tasks ready for execution)
```

## Format: `[ID] [P?] Description`
- **[P]**: Can run in parallel (different files, no dependencies)
- Include exact file paths in descriptions

## Path Conventions
- **Single project**: `src/`, `tests/` at repository root
- **Web app**: `backend/src/`, `frontend/src/`
- **Mobile**: `api/src/`, `ios/src/` or `android/src/`
- Paths shown below assume single project - adjust based on plan.md structure

## Phase 3.1: Setup
- [ ] T001 Create project structure per implementation plan
- [ ] T002 Initialize {{ project_name }} project with required dependencies{% if tech_stack %} ({{ tech_stack | join(', ') }}){% endif %}
- [ ] T003 [P] Configure linting and formatting tools

## Phase 3.2: Tests First (TDD) ⚠️ MUST COMPLETE BEFORE 3.3
**CRITICAL: These tests MUST be written and MUST FAIL before ANY implementation**
{% if contracts %}
{%- for contract in contracts %}
- [ ] T{{ '%03d' | format(loop.index + 3) }} [P] Contract test for {{ contract }} in tests/contract/test_{{ contract | replace('.json', '') | replace('.yaml', '') | replace('.yml', '') }}.py
{%- endfor %}
{% else %}
- [ ] T004 [P] Write integration tests based on user stories
{% endif %}
{% if test_scenarios %}
{%- for scenario in test_scenarios %}
- [ ] T{{ '%03d' | format(loop.index + 10) }} [P] Integration test {{ scenario }} in tests/integration/test_{{ scenario | lower | replace(' ', '_') }}.py
{%- endfor %}
{% else %}
- [ ] T005 [P] Integration test main workflow in tests/integration/test_workflow.py
{% endif %}

## Phase 3.3: Core Implementation (ONLY after tests are failing)
{% if entities %}
{%- for entity in entities %}
- [ ] T{{ '%03d' | format(loop.index + 20) }} [P] {{ entity | title }} model in src/models/{{ entity | lower }}.py
- [ ] T{{ '%03d' | format(loop.index + 30) }} [P] {{ entity | title }}Service in src/services/{{ entity | lower }}_service.py
{%- endfor %}
{% else %}
- [ ] T021 [P] Core business logic implementation
- [ ] T022 [P] Service layer implementation
{% endif %}
{% if contracts %}
{%- for contract in contracts %}
- [ ] T{{ '%03d' | format(loop.index + 40) }} API endpoint implementation for {{ contract }}
{%- endfor %}
{% endif %}
- [ ] T050 Input validation and sanitization
- [ ] T051 Error handling and logging

## Phase 3.4: Integration
- [ ] T015 Connect UserService to DB
- [ ] T016 Auth middleware
- [ ] T017 Request/response logging
- [ ] T018 CORS and security headers

## Phase 3.5: Polish
- [ ] T019 [P] Unit tests for validation in tests/unit/test_validation.py
- [ ] T020 Performance tests (<200ms)
- [ ] T021 [P] Update docs/api.md
- [ ] T022 Remove duplication
- [ ] T023 Run manual-testing.md

## Dependencies
- Tests (T004-T007) before implementation (T008-T014)
- T008 blocks T009, T015
- T016 blocks T018
- Implementation before polish (T019-T023)

## Parallel Example
```
# Launch T004-T007 together:
Task: "Contract test POST /api/users in tests/contract/test_users_post.py"
Task: "Contract test GET /api/users/{id} in tests/contract/test_users_get.py"
Task: "Integration test registration in tests/integration/test_registration.py"
Task: "Integration test auth in tests/integration/test_auth.py"
```

## Notes
- [P] tasks = different files, no dependencies
- Verify tests fail before implementing
- Commit after each task
- Avoid: vague tasks, same file conflicts

## Task Generation Rules
*Applied during main() execution*

1. **From Contracts**:
   - Each contract file → contract test task [P]
   - Each endpoint → implementation task
   
2. **From Data Model**:
   - Each entity → model creation task [P]
   - Relationships → service layer tasks
   
3. **From User Stories**:
   - Each story → integration test [P]
   - Quickstart scenarios → validation tasks

4. **Ordering**:
   - Setup → Tests → Models → Services → Endpoints → Polish
   - Dependencies block parallel execution

## Validation Checklist
*GATE: Checked by main() before returning*

- [ ] All contracts have corresponding tests
- [ ] All entities have model tasks
- [ ] All tests come before implementation
- [ ] Parallel tasks truly independent
- [ ] Each task specifies exact file path
- [ ] No task modifies same file as another [P] task