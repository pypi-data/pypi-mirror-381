Metadata-Version: 2.4
Name: eca-lib
Version: 0.1.8
Summary: Uma biblioteca Python para implementar a arquitetura de Engenharia de Contexto Aumentada (ECA).
Author-email: coagentis <contato@coagentis.com.br>
Project-URL: Homepage, https://github.com/coagentis/eca-lib
Project-URL: Bug Tracker, https://github.com/coagentis/eca-lib/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: redis
Requires-Dist: redis>=5.0.0; extra == "redis"
Provides-Extra: postgres
Requires-Dist: psycopg2-binary>=2.9.0; extra == "postgres"
Requires-Dist: pgvector>=0.2.0; extra == "postgres"
Requires-Dist: SQLAlchemy>=2.0.0; extra == "postgres"
Provides-Extra: all
Requires-Dist: eca-lib[redis]; extra == "all"
Requires-Dist: eca-lib[postgres]; extra == "all"
Dynamic: license-file

# üß† ECA-Lib: Engenharia de Contexto Aumentada

![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)
![PyPI version](https://img.shields.io/pypi/v/eca-lib.svg)
![Status](https://img.shields.io/badge/status-em%20desenvolvimento-orange)

**ECA-Lib** √© a implementa√ß√£o da arquitetura ECA, um paradigma para projetar e construir aplica√ß√µes de IA stateful (com estado) sobre Grandes Modelos de Linguagem. A biblioteca fornece um sistema estruturado para a engenharia de contexto, permitindo que LLMs operem com mem√≥ria de longo prazo, capacidade de multitarefa e **racioc√≠nio cognitivo avan√ßado**.

---

## üöÄ **Novidade: Sistema Cognitivo com Grafos de Conhecimento**

A vers√£o mais recente da ECA-Lib introduz capacidades cognitivas revolucion√°rias:

* üß† **Grafos de Conhecimento**: Representa√ß√£o estruturada de conceitos e suas rela√ß√µes
* ‚ö° **Propaga√ß√£o de Ativa√ß√£o**: Simula√ß√£o de processos cognitivos reais
* üéØ **Aten√ß√£o Cognitiva**: Vai al√©m do RAG tradicional com racioc√≠nio baseado em rela√ß√µes
* üóÑÔ∏è **PostgreSQL + pgvector**: Persist√™ncia eficiente com busca sem√¢ntica

### üí• O Problema: A Natureza Stateless dos LLMs e sua Amn√©sia

Grandes Modelos de Linguagem (LLMs) s√£o incrivelmente poderosos, mas operam com uma limita√ß√£o fundamental: por natureza, eles s√£o stateless (sem estado). Eles n√£o possuem mem√≥ria entre as intera√ß√µes, o que torna um desafio construir aplica√ß√µes de IA stateful que evoluem, aprendem com o passado e gerenciam tarefas complexas de forma cont√≠nua.

### ‚ú® A Solu√ß√£o: Arquitetura ECA + Sistema Cognitivo

A **ECA (Engenharia de Contexto Aumentada)** √© uma arquitetura de orquestra√ß√£o que resolve esse problema. Funciona como um "exoesqueleto" cognitivo para LLMs, fornecendo um sistema estruturado para a engenharia de contexto, onde a identidade, a mem√≥ria e o estado s√£o tratados como componentes de primeira classe.

**Agora com capacidades cognitivas avan√ßadas:**

* ‚úÖ **Gerenciamento de Identidade:** M√∫ltiplas personas com identidades, objetivos e regras pr√≥prias
* üß† **Mem√≥ria H√≠brida e Cognitiva:** RAG tradicional + grafos de conhecimento + propaga√ß√£o de ativa√ß√£o  
* üöÄ **Racioc√≠nio Din√¢mico:** √Årea de Trabalho Cognitiva para gerenciar m√∫ltiplos contextos
* üéØ **Aten√ß√£o Inteligente:** Combina similaridade sem√¢ntica com racioc√≠nio baseado em grafo
* ‚öôÔ∏è **Orientado por Dados:** Configura√ß√£o flex√≠vel via adaptadores

### Diagrama da Arquitetura Cognitiva
```mermaid
graph TD
    subgraph "Usu√°rio"
        A[üë©‚Äçüíª Usu√°rio]
    end

    subgraph "Sistema ECA Cognitivo"
        B(Orquestrador Cognitivo)
        C{Base de Conhecimento}
        G[üß† Grafo Cognitivo]
        P[‚ö° Propaga√ß√£o de Ativa√ß√£o]
        D[ÔøΩ LLM]

        A -- 1- Entrada --> B
        B -- 2- Busca Contexto --> C
        B -- 3- Ativa Conceitos --> G
        G -- 4- Propaga Ativa√ß√£o --> P
        P -- 5- Retorna Ativa√ß√£o --> B
        C -- 6- Retorna Mem√≥rias --> B
        B -- 7- Monta Prompt Cognitivo --> D
        D -- 8- Gera Resposta --> B
        B -- 9- Entrega Resposta --> A
    end

    style G fill:#FF6B6B,stroke:#333,stroke-width:2px
    style P fill:#4ECDC4,stroke:#333,stroke-width:2px
    style C fill:#DB7093,stroke:#333,stroke-width:2px
```

### A Analogia do Chef de Cozinha: Entendendo a `eca-lib`

Para explicar de forma simples como a `eca-lib` funciona, vamos usar uma analogia: imagine um Chef de Cozinha em seu ambiente de trabalho.

#### Os Personagens Principais

  * **O Chef de Cozinha √© o LLM** (o motor da IA, como GPT ou Llama). Ele √© quem tem a criatividade para criar as respostas.
  * **A Cozinha Profissional √© a `eca-lib`**. Ela √© todo o sistema organizado (ferramentas, mem√≥rias, processos) que permite ao Chef trabalhar de forma eficiente e inteligente.

-----

#### O Processo Completo: Do Pedido ao Prato Final

**1. O Pedido Chega (O `prompt` do Usu√°rio)**

  * *Nesta etapa, o pedido que um cliente faz no restaurante √© o comando que o usu√°rio envia para a IA.*

Um cliente faz um pedido, que pode ser simples ("Quero uma salada") ou complexo ("Quero o prato do dia, mas sou al√©rgico a nozes").

**2. O Chef Usa Sua Mem√≥ria (A `Mem√≥ria H√≠brida` da lib)**

  * *Aqui, a mem√≥ria do Chef representa como a `eca-lib` gerencia informa√ß√µes de curto e longo prazo.*

O Chef precisa de dois tipos de mem√≥ria para trabalhar:

  * **Mem√≥ria de Curto Prazo (Hist√≥rico da Conversa):** Ele olha seu **bloco de anota√ß√µes** para lembrar detalhes recentes. Ex: "Ok, cliente da mesa 4, sem nozes".
  * **Mem√≥ria de Longo Prazo (Base de Conhecimento / RAG):** Para pratos complexos, ele consulta seu **livro de receitas**. Ele n√£o inventa, ele recupera a informa√ß√£o correta para garantir a qualidade.

**3. O Chef Organiza o Trabalho (A `√Årea de Trabalho Cognitiva`)**

  * *A bancada de trabalho do Chef √© como a `eca-lib` gerencia m√∫ltiplas tarefas sem perder o foco.*

A bancada do Chef √© super organizada. Isso permite que ele fa√ßa v√°rias coisas ao mesmo tempo. Por exemplo, ele pode deixar um fil√© descansando (Tarefa A) enquanto prepara uma salada (Tarefa B), e depois voltar ao fil√© sem esquecer em que ponto parou.

**4. O Segredo do Chef (O `Achatamento de Tokens`)**

  * *Esta √© a t√©cnica que a `eca-lib` usa para evitar que o contexto fique grande demais, resumindo as informa√ß√µes sem perder o sentido.*

Com o tempo, a bancada do Chef pode ficar cheia de anota√ß√µes. Para n√£o se perder, ele cria uma **"redu√ß√£o"**: pega uma grande quantidade de caldo (o hist√≥rico longo e verboso da conversa) e ferve lentamente, evaporando a "√°gua" (redund√¢ncias) para criar um molho concentrado e rico em sabor (um resumo coeso). Isso mant√©m a ess√™ncia, mas ocupa menos espa√ßo na bancada (a janela de contexto).

**5. O Chef Usa Suas Ferramentas (Os `Adaptadores de Produ√ß√£o`)**

  * *Os equipamentos e a despensa da cozinha s√£o os bancos de dados que a `eca-lib` usa para guardar e buscar informa√ß√µes.*

Um Chef precisa de acesso r√°pido aos ingredientes:

  * **A Despensa Organizada (PostgreSQL/pgvector):** √â o estoque principal, onde tudo de longo prazo √© guardado de forma organizada.
  * **O Balc√£o R√°pido (Redis):** S√£o os ingredientes j√° cortados e prontos para uso imediato, para agilidade m√°xima.

**6. O Prato √© Servido (A Resposta Final da IA)**

  * *O prato final √© a resposta inteligente e completa que a IA entrega ao usu√°rio.*

Depois de usar suas mem√≥rias, sua bancada organizada e suas ferramentas, o Chef entrega um prato bem-executado que atende a tudo que o cliente pediu.

-----

#### Tabela Resumo

| Conceito da `eca-lib` | Analogia na Cozinha |
| :---------------------- | :-------------------- |
| **LLM** | O Chef de Cozinha |
| **`eca-lib`** | A Cozinha Profissional |
| **Prompt do Usu√°rio** | O Pedido do Cliente |
| **Mem√≥ria de Curto Prazo** | Bloco de Anota√ß√µes do Chef |
| **Mem√≥ria de Longo Prazo (RAG)** | Livro de Receitas |
| **√Årea de Trabalho Cognitiva** | Bancada de Trabalho Organizada|
| **Achatamento de Tokens** | Criar um "Molho de Redu√ß√£o" |
| **PostgreSQL / Vetorial** | Despensa Principal |
| **Redis / Cache** | Ingredientes de Acesso R√°pido |
| **Resposta Final da IA** | O Prato Servido ao Cliente |


Assim, a `eca-lib` n√£o √© apenas o Chef, mas toda a cozinha de alta performance que o permite criar respostas complexas e contextuais de forma consistente e escal√°vel.

### üì¶ Instala√ß√£o

```bash
pip install eca-lib
```
*(Nota: O pacote est√° em processo de publica√ß√£o no PyPI)*

### **üìä Sistema Cognitivo (Opcional)**

Para usar as capacidades cognitivas avan√ßadas com grafos de conhecimento:

```bash
# Depend√™ncias adicionais
pip install psycopg2-binary

# Configurar PostgreSQL com pgvector
# Veja docs/COGNITIVE_SETUP.md para instru√ß√µes completas
```

### **Status Atual e Instala√ß√£o (Vers√£o Beta)**

O projeto est√° em fase de testes p√∫blicos. Agradecemos seu interesse em nos ajudar a lapidar a vers√£o final!

A biblioteca est√° atualmente dispon√≠vel no **TestPyPI**, o reposit√≥rio oficial para pacotes em teste. Para instalar, por favor, utilize o comando completo abaixo:

```bash
pip install --index-url https://test.pypi.org/simple/ --no-deps eca-lib
```

A publica√ß√£o da vers√£o est√°vel no PyPI principal est√° planejada para breve.


### üöÄ Quick Start

Este exemplo mostra como instanciar o orquestrador e gerar um prompt din√¢mico de forma 100% autocontida.

1.  **Crie seus arquivos de dados**

    Em uma nova pasta para o seu projeto, crie os seguintes arquivos com o conte√∫do exato abaixo:

      * **`personas.json`** - (Define as personalidades da IA)

        ```json
        [
          {
            "id": "fiscal",
            "name": "√ÅBACO",
            "semantic_description": "An√°lise de documentos fiscais, notas fiscais, impostos como ICMS, IPI, conformidade tribut√°ria.",
            "persona_config": {
              "persona": "Voc√™ √© √ÅBACO, um assistente de IA especialista em an√°lise fiscal. Voc√™ √© objetivo, eficiente e baseado em dados.",
              "objective": "Analisar documentos fiscais, garantir conformidade e identificar inconsist√™ncias.",
              "golden_rules": [
                "A precis√£o √© mais importante que a velocidade.",
                "Nunca presuma dados amb√≠guo; sempre sinalize para revis√£o humana."
              ]
            }
          },
          {
            "id": "product_catalog",
            "name": "CAT√ÅLOGO",
            "semantic_description": "Gerenciamento de cat√°logo, cadastro de novos produtos, SKUs, organiza√ß√£o de itens.",
            "persona_config": {
              "persona": "Voc√™ √© CAT√ÅLOGO, um assistente de IA focado em manter a integridade do cadastro de produtos.",
              "objective": "Garantir a organiza√ß√£o e padroniza√ß√£o do cat√°logo.",
              "golden_rules": [
                "Verifique se o produto j√° existe antes de cadastrar um novo."
              ]
            }
          }
        ]
        ```

      * **`memories.json`** - (A base de conhecimento inicial)

        ```json
        [
          {
            "id": "mem-uuid-456",
            "domain_id": "fiscal",
            "type": "business_rule",
            "text_content": "Toda valida√ß√£o de ICMS-ST deve cruzar a informa√ß√£o com o Protocolo ICMS vigente entre os estados da opera√ß√£o."
          },
          {
            "id": "mem-uuid-789",
            "domain_id": "product_catalog",
            "type": "business_rule",
            "text_content": "O √∫ltimo c√≥digo de notebook cadastrado foi 'NB-1098'. Novos c√≥digos devem seguir a sequ√™ncia."
          }
        ]
        ```

2.  **Crie e execute o c√≥digo Python**

    Na mesma pasta, crie o arquivo **`main.py`** com o conte√∫do abaixo e depois execute os comandos.

    ```python
    # main.py

    # Importa as classes da biblioteca que voc√™ instalou com 'pip install eca-lib'
    from eca import (
        ECAOrchestrator, 
        # Os adaptadores JSON s√£o √≥timos para come√ßar rapidamente
        JSONPersonaProvider, 
        JSONMemoryProvider, 
        JSONSessionProvider
    )

    # --- 1. Configura√ß√£o dos Provedores (Adapters) ---
    # Apontamos para os arquivos que acabamos de criar.
    persona_provider = JSONPersonaProvider(file_path='personas.json')
    memory_provider = JSONMemoryProvider(
        semantic_path='memories.json', 
        episodic_path='interaction_log.json' # Este arquivo ser√° criado automaticamente
    )
    session_provider = JSONSessionProvider(
        file_path='user_sessions.json' # Este tamb√©m ser√° criado automaticamente
    )

    # --- 2. Instancia√ß√£o do Orquestrador ---
    # A biblioteca carrega o prompt padr√£o em portugu√™s automaticamente.
    orchestrator = ECAOrchestrator(
        persona_provider=persona_provider,
        memory_provider=memory_provider,
        session_provider=session_provider,
        knowledge_base_path='.' # Usaremos o diret√≥rio atual
    )

    print("‚úÖ Orquestrador ECA pronto para uso!")

    # --- 3. Simula√ß√£o de uma Conversa ---
    user_id = "ana_paula"
    user_input = "Preciso cadastrar um novo notebook."

    print(f"\nüó£Ô∏è  INPUT DO USU√ÅRIO: '{user_input}'")

    # Gera o prompt final, pronto para ser enviado a um LLM
    final_prompt = orchestrator.generate_final_prompt(user_id, user_input)

    print("\n‚ú® PROMPT DIN√ÇMICO GERADO PELA ECA-LIB: ‚ú®\n")
    print(final_prompt)
    ```

    **Comandos para executar:**

    ```bash
    # Crie e ative um ambiente virtual
    python -m venv venv
    source venv/bin/activate

    # Instale a biblioteca (a partir do PyPI, quando publicada)
    pip install eca-lib

    # Execute o script
    python main.py
    ```

### üìñ Documenta√ß√£o Completa

Para um mergulho profundo na teoria e nos detalhes da arquitetura, leia nosso **[Whitepaper de Arquitetura](ARCHITECTURE.md)**.

### ü§ù Como Contribuir

Contribui√ß√µes s√£o bem-vindas! Por favor, sinta-se √† vontade para abrir uma *issue* ou enviar um *pull request*.

### üìú Licen√ßa

Este projeto √© licenciado sob a Licen√ßa MIT. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.
