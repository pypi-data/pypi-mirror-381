Metadata-Version: 2.2
Name: geometry_utils
Version: 0.1.0
Summary: Utilities for basic computational geometry directly with numpy arrays.
Author-Email: Chris Barker <Chris.Barker@noaa.gov>
License: Creative Commons Legal Code
         
         CC0 1.0 Universal
         
             CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
             LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
             ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
             INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
             REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
             PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
             THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
             HEREUNDER.
         
         Statement of Purpose
         
         The laws of most jurisdictions throughout the world automatically confer
         exclusive Copyright and Related Rights (defined below) upon the creator
         and subsequent owner(s) (each and all, an "owner") of an original work of
         authorship and/or a database (each, a "Work").
         
         Certain owners wish to permanently relinquish those rights to a Work for
         the purpose of contributing to a commons of creative, cultural and
         scientific works ("Commons") that the public can reliably and without fear
         of later claims of infringement build upon, modify, incorporate in other
         works, reuse and redistribute as freely as possible in any form whatsoever
         and for any purposes, including without limitation commercial purposes.
         These owners may contribute to the Commons to promote the ideal of a free
         culture and the further production of creative, cultural and scientific
         works, or to gain reputation or greater distribution for their Work in
         part through the use and efforts of others.
         
         For these and/or other purposes and motivations, and without any
         expectation of additional consideration or compensation, the person
         associating CC0 with a Work (the "Affirmer"), to the extent that he or she
         is an owner of Copyright and Related Rights in the Work, voluntarily
         elects to apply CC0 to the Work and publicly distribute the Work under its
         terms, with knowledge of his or her Copyright and Related Rights in the
         Work and the meaning and intended legal effect of CC0 on those rights.
         
         1. Copyright and Related Rights. A Work made available under CC0 may be
         protected by copyright and related or neighboring rights ("Copyright and
         Related Rights"). Copyright and Related Rights include, but are not
         limited to, the following:
         
           i. the right to reproduce, adapt, distribute, perform, display,
              communicate, and translate a Work;
          ii. moral rights retained by the original author(s) and/or performer(s);
         iii. publicity and privacy rights pertaining to a person's image or
              likeness depicted in a Work;
          iv. rights protecting against unfair competition in regards to a Work,
              subject to the limitations in paragraph 4(a), below;
           v. rights protecting the extraction, dissemination, use and reuse of data
              in a Work;
          vi. database rights (such as those arising under Directive 96/9/EC of the
              European Parliament and of the Council of 11 March 1996 on the legal
              protection of databases, and under any national implementation
              thereof, including any amended or successor version of such
              directive); and
         vii. other similar, equivalent or corresponding rights throughout the
              world based on applicable law or treaty, and any national
              implementations thereof.
         
         2. Waiver. To the greatest extent permitted by, but not in contravention
         of, applicable law, Affirmer hereby overtly, fully, permanently,
         irrevocably and unconditionally waives, abandons, and surrenders all of
         Affirmer's Copyright and Related Rights and associated claims and causes
         of action, whether now known or unknown (including existing as well as
         future claims and causes of action), in the Work (i) in all territories
         worldwide, (ii) for the maximum duration provided by applicable law or
         treaty (including future time extensions), (iii) in any current or future
         medium and for any number of copies, and (iv) for any purpose whatsoever,
         including without limitation commercial, advertising or promotional
         purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
         member of the public at large and to the detriment of Affirmer's heirs and
         successors, fully intending that such Waiver shall not be subject to
         revocation, rescission, cancellation, termination, or any other legal or
         equitable action to disrupt the quiet enjoyment of the Work by the public
         as contemplated by Affirmer's express Statement of Purpose.
         
         3. Public License Fallback. Should any part of the Waiver for any reason
         be judged legally invalid or ineffective under applicable law, then the
         Waiver shall be preserved to the maximum extent permitted taking into
         account Affirmer's express Statement of Purpose. In addition, to the
         extent the Waiver is so judged Affirmer hereby grants to each affected
         person a royalty-free, non transferable, non sublicensable, non exclusive,
         irrevocable and unconditional license to exercise Affirmer's Copyright and
         Related Rights in the Work (i) in all territories worldwide, (ii) for the
         maximum duration provided by applicable law or treaty (including future
         time extensions), (iii) in any current or future medium and for any number
         of copies, and (iv) for any purpose whatsoever, including without
         limitation commercial, advertising or promotional purposes (the
         "License"). The License shall be deemed effective as of the date CC0 was
         applied by Affirmer to the Work. Should any part of the License for any
         reason be judged legally invalid or ineffective under applicable law, such
         partial invalidity or ineffectiveness shall not invalidate the remainder
         of the License, and in such case Affirmer hereby affirms that he or she
         will not (i) exercise any of his or her remaining Copyright and Related
         Rights in the Work or (ii) assert any associated claims and causes of
         action with respect to the Work, in either case contrary to Affirmer's
         express Statement of Purpose.
         
         4. Limitations and Disclaimers.
         
          a. No trademark or patent rights held by Affirmer are waived, abandoned,
             surrendered, licensed or otherwise affected by this document.
          b. Affirmer offers the Work as-is and makes no representations or
             warranties of any kind concerning the Work, express, implied,
             statutory or otherwise, including without limitation warranties of
             title, merchantability, fitness for a particular purpose, non
             infringement, or the absence of latent or other defects, accuracy, or
             the present or absence of errors, whether or not discoverable, all to
             the greatest extent permissible under applicable law.
          c. Affirmer disclaims responsibility for clearing rights of other persons
             that may apply to the Work or any use thereof, including without
             limitation any person's Copyright and Related Rights in the Work.
             Further, Affirmer disclaims responsibility for obtaining any necessary
             consents, permissions or other rights required for any use of the
             Work.
          d. Affirmer understands and acknowledges that Creative Commons is not a
             party to this document and has no duty or obligation with respect to
             this CC0 or use of the Work.
         
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Project-URL: Repository, https://github.com/NOAA-ORR-ERD/geometry_utils
Requires-Python: >=3.10
Requires-Dist: numpy
Description-Content-Type: text/x-rst

##############
geometry_utils
##############

Utilities for basic computational geometry directly with numpy arrays.


Motivation
==========

There are a number of computational geometry libraries available.
But most of them create a whole framework of objects: Points, Polygons,
MultiPolygons, etc.

But if you simply need to something simple, e.g. to check whether a point is in a polygon,
it's nice to have a set of functions to do the basic stuff on numpy arrays,
without all the overhead of a full set of geometry objects.

These functions all depend on numpy.

Some of the functions a pure (numpy) python, and some are written in Cython, or C wrapped in Cython.

Most are vectorized, for fast results. e.g. ``polygon_inside`` will check whether multiple points are in a single polygon all in compiled code.

Features
========

This is a start, and it will likely never be very comprehensive, but there are useful utilities here.

NOTE: this is all 2D euclidean geometry

* Basic polygon manipulation

* Some rectangle (bounding box) functionality


Data Structures
---------------

The goal is to not have specialized data structures, but to use "normal" numpy arrays (usually with dtype ``float64``) to represent geometrical objects.

Most functions will (like numpy itself) take standard Python data structures (such as lists) and convert to numpy arrays as needed (``np.asarray()``).

Points
......

Points are represented by a shape: ``(2,)`` array (or 2-tuple):
``(x, y)`` of type ``float64``


Multiple points
...............

Multiple points are represented by a shape: ``(N, 2)`` array:
``[(x, y), (x, y), ...]`` of type ``float64`` (or equivalent nested list).


Polygons
........

Polygons are represented by their vertixes as a shape: ``(N,2)`` array:
``[(x, y), (x, y), ...]`` of type ``float64``
(or equivalent nested list).

(Note that this is exactly the same as multiple points)

Rectangles
..........

Rectangles are axis-aligned rectangles -- suitable for use as bounding boxes, etc.

A rectangle is defined by two points: lower-left, upper-right.

Any python sequence that can be turned into a 2x2 numpy array of float64s::

    [[min_x, min_y],
     [max_x, max_y]]


Functions
---------

``polygon_inside(polygon_verts, trial_points)``
...............................................

Determine if points are inside a polygon.

``polygon_area(polygon_verts)``
...............................

Calculate the area of a polygon


``polygon_rotation(polygon_verts)``
...................................

Returns an int/bool flag indicating the "winding order" of the polygon

i.e. clockwise or anti-clockwise

``polygon_centroid(polygon_verts)``
...................................

Return the (x, y) location of the polygon centroid


``polygon_is_simple(polygon_verts)``
....................................

checks whether the polygon is simple, i.e. has any segments that cross each other.

Development
===========

This code includes Cython code -- so to work on it, you need Cython and a compiler set up to compile Python extensions. Consult the internet to see how to do that.

Once your compiler is set up and dependencies in place:

``pip install .``

Should build and install the package.

Note that if you do an editable install:

``pip isntall -e .``

The python code will be editable, but you need to rebuild if you change the Cython code.

conda
-----

All the dependencies to build and use this package are available on conda-forge.

pixi
----

This package includes a pixi setup to aid in development and building -- see the ``pixi.toml`` file.

https://pixi.sh/latest/

To use:

``pixi run shell``

Will get you a pixi shell with the dependencies installed, but not the package. You can then pip install the package.

This is helpful if you are working on the Cython code, so that you can control the install


``pixi run -e dev shell``


Will create a pixi shell with the package built and installed. You can then run the tests, change the  code, etc.

``pixi run build``

Will build and install the package.

``pixi run test``

Will build, and test the package.

``pixi run -e py310 test``

will build and test the package with python 3.10

``py311``, ``py312``, ``py313`` are also available.
