# AUTO-GENERATED: do not edit by hand
# source-schema: ptag.schema.json
# schema-sha256: c9b45273bf14e86132aab43d595b6ab722f17fdb10d3a59bac8a0f44dcc5df0c
# spec-version: 0.2.5
# generated by datamodel-codegen:
#   filename:  ptag.schema.json

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, ConfigDict, Field, RootModel


class AcctAge(Enum):
    field_0_7d = "0-7d"
    field_8_30d = "8-30d"
    field_1_6m = "1-6m"
    field_6_24m = "6-24m"
    field_24m_ = "24m+"


class AcctType(Enum):
    person = "person"
    org = "org"
    media = "media"
    public_official = "public_official"
    unverified = "unverified"
    declared_automation = "declared_automation"


class AutomationFlag(Enum):
    manual = "manual"
    scheduled = "scheduled"
    api_client = "api_client"
    declared_bot = "declared_bot"


class PostKind(Enum):
    original = "original"
    reshare = "reshare"
    quote = "quote"
    reply = "reply"


class ClientFamily(Enum):
    web = "web"
    mobile = "mobile"
    third_party_api = "third_party_api"


class MediaProvenance(Enum):
    c2pa_present = "c2pa_present"
    hash_only = "hash_only"
    none = "none"


class ISO3166CountryOrSubdivision(RootModel[str]):
    root: str = Field(
        ...,
        description="Uppercase ISO-3166-1 alpha-2 country code, optionally with ISO-3166-2 subdivision for populations >1M (e.g., US, US-CA). Limited to country-level for privacy.",
        pattern="^[A-Z]{2}(-[A-Z]{1,3})?$",
        title="ISO 3166 Country or Subdivision",
    )


class HexHash(RootModel[str]):
    root: str = Field(
        ...,
        description="Privacy-preserving rolling hash for duplicate detection. Fixed 8-character hex values for standard implementations, with optional platform-configurable length (8-16 characters) for high-volume environments to reduce collision probability, salted daily to prevent cross-dataset correlation.",
        max_length=16,
        min_length=8,
        pattern="^[a-f0-9]{8,16}$",
        title="Hex Hash",
    )


class PTag(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    acct_age_bucket: AcctAge = Field(
        ...,
        description="Account age bucketed for privacy: e.g., '0-7d', '8-30d', '1-6m', '6-24m', '24m+'.",
    )
    acct_type: AcctType = Field(..., description="Declared identity account type.")
    automation_flag: AutomationFlag = Field(
        ...,
        description="Posting method with clear boundaries: manual (direct user interaction), scheduled (user-configured delayed posting), api_client (third-party tools like Buffer/Hootsuite), declared_bot (automated systems with explicit bot declaration).",
    )
    post_kind: PostKind = Field(
        ..., description="Content relationship: original, reshare, quote, reply."
    )
    client_family: ClientFamily = Field(
        ..., description="Application class: web, mobile, third_party_api."
    )
    media_provenance: MediaProvenance = Field(
        ..., description="Embedded authenticity: c2pa_present, hash_only, none."
    )
    dedup_hash: HexHash = Field(
        ...,
        description="Privacy-preserving rolling hash for duplicate detection (8-16 hex characters, salted daily to prevent cross-dataset correlation).",
    )
    content_digest: HexHash | None = Field(
        None,
        description="Optional privacy-preserving content similarity hash for near-duplicate detection. Fixed 12-character hex values for standard implementations, with platform-configurable length (8-16 characters). Salted daily to prevent cross-dataset correlation. Field may be omitted for platforms preferring exact-match detection.",
    )
    origin_hint: ISO3166CountryOrSubdivision | None = Field(
        None,
        description="Optional geographic origin limited to country-level (ISO country codes) or major subdivisions only for populations >1M, e.g., 'US', 'US-CA', where lawful.",
    )
