# AUTO-GENERATED: do not edit by hand
# source-schema: ptag_series.schema.json
# schema-sha256: c990dec887ccae7898ab152e1220a7f96ca947aa4f91ea4ec07cda0776354259
# spec-version: 0.2.5
# generated by datamodel-codegen:
#   filename:  ptag_series.schema.json

from __future__ import annotations

from enum import Enum

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class Probability(RootModel[float]):
    root: float = Field(..., ge=0.0, le=1.0)


class PTagInterval(Enum):
    minute = "minute"
    field_5_minute = "5-minute"
    field_15_minute = "15-minute"
    hour = "hour"


class CoordinationSignals(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    burst_score: Probability = Field(..., description="Burstiness indicator (0-1).")
    synchrony_index: Probability = Field(..., description="Temporal synchrony indicator (0-1).")
    duplication_clusters: int = Field(
        ..., description="Count of duplicate/near-duplicate content clusters.", ge=0
    )


class PTagSeriesPoint(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    interval_start: AwareDatetime = Field(
        ...,
        description="Start of this aggregation interval in UTC (ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ). Each point represents data from interval_start (inclusive) to the next interval boundary (exclusive).",
    )
    volume: int = Field(..., description="Total posts observed in this interval.", ge=0)
    reshare_ratio: Probability = Field(
        ..., description="Fraction of posts that are reshares in this interval."
    )
    recycled_content_rate: Probability = Field(
        ...,
        description="Estimated fraction of posts that recycle prior content (hash/duplicate-based).",
    )
    acct_age_mix: dict[str, Probability] = Field(
        ...,
        description="Distribution over account-age buckets; values typically sum to ~1.0.",
    )
    automation_mix: dict[str, Probability] = Field(
        ...,
        description="Distribution over automation flags; values typically sum to ~1.0.",
    )
    client_mix: dict[str, Probability] = Field(
        ...,
        description="Distribution over client families; values typically sum to ~1.0.",
    )
    coordination_signals: CoordinationSignals = Field(
        ..., description="Per-interval coordination indicators."
    )


class PTagSeries(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    topic: str = Field(
        ...,
        description="Topic key (e.g., hashtag) this PTagSeries describes.",
        min_length=1,
    )
    generated_at: AwareDatetime = Field(
        ..., description="UTC timestamp when this PTagSeries was generated (ISO 8601)."
    )
    interval: PTagInterval = Field(..., description="Aggregation interval for time-series data.")
    points: list[PTagSeriesPoint] = Field(default_factory=list)  # type: ignore
