# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cxtgeo
else:
    import _cxtgeo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


euclid_length_cb_ptr = _cxtgeo.euclid_length_cb_ptr
euclid_length = _cxtgeo.euclid_length
horizontal_length_cb_ptr = _cxtgeo.horizontal_length_cb_ptr
horizontal_length = _cxtgeo.horizontal_length
east_west_vertical_length_cb_ptr = _cxtgeo.east_west_vertical_length_cb_ptr
east_west_vertical_length = _cxtgeo.east_west_vertical_length
north_south_vertical_length_cb_ptr = _cxtgeo.north_south_vertical_length_cb_ptr
north_south_vertical_length = _cxtgeo.north_south_vertical_length
x_projection_cb_ptr = _cxtgeo.x_projection_cb_ptr
x_projection = _cxtgeo.x_projection
y_projection_cb_ptr = _cxtgeo.y_projection_cb_ptr
y_projection = _cxtgeo.y_projection
z_projection_cb_ptr = _cxtgeo.z_projection_cb_ptr
z_projection = _cxtgeo.z_projection

def new_intpointer():
    return _cxtgeo.new_intpointer()

def copy_intpointer(value):
    return _cxtgeo.copy_intpointer(value)

def delete_intpointer(obj):
    return _cxtgeo.delete_intpointer(obj)

def intpointer_assign(obj, value):
    return _cxtgeo.intpointer_assign(obj, value)

def intpointer_value(obj):
    return _cxtgeo.intpointer_value(obj)

def new_longpointer():
    return _cxtgeo.new_longpointer()

def copy_longpointer(value):
    return _cxtgeo.copy_longpointer(value)

def delete_longpointer(obj):
    return _cxtgeo.delete_longpointer(obj)

def longpointer_assign(obj, value):
    return _cxtgeo.longpointer_assign(obj, value)

def longpointer_value(obj):
    return _cxtgeo.longpointer_value(obj)

def new_floatpointer():
    return _cxtgeo.new_floatpointer()

def copy_floatpointer(value):
    return _cxtgeo.copy_floatpointer(value)

def delete_floatpointer(obj):
    return _cxtgeo.delete_floatpointer(obj)

def floatpointer_assign(obj, value):
    return _cxtgeo.floatpointer_assign(obj, value)

def floatpointer_value(obj):
    return _cxtgeo.floatpointer_value(obj)

def new_doublepointer():
    return _cxtgeo.new_doublepointer()

def copy_doublepointer(value):
    return _cxtgeo.copy_doublepointer(value)

def delete_doublepointer(obj):
    return _cxtgeo.delete_doublepointer(obj)

def doublepointer_assign(obj, value):
    return _cxtgeo.doublepointer_assign(obj, value)

def doublepointer_value(obj):
    return _cxtgeo.doublepointer_value(obj)

def new_charpointer():
    return _cxtgeo.new_charpointer()

def copy_charpointer(value):
    return _cxtgeo.copy_charpointer(value)

def delete_charpointer(obj):
    return _cxtgeo.delete_charpointer(obj)

def charpointer_assign(obj, value):
    return _cxtgeo.charpointer_assign(obj, value)

def charpointer_value(obj):
    return _cxtgeo.charpointer_value(obj)

def new_intarray(nelements):
    return _cxtgeo.new_intarray(nelements)

def delete_intarray(ary):
    return _cxtgeo.delete_intarray(ary)

def intarray_getitem(ary, index):
    return _cxtgeo.intarray_getitem(ary, index)

def intarray_setitem(ary, index, value):
    return _cxtgeo.intarray_setitem(ary, index, value)

def new_longarray(nelements):
    return _cxtgeo.new_longarray(nelements)

def delete_longarray(ary):
    return _cxtgeo.delete_longarray(ary)

def longarray_getitem(ary, index):
    return _cxtgeo.longarray_getitem(ary, index)

def longarray_setitem(ary, index, value):
    return _cxtgeo.longarray_setitem(ary, index, value)

def new_floatarray(nelements):
    return _cxtgeo.new_floatarray(nelements)

def delete_floatarray(ary):
    return _cxtgeo.delete_floatarray(ary)

def floatarray_getitem(ary, index):
    return _cxtgeo.floatarray_getitem(ary, index)

def floatarray_setitem(ary, index, value):
    return _cxtgeo.floatarray_setitem(ary, index, value)

def new_doublearray(nelements):
    return _cxtgeo.new_doublearray(nelements)

def delete_doublearray(ary):
    return _cxtgeo.delete_doublearray(ary)

def doublearray_getitem(ary, index):
    return _cxtgeo.doublearray_getitem(ary, index)

def doublearray_setitem(ary, index, value):
    return _cxtgeo.doublearray_setitem(ary, index, value)

def new_chararray(nelements):
    return _cxtgeo.new_chararray(nelements)

def delete_chararray(ary):
    return _cxtgeo.delete_chararray(ary)

def chararray_getitem(ary, index):
    return _cxtgeo.chararray_getitem(ary, index)

def chararray_setitem(ary, index, value):
    return _cxtgeo.chararray_setitem(ary, index, value)

def swig_carr_to_numpy_1d(np, carr):
    return _cxtgeo.swig_carr_to_numpy_1d(np, carr)

def swig_carr_to_numpy_f1d(npf, carrf):
    return _cxtgeo.swig_carr_to_numpy_f1d(npf, carrf)

def swig_carr_to_numpy_i1d(npi, carri):
    return _cxtgeo.swig_carr_to_numpy_i1d(npi, carri)

def swig_numpy_to_carr_1d(npinput, cxarr):
    return _cxtgeo.swig_numpy_to_carr_1d(npinput, cxarr)

def swig_numpy_to_carr_f1d(npinputf, cxarrf):
    return _cxtgeo.swig_numpy_to_carr_f1d(npinputf, cxarrf)

def swig_numpy_to_carr_i1d(npinputi, cxarri):
    return _cxtgeo.swig_numpy_to_carr_i1d(npinputi, cxarri)

XTGeoCLibError = _cxtgeo.XTGeoCLibError

_GNU_SOURCE = _cxtgeo._GNU_SOURCE
PI = _cxtgeo.PI
M_PI = _cxtgeo.M_PI
PIHALF = _cxtgeo.PIHALF
FLOATEPS = _cxtgeo.FLOATEPS
VERYLARGEFLOAT = _cxtgeo.VERYLARGEFLOAT
VERYSMALLFLOAT = _cxtgeo.VERYSMALLFLOAT
VERYLARGEPOSITIVE = _cxtgeo.VERYLARGEPOSITIVE
VERYLARGENEGATIVE = _cxtgeo.VERYLARGENEGATIVE
UNDEF = _cxtgeo.UNDEF
UNDEF_LIMIT = _cxtgeo.UNDEF_LIMIT
UNDEF_INT = _cxtgeo.UNDEF_INT
UNDEF_INT_LIMIT = _cxtgeo.UNDEF_INT_LIMIT
UNDEF_MAP = _cxtgeo.UNDEF_MAP
UNDEF_INT_MAP = _cxtgeo.UNDEF_INT_MAP
UNDEF_MAP_LIMIT = _cxtgeo.UNDEF_MAP_LIMIT
UNDEF_INT_MAP_LIMIT = _cxtgeo.UNDEF_INT_MAP_LIMIT
UNDEF_MAP_STORM = _cxtgeo.UNDEF_MAP_STORM
UNDEF_MAP_IRAP = _cxtgeo.UNDEF_MAP_IRAP
UNDEF_MAP_IRAPB = _cxtgeo.UNDEF_MAP_IRAPB
UNDEF_MAP_ZMAP = _cxtgeo.UNDEF_MAP_ZMAP
UNDEF_MAP_IRAPB_LIMIT = _cxtgeo.UNDEF_MAP_IRAPB_LIMIT
UNDEF_CUBE_RMS = _cxtgeo.UNDEF_CUBE_RMS
UNDEF_POINT = _cxtgeo.UNDEF_POINT
UNDEF_POINT_LIMIT = _cxtgeo.UNDEF_POINT_LIMIT
UNDEF_POINT_RMS = _cxtgeo.UNDEF_POINT_RMS
UNDEF_POINT_IRAP = _cxtgeo.UNDEF_POINT_IRAP
LAST_POINT = _cxtgeo.LAST_POINT
LAST_POINT_LIMIT = _cxtgeo.LAST_POINT_LIMIT
MAXPSTACK = _cxtgeo.MAXPSTACK
ROFFSTRLEN = _cxtgeo.ROFFSTRLEN
ECLNAMELEN = _cxtgeo.ECLNAMELEN
ECLTYPELEN = _cxtgeo.ECLTYPELEN
ECLINTEHEADLEN = _cxtgeo.ECLINTEHEADLEN
ECLDOUBHEADLEN = _cxtgeo.ECLDOUBHEADLEN
ECLLOGIHEADLEN = _cxtgeo.ECLLOGIHEADLEN
ECLNUMBLOCKLEN = _cxtgeo.ECLNUMBLOCKLEN
ECLCHABLOCKLEN = _cxtgeo.ECLCHABLOCKLEN
UNDEF_ROFFBYTE = _cxtgeo.UNDEF_ROFFBYTE
UNDEF_ROFFINT = _cxtgeo.UNDEF_ROFFINT
UNDEF_ROFFFLOAT = _cxtgeo.UNDEF_ROFFFLOAT
UNDEF_ECLINT = _cxtgeo.UNDEF_ECLINT
UNDEF_ECLFLOAT = _cxtgeo.UNDEF_ECLFLOAT
MAXKEYWORDS = _cxtgeo.MAXKEYWORDS
MAXDATES = _cxtgeo.MAXDATES

def xtg_fopen(filename, mode):
    return _cxtgeo.xtg_fopen(filename, mode)

def xtg_fopen_bytestream(swig_bytes, mode):
    return _cxtgeo.xtg_fopen_bytestream(swig_bytes, mode)

def xtg_fflush(fhandle):
    return _cxtgeo.xtg_fflush(fhandle)

def xtg_ftell(fhandle):
    return _cxtgeo.xtg_ftell(fhandle)

def xtg_fclose(fhandle):
    return _cxtgeo.xtg_fclose(fhandle)

def xtg_get_fbuffer(fhandle, swig_bytes):
    return _cxtgeo.xtg_get_fbuffer(fhandle, swig_bytes)

def x_interp_map_nodes(x_v, y_v, z_v, x, y, method):
    return _cxtgeo.x_interp_map_nodes(x_v, y_v, z_v, x, y, method)

def x_ijk2ib(i, j, k, nx, ny, nz, ia_start):
    return _cxtgeo.x_ijk2ib(i, j, k, nx, ny, nz, ia_start)

def x_ijk2ic(i, j, k, nx, ny, nz, ia_start):
    return _cxtgeo.x_ijk2ic(i, j, k, nx, ny, nz, ia_start)

def x_ib2ijk(ib, nx, ny, nz, ia_start):
    return _cxtgeo.x_ib2ijk(ib, nx, ny, nz, ia_start)

def x_ic2ijk(ic, nx, ny, nz, ia_start):
    return _cxtgeo.x_ic2ijk(ic, nx, ny, nz, ia_start)

def x_vector_info2(x1, x2, y1, y2, option):
    return _cxtgeo.x_vector_info2(x1, x2, y1, y2, option)

def x_vector_linint2(x0, y0, z0, x1, y1, z1, dist, option):
    return _cxtgeo.x_vector_linint2(x0, y0, z0, x1, y1, z1, dist, option)

def x_diff_angle(ang1, ang2, option):
    return _cxtgeo.x_diff_angle(ang1, ang2, option)

def x_avg_angles(swig_np_dbl_in_v1):
    return _cxtgeo.x_avg_angles(swig_np_dbl_in_v1)

def x_tetrahedron_volume(swig_np_dbl_inplaceflat_v1):
    return _cxtgeo.x_tetrahedron_volume(swig_np_dbl_inplaceflat_v1)

def x_point_in_tetrahedron(x0, y0, z0, swig_np_dbl_inplaceflat_v1):
    return _cxtgeo.x_point_in_tetrahedron(x0, y0, z0, swig_np_dbl_inplaceflat_v1)

def x_point_in_hexahedron(x0, y0, z0, swig_np_dbl_inplaceflat_v1, method):
    return _cxtgeo.x_point_in_hexahedron(x0, y0, z0, swig_np_dbl_inplaceflat_v1, method)

def x_vectorpair_angle3d(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, degrees, option):
    return _cxtgeo.x_vectorpair_angle3d(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, degrees, option)

def x_minmax_cellangles_topbase(swig_np_dbl_in_v1, option, degrees):
    return _cxtgeo.x_minmax_cellangles_topbase(swig_np_dbl_in_v1, option, degrees)

def x_minmax_cellangles_sides(swig_np_dbl_in_v1, degrees):
    return _cxtgeo.x_minmax_cellangles_sides(swig_np_dbl_in_v1, degrees)

def surf_import_petromod_bin(fhandle, mode, undef, mx, my, swig_np_dbl_aout_v1):
    return _cxtgeo.surf_import_petromod_bin(fhandle, mode, undef, mx, my, swig_np_dbl_aout_v1)

def surf_export_storm_bin(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option):
    return _cxtgeo.surf_export_storm_bin(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option)

def surf_export_petromod_bin(fc, dsc, swig_np_dbl_in_v1):
    return _cxtgeo.surf_export_petromod_bin(fc, dsc, swig_np_dbl_in_v1)

def surf_zminmax(nx, ny, p_map_v, zmin, zmax):
    return _cxtgeo.surf_zminmax(nx, ny, p_map_v, zmin, zmax)

def surf_xyz_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, swig_np_dbl_in_v1, flag):
    return _cxtgeo.surf_xyz_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, swig_np_dbl_in_v1, flag)

def surf_xyori_from_ij(i, j, x, y, xinc, yinc, nx, ny, yflip, rot_deg, flag):
    return _cxtgeo.surf_xyori_from_ij(i, j, x, y, xinc, yinc, nx, ny, yflip, rot_deg, flag)

def surf_get_z_from_ij(ic, jc, x, y, nx, ny, xinc, yinc, xori, yori, p_map_v, option):
    return _cxtgeo.surf_get_z_from_ij(ic, jc, x, y, nx, ny, xinc, yinc, xori, yori, p_map_v, option)

def surf_get_z_from_xy(x, y, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v1, option):
    return _cxtgeo.surf_get_z_from_xy(x, y, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v1, option)

def surf_get_zv_from_xyv(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v3, option):
    return _cxtgeo.surf_get_zv_from_xyv(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v3, option)

def surf_xy_as_values(xori, xinc, yori, yinc, nx, ny, rot_deg, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, flag):
    return _cxtgeo.surf_xy_as_values(xori, xinc, yori, yinc, nx, ny, rot_deg, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, flag)

def surf_slice_grd3d(mcol, mrow, xori, xinc, yori, yinc, rotation, yflip, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, ncol, nrow, nlay, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_int_in_v1, p_prop_v, buffer):
    return _cxtgeo.surf_slice_grd3d(mcol, mrow, xori, xinc, yori, yinc, rotation, yflip, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, ncol, nrow, nlay, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_int_in_v1, p_prop_v, buffer)

def surf_resample(nx1, ny1, xori1, xinc1, yori1, yinc1, yflip1, rota1, swig_np_dbl_inplaceflat_v1, nx2, ny2, xori2, xinc2, yori2, yinc2, yflip2, rota2, swig_np_dbl_inplaceflat_v2, option, samplingoption):
    return _cxtgeo.surf_resample(nx1, ny1, xori1, xinc1, yori1, yinc1, yflip1, rota1, swig_np_dbl_inplaceflat_v1, nx2, ny2, xori2, xinc2, yori2, yinc2, yflip2, rota2, swig_np_dbl_inplaceflat_v2, option, samplingoption)

def surf_get_dist_values(xori, xinc, yori, yinc, nx, ny, rot_deg, x0, y0, azimuth, swig_np_dbl_inplace_v1, flag):
    return _cxtgeo.surf_get_dist_values(xori, xinc, yori, yinc, nx, ny, rot_deg, x0, y0, azimuth, swig_np_dbl_inplace_v1, flag)

def surf_slice_cube(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, option1, option2):
    return _cxtgeo.surf_slice_cube(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, option1, option2)

def surf_slice_cube_v3(ncol, nrow, nlay, czori, czinc, swig_np_flt_inplaceflat_v1, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_boo_inplaceflat_v1, optnearest, optmask):
    return _cxtgeo.surf_slice_cube_v3(ncol, nrow, nlay, czori, czinc, swig_np_flt_inplaceflat_v1, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_boo_inplaceflat_v1, optnearest, optmask)

def surf_stack_slice_cube(ncol, nrow, nlay, nstack, czori, czinc, cubevalsv, stack, rmask, optnearest, optmask):
    return _cxtgeo.surf_stack_slice_cube(ncol, nrow, nlay, nstack, czori, czinc, cubevalsv, stack, rmask, optnearest, optmask)

def surf_slice_cube_window(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, zincr, nzincr, swig_np_dbl_aout_v1, nattr, option1, option2):
    return _cxtgeo.surf_slice_cube_window(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, zincr, nzincr, swig_np_dbl_aout_v1, nattr, option1, option2)

def surf_cube_attr_intv(ncol, nrow, nlay, czori, czinc, swig_np_flt_inplaceflat_v1, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_boo_inplaceflat_v1, swig_np_boo_inplaceflat_v2, slicezinc, ndiv, ndivdisc, swig_np_dbl_inplaceflat_v3, optnearest, optmask, optprogress, maskthreshold, optsum):
    return _cxtgeo.surf_cube_attr_intv(ncol, nrow, nlay, czori, czinc, swig_np_flt_inplaceflat_v1, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_boo_inplaceflat_v1, swig_np_boo_inplaceflat_v2, slicezinc, ndiv, ndivdisc, swig_np_dbl_inplaceflat_v3, optnearest, optmask, optprogress, maskthreshold, optsum)

def surf_sample_grd3d_lay(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, klayer, mx, my, xori, xstep, yori, ystep, rotation, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, option):
    return _cxtgeo.surf_sample_grd3d_lay(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, klayer, mx, my, xori, xstep, yori, ystep, rotation, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, option)

def surf_setval_poly(xori, xinc, yori, yinc, ncol, nrow, yflip, rot_deg, swig_np_dbl_inplace_v1, swig_np_dbl_in_v1, swig_np_dbl_in_v2, value, flag):
    return _cxtgeo.surf_setval_poly(xori, xinc, yori, yinc, ncol, nrow, yflip, rot_deg, swig_np_dbl_inplace_v1, swig_np_dbl_in_v1, swig_np_dbl_in_v2, value, flag)

def pol_chk_point_inside(x, y, p_xp_v, p_yp_v, np):
    return _cxtgeo.pol_chk_point_inside(x, y, p_xp_v, p_yp_v, np)

def pol_do_points_inside(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, swig_np_dbl_in_v3, swig_np_dbl_in_v4, new_value, option, inside):
    return _cxtgeo.pol_do_points_inside(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, swig_np_dbl_in_v3, swig_np_dbl_in_v4, new_value, option, inside)

def polys_chk_point_inside(x, y, p_xp_v, p_yp_v, np1, np2):
    return _cxtgeo.polys_chk_point_inside(x, y, p_xp_v, p_yp_v, np1, np2)

def pol_geometrics(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4):
    return _cxtgeo.pol_geometrics(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4)

def sucu_ij_from_xy(i, j, rx, ry, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag):
    return _cxtgeo.sucu_ij_from_xy(i, j, rx, ry, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag)

def cube_import_storm(nx, ny, nz, file, lstart, swig_np_flt_aout_v1, option):
    return _cxtgeo.cube_import_storm(nx, ny, nz, file, lstart, swig_np_flt_aout_v1, option)

def cube_import_rmsregular(iline, ndef, ndefsum, nx, ny, nz, val_v, vmin, vmax, file, ierr):
    return _cxtgeo.cube_import_rmsregular(iline, ndef, ndefsum, nx, ny, nz, val_v, vmin, vmax, file, ierr)

def cube_export_segy(sfile, nx, ny, nz, swig_np_flt_in_v1, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, ilinesp, xlinesp, tracidp, option):
    return _cxtgeo.cube_export_segy(sfile, nx, ny, nz, swig_np_flt_in_v1, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, ilinesp, xlinesp, tracidp, option)

def cube_export_rmsregular(nx, ny, nz, xmin, ymin, zmin, xinc, yinc, zinc, rotation, yflip, swig_np_flt_in_v1, file):
    return _cxtgeo.cube_export_rmsregular(nx, ny, nz, xmin, ymin, zmin, xinc, yinc, zinc, rotation, yflip, swig_np_flt_in_v1, file)

def cube_coord_val_ijk(i, j, k, nx, ny, nz, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, p_val_v, x, y, z, value, option):
    return _cxtgeo.cube_coord_val_ijk(i, j, k, nx, ny, nz, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, p_val_v, x, y, z, value, option)

def cube_xy_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag):
    return _cxtgeo.cube_xy_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag)

def cube_ijk_from_xyz(i, j, k, rx, ry, rz, x, y, z, xori, xinc, yori, yinc, zori, zinc, nx, ny, nz, rot_deg, yflip, flag):
    return _cxtgeo.cube_ijk_from_xyz(i, j, k, rx, ry, rz, x, y, z, xori, xinc, yori, yinc, zori, zinc, nx, ny, nz, rot_deg, yflip, flag)

def cube_value_ijk(i, j, k, nx, ny, nz, p_val_v, value):
    return _cxtgeo.cube_value_ijk(i, j, k, nx, ny, nz, p_val_v, value)

def cube_value_xyz_cell(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option):
    return _cxtgeo.cube_value_xyz_cell(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option)

def cube_value_xyz_interp(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option):
    return _cxtgeo.cube_value_xyz_interp(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option)

def cube_vertical_val_list(i, j, nx, ny, nz, p_val_v, p_vertical_v):
    return _cxtgeo.cube_vertical_val_list(i, j, nx, ny, nz, p_val_v, p_vertical_v)

def cube_resample_cube(ncx1, ncy1, ncz1, cxori1, cxinc1, cyori1, cyinc1, czori1, czinc1, crotation1, yflip1, swig_np_flt_inplace_v1, ncx2, ncy2, ncz2, cxori2, cxinc2, cyori2, cyinc2, czori2, czinc2, crotation2, yflip2, swig_np_flt_in_v1, option1, option2, ovalue):
    return _cxtgeo.cube_resample_cube(ncx1, ncy1, ncz1, cxori1, cxinc1, cyori1, cyinc1, czori1, czinc1, crotation1, yflip1, swig_np_flt_inplace_v1, ncx2, ncy2, ncz2, cxori2, cxinc2, cyori2, cyinc2, czori2, czinc2, crotation2, yflip2, swig_np_flt_in_v1, option1, option2, ovalue)

def cube_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, swig_np_flt_in_v1, swig_np_dbl_aout_v1, option):
    return _cxtgeo.cube_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, swig_np_flt_in_v1, swig_np_dbl_aout_v1, option)

def grdcp3d_calc_dx(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, m):
    return _cxtgeo.grdcp3d_calc_dx(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, m)

def grdcp3d_calc_dy(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, m):
    return _cxtgeo.grdcp3d_calc_dy(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, m)

def grdcp3d_calc_dz(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, m):
    return _cxtgeo.grdcp3d_calc_dz(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, m)

def grd3d_roff2xtgeo_splitenz(nz, zoffset, zscale, swig_bytes, swig_np_flt_inplace_v1, swig_np_flt_inplace_v2):
    return _cxtgeo.grd3d_roff2xtgeo_splitenz(nz, zoffset, zscale, swig_bytes, swig_np_flt_inplace_v1, swig_np_flt_inplace_v2)

def grd3d_crop_geometry(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_int_inplace_v1, ic1, ic2, jc1, jc2, kc1, kc2, nactive, iflag):
    return _cxtgeo.grd3d_crop_geometry(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_int_inplace_v1, ic1, ic2, jc1, jc2, kc1, kc2, nactive, iflag)

def grd3d_reduce_onelayer(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_inplace_v1, swig_np_int_in_v1, swig_np_int_inplace_v1, nactive, iflag):
    return _cxtgeo.grd3d_reduce_onelayer(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_inplace_v1, swig_np_int_in_v1, swig_np_int_inplace_v1, nactive, iflag)

def grd3d_get_lay_slice(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, kslice, koption, actonly, swig_np_dbl_aout_v1, swig_np_lng_aout_v1):
    return _cxtgeo.grd3d_get_lay_slice(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, kslice, koption, actonly, swig_np_dbl_aout_v1, swig_np_lng_aout_v1)

def grd3d_make_z_consistent(nx, ny, nz, swig_np_dbl_inplace_v1, zsep):
    return _cxtgeo.grd3d_make_z_consistent(nx, ny, nz, swig_np_dbl_inplace_v1, zsep)

def grd3d_point_val_crange(x, y, z, nx, ny, nz, p_coor_v, zcornsv, actnumsv, p_val_v, value, imin, imax, jmin, jmax, kmin, kmax, ibs, option):
    return _cxtgeo.grd3d_point_val_crange(x, y, z, nx, ny, nz, p_coor_v, zcornsv, actnumsv, p_val_v, value, imin, imax, jmin, jmax, kmin, kmax, ibs, option)

def grd3d_point_in_cell(ibstart, kzonly, x, y, z, nx, ny, nz, p_coor_v, zcornsv, actnumsv, maxrad, sflag, nradsearch, option):
    return _cxtgeo.grd3d_point_in_cell(ibstart, kzonly, x, y, z, nx, ny, nz, p_coor_v, zcornsv, actnumsv, maxrad, sflag, nradsearch, option)

def grd3d_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, mcol, mrow, xori, yori, xinc, yinc, rotation, yflip, maptopi, maptopj, mapbasi, mapbasj, nx, ny, nz, swig_np_dbl_in_v3, swig_np_dbl_in_v4, swig_np_int_in_v1, p_val_v, swig_np_dbl_in_v5, swig_np_int_in_v2, swig_np_dbl_aout_v1):
    return _cxtgeo.grd3d_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, mcol, mrow, xori, yori, xinc, yinc, rotation, yflip, maptopi, maptopj, mapbasi, mapbasj, nx, ny, nz, swig_np_dbl_in_v3, swig_np_dbl_in_v4, swig_np_int_in_v1, p_val_v, swig_np_dbl_in_v5, swig_np_int_in_v2, swig_np_dbl_aout_v1)

def grd3d_midpoint(i, j, k, nx, ny, nz, coordsv, ncoord, zcornsv, nzcorn, x, y, z):
    return _cxtgeo.grd3d_midpoint(i, j, k, nx, ny, nz, coordsv, ncoord, zcornsv, nzcorn, x, y, z)

def grd3d_inact_outside_pol(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, swig_np_dbl_in_v3, swig_np_dbl_in_v4, swig_np_int_inplace_v1, k1, k2, force_close, option):
    return _cxtgeo.grd3d_inact_outside_pol(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, swig_np_dbl_in_v3, swig_np_dbl_in_v4, swig_np_int_inplace_v1, k1, k2, force_close, option)

def grd3d_setval_poly(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, swig_np_dbl_in_v3, swig_np_dbl_in_v4, swig_np_int_in_v1, p_val_v, value):
    return _cxtgeo.grd3d_setval_poly(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, swig_np_dbl_in_v3, swig_np_dbl_in_v4, swig_np_int_in_v1, p_val_v, value)

def grd3d_geometrics(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, xori, yori, zori, xmin, xmax, ymin, ymax, zmin, zmax, rotation, dx, dy, dz, option1, option2):
    return _cxtgeo.grd3d_geometrics(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, xori, yori, zori, xmin, xmax, ymin, ymax, zmin, zmax, rotation, dx, dy, dz, option1, option2)

def grd3d_check_cell_splits(ncol, nrow, nlay, coordsv, zcornsv, ib1, ib2):
    return _cxtgeo.grd3d_check_cell_splits(ncol, nrow, nlay, coordsv, zcornsv, ib1, ib2)

def grd3d_adj_cells(ncol, nrow, nlay, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_inplace_v1, p_prop1, nprop1, val1, val2, p_prop2, nprop2, iflag1, iflag2):
    return _cxtgeo.grd3d_adj_cells(ncol, nrow, nlay, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_inplace_v1, p_prop1, nprop1, val1, val2, p_prop2, nprop2, iflag1, iflag2)

def grd3d_corners(i, j, k, nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, corners):
    return _cxtgeo.grd3d_corners(i, j, k, nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, corners)

def grd3d_zminmax(i, j, k, nx, ny, nz, zcornsv, option):
    return _cxtgeo.grd3d_zminmax(i, j, k, nx, ny, nz, zcornsv, option)

def grd3d_get_all_corners(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6, x7, y7, z7, x8, y8, z8, option):
    return _cxtgeo.grd3d_get_all_corners(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6, x7, y7, z7, x8, y8, z8, option)

def grd3d_well_ijk(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, swig_np_dbl_in_v3, swig_np_int_in_v2, nval, p_utme_v, p_utmn_v, p_tvds_v, ivector, jvector, kvector, iflag):
    return _cxtgeo.grd3d_well_ijk(nx, ny, nz, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_int_in_v1, swig_np_dbl_in_v3, swig_np_int_in_v2, nval, p_utme_v, p_utmn_v, p_tvds_v, ivector, jvector, kvector, iflag)

def grd3cp3d_xtgformat1to2_geom(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_dbl_inplaceflat_v3, swig_np_flt_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_int_inplaceflat_v2):
    return _cxtgeo.grd3cp3d_xtgformat1to2_geom(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_dbl_inplaceflat_v3, swig_np_flt_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_int_inplaceflat_v2)

def grd3cp3d_xtgformat2to1_geom(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_dbl_inplaceflat_v3, swig_np_flt_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_int_inplaceflat_v2):
    return _cxtgeo.grd3cp3d_xtgformat2to1_geom(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_dbl_inplaceflat_v2, swig_np_dbl_inplaceflat_v3, swig_np_flt_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_int_inplaceflat_v2)

def grdcp3d_process_edges(ncol, nrow, nlay, swig_np_flt_inplaceflat_v1):
    return _cxtgeo.grdcp3d_process_edges(ncol, nrow, nlay, swig_np_flt_inplaceflat_v1)

def grdcp3d_corners(ic, jc, kc, ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, corners):
    return _cxtgeo.grdcp3d_corners(ic, jc, kc, ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, corners)

def grdcp3d_get_vtk_esg_geometry_data(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, swig_np_dbl_aout_v1, swig_np_lng_aout_v1):
    return _cxtgeo.grdcp3d_get_vtk_esg_geometry_data(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, swig_np_dbl_aout_v1, swig_np_lng_aout_v1)

def grdcp3d_get_vtk_grid_arrays(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3):
    return _cxtgeo.grdcp3d_get_vtk_grid_arrays(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3)

def grdcp3d_quality_indicators(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_flt_inplaceflat_v2):
    return _cxtgeo.grdcp3d_quality_indicators(ncol, nrow, nlay, swig_np_dbl_inplaceflat_v1, swig_np_flt_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_flt_inplaceflat_v2)

def well_geometrics(np, xv, yv, zv, md, incl, az, option):
    return _cxtgeo.well_geometrics(np, xv, yv, zv, md, incl, az, option)

def well_trunc_parallel(swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, xtol, ytol, ztol, itol, atol, option):
    return _cxtgeo.well_trunc_parallel(swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, xtol, ytol, ztol, itol, atol, option)

def well_surf_picks(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_in_v4, ncol, nrow, xori, yori, xinc, yinc, yflip, rot, swig_np_dbl_in_v5, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, swig_np_int_aout_v1):
    return _cxtgeo.well_surf_picks(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_in_v4, ncol, nrow, xori, yori, xinc, yinc, yflip, rot, swig_np_dbl_in_v5, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, swig_np_int_aout_v1)

def well_mask_shoulder(swig_np_dbl_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_int_inplaceflat_v2, distance):
    return _cxtgeo.well_mask_shoulder(swig_np_dbl_inplaceflat_v1, swig_np_int_inplaceflat_v1, swig_np_int_inplaceflat_v2, distance)

def throw_exception(msg):
    return _cxtgeo.throw_exception(msg)

def clear_exception():
    return _cxtgeo.clear_exception()

def check_exception():
    return _cxtgeo.check_exception()

