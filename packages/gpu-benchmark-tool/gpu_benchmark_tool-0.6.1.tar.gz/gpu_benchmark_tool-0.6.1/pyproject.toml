[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gpu-benchmark-tool"
dynamic = ["version"]
description = "Multi-vendor GPU health monitoring supporting old GPUs for e-waste reduction"
readme = "README.md"
# license = {text = "MIT"}
authors = [
    {name = "Yousuf Rajput", email = "ywrajput@gmail.com"}
]
keywords = [
    "gpu", "benchmark", "monitoring", "cuda", "rocm", "intel",
    "nvidia", "amd", "old-gpu", "ewaste", "recycling", "sustainability"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Science/Research",
    "Topic :: System :: Hardware",
    "Topic :: System :: Monitoring",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "psutil>=5.8.0",
    "pyyaml>=6.0",
    "torch>=2.0.0",
]

[project.optional-dependencies]
nvidia = [
    "nvidia-ml-py>=11.450.51",
    "onnxruntime-gpu>=1.15.0",
]
amd = [
    # ROCm support relies on system installation
]
intel = [
    "intel-extension-for-pytorch>=2.0.0",
]
all = [
    "nvidia-ml-py>=11.450.51",
    "intel-extension-for-pytorch>=2.0.0",
    "docker>=6.0.0",
]
dev = [
    "pytest>=7.0",
    "ruff>=0.1.0",
    "mypy>=0.900",
    "build>=0.10.0",
    "twine>=4.0.2",
]

[project.scripts]
gpu-benchmark = "gpu_benchmark.cli:main"

[project.urls]
Homepage = "https://github.com/ywrajput/gpu-benchmark-tool"
Repository = "https://github.com/ywrajput/gpu-benchmark-tool"
Issues = "https://github.com/ywrajput/gpu-benchmark-tool/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["gpu_benchmark*"]

[tool.setuptools.dynamic]
version = {attr = "gpu_benchmark.version.__version__"}

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "C90", "I", "N", "D", "UP", "YTT", "ANN", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "FLY", "NPY", "PERF", "FURB", "LOG", "RUF"]
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # Missing docstrings
    "ANN101", "ANN102",  # Missing type annotation for self/cls
    "S101",  # Use of assert
    "T201",  # Print statements
    "PLR0913",  # Too many arguments
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings.
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D", "ANN"]  # Allow assert, ignore docstrings and annotations in tests
"examples/*" = ["D", "T201"]  # Allow print statements and ignore docstrings in examples

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.isort]
known-first-party = ["gpu_benchmark"]
force-single-line = false
force-wrap-aliases = true
split-on-trailing-comma = true

[tool.ruff.lint.pycodestyle]
max-line-length = 88

[tool.ruff.lint.mccabe]
max-complexity = 10

# Function signature formatting rules
[tool.ruff.lint.flake8-function-calls]
max-positional-args = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]