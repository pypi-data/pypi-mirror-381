# Generated by go2rpm {{ generator_version }}
%bcond check 1
%bcond bootstrap 0

{% if not has_cmd and main_cmd is none and other_cmd|length == 0 %}
%global debug_package %{nil}
{% else %}
%if %{with bootstrap}
%global debug_package %{nil}
%endif

{% endif %}
%if %{with bootstrap}
%global __requires_exclude %{?__requires_exclude:%{__requires_exclude}|}^golang\\(.*\\)$
%endif

# {{ forge }}
%global goipath         {{ goipath }}
{% if not 'github.com' in goipath %}
%global forgeurl        {{ forge }}
{% endif %}
{% if version is not none or tag is not none %}
Version:                {{ version if version is not none else tag }}
{% endif %}
{% if tag is not none %}
%global tag             {{ tag }}
{% endif %}
{% if commit is not none %}
%global commit          {{ commit }}
{% if commitdate is defined %}
%global date            {{ commitdate }}
{% endif %}
{% endif %}

{% if spec_warnings %}
# REMOVE BEFORE SUBMITTING THIS FOR REVIEW
# ---
# New Fedora packages should use %%gometa -f, which makes the package
# ExclusiveArch to %%golang_arches_future and thus excludes the package from
# %%ix86. If the new package is needed as a dependency for another package,
# please consider removing that package from %%ix86 in the same way, instead of
# building more go packages for i686. If your package is not a leaf package,
# you'll need to coordinate the removal of the package's dependents first.
# ---
# REMOVE BEFORE SUBMITTING THIS FOR REVIEW
{% endif %}
{% if use_new_versioning %}
%gometa -L -f
{% else %}
%gometa -f
{% endif %}

{% if altipaths is not none %}
%global goaltipaths     {{ altipaths|join(' ') }}

{% endif %}
%global common_description %{expand:
{{ description|default("# FIXME", true)|wordwrap(wrapstring="\n")|trim }}}

{% if license_files|length > 0 %}
%global golicenses      {{ license_files|join(' ')|wordwrap(width=53, wrapstring="\\\\\\\n                        ")|trim }}
{% endif %}
{% if doc_files|length > 0 %}
%global godocs          {{ doc_files|join(' ')|wordwrap(width=53, wrapstring="\\\\\\\n                        ")|trim }}

{% endif %}
Name:           {{ name }}
{% if version is none and tag is none %}
Version:        0
{% endif %}
{% if rpmautospec %}
Release:        {{ pkg_autorelease }}
{% else %}
Release:        {{ pkg_release }}%{?dist}
{% endif %}
Summary:        {{ summary|default("# FIXME") }}

License:        {{ licenses|default("# FIXME", true) }}
URL:            %{gourl}
Source:         %{gosource}

{% if not generate_buildrequires %}
%if %{without bootstrap}
{% if buildrequires|length > 0 %}
{% set br = buildrequires|sort %}
{% for req in br %}
BuildRequires:  golang({{ req }})
{% endfor %}

{% endif %}
{% if test_buildrequires|length > 0 %}
{% set test_br = test_buildrequires|sort %}
%if %{with check}
# Tests
{% for req in test_br %}
BuildRequires:  golang({{ req }})
{% endfor %}
%endif

{% endif %}
%endif
{% endif %}
%description %{common_description}

%gopkg

%prep
%goprep -A
%autopatch -p1

{% if generate_buildrequires %}
%if %{without bootstrap}
%generate_buildrequires
%go_generate_buildrequires
%endif

{% endif -%}
{% if has_cmd or main_cmd is not none or other_cmd|length > 0 %}
%if %{without bootstrap}
%build
{% if has_cmd %}
for cmd in cmd/* ; do
  %gobuild -o %{gobuilddir}/bin/$(basename $cmd) %{goipath}/$cmd
done
{% endif %}
{% if main_cmd is not none %}
%gobuild -o %{gobuilddir}/bin/{{ main_cmd }} %{goipath}
{% endif %}
{% if other_cmd|length > 0 %}
for cmd in {{ other_cmd|sort|join(' ') }}; do
  %gobuild -o %{gobuilddir}/bin/$(basename $cmd) %{goipath}/$cmd
done
{% endif %}
%endif

{% endif %}
%install
%gopkginstall
{% if has_cmd or main_cmd is not none or other_cmd|length > 0 %}
%if %{without bootstrap}
install -m 0755 -vd                     %{buildroot}%{_bindir}
install -m 0755 -vp %{gobuilddir}/bin/* %{buildroot}%{_bindir}/
%endif
{% endif %}

%if %{without bootstrap}
%if %{with check}
%check
%gocheck
%endif
%endif

{% if has_cmd or main_cmd is not none or other_cmd|length > 0 %}
%if %{without bootstrap}
%files
{% if license_files|length > 0 %}
%license {{ license_files|join(' ')|customwordwrap(width=70, wrapstring="\n%license ", break_long_words=False, break_on_hyphens=False)|trim }}
{% endif %}
{% if doc_files|length > 0 %}
%doc {{ doc_files|join(' ')|customwordwrap(width=75, wrapstring="\n%doc ", break_long_words=False, break_on_hyphens=False)|trim }}
{% endif %}
{% if main_cmd is not none %}
%{_bindir}/{{ main_cmd }}
{% elif command_list|length > 0 %}
{% for cmd in command_list %}
%{_bindir}/{{ cmd }}
{% endfor %}
{% endif %}
%endif

{% endif %}
%gopkgfiles

%changelog
{% if rpmautospec %}
%autochangelog
{% else %}
{% if auto_changelog_entry %}
{% if version is none and tag is none and commit is not none %}
* {{ date }} {{ packager|default("go2rpm <nobody@fedoraproject.org>") }} - 0-{{ pkg_release }}.{{ shortdate }}git{{ shortcommit }}
{% elif version is none and tag is not none and commit is none %}
* {{ date }} {{ packager|default("go2rpm <nobody@fedoraproject.org>") }} - {{ tag }}-{{ pkg_release }}
{% elif version is none and tag is not none and commit is not none %}
* {{ date }} {{ packager|default("go2rpm <nobody@fedoraproject.org>") }} - {{ tag }}-{{ pkg_release }}.{{ shortdate }}git{{ shortcommit }}
{% elif version is not none and tag is none and commit is none %}
* {{ date }} {{ packager|default("go2rpm <nobody@fedoraproject.org>") }} - {{ version }}-{{ pkg_release }}
{% elif version is not none and tag is none and commit is not none %}
* {{ date }} {{ packager|default("go2rpm <nobody@fedoraproject.org>") }} - {{ version }}-{{ pkg_release }}.{{ shortdate }}git{{ shortcommit }}
{% endif %}
- Initial package
{% endif %}
{% endif %}
