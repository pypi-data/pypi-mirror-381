[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "go2rpm"
description = "Convert Go packages to RPM"
dynamic = ["version"]
authors = [{ name = "Robert-AndrÃ© Mauchin", email = "zebob.m@gmail.com" }]
readme = "README.md"
license = { text = "MIT" }
keywords = ["go", "golang", "rpm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Software Distribution",
    "Topic :: Utilities",
]
dependencies = [
    "aiohttp",
    "gitpython",
    "jinja2",
]
requires-python = ">=3.9"

[project.scripts]
go2rpm = "go2rpm.__main__:main"

[project.optional-dependencies]
# User-facing
all = [
    "go2rpm[vendor]",
]
vendor = [
    "go-vendor-tools >= 0.8.0",
    "tomlkit",
]

# Dev
codeqa = [
    "pymarkdownlnt",
    "ruff>=0.3.0",
]
formatters = [
    "black",
    "isort",
]
typing = [
    "mypy",
    "pytest",
    "typing_extensions",
    # For checking noxfile.py
    "nox",
]
test = [
    "pytest",
]
dev = [
    "go2rpm[codeqa]",
    "go2rpm[formatters]",
    "go2rpm[test]",
    "go2rpm[typing]",
    "nox",
]

[project.urls]
Homepage = "https://gitlab.com/fedora/sigs/go/go2rpm"


[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--import-mode=importlib",
]
markers = [
    "network: Test needs network access",
]


[tool.isort]
profile = "black"
add_imports = [
    'from __future__ import annotations',
]


[tool.mypy]
check_untyped_defs = true


[tool.coverage.run]
source = [
    "go2rpm",
]
omit = [
    "*/templates/*",
]

[tool.coverage.paths]
source = [
    ".",
    "src",
    "*/site-packages",
]

[tool.coverage.report]
# https://coverage.readthedocs.io/en/latest/excluding.html#advanced-exclusion
# These should use single quotes in TOML, as they're regular expressions.
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'if t\.TYPE_CHECKING:',
    '@(abc\.)?abstractmethod',
    '@overload',
]

[tool.pymarkdown.plugins.no-inline-html]
enabled = false
[tool.pymarkdown.plugins.line-length]
# Code blocks can be a little longer than regular text
code_block_line_length = 150
[tool.pymarkdown.plugins.no-duplicate-heading]
# NEWS.md deliberately has duplicate headings
enabled = false
