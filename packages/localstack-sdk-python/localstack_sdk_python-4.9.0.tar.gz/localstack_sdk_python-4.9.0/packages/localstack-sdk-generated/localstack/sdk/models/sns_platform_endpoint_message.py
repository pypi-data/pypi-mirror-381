# coding: utf-8

"""
    LocalStack REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.9.0
    Contact: info@localstack.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SNSPlatformEndpointMessage(BaseModel):
    """
    Message sent to a platform endpoint via SNS
    """ # noqa: E501
    target_arn: Optional[StrictStr] = Field(default=None, alias="TargetArn")
    topic_arn: Optional[StrictStr] = Field(default=None, alias="TopicArn")
    message: Optional[StrictStr] = Field(default=None, alias="Message")
    message_attributes: Optional[Dict[str, Any]] = Field(default=None, alias="MessageAttributes")
    message_structure: Optional[StrictStr] = Field(default=None, alias="MessageStructure")
    subject: Optional[StrictStr] = Field(default=None, alias="Subject")
    message_id: Optional[StrictStr] = Field(default=None, alias="MessageId")
    __properties: ClassVar[List[str]] = ["TargetArn", "TopicArn", "Message", "MessageAttributes", "MessageStructure", "Subject", "MessageId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SNSPlatformEndpointMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if subject (nullable) is None
        # and model_fields_set contains the field
        if self.subject is None and "subject" in self.model_fields_set:
            _dict['Subject'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SNSPlatformEndpointMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TargetArn": obj.get("TargetArn"),
            "TopicArn": obj.get("TopicArn"),
            "Message": obj.get("Message"),
            "MessageAttributes": obj.get("MessageAttributes"),
            "MessageStructure": obj.get("MessageStructure"),
            "Subject": obj.get("Subject"),
            "MessageId": obj.get("MessageId")
        })
        return _obj


