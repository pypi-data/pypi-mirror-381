[build-system]
build-backend = "hatchling.build"
requires = [
    "hatch-docstring-description",
    "hatch-vcs",
    "hatchling",
    "typing-extensions; python_version < '3.12'",
]

[dependency-groups]
build = ["hatch", "pip"]
build-dev = ["auditwheel", "setuptools-scm", { include-group = "build" }]
dev = [
    { include-group = "lint-format" },
    { include-group = "pre-commit" },
    { include-group = "test" },
    { include-group = "type-check" },
]
lint-format = ["ruff>=0.4"]
pre-commit = ["pre-commit"]
test = []
type-check = ["mypy>=1.12"]

[project]
authors = [{ name = "Matt Norton", email = "matt@carrotmanmatt.com" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Framework :: Hatch",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development",
    "Typing :: Typed",
]
dependencies = [
    "hatchling",
    "typed_classproperties>1.0.2",
    "typing-extensions; python_version < '3.12'",
]
dynamic = ["description", "readme", "version"]
keywords = [
    "AsciiDoc",
    "Hatch",
    "Hatchling",
    "Markdown",
    "Python",
    "README",
    "build",
    "converter",
    "documentation",
    "metadata",
    "packaging",
    "pypi",
    "pyproject.toml",
]
license = "Apache-2.0"
license-files = ["LICENSE"]
name = "Pydowndoc"
optional-dependencies = { "bin" = ["Pydowndoc-bin"] }
requires-python = ">=3.9"

[project.entry-points.hatch]
downdoc-readme = "pydowndoc.hatch_hooks"

[project.urls]
Issues = "https://github.com/CarrotManMatt/Pydowndoc/issues"
Repository = "https://github.com/CarrotManMatt/Pydowndoc"

[tool.hatch.build]
only-packages = true

[tool.hatch.build.targets.sdist]
artifacts = ["README.adoc"]

[tool.hatch.metadata.hooks]
custom = { readme-path = "README.adoc" }
docstring-description = {}

[tool.hatch.version]
raw-options = { local_scheme = "no-local-version", version_scheme = "python-simplified-semver" }
source = "vcs"

[tool.mypy]
check_untyped_defs = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
enable_error_code = [
    "deprecated",
    "explicit-override",
    "ignore-without-code",
    "mutable-override",
    "narrowed-type-not-subtype",
    "possibly-undefined",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unused-awaitable",
]
extra_checks = true
mypy_path = "stubs"
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff]
indent-width = 4
line-length = 95
output-format = "concise"

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
line-ending = "lf"
quote-style = "double"

[tool.ruff.lint]
ignore = [
    "C90",
    "COM812",
    "COM819",
    "CPY",
    "D206",
    "D212",
    "FA",
    "ICN001",
    "INP001",
    "ISC001",
    "ISC002",
    "N806",
    "PIE808",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "S603",
    "SIM910",
    "TD002",
    "TD003",
    "W191",
]
select = ["ALL", "D204", "D213", "D401"]
task-tags = ["BUG", "DONE", "FIXME", "HACK", "IDEA", "ISSUE", "NOBUG", "NOTE", "REQ", "TODO"]

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["abc", "re"]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = []
quote-annotations = true
strict = true

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "typed_classproperties.cached_classproperty",
    "typed_classproperties.classproperty",
]
extend-ignore-names = ["BROKEN_*_MESSAGE", "INVALID_*_MESSAGE", "NO_*_MESSAGE"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 95

[tool.ruff.lint.pydocstyle]
convention = "google"
property-decorators = [
    "typed_classproperties.cached_classproperty",
    "typed_classproperties.classproperty",
]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["bytes", "int", "str"]
max-args = 8
max-branches = 19
max-returns = 10

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.uv]
default-groups = ["dev"]
no-binary-package = ["Pydowndoc", "Pydowndoc-bin"]
no-build = true
required-environments = [
    "sys_platform == 'darwin' and platform_machine == 'x86_64'",
    "sys_platform == 'linux' and platform_machine == 'aarch64'",
    "sys_platform == 'linux' and platform_machine == 'x86_64'",
    "sys_platform == 'win32' and platform_machine == 'AMD64'",
]
required-version = ">=0.5.21"
trusted-publishing = "always"

[tool.uv.sources]
Pydowndoc-bin = { path = "Pydowndoc-bin/" }

[[tool.uv.index]]
explicit = true
name = "Test-PyPI"
publish-url = "https://test.pypi.org/legacy/"
url = "https://test.pypi.org/simple/"
