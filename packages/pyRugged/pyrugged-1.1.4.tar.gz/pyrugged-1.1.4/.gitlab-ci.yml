# included templates
include:
  # Python template
  # - project: "to-be-continuous/python" # https://gitlab.cloud-espace.si.c-s.fr/to-be-continuous/python/-/blob/6.1.3/templates/gitlab-ci-python.yml?ref_type=tags
  #   ref: "6.1.3"
  #   file: "templates/gitlab-ci-python.yml"
  - "templates/gitlab-ci-python.yml"
#   # SonarQube template
#   - project: "to-be-continuous/sonar"
#     ref: "2.0.1"
#     file: "templates/gitlab-ci-sonar.yml"

# secret variables
# (define the variables below in your GitLab group/project variables)
# SONAR_AUTH_TOKEN: SonarQube authentication [token](https://docs.sonarqube.org/latest/user-guide/user-token/) (depends on your authentication method)
# SONAR_LOGIN: SonarQube login (depends on your authentication method)
# SONAR_PASSWORD: SonarQube password (depends on your authentication method)
# SONAR_GITLAB_TOKEN: GitLab API access token. When set, activates the [Sonar GitLab plugin](https://github.com/gabrie-allaigre/sonar-gitlab-plugin/#plugins-properties) integration, and enables SonarQube [Pull Request Analysis](https://docs.sonarqube.org/latest/analysis/pull-request/)

# variables
variables:
  PYLINT_ENABLED: "true"
  PYTEST_ENABLED: "true"
  PYTEST_ARGS: "-s "
  PYTHON_PACKAGE_ENABLED: "true"


# your pipeline stages
stages:
  - build
  - test
  - package-build
  - package-test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production

py-package:
  stage: build
  parallel:
    matrix:
    - IMAGE: [python:3.11-slim, python:3.12-slim, python:3.13-slim, python:3.14-rc-slim]
  image: "$IMAGE"
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git gcc patchelf libc-dev
    - python3 -m venv .venv && . .venv/bin/activate
    - python -m pip install auditwheel build
  script:
    - python -m build --sdist --wheel
    - python -m auditwheel show dist/*.whl
    - python -m auditwheel repair --exclude "*" dist/*.whl
    - mv wheelhouse wheelhouse-${IMAGE/:/-}
  artifacts:
    paths:
      - dist/*.tar.gz
      - wheelhouse-*/*.whl
    expire_in: 1 week

py-lint:
  stage: build
  parallel:
    matrix:
    - IMAGE: [python:3.11-slim, python:3.12-slim, python:3.13-slim, python:3.14-rc-slim]
  image: "$IMAGE"
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git gcc libc-dev
    - python3 -m venv .venv && . .venv/bin/activate
  script:
    - mkdir -p -m 777 reports
    - python -m pip install -e .
    - python -m pip install pylint_gitlab # codeclimate reports
    # run pylint and generate reports all at once
    - python -m pylint --ignore=.cache --output-format=colorized,pylint_gitlab.GitlabCodeClimateReporter:reports/py-lint.codeclimate.json,parseable:reports/py-lint.parseable.txt ${PYLINT_ARGS} ${PYLINT_FILES:-$(find pyrugged tests -type f -name "*.py")}
    - echo " " >> reports/py-lint.codeclimate.json # no empty files
    - echo " " >> reports/py-lint.parseable.txt

py-pytest:
  stage: test
  parallel:
    matrix:
    - IMAGE: [python:3.11-slim, python:3.12-slim, python:3.13-slim, python:3.14-rc-slim]
  image: "$IMAGE"
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git gcc libc-dev
    - python3 -m venv .venv && . .venv/bin/activate
  script:
    - mkdir -p -m 777 reports
    - python -m pip install -e .
    - python -m pip install pytest pytest-cov coverage
    - python -m pytest --junit-xml=reports/TEST-pytests.xml --cov --cov-report term  --cov-report xml:reports/py-coverage.cobertura.xml ${PYTEST_ARGS}

py-publish:
  stage: publish
  dependencies: [py-package]
  image: python:3-slim
  variables:
    GIT_STRATEGY: none
  before_script:
    - python3 -m venv .venv && . .venv/bin/activate
    - python -m pip install twine
  script:
    - ls -al wheelhouse-*/*.whl dist/*.tar.gz
    - python -m twine check --strict wheelhouse-*/*.whl dist/*.tar.gz
    - python -m twine upload wheelhouse-*/*.whl dist/*.tar.gz
  rules:
    - if: $CI_COMMIT_TAG
