#------------------------------------------------------------------------------
# Copyright (c) 2021-2025, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file LICENSE, distributed with this software.
#------------------------------------------------------------------------------
- case: member
  main: |
    from atom.api import Member

    m: Member[int, str] = Member()

    reveal_type(m)  # N: Revealed type is "atom.catom.Member[builtins.int, builtins.str]"

- case: generic_alias_as_type
  parametrized:
    - member: Typed
      member_instance: Typed(list[int], optional=False)
      member_type: atom.typed.Typed[builtins.list[builtins.int]]
      member_value_type: builtins.list[builtins.int]
    - member: ForwardTyped
      member_instance: ForwardTyped(lambda:list[int], optional=False)
      member_type: atom.typed.ForwardTyped[builtins.list[builtins.int]]
      member_value_type: builtins.list[builtins.int]
    - member: Instance
      member_instance: Instance(list[int], optional=False)
      member_type: atom.instance.Instance[builtins.list[builtins.int]]
      member_value_type: builtins.list[builtins.int]
    - member: Instance
      member_instance: Instance((list[int], int), optional=False)
      member_type: atom.instance.Instance[builtins.list[builtins.int] | builtins.int]
      member_value_type: builtins.list[builtins.int] | builtins.int
    - member: ForwardInstance
      member_instance: ForwardInstance(lambda:list[int], optional=False)
      member_type: atom.instance.ForwardInstance[builtins.list[builtins.int]]
      member_value_type: builtins.list[builtins.int]
    - member: ForwardInstance
      member_instance: ForwardInstance(lambda:(list[int], int), optional=False)
      member_type: atom.instance.ForwardInstance[builtins.list[builtins.int] | builtins.int]
      member_value_type: builtins.list[builtins.int] | builtins.int
  main: |
    from atom.api import Atom, {{ member }}

    class A(Atom):
      m = {{ member_instance }}

    reveal_type(A.m)  # N: Revealed type is "{{ member_type }}"
    reveal_type(A().m)  # N: Revealed type is "{{ member_value_type }}"