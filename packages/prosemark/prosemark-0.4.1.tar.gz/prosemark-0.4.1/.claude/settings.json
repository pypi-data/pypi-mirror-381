{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|Write|MultiEdit|Update",
        "hooks": [
          {
            "type": "command",
            "command": "uv run ruff format --check"
          },
          {
            "type": "command",
            "command": "uv run ruff check"
          },
          {
            "type": "command",
            "command": "uv run mypy src tests"
          }

        ]
      }
    ],
    "file-change": [
      {
        "files": ["pyproject.toml", "uv.lock"],
        "command": "uv sync --all-groups"
      }
    ]
  },
  "permissions": {
    "allow": [
      "Bash(./scripts/runtests.sh:*)",
      "Bash(uv run:*)",
      "Bash(python:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(rg:*)",
      "mcp__linear-server__list_teams",
      "mcp__linear-server__create_issue",
      "mcp__linear-server__get_issue",
      "Bash(uv sync:*)",
      "Bash(uv add:*)",
      "Bash(git add:*)",
      "mcp__linear-server__update_issue",
      "mcp__linear-server__list_issues",
      "mcp__serena__list_dir",
      "mcp__serena__activate_project",
      "mcp__serena__read_file",
      "Bash(mkdir:*)",
      "mcp__serena__create_text_file",
      "mcp__serena__replace_regex",
      "mcp__linear-server__create_comment",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__find_file",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__search_for_pattern",
      "mcp__serena__execute_shell_command",
      "Bash(./runtests.sh:*)",
      "Bash(scripts/runtests.sh:*)",
      "mcp__linear-server__list_projects",
      "mcp__linear-server__get_team",
      "mcp__serena__insert_after_symbol",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(cat:*)",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__write_memory",
      "Bash(lcov:*)",
      "Bash(find:*)",
      "Bash(.specify/scripts/bash/create-new-feature.sh:*)",
      "Bash(.specify/scripts/bash/setup-plan.sh:*)",
      "Bash(.specify/scripts/bash/update-agent-context.sh:*)",
      "Bash(.specify/scripts/bash/check-task-prerequisites.sh:*)"
    ],
    "deny": []
  }
}
