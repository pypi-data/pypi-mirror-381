---
title: Docstrings in Python code
description: When writing or editing Python code (`*.py`), ALWAYS add short, descriptive docstrings in Google Style to all packages, modules, functions, classes, and methods.
---

- Use Google Style for all docstrings.
  - Example: |
    ```python
    def fetch_smalltable_rows(
        table_handle: smalltable.Table,
        keys: Sequence[bytes | str],
        require_all_keys: bool = False,
    ) -> Mapping[bytes, tuple[str, ...]]:
        """Fetches rows from a Smalltable.

        Retrieves rows pertaining to the given keys from the Table instance
        represented by table_handle.  String keys will be UTF-8 encoded.

        Args:
            table_handle: An open smalltable.Table instance.
            keys: A sequence of strings representing the key of each table
              row to fetch.  String keys will be UTF-8 encoded.
            require_all_keys: If True only rows with values set for all keys will be
              returned.

        Returns:
            A dict mapping keys to the corresponding table row data
            fetched. Each row is represented as a tuple of strings. For
            example:

            {b'Serak': ('Rigel VII', 'Preparer'),
             b'Zim': ('Irk', 'Invader'),
             b'Lrrr': ('Omicron Persei 8', 'Emperor')}

            Returned keys are always bytes.  If a key from the keys argument is
            missing from the dictionary, then that row was not found in the
            table (and require_all_keys must have been False).

        Raises:
            IOError: An error occurred accessing the smalltable.
        """
    ```
  - Example: |
    ```python
    class SampleClass:
        """Summary of class here.

        Longer class information...
        Longer class information...

        Attributes:
            likes_spam: A boolean indicating if we like SPAM or not.
            eggs: An integer count of the eggs we have laid.
        """

        def __init__(self, likes_spam: bool = False):
            """Initializes the instance based on spam preference.

            Args:
              likes_spam: Defines if instance exhibits this preference.
            """
            self.likes_spam = likes_spam
            self.eggs = 0

        @property
        def butter_sticks(self) -> int:
            """The number of butter sticks we have."""
    ```
