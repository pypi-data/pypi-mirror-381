---
title: Hexagonal Architecture (Ports and Adapters)
description: When designing and implementing application components (`*.py`), follow hexagonal architecture principles to separate business logic from external concerns.
---

- Place core business logic at the center of the application, free from direct dependencies on I/O or external systems.
- Define clear interfaces (ports) for all external interactions required by the business logic.
- Implement concrete adapters that fulfill these interfaces for actual external systems.
- Inject dependencies through constructor parameters or dedicated factory functions.
- Example port interface: |
  ```python
  class UserRepository(Protocol):
      def get_user(self, user_id: str) -> User:
          """Retrieves a user by ID."""
          ...
      
      def save_user(self, user: User) -> None:
          """Persists user data."""
          ...
  ```
- Example adapter implementation: |
  ```python
  class PostgresUserRepository:
      def __init__(self, db_connection: Connection) -> None:
          self.db_connection = db_connection
          
      def get_user(self, user_id: str) -> User:
          # Implementation using PostgreSQL
          ...
      
      def save_user(self, user: User) -> None:
          # Implementation using PostgreSQL
          ...
  ```
