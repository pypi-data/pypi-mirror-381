# coding: utf-8

"""
    Hostinger API Python SDK

    API Version: 0.1.16

    NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
    If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from hostinger_api.models.vpsv1_docker_manager_container_port_resource import VPSV1DockerManagerContainerPortResource
from hostinger_api.models.vpsv1_docker_manager_container_stats_resource import VPSV1DockerManagerContainerStatsResource
from typing import Optional, Set
from typing_extensions import Self

class VPSV1DockerManagerContainerResource(BaseModel):
    """
    VPSV1DockerManagerContainerResource
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique container identifier (short form of Docker container ID)")
    name: Optional[StrictStr] = Field(default=None, description="Container name as defined in docker-compose or assigned by Docker")
    image: Optional[StrictStr] = Field(default=None, description="Docker image name and tag used to create this container")
    command: Optional[StrictStr] = Field(default=None, description="Command being executed inside the container (may be truncated with ...)")
    status: Optional[StrictStr] = Field(default=None, description="Human-readable container status including uptime, exit codes, or error information")
    state: Optional[StrictStr] = Field(default=None, description="Programmatic container lifecycle state for automated processing")
    health: Optional[StrictStr] = Field(default=None, description="Container health status")
    ports: Optional[List[VPSV1DockerManagerContainerPortResource]] = Field(default=None, description="Array of [`VPS.V1.DockerManager.ContainerPortResource`](#model/vpsv1dockermanagercontainerportresource)")
    stats: Optional[VPSV1DockerManagerContainerStatsResource] = None
    __properties: ClassVar[List[str]] = ["id", "name", "image", "command", "status", "state", "health", "ports", "stats"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['created', 'running', 'restarting', 'exited', 'paused', 'dead', 'stopping']):
            raise ValueError("must be one of enum values ('created', 'running', 'restarting', 'exited', 'paused', 'dead', 'stopping')")
        return value

    @field_validator('health')
    def health_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['starting', 'healthy', 'unhealthy', '']):
            raise ValueError("must be one of enum values ('starting', 'healthy', 'unhealthy', '')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VPSV1DockerManagerContainerResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item_ports in self.ports:
                if _item_ports:
                    _items.append(_item_ports.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # set to None if stats (nullable) is None
        # and model_fields_set contains the field
        if self.stats is None and "stats" in self.model_fields_set:
            _dict['stats'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VPSV1DockerManagerContainerResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "image": obj.get("image"),
            "command": obj.get("command"),
            "status": obj.get("status"),
            "state": obj.get("state"),
            "health": obj.get("health"),
            "ports": [VPSV1DockerManagerContainerPortResource.from_dict(_item) for _item in obj["ports"]] if obj.get("ports") is not None else None,
            "stats": VPSV1DockerManagerContainerStatsResource.from_dict(obj["stats"]) if obj.get("stats") is not None else None
        })
        return _obj


