# coding: utf-8

"""
    Hostinger API Python SDK

    API Version: 0.1.16

    NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
    If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BillingV1SubscriptionSubscriptionResource(BaseModel):
    """
    BillingV1SubscriptionSubscriptionResource
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Subscription ID")
    name: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    billing_period: Optional[StrictInt] = None
    billing_period_unit: Optional[StrictStr] = None
    currency_code: Optional[StrictStr] = None
    total_price: Optional[StrictInt] = Field(default=None, description="Total price in cents")
    renewal_price: Optional[StrictInt] = Field(default=None, description="Renewal price in cents")
    is_auto_renewed: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None
    next_billing_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "name", "status", "billing_period", "billing_period_unit", "currency_code", "total_price", "renewal_price", "is_auto_renewed", "created_at", "expires_at", "next_billing_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'paused', 'cancelled', 'not_renewing', 'transferred', 'in_trial', 'future']):
            raise ValueError("must be one of enum values ('active', 'paused', 'cancelled', 'not_renewing', 'transferred', 'in_trial', 'future')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingV1SubscriptionSubscriptionResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if next_billing_at (nullable) is None
        # and model_fields_set contains the field
        if self.next_billing_at is None and "next_billing_at" in self.model_fields_set:
            _dict['next_billing_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingV1SubscriptionSubscriptionResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "billing_period": obj.get("billing_period"),
            "billing_period_unit": obj.get("billing_period_unit"),
            "currency_code": obj.get("currency_code"),
            "total_price": obj.get("total_price"),
            "renewal_price": obj.get("renewal_price"),
            "is_auto_renewed": obj.get("is_auto_renewed"),
            "created_at": obj.get("created_at"),
            "expires_at": obj.get("expires_at"),
            "next_billing_at": obj.get("next_billing_at")
        })
        return _obj


