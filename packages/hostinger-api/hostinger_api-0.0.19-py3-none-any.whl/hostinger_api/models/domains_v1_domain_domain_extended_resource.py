# coding: utf-8

"""
    Hostinger API Python SDK

    API Version: 0.1.16

    NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
    If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from hostinger_api.models.domains_v1_domain_domain_extended_resource_domain_contacts import DomainsV1DomainDomainExtendedResourceDomainContacts
from hostinger_api.models.domains_v1_domain_domain_extended_resource_name_servers import DomainsV1DomainDomainExtendedResourceNameServers
from typing import Optional, Set
from typing_extensions import Self

class DomainsV1DomainDomainExtendedResource(BaseModel):
    """
    DomainsV1DomainDomainExtendedResource
    """ # noqa: E501
    domain: Optional[StrictStr] = Field(default=None, description="Domain name")
    status: Optional[StrictStr] = Field(default=None, description="Status of the domain")
    message: Optional[StrictStr] = None
    is_privacy_protection_allowed: Optional[StrictBool] = Field(default=None, description="Is privacy protection allowed for the domain")
    is_privacy_protected: Optional[StrictBool] = Field(default=None, description="Is privacy protection enabled for the domain")
    is_lockable: Optional[StrictBool] = Field(default=None, description="Is domain allowed to be locked")
    is_locked: Optional[StrictBool] = Field(default=None, description="Is domain locked")
    name_servers: Optional[DomainsV1DomainDomainExtendedResourceNameServers] = None
    child_name_servers: Optional[List[List[StrictStr]]] = Field(default=None, description="Child name servers")
    domain_contacts: Optional[DomainsV1DomainDomainExtendedResourceDomainContacts] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    var_60_days_lock_expires_at: Optional[datetime] = Field(default=None, alias="60_days_lock_expires_at")
    registered_at: Optional[datetime] = None
    expires_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["domain", "status", "message", "is_privacy_protection_allowed", "is_privacy_protected", "is_lockable", "is_locked", "name_servers", "child_name_servers", "domain_contacts", "created_at", "updated_at", "60_days_lock_expires_at", "registered_at", "expires_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'pending_setup', 'expired', 'requested', 'pending_verification', 'deleted', 'suspended', 'failed']):
            raise ValueError("must be one of enum values ('active', 'pending_setup', 'expired', 'requested', 'pending_verification', 'deleted', 'suspended', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainsV1DomainDomainExtendedResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name_servers
        if self.name_servers:
            _dict['name_servers'] = self.name_servers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain_contacts
        if self.domain_contacts:
            _dict['domain_contacts'] = self.domain_contacts.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if var_60_days_lock_expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.var_60_days_lock_expires_at is None and "var_60_days_lock_expires_at" in self.model_fields_set:
            _dict['60_days_lock_expires_at'] = None

        # set to None if registered_at (nullable) is None
        # and model_fields_set contains the field
        if self.registered_at is None and "registered_at" in self.model_fields_set:
            _dict['registered_at'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainsV1DomainDomainExtendedResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "is_privacy_protection_allowed": obj.get("is_privacy_protection_allowed"),
            "is_privacy_protected": obj.get("is_privacy_protected"),
            "is_lockable": obj.get("is_lockable"),
            "is_locked": obj.get("is_locked"),
            "name_servers": DomainsV1DomainDomainExtendedResourceNameServers.from_dict(obj["name_servers"]) if obj.get("name_servers") is not None else None,
            "child_name_servers": obj.get("child_name_servers"),
            "domain_contacts": DomainsV1DomainDomainExtendedResourceDomainContacts.from_dict(obj["domain_contacts"]) if obj.get("domain_contacts") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "60_days_lock_expires_at": obj.get("60_days_lock_expires_at"),
            "registered_at": obj.get("registered_at"),
            "expires_at": obj.get("expires_at")
        })
        return _obj


