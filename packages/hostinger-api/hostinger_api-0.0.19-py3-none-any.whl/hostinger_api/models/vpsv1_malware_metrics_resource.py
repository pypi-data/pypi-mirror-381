# coding: utf-8

"""
    Hostinger API Python SDK

    API Version: 0.1.16

    NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
    If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VPSV1MalwareMetricsResource(BaseModel):
    """
    VPSV1MalwareMetricsResource
    """ # noqa: E501
    records: Optional[StrictInt] = Field(default=None, description="Records found during last scan")
    malicious: Optional[StrictInt] = Field(default=None, description="Malicious files found during last scan")
    compromised: Optional[StrictInt] = Field(default=None, description="Compromised files found during last scan")
    scanned_files: Optional[StrictInt] = Field(default=None, description="Total number of files scanned during last scan")
    scan_started_at: Optional[datetime] = None
    scan_ended_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["records", "malicious", "compromised", "scanned_files", "scan_started_at", "scan_ended_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VPSV1MalwareMetricsResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if scan_ended_at (nullable) is None
        # and model_fields_set contains the field
        if self.scan_ended_at is None and "scan_ended_at" in self.model_fields_set:
            _dict['scan_ended_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VPSV1MalwareMetricsResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "records": obj.get("records"),
            "malicious": obj.get("malicious"),
            "compromised": obj.get("compromised"),
            "scanned_files": obj.get("scanned_files"),
            "scan_started_at": obj.get("scan_started_at"),
            "scan_ended_at": obj.get("scan_ended_at")
        })
        return _obj


