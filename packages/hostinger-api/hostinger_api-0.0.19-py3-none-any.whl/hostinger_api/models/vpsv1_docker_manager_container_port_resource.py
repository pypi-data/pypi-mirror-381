# coding: utf-8

"""
    Hostinger API Python SDK

    API Version: 0.1.16

    NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
    If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VPSV1DockerManagerContainerPortResource(BaseModel):
    """
    VPSV1DockerManagerContainerPortResource
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Port mapping type - published (accessible from host), exposed (only internal), or range variants")
    protocol: Optional[StrictStr] = Field(default=None, description="Network protocol used for communication")
    host_ip: Optional[StrictStr] = Field(default=None, description="IP address on host where port is bound (null for exposed-only ports)")
    host_port: Optional[StrictInt] = Field(default=None, description="Port number on host machine (null for exposed-only or range ports)")
    container_port: Optional[StrictInt] = Field(default=None, description="Port number inside container (null for range ports)")
    host_port_start: Optional[StrictInt] = Field(default=None, description="Starting port number in host port range (null for single ports)")
    host_port_end: Optional[StrictInt] = Field(default=None, description="Ending port number in host port range (null for single ports)")
    container_port_start: Optional[StrictInt] = Field(default=None, description="Starting port number in container port range (null for single ports)")
    container_port_end: Optional[StrictInt] = Field(default=None, description="Ending port number in container port range (null for single ports)")
    __properties: ClassVar[List[str]] = ["type", "protocol", "host_ip", "host_port", "container_port", "host_port_start", "host_port_end", "container_port_start", "container_port_end"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['published', 'published_range', 'exposed', 'exposed_range']):
            raise ValueError("must be one of enum values ('published', 'published_range', 'exposed', 'exposed_range')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tcp', 'udp']):
            raise ValueError("must be one of enum values ('tcp', 'udp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VPSV1DockerManagerContainerPortResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if host_ip (nullable) is None
        # and model_fields_set contains the field
        if self.host_ip is None and "host_ip" in self.model_fields_set:
            _dict['host_ip'] = None

        # set to None if host_port (nullable) is None
        # and model_fields_set contains the field
        if self.host_port is None and "host_port" in self.model_fields_set:
            _dict['host_port'] = None

        # set to None if container_port (nullable) is None
        # and model_fields_set contains the field
        if self.container_port is None and "container_port" in self.model_fields_set:
            _dict['container_port'] = None

        # set to None if host_port_start (nullable) is None
        # and model_fields_set contains the field
        if self.host_port_start is None and "host_port_start" in self.model_fields_set:
            _dict['host_port_start'] = None

        # set to None if host_port_end (nullable) is None
        # and model_fields_set contains the field
        if self.host_port_end is None and "host_port_end" in self.model_fields_set:
            _dict['host_port_end'] = None

        # set to None if container_port_start (nullable) is None
        # and model_fields_set contains the field
        if self.container_port_start is None and "container_port_start" in self.model_fields_set:
            _dict['container_port_start'] = None

        # set to None if container_port_end (nullable) is None
        # and model_fields_set contains the field
        if self.container_port_end is None and "container_port_end" in self.model_fields_set:
            _dict['container_port_end'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VPSV1DockerManagerContainerPortResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "protocol": obj.get("protocol"),
            "host_ip": obj.get("host_ip"),
            "host_port": obj.get("host_port"),
            "container_port": obj.get("container_port"),
            "host_port_start": obj.get("host_port_start"),
            "host_port_end": obj.get("host_port_end"),
            "container_port_start": obj.get("container_port_start"),
            "container_port_end": obj.get("container_port_end")
        })
        return _obj


