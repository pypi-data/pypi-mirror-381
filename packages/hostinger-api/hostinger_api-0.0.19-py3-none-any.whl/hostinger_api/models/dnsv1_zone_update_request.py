# coding: utf-8

"""
    Hostinger API Python SDK

    API Version: 0.1.16

    NOTE: This file is auto-generated, DO NOT EDIT THIS FILE MANUALLY!
    If you want to contribute or request a new feature, please create an issue or pull request on https://github.com/hostinger/api
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from hostinger_api.models.dnsv1_zone_update_request_zone_inner import DNSV1ZoneUpdateRequestZoneInner
from typing import Optional, Set
from typing_extensions import Self

class DNSV1ZoneUpdateRequest(BaseModel):
    """
    DNSV1ZoneUpdateRequest
    """ # noqa: E501
    overwrite: Optional[StrictBool] = Field(default=True, description="If `true`, resource records (RRs) matching name and type will be deleted and new RRs will be created, otherwise resource records' ttl's are updated and new records are appended. If no matching RRs are found, they are created.")
    zone: List[DNSV1ZoneUpdateRequestZoneInner]
    __properties: ClassVar[List[str]] = ["overwrite", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DNSV1ZoneUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in zone (list)
        _items = []
        if self.zone:
            for _item_zone in self.zone:
                if _item_zone:
                    _items.append(_item_zone.to_dict())
            _dict['zone'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DNSV1ZoneUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "overwrite": obj.get("overwrite") if obj.get("overwrite") is not None else True,
            "zone": [DNSV1ZoneUpdateRequestZoneInner.from_dict(_item) for _item in obj["zone"]] if obj.get("zone") is not None else None
        })
        return _obj


