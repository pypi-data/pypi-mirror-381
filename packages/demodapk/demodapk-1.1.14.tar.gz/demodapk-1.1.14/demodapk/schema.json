{
  "$schema": "https://json-schema.org/draft-07/schema",
  "$id": "https://demodapk.netlify.app/schema.json",
  "title": "DemodAPK Config",
  "description": "Schema for demodapk configuration JSON",
  "type": "object",
  "properties": {
    "DemodAPK": {
      "type": "object",
      "description": "Main container for all app configurations, keyed by package name.",
      "patternProperties": {
        "^[a-zA-Z0-9_.]+$": {
          "type": "object",
          "description": "Configuration for a single app, identified by its package name.",
          "properties": {
            "apkeditor": {
              "type": "object",
              "description": "Configuration for APKEditor behavior.",
              "properties": {
                "javaopts": {
                  "type": "string",
                  "description": "Options passed to Java when running APK tool (e.g. memory settings)."
                },
                "jarpath": {
                  "type": "string",
                  "description": "Path to APKEditor.jar"
                },
                "output": {
                  "type": "string",
                  "description": "Directory path where decoded/build output is stored."
                },
                "dex": {
                  "type": "boolean",
                  "default": false,
                  "oneOf": [
                    {
                      "const": true,
                      "description": "Copy raw dex files."
                    },
                    {
                      "const": false,
                      "description": "Make baksmali files."
                    }
                  ],
                  "description": "Whether to include dex folder processing."
                },
                "clean": {
                  "type": "boolean",
                  "default": false,
                  "description": "Keep only the rebuilt APK."
                }
              },
              "additionalProperties": false
            },
            "app_name": {
              "type": "string",
              "description": "The name of the app."
            },
            "commands": {
              "type": "object",
              "description": "Commands to run at different stages of the build process.",
              "properties": {
                "quietly": {
                  "type": "boolean",
                  "default": false,
                  "oneOf": [
                    {
                      "const": true,
                      "description": "Every commands run quietly in background."
                    },
                    {
                      "const": false,
                      "description": "Normal output from any commands run."
                    }
                  ],
                  "description": "If true, suppress output of commands."
                },
                "begin": {
                  "type": "array",
                  "description": "Commands to execute at the beginning of processing.",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "A raw shell command string."
                      },
                      {
                        "type": "object",
                        "description": "Structured command definition.",
                        "properties": {
                          "run": {
                            "type": "string",
                            "description": "The command to run."
                          },
                          "title": {
                            "type": "string",
                            "description": "A descriptive label for this command."
                          },
                          "quiet": {
                            "type": "boolean",
                            "anyOf": [
                              {
                                "const": true,
                                "description": "Run the command in quiet mode (no output will be shown)."
                              },
                              {
                                "const": false,
                                "description": "Run the command in normal mode (output will be displayed)."
                              }
                            ],
                            "description": "Override quiet mode for this command."
                          }
                        },
                        "required": [
                          "run"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "end": {
                  "type": "array",
                  "description": "Commands to execute at the end of processing.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "run": {
                        "type": "string",
                        "description": "The command to run."
                      },
                      "title": {
                        "type": "string",
                        "description": "A descriptive label for this command."
                      },
                      "quiet": {
                        "type": "boolean",
                        "anyOf": [
                          {
                            "const": true,
                            "description": "Run the command in quiet mode (no output will be shown)."
                          },
                          {
                            "const": false,
                            "description": "Run the command in normal mode (output will be displayed)."
                          }
                        ],
                        "description": "Override quiet mode for this command."
                      }
                    },
                    "required": [
                      "run"
                    ],
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            },
            "level": {
              "type": "integer",
              "default": 2,
              "enum": [
                0,
                1,
                2,
                3,
                4
              ],
              "anyOf": [
                {
                  "const": 0,
                  "description": "Basic replacements only (package name, android:name, authorities)."
                },
                {
                  "const": 1,
                  "description": "Basic replacements + clear android:taskAffinity."
                },
                {
                  "const": 2,
                  "description": "Basic replacements + update android:taskAffinity to new package name."
                },
                {
                  "const": 3,
                  "description": "Level 2 changes + update android:host and cct.android:host with new package name."
                },
                {
                  "const": 4,
                  "description": "Level 1 changes + update android:host and cct.android:host with new package name."
                }
              ],
              "description": "Configuration manifest level edit or priority for the app."
            },
            "package": {
              "type": "string",
              "description": "The new package name to assign to the app."
            },
            "facebook": {
              "type": "object",
              "description": "Facebook SDK configuration values.",
              "properties": {
                "app_id": {
                  "type": "string",
                  "description": "Facebook application ID."
                },
                "client_token": {
                  "type": "string",
                  "description": "Facebook client token."
                },
                "login_protocol_scheme": {
                  "type": "string",
                  "default": "fb",
                  "description": "Facebook login protocol scheme"
                }
              },
              "additionalProperties": false
            },
            "manifest": {
              "type": "object",
              "description": "Configuration for modifying AndroidManifest.xml.",
              "properties": {
                "remove_metadata": {
                  "type": "array",
                  "description": "List of metadata keys to remove from the manifest.",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "Hexsaly": {
      "type": "object",
      "description": "An hex binary editor that supports replacement and insertion from a configuration file, including wildcard pattern scanning.",
      "properties": {
        "menu": {
          "type": "boolean",
          "description": "The menu selection files mode.",
          "anyOf": [
            {
              "const": true,
              "description": "Enable"
            },
            {
              "const": false,
              "description": "Disable"
            }
          ]
        },
        "style": {
          "type": "boolean",
          "description": "Toggle styled output for logging.",
          "anyOf": [
            {
              "const": true,
              "description": "Enable (use tags like [Found], [Patch], etc...)"
            },
            {
              "const": false,
              "description": "Disable (uses plain messages)"
            }
          ]
        },
        "files": {
          "type": "array",
          "description": "List of files to patch.",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Custom name in menu selection."
              },
              "dump_cs": {
                "type": "string",
                "description": "The output file from Il2cppDumper."
              },
              "open": {
                "type": "string",
                "description": "Open and write directly, no need for input or output paths."
              },
              "input": {
                "type": "string",
                "description": "Path to the input binary file."
              },
              "output": {
                "type": "string",
                "description": "Path to the output binary file."
              },
              "require": {
                "type": "boolean",
                "description": "Whether this file is required before processing.",
                "anyOf": [
                  {
                    "const": true,
                    "description": "Enable"
                  },
                  {
                    "const": false,
                    "description": "Disable"
                  }
                ]
              },
              "patches": {
                "type": "array",
                "description": "Patch definitions applied to the file.",
                "items": {
                  "type": "object",
                  "properties": {
                    "method_name": {
                      "type": "string",
                      "description": "The name of the method to patch when using Il2cppDumper references."
                    },
                    "offset": {
                      "type": "string",
                      "pattern": "^0x[0-9A-Fa-f]+$",
                      "description": "Hexadecimal memory/file offset where the patch should be applied. Must begin with 0x."
                    },
                    "wildcard": {
                      "type": "string",
                      "description": "A wildcard byte pattern (e.g., ?? ?? ??) to scan for in the binary."
                    },
                    "hex_replace": {
                      "type": "string",
                      "pattern": "^([0-9A-Fa-f?]{2}\\s?)+$",
                      "description": "Sequence of hex bytes (with optional wildcards) to overwrite existing data. Example: 20 00 80 D2 C0 03 5F D6."
                    },
                    "hex_insert": {
                      "type": "string",
                      "pattern": "^([0-9A-Fa-f]{2}\\s?)+$",
                      "description": "Sequence of hex bytes to insert in place of a match. Example: 00"
                    }
                  },
                  "minProperties": 2,
                  "maxProperties": 2,
                  "additionalProperties": false,
                  "anyOf": [
                    {
                      "description": "Patch by method name with a hex replacement.",
                      "required": [
                        "method_name",
                        "hex_replace"
                      ]
                    },
                    {
                      "description": "Patch by method name with a hex insertion.",
                      "required": [
                        "method_name",
                        "hex_insert"
                      ]
                    },
                    {
                      "description": "Patch by file offset with a hex replacement.",
                      "required": [
                        "offset",
                        "hex_replace"
                      ]
                    },
                    {
                      "description": "Patch by file offset with a hex insertion.",
                      "required": [
                        "offset",
                        "hex_insert"
                      ]
                    },
                    {
                      "description": "Patch by wildcard pattern with a hex insertion.",
                      "required": [
                        "wildcard",
                        "hex_insert"
                      ]
                    },
                    {
                      "description": "Patch by wildcard pattern with a hex replacement.",
                      "required": [
                        "wildcard",
                        "hex_replace"
                      ]
                    }
                  ],
                  "not": {
                    "anyOf": [
                      {
                        "required": [
                          "method_name",
                          "offset"
                        ]
                      },
                      {
                        "required": [
                          "method_name",
                          "wildcard"
                        ]
                      },
                      {
                        "required": [
                          "offset",
                          "wildcard"
                        ]
                      },
                      {
                        "required": [
                          "hex_replace",
                          "hex_insert"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "allOf": [
              {
                "anyOf": [
                  {
                    "required": [
                      "open"
                    ]
                  },
                  {
                    "required": [
                      "input"
                    ]
                  }
                ]
              },
              {
                "not": {
                  "required": [
                    "open",
                    "input"
                  ]
                }
              }
            ],
            "additionalProperties": false
          }
        }
      },
      "required": [
        "menu",
        "files"
      ],
      "additionalProperties": false
    }
  },
  "additionalProperties": true
}
