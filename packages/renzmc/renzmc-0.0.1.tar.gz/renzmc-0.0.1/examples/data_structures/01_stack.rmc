// ============================================
// Data Structure: Stack (Tumpukan)
// ============================================
// Stack adalah struktur data LIFO (Last In First Out)
// Elemen terakhir yang masuk adalah yang pertama keluar

tampilkan "╔════════════════════════════════════════╗"
tampilkan "║     IMPLEMENTASI STACK (TUMPUKAN)     ║"
tampilkan "╚════════════════════════════════════════╝"
tampilkan ""

// Buat class Stack
buat fungsi buat_stack
    stack itu []
    hasil stack
selesai

// Push: Tambah elemen ke stack
buat fungsi push dengan stack, item
    tambah(stack, item)
    tampilkan f"✓ Push: {item} ditambahkan ke stack"
selesai

// Pop: Ambil dan hapus elemen teratas
buat fungsi pop dengan stack
    jika panjang(stack) == 0
        tampilkan "✗ Stack kosong! Tidak bisa pop"
        hasil tidak_ada
    selesai
    
    item itu stack[panjang(stack) - 1]
    hapus_pada(stack, panjang(stack) - 1)
    tampilkan f"✓ Pop: {item} diambil dari stack"
    hasil item
selesai

// Peek: Lihat elemen teratas tanpa menghapus
buat fungsi peek dengan stack
    jika panjang(stack) == 0
        tampilkan "✗ Stack kosong!"
        hasil tidak_ada
    selesai
    
    hasil stack[panjang(stack) - 1]
selesai

// Is Empty: Cek apakah stack kosong
buat fungsi is_empty dengan stack
    hasil panjang(stack) == 0
selesai

// Size: Ukuran stack
buat fungsi size dengan stack
    hasil panjang(stack)
selesai

// Tampilkan stack
buat fungsi tampilkan_stack dengan stack
    jika panjang(stack) == 0
        tampilkan "  Stack: [] (kosong)"
    kalau tidak
        tampilkan f"  Stack: {stack}"
        tampilkan f"  Top -> {stack[panjang(stack) - 1]}"
    selesai
selesai

// ============================================
// DEMO STACK
// ============================================

tampilkan "=== DEMO 1: Operasi Dasar Stack ==="
tampilkan ""

// Buat stack baru
my_stack itu panggil buat_stack
tampilkan "Stack dibuat!"
panggil tampilkan_stack dengan my_stack
tampilkan ""

// Push beberapa elemen
tampilkan "--- Push Operations ---"
panggil push dengan my_stack, 10
panggil push dengan my_stack, 20
panggil push dengan my_stack, 30
panggil push dengan my_stack, 40
tampilkan ""
panggil tampilkan_stack dengan my_stack
tampilkan ""

// Peek
tampilkan "--- Peek Operation ---"
top itu panggil peek dengan my_stack
tampilkan f"✓ Peek: Elemen teratas adalah {top}"
tampilkan ""

// Pop beberapa elemen
tampilkan "--- Pop Operations ---"
panggil pop dengan my_stack
panggil pop dengan my_stack
tampilkan ""
panggil tampilkan_stack dengan my_stack
tampilkan ""

// Cek ukuran
ukuran_stack itu panggil size dengan my_stack
is_kosong itu panggil is_empty dengan my_stack
tampilkan f"✓ Ukuran stack: {ukuran_stack}"
tampilkan f"✓ Stack kosong? {is_kosong}"
tampilkan ""

// ============================================
// DEMO 2: Aplikasi Stack - Reverse String
// ============================================

tampilkan "=== DEMO 2: Reverse String dengan Stack ==="
tampilkan ""

buat fungsi reverse_string dengan text
    stack itu panggil buat_stack
    
    // Push semua karakter ke stack
    untuk setiap char dari text
        panggil push dengan stack, char
    selesai
    
    // Pop semua karakter untuk reverse
    result itu ""
    selama panjang(stack) > 0
        char itu panggil pop dengan stack
        result itu result + char
    selesai
    
    hasil result
selesai

original itu "RENZMC"
reversed itu panggil reverse_string dengan original
tampilkan f"Original: {original}"
tampilkan f"Reversed: {reversed}"
tampilkan ""

// ============================================
// DEMO 3: Aplikasi Stack - Balanced Parentheses
// ============================================

tampilkan "=== DEMO 3: Cek Kurung Seimbang ==="
tampilkan ""

buat fungsi is_balanced dengan expression
    stack itu panggil buat_stack
    opening itu ["(", "[", "{"]
    closing itu [")", "]", "}"]
    pairs itu {"(": ")", "[": "]", "{": "}"}
    
    untuk setiap char dari expression
        jika char dalam opening
            panggil push dengan stack, char
        kalau tidak jika char dalam closing
            jika panjang(stack) == 0
                hasil salah
            selesai
            
            top itu panggil pop dengan stack
            jika pairs[top] != char
                hasil salah
            selesai
        selesai
    selesai
    
    hasil panjang(stack) == 0
selesai

// Test cases
test_cases itu [
    "(())",
    "({[]})",
    "(()",
    "({[}])",
    "{[()()]}"
]

untuk setiap expr dari test_cases
    balanced itu panggil is_balanced dengan expr
    status itu "✓ Seimbang" jika balanced kalau tidak "✗ Tidak Seimbang"
    tampilkan f"{expr:15} -> {status}"
selesai

tampilkan ""
tampilkan "╔════════════════════════════════════════╗"
tampilkan "║  Stack Implementation Complete! ✅     ║"
tampilkan "╚════════════════════════════════════════╝"