"""Core functionality for TextIt."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['init_configuration']

# %% ../nbs/00_core.ipynb 3
import os
import logging
import configparser

# %% ../nbs/00_core.ipynb 4
syslog = logging.getLogger(f"root.{__name__}")


# %% ../nbs/00_core.ipynb 6
def get_config_path(app_name):
    basepath =os.getenv('APPDATA', os.getenv('HOME', os.getenv('USERPROFILE', os.getcwd())))
    config_path = os.path.join(basepath, '.config','textit', str(app_name))
    os.makedirs(config_path, exist_ok=True)
    return config_path

def get_log_path(app_name):
    log_path = os.path.join(get_config_path(app_name), 'logs')
    os.makedirs(log_path, exist_ok=True)
    return log_path

# %% ../nbs/00_core.ipynb 8
def init_configuration(
        app_name
    ):
    
    """
        Opens the specified configuration file (.ini) and 
        returns a proxy-object that saves on modify.
    """

    if not hasattr(init_configuration, 'configurations'):
        init_configuration.configurations = {}

    configuration_file = os.path.join(get_config_path(app_name), 'config.ini') # filename including path for the config file 

    config_file = os.path.abspath(configuration_file)
    if config_file in init_configuration.configurations:
        return init_configuration.configurations[config_file]

    config_parser = configparser.ConfigParser()
    
    def update_config():
        with open(config_file, 'w') as f:
            config_parser.write(f)

    def read_config():
        config_parser.read(config_file, encoding='utf-8')

    class _config_section_proxy():
        def __init__(self, section_key):
            self.section_key = section_key

        def __getitem__(self, key):
            read_config()
            return config_parser.__getitem__(self.section_key).__getitem__(key)

        def __setitem__(self, key, value):
            read_config()
            config_parser.__getitem__(self.section_key).__setitem__(key, str(value))
            update_config()

        def __delitem__(self, key):
            read_config()
            config_parser.__getitem__(self.section_key).__delitem__(key)
            update_config()

        def __contains__(self, key):
            read_config()
            return config_parser.__getitem__(self.section_key).__contains__(key)

        def __repr__(self):
            read_config()
            return config_parser.__getitem__(self.section_key).__repr__()

    class _config_proxy():
        def __init__(self, config_file):
            syslog.info(f"init configuration for {config_file}")

        def __getitem__(self, key):
            return _config_section_proxy(key)

        def __setitem__(self, key, value):
            read_config()
            config_parser.__setitem__(key, value)
            update_config()

        def __delitem__(self, key):
            read_config()
            config_parser.__delitem__(key)
            update_config()

        def __contains__(self, key):
            read_config()
            return config_parser.__contains__(key)

        def __repr__(self):
            read_config()
            return f"Configuration proxy for {config_file} using {config_parser.__repr__()}"
    
    init_configuration.configurations[config_file] = _config_proxy(config_file)

    return init_configuration.configurations[config_file]

