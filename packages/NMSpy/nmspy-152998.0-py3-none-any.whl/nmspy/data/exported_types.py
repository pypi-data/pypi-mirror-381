import ctypes
from enum import IntEnum
from typing import Annotated

from pymhf.core.hooking import Structure
from pymhf.utils.partial_struct import partial_struct, Field, c_enum32

import nmspy.data.basic_types as basic
import nmspy.data.enums as enums


@partial_struct
class cTkNoiseFlattenOptions(Structure):
    class eFlatteningEnum(IntEnum):
        None_ = 0x0
        Flatten = 0x1
        TerrainEdits = 0x2

    Flattening: Annotated[
        c_enum32[eFlatteningEnum], Field(c_enum32[eFlatteningEnum], 0x0)
    ]

    class eWaterPlacementEnum(IntEnum):
        None_ = 0x0
        OnWater = 0x1
        Underwater = 0x2
        UnderwaterOnly = 0x3

    WaterPlacement: Annotated[
        c_enum32[eWaterPlacementEnum], Field(c_enum32[eWaterPlacementEnum], 0x4)
    ]


@partial_struct
class cTkNoiseFlattenPoint(Structure):
    FlattenType: Annotated[cTkNoiseFlattenOptions, Field(cTkNoiseFlattenOptions, 0x0)]
    Classification: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    Density: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    FlattenRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Placement: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    TurbulenceAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    TurbulenceFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    TurbulenceOctaves: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AddLandingPad: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    AddShelter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]
    AddWaypoint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26)]


@partial_struct
class cTkNoiseFlattenFixedPosition(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    FlattenPoint: Annotated[cTkNoiseFlattenPoint, Field(cTkNoiseFlattenPoint, 0x10)]


@partial_struct
class cTkNoiseUberData(Structure):
    AltitudeErosion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AmplifyFeatures: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]

    class eDebugNoiseTypeEnum(IntEnum):
        Plane = 0x0
        Check = 0x1
        Sine = 0x2
        Uber = 0x3

    DebugNoiseType: Annotated[
        c_enum32[eDebugNoiseTypeEnum], Field(c_enum32[eDebugNoiseTypeEnum], 0x8)
    ]
    Gain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Lacunarity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Octaves: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    PerturbFeatures: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    RemapFromMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    RemapFromMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    RemapToMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    RemapToMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    RidgeErosion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    SharpToRoundFeatures: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    SlopeBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    SlopeErosion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    SlopeGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]


@partial_struct
class cTkNoiseSuperFormulaData(Structure):
    Form_m: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Form_n1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Form_n2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Form_n3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cTkNoiseSuperPrimitiveData(Structure):
    BottomRadiusOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CornerRadiusXY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    CornerRadiusZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Depth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Height: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Thickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cTkNoiseLayerData(Structure):
    FrequencyScaleY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Height: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]

    class eNoiseTypeEnum(IntEnum):
        Plane = 0x0
        Check = 0x1
        Sine = 0x2
        Smooth = 0x3
        Fractal = 0x4
        Ridged = 0x5
        Billow = 0x6
        Erosion = 0x7
        Volcanic = 0x8
        Glacial = 0x9
        Plateau = 0xA

    NoiseType: Annotated[c_enum32[eNoiseTypeEnum], Field(c_enum32[eNoiseTypeEnum], 0x8)]
    Octaves: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    RegionRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    RegionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SeedOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    TurbulenceAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    TurbulenceFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    TurbulenceOctaves: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    Absolute: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    Invert: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]
    Subtract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F)]


@partial_struct
class cTkDomainWarpSettings(Structure):
    FeatureSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FractalGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    FractalLacunarity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    FractalOctaves: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    FractalWeightedStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    WarpAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cTkNoiseFeatureData(Structure):
    class eFeatureTypeEnum(IntEnum):
        Tube = 0x0
        Blob = 0x1

    FeatureType: Annotated[
        c_enum32[eFeatureTypeEnum], Field(c_enum32[eFeatureTypeEnum], 0x0)
    ]
    Height: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    HeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    HeightVarianceAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    HeightVarianceFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MaximumLOD: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    Octaves: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    Offset: Annotated[
        c_enum32[enums.cTkNoiseOffsetEnum],
        Field(c_enum32[enums.cTkNoiseOffsetEnum], 0x1C),
    ]
    Ratio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    RegionSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    SeedOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    SmoothRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    TileBlendMeters: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    VoxelType: Annotated[
        c_enum32[enums.cTkNoiseVoxelTypeEnum],
        Field(c_enum32[enums.cTkNoiseVoxelTypeEnum], 0x34),
    ]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    Subtract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3D)]
    Trench: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3E)]


@partial_struct
class cTkNoiseCaveData(Structure):
    Mouth: Annotated[cTkNoiseFeatureData, Field(cTkNoiseFeatureData, 0x0)]
    Tunnel: Annotated[cTkNoiseFeatureData, Field(cTkNoiseFeatureData, 0x40)]


@partial_struct
class cTkControllerButtonLookup(Structure):
    ButtonImageLookupFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkControllerList(Structure):
    Controllers: Annotated[
        basic.cTkDynamicArray[cTkControllerButtonLookup],
        Field(basic.cTkDynamicArray[cTkControllerButtonLookup], 0x0),
    ]


@partial_struct
class cTkOpenVRControllerLookup(Structure):
    DeviceSpec: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    ResetVRViewLayerName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DeviceKeywords: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]


@partial_struct
class cTkPlatformButtonPair(Structure):
    ButtonId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PlatformId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Size: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]


@partial_struct
class cTkOpenVRControllerList(Structure):
    Devices: Annotated[
        basic.cTkDynamicArray[cTkOpenVRControllerLookup],
        Field(basic.cTkDynamicArray[cTkOpenVRControllerLookup], 0x0),
    ]


@partial_struct
class cTkTriggerFeedbackData(Structure):
    class eFeedbackTypeEnum(IntEnum):
        None_ = 0x0
        Feedback = 0x1
        Weapon = 0x2
        Vibration = 0x3

    FeedbackType: Annotated[
        c_enum32[eFeedbackTypeEnum], Field(c_enum32[eFeedbackTypeEnum], 0x0)
    ]
    Frequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Position: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cTkVirtualBindingAltLayer(Structure):
    HudLayerID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcInputActionMapping(Structure):
    RemappedKey: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    RemappedPad: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcInputActionMapping2(Structure):
    Action: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x0)]
    ActionSet: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    Axis: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)]
    Button: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)]


@partial_struct
class cTkImGuiWindowData(Structure):
    WindowH: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    WindowMinH: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    WindowMinW: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    WindowScroll: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    WindowTab: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    WindowW: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    WindowX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    WindowY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    Type: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x20)]
    WindowMinimised: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA0)]
    WindowOpen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA1)]
    WindowResize: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA2)]
    WindowUsed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA3)]


@partial_struct
class cTkImGuiData(Structure):
    RecentToolbox: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    WindowTable: Annotated[cTkImGuiWindowData, Field(cTkImGuiWindowData, 0xA0)]
    MainWindow: Annotated[cTkImGuiWindowData, Field(cTkImGuiWindowData, 0x52A0)]
    DimensionX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x5344)]
    DimensionY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x5348)]
    WindowCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x534C)]
    Maximised: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5350)]


@partial_struct
class cTkImGuiSettings(Structure):
    ActiveTextColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ActiveWindowBackgroundColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    ActiveWindowTitleColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    BackgroundColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    ButtonColour: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    ButtonHighlightColour: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    ButtonPressedColour: Annotated[basic.Colour, Field(basic.Colour, 0x60)]
    CloseButtonClickColour: Annotated[basic.Colour, Field(basic.Colour, 0x70)]
    CloseButtonColour: Annotated[basic.Colour, Field(basic.Colour, 0x80)]
    CloseButtonHighlightColour: Annotated[basic.Colour, Field(basic.Colour, 0x90)]
    EditBoxActiveColour: Annotated[basic.Colour, Field(basic.Colour, 0xA0)]
    EditBoxColour: Annotated[basic.Colour, Field(basic.Colour, 0xB0)]
    EditBoxSelectedColour: Annotated[basic.Colour, Field(basic.Colour, 0xC0)]
    MinimiseButtonClickColour: Annotated[basic.Colour, Field(basic.Colour, 0xD0)]
    MinimiseButtonColour: Annotated[basic.Colour, Field(basic.Colour, 0xE0)]
    MinimiseButtonHighlightColour: Annotated[basic.Colour, Field(basic.Colour, 0xF0)]
    TaskBarColour: Annotated[basic.Colour, Field(basic.Colour, 0x100)]
    TaskBarShadow: Annotated[basic.Colour, Field(basic.Colour, 0x110)]
    TextColour: Annotated[basic.Colour, Field(basic.Colour, 0x120)]
    TextDisabledColour: Annotated[basic.Colour, Field(basic.Colour, 0x130)]
    TextShadowColour: Annotated[basic.Colour, Field(basic.Colour, 0x140)]
    WindowBackgroundColour: Annotated[basic.Colour, Field(basic.Colour, 0x150)]
    WindowHighlight: Annotated[basic.Colour, Field(basic.Colour, 0x160)]
    WindowTitleColour: Annotated[basic.Colour, Field(basic.Colour, 0x170)]
    AltPlacementDistanceScrollSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x180)
    ]
    ScrollSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x184)]


@partial_struct
class cTkPostProcessData(Structure):
    BrightnessDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BrightnessFinal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    ContrastDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    ContrastFinal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    DOFFarAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    DOFFarPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    DOFNearAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    DOFNearPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    SaturationDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    SaturationFinal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cTkLSystemRestrictionData(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]

    class eRestrictionEnum(IntEnum):
        NoMoreThan = 0x0
        AtLeast = 0x1
        AtLeastIfICan = 0x2

    Restriction: Annotated[
        c_enum32[eRestrictionEnum], Field(c_enum32[eRestrictionEnum], 0x4)
    ]


@partial_struct
class cTkLSystemGlobalRestriction(Structure):
    Model: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Restrictions: Annotated[
        basic.cTkDynamicArray[cTkLSystemRestrictionData],
        Field(basic.cTkDynamicArray[cTkLSystemRestrictionData], 0x10),
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]


@partial_struct
class cTkLSystemGlobalVariation(Structure):
    Model: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Variations: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x14)]


@partial_struct
class cTkLSystemLocatorEntry(Structure):
    Model: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Restrictions: Annotated[
        basic.cTkDynamicArray[cTkLSystemRestrictionData],
        Field(basic.cTkDynamicArray[cTkLSystemRestrictionData], 0x10),
    ]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cTkLSystemInnerRule(Structure):
    Entries: Annotated[
        basic.cTkDynamicArray[cTkLSystemLocatorEntry],
        Field(basic.cTkDynamicArray[cTkLSystemLocatorEntry], 0x0),
    ]

    class eMergeProbabilityOptionsEnum(IntEnum):
        Balance = 0x0
        Prioritize = 0x1
        Replace = 0x2

    MergeProbabilityOptions: Annotated[
        c_enum32[eMergeProbabilityOptionsEnum],
        Field(c_enum32[eMergeProbabilityOptionsEnum], 0x10),
    ]
    LocatorType: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x14)
    ]


@partial_struct
class cTkLSystemRule(Structure):
    Model: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Rules: Annotated[
        basic.cTkDynamicArray[cTkLSystemInnerRule],
        Field(basic.cTkDynamicArray[cTkLSystemInnerRule], 0x10),
    ]

    class eRuleTypeEnum(IntEnum):
        Default = 0x0
        BaseRule = 0x1

    RuleType: Annotated[c_enum32[eRuleTypeEnum], Field(c_enum32[eRuleTypeEnum], 0x20)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x24)]


@partial_struct
class cTkLSystemRuleTemplate(Structure):
    LSystem: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10)]


@partial_struct
class cTkLSystemRulesData(Structure):
    GlobalRestriction: Annotated[
        basic.cTkDynamicArray[cTkLSystemGlobalRestriction],
        Field(basic.cTkDynamicArray[cTkLSystemGlobalRestriction], 0x0),
    ]
    GlobalVariation: Annotated[
        basic.cTkDynamicArray[cTkLSystemGlobalVariation],
        Field(basic.cTkDynamicArray[cTkLSystemGlobalVariation], 0x10),
    ]
    Rules: Annotated[
        basic.cTkDynamicArray[cTkLSystemRule],
        Field(basic.cTkDynamicArray[cTkLSystemRule], 0x20),
    ]
    Templates: Annotated[
        basic.cTkDynamicArray[cTkLSystemRuleTemplate],
        Field(basic.cTkDynamicArray[cTkLSystemRuleTemplate], 0x30),
    ]


@partial_struct
class cTkIdSceneFilename(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkMagicModelData(Structure):
    Centre: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Vertices: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x10),
    ]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cTkInputFrame(Structure):
    LeftStick: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    RightStick: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x8)]
    LeftTrigger: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    RightTrigger: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Buttons: Annotated[ctypes.c_int16, Field(ctypes.c_int16, 0x18)]


@partial_struct
class cTkInputFrameArray(Structure):
    Array: Annotated[cTkInputFrame, Field(cTkInputFrame, 0x0)]


@partial_struct
class cTkSketchNodeConnections(Structure):
    Connections: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint32],
        Field(basic.cTkDynamicArray[ctypes.c_uint32], 0x0),
    ]


@partial_struct
class cTkSketchNodeData(Structure):
    Connections: Annotated[
        basic.cTkDynamicArray[cTkSketchNodeConnections],
        Field(basic.cTkDynamicArray[cTkSketchNodeConnections], 0x0),
    ]
    CustomData: Annotated[
        basic.cTkDynamicArray[ctypes.c_byte],
        Field(basic.cTkDynamicArray[ctypes.c_byte], 0x10),
    ]
    PositionX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    PositionY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    SelectedVariant: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]

    class eTriggerTypeEnum(IntEnum):
        Disabled = 0x0
        Interrupt = 0x1
        RunParallel = 0x2
        Blocked = 0x3
        QueueLatest = 0x4
        QueueAll = 0x5

    TriggerType: Annotated[
        c_enum32[eTriggerTypeEnum], Field(c_enum32[eTriggerTypeEnum], 0x2C)
    ]
    TypeName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x30)]


@partial_struct
class cTkHeavyAirSystem(Structure):
    AmplitudeMax: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    AmplitudeMin: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Colour1: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    Colour2: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    FadeSpeedRange: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    MajorDirection: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x50)]
    RotationSpeedRange: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x60)]
    ScaleRange: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70)]
    TwinkleRange: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x80)]
    Material: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x90)]
    Colour1Alpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    Colour2Alpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]


@partial_struct
class cTkTextureResource(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    ResHandle: Annotated[basic.GcResource, Field(basic.GcResource, 0x10)]


@partial_struct
class cTkTrophyEntry(Structure):
    TrophyId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Ps4Id: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    PCId: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x14)]
    XboxOneId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x54)
    ]


@partial_struct
class cTkTrophyData(Structure):
    Trophies: Annotated[
        basic.cTkDynamicArray[cTkTrophyEntry],
        Field(basic.cTkDynamicArray[cTkTrophyEntry], 0x0),
    ]


@partial_struct
class cTkEmitFromParticleInfo(Structure):
    class eEmissionRateTypeEnum(IntEnum):
        PerParticle = 0x0
        Distance = 0x1

    EmissionRateType: Annotated[
        c_enum32[eEmissionRateTypeEnum], Field(c_enum32[eEmissionRateTypeEnum], 0x0)
    ]
    OtherEmitterIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cTkEmitterBillboardAlignment(Structure):
    class eBillboardAlignmentEnum(IntEnum):
        Screen = 0x0
        XLocal = 0x1
        YLocal = 0x2
        ZLocal = 0x3
        NegativeXLocal = 0x4
        NegativeYLocal = 0x5
        NegativeZLocal = 0x6
        ScreenWorld = 0x7

    BillboardAlignment: Annotated[
        c_enum32[eBillboardAlignmentEnum], Field(c_enum32[eBillboardAlignmentEnum], 0x0)
    ]
    CameraFacing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cTkEmitterData(Structure):
    Particle: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cTkProductIdArray(Structure):
    Array: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cTkFoliageData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Material: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    AngleMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Density: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    DensityVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    AngleExponentially: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cTkRawID(Structure):
    Value0: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    Value1: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x8)]


@partial_struct
class cTkModelResource(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Seed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    ResHandle: Annotated[basic.GcResource, Field(basic.GcResource, 0x18)]


@partial_struct
class cTkLODModelResource(Structure):
    LODModel: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    SwapThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cTkMaterialResource(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    ResHandle: Annotated[basic.GcResource, Field(basic.GcResource, 0x10)]


@partial_struct
class cTkLanguageFontTableEntry(Structure):
    ConsoleFont: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    ConsoleFont2: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    GameFont: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    GameFont2: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    Language: Annotated[
        c_enum32[enums.cTkLanguages], Field(c_enum32[enums.cTkLanguages], 0x40)
    ]


@partial_struct
class cTkPaletteTexture(Structure):
    class eColourAltEnum(IntEnum):
        Primary = 0x0
        Alternative1 = 0x1
        Alternative2 = 0x2
        Alternative3 = 0x3
        Alternative4 = 0x4
        Unique = 0x5
        MatchGround = 0x6
        None_ = 0x7

    ColourAlt: Annotated[c_enum32[eColourAltEnum], Field(c_enum32[eColourAltEnum], 0x0)]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]

    class ePaletteEnum(IntEnum):
        Grass = 0x0
        Plant = 0x1
        Leaf = 0x2
        Wood = 0x3
        Rock = 0x4
        Stone = 0x5
        Crystal = 0x6
        Sand = 0x7
        Dirt = 0x8
        Metal = 0x9
        Paint = 0xA
        Plastic = 0xB
        Fur = 0xC
        Scale = 0xD
        Feather = 0xE
        Water = 0xF
        Cloud = 0x10
        Sky = 0x11
        Space = 0x12
        Underbelly = 0x13
        Undercoat = 0x14
        Snow = 0x15
        SkyHorizon = 0x16
        SkyFog = 0x17
        SkyHeightFog = 0x18
        SkySunset = 0x19
        SkyNight = 0x1A
        WaterNear = 0x1B
        SpaceCloud = 0x1C
        SpaceBottom = 0x1D
        SpaceSolar = 0x1E
        SpaceLight = 0x1F
        Warrior = 0x20
        Scientific = 0x21
        Trader = 0x22
        WarriorAlt = 0x23
        ScientificAlt = 0x24
        TraderAlt = 0x25
        RockSaturated = 0x26
        RockLight = 0x27
        RockDark = 0x28
        PlanetRing = 0x29
        Custom_Head = 0x2A
        Custom_Torso = 0x2B
        Custom_Chest_Armour = 0x2C
        Custom_Backpack = 0x2D
        Custom_Arms = 0x2E
        Custom_Hands = 0x2F
        Custom_Legs = 0x30
        Custom_Feet = 0x31
        Cave = 0x32
        GrassAlt = 0x33
        BioShip_Body = 0x34
        BioShip_Underbelly = 0x35
        BioShip_Cockpit = 0x36
        SailShip_Sails = 0x37
        Freighter = 0x38
        FreighterPaint = 0x39
        PirateBase = 0x3A
        PirateAlt = 0x3B
        SpaceStationBase = 0x3C
        SpaceStationAlt = 0x3D
        SpaceStationLights = 0x3E
        DeepWaterBioLum = 0x3F

    Palette: Annotated[c_enum32[ePaletteEnum], Field(c_enum32[ePaletteEnum], 0x8)]


@partial_struct
class cTkLanguagesAllowedData(Structure):
    Allowed: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cTkLanguages]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cTkLanguages]], 0x0),
    ]
    Fallback: Annotated[
        c_enum32[enums.cTkLanguages], Field(c_enum32[enums.cTkLanguages], 0x10)
    ]


@partial_struct
class cTkProceduralTexture(Structure):
    AverageColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Name: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x10)]
    TextureName: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    Palette: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x40)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]

    class eTextureGameplayUseEnum(IntEnum):
        IgnoreName = 0x0
        MatchName = 0x1
        DoNotMatchName = 0x2

    TextureGameplayUse: Annotated[
        c_enum32[eTextureGameplayUseEnum],
        Field(c_enum32[eTextureGameplayUseEnum], 0x50),
    ]
    Multiply: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]
    OverrideAverageColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x55)]


@partial_struct
class cTkProceduralTextureChosenOption(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    OptionName: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x10)]
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Layer: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Palette: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x50)]
    OverrideColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5C)]


@partial_struct
class cTkLocalisationEntry(Structure):
    Id: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    BrazilianPortuguese: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Dutch: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    English: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    French: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)]
    German: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)]
    Italian: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)]
    Japanese: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)]
    Korean: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x90)]
    LatinAmericanSpanish: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xA0)
    ]
    Polish: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xB0)]
    Portuguese: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xC0)
    ]
    Russian: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xD0)]
    SimplifiedChinese: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    Spanish: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xF0)]
    TencentChinese: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x100)
    ]
    TraditionalChinese: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x110)
    ]
    USEnglish: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x120)
    ]


@partial_struct
class cTkFloatRange(Structure):
    Maximum: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Minimum: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cTkGlobals(Structure):
    class eAssertsLevelEnum(IntEnum):
        Disabled = 0x0
        Ignored = 0x1
        Skipped = 0x2
        Enabled = 0x3

    AssertsLevel: Annotated[
        c_enum32[eAssertsLevelEnum], Field(c_enum32[eAssertsLevelEnum], 0x0)
    ]

    class eEnabledChannelsEnum(IntEnum):
        empty = 0x0
        Default = 0x1
        Note = 0x2
        Error = 0x4
        Warning = 0x8
        Info = 0x10
        Alt = 0x20
        AltWarn = 0x40
        AltError = 0x80

    EnabledChannels: Annotated[
        c_enum32[eEnabledChannelsEnum], Field(c_enum32[eEnabledChannelsEnum], 0x4)
    ]
    EnableOit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]

    class eForceGPUPresetToEnum(IntEnum):
        PC_Low = 0x0
        PC_Medium = 0x1
        PC_High = 0x2
        PC_Ultra = 0x3
        PS4 = 0x4
        PS4VR = 0x5
        PS4Pro = 0x6
        PS4ProVR = 0x7
        XB1 = 0x8
        XB1X = 0x9
        Oberon = 0xA
        MacOS = 0xB
        iOS = 0xC

    ForceGPUPresetTo: Annotated[
        c_enum32[eForceGPUPresetToEnum], Field(c_enum32[eForceGPUPresetToEnum], 0xC)
    ]
    FrameFlipRateDefault: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    FrameFlipRateGame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    FrameFlipRateLoad: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]

    class eGameWindowModeEnum(IntEnum):
        Bordered = 0x0
        Borderless = 0x1
        Fullscreen = 0x2
        Maximised = 0x3
        Minimised = 0x4

    GameWindowMode: Annotated[
        c_enum32[eGameWindowModeEnum], Field(c_enum32[eGameWindowModeEnum], 0x1C)
    ]
    HighlightPlacementIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    HmdEyeBufferHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    HmdEyeBufferWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    HmdEyeScalePos: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    HmdHeadScalePos: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    HmdImmersionFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    HmdMonitor: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    HmdPreviewScale: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    LoadBalanceTimeoutMS: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    LODOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    MaxFrameRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    Monitor: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4C)]
    OctahedralImpostersViewCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    PSVR2LoadBalanceTimeoutMS: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    ScratchpadInstanceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    ScratchpadInstancesCap: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x5C)]
    ScratchpadInstanceSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    ScratchpadInstancesPerSide: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x64)]
    ScratchpadInstancesRandomness: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x68)
    ]
    ScratchpadModelSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6C)]
    ScreenHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    ScreenWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    TiledWindowsIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78)]
    TiledWindowsSplitCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7C)]
    TitlebarMenuOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    TouchScreenSwipeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    TouchScreenSwipeTravelThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x88)
    ]

    class eTrialStatusEnum(IntEnum):
        SystemDefault = 0x0
        ForceTrial = 0x1
        ForceFullGame = 0x2

    TrialStatus: Annotated[
        c_enum32[eTrialStatusEnum], Field(c_enum32[eTrialStatusEnum], 0x8C)
    ]
    UpdatePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    UpdatePeriodSteam: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    VoiceUpdatePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    VoiceUpdatePeriodSteam: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    VRLoadBalanceTimeoutMS: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    WindowPositionX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA4)]
    WindowPositionY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA8)]
    WwiseVibrationMultiplierPrimary: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC)
    ]
    WwiseVibrationMultiplierSecondary: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB0)
    ]
    EditorLayout: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xB4)
    ]
    ExcludeLogFilter: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1B4)
    ]
    IncludeLogFilter: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x2B4)
    ]
    ScratchpadModel: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x3B4)
    ]
    AllowInPlaceNGuiElementRenaming: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4B4)
    ]
    AssertsPopupAlwaysOnTop: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B5)]
    AutoTabNewlyOpenedWindows: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B6)]
    ColourLODs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B7)]
    ColourVertexDensity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B8)]
    CompressImposterTextures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B9)]
    CrashOnFailedCriticalAssertion: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4BA)
    ]
    DefaultSelectIgnoreAsserts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4BB)]
    DisableImposters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4BC)]
    DisableMultiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4BD)]
    DisableResScaling: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4BE)]
    DisableSwitchingAwayFromPad: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4BF)]
    DisableUndergrowthInstanceRendering: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4C0)
    ]
    DisableVSync: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C1)]
    EnableGpuBreadcrumbs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C2)]
    EnableNvidiaAftermath: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C3)]
    EnablePix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C4)]
    EnableRayTracing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C5)]
    EnableRenderdoc: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C6)]
    EnableShaderReload: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C7)]
    EnableVirtualTouchScreen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C8)]
    EnableZstdSaves: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C9)]
    FavouritesAndUndoEnabledByDefault: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4CA)
    ]
    FilterTranslatedTextWhenSearching: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4CB)
    ]
    ForceGPUPreset: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4CC)]
    FreezeCulling: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4CD)]
    HideRenderdocOverlay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4CE)]
    HmdDistortionPassthru: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4CF)]
    HmdEnable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D0)]
    HmdFoveated: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D1)]
    HmdStereoRender: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D2)]
    HmdTracking: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D3)]
    JitterRenderOffsetEveryFrame: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D4)]
    LoadRelativeEditorLayouts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D5)]
    LogInputChanges: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D6)]
    LogInputSetup: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D7)]
    MakeUnusedUniformsNaN: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D8)]
    MinGPUMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D9)]
    OctahedralImpostersDisable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4DA)]
    OctahedralImpostersEnable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4DB)]
    OctahedralImpostersViewFromSpace: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4DC)
    ]
    SampleCollisionWithCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4DD)]
    ScratchpadInstanced: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4DE)]
    ScratchpadWind: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4DF)]
    ShowPlayerCollisions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E0)]
    SimulateDisabledParticleRefractions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4E1)
    ]
    SmokeTestSmokeBotAutoStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E2)]
    UseDebugScreenSettings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E3)]
    UseHeavyAir: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E4)]
    VulkanValidationEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E5)]
    VulkanValidationPrintMessages: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E6)]
    VulkanValidationPrintUniqueOnly: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4E7)
    ]


@partial_struct
class cTkID256Array(Structure):
    Array: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x0),
    ]


@partial_struct
class cTkIdArray(Structure):
    Array: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cTkNavMeshAreaNavigability(Structure):
    EntryCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    TravelCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    IsNavigable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cTkIdModelResource(Structure):
    Model: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cTkBoundingBoxData(Structure):
    Max: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Min: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]


@partial_struct
class cTkLanguageFontTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cTkLanguageFontTableEntry],
        Field(basic.cTkDynamicArray[cTkLanguageFontTableEntry], 0x0),
    ]


@partial_struct
class cTkCameraData(Structure):
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    AdjustPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AdjustRoll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AdjustYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Angle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Fov: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    HeightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cTkCameraWanderData(Structure):
    CamWanderAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CamWanderPhase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    CamWander: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cTkDynamicTreeWindFrequency(Structure):
    BranchHForcePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BranchHForcePeriodFast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    BranchVForcePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    BranchVForcePeriodFast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    LeafForcePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    LeafForcePeriodFast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    LeafNoiseSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    LeafNoiseSpeedFast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cTkBigPosData(Structure):
    Local: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]


@partial_struct
class cTkBlackboardDefaultValueBool(Structure):
    BlackboardKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BlackboardCategory: Annotated[
        c_enum32[enums.cTkBlackboardCategory],
        Field(c_enum32[enums.cTkBlackboardCategory], 0x10),
    ]
    DefaultValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cTkBlackboardDefaultValueFloat(Structure):
    BlackboardKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BlackboardCategory: Annotated[
        c_enum32[enums.cTkBlackboardCategory],
        Field(c_enum32[enums.cTkBlackboardCategory], 0x10),
    ]
    DefaultValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cTkBlackboardDefaultValueId(Structure):
    BlackboardKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DefaultValue: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BlackboardCategory: Annotated[
        c_enum32[enums.cTkBlackboardCategory],
        Field(c_enum32[enums.cTkBlackboardCategory], 0x20),
    ]


@partial_struct
class cTkBlackboardDefaultValueInteger(Structure):
    BlackboardKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BlackboardCategory: Annotated[
        c_enum32[enums.cTkBlackboardCategory],
        Field(c_enum32[enums.cTkBlackboardCategory], 0x10),
    ]
    DefaultValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cTkBlackboardDefaultValueVector(Structure):
    DefaultValue: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    BlackboardKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BlackboardCategory: Annotated[
        c_enum32[enums.cTkBlackboardCategory],
        Field(c_enum32[enums.cTkBlackboardCategory], 0x20),
    ]


@partial_struct
class cTkBlackboardKey(Structure):
    BlackboardKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BlackboardCategory: Annotated[
        c_enum32[enums.cTkBlackboardCategory],
        Field(c_enum32[enums.cTkBlackboardCategory], 0x10),
    ]


@partial_struct
class cTkBlackboardValueBool(Structure):
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cTkBlackboardValueFloat(Structure):
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cTkBlackboardValueId(Structure):
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkBlackboardValueInteger(Structure):
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cTkBlackboardValueVector(Structure):
    Value: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkBehaviourTreeConcurrentSelectorData(Structure):
    Children: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]

    class eFailWhenEnum(IntEnum):
        AnyChildFails = 0x0
        AllChildrenFail = 0x1

    FailWhen: Annotated[c_enum32[eFailWhenEnum], Field(c_enum32[eFailWhenEnum], 0x20)]

    class eSucceedWhenEnum(IntEnum):
        AllChildrenSucceed = 0x0
        AnyChildSucceeds = 0x1

    SucceedWhen: Annotated[
        c_enum32[eSucceedWhenEnum], Field(c_enum32[eSucceedWhenEnum], 0x24)
    ]


@partial_struct
class cTkBehaviourTreePriorityDecoratorData(Structure):
    Child: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]


@partial_struct
class cTkBehaviourTreeSequentialSelectorData(Structure):
    Children: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    FailWhenAnyChildFails: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    Looping: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]


@partial_struct
class cTkBehaviourTreeSucceedDecoratorData(Structure):
    Child: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]


@partial_struct
class cTkNavMeshBuildParams(Structure):
    AgentHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AgentMaxSlopeDegrees: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    AgentMaxStepHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    AgentRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    AgentSteepSlopeDegrees: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    ContourMaxError: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    ContourMaxLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    DetailMeshMaxError: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    DetailMeshSampleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    RegionMinCellCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    BuildAsync: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    BuildDetailMesh: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]
    BuildPolyBVH: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A)]
    ErodeWalkableAreas: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2B)]
    FilterLedgeSpans: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    FilterLowHangingObstacles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    FilterWalkableLowHeightSpans: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]
    KeepIntermediateRecastData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F)]
    MedianFilterWalkableAreas: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcPlanetaryNavMeshBuildParams(Structure):
    BaseParams: Annotated[cTkNavMeshBuildParams, Field(cTkNavMeshBuildParams, 0x0)]
    CellsPerVoxelHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    CellsPerVoxelWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]


@partial_struct
class cTkNavMeshAreaFlagNavigability(Structure):
    Navigability: Annotated[
        cTkNavMeshAreaNavigability, Field(cTkNavMeshAreaNavigability, 0x0)
    ]
    AreaFlag: Annotated[
        c_enum32[enums.cTkNavMeshAreaFlags],
        Field(c_enum32[enums.cTkNavMeshAreaFlags], 0xC),
    ]


@partial_struct
class cTkNavMeshAreaGroup(Structure):
    Areas: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cTkNavMeshAreaType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cTkNavMeshAreaType]], 0x0),
    ]
    GroupId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkNavMeshAreaGroupNavigability(Structure):
    AreaGroupId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Navigability: Annotated[
        cTkNavMeshAreaNavigability, Field(cTkNavMeshAreaNavigability, 0x10)
    ]


@partial_struct
class cTkNavMeshAreaTypeNavigability(Structure):
    Navigability: Annotated[
        cTkNavMeshAreaNavigability, Field(cTkNavMeshAreaNavigability, 0x0)
    ]
    AreaType: Annotated[
        c_enum32[enums.cTkNavMeshAreaType],
        Field(c_enum32[enums.cTkNavMeshAreaType], 0xC),
    ]


@partial_struct
class cTkNavMeshFlockingParams(Structure):
    InfluenceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    LookAheadTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    WeightAlignment: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    WeightCoherence: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    WeightSeparation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cTkNavMeshInclusionParams(Structure):
    InclusionMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AreaType: Annotated[
        c_enum32[enums.cTkNavMeshAreaType],
        Field(c_enum32[enums.cTkNavMeshAreaType], 0x4),
    ]
    InclusionType: Annotated[
        c_enum32[enums.cTkNavMeshInclusionType],
        Field(c_enum32[enums.cTkNavMeshInclusionType], 0x5),
    ]


@partial_struct
class cTkSceneBoneRemapping(Structure):
    FromBone: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x0)]
    ToBone: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x80)]


@partial_struct
class cTkSceneBoneRemappingTable(Structure):
    BoneMappings: Annotated[
        basic.cTkDynamicArray[cTkSceneBoneRemapping],
        Field(basic.cTkDynamicArray[cTkSceneBoneRemapping], 0x0),
    ]


@partial_struct
class cTkNavMeshMovementDebugVisOptions(Structure):
    VelocityArrowLookAheadTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]

    class eNavMeshMovementDebugVisFlagsEnum(IntEnum):
        empty = 0x0
        Corridor = 0x1
        PointPath = 0x2
        LocalBoundary = 0x4
        CurrentPos = 0x8
        Target = 0x10
        CurrentVel = 0x20
        DesiredVelNoRepel = 0x40
        DesiredVel = 0x80
        ResultVel = 0x100
        Flocking = 0x200
        VelocitySampling = 0x400
        ObstacleAvoidance = 0x800

    NavMeshMovementDebugVisFlags: Annotated[
        c_enum32[eNavMeshMovementDebugVisFlagsEnum],
        Field(c_enum32[eNavMeshMovementDebugVisFlagsEnum], 0x4),
    ]


@partial_struct
class cTkSceneNodeAttributeData(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]


@partial_struct
class cTkNavMeshVelocitySamplingParams(Structure):
    AdaptiveDepths: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x0)]
    AdaptiveDivs: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x4)]
    AdaptiveRings: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x8)]
    GridSize: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0xC)]
    HorizonTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    VelocityBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    WeightCollisionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    WeightCurVel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    WeightDesiredVel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    WeightEnergyCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    WeightFacingDir: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    WeightProgress: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    WeightSide: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]

    class eSamplingTypeEnum(IntEnum):
        Adaptive = 0x0
        Grid = 0x1

    SamplingType: Annotated[
        c_enum32[eSamplingTypeEnum], Field(c_enum32[eSamplingTypeEnum], 0x34)
    ]


@partial_struct
class cTkNavMeshPathingQualitySettings(Structure):
    VelocitySamplingParams: Annotated[
        cTkNavMeshVelocitySamplingParams, Field(cTkNavMeshVelocitySamplingParams, 0x0)
    ]
    CollisionQueryRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    HeuristicScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    UseRaycastShortcuts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cTkTransformData(Structure):
    RotX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    RotY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    RotZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    ScaleX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    ScaleY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    ScaleZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    TransX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    TransY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    TransZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cTkSceneNodeData(Structure):
    Attributes: Annotated[
        basic.cTkDynamicArray[cTkSceneNodeAttributeData],
        Field(basic.cTkDynamicArray[cTkSceneNodeAttributeData], 0x0),
    ]
    Children: Annotated[
        "basic.cTkDynamicArray[cTkSceneNodeData]",
        Field("basic.cTkDynamicArray[cTkSceneNodeData]", 0x10),
    ]
    Name: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    Type: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Transform: Annotated[cTkTransformData, Field(cTkTransformData, 0x40)]
    NameHash: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x64)]
    PlatformExclusion: Annotated[ctypes.c_int8, Field(ctypes.c_int8, 0x68)]


@partial_struct
class cTkMaterialShaderMillComment(Structure):
    PosMaxX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    PosMaxY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    PosMinX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    PosMinY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    Text: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10)]


@partial_struct
class cTkMaterialShaderMillConnect(Structure):
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4)]
    Expanded: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cTkMaterialShaderMillNode(Structure):
    ColourValue: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Inputs: Annotated[
        basic.cTkDynamicArray[cTkMaterialShaderMillConnect],
        Field(basic.cTkDynamicArray[cTkMaterialShaderMillConnect], 0x10),
    ]
    Outputs: Annotated[
        basic.cTkDynamicArray[cTkMaterialShaderMillConnect],
        Field(basic.cTkDynamicArray[cTkMaterialShaderMillConnect], 0x20),
    ]
    FValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    FValue2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    Id: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    IValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    IValue2: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    WindowX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    WindowY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    Value: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x4C)]
    ParameterName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xCC)
    ]
    Type: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10C)]
    ExposeAsParameter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12C)]


@partial_struct
class cTkMaterialShaderMillLink(Structure):
    InputShuffle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OutputShuffle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    InputNode: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    OutputNode: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    InputConnect: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2C)
    ]
    OutputConnect: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4C)
    ]


@partial_struct
class cTkMaterialShaderMillFlag(Structure):
    Flag: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]


@partial_struct
class cTkMaterialShaderMillData(Structure):
    ShaderMillCmts: Annotated[
        basic.cTkDynamicArray[cTkMaterialShaderMillComment],
        Field(basic.cTkDynamicArray[cTkMaterialShaderMillComment], 0x0),
    ]
    ShaderMillFlags: Annotated[
        basic.cTkDynamicArray[cTkMaterialShaderMillFlag],
        Field(basic.cTkDynamicArray[cTkMaterialShaderMillFlag], 0x10),
    ]
    ShaderMillLinks: Annotated[
        basic.cTkDynamicArray[cTkMaterialShaderMillLink],
        Field(basic.cTkDynamicArray[cTkMaterialShaderMillLink], 0x20),
    ]
    ShaderMillNodes: Annotated[
        basic.cTkDynamicArray[cTkMaterialShaderMillNode],
        Field(basic.cTkDynamicArray[cTkMaterialShaderMillNode], 0x30),
    ]
    OutputX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    OutputY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    ScrollX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    ScrollY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    Zoom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    Description: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x54)
    ]
    Filename: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x154)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x254)]


@partial_struct
class cTkVertexStream(Structure):
    VertexStream: Annotated[
        basic.cTkDynamicArray[ctypes.c_byte],
        Field(basic.cTkDynamicArray[ctypes.c_byte], 0x0),
    ]


@partial_struct
class cTkMaterialAlternative(Structure):
    MaterialAlternativeId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]

    class eTextureTypeEnum(IntEnum):
        Diffuse = 0x0
        Normal = 0x1
        Ambient = 0x2
        Environment = 0x3

    TextureType: Annotated[
        c_enum32[eTextureTypeEnum], Field(c_enum32[eTextureTypeEnum], 0x30)
    ]


@partial_struct
class cTkMaterialUniform_Float(Structure):
    Values: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x0)]
    ExtendedValues: Annotated[
        basic.cTkDynamicArray[basic.Vector4f],
        Field(basic.cTkDynamicArray[basic.Vector4f], 0x10),
    ]
    Name: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]


@partial_struct
class cTkMaterialUniform_UInt(Structure):
    Values: Annotated[basic.Vector4i, Field(basic.Vector4i, 0x0)]
    ExtendedValues: Annotated[
        basic.cTkDynamicArray[basic.Vector4i],
        Field(basic.cTkDynamicArray[basic.Vector4i], 0x10),
    ]
    Name: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]


@partial_struct
class cTkMaterialSampler(Structure):
    MaterialAlternativeId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Map: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    Name: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    Anisotropy: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]

    class eTextureAddressModeEnum(IntEnum):
        Wrap = 0x0
        WrapUClampV = 0x1
        Clamp = 0x2
        ClampToBorder = 0x3
        Mirror = 0x4

    TextureAddressMode: Annotated[
        c_enum32[eTextureAddressModeEnum],
        Field(c_enum32[eTextureAddressModeEnum], 0x44),
    ]

    class eTextureFilterModeEnum(IntEnum):
        None_ = 0x0
        Bilinear = 0x1
        Trilinear = 0x2

    TextureFilterMode: Annotated[
        c_enum32[eTextureFilterModeEnum], Field(c_enum32[eTextureFilterModeEnum], 0x48)
    ]
    IsCube: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]
    IsSRGB: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]
    UseCompression: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E)]
    UseMipMaps: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4F)]


@partial_struct
class cTkMeshData(Structure):
    IdString: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MeshDataStream: Annotated[
        basic.cTkDynamicArray[ctypes.c_byte],
        Field(basic.cTkDynamicArray[ctypes.c_byte], 0x10),
    ]
    MeshPositionDataStream: Annotated[
        basic.cTkDynamicArray[ctypes.c_byte],
        Field(basic.cTkDynamicArray[ctypes.c_byte], 0x20),
    ]
    Hash: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x30)]
    IndexDataSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    VertexDataSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    VertexPositionDataSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]


@partial_struct
class cTkGeometryStreamData(Structure):
    StreamDataArray: Annotated[
        basic.cTkDynamicArray[cTkMeshData],
        Field(basic.cTkDynamicArray[cTkMeshData], 0x0),
    ]


@partial_struct
class cTkAnimNodeFrameData(Structure):
    Rotations: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint16],
        Field(basic.cTkDynamicArray[ctypes.c_uint16], 0x0),
    ]
    Scales: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x10),
    ]
    Translations: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x20),
    ]


@partial_struct
class cTkIndexStream(Structure):
    IndexStream: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x0),
    ]


@partial_struct
class cTkJointBindingData(Structure):
    InvBindMatrix: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BindRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    BindScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    BindTranslate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]


@partial_struct
class cTkJointExtentData(Structure):
    JointExtentCenter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    JointExtentMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    JointExtentMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    JointExtentStdDev: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cTkJointMirrorAxis(Structure):
    MirrorAxisMode: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    RotAdjustW: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    RotAdjustX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    RotAdjustY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    RotAdjustZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    RotMirrorAxisX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    RotMirrorAxisY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    RotMirrorAxisZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    TransMirrorAxisX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    TransMirrorAxisY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    TransMirrorAxisZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cTkVertexElement(Structure):
    class eInstancingEnum(IntEnum):
        PerVertex = 0x0
        PerModel = 0x1

    Instancing: Annotated[
        c_enum32[eInstancingEnum], Field(c_enum32[eInstancingEnum], 0x0)
    ]
    Type: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Normalise: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0x8)]
    Offset: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0x9)]
    SemanticID: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0xA)]
    Size: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0xB)]


@partial_struct
class cTkVertexLayout(Structure):
    VertexElements: Annotated[
        basic.cTkDynamicArray[cTkVertexElement],
        Field(basic.cTkDynamicArray[cTkVertexElement], 0x0),
    ]
    PlatformData: Annotated[ctypes.c_int64, Field(ctypes.c_int64, 0x10)]
    ElementCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    Stride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]


@partial_struct
class cTkMeshMetaData(Structure):
    IdString: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Hash: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    IndexDataOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    IndexDataSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    VertexDataOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    VertexDataSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    VertexPositionDataOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    VertexPositionDataSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]
    DoubleBufferGeometry: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cTkRagdollData(Structure):
    ChainEnds: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x0),
    ]
    ExcludeJoints: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x10),
    ]


@partial_struct
class cTkGeometryData(Structure):
    PositionVertexLayout: Annotated[cTkVertexLayout, Field(cTkVertexLayout, 0x0)]
    VertexLayout: Annotated[cTkVertexLayout, Field(cTkVertexLayout, 0x20)]
    BoundHullVertEd: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x40),
    ]
    BoundHullVerts: Annotated[
        basic.cTkDynamicArray[basic.Vector4f],
        Field(basic.cTkDynamicArray[basic.Vector4f], 0x50),
    ]
    BoundHullVertSt: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x60),
    ]
    IndexBuffer: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x70),
    ]
    JointBindings: Annotated[
        basic.cTkDynamicArray[cTkJointBindingData],
        Field(basic.cTkDynamicArray[cTkJointBindingData], 0x80),
    ]
    JointExtents: Annotated[
        basic.cTkDynamicArray[cTkJointExtentData],
        Field(basic.cTkDynamicArray[cTkJointExtentData], 0x90),
    ]
    JointMirrorAxes: Annotated[
        basic.cTkDynamicArray[cTkJointMirrorAxis],
        Field(basic.cTkDynamicArray[cTkJointMirrorAxis], 0xA0),
    ]
    JointMirrorPairs: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0xB0),
    ]
    MeshAABBMax: Annotated[
        basic.cTkDynamicArray[basic.Vector4f],
        Field(basic.cTkDynamicArray[basic.Vector4f], 0xC0),
    ]
    MeshAABBMin: Annotated[
        basic.cTkDynamicArray[basic.Vector4f],
        Field(basic.cTkDynamicArray[basic.Vector4f], 0xD0),
    ]
    MeshBaseSkinMat: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0xE0),
    ]
    MeshVertREnd: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0xF0),
    ]
    MeshVertRStart: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x100),
    ]
    ProcGenNodeNames: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x110),
    ]
    ProcGenParentId: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x120),
    ]
    SkinMatrixLayout: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x130),
    ]
    StreamMetaDataArray: Annotated[
        basic.cTkDynamicArray[cTkMeshMetaData],
        Field(basic.cTkDynamicArray[cTkMeshMetaData], 0x140),
    ]
    CollisionIndexCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x150)]
    IndexCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x154)]
    Indices16Bit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x158)]
    VertexCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15C)]


@partial_struct
class cTkPhysicsData(Structure):
    AngularDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Friction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Gravity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    LinearDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Mass: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    RollingFriction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcProceduralTextureColourIndices(Structure):
    Alts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cTkAnimNodeData(Structure):
    Node: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    RotIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    ScaleIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    TransIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cTkAnimNodeFrameHalfData(Structure):
    Rotations: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint16],
        Field(basic.cTkDynamicArray[ctypes.c_uint16], 0x0),
    ]
    Scales: Annotated[
        basic.cTkDynamicArray[basic.halfVector4],
        Field(basic.cTkDynamicArray[basic.halfVector4], 0x10),
    ]
    Translations: Annotated[
        basic.cTkDynamicArray[basic.halfVector4],
        Field(basic.cTkDynamicArray[basic.halfVector4], 0x20),
    ]


@partial_struct
class cTkNGuiTreeViewTemplate(Structure):
    FilteredTextColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    HighlightColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    InactiveTextColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    LineColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    TextColour: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    ElementHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    IconMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    IconPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    IconWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    LineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    NestIndent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    VerticalSplitPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    VerticalSplitWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    AllowVerticalSplit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]
    FilteringHidesElements: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x71)]


@partial_struct
class cTkNGuiUserSettings(Structure):
    AnimationViewerRecents: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AnimationViewerRecentWindows: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    FileBrowserThumbnailSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    NguiScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144)]
    FavouriteWindows: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x148)
    ]
    FileBrowserFavourites: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xB48)
    ]
    FileBrowserRecents: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1548)
    ]
    LastActiveLayout: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1F48)
    ]
    LastLoadedModel: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x2048)
    ]
    CanSelectRegionDecoratorNodesInDebugEditor: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2148)
    ]
    DebugEditorDebugDrawInPlayMode: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2149)
    ]
    FileBrowserAutoBuildTree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x214A)]


@partial_struct
class cTkNGuiWindowLayoutData(Structure):
    ActiveTabIdx: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    PositionX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    PositionXRelative: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    PositionY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    PositionYRelative: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    ScrollX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    ScrollY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Separator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    SizeX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    SizeXRelative: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    SizeY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    SizeYRelative: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    Tabs: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x30)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1030)]

    class eWindowStateEnum(IntEnum):
        Open = 0x0
        Minimised = 0x1
        Closed = 0x2

    WindowState: Annotated[
        c_enum32[eWindowStateEnum], Field(c_enum32[eWindowStateEnum], 0x10B0)
    ]


@partial_struct
class cTkNGuiGraphicAnimatedImageData(Structure):
    FramesPerSecond: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ScrollSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    ScrollAngle: Annotated[ctypes.c_int16, Field(ctypes.c_int16, 0x8)]
    BlendFrames: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]
    FramesHorizontal: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0xB)]
    FramesVertical: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0xC)]

    class eNGuiImageAnimTypeEnum(IntEnum):
        None_ = 0x0
        Animated = 0x1
        Scrolling = 0x2

    NGuiImageAnimType: Annotated[
        c_enum32[eNGuiImageAnimTypeEnum], Field(c_enum32[eNGuiImageAnimTypeEnum], 0xD)
    ]
    TotalFrames: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0xE)]


@partial_struct
class cTkNGuiLayoutListData(Structure):
    Default: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x20)]
    Autosave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA0)]
    CanBeDeleted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA1)]


@partial_struct
class cTkNGuiEditorSavedFavourite(Structure):
    Children: Annotated[
        "basic.cTkDynamicArray[cTkNGuiEditorSavedFavourite]",
        Field("basic.cTkDynamicArray[cTkNGuiEditorSavedFavourite]", 0x0),
    ]
    Name: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10)]
    AddedManually: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x110)]


@partial_struct
class cTkNGuiEditorSavedTreeNodeModification(Structure):
    Children: Annotated[
        "basic.cTkDynamicArray[cTkNGuiEditorSavedTreeNodeModification]",
        Field("basic.cTkDynamicArray[cTkNGuiEditorSavedTreeNodeModification]", 0x0),
    ]
    Name: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10)]
    Modified: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x110)]


@partial_struct
class cTkNGuiAlignment(Structure):
    class eHorizontalEnum(IntEnum):
        Left = 0x0
        Center = 0x1
        Right = 0x2

    Horizontal: Annotated[
        c_enum32[eHorizontalEnum], Field(c_enum32[eHorizontalEnum], 0x0)
    ]

    class eVerticalEnum(IntEnum):
        Top = 0x0
        Middle = 0x1
        Bottom = 0x2

    Vertical: Annotated[c_enum32[eVerticalEnum], Field(c_enum32[eVerticalEnum], 0x1)]


@partial_struct
class cTkNGuiEditorLayout(Structure):
    FavouriteData: Annotated[
        basic.cTkDynamicArray[cTkNGuiEditorSavedFavourite],
        Field(basic.cTkDynamicArray[cTkNGuiEditorSavedFavourite], 0x0),
    ]
    FavouriteTreeNodeChildCounts: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x10),
    ]
    FavouriteTreeNodes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x100],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x100], 0x20),
    ]
    TreeNodeModificationData: Annotated[
        basic.cTkDynamicArray[cTkNGuiEditorSavedTreeNodeModification],
        Field(basic.cTkDynamicArray[cTkNGuiEditorSavedTreeNodeModification], 0x30),
    ]
    Windows: Annotated[cTkNGuiWindowLayoutData, Field(cTkNGuiWindowLayoutData, 0x40)]


@partial_struct
class cTkLODDistances(Structure):
    Distances: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cTkLODSettingsData(Structure):
    ImposterOverrideRange: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MaxObjectDistanceOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    RegionLODHiddenRanges: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    RegionLODRadius: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    LODAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AsteroidCountMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    AsteroidDividerMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78)]
    AsteroidFadeRangeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    ImposterResolutionMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x80)]
    MaxAsteroidGenerationPerFrame: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x84)
    ]
    MaxAsteroidGenerationPerFramePulseJump: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x88)
    ]
    NumberOfImposterViews: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8C)]
    EnableOctahedralImposters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x90)]
    ViewImpostersFromSpace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x91)]


@partial_struct
class cTkNGuiEditorStyleColour(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x10)]


@partial_struct
class cTkWaterMeshConfig(Structure):
    BaseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DynamicWaveScale: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    FoamScale: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    GeometryDownSampleFactor: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    LodCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    LodDataResolution: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    MaxHorizontalScaleMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    MinHorizontalScaleMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    DisableSkirtGeneration: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cTkWaveSpectrumData(Structure):
    Chop: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Wavelength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cTkAnimDetailSettingsData(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    NumCulledFrames: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    DisableAnim: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cTkAnimDetailSettings(Structure):
    AnimDistanceSettings: Annotated[
        basic.cTkDynamicArray[cTkAnimDetailSettingsData],
        Field(basic.cTkDynamicArray[cTkAnimDetailSettingsData], 0x0),
    ]
    AnimLODDistances: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MaxVisibleAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cTkDynamicResScalingSettings(Structure):
    class eDynamicResScalingAggressivenessEnum(IntEnum):
        Moderate = 0x0
        Balanced = 0x1
        Aggressive = 0x2

    DynamicResScalingAggressiveness: Annotated[
        c_enum32[eDynamicResScalingAggressivenessEnum],
        Field(c_enum32[eDynamicResScalingAggressivenessEnum], 0x0),
    ]
    FrametimeHeadroomProportion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    LowestDynamicResScalingFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cTkEngineSettingsMapping(Structure):
    CloudsMaxIterations: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    CloudsResolutionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    IKFullBodyIterations: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    ReflectionProbesMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    ShadowMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    NeedsGameRestart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]


@partial_struct
class cTkWaveInputData(Structure):
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Variance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cTkGameSettings(Structure):
    KeyMapping: Annotated[
        basic.cTkDynamicArray[cGcInputActionMapping],
        Field(basic.cTkDynamicArray[cGcInputActionMapping], 0x0),
    ]
    KeyMapping2: Annotated[
        basic.cTkDynamicArray[cGcInputActionMapping2],
        Field(basic.cTkDynamicArray[cGcInputActionMapping2], 0x10),
    ]
    LastKnownPadType: Annotated[
        c_enum32[enums.cTkPadEnum], Field(c_enum32[enums.cTkPadEnum], 0x20)
    ]


@partial_struct
class cTkGraphicsDetailPreset(Structure):
    DynamicResScalingSettings: Annotated[
        cTkDynamicResScalingSettings, Field(cTkDynamicResScalingSettings, 0x0)
    ]

    class eAmbientOcclusionEnum(IntEnum):
        Off = 0x0
        GTAO_Low = 0x1
        GTAO_Medium = 0x2
        GTAO_High = 0x3
        GTAO_Ultra = 0x4
        HBAO_Low = 0x5
        HBAO_High = 0x6

    AmbientOcclusion: Annotated[
        c_enum32[eAmbientOcclusionEnum], Field(c_enum32[eAmbientOcclusionEnum], 0xC)
    ]
    AnimationQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x10),
    ]

    class eAnisotropyLevelEnum(IntEnum):
        _1 = 0x0
        _2 = 0x1
        _4 = 0x2
        _8 = 0x3
        _16 = 0x4

    AnisotropyLevel: Annotated[
        c_enum32[eAnisotropyLevelEnum], Field(c_enum32[eAnisotropyLevelEnum], 0x14)
    ]

    class eAntiAliasingEnum(IntEnum):
        None_ = 0x0
        TAA_LOW = 0x1
        TAA = 0x2
        FXAA = 0x3
        FFXSR2 = 0x4
        DLSS = 0x5
        DLAA = 0x6
        XESS = 0x7
        MetalFXSpatial = 0x8
        MetalFXTemporal = 0x9

    AntiAliasing: Annotated[
        c_enum32[eAntiAliasingEnum], Field(c_enum32[eAntiAliasingEnum], 0x18)
    ]
    BaseQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x1C),
    ]

    class eDLSSFrameGenerationEnum(IntEnum):
        On2X = 0x0
        Off = 0x1
        On3X = 0x2
        On4X = 0x3

    DLSSFrameGeneration: Annotated[
        c_enum32[eDLSSFrameGenerationEnum],
        Field(c_enum32[eDLSSFrameGenerationEnum], 0x20),
    ]

    class eDLSSQualityEnum(IntEnum):
        MaxPerformance = 0x0
        Balanced = 0x1
        MaxQuality = 0x2
        UltraPerformance = 0x3
        UltraQuality = 0x4

    DLSSQuality: Annotated[
        c_enum32[eDLSSQualityEnum], Field(c_enum32[eDLSSQualityEnum], 0x24)
    ]

    class eFFXSR2QualityEnum(IntEnum):
        UltraPerformance = 0x0
        Performance = 0x1
        Balanced = 0x2
        Quality = 0x3
        Native = 0x4

    FFXSR2Quality: Annotated[
        c_enum32[eFFXSR2QualityEnum], Field(c_enum32[eFFXSR2QualityEnum], 0x28)
    ]

    class eFFXSRQualityEnum(IntEnum):
        Off = 0x0
        UltraQuality = 0x1
        Quality = 0x2
        Balanced = 0x3
        Performance = 0x4

    FFXSRQuality: Annotated[
        c_enum32[eFFXSRQualityEnum], Field(c_enum32[eFFXSRQualityEnum], 0x2C)
    ]

    class eMetalFXModeEnum(IntEnum):
        Off = 0x0
        Spatial = 0x1
        Temporal = 0x2

    MetalFXMode: Annotated[
        c_enum32[eMetalFXModeEnum], Field(c_enum32[eMetalFXModeEnum], 0x30)
    ]

    class eMetalFXQualityEnum(IntEnum):
        UltraQuality = 0x0
        Quality = 0x1
        Balanced = 0x2
        Performance = 0x3

    MetalFXQuality: Annotated[
        c_enum32[eMetalFXQualityEnum], Field(c_enum32[eMetalFXQualityEnum], 0x34)
    ]

    class eNVIDIAReflexLowLatencyEnum(IntEnum):
        On = 0x0
        Off = 0x1
        OnWithBoost = 0x2

    NVIDIAReflexLowLatency: Annotated[
        c_enum32[eNVIDIAReflexLowLatencyEnum],
        Field(c_enum32[eNVIDIAReflexLowLatencyEnum], 0x38),
    ]
    PlanetQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x3C),
    ]
    PostProcessingEffects: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x40),
    ]
    ReflectionsQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x44),
    ]
    ShadowQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x48),
    ]
    TerrainTessellation: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x4C),
    ]
    TextureQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x50),
    ]

    class eUIQualityEnum(IntEnum):
        Normal = 0x0
        _4K = 0x1

    UIQuality: Annotated[
        c_enum32[eUIQualityEnum], Field(c_enum32[eUIQualityEnum], 0x54)
    ]
    VolumetricsQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x58),
    ]
    WaterQuality: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x5C),
    ]

    class eXESSQualityEnum(IntEnum):
        UltraPerformance = 0x0
        Performance = 0x1
        Balanced = 0x2
        Quality = 0x3
        UltraQuality = 0x4
        UltraQualityPlus = 0x5
        Native = 0x6

    XESSQuality: Annotated[
        c_enum32[eXESSQualityEnum], Field(c_enum32[eXESSQualityEnum], 0x60)
    ]


@partial_struct
class cTkNetEntityRefComponentData(Structure):
    Reference: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cTkProceduralInstanceData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cTkProceduralInstance(Structure):
    Data: Annotated[cTkProceduralInstanceData, Field(cTkProceduralInstanceData, 0x0)]


@partial_struct
class cTkFoamProperties(Structure):
    FoamBlurFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FoamFadeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    ShorelineFoamFadeDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    ShorelineFoamMidpointDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    ShorelineFoamSaturateDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    WaveFoamBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    WaveFoamGenerationStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    WaveFoamSensitivity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cTkMeshWaterQualitySettingData(Structure):
    WaterMeshConfig: Annotated[cTkWaterMeshConfig, Field(cTkWaterMeshConfig, 0x0)]
    EnableDetailNormals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    EnableDynamicWaves: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]
    EnableFoam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26)]
    EnableLocalTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27)]
    PostProcessWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    RainDropEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]


@partial_struct
class cTkProceduralModelComponentData(Structure):
    List: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x0),
    ]


@partial_struct
class cTkMeshWaterReflectionQualitySettingData(Structure):
    class ePlanarReflectionsEnum(IntEnum):
        Off = 0x0
        TerrainOnly = 0x1
        TerrainAndScreenspace = 0x2

    PlanarReflections: Annotated[
        c_enum32[ePlanarReflectionsEnum], Field(c_enum32[ePlanarReflectionsEnum], 0x0)
    ]

    class eScreenSpaceReflectionsEnum(IntEnum):
        Off = 0x0
        On = 0x1

    ScreenSpaceReflections: Annotated[
        c_enum32[eScreenSpaceReflectionsEnum],
        Field(c_enum32[eScreenSpaceReflectionsEnum], 0x4),
    ]


@partial_struct
class cTkProceduralModelList(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    List: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x10),
    ]


@partial_struct
class cTkReferenceComponentData(Structure):
    LSystem: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Reference: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]


@partial_struct
class cTkShearWindOctaveData(Structure):
    MaxStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MinStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    StrengthVariationFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    WaveFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    WaveSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cTkShearWindData(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Octave0: Annotated[cTkShearWindOctaveData, Field(cTkShearWindOctaveData, 0x10)]
    Octave1: Annotated[cTkShearWindOctaveData, Field(cTkShearWindOctaveData, 0x24)]
    Octave2: Annotated[cTkShearWindOctaveData, Field(cTkShearWindOctaveData, 0x38)]
    Octave3: Annotated[cTkShearWindOctaveData, Field(cTkShearWindOctaveData, 0x4C)]
    LdsWindSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    LdsWindStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    OverallWindStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    ShearWindSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    WindShearGradientStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    WindShearToDotLdsFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    WindShearVertpushStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    WindStrengthToVertpush: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]


@partial_struct
class cTkResourceFilterData(Structure):
    FilteredResources: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x0),
    ]
    FilterName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkResourceFilterList(Structure):
    Filters: Annotated[
        basic.cTkDynamicArray[cTkResourceFilterData],
        Field(basic.cTkDynamicArray[cTkResourceFilterData], 0x0),
    ]


@partial_struct
class cTkRotationComponentData(Structure):
    Axis: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SyncGroup: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    AlwaysUpdate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cTkResourceDescriptorData(Structure):
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Children: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x20),
    ]
    ReferencePaths: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x30),
    ]
    Chance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x44)]


@partial_struct
class cTkResourceDescriptorList(Structure):
    Descriptors: Annotated[
        basic.cTkDynamicArray[cTkResourceDescriptorData],
        Field(basic.cTkDynamicArray[cTkResourceDescriptorData], 0x0),
    ]
    TypeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkAllowedWaterConditions(Structure):
    ConditionWeights: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cTkModelDescriptorList(Structure):
    List: Annotated[
        basic.cTkDynamicArray[cTkResourceDescriptorList],
        Field(basic.cTkDynamicArray[cTkResourceDescriptorList], 0x0),
    ]


@partial_struct
class cTkDynamicChainComponentData(Structure):
    IgnoreJoints: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x0),
    ]
    AirThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AngularDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AngularLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    BodyMassChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Gravity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    InitialBodyMass: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    LinearDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    MaxMotorForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    MotorStrengthCone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MotorStrengthTwist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    TwistLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    VertAirThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    WindStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    WeightByJointLength: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]


@partial_struct
class cTkRigidBodyComponentData(Structure):
    Properties: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]

    class eTargetNodeEnum(IntEnum):
        Model = 0x0
        MasterModel = 0x1
        Attachment = 0x2

    TargetNode: Annotated[
        c_enum32[eTargetNodeEnum], Field(c_enum32[eTargetNodeEnum], 0x10)
    ]
    TriggerVolumeType: Annotated[
        c_enum32[enums.cTkVolumeTriggerType],
        Field(c_enum32[enums.cTkVolumeTriggerType], 0x14),
    ]
    AddToWorldImmediately: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    AddToWorldOnPrepare: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]
    TriggerVolume: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A)]


@partial_struct
class cTkDynamicPhysicsComponentData(Structure):
    RigidBody: Annotated[
        cTkRigidBodyComponentData, Field(cTkRigidBodyComponentData, 0x0)
    ]
    Data: Annotated[cTkPhysicsData, Field(cTkPhysicsData, 0x20)]

    class ePhysicsSurfacePropertiesEnum(IntEnum):
        None_ = 0x0
        Glass = 0x1

    PhysicsSurfaceProperties: Annotated[
        c_enum32[ePhysicsSurfacePropertiesEnum],
        Field(c_enum32[ePhysicsSurfacePropertiesEnum], 0x38),
    ]
    SimpleCharacterCollisionFwdOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3C)
    ]
    SimpleCharacterCollisionHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x40)
    ]
    SimpleCharacterCollisionHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x44)
    ]
    SimpleCharacterCollisionRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x48)
    ]
    SpinOnCreate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    TriggerVolumeType: Annotated[
        c_enum32[enums.cTkVolumeTriggerType],
        Field(c_enum32[enums.cTkVolumeTriggerType], 0x50),
    ]
    Animated: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]
    DisableGravity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x55)]
    RotateSimpleCharacterCollisionCapsule: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x56)
    ]
    TriggerVolume: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x57)]
    UseSimpleCharacterCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]


@partial_struct
class cTkInstanceWindComponentData(Structure):
    BaseMass: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BaseSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    LinearDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MassReduction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    SpringLengthFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SpringNonDirFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SpringReduction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    EnableLdsWind: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]


@partial_struct
class cTkNavModifierComponentData(Structure):
    NavMeshInclusion: Annotated[
        cTkNavMeshInclusionParams, Field(cTkNavMeshInclusionParams, 0x0)
    ]


@partial_struct
class cTkPhysicsWorldComponentData(Structure):
    SafeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cTkCreatureTailJoints(Structure):
    InterpSpeedHead: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    InterpSpeedTail: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    PullSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    PullSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    StrengthX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    StrengthY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    StrengthZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    SwimPhaseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    EndJoint: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    StartJoint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]


@partial_struct
class cTkCreatureTailParams(Structure):
    PartName: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Joints: Annotated[
        basic.cTkDynamicArray[cTkCreatureTailJoints],
        Field(basic.cTkDynamicArray[cTkCreatureTailJoints], 0x20),
    ]
    PerBoneSwimStrength: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x30),
    ]
    AnimationMix: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MaxTurnForSwim: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MinSwimStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    SwimBlendInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    SwimBlendOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    SwimFallOffBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    SwimFallOffEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    SwimMagnitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    SwimReps: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    SwimRollMagnitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    SwimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    SwimTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    HorizontalStrokes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]


@partial_struct
class cTkNamedAudioIdArray(Structure):
    Values: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x80],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x80], 0x0),
    ]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x10)]


@partial_struct
class cTkNamedAudioIdArrayTable(Structure):
    Array: Annotated[
        basic.cTkDynamicArray[cTkNamedAudioIdArray],
        Field(basic.cTkDynamicArray[cTkNamedAudioIdArray], 0x0),
    ]


@partial_struct
class cTkAnimStateMachineComponentData(Structure):
    InitialStateMachine: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cTkAudioAnimTrigger(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OnlyValidWithParts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x10),
    ]

    class eAudioTypeEnum(IntEnum):
        Standard = 0x0
        CreatureVocal = 0x1
        CreatureSnore = 0x2
        Projectile = 0x3

    AudioType: Annotated[
        c_enum32[eAudioTypeEnum], Field(c_enum32[eAudioTypeEnum], 0x20)
    ]
    FrameStart: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    Sound: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x28)]


@partial_struct
class cTkAudioEmitterLine(Structure):
    End: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Start: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cTkAnimationAttachmentData(Structure):
    AnimGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cTkCameraAttachmentData(Structure):
    BaseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    OffsetScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cTkAudioIDArray(Structure):
    Array: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x80],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x80], 0x0),
    ]


@partial_struct
class cTkAnimStateMachineParameterTrigger(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Default: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cTkAnimStateMachineTransitionConditionBoolData(Structure):
    Parameter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CompareValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cTkAnimStateMachineTransitionConditionFloatData(Structure):
    Parameter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CompareValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]

    class eFloatComparisonModeEnum(IntEnum):
        LessThan = 0x0
        LessThanEqual = 0x1
        GreaterThanEqual = 0x2
        GreaterThan = 0x3

    FloatComparisonMode: Annotated[
        c_enum32[eFloatComparisonModeEnum],
        Field(c_enum32[eFloatComparisonModeEnum], 0x14),
    ]


@partial_struct
class cTkAnimStateMachineTransitionConditionIntData(Structure):
    Parameter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CompareValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]

    class eIntComparisonModeEnum(IntEnum):
        LessThan = 0x0
        LessThanEqual = 0x1
        Equal = 0x2
        GreaterThanEqual = 0x3
        GreaterThan = 0x4

    IntComparisonMode: Annotated[
        c_enum32[eIntComparisonModeEnum], Field(c_enum32[eIntComparisonModeEnum], 0x14)
    ]


@partial_struct
class cTkAnimStateMachineTransitionConditionStateTimeData(Structure):
    MaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cTkWeightedAnim(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cTkAnimStateMachineParameterBool(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Default: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cTkWeightedAnimLibrary(Structure):
    Anims: Annotated[
        basic.cTkDynamicArray[cTkWeightedAnim],
        Field(basic.cTkDynamicArray[cTkWeightedAnim], 0x0),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkAnimStateMachineParameterFloat(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Default: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cTkAnimStateMachineParameterInt(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Default: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cTkAnimPoseData(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FrameEnd: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    FrameStart: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cTkAnimPoseExampleElement(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cTkAnimPoseExampleData(Structure):
    Elements: Annotated[
        basic.cTkDynamicArray[cTkAnimPoseExampleElement],
        Field(basic.cTkDynamicArray[cTkAnimPoseExampleElement], 0x0),
    ]


@partial_struct
class cTkAnimRandomOneShots(Structure):
    List: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Parent: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DelayMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    DelayMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cTkAnimationNotifyAddEffect(Structure):
    CharacterLocator: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Effect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Modules: Annotated[
        basic.cTkDynamicArray[basic.LinkableNMSTemplate],
        Field(basic.cTkDynamicArray[basic.LinkableNMSTemplate], 0x20),
    ]
    FacingDirOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    Node: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x38)]
    Attach: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]
    MirrorDuplicate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x79)]
    UseModelFacingDir: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7A)]


@partial_struct
class cTkAnimationNotifyAddEffectGroundInteraction(Structure):
    FadeOutHeightBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FadeOutHeightEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    TravelSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    ClampToGround: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]
    UseGroundNormal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD)]
    UseWaterSurface: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE)]


@partial_struct
class cTkAnimationNotifyGeneric(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cTkAnimJointLODData(Structure):
    JointNames: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0x0),
    ]
    LOD: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cTkAnimMaskBone(Structure):
    NameHash: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    RotationWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    TranslationWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xC)]
    ChildrenInheritWeights: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]
    LinkWeights: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]


@partial_struct
class cTkAnimationAction(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    EndFrame: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    StartFrame: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cTkAnimMask(Structure):
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Bones: Annotated[
        basic.cTkDynamicArray[cTkAnimMaskBone],
        Field(basic.cTkDynamicArray[cTkAnimMaskBone], 0x20),
    ]


@partial_struct
class cTkAnimationMask(Structure):
    Mask: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]

    class eAnimMaskTypeEnum(IntEnum):
        UpperBody = 0x0

    AnimMaskType: Annotated[
        c_enum32[eAnimMaskTypeEnum], Field(c_enum32[eAnimMaskTypeEnum], 0x20)
    ]


@partial_struct
class cTkAnimationNotify(Structure):
    Data: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]
    EndFrame: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    StartFrame: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Track: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cTkAnimationGameData(Structure):
    class eRootMotionEnum(IntEnum):
        None_ = 0x0
        EnabledWithGravity = 0x1
        EnabledFullControl = 0x2

    RootMotion: Annotated[
        c_enum32[eRootMotionEnum], Field(c_enum32[eRootMotionEnum], 0x0)
    ]
    BlockPlayerMovement: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]

    class eBlockPlayerWeaponEnum(IntEnum):
        Unblocked = 0x0
        Sheathed = 0x1
        OutButCannotFire = 0x2

    BlockPlayerWeapon: Annotated[
        c_enum32[eBlockPlayerWeaponEnum], Field(c_enum32[eBlockPlayerWeaponEnum], 0x8)
    ]


@partial_struct
class cTkAnimMaskTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cTkAnimMask],
        Field(basic.cTkDynamicArray[cTkAnimMask], 0x0),
    ]


@partial_struct
class cTkAnimationData(Structure):
    Mask: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Actions: Annotated[
        basic.cTkDynamicArray[cTkAnimationAction],
        Field(basic.cTkDynamicArray[cTkAnimationAction], 0x20),
    ]
    AdditionalMasks: Annotated[
        basic.cTkDynamicArray[cTkAnimationMask],
        Field(basic.cTkDynamicArray[cTkAnimationMask], 0x30),
    ]
    AdditiveBaseAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    ExtraStartNodes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0x60),
    ]
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)]
    Notifies: Annotated[
        basic.cTkDynamicArray[cTkAnimationNotify],
        Field(basic.cTkDynamicArray[cTkAnimationNotify], 0x80),
    ]
    GameData: Annotated[cTkAnimationGameData, Field(cTkAnimationGameData, 0x90)]
    ActionFrame: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    ActionStartFrame: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    AdditiveBaseFrame: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]

    class eAnimTypeEnum(IntEnum):
        Loop = 0x0
        OneShot = 0x1
        OneShotBlendable = 0x2
        Control = 0x3

    AnimType: Annotated[c_enum32[eAnimTypeEnum], Field(c_enum32[eAnimTypeEnum], 0xA8)]

    class eCreatureSizeEnum(IntEnum):
        AllSizes = 0x0
        SmallOnly = 0x1
        LargeOnly = 0x2

    CreatureSize: Annotated[
        c_enum32[eCreatureSizeEnum], Field(c_enum32[eCreatureSizeEnum], 0xAC)
    ]
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    FrameEnd: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB4)]
    FrameEndGame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB8)]
    FrameStart: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xBC)]
    OffsetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    OffsetMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    Priority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC8)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    StartNode: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xD0)
    ]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x110)]
    Additive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x111)]
    AnimGroupOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x112)]
    Has30HzFrames: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x113)]
    Mirrored: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x114)]


@partial_struct
class cTkAnimPoseBabyModifier(Structure):
    Item: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cTkAnimPoseCorrelationData(Structure):
    ItemA: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ItemB: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Correlation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcWonderRecordCustomData(Structure):
    ActualType: Annotated[
        c_enum32[enums.cGcWonderType], Field(c_enum32[enums.cGcWonderType], 0x0)
    ]
    CustomName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x4)
    ]


@partial_struct
class cTkAnim2dBlendNodeData(Structure):
    Position: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    BlendChild: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x8)]


@partial_struct
class cTkAnim2dBlendNode(Structure):
    NodeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PositionIn: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x10)
    ]
    PositionRangeBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    PositionRangeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    PositionSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    PositionCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x5C)
    ]
    SelectBlend: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5D)]
    SelectBlendSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    PolarInputInterpolation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]
    PolarInputLimitCentre: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    PolarInputLimitExtent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]

    class eCoordinatesEnum(IntEnum):
        Polar = 0x0
        Cartesian = 0x1

    Coordinates: Annotated[
        c_enum32[eCoordinatesEnum], Field(c_enum32[eCoordinatesEnum], 0x70)
    ]

    class eBlendOpEnum(IntEnum):
        Blend = 0x0
        Add = 0x1

    BlendOp: Annotated[c_enum32[eBlendOpEnum], Field(c_enum32[eBlendOpEnum], 0x74)]
    BlendChildren: Annotated[
        basic.cTkDynamicArray[cTkAnim2dBlendNodeData],
        Field(basic.cTkDynamicArray[cTkAnim2dBlendNodeData], 0x78),
    ]


@partial_struct
class cTkAnimAnimNode(Structure):
    DisplayName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    AnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    PhaseIn: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x30)]
    PhaseCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x70)
    ]
    PhaseRangeBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    PhaseRangeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    SyncGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]

    class eSyncGroupRoleEnum(IntEnum):
        CanBeLeader = 0x0
        AlwaysLeader = 0x1
        NeverLeader = 0x2

    SyncGroupRole: Annotated[
        c_enum32[eSyncGroupRoleEnum], Field(c_enum32[eSyncGroupRoleEnum], 0x90)
    ]


@partial_struct
class cTkAnimBlendNode(Structure):
    NodeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    WeightIn: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x10)]
    WeightRangeBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    WeightRangeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    WeightSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    WeightCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x5C)
    ]
    InitialWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    BlendLeft: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x68)]
    BlendRight: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x78)]


@partial_struct
class cTkAnimVectorBlendNodeData(Structure):
    NodeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    WeightIn: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x10)]
    WeightRangeBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    WeightRangeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    WeightSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    WeightCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x5C)
    ]
    InitialWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    BlendChild: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x68)]


@partial_struct
class cTkAnimVectorBlendNode(Structure):
    BlendChildren: Annotated[
        basic.cTkDynamicArray[cTkAnimVectorBlendNodeData],
        Field(basic.cTkDynamicArray[cTkAnimVectorBlendNodeData], 0x0),
    ]
    NodeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]

    class eBlendOperationEnum(IntEnum):
        Blend = 0x0
        Add = 0x1

    BlendOperation: Annotated[
        c_enum32[eBlendOperationEnum], Field(c_enum32[eBlendOperationEnum], 0x20)
    ]


@partial_struct
class cGcWonderRecord(Structure):
    GenerationID: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    WonderStatValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SeenInFrontend: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcID256Enum(Structure):
    Values: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x0),
    ]


@partial_struct
class cGcStoryPageSeenData(Structure):
    LastSeenEntryIdx: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    PageIdx: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcStoryPageSeenDataArray(Structure):
    PagesData: Annotated[
        basic.cTkDynamicArray[cGcStoryPageSeenData],
        Field(basic.cTkDynamicArray[cGcStoryPageSeenData], 0x0),
    ]


@partial_struct
class cGcIDLookupPath(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Path: Annotated[basic.cTkFixedString0x800, Field(basic.cTkFixedString0x800, 0x10)]
    DescriptionField: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x810)
    ]
    ImageField: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x890)
    ]
    NameField: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x910)
    ]
    SubTitleField: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x990)
    ]
    GlobalSort: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA10)]


@partial_struct
class cGcWikiPage(Structure):
    PageID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    ContentImage: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x20)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x38)]
    Content: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x50)]
    VRAnyHandControlContent: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x90)
    ]
    VRContent: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xD0)
    ]
    VRMoveControllerContent: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x110)
    ]


@partial_struct
class cGcIDLookupPaths(Structure):
    Paths: Annotated[
        basic.cTkDynamicArray[cGcIDLookupPath],
        Field(basic.cTkDynamicArray[cGcIDLookupPath], 0x0),
    ]


@partial_struct
class cGcCompositeCurveElementData(Structure):
    Duration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    EndValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    CurveType: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8)
    ]


@partial_struct
class cGcCompositeCurveData(Structure):
    Elements: Annotated[
        basic.cTkDynamicArray[cGcCompositeCurveElementData],
        Field(basic.cTkDynamicArray[cGcCompositeCurveElementData], 0x0),
    ]
    StartValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcShipDataNames(Structure):
    ResourceName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x0)
    ]
    DataName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x100)
    ]


@partial_struct
class cGcStoryEntryBranch(Structure):
    Entry: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    RequiresMission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ConditionMissionComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcVibrationData(Structure):
    DecayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    OutputStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    SmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Variance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    VarianceContrast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    OutputStrengthCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x14)
    ]


@partial_struct
class cGcWonderCategoryConfig(Structure):
    LocID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    StatID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ThresholdValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]

    class eWonderCategoryComparisonTypeEnum(IntEnum):
        Max = 0x0
        Min = 0x1

    WonderCategoryComparisonType: Annotated[
        c_enum32[eWonderCategoryComparisonTypeEnum],
        Field(c_enum32[eWonderCategoryComparisonTypeEnum], 0x34),
    ]


@partial_struct
class cGcVibrationChannelData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Data: Annotated[cGcVibrationData, Field(cGcVibrationData, 0x10)]

    class eVRAffectedHandsEnum(IntEnum):
        Both = 0x0
        LeftOnly = 0x1
        RightOnly = 0x2
        DisableInVR = 0x3

    VRAffectedHands: Annotated[
        c_enum32[eVRAffectedHandsEnum], Field(c_enum32[eVRAffectedHandsEnum], 0x40)
    ]
    VROnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]
    VRSwapHandForLeftHanded: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45)]


@partial_struct
class cGcPhotoModeAdjustData(Structure):
    AdjustMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AdjustMaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    AdjustMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    AdjustMaxCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xC)
    ]
    AdjustMinCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xD)
    ]
    Inverted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE)]


@partial_struct
class cGcPhotoModeSettings(Structure):
    SunDir: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x0)]
    Bloom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    CloudAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    DepthOfFieldDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    DepthOfFieldDistanceSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    DepthOfFieldPhysAperture: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    DepthOfFieldPhysConvergence: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]

    class eDepthOfFieldSettingEnum(IntEnum):
        Off = 0x0
        Mid = 0x1
        On = 0x2
        Macro = 0x3

    DepthOfFieldSetting: Annotated[
        c_enum32[eDepthOfFieldSettingEnum],
        Field(c_enum32[eDepthOfFieldSettingEnum], 0x28),
    ]
    Filter: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]
    Fog: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    FoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    HalfFocalPlaneDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    HalfFocalPlaneDepthSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    Vignette: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]


@partial_struct
class cGcSurvivalBarBoolArray(Structure):
    Values: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcGyroSettingsData(Structure):
    Acceleration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]

    class eActiveModeInExocraftEnum(IntEnum):
        None_ = 0x0
        Firing = 0x1
        Always = 0x2

    ActiveModeInExocraft: Annotated[
        c_enum32[eActiveModeInExocraftEnum],
        Field(c_enum32[eActiveModeInExocraftEnum], 0x4),
    ]

    class eActiveModeOnFootEnum(IntEnum):
        None_ = 0x0
        ScopeOnly = 0x1
        ScopeOrFiring = 0x2
        Always = 0x3

    ActiveModeOnFoot: Annotated[
        c_enum32[eActiveModeOnFootEnum], Field(c_enum32[eActiveModeOnFootEnum], 0x8)
    ]

    class eActiveModeWhenBuildingEnum(IntEnum):
        None_ = 0x0
        BuildPlacementOnly = 0x1
        SelectionModeOnly = 0x2
        Always = 0x3

    ActiveModeWhenBuilding: Annotated[
        c_enum32[eActiveModeWhenBuildingEnum],
        Field(c_enum32[eActiveModeWhenBuildingEnum], 0xC),
    ]
    AimingMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    BuildingMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]

    class eCursorLookStickEnabledEnum(IntEnum):
        None_ = 0x0
        Disabled = 0x1

    CursorLookStickEnabled: Annotated[
        c_enum32[eCursorLookStickEnabledEnum],
        Field(c_enum32[eCursorLookStickEnabledEnum], 0x18),
    ]
    CursorSensitivityX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    CursorSensitivityY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    CursorTighteningThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Deadzone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]

    class eEnableGyroInBuildingFreeCamEnum(IntEnum):
        Never = 0x0
        MatchActiveModeWhenBuilding = 0x1
        Always = 0x2

    EnableGyroInBuildingFreeCam: Annotated[
        c_enum32[eEnableGyroInBuildingFreeCamEnum],
        Field(c_enum32[eEnableGyroInBuildingFreeCamEnum], 0x2C),
    ]
    ExocraftMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]

    class eGyroRotationSpaceEnum(IntEnum):
        Local = 0x0
        Player = 0x1

    GyroRotationSpace: Annotated[
        c_enum32[eGyroRotationSpaceEnum], Field(c_enum32[eGyroRotationSpaceEnum], 0x34)
    ]

    class eGyroRotationSpaceHandheldEnum(IntEnum):
        Local = 0x0
        Player = 0x1

    GyroRotationSpaceHandheld: Annotated[
        c_enum32[eGyroRotationSpaceHandheldEnum],
        Field(c_enum32[eGyroRotationSpaceHandheldEnum], 0x38),
    ]

    class eHandednessEnum(IntEnum):
        Left = 0x0
        Right = 0x1

    Handedness: Annotated[
        c_enum32[eHandednessEnum], Field(c_enum32[eHandednessEnum], 0x3C)
    ]

    class eLookStickEnabledEnum(IntEnum):
        None_ = 0x0
        Disabled = 0x1
        Enabled = 0x2

    LookStickEnabled: Annotated[
        c_enum32[eLookStickEnabledEnum], Field(c_enum32[eLookStickEnabledEnum], 0x40)
    ]

    class ePitchAxisDirectionEnum(IntEnum):
        Disabled = 0x0
        Standard = 0x1
        Inverted = 0x2

    PitchAxisDirection: Annotated[
        c_enum32[ePitchAxisDirectionEnum],
        Field(c_enum32[ePitchAxisDirectionEnum], 0x44),
    ]

    class eRollAxisDirectionEnum(IntEnum):
        Disabled = 0x0
        Standard = 0x1
        Inverted = 0x2

    RollAxisDirection: Annotated[
        c_enum32[eRollAxisDirectionEnum], Field(c_enum32[eRollAxisDirectionEnum], 0x48)
    ]
    ScopeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    SensitivityX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    SensitivityY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    SmoothingThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    SmoothingWindow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    Steadying: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    TighteningThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]

    class eYawAxisDirectionEnum(IntEnum):
        Disabled = 0x0
        Standard = 0x1
        Inverted = 0x2

    YawAxisDirection: Annotated[
        c_enum32[eYawAxisDirectionEnum], Field(c_enum32[eYawAxisDirectionEnum], 0x68)
    ]
    AllowWhenRidingCreatures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6C)]
    EnableAdvancedOptions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6D)]
    FilterControllerVibrations: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6E)]
    GyroCursorEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6F)]
    GyroEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]
    GyroEnabledHandheld: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x71)]
    ZoomScalesSensitivity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x72)]


@partial_struct
class cGcTriggerFeedbackState(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Data: Annotated[cTkTriggerFeedbackData, Field(cTkTriggerFeedbackData, 0x10)]
    Action: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x20)
    ]


@partial_struct
class cGcItemShopAvailabilityDifficultyOptionData(Structure):
    NeverSoldItems: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcDifficultySettingUIOption(Structure):
    AlsoChangeOptions: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcDifficultySettingEnum]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcDifficultySettingEnum]], 0x0),
    ]
    MainOption: Annotated[
        c_enum32[enums.cGcDifficultySettingEnum],
        Field(c_enum32[enums.cGcDifficultySettingEnum], 0x10),
    ]


@partial_struct
class cGcDifficultyOptionUIGroup(Structure):
    HeadingLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DifficultyOptions: Annotated[
        basic.cTkDynamicArray[cGcDifficultySettingUIOption],
        Field(basic.cTkDynamicArray[cGcDifficultySettingUIOption], 0x20),
    ]


@partial_struct
class cGcDifficultySettingCommonData(Structure):
    DescriptionLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    TitleLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    ToggleDisabledLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    ToggleEnabledLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    EditabilityInOptionsMenu: Annotated[
        c_enum32[enums.cGcDifficultySettingEditability],
        Field(c_enum32[enums.cGcDifficultySettingEditability], 0x80),
    ]
    SettingType: Annotated[
        c_enum32[enums.cGcDifficultySettingType],
        Field(c_enum32[enums.cGcDifficultySettingType], 0x84),
    ]
    IsAscendingDifficulty: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x88)]


@partial_struct
class cGcDifficultySettingLocData(Structure):
    DescriptionLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    TitleLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]


@partial_struct
class cGcDifficultyCurrencyCostOptionData(Structure):
    Multipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    TradeBuyPriceMarkupMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    FreeCostTypes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    CostManagerCostsAreFree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13)]
    InteractionsCostsAreFree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcDifficultyFuelUseTechOverride(Structure):
    TechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Multiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcDifficultyFuelUseOptionData(Structure):
    TechOverrides: Annotated[
        basic.cTkDynamicArray[cGcDifficultyFuelUseTechOverride],
        Field(basic.cTkDynamicArray[cGcDifficultyFuelUseTechOverride], 0x0),
    ]
    Multiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcDifficultyInventoryStackSizeOptionData(Structure):
    MaxProductStackSizes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MaxSubstanceStackSizes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    ProductStackLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    SubstanceStackLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6C)]


@partial_struct
class cGcInWorldUIScreenData(Structure):
    ScreenOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    ScreenRotation: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x10)]
    ScreenScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcBlockedMessage(Structure):
    MessageId: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x0)]


@partial_struct
class cGcBlockedUser(Structure):
    UserId: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x0)]
    Username: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x40)]
    Platform: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)]


@partial_struct
class cGcBlockListPersistence(Structure):
    ListSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MessageListSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    MessageNextSlot: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    NextSlot: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    BlockedUserArray: Annotated[cGcBlockedUser, Field(cGcBlockedUser, 0x10)]
    BlockedMessageArray: Annotated[cGcBlockedMessage, Field(cGcBlockedMessage, 0x1F50)]


@partial_struct
class cGcSpringWeightModifyingAnim(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DesiredWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    IncludeBlendOut: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcSpringLink(Structure):
    AngularLimitMaxDeg: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    AngularLimitMinDeg: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    AngularMotionLimitBounciness: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    AngularMotionScale: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    CentreOfMassLocal: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    MotionLimitBounciness: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x50)]
    MotionLimitMax: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x60)]
    MotionLimitMin: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70)]
    MotionScale: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x80)]
    PivotAnchorLocal: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x90)]
    PivotLocal: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xA0)]
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0xB0)]
    LinkWeightModifyingAnims: Annotated[
        basic.cTkDynamicArray[cGcSpringWeightModifyingAnim],
        Field(basic.cTkDynamicArray[cGcSpringWeightModifyingAnim], 0xD0),
    ]
    NodeNames: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0xE0),
    ]
    AirSpeedFromMovementSpeedScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF0)
    ]
    AngularDampingCriticality: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    AngularMotionScale_Uniform: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    AngularNaturalFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]

    class eApplyAngularLimitsInEnum(IntEnum):
        Disabled = 0x0
        Itself = 0x1
        Parent = 0x2
        Component = 0x3

    ApplyAngularLimitsIn: Annotated[
        c_enum32[eApplyAngularLimitsInEnum],
        Field(c_enum32[eApplyAngularLimitsInEnum], 0x100),
    ]

    class eApplyAngularMotionScaleInEnum(IntEnum):
        Disabled = 0x0
        Uniform = 0x1
        Itself = 0x2
        Parent = 0x3
        Component = 0x4

    ApplyAngularMotionScaleIn: Annotated[
        c_enum32[eApplyAngularMotionScaleInEnum],
        Field(c_enum32[eApplyAngularMotionScaleInEnum], 0x104),
    ]
    ApplyAngularSpringInMovingFrame: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x108)
    ]
    ApplyGameGravity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    ApplyGameWind: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    ApplyInfluenceOfTranslationInMovingFrame: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x114)
    ]

    class eApplyMotionLimitsInEnum(IntEnum):
        Disabled = 0x0
        Uniform = 0x1
        Itself = 0x2
        Parent = 0x3
        Component = 0x4

    ApplyMotionLimitsIn: Annotated[
        c_enum32[eApplyMotionLimitsInEnum],
        Field(c_enum32[eApplyMotionLimitsInEnum], 0x118),
    ]

    class eApplyMotionScaleInEnum(IntEnum):
        Disabled = 0x0
        Uniform = 0x1
        Itself = 0x2
        Parent = 0x3
        Component = 0x4

    ApplyMotionScaleIn: Annotated[
        c_enum32[eApplyMotionScaleInEnum],
        Field(c_enum32[eApplyMotionScaleInEnum], 0x11C),
    ]
    DampingCriticality: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    DistanceWhereRotationMatchesLinear: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x124)
    ]
    InfluenceOfTranslation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128)]

    class eLinkWeightModeEnum(IntEnum):
        AlwaysOn = 0x0
        DefaultOn = 0x1
        DefaultOff = 0x2

    LinkWeightMode: Annotated[
        c_enum32[eLinkWeightModeEnum], Field(c_enum32[eLinkWeightModeEnum], 0x12C)
    ]
    LinkWeightModifyTimeActive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    LinkWeightModifyTimeInactive: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x134)
    ]
    MaximumSpeedFeltByDynamics: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x138)]
    MotionLimit_MaxDetachmentDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13C)
    ]
    MotionScale_Uniform: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    NaturalFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144)]

    class ePivotAnchorsToEnum(IntEnum):
        Itself = 0x0
        Parent = 0x1
        Node = 0x2
        NodeWithAnchor = 0x3

    PivotAnchorsTo: Annotated[
        c_enum32[ePivotAnchorsToEnum], Field(c_enum32[ePivotAnchorsToEnum], 0x148)
    ]
    SpringHangsDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x150)]
    PivotAnchorNode: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x190)
    ]
    AngularSpringEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D0)]
    ApplySpringInMovingFrame: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D1)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D2)]
    PositionalSpringEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D3)]
    SpringCollides: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D4)]
    SpringPivots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D5)]


@partial_struct
class cGcVehicleScanTableEntry(Structure):
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x20)]
    RequiredTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x38)]
    ScanList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x48),
    ]


@partial_struct
class cGcCamouflageData(Structure):
    CamouflageMaterial: Annotated[cTkMaterialResource, Field(cTkMaterialResource, 0x0)]
    DissolveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    DissolveTimeVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    FadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    LowQualityBrightnessMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x28)
    ]
    LowQualityFresnelModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]


@partial_struct
class cGcVehicleMuzzleData(Structure):
    MuzzleFlashDataID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcPlayerWeaponData(Structure):
    Reticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcVehicleWeaponMuzzleData(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MuzzleFlashEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcVehicleData(Structure):
    WheelGrassPushers: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    WheelLocs: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xA0)]
    CollDimensions: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x140)]
    CollOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x150)]
    ExtraCollOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x160)]
    FirstPersonSeatAdjust: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x170)]
    InertiaDimensions: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x180)]
    WheelForwardAngularFactor: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x190)]
    WheelSideAngularFactor: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1A0)]
    WheelSuspensionAngularFactor: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x1B0)
    ]
    WheelTurnAngularFactor: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1C0)]
    SuspensionAnimNames: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1D0)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x270)]
    SideSkidParticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x280)]
    SubSplashParticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x290)]
    WheelSpinParticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2A0)]
    WheelSplashParticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2B0)]
    WheelRadiusMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C0)]
    WheelRayFakeWidthFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E8)]
    AudioImpactSpeedMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x310)]
    AudioImpactSpeedThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x314)]
    CollRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x318)]
    CreatureMassScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x31C)]
    HardStopSpeedThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x320)]
    HeadlightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x324)]
    InertiaMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x328)]
    NumGrassPushers: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x32C)]
    NumWheels: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x330)]
    SideSkidParticleMaxRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x334)]
    SideSkidParticleMaxThresh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x338)]
    SideSkidParticleMinRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x33C)]
    SideSkidParticleMinThresh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x340)]
    SteeringWheelPushRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x344)]
    SteeringWheelSpringMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x348)
    ]
    SubSplashParticleMaxThresh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34C)]
    SubSplashParticleMinThresh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x350)]
    TopSpeedForward: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x354)]
    TopSpeedReverse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x358)]
    TurningWheelForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x35C)]
    TurningWheelForceDamperVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x360)]
    TurningWheelFrictionBraking: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x364)]
    TurningWheelFrictionNonBraking: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x368)
    ]
    TurningWheelFrictionOmega: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x36C)]
    UnderwaterAlignDir: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x370)]
    UnderwaterAlignUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x374)]
    UnderwaterEngineDirectionBrake: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x378)
    ]
    UnderwaterEngineDirectionBrakeVertical: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x37C)
    ]
    UnderwaterEngineFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x380)]
    UnderwaterEngineMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x384)]
    UnderwaterEngineMaxSpeedVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x388)]
    UnderwaterEnginePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38C)]
    UnderwaterEnginePowerVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x390)]
    VehicleAngularDampingAerial: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x394)]
    VehicleAngularDampingGround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x398)]
    VehicleAngularDampingWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x39C)]
    VehicleAudioSideSkidMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A0)]
    VehicleAudioSideSkidThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3A4)
    ]
    VehicleAudioSpeedMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A8)]
    VehicleAudioSpinSkidMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3AC)]
    VehicleAudioSpinSkidThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3B0)
    ]
    VehicleAudioSuspensionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3B4)]
    VehicleAudioSuspensionThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3B8)
    ]
    VehicleAudioTorqueMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3BC)]
    VehicleBoostExtraMaxSpeedAir: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3C0)
    ]
    VehicleBoostForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C4)]
    VehicleBoostMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C8)]
    VehicleBoostRechargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3CC)]
    VehicleBoostSpeedFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D0)]
    VehicleBoostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D4)]
    VehicleComCheat: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D8)]
    VehicleGravity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3DC)]
    VehicleGravityWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E0)]
    VehicleJumpAirControlForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E4)]
    VehicleJumpAirMaxTorque: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E8)]
    VehicleJumpAirRotateTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3EC)]
    VehicleJumpAirRotateTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F0)]
    VehicleJumpAirRotateXAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F4)]
    VehicleJumpAirRotateZAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F8)]
    VehicleJumpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3FC)]
    VehicleLinearDampingAerial: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x400)]
    VehicleLinearDampingGround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x404)]
    VehicleLinearDampingWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x408)]
    VehicleUnderwaterRotateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40C)]
    VisualPitchAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x410)]
    VisualRollAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x414)]
    VisualRollOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x418)]
    WheelDragginess: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x41C)]
    WheelEndHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x420)]
    WheelFrontFrictionDynamic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x424)]
    WheelFrontFrictionDynamicThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x428)
    ]
    WheelFrontFrictionOmega: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42C)]
    WheelFrontFrictionStatic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x430)]
    WheelFrontFrictionStaticThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x434)
    ]
    WheelGrassPusherFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x438)]
    WheelGrassPusherStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43C)]
    WheelGrassPusherWobble: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x440)]
    WheelGuardAdjustUpwards: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x444)]
    WheelGuardExtraHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x448)]
    WheelGuardExtraRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44C)]
    WheelGuardMassScaleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x450)]
    WheelGuardMassScaleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x454)]
    WheelGuardMassScaleMinClamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x458)]
    WheelGuardPenetrationScaleMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x45C)
    ]
    WheelGuardPenetrationScaleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x460)
    ]
    WheelGuardPenetrationScaleMinClamp: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x464)
    ]
    WheelGuardVerticalResponseMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x468)
    ]
    WheelGuardVerticalResponseMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x46C)
    ]
    WheelMaxAccelForceForward: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x470)]
    WheelMaxAccelForceReverse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x474)]
    WheelMaxDecelForceBraking: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x478)]
    WheelMaxDecelForceNonBraking: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x47C)
    ]
    WheelRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x480)]
    WheelSideFrictionDynamic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x484)]
    WheelSideFrictionDynamicThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x488)
    ]
    WheelSideFrictionOmega: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48C)]
    WheelSideFrictionStatic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x490)]
    WheelSideFrictionStaticThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x494)
    ]
    WheelSpinniness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x498)]
    WheelSpinParticleMaxRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x49C)]
    WheelSpinParticleMaxThresh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4A0)]
    WheelSpinParticleMinRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4A4)]
    WheelSpinParticleMinThresh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4A8)]
    WheelStartHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4AC)]
    WheelSuspensionAnimMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4B0)]
    WheelSuspensionAnimMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4B4)]
    WheelSuspensionDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4B8)]
    WheelSuspensionForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4BC)]
    WheelSuspensionlength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C0)]
    CockpitHeadlightNames: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x4C4)
    ]
    HeadlightNames: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x6C4)
    ]
    VolumetricHeadlightNames: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x8C4)
    ]
    WheelNames: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xAC4)
    ]
    WheelSuspensionNames: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC04)
    ]
    AudioBoostStart: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xD44)
    ]
    AudioBoostStop: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xDC4)
    ]
    AudioHornStart: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xE44)
    ]
    AudioHornStop: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xEC4)
    ]
    AudioIdleExterior: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xF44)
    ]
    AudioImpacts: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xFC4)
    ]
    AudioJump: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1044)
    ]
    AudioStart: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x10C4)
    ]
    AudioStop: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1144)
    ]
    AudioSuspension: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x11C4)
    ]
    CustomCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1244)]
    DriveOnTopOfWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1245)]
    LockVehicleAxis: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1246)]
    UseBuggySuspensionHack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1247)]
    UseRoverWheelHack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1248)]
    VehicleAudioSwapSkidAndSpeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1249)]


@partial_struct
class cGcDebugCameraEntry(Structure):
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Local: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    FOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    SpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]


@partial_struct
class cGcDebugCamera(Structure):
    Waypoints: Annotated[
        basic.cTkDynamicArray[cGcDebugCameraEntry],
        Field(basic.cTkDynamicArray[cGcDebugCameraEntry], 0x0),
    ]
    BaseSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    CurrentWaypoint: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    CurrentWaypointProgress: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Smoothing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcMechPartEffectOverride(Structure):
    OverrideEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MeshPart: Annotated[
        c_enum32[enums.cGcMechMeshPart], Field(c_enum32[enums.cGcMechMeshPart], 0x10)
    ]
    MeshType: Annotated[
        c_enum32[enums.cGcMechMeshType], Field(c_enum32[enums.cGcMechMeshType], 0x14)
    ]


@partial_struct
class cGcMechEffect(Structure):
    DefaultEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MeshPartOverrides: Annotated[
        basic.cTkDynamicArray[cGcMechPartEffectOverride],
        Field(basic.cTkDynamicArray[cGcMechPartEffectOverride], 0x10),
    ]


@partial_struct
class cGcMechEffectTable(Structure):
    FootDust: Annotated[cGcMechEffect, Field(cGcMechEffect, 0x0)]
    Jetpack: Annotated[cGcMechEffect, Field(cGcMechEffect, 0x20)]
    JetpackLaunch: Annotated[cGcMechEffect, Field(cGcMechEffect, 0x40)]
    JetpackLaunchGroundEffect: Annotated[cGcMechEffect, Field(cGcMechEffect, 0x60)]
    LandingImpact: Annotated[cGcMechEffect, Field(cGcMechEffect, 0x80)]


@partial_struct
class cGcExoMechWeaponData(Structure):
    MuzzleFlashDataID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LocationPriority: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcMechWeaponLocation]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcMechWeaponLocation]], 0x50),
    ]
    AngleToleranceForArmAiming: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    CooldownTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    CooldownTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    MaintainFireLocationMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    MaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    MinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    SelectionWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]


@partial_struct
class cGcMechMeshPartTypeData(Structure):
    DescriptorGroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RequiredTechs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]


@partial_struct
class cGcMechMeshPartData(Structure):
    MeshTypes: Annotated[cGcMechMeshPartTypeData, Field(cGcMechMeshPartTypeData, 0x0)]


@partial_struct
class cGcPulseEncounterSpawnAbandonedFreighter(Structure):
    AbandonedFreighter: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]


@partial_struct
class cGcPulseEncounterSpawnAlienFreighter(Structure):
    HailingPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]


@partial_struct
class cGcPulseEncounterSpawnPirates(Structure):
    pass


@partial_struct
class cGcPulseEncounterSpawnObject(Structure):
    Object: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    DespawnEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    SpawnEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    TriggerActionOnSpawn: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Pitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    Roll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    SpawnScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    SpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    UpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    WarpInDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    Yaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    BlockAIShipAutopilot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6C)]
    LeaveIfAttacked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6D)]
    WarpIn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6E)]


@partial_struct
class cGcPulseEncounterSpawnConditions(Structure):
    RequiresMissionActive: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RequiresMissionComplete: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    RequiresMissionNotActive: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RequiresMissionNotComplete: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    RequiresProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    AllowedBeyondPortals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    AllowedDuringTutorial: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    AllowedInCreative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]
    AllowedInEmptySystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x53)]
    AllowedWhileOnMPMission: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]
    MissionEncounter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x55)]
    RequiresAlienShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56)]
    RequiresNearbyCorruptWorld: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x57)]
    StandardEncounter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]


@partial_struct
class cGcDebugShipTravelLine(Structure):
    Dir: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Origin: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    InfluenceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Length: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcSpaceshipAvoidanceData(Structure):
    EndRadiusMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Force: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    NumRays: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    RayMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    RaySpeedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SpeedInterp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SpeedInterpMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    SpeedInterpRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    StartRadiusMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcDoShipClearCommunication(Structure):
    pass


@partial_struct
class cGcDoShipFlybyClose(Structure):
    LockOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    LockSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    LockTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    HailingBehaviour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]
    StayCloseAtLowSpeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD)]


@partial_struct
class cGcDoShipFlybyIntercept(Structure):
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcDoShipFlybyMineAsteroids(Structure):
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcDoShipFlybyOverhead(Structure):
    Length: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Offset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcDoShipLandNextToPlayer(Structure):
    Length: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Offset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcDoShipReceiveHail(Structure):
    pass


@partial_struct
class cGcDoShipReceiveMessage(Structure):
    ShipMessage: Annotated[
        c_enum32[enums.cGcShipMessage], Field(c_enum32[enums.cGcShipMessage], 0x0)
    ]


@partial_struct
class cGcShipAIDeathData(Structure):
    BrakeForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DroneDeathBoomTotalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    DroneDeathForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    DroneDeathOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    DroneDeathTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    DroneDeathTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    DroneNumDeathBooms: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cGcShipAIPerformanceArray(Structure):
    Array: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]


@partial_struct
class cGcShipAIPlanetPatrolData(Structure):
    Squad: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AlignForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AlongPathForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    BrakeForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    PathOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    PathSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    PlayerFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    PlayerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    ToPathForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    WaypointDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]


@partial_struct
class cGcPlayerSpaceshipAim(Structure):
    AimAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AimAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    AimDistanceAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    AimDistanceAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    AimDistanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AimDistanceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcPlayerSpaceshipClassBonuses(Structure):
    BoostingTurnDampMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BoostingTurnDampMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    BoostMaxSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    BoostMaxSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    DirectionBrakeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    DirectionBrakeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MaxSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MaxSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    ThrustForceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    ThrustForceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    TurnStrengthMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    TurnStrengthMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]


@partial_struct
class cGcPlayerSpaceshipEngineData(Structure):
    BalanceTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BalanceTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    BoostFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    BoostingTurnDamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    BoostMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    BoostThrustForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    DirectionBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    DirectionBrakeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Falloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FollowDerivativeGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FollowDerivativeLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    FollowIntegralDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    FollowIntegralGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    FollowIntegralLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    FollowProportionalGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    FollowProportionalLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    LowSpeedTurnDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    MinSpeedForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    OverspeedBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    ReverseBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    RollAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    RollAutoTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    RollForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    ThrustForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    TurnBrakeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    TurnBrakeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    TurnStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]


@partial_struct
class cGcPlayerSpaceshipControlData(Structure):
    AtmosCombatEngine: Annotated[
        cGcPlayerSpaceshipEngineData, Field(cGcPlayerSpaceshipEngineData, 0x0)
    ]
    CombatEngine: Annotated[
        cGcPlayerSpaceshipEngineData, Field(cGcPlayerSpaceshipEngineData, 0x74)
    ]
    PlanetEngine: Annotated[
        cGcPlayerSpaceshipEngineData, Field(cGcPlayerSpaceshipEngineData, 0xE8)
    ]
    SpaceEngine: Annotated[
        cGcPlayerSpaceshipEngineData, Field(cGcPlayerSpaceshipEngineData, 0x15C)
    ]
    AngularFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D0)]
    ExitAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D4)]
    ExitAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D8)]
    ExitHeightFactorMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DC)]
    ExitHeightFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E0)]
    ExitHeightFactorPlungeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E4)]
    ExitHeightFactorPlungeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E8)]
    ExitLeaveAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EC)]
    MaxTorque: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F0)]
    ShipMinHeightForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F4)]
    ShipPlanetBrakeAlignMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F8)]
    ShipPlanetBrakeAlignMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC)]
    ShipPlanetBrakeForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x200)]
    ShipPlanetBrakeMaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x204)]
    ShipPlanetBrakeMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x208)]
    ShipPlanetBrakeMinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C)]
    ShipPlanetBrakeMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x210)]
    ExitCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x214)
    ]
    ExitDownCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x215)
    ]


@partial_struct
class cGcPlayerSpaceshipWarpData(Structure):
    EntryTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ExitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    TravelTunnelTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    EntryTunnelCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xC)
    ]
    ExitTunnelCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xD)
    ]


@partial_struct
class cGcShieldComponentData(Structure):
    Type: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcShipAIAttackData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AttackApproachMaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AttackApproachMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    AttackApproachOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    AttackBoostAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AttackBoostRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    AttackBoostTimeToRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    AttackFlybyOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    AttackMaxPlanetHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    AttackMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    AttackReadyTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    AttackShootTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    AttackShootTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    AttackShootWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    AttackTargetMaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    AttackTargetMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    AttackTargetOffsetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    AttackTargetOffsetMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    AttackTargetSwitchTargetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    AttackTooCloseRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    AttackTurnMaxMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AttackTurnMaxTimeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    AttackTurnMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    AttackTurnMultiplierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    AttackWeaponRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    FleeBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    FleeBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    FleeBrakeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    FleeMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    FleeMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    FleeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    FleeRepositionAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    FleeRepositionAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    FleeRepositionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    FleeRepositionUrgentAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    FleeRepositionUrgentAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    FleeRepositionUrgentTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    FleeUrgentBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    FleeUrgentBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    FleeUrgentBrakeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    FleeUrgentRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    GunDispersionAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    GunFireRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    LaserHealthPoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    NumHitsBeforeBail: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC0)]
    NumHitsBeforeReposition: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC4)]
    PlanetFleeHeightExtra: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]


@partial_struct
class cGcShipAICombatDefinition(Structure):
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    Behaviour: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    DamageMultiplier: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x28)]
    Engine: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x38)]
    Gun: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    PlanetBehaviour: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x68)]
    PlanetEngine: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x78)]
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x88)]
    Shield: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x98)]
    Health: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA8)]
    LaserDamageLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xAC)]
    LevelledExtraHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB0)]
    RewardCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB4)]
    UsesFuelRods: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB8)]
    UsesShieldGenerators: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB9)]


@partial_struct
class cGcDebugPlanetPos(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    OverridePosition: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcSpaceshipShieldData(Structure):
    DamageMulOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Health: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    LevelledExtraHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    RechargeDelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    RechargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    StartDepletedWhenEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcSpaceshipTravelData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AvoidTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    BoostSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    DirectionBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Falloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Force: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MaxSpeedBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    MinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MinSpeedForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    Roll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    TurnMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    TurnMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    Hovering: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]


@partial_struct
class cGcAISpaceshipWeightingData(Structure):
    CivilianClassWeightings: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcWaterEmissionData(Structure):
    FoamEmissionSelectionWeights: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    WaterEmissionSelectionWeights: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10)
    ]
    OverrideDefault: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcWaterEmissionBiomeData(Structure):
    SubBiomeOverrides: Annotated[cGcWaterEmissionData, Field(cGcWaterEmissionData, 0x0)]


@partial_struct
class cGcAISpaceshipInstanceData(Structure):
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcAISpaceshipMappingData(Structure):
    ClassMap: Annotated[
        cGcAISpaceshipInstanceData, Field(cGcAISpaceshipInstanceData, 0x0)
    ]


@partial_struct
class cGcWeatherWeightings(Structure):
    WeatherWeightings: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcAIShipDebugSpawnData(Structure):
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    FlightDir: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x40)]
    SpecificModel: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    HoverHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    HoverTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    IgnitionDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    TakeOffDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    WarpOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    Wingman: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]


@partial_struct
class cGcAIShipSpawnMarkerData(Structure):
    MarkerLabel: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    MarkerIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x20)]
    MaxVisibleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    MinAngleVisible: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MinVisibleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]

    class eShipsToMarkEnum(IntEnum):
        None_ = 0x0
        Leader = 0x1
        All = 0x2

    ShipsToMark: Annotated[
        c_enum32[eShipsToMarkEnum], Field(c_enum32[eShipsToMarkEnum], 0x44)
    ]
    HideDuringCombat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]


@partial_struct
class cGcAIShipSpawnData(Structure):
    OffsetSphereOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    MarkerData: Annotated[
        cGcAIShipSpawnMarkerData, Field(cGcAIShipSpawnMarkerData, 0x10)
    ]
    CombatMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    Message: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)]
    OSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA0)
    ]
    RewardMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC0)
    ]
    AttackDefinition: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE0)]
    ChildSpawns: Annotated[
        "basic.cTkDynamicArray[cGcAIShipSpawnData]",
        Field("basic.cTkDynamicArray[cGcAIShipSpawnData]", 0xF0),
    ]
    Performances: Annotated[
        cGcShipAIPerformanceArray, Field(cGcShipAIPerformanceArray, 0x100)
    ]
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x110)]
    Count: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x120)]
    Scale: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x128)]
    Spread: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x130)]
    StartTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x138)]
    MinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    Role: Annotated[
        c_enum32[enums.cGcAISpaceshipRoles],
        Field(c_enum32[enums.cGcAISpaceshipRoles], 0x144),
    ]
    Shortcut: Annotated[
        c_enum32[enums.cTkInputEnum], Field(c_enum32[enums.cTkInputEnum], 0x148)
    ]

    class eSpawnShapeEnum(IntEnum):
        Sphere = 0x0
        Cone = 0x1
        OffsetSphere = 0x2

    SpawnShape: Annotated[
        c_enum32[eSpawnShapeEnum], Field(c_enum32[eSpawnShapeEnum], 0x14C)
    ]
    AttackFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x150)]
    WarpIn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x151)]


@partial_struct
class cGcTerrainEditing(Structure):
    EditSizes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    SubtractSizes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    BaseEditSizes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    UndoEditSizes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    DensityBlendDistanceMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3C)
    ]
    EditEffectScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    EditPlaneMaxAdditiveOffsetFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x44)
    ]
    EditPlaneMaxSubtractiveOffsetFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x48)
    ]
    EditPlaneMinAdditiveOffsetFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4C)
    ]
    EditPlaneMinSubtractiveOffsetFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x50)
    ]
    FlatteningSizes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    MinimumSubstancePresence: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    RegionEditAreaMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    RegionMapSearchRadiusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x60)
    ]
    TerrainBlocksSearchRadiusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x64)
    ]
    TerrainEditBaseDistanceTolerance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x68)
    ]
    TerrainEditBeamAddInterpolationStepFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C)
    ]
    TerrainEditBeamMaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    TerrainEditBeamSpherecastRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74)
    ]
    TerrainEditBeamSubtractInterpolationStepFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x78)
    ]
    TerrainEditsNormalCostFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    TerrainEditsSurvivalCostFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x80)
    ]
    TerrainUndoBaseDistanceTolerance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x84)
    ]
    UndoBaseEditEffectiveScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    UndoEditToleranceFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    VoxelsDeletedAffectCostFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x90)
    ]
    EditGunBeamEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]
    EditGunParticlesEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x95)]
    SubtractGunBeamEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x96)]
    SubtractGunParticlesEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x97)]


@partial_struct
class cGcPlanetWeatherColourData(Structure):
    CloudColour1: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    CloudColour2: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    FogColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    HeightFogColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    HorizonColour: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    LightColour: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    LightColourUnderground: Annotated[basic.Colour, Field(basic.Colour, 0x60)]
    SkyColour: Annotated[basic.Colour, Field(basic.Colour, 0x70)]
    SkyGradientSpeed: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x80)]
    SkySolarColour: Annotated[basic.Colour, Field(basic.Colour, 0x90)]
    SkyUpperColour: Annotated[basic.Colour, Field(basic.Colour, 0xA0)]
    SunColour: Annotated[basic.Colour, Field(basic.Colour, 0xB0)]
    GasGiantAtmosphereID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    CirrusCloudDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    SelectionWeighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]


@partial_struct
class cGcPlanetWeatherColourIndex(Structure):
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]

    class eWeatherColourSetEnum(IntEnum):
        Common = 0x0
        Rare = 0x1

    WeatherColourSet: Annotated[
        c_enum32[eWeatherColourSetEnum], Field(c_enum32[eWeatherColourSetEnum], 0x4)
    ]


@partial_struct
class cGcSolarSystemSkyColourData(Structure):
    BottomColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    BottomColourPlanet: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    CloudColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    FogColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    FogColour2: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    LightColour: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    MidColour: Annotated[basic.Colour, Field(basic.Colour, 0x60)]
    MidColourPlanet: Annotated[basic.Colour, Field(basic.Colour, 0x70)]
    NebulaColour1: Annotated[basic.Colour, Field(basic.Colour, 0x80)]
    NebulaColour2: Annotated[basic.Colour, Field(basic.Colour, 0x90)]
    NebulaColour3: Annotated[basic.Colour, Field(basic.Colour, 0xA0)]
    TopColour: Annotated[basic.Colour, Field(basic.Colour, 0xB0)]
    TopColourPlanet: Annotated[basic.Colour, Field(basic.Colour, 0xC0)]


@partial_struct
class cGcSpawnDensity(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eCoverageTypeEnum(IntEnum):
        Total = 0x0
        SmoothPatch = 0x1
        GridPatch = 0x2

    CoverageType: Annotated[
        c_enum32[eCoverageTypeEnum], Field(c_enum32[eCoverageTypeEnum], 0x10)
    ]
    PatchSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    RegionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]


@partial_struct
class cGcPlanetTerrainColour(Structure):
    Palette: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x0)]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]


@partial_struct
class cGcPlanetTradingData(Structure):
    TradingClass: Annotated[
        c_enum32[enums.cGcTradingClass], Field(c_enum32[enums.cGcTradingClass], 0x0)
    ]
    WealthClass: Annotated[
        c_enum32[enums.cGcWealthClass], Field(c_enum32[enums.cGcWealthClass], 0x4)
    ]


@partial_struct
class cGcPlanetWaterColourData(Structure):
    CausticsColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    EmissionColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    FoamColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    FoamEmission: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    ScatterColour: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    TransmittanceColour: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    MaxScatterDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    MaxTransmittanceDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    MinScatterDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    MinTransmittanceDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    SelectionWeighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    SubsurfaceBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    SurfaceAbsorptionMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]


@partial_struct
class cGcTerrainControls(Structure):
    GridLayers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    NoiseLayers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Features: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    Caves: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    HighWaterActiveFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    RockTileFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    SubstanceTileFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    WaterActiveFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    ForceContinentalNoise: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]


@partial_struct
class cGcPlanetWaterData(Structure):
    ColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    FoamEmission: Annotated[
        c_enum32[enums.cGcWaterEmissionBehaviourType],
        Field(c_enum32[enums.cGcWaterEmissionBehaviourType], 0x4),
    ]
    Murkyness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    WaterEmission: Annotated[
        c_enum32[enums.cGcWaterEmissionBehaviourType],
        Field(c_enum32[enums.cGcWaterEmissionBehaviourType], 0xC),
    ]


@partial_struct
class cGcPlanetHazardData(Structure):
    LifeSupportDrain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Radiation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    SpookLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Temperature: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    Toxicity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]


@partial_struct
class cGcPlanetDataResourceHint(Structure):
    Hint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Icon: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcPlanetGroundCombatData(Structure):
    FlybyTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    SentinelTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x8)]
    MaxActiveDrones: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    SentinelLevel: Annotated[
        c_enum32[enums.cGcPlanetSentinelLevel],
        Field(c_enum32[enums.cGcPlanetSentinelLevel], 0x14),
    ]


@partial_struct
class cGcPlanetInfo(Structure):
    SentinelsPerDifficulty: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x0)
    ]
    Fauna: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x200)]
    Flora: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x280)]
    PlanetDescription: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x300)
    ]
    PlanetType: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x380)
    ]
    Resources: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x400)
    ]
    Weather: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x480)]
    SentinelHighlightPerDifficulty: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x500)
    ]
    IsWeatherExtreme: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x504)]
    SpecialFauna: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x505)]


@partial_struct
class cGcPlanetRingData(Structure):
    Colour1: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Colour2: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    AlphaMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Depth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    LargeScale1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    LargeScale2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MidScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MidStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    Offset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    SmallScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    HasRings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]


@partial_struct
class cGcPlanetSectionData(Structure):
    DiscovererUID: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    DiscovererPlatform: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0x8)]
    DiscoveredState: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]


@partial_struct
class cGcPlanetaryMappingData(Structure):
    SectionsData: Annotated[
        basic.cTkDynamicArray[cGcPlanetSectionData],
        Field(basic.cTkDynamicArray[cGcPlanetSectionData], 0x0),
    ]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]


@partial_struct
class cGcPlanetaryMappingValues(Structure):
    PlanetSize: Annotated[
        c_enum32[enums.cGcPlanetSize], Field(c_enum32[enums.cGcPlanetSize], 0x0)
    ]
    PolesPerSection: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x4)]
    SectionPerSide: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x6)]


@partial_struct
class cGcBiomeFileListOption(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    PurpleSystemWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SubType: Annotated[
        c_enum32[enums.cGcBiomeSubType], Field(c_enum32[enums.cGcBiomeSubType], 0x14)
    ]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcBiomeFileListOptions(Structure):
    FileOptions: Annotated[
        basic.cTkDynamicArray[cGcBiomeFileListOption],
        Field(basic.cTkDynamicArray[cGcBiomeFileListOption], 0x0),
    ]


@partial_struct
class cGcGasGiantAtmosphereSetting(Structure):
    DiscoveryPlanetColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    AtmosphereID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    GradientMapResource: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]


@partial_struct
class cGcHeavyAirColourData(Structure):
    Colour1: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Colour2: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    ExtremeColour1: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    ExtremeColour2: Annotated[basic.Colour, Field(basic.Colour, 0x30)]


@partial_struct
class cGcHeavyAirSettingValues(Structure):
    ForceColour1: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ForceColour2: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    Colour1: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x20)]
    Colour2: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x2C)]
    Alpha1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    Alpha2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    Thickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    ForceColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    ReduceThicknessWithCloudCoverage: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x49)
    ]


@partial_struct
class cGcHeavyAirSetting(Structure):
    Settings: Annotated[cGcHeavyAirSettingValues, Field(cGcHeavyAirSettingValues, 0x0)]


@partial_struct
class cGcBiomeList(Structure):
    BiomeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    PrimeBiomeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]


@partial_struct
class cGcBiomeCloudSettings(Structure):
    StormCloudBottomColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    StormCloudTopColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    MaxCover: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MaxCoverage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MaxCoverageVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    MaxRateOfChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    MaxRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MaxVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    MinCover: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    MinCoverage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MinCoverageVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MinRateOfChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MinRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    MinVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    TendencyTowardsBeingCloudy: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]


@partial_struct
class cGcSolarSystemEventWarpOut(Structure):
    WarpIntervalRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    SquadName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC)]


@partial_struct
class cGcAtmosphereList(Structure):
    Atmospheres: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x0),
    ]


@partial_struct
class cGcGeneratedShipCounts(Structure):
    Counts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcSolarGenerationData(Structure):
    SolarSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]


@partial_struct
class cGcSolarSystemLocatorChoice(Structure):
    class eChoiceEnum(IntEnum):
        LookupName = 0x0
        AnyOfType = 0x1
        SpecificIndex = 0x2
        InFrontOfPlayer = 0x3

    Choice: Annotated[c_enum32[eChoiceEnum], Field(c_enum32[eChoiceEnum], 0x0)]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Type: Annotated[
        c_enum32[enums.cGcSolarSystemLocatorTypes],
        Field(c_enum32[enums.cGcSolarSystemLocatorTypes], 0x8),
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC)]


@partial_struct
class cGcSpaceStationSpawnData(Structure):
    SpawnFacing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    SpawnPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x20)]

    class eSpawnModeEnum(IntEnum):
        None_ = 0x0
        UseSeed = 0x1
        UseAltID = 0x2

    SpawnMode: Annotated[
        c_enum32[eSpawnModeEnum], Field(c_enum32[eSpawnModeEnum], 0x30)
    ]
    AltId: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x34)]


@partial_struct
class cGcAsteroidGeneratorAssignment(Structure):
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x0)]
    Locator: Annotated[
        cGcSolarSystemLocatorChoice, Field(cGcSolarSystemLocatorChoice, 0x10)
    ]
    AsteroidCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    PlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]


@partial_struct
class cGcSolarSystemTraderSpawnData(Structure):
    SequenceTakeoffDelay: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    ChanceToDelayLaunch: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    InitialTakeoffDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MaxToSpawn: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcAsteroidGeneratorRing(Structure):
    Rotation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Assignment: Annotated[
        cGcAsteroidGeneratorAssignment, Field(cGcAsteroidGeneratorAssignment, 0x10)
    ]
    LowerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    OffBalance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x5C)]
    PushAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    PushRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    UpperRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    USpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    FlipPush: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]


@partial_struct
class cGcSolarSystemLocator(Structure):
    Direction: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Type: Annotated[
        c_enum32[enums.cGcSolarSystemLocatorTypes],
        Field(c_enum32[enums.cGcSolarSystemLocatorTypes], 0x24),
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x28)]


@partial_struct
class cGcAsteroidGeneratorSlab(Structure):
    Rotation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Scale: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Assignment: Annotated[
        cGcAsteroidGeneratorAssignment, Field(cGcAsteroidGeneratorAssignment, 0x20)
    ]
    NoiseApply: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    NoiseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    NoiseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]


@partial_struct
class cGcAsteroidGeneratorSurround(Structure):
    Assignment: Annotated[
        cGcAsteroidGeneratorAssignment, Field(cGcAsteroidGeneratorAssignment, 0x0)
    ]
    LowerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    NoiseApply: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    NoiseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    NoiseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    UpperRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]


@partial_struct
class cGcExperienceTimers(Structure):
    High: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    Low: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x8)]
    Normal: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]
    HighChance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    LowChance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]


@partial_struct
class cGcSentinelPounceBalance(Structure):
    MaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MaxFireRateScore: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MinFireRateScore: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MinTimeBetweenPounces: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    OtherPounceTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    PounceTimeFireRateScoreExtra: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcSentinelResource(Structure):
    Resource: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    BaseHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    HealthIncreasePerLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    RepairThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    RepairTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcSmokeBotStats(Structure):
    MinCpuFPSFacing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    MinCpuFPSPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    MinGpuFPSFacing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    MinGpuFPSPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    MinMemoryFacing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    MinMemoryPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x50)]
    AvgCpuFPS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AvgGpuFPS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    FrameCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    MaxCpuFPS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    MaxGpuFPS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    MinCpuFPS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    MinGpuFPS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    MinMemory: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    TotalCpuFps: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    TotalGpuFps: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]


@partial_struct
class cGcSmokeBotPlanetReport(Structure):
    PlanetStats: Annotated[cGcSmokeBotStats, Field(cGcSmokeBotStats, 0x0)]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x90)]


@partial_struct
class cGcSmokeBotSystemReport(Structure):
    SpaceStats: Annotated[cGcSmokeBotStats, Field(cGcSmokeBotStats, 0x0)]
    SystemStats: Annotated[cGcSmokeBotStats, Field(cGcSmokeBotStats, 0x90)]
    PlanetReports: Annotated[
        basic.cTkDynamicArray[cGcSmokeBotPlanetReport],
        Field(basic.cTkDynamicArray[cGcSmokeBotPlanetReport], 0x120),
    ]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x130)]


@partial_struct
class cGcSmokeBotReport(Structure):
    Systems: Annotated[
        basic.cTkDynamicArray[cGcSmokeBotSystemReport],
        Field(basic.cTkDynamicArray[cGcSmokeBotSystemReport], 0x0),
    ]
    StartingUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]


@partial_struct
class cGcDroneResource(Structure):
    Resource: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcDroneWeaponData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Projectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ExplosionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FireRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FireTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    FireTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    InheritInitialVelocity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MoveDistanceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    MoveDistanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    NumProjectiles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    NumShotsMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    NumShotsMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    ProjectileSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    Range: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    Timeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    ChangeBarrelEachShot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]


@partial_struct
class cGcMechTargetSelectionWeightingSettings(Structure):
    CloseDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CloseDistanceWeightFactorExponent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4)
    ]
    DistanceWeightFactorBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    FarDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    FarDistanceWeightFactorExponent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10)
    ]
    FwdDirectionWeightFactorBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MidDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MidDistanceWeightFactorExponent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C)
    ]
    ThreatWeightFactorBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    VeryCloseDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    VeryCloseDistanceWeightFactorExponent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x28)
    ]
    VeryFarDistanceWeightFactorExponent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2C)
    ]


@partial_struct
class cGcRobotLaserData(Structure):
    LaserColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    LaserLightOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    LaserID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    LaserActiveSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    LaserChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    LaserLightAttackSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    LaserLightChargeSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    LaserMiningDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    LaserSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    LaserTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]


@partial_struct
class cGcSentinelDamagedData(Structure):
    DamageEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DamageType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    SelfDestructEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    DamageEffectHealthPercentThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x30)
    ]
    RangeTrigger: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    TimeTrigger: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    CanSelfDestruct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    UseDamageEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3D)]


@partial_struct
class cGcModularCustomisationEffectsData(Structure):
    EffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]

    class eModularCustomisationEffectModeEnum(IntEnum):
        Build = 0x0
        BuildOutward = 0x1
        Dissolve = 0x2

    ModularCustomisationEffectMode: Annotated[
        c_enum32[eModularCustomisationEffectModeEnum],
        Field(c_enum32[eModularCustomisationEffectModeEnum], 0x4),
    ]


@partial_struct
class cGcDroneControlData(Structure):
    DirectionBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    HeightAdjustDownStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    HeightAdjustStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    LeanInMoveDirStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    LookStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    LookStrengthVertical: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MaxPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    MaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    RepelForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    RepelRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    StopTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]


@partial_struct
class cGcProjectileLineData(Structure):
    BulletGlowWidthMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BulletGlowWidthMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    BulletGlowWidthTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    BulletLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    BulletMaxScaleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    BulletMinScaleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    BulletScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    BulletScalerMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    BulletScalerMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    BulletGlowWidthCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x24)
    ]


@partial_struct
class cGcProjectileImpactData(Structure):
    Effect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Impact: Annotated[
        c_enum32[enums.cGcProjectileImpactType],
        Field(c_enum32[enums.cGcProjectileImpactType], 0x10),
    ]

    class eImpactAlignmentEnum(IntEnum):
        ImpactNormal = 0x0
        ImpactReflected = 0x1
        GravityUp = 0x2

    ImpactAlignment: Annotated[
        c_enum32[eImpactAlignmentEnum], Field(c_enum32[eImpactAlignmentEnum], 0x14)
    ]

    class eImpactAttachmentEnum(IntEnum):
        World = 0x0
        HitBody = 0x1

    ImpactAttachment: Annotated[
        c_enum32[eImpactAttachmentEnum], Field(c_enum32[eImpactAttachmentEnum], 0x18)
    ]


@partial_struct
class cGcTracerData(Structure):
    DamageMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DamageMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    DamageMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    DamageMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Length: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcZoomData(Structure):
    EffectStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MaxScanDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MinScanDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    WalkSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]

    class eZoomTypeEnum(IntEnum):
        None_ = 0x0
        Far = 0x1
        Mid = 0x2
        Close = 0x3

    ZoomType: Annotated[c_enum32[eZoomTypeEnum], Field(c_enum32[eZoomTypeEnum], 0x18)]


@partial_struct
class cGcBoidData(Structure):
    Alignment: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Coherence: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    DirectionBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Follow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    InitFacingOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    InitOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    InitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    LeadTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    MaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Separation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcDamageMultiplier(Structure):
    Multiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Type: Annotated[
        c_enum32[enums.cGcDamageType], Field(c_enum32[enums.cGcDamageType], 0x4)
    ]


@partial_struct
class cGcDamageMultiplierLookup(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Multipliers: Annotated[
        basic.cTkDynamicArray[cGcDamageMultiplier],
        Field(basic.cTkDynamicArray[cGcDamageMultiplier], 0x10),
    ]
    Default: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcProjectorOffsetData(Structure):
    Active: Annotated[cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x0)]
    Inactive: Annotated[cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x30)]
    ScreenScale: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x60)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]


@partial_struct
class cGcScanData(Structure):
    CameraEventId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eCameraEventFocusTargetTypeEnum(IntEnum):
        None_ = 0x0
        ScanEventBuilding = 0x1
        RevealedNPC = 0x2

    CameraEventFocusTargetType: Annotated[
        c_enum32[eCameraEventFocusTargetTypeEnum],
        Field(c_enum32[eCameraEventFocusTargetTypeEnum], 0x10),
    ]

    class eCameraEventTypeEnum(IntEnum):
        None_ = 0x0
        AerialView = 0x1
        LookAt = 0x2

    CameraEventType: Annotated[
        c_enum32[eCameraEventTypeEnum], Field(c_enum32[eCameraEventTypeEnum], 0x14)
    ]
    ChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    PulseRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    PulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    ScanRevealDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    ScanType: Annotated[
        c_enum32[enums.cGcScanType], Field(c_enum32[enums.cGcScanType], 0x28)
    ]
    AddMarkers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    PlayAudioOnMarkers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]


@partial_struct
class cGcScanDataTableEntry(Structure):
    ScanData: Annotated[cGcScanData, Field(cGcScanData, 0x0)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcScanEffectData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BasecolourIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    FresnelIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    GlowIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]

    class eScanEffectTypeEnum(IntEnum):
        Building = 0x0
        TargetShip = 0x1
        Creature = 0x2
        Ground = 0x3
        Objects = 0x4

    ScanEffectType: Annotated[
        c_enum32[eScanEffectTypeEnum], Field(c_enum32[eScanEffectTypeEnum], 0x34)
    ]
    ScanlinesSeparation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    WaveOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    FixedUpAxis: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    ModelFade: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]
    Transparent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x42)]
    WaveActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43)]


@partial_struct
class cGcPlayerCharacterIKOverrideData(Structure):
    RotStrengths: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcPlayerCharacterAnimationOverrideData(Structure):
    Data: Annotated[
        cGcPlayerCharacterIKOverrideData, Field(cGcPlayerCharacterIKOverrideData, 0x0)
    ]
    AnimName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcPlayerCharacterIKStateData(Structure):
    Data: Annotated[
        cGcPlayerCharacterIKOverrideData, Field(cGcPlayerCharacterIKOverrideData, 0x0)
    ]
    AnimOverrides: Annotated[
        basic.cTkDynamicArray[cGcPlayerCharacterAnimationOverrideData],
        Field(basic.cTkDynamicArray[cGcPlayerCharacterAnimationOverrideData], 0x20),
    ]
    State: Annotated[
        c_enum32[enums.cGcPlayerCharacterStateType],
        Field(c_enum32[enums.cGcPlayerCharacterStateType], 0x30),
    ]


@partial_struct
class cGcPlayerCharacterStateData(Structure):
    AimTree1HPitch: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AimTree1HYaw: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AimTree2HPitch: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    AimTree2HYaw: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    AimTreeFishingPitch: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    AimTreeFishingYaw: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    AimTreeStaffPitch: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    AimTreeStaffYaw: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    HitReact0H: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    HitReact1H: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    HitReact2H: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    HitReactStaff: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    Locomotion0H: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    Locomotion1H: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xD0)]
    Locomotion2H: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE0)]
    LocomotionStaff: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xF0)]
    KeepHeadForward: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x100)]


@partial_struct
class cGcPlayerHazardData(Structure):
    Damage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DamageRate: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]
    ProtectionTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x18)]
    WoundRate: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    CapValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    CriticalValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    OutputMaxAddition: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    OutputMinAddition: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    OutputMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    ProtectionInitialTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    RechargeInitialTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    RechargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    TriggerValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    DisplayCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x4C)
    ]
    Increases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]


@partial_struct
class cGcPlayerStickData(Structure):
    Accelerate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AccelerateAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    AcceleratorMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    AcceleratorStickPoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    StickyFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Turn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    TurnFast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcGrabbableData(Structure):
    HandPose: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RotationLimits: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]
    AttachTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    DetachTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    GrabRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]

    class eGrabTypeEnum(IntEnum):
        Default = 0x0
        EjectHandle = 0x1
        ControlStickLeft = 0x2
        ControlStickRight = 0x3

    GrabType: Annotated[c_enum32[eGrabTypeEnum], Field(c_enum32[eGrabTypeEnum], 0x24)]
    Hand: Annotated[c_enum32[enums.cGcHand], Field(c_enum32[enums.cGcHand], 0x28)]
    MovementMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    MovementRequiredForActivation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x30)
    ]
    MovementReturnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    ReleaseRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    ToggleGrabTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    LocatorName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    MovementEndLocator: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    MovementStartLocator: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)
    ]
    AllowOtherWayUp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA0)]
    AutoGrab: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA1)]


@partial_struct
class cGcPlayerEmotePropData(Structure):
    ScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x0)]
    Model: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)]
    DelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    Hand: Annotated[c_enum32[enums.cGcHand], Field(c_enum32[enums.cGcHand], 0x64)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    ScanEffectNodeName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x6C)
    ]
    IsHologram: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAC)]


@partial_struct
class cGcPlayerEmote(Structure):
    PropData: Annotated[cGcPlayerEmotePropData, Field(cGcPlayerEmotePropData, 0x0)]
    ChatText: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xB0)]
    PetCommandTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD0)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xF0)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x110)]
    PetCommandIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x128)]
    AnimationName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x140)]
    EmoteID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x150)]
    GekAnimationName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x160)]
    GekLoopAnimUntilMove: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x170)]
    LinkedSpecialID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x180)]
    LoopAnimUntilMove: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x190)]
    RidingAnimationName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1A0)]
    IconPetCommandResource: Annotated[basic.GcResource, Field(basic.GcResource, 0x1B0)]
    IconResource: Annotated[basic.GcResource, Field(basic.GcResource, 0x1B4)]
    AvailableUnderwater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B8)]
    ChatUsesPrefix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B9)]
    CloseMenuOnSelect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BA)]
    IsPetCommand: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BB)]
    MoveToCancel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BC)]
    NeverShowInMenu: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BD)]


@partial_struct
class cGcReplacementEffectData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ReplaceWith: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcPhotoBuildings(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    BuildingType: Annotated[
        c_enum32[enums.cGcPhotoBuilding], Field(c_enum32[enums.cGcPhotoBuilding], 0x8)
    ]


@partial_struct
class cGcAreaDamageData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PlayerDamageId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Damage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    DelayPerMetre: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    DamageCreatures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    DamagePlayers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    InstantKill: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]


@partial_struct
class cGcPhotoFauna(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    CreatureArea: Annotated[
        c_enum32[enums.cGcPhotoCreature], Field(c_enum32[enums.cGcPhotoCreature], 0x8)
    ]
    MustBePet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcPhotoFlora(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    PlantType: Annotated[
        c_enum32[enums.cGcPhotoPlant], Field(c_enum32[enums.cGcPhotoPlant], 0x8)
    ]


@partial_struct
class cGcCreatureDiscoveryThumbnailOverride(Structure):
    DiscoveryUIOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    ContainsDescriptor: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x10)]
    DiscoveryUIScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]


@partial_struct
class cGcDebrisData(Structure):
    Filename: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    OverrideSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x20)]
    AnglularSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Number: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]


@partial_struct
class cGcPhotoShips(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    ShipType: Annotated[
        c_enum32[enums.cGcPhotoShip], Field(c_enum32[enums.cGcPhotoShip], 0x8)
    ]


@partial_struct
class cGcNPCProbabilityWordReactionData(Structure):
    NextInteraction: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcNPCSettlementBehaviourAreaPropertyWeightEntry(Structure):
    AreaProperty: Annotated[
        c_enum32[enums.cGcNPCSettlementBehaviourAreaProperty],
        Field(c_enum32[enums.cGcNPCSettlementBehaviourAreaProperty], 0x0),
    ]
    EntryWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    ExitWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcNPCWordReactionList(Structure):
    Reactions: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityWordReactionData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityWordReactionData], 0x0),
    ]


@partial_struct
class cGcNPCWordReactionCategory(Structure):
    Categories: Annotated[cGcNPCWordReactionList, Field(cGcNPCWordReactionList, 0x0)]
    Fallback: Annotated[cGcNPCWordReactionList, Field(cGcNPCWordReactionList, 0x70)]


@partial_struct
class cGcNPCSettlementBehaviourObjectTypeWeightEntry(Structure):
    ObjectType: Annotated[
        c_enum32[enums.cGcNPCInteractiveObjectType],
        Field(c_enum32[enums.cGcNPCInteractiveObjectType], 0x0),
    ]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcProductToCollect(Structure):
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcConstructionPart(Structure):
    Part: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcConstructionPartGroup(Structure):
    ValidParts: Annotated[
        basic.cTkDynamicArray[cGcConstructionPart],
        Field(basic.cTkDynamicArray[cGcConstructionPart], 0x0),
    ]


@partial_struct
class cGcJudgementMessageOptions(Structure):
    MessageInSettlement: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x0)
    ]
    MessageInSettlementSystem: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x80)
    ]
    MessageOutOfSettlementSystem: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x100)
    ]


@partial_struct
class cGcNPCColourGroup(Structure):
    Primary: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Secondary: Annotated[
        basic.cTkDynamicArray[basic.Colour],
        Field(basic.cTkDynamicArray[basic.Colour], 0x10),
    ]
    Rarity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcMissionSequenceWaitForWonderValue(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    CreatureWonderType: Annotated[
        c_enum32[enums.cGcWonderCreatureCategory],
        Field(c_enum32[enums.cGcWonderCreatureCategory], 0x20),
    ]
    Decimals: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    FloraWonderType: Annotated[
        c_enum32[enums.cGcWonderFloraCategory],
        Field(c_enum32[enums.cGcWonderFloraCategory], 0x28),
    ]
    MineralWonderType: Annotated[
        c_enum32[enums.cGcWonderMineralCategory],
        Field(c_enum32[enums.cGcWonderMineralCategory], 0x2C),
    ]
    PlanetWonderType: Annotated[
        c_enum32[enums.cGcWonderPlanetCategory],
        Field(c_enum32[enums.cGcWonderPlanetCategory], 0x30),
    ]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x34)
    ]
    Value: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    WonderTypeToUse: Annotated[
        c_enum32[enums.cGcWonderType], Field(c_enum32[enums.cGcWonderType], 0x3C)
    ]
    TakeAmountFromSeasonalData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcMissionSequenceWaitRealTime(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    DisplayStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    Time: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x30)]
    Randomness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    StatFromNow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    TakeDisplayStatTargetFromSeasonData: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3D)
    ]


@partial_struct
class cGcMissionSequenceWaitRealTimeCombat(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    DisplayStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    MessageCombat: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    Time: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x40)]
    Randomness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    StatFromNow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]


@partial_struct
class cGcMissionSequenceWaitForPortalWarp(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    SpecificOverrideUA: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    CommunityOverrideUA: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x30)
    ]
    PartOfAtlasStory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    WarpToRendezvousForThisStage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    WarpToSpace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]


@partial_struct
class cGcMissionSequenceWaitForScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    NexusMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    SurveyHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    SurveyInactiveHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    SurveySwapHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)
    ]
    SurveyVehicleHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA0)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xC0)
    ]
    GalaxyMapMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xD0)
    ]
    GalaxyMapMessageNotSpace: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xF0)]
    TimeoutOSD: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x100)
    ]
    Timeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    UseGPSInText: Annotated[
        c_enum32[enums.cGcScanEventGPSHint],
        Field(c_enum32[enums.cGcScanEventGPSHint], 0x114),
    ]
    DistanceTimeout: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x118)]


@partial_struct
class cGcMissionSequenceWaitForSettlementActivity(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    MessageForConflict: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    MessageForProposal: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    MessageForVisitor: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    MessageWhileBuilding: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]


@partial_struct
class cGcMissionSequenceWaitForSettlementMiniMission(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]


@partial_struct
class cGcMissionSequenceWaitForStat(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    StatGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]


@partial_struct
class cGcMissionSequenceWaitForFriendlyDroneScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    MessageCantSummon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    MessageNotAvailable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    MessageSummoned: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    MessageUnsummoned: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]


@partial_struct
class cGcMissionSequenceWaitForStatMilestone(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]

    class eMilestoneEnum(IntEnum):
        Bronze = 0x0
        Silver = 0x1
        Gold = 0x2

    Milestone: Annotated[
        c_enum32[eMilestoneEnum], Field(c_enum32[eMilestoneEnum], 0x30)
    ]
    EveryMilestone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]


@partial_struct
class cGcMissionSequenceWaitForMessage(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    SetIconWithID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    WaitMessageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    FormatMessageWithSeasonData: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]


@partial_struct
class cGcMissionSequenceWaitForStatSeasonal(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    StatGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    EncouragesFighting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]
    TakeAmountFromSeasonalData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45)]


@partial_struct
class cGcMissionSequenceWaitForSuitUpgrade(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcMissionSequenceWaitForWarps(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcMissionSequenceWaitForPhoto(Structure):
    Biomes: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]], 0x0),
    ]
    Buildings: Annotated[
        basic.cTkDynamicArray[cGcPhotoBuildings],
        Field(basic.cTkDynamicArray[cGcPhotoBuildings], 0x10),
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Fauna: Annotated[
        basic.cTkDynamicArray[cGcPhotoFauna],
        Field(basic.cTkDynamicArray[cGcPhotoFauna], 0x30),
    ]
    Flora: Annotated[
        basic.cTkDynamicArray[cGcPhotoFlora],
        Field(basic.cTkDynamicArray[cGcPhotoFlora], 0x40),
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)]
    MessageSecondary: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    MessageSuccess: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    Ships: Annotated[
        basic.cTkDynamicArray[cGcPhotoShips],
        Field(basic.cTkDynamicArray[cGcPhotoShips], 0x80),
    ]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x90)]


@partial_struct
class cGcMissionSequenceWaitForFreighterPods(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    TakeAmountFromPulseEncounter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcMissionSequenceStop(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]


@partial_struct
class cGcMissionSequenceSummonNexus(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    IgnorePlanetRadiusAndForceSpawn: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x20)
    ]


@partial_struct
class cGcMissionSequenceSuppressMarkers(Structure):
    Suppressed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    SuppressedAfterNextWarp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]


@partial_struct
class cGcMissionSequenceVehicleScan(Structure):
    ScanEventID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]


@partial_struct
class cGcMissionSequenceVisitPlanets(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    MessageOnIncompletePlanet: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    PlanetTypesToWatch: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]], 0x30),
    ]
    NumberOfEachToDiscover: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    MustAlsoDiscover: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]
    MustAlsoTakePhoto: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45)]
    TakeNumberFromSeasonalData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46)]


@partial_struct
class cGcMissionSequenceWait(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MultiplyTimeBySeasonValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    SuppressMessages: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcMissionSequenceWaitForAbandFreighterDoorOpen(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    MessageOvertime: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    MinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]


@partial_struct
class cGcMissionSequenceShowPodMessage(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]


@partial_struct
class cGcMissionSequenceWaitForBuild(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    TargetTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcMissionSequenceShowSeasonTimeWarning(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    TimeToShow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcMissionSequenceWaitForCompletionMessage(Structure):
    MessageWhenInterstellar: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ReturnToOptionalScanEvent: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    CompletionCost: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)]


@partial_struct
class cGcMissionSequenceSignalGalacticPoint(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Target: Annotated[
        c_enum32[enums.cGcMissionGalacticPoint],
        Field(c_enum32[enums.cGcMissionGalacticPoint], 0x20),
    ]


@partial_struct
class cGcMissionSequenceStartMission(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Forced: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    MakeCurrent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    Restart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]


@partial_struct
class cGcMissionSequenceStartPartyEventForStage(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcMissionSequenceWaitForDepots(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]


@partial_struct
class cGcMissionSequencePinProductSurrogate(Structure):
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TakeProductFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcMissionSequencePirates(Structure):
    RewardMessageOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    AttackDefinition: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    DistanceOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    NumSquads: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]

    class ePirateSpawnTypeEnum(IntEnum):
        CargoAttackStart = 0x0
        ProbeSuccess = 0x1
        PlanetaryRaidStart = 0x2

    PirateSpawnType: Annotated[
        c_enum32[ePirateSpawnTypeEnum], Field(c_enum32[ePirateSpawnTypeEnum], 0x48)
    ]
    ForceSpawn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]


@partial_struct
class cGcMissionSequenceProductAmountNeeded(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Item: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    ToBuild: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    IsRepair: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcMissionSequenceQuickWarp(Structure):
    ScanEventToWarpTo: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    CameraShakeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    MessageCannotWarp: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    MessageWarping: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    EffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    SequenceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    DoCameraShake: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x68)]
    DoWhiteout: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x69)]


@partial_struct
class cGcMissionSequenceShowMissionUpdateMessage(Structure):
    CustomMessageLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CustomObjectiveLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]

    class eMissionUpdateMessageEnum(IntEnum):
        Start = 0x0
        End = 0x1

    MissionUpdateMessage: Annotated[
        c_enum32[eMissionUpdateMessageEnum],
        Field(c_enum32[eMissionUpdateMessageEnum], 0x50),
    ]

    class ePlayMusicStingEnum(IntEnum):
        None_ = 0x0
        Start = 0x1
        End = 0x2
        Corrupted = 0x3

    PlayMusicSting: Annotated[
        c_enum32[ePlayMusicStingEnum], Field(c_enum32[ePlayMusicStingEnum], 0x54)
    ]
    SetMissionSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]
    ShowChangeMissionNotify: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x59)]
    SuppressNotificationsNotFromThisMission: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x5A)
    ]
    WaitForMessageOver: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5B)]


@partial_struct
class cGcMissionSequenceRepairTech(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    TechsToRepair: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]


@partial_struct
class cGcMissionSequenceRestorePurpleSystemStats(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcMissionSequenceReward(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]

    class eRewardInventoryOverrideEnum(IntEnum):
        None_ = 0x0
        Suit = 0x1
        Ship = 0x2
        Vehicle = 0x3
        Freighter = 0x4

    RewardInventoryOverride: Annotated[
        c_enum32[eRewardInventoryOverrideEnum],
        Field(c_enum32[eRewardInventoryOverrideEnum], 0x30),
    ]
    DoMissionBoardOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35)]


@partial_struct
class cGcMissionSequenceScan(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    ScanOverrideData: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    WaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    ScanTypesToOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]
    BlockTimedScans: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F)]
    RequiresMissionActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcMissionSequenceSendChatMessage(Structure):
    CustomText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    StatusMessageId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcMissionSequenceSetCurrentMission(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    FirstIncompleteMilestone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    OverrideMultiplayerPriority: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]


@partial_struct
class cGcMissionSequenceShowHintMessage(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    InventoryHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    MessagePadControl: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    MessageTitle: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    UseConditionsForTextFormatting: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x50),
    ]
    HighPriorityTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    InitialWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    SecondaryWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    AllowedWhileInDanger: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6C)]


@partial_struct
class cGcMissionSequenceKill(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMaxNoMP: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    AmountMinNoMP: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]

    class eKillTargetEnum(IntEnum):
        Robots = 0x0
        Drones = 0x1
        Quads = 0x2
        Walkers = 0x3
        Predators = 0x4
        Creatures = 0x5
        Pirates = 0x6
        Traders = 0x7
        Fiends = 0x8
        Queens = 0x9
        HazardousFlora = 0xA
        Worms = 0xB
        CorruptSentinels = 0xC
        SpiderSentinels = 0xD
        SmallSpiderSentinels = 0xE
        HostilesWhileInMech = 0xF
        CorruptPillars = 0x10
        Mechs = 0x11
        SpookSquids = 0x12

    KillTarget: Annotated[
        c_enum32[eKillTargetEnum], Field(c_enum32[eKillTargetEnum], 0x30)
    ]
    OverrideMissionStageIDForMPProgress: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x34)
    ]
    AddToMissionBoardObjective: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39)]
    WriteProgressToMissionStat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A)]


@partial_struct
class cGcMissionSequenceKillEncounter(Structure):
    EncounterComponentScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    AllowedToEscape: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcMissionSequenceLearnWords(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcMissionSequenceLeaveNexusMP(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    MessageNoWarp: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Timeout: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x30)]


@partial_struct
class cGcMissionSequenceOpenSettlementBuildingWithScanEvent(Structure):
    ScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    MessageWhenDistant: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    UpgradeMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    UpgradeMessageWhenDistant: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]


@partial_struct
class cGcMissionSequenceFindPurpleSystem(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]


@partial_struct
class cGcMissionSequenceFinishSummonAnomaly(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcMissionSequenceFreighterDefend(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]


@partial_struct
class cGcMissionSequenceFreighterEngage(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MessageEngage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    MessageGetToSpace: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    TimeoutMessage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    TimeoutOSDMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    EngageDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    EngageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    TimeAfterWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]


@partial_struct
class cGcMissionSequenceGatherForBuild(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    GatherResource: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    TargetTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcMissionSequenceGetInShip(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]


@partial_struct
class cGcMissionSequenceGetToExpedition(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    GalaxyMapMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    TimeoutOSD: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    CompletionDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    Timeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]


@partial_struct
class cGcMissionSequenceGetToScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    NexusMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    SurveyHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    SurveyInactiveHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    SurveySwapHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)
    ]
    SurveyVehicleHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA0)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xC0)
    ]
    GalaxyMapMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xD0)
    ]
    GalaxyMapMessageNotSpace: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xF0)]
    TimeoutOSD: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x100)
    ]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    Timeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    UseGPSInText: Annotated[
        c_enum32[enums.cGcScanEventGPSHint],
        Field(c_enum32[enums.cGcScanEventGPSHint], 0x118),
    ]
    AlwaysAllowInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11C)]
    CanFormatObjectives: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11D)]
    DistanceTimeout: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11E)]
    EndEventWhenReached: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11F)]


@partial_struct
class cGcMissionSequenceEndScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]


@partial_struct
class cGcMissionSequenceGetUnits(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcMissionSequenceEnsureBarrelsAtPlayerSettlement(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    MinBarrelsThreshold: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    NumBarrels: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]


@partial_struct
class cGcMissionSequenceGetUnitsToBuyItem(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Item: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]


@partial_struct
class cGcMissionSequenceExplorationLogSpecial(Structure):
    CustomPlanetLog: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CustomPlanetMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    CustomSystemLog: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    CustomSystemMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)
    ]


@partial_struct
class cGcMissionSequenceExploreAbandonedFreighter(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Timer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    RequireAllRoomsDone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcMissionSequenceGoToGalacticPoint(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Target: Annotated[
        c_enum32[enums.cGcMissionGalacticPoint],
        Field(c_enum32[enums.cGcMissionGalacticPoint], 0x20),
    ]


@partial_struct
class cGcMissionSequenceFeed(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    RequireSpecificBait: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcMissionSequenceCreateSpecificPulseEncounter(Structure):
    ShipHUDOverrideWhenReady: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    MessageEncounterReady: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    MessageNoShip: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    MessageNotPulsing: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    MessageSignalBlocked: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    PulseEncounterID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    MinTimeInPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    AllowAnyEncounter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]
    AllowOutsideShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x95)]
    EnsureClearOfSolarSystemObjects: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x96)
    ]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x97)]
    TakeEncounterIDFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x98)]


@partial_struct
class cGcMissionSequenceDetailMessagePoint(Structure):
    Text: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    InsertItemName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]

    class ePointStateEnum(IntEnum):
        Statement = 0x0
        ObjectiveIncomplete = 0x1
        ObjectiveComplete = 0x2

    PointState: Annotated[
        c_enum32[ePointStateEnum], Field(c_enum32[ePointStateEnum], 0x30)
    ]


@partial_struct
class cGcMissionSequenceDiscover(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]

    class eDiscoverTargetEnum(IntEnum):
        Animal = 0x0
        Vegetable = 0x1
        Mineral = 0x2

    DiscoverTarget: Annotated[
        c_enum32[eDiscoverTargetEnum], Field(c_enum32[eDiscoverTargetEnum], 0x28)
    ]
    PerPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    TakeAmountFromSeasonalData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]


@partial_struct
class cGcMissionSequenceCompleteMission(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    UseSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcMissionSequenceDiscoverOnPlanet(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]

    class eDiscoverTargetOnThisPlanetEnum(IntEnum):
        Animal = 0x0
        Vegetable = 0x1
        Mineral = 0x2

    DiscoverTargetOnThisPlanet: Annotated[
        c_enum32[eDiscoverTargetOnThisPlanetEnum],
        Field(c_enum32[eDiscoverTargetOnThisPlanetEnum], 0x20),
    ]
    PercentToDiscover: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcMissionSequenceCompleteSeasonalMilestone(Structure):
    pass


@partial_struct
class cGcMissionSequenceDisplaySeasonRewardReminder(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcMissionSequenceCompleteSettlementJudgement(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MessageOptions: Annotated[
        cGcJudgementMessageOptions, Field(cGcJudgementMessageOptions, 0x10)
    ]
    MessageNoOffice: Annotated[
        cGcJudgementMessageOptions, Field(cGcJudgementMessageOptions, 0x1210)
    ]
    FormatObjectives: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1390)]


@partial_struct
class cGcMissionSequenceConditionalReward(Structure):
    Conditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    RewardIfFalse: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RewardIfTrue: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    ConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x40),
    ]


@partial_struct
class cGcMissionSequenceConstructSettlementBuildingWithScanEvent(Structure):
    ScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    MessageWhenDistant: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    MessageWhileBuilding: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    MessageWithItemsGathered: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    UpgradeMessageWithItemsGathered: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    ForceCompleteSequenceAtStagePercentage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x80)
    ]


@partial_struct
class cGcMissionSequenceCorvetteAutopilot(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MessageAutopiloting: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    MessageNotReadyToAutopilot: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    MessageReadyToAutopilot: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    RequiredAutopilotTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    TakeTimeFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]


@partial_struct
class cGcMissionSequenceCraftProduct(Structure):
    MessageCanCraft: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    MessageLearnPreReqs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    MessageLearnRecipe: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    MessageNoIngreds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)
    ]
    TargetProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    TargetAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    CanSetIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA4)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA5)]
    TakeIDFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA6)]
    TeachIfNotKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA7)]
    WaitForSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA8)]


@partial_struct
class cGcMissionSequenceClearInventoryHistory(Structure):
    pass


@partial_struct
class cGcMissionSequenceCloseMenu(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]

    class eMenuToCloseEnum(IntEnum):
        QuickMenu = 0x0
        BuildMenu = 0x1
        Inventory = 0x2
        AllDetailMessages = 0x3

    MenuToClose: Annotated[
        c_enum32[eMenuToCloseEnum], Field(c_enum32[eMenuToCloseEnum], 0x14)
    ]


@partial_struct
class cGcDailyRecurrence(Structure):
    RecurrenceHour: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    RecurrenceMinute: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    DebugText: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x8)]


@partial_struct
class cGcMonthlyRecurrence(Structure):
    RecurrenceDay: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    RecurrenceHour: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    RecurrenceMinute: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    DebugText: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xC)]


@partial_struct
class cGcMissionSequenceCollectMultiProducts(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Products: Annotated[
        basic.cTkDynamicArray[cGcProductToCollect],
        Field(basic.cTkDynamicArray[cGcProductToCollect], 0x20),
    ]
    SearchCookingIngredients: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    WaitForSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]


@partial_struct
class cGcMissionConsequenceClearDetailMessages(Structure):
    pass


@partial_struct
class cGcDate(Structure):
    Day: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Hour: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Minute: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    Month: Annotated[c_enum32[enums.cGcMonth], Field(c_enum32[enums.cGcMonth], 0xC)]
    Year: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcMissionCommunityMissionData(Structure):
    ShowTimeToDeadline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionSequenceBounty(Structure):
    Bounty: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    MessageDestroy: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    MessageEngage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    MessageGetToSpace: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]


@partial_struct
class cGcMissionSequenceBroadcastMessage(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MessageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BroadcastToActiveMultiplayerMission: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x20)
    ]
    CanSendToInactive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    Multiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]
    Seeded: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23)]
    SendToAllMatchingSeeds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcMissionIDEpochPair(Structure):
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RecurrenceDeadline: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]


@partial_struct
class cGcMissionBoardOptions(Structure):
    MultiplayerMissionInitialWarpScanEvent: Annotated[
        basic.TkID0x20, Field(basic.TkID0x20, 0x0)
    ]
    BasePartBlueprints: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    DefaultItemInitialWarpScanEvents: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x30),
    ]
    Faction: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcMissionFaction]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcMissionFaction]], 0x40),
    ]
    RewardPenaltyOnAbandon: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]

    class eDefaultItemTypeForInitialWarpEnum(IntEnum):
        None_ = 0x0
        PrimaryProduct = 0x1
        PrimarySubstance = 0x2
        SecondaryProduct = 0x3
        SecondarySubstance = 0x4

    DefaultItemTypeForInitialWarp: Annotated[
        c_enum32[eDefaultItemTypeForInitialWarpEnum],
        Field(c_enum32[eDefaultItemTypeForInitialWarpEnum], 0x60),
    ]
    Difficulty: Annotated[
        c_enum32[enums.cGcMissionDifficulty],
        Field(c_enum32[enums.cGcMissionDifficulty], 0x64),
    ]
    MinRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    Type: Annotated[
        c_enum32[enums.cGcMissionType], Field(c_enum32[enums.cGcMissionType], 0x6C)
    ]
    Weighting: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    CloseMissionGiver: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]
    IgnoreCalculatedObjective: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x75)]
    IsGuildShopMission: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x76)]
    IsMultiplayerEventMission: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x77)]
    IsPlanetProcMission: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]


@partial_struct
class cGcGenericMissionVersionProgress(Structure):
    Progress: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Version: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcGenericMissionStage(Structure):
    Stage: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]
    Versions: Annotated[
        basic.cTkDynamicArray[cGcGenericMissionVersionProgress],
        Field(basic.cTkDynamicArray[cGcGenericMissionVersionProgress], 0x10),
    ]


@partial_struct
class cGcObjectiveTextFormatOptions(Structure):
    FormattableObjective: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    FormattableObjectiveTip: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    ObjectivesCanBeFormattedBySequences: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x40)
    ]


@partial_struct
class cGcSeasonalObjectiveOverrides(Structure):
    OverrideObjective: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    OverrideObjectiveTip: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    ApplicableSeasonNumbers: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x40),
    ]


@partial_struct
class cGcTargetMissionSurveyOptions(Structure):
    SurveyHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    SurveyInactiveHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    SurveySwapHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    SurveyVehicleHint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    TargetMissionSurveyDefinitelyExistsWithResourceHint: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x80)
    ]
    TargetMissionSurveyId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    ForceSurveyTextForAllSequencesInThisGroup: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xA0)
    ]
    TargetMissionSurveyDefinitelyExists: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xA1)
    ]


@partial_struct
class cGcCustomNotifyTimerOptions(Structure):
    NotifyDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    NotifyPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    HasCustomNotifyTimer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcFactionSelectOptions(Structure):
    Faction: Annotated[
        c_enum32[enums.cGcMissionFaction], Field(c_enum32[enums.cGcMissionFaction], 0x0)
    ]

    class eFactionOptionEnum(IntEnum):
        DataDefined = 0x0
        CurrentMission = 0x1
        CurrentSystem = 0x2

    FactionOption: Annotated[
        c_enum32[eFactionOptionEnum], Field(c_enum32[eFactionOptionEnum], 0x4)
    ]


@partial_struct
class cGcSeasonalLogOverrides(Structure):
    MissionDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    MissionSubtitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    MissionTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    ApplicableSeasonNumbers: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x60),
    ]


@partial_struct
class cGcMissionConsequenceBroadcastMessage(Structure):
    MessageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BroadcastToActiveMultiplayerMission: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x10)
    ]
    CanSendToInactive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    Multiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12)]
    Seeded: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13)]
    SendToAllMatchingSeeds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcMissionConsequenceGiveReward(Structure):
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConsequenceRemoveCommunicatorMessage(Structure):
    Comms: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcMissionConsequenceRemoveCommunicatorTakeOffMessage(Structure):
    Comms: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcMissionConsequenceRemoveScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcMissionConsequenceResetPulseEncounterOverride(Structure):
    pass


@partial_struct
class cGcMissionConsequenceResetStoryPortal(Structure):
    pass


@partial_struct
class cGcMissionConsequenceSetMissionStat(Structure):
    ValueToAdd: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    ValueToSet: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcDefaultMissionSubstance(Structure):
    Substance: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionWeather(Structure):
    WeatherRequirement: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x0),
    ]
    AllowNonHazardExtremeIfNoStorms: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    IgnoreStormIfInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]
    IsExtreme: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6)]
    StormActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7)]


@partial_struct
class cGcDefaultMissionProduct(Structure):
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcDefaultMissionItemsTable(Structure):
    PrimaryProducts: Annotated[
        basic.cTkDynamicArray[cGcDefaultMissionProduct],
        Field(basic.cTkDynamicArray[cGcDefaultMissionProduct], 0x0),
    ]
    PrimarySubstances: Annotated[
        basic.cTkDynamicArray[cGcDefaultMissionSubstance],
        Field(basic.cTkDynamicArray[cGcDefaultMissionSubstance], 0x10),
    ]
    SecondaryProducts: Annotated[
        basic.cTkDynamicArray[cGcDefaultMissionProduct],
        Field(basic.cTkDynamicArray[cGcDefaultMissionProduct], 0x20),
    ]
    SecondarySubstances: Annotated[
        basic.cTkDynamicArray[cGcDefaultMissionSubstance],
        Field(basic.cTkDynamicArray[cGcDefaultMissionSubstance], 0x30),
    ]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    AmountShouldBeRoundNumber: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]


@partial_struct
class cGcMissionConditionWristMenuOpen(Structure):
    GunHandOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    InventoryOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]
    LeftHandOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2)]
    QuickMenuOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3)]


@partial_struct
class cGcMissionConditionWarping(Structure):
    pass


@partial_struct
class cGcMissionConditionTakingDamage(Structure):
    DamageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RequireShieldDown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcMissionConditionWaterInSystem(Structure):
    WaterworldSpecific: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionTechGroupCount(Structure):
    TechGroups: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x0),
    ]
    TargetCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    TakeCountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    TestDraftCorvette: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcMissionConditionWaterPlanet(Structure):
    pass


@partial_struct
class cGcMissionConditionTechnologyKnown(Structure):
    Technology: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DependentOnSeasonMilestone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    TakeTechFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]


@partial_struct
class cGcMissionConditionWeaponMode(Structure):
    WeaponMode: Annotated[
        c_enum32[enums.cGcPlayerWeapons], Field(c_enum32[enums.cGcPlayerWeapons], 0x0)
    ]


@partial_struct
class cGcMissionConditionTetheredToCorvette(Structure):
    pass


@partial_struct
class cGcMissionConditionThisMissionStageIndex(Structure):
    StageIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionTotalWarpsNumber(Structure):
    WarpsNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionTouchControlled(Structure):
    pass


@partial_struct
class cGcMissionConditionTradeSurge(Structure):
    ControllingScanEvent: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]

    class eSurgeTestTypeEnum(IntEnum):
        Timer = 0x0
        Collection = 0x1
        Delivery = 0x2

    SurgeTestType: Annotated[
        c_enum32[eSurgeTestTypeEnum], Field(c_enum32[eSurgeTestTypeEnum], 0x20)
    ]
    TimeToCompleteInMinutes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]


@partial_struct
class cGcMissionConditionTrial(Structure):
    pass


@partial_struct
class cGcMissionConditionTutorialEnabled(Structure):
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionUnclaimedStageReward(Structure):
    OptionalSpecificProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionUnderwaterDepth(Structure):
    Depth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    InBaseCanCountAsUnderwater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    ReturnTrueIfWaterBelowIsAtDepth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6)]


@partial_struct
class cGcMissionConditionSystemHasInfestedPlanet(Structure):
    pass


@partial_struct
class cGcMissionConditionSystemHasRobotCreatures(Structure):
    RequireOnPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionSystemHasRuinsPlanet(Structure):
    pass


@partial_struct
class cGcMissionConditionSystemPlanetTest(Structure):
    PlanetBiomeRequirement: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x0)
    ]
    PlanetWeatherRequirement: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x4),
    ]
    RequiresExtremePlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionVisorActive(Structure):
    pass


@partial_struct
class cGcMissionConditionWaitForPirates(Structure):
    LivingPirates: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    CareAboutAttackingPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    CheckAllFireteamMembers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]
    CompleteOnlyInSpace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]
    CountHostileTraders: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB)]


@partial_struct
class cGcMissionConditionWaitForTime(Structure):
    WaitTimeInSeconds: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    ThisConditionWillSetMissionUserDataIsThatOk: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x8)
    ]


@partial_struct
class cGcMissionConditionStatLevel(Structure):
    CompareStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FormatItemNameIntoText: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    FormatStatStyle: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    StatGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    DisplayMilestoneNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    LevelledStatRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x5C)
    ]
    ForceIgnoreLevelledStat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    MulAmountBySeasonTier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]
    TakeLevelFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x62)]
    TakeStatFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x63)]


@partial_struct
class cGcMissionConditionSystemHasCorruptedPlanet(Structure):
    AllowNexus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionSeasonRewardsRecipe(Structure):
    RecipeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionSystemHasGasGiant(Structure):
    pass


@partial_struct
class cGcMissionConditionSeasonRewardUnlocked(Structure):
    SpecialID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionSentinelsDisabled(Structure):
    pass


@partial_struct
class cGcMissionConditionSettlementBuildingsAllStarted(Structure):
    pass


@partial_struct
class cGcMissionConditionSettlementMatchesSeed(Structure):
    pass


@partial_struct
class cGcMissionConditionSettlementsEnabled(Structure):
    pass


@partial_struct
class cGcMissionConditionSettlementsHaveEverBeenDisabled(Structure):
    pass


@partial_struct
class cGcMissionConditionShieldDown(Structure):
    RequireOnFoot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionSpaceCombatEnabled(Structure):
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionRefinerHasOutput(Structure):
    OutputProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OutputAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MustBeCooker: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    MustBeCorvetteModule: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16)]


@partial_struct
class cGcMissionConditionSpecialKnown(Structure):
    SpecialID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionSquadronPilotsOwned(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    TakeNumberFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionRequestedPhoto(Structure):
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x0)
    ]


@partial_struct
class cGcMissionConditionSquadronSlots(Structure):
    PilotSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    OnlyCountFreeSlots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    TakeNumberFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]


@partial_struct
class cGcMissionConditionRidingCreature(Structure):
    pass


@partial_struct
class cGcMissionConditionSeasonAvailable(Structure):
    pass


@partial_struct
class cGcMissionConditionStartWithAllPartsKnown(Structure):
    pass


@partial_struct
class cGcMissionConditionStatChange(Structure):
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    StatGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcMissionConditionSeasonNumber(Structure):
    IncludeOtherSeasons: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x0),
    ]
    ActiveSeason: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    IncludeRemix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcMissionConditionStatDiff(Structure):
    CurrentStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TargetStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AmountPastTarget: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x24)
    ]


@partial_struct
class cGcMissionConditionOnPlanetWithSandwormsOverriden(Structure):
    AcceptMatchingSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    AllowInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]


@partial_struct
class cGcMissionConditionReadyToSpawnPirates(Structure):
    pass


@partial_struct
class cGcMissionConditionPadActive(Structure):
    pass


@partial_struct
class cGcMissionConditionRefinerActive(Structure):
    ActiveRecipe: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    AmountToMake: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    HasFuel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcMissionConditionPercentageChance(Structure):
    Percent: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    OverrideMissionSeedWithRandomSeed: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4)
    ]
    OverrideZeroSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]
    Seeded: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6)]


@partial_struct
class cGcMissionConditionRefinerHasInput(Structure):
    InputProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    InputAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MustBeCooker: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    MustBeCorvetteModule: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcMissionConditionPirateFreighterSurrendered(Structure):
    pass


@partial_struct
class cGcMissionConditionPirateSystem(Structure):
    pass


@partial_struct
class cGcMissionConditionPlanetAttackPiratesActive(Structure):
    pass


@partial_struct
class cGcMissionConditionPlanetCorruptSentinelGeneration(Structure):
    pass


@partial_struct
class cGcMissionConditionPlanetCreatureRoles(Structure):
    NumRoles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    TakeNumFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionPlanetResourceHint(Structure):
    UseScanEventToDetermineLocalResource: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ResourceHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    LocalSubstanceType: Annotated[
        c_enum32[enums.cGcLocalSubstanceType],
        Field(c_enum32[enums.cGcLocalSubstanceType], 0x30),
    ]
    UseSpecificPlanetIndexForLocalResource: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x34)
    ]
    AllowInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]
    AllowNexus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39)]
    TestAllPlanetsInSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A)]
    UseRandomPlanetIndexForLocalResource: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3B)
    ]


@partial_struct
class cGcMissionConditionPlanetStatLevel(Structure):
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SpecificUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x1C)
    ]
    CalculateUAFromMilestoneIndex: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    CalculateUAFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]
    UseCurrentUA: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23)]


@partial_struct
class cGcMissionConditionNumAtlasStationsVisited(Structure):
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]


@partial_struct
class cGcMissionConditionNumberOfShipsOwned(Structure):
    NumShips: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]


@partial_struct
class cGcMissionConditionPrimaryExocraft(Structure):
    ExocraftType: Annotated[
        c_enum32[enums.cGcVehicleType], Field(c_enum32[enums.cGcVehicleType], 0x0)
    ]
    MustBeSummonedNearby: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionNumBrokenSlots(Structure):
    class eInventoryToTestEnum(IntEnum):
        Ship = 0x0
        ShipTech = 0x1
        Weapon = 0x2

    InventoryToTest: Annotated[
        c_enum32[eInventoryToTestEnum], Field(c_enum32[eInventoryToTestEnum], 0x0)
    ]
    NumberOfBrokenSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]


@partial_struct
class cGcMissionConditionProductKnown(Structure):
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x10),
    ]
    DependentOnSeasonMilestone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    TakeProductFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcMissionConditionOnFootCombatEnabled(Structure):
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionPulseEncounterActive(Structure):
    SpecificObjectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eTestEncounterTypeEnum(IntEnum):
        AnyEncounter = 0x0
        AnyObject = 0x1
        SpecificObject = 0x2
        Trader = 0x3
        AbandonedFreighter = 0x4
        AnyEncounterOtherThanTheNamedOne = 0x5
        SpecificID = 0x6

    TestEncounterType: Annotated[
        c_enum32[eTestEncounterTypeEnum], Field(c_enum32[eTestEncounterTypeEnum], 0x10)
    ]
    RequireFullySpawned: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcMissionConditionOnMultiplayerMission(Structure):
    IncludeCorvetteMissions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionOnOtherSideOfPortal(Structure):
    TestForRegularPortal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    TestForStoryPortal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]


@partial_struct
class cGcMissionConditionPulseEncounterOverriden(Structure):
    pass


@partial_struct
class cGcMissionConditionLocalScanActive(Structure):
    pass


@partial_struct
class cGcMissionConditionNexusEnabled(Structure):
    pass


@partial_struct
class cGcMissionConditionLocalSystemHasTradeSurgeGoods(Structure):
    pass


@partial_struct
class cGcMissionConditionNexusNearby(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcMissionConditionMessageBeaconsQuery(Structure):
    MaxPartsFound: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MinPartsFound: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    SearchDistanceLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcMissionConditionMissionCompleted(Structure):
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CalculateSeasonalSeedFromStageIndexOffset: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x10)
    ]
    SeasonalMissionSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    CalculateTextMissionTargetFromStageIndex: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x18)
    ]
    TakeIDFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]


@partial_struct
class cGcMissionConditionMissionMessage(Structure):
    Message: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MessageToFormatSeasonalIDInto: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]


@partial_struct
class cGcMissionConditionMissionMessagePortal(Structure):
    pass


@partial_struct
class cGcMissionConditionMissionMessageWarp(Structure):
    pass


@partial_struct
class cGcMissionConditionMissionSelected(Structure):
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionMissionStatValue(Structure):
    MissionStatValue: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]


@partial_struct
class cGcMissionConditionMultiplayerFreighterAvailable(Structure):
    pass


@partial_struct
class cGcMissionConditionIsSurveying(Structure):
    class eForHotspotTypeEnum(IntEnum):
        Any = 0x0
        Power = 0x1
        Gas = 0x2
        Minerals = 0x3

    ForHotspotType: Annotated[
        c_enum32[eForHotspotTypeEnum], Field(c_enum32[eForHotspotTypeEnum], 0x0)
    ]
    RequireAlreadyAnalysed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionNearFossilDisplay(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MustBeComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionNearObject(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]

    class eMissionObjectEnum(IntEnum):
        PlayerShip = 0x0
        PlayerVehicle = 0x1
        PlayerSubmarine = 0x2
        StoryPortal = 0x3
        OpenStoryPortal = 0x4
        OpenStandardPortal = 0x5

    MissionObject: Annotated[
        c_enum32[eMissionObjectEnum], Field(c_enum32[eMissionObjectEnum], 0x4)
    ]


@partial_struct
class cGcMissionConditionNearPole(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]

    class ePoleConditionEnum(IntEnum):
        North = 0x0
        South = 0x1

    PoleCondition: Annotated[
        c_enum32[ePoleConditionEnum], Field(c_enum32[ePoleConditionEnum], 0x4)
    ]


@partial_struct
class cGcMissionConditionNearRobotSite(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    RequireNPCs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    RequireRevealTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcMissionConditionItemRewardedBySeason(Structure):
    ItemID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TakeIDFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcMissionConditionNearScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AllowInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    MustMatchThisMissionIDSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]
    RequiresFullFireteam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26)]
    ReturnTrueIfMarkerGone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27)]


@partial_struct
class cGcMissionConditionLifeSupportEnabled(Structure):
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionNearSettlement(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AllowBuildersSettlement: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    MustMatchThisMissionSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcMissionConditionInventoryOpen(Structure):
    pass


@partial_struct
class cGcMissionConditionIsScanEventOnCurrentPlanet(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    AllowInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcMissionConditionIsScanEventRepaired(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    CheckForAllRepairsInBuilding: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    OnlyCheckRequiresEmptySlotTypes: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21)
    ]


@partial_struct
class cGcMissionConditionInventorySlots(Structure):
    class eInventoryTestEnum(IntEnum):
        Current = 0x0
        Personal = 0x1
        Ship = 0x2
        Vehicle = 0x3
        Weapon = 0x4
        CorvetteStorage = 0x5

    InventoryTest: Annotated[
        c_enum32[eInventoryTestEnum], Field(c_enum32[eInventoryTestEnum], 0x0)
    ]
    SlotsFree: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]
    TestAllSlotsUnlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]
    TestAnySlotOccupied: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD)]
    TestOnlyMainInventory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE)]


@partial_struct
class cGcMissionConditionInVR(Structure):
    NeedsHandControllers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    NeedsNoHandControllers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]
    NeedsSmoothMoveOn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2)]
    NeedsSnapTurnOn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3)]
    NeedsTeleportOn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionIsCurrentMission(Structure):
    pass


@partial_struct
class cGcMissionConditionIsDepotDestroyed(Structure):
    ControllingScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcMissionConditionIsFirstPurpleSystemLocal(Structure):
    pass


@partial_struct
class cGcMissionConditionIsFishing(Structure):
    MinimumDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    TakeDepthFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionIsGrabbed(Structure):
    pass


@partial_struct
class cGcMissionConditionIsLookingAtAnomaly(Structure):
    FOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcMissionConditionIsMissionInProgress(Structure):
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MustBeSelectedMission: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcMissionConditionInCombat(Structure):
    OverrideOSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]

    class eCombatTypeEnum(IntEnum):
        GroundCombat = 0x0
        SpaceCombat = 0x1
        FiendCombat = 0x2
        BigFishFiendCombat = 0x3
        CorruptedSentinelCombat = 0x4
        GroundWormCombat = 0x5
        RewardEncounter = 0x6
        BugQueen = 0x7
        JellyBoss = 0x8

    CombatType: Annotated[
        c_enum32[eCombatTypeEnum], Field(c_enum32[eCombatTypeEnum], 0x20)
    ]
    CheckAllFireteamMembers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    EncouragesFightingSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]
    SpaceCombatTextCountsPirates: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26)]
    SpaceCombatTextCountsSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27)]


@partial_struct
class cGcMissionConditionIsPartyPlanetUnlocked(Structure):
    SpecificRendevousPlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    TakeIndexFromMilestoneStage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    TakeIndexFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcMissionConditionInMultiplayer(Structure):
    MustBeInFireteam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionIsPlayerWanted(Structure):
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]


@partial_struct
class cGcMissionConditionInSeasonalUA(Structure):
    SpecificRendevousPlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    CompleteIfRendezvousDone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    SpecificIndexOnlyNeedsToMatchSystem: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x5)
    ]
    TakeIndexFromMilestoneStage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6)]
    TakeIndexFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7)]


@partial_struct
class cGcMissionConditionIsScanEventActive(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    MustMatchThisMissionIDSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcMissionConditionIsScanEventLocal(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    BlockMissionRestart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    RequiresFullFireteam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]


@partial_struct
class cGcMissionConditionInUA(Structure):
    UA: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x0)]


@partial_struct
class cGcMissionConditionIsScanEventLocalOrNear(Structure):
    Local: Annotated[
        cGcMissionConditionIsScanEventLocal,
        Field(cGcMissionConditionIsScanEventLocal, 0x0),
    ]
    MaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcMissionConditionHazard(Structure):
    Hazard: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x0),
    ]


@partial_struct
class cGcMissionConditionHasProcTechnology(Structure):
    ProcTechGroupID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcMissionConditionHazardLevel(Structure):
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    SpecificHazard: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x4),
    ]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]


@partial_struct
class cGcMissionConditionHazardsEnabled(Structure):
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionHasSeasonalReward(Structure):
    pass


@partial_struct
class cGcMissionConditionHasSettlementLocal(Structure):
    pass


@partial_struct
class cGcMissionConditionHasSettlementProductPending(Structure):
    pass


@partial_struct
class cGcMissionConditionHasSpareProcTech(Structure):
    pass


@partial_struct
class cGcMissionConditionHasTechnology(Structure):
    Technology: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AllowPartiallyInstalled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    TakeTechFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    TeachIfNotKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12)]


@partial_struct
class cGcMissionConditionHasTwitchReward(Structure):
    pass


@partial_struct
class cGcMissionConditionHasPendingSettlementJudgement(Structure):
    SpecificID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionHasUnlockedPurpleSystems(Structure):
    pass


@partial_struct
class cGcMissionConditionHasPlatformReward(Structure):
    pass


@partial_struct
class cGcMissionConditionHasValidSaveContext(Structure):
    CurrentContext: Annotated[
        c_enum32[enums.cGcSaveContextQuery],
        Field(c_enum32[enums.cGcSaveContextQuery], 0x0),
    ]
    DesiredContext: Annotated[
        c_enum32[enums.cGcSaveContextQuery],
        Field(c_enum32[enums.cGcSaveContextQuery], 0x4),
    ]


@partial_struct
class cGcMissionConditionHasProcMissionForFaction(Structure):
    Faction: Annotated[
        c_enum32[enums.cGcMissionFaction], Field(c_enum32[enums.cGcMissionFaction], 0x0)
    ]


@partial_struct
class cGcMissionConditionHasWeapons(Structure):
    CountForInstalledTests: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]

    class eWeaponTestEnum(IntEnum):
        CombatPrimaryEquipped = 0x0
        CombatSecondaryEquipped = 0x1
        CombatPrimaryInstalled = 0x2
        CombatSecondaryInstalled = 0x3
        ExocraftCombatInstalled = 0x4
        ExocraftCombatActive = 0x5

    WeaponTest: Annotated[
        c_enum32[eWeaponTestEnum], Field(c_enum32[eWeaponTestEnum], 0x4)
    ]


@partial_struct
class cGcMissionConditionHasLegacyBasePending(Structure):
    pass


@partial_struct
class cGcMissionConditionHasEndpointForEvent(Structure):
    EventID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    MaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcMissionConditionHasLocalSubstance(Structure):
    UseScanEventToDetermineLocation: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    DefaultValueMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    LocalSubstanceType: Annotated[
        c_enum32[enums.cGcLocalSubstanceType],
        Field(c_enum32[enums.cGcLocalSubstanceType], 0x28),
    ]
    UseSpecificPlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    UseDefaultValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    UseRandomPlanetIndex: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]


@partial_struct
class cGcMissionConditionHasEntitlement(Structure):
    Entitlement: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionHasMessageWithTitle(Structure):
    TitleLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]


@partial_struct
class cGcMissionConditionHasExocraft(Structure):
    ExocraftType: Annotated[
        c_enum32[enums.cGcVehicleType], Field(c_enum32[enums.cGcVehicleType], 0x0)
    ]
    SpecificExocraft: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionHasMilestoneThatCouldRewardItem(Structure):
    Item: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Recipe: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcMissionConditionHasFuelForTakeoff(Structure):
    FormatTextAsPercentage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionHasGalacticFeature(Structure):
    Type: Annotated[
        c_enum32[enums.cGcMissionGalacticFeature],
        Field(c_enum32[enums.cGcMissionGalacticFeature], 0x0),
    ]
    RequireUnusedAtlas: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionHasGrabbableTarget(Structure):
    pass


@partial_struct
class cGcMissionConditionHasActiveStatsMessage(Structure):
    pass


@partial_struct
class cGcMissionConditionHasGrave(Structure):
    pass


@partial_struct
class cGcMissionConditionHasAnySettlementBuildingInProgress(Structure):
    IgnoreIfTimerActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionHasIllegalGoods(Structure):
    IncludeNipNip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionHasBait(Structure):
    SpecificID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OnlyPrimaryBait: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    RequireInBaitBox: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    TakeSpecificBaitIDFromSeasonData: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x12)
    ]


@partial_struct
class cGcMissionConditionHasIncompleteOptionalMilestones(Structure):
    ForStageIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionHasCommunicatorSignal(Structure):
    SpecificSignalID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CallMustBePending: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    SpecificSignalIsCurrentIntervention: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21)
    ]


@partial_struct
class cGcMissionConditionHasItemFromListOfValue(Structure):
    ItemList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    UnitValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcMissionConditionHasCreatureEggItem(Structure):
    class eEggItemTypeEnum(IntEnum):
        Egg = 0x0
        ValidCatalyst = 0x1

    EggItemType: Annotated[
        c_enum32[eEggItemTypeEnum], Field(c_enum32[eEggItemTypeEnum], 0x0)
    ]
    IncludeEggMachineInventoryInSearch: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4)
    ]


@partial_struct
class cGcMissionConditionGroup(Structure):
    Conditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    ConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x10),
    ]
    OnlyUsedForTextFormatting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    ValueToReturnForTextFormatting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcMissionConditionDiscoveryPendingUpload(Structure):
    pass


@partial_struct
class cGcMissionConditionEggMachinePageOpen(Structure):
    pass


@partial_struct
class cGcMissionConditionGunOut(Structure):
    pass


@partial_struct
class cGcMissionConditionElevation(Structure):
    HeightAboveSea: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AllowInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcMissionConditionHasActiveDetailMessage(Structure):
    pass


@partial_struct
class cGcMissionConditionExocraftMoving(Structure):
    pass


@partial_struct
class cGcMissionConditionExpeditionContainsReward(Structure):
    RewardID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionExpeditionCount(Structure):
    ExpeditionCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    ActiveExpeditionsCountAsFueled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    OnlyCountAwaitingDebrief: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]
    OnlyCountIfActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]
    OnlyCountIfActiveWithRemainingEvents: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xB)
    ]
    OnlyCountIfFueled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcMissionConditionExpeditionNearlyOver(Structure):
    RemainingTimeToStartWarning: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]


@partial_struct
class cGcMissionConditionExpeditionProgress(Structure):
    pass


@partial_struct
class cGcMissionConditionExtraSuitSlots(Structure):
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionFactionRank(Structure):
    Faction: Annotated[
        c_enum32[enums.cGcMissionFaction], Field(c_enum32[enums.cGcMissionFaction], 0x0)
    ]
    Rank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    UseSystemRace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionFeedingCreatures(Structure):
    MinCreatures: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    TakeNumFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionCreatureTrust(Structure):
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x0)
    ]
    Trust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcMissionConditionFirstPurpleSystemValid(Structure):
    CheckDistance: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionCriticalMissionsDone(Structure):
    OnlyCheckSeasonalCriticals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    Warped: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]


@partial_struct
class cGcMissionConditionForceHideMultiplayer(Structure):
    pass


@partial_struct
class cGcMissionConditionCurrentPlanetVisited(Structure):
    JustTestSeasonStartPlanetHack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionFreighterBattle(Structure):
    FreighterBattleDistance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]

    class eFreighterBattleStatusEnum(IntEnum):
        None_ = 0x0
        Active = 0x1
        Joined = 0x2
        Reward = 0x3

    FreighterBattleStatus: Annotated[
        c_enum32[eFreighterBattleStatusEnum],
        Field(c_enum32[eFreighterBattleStatusEnum], 0x4),
    ]
    FreighterBattleTest: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]
    HostileFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcMissionConditionCurrentSlope(Structure):
    SlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    Abs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionFrigateCount(Structure):
    FrigateCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]


@partial_struct
class cGcMissionConditionDamagedFrigateAtHome(Structure):
    pass


@partial_struct
class cGcMissionConditionDefaultItem(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ProductType: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x10),
    ]
    SubstanceType: Annotated[
        c_enum32[enums.cGcDefaultMissionSubstanceEnum],
        Field(c_enum32[enums.cGcDefaultMissionSubstanceEnum], 0x14),
    ]


@partial_struct
class cGcMissionConditionBlackHolesRevealed(Structure):
    pass


@partial_struct
class cGcMissionConditionCreatureReadyToHatch(Structure):
    pass


@partial_struct
class cGcMissionConditionCreatureReadyToLay(Structure):
    PrimaryCreatureOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionCreatureSlots(Structure):
    CreatureSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    OnlyCountFreeSlots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionCameraControlStealing(Structure):
    pass


@partial_struct
class cGcMissionConditionCreatureSummoned(Structure):
    pass


@partial_struct
class cGcMissionConditionCanMakeFossil(Structure):
    NearbyDisplayDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ConsiderItemsInNearbyDisplays: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionCanMakeItem(Structure):
    TargetItem: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcMissionConditionCanPayCost(Structure):
    CostID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionCanReceiveReward(Structure):
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcMissionConditionCanRenameDiscovery(Structure):
    ValueToReturnWhileSearchActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionCanSpaceDock(Structure):
    pass


@partial_struct
class cGcMissionConditionCanSummonExocraft(Structure):
    SummonableExocraft: Annotated[
        c_enum32[enums.cGcVehicleType], Field(c_enum32[enums.cGcVehicleType], 0x0)
    ]
    SpecificExocraft: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionCheckScanEventMissionState(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    RequiredState: Annotated[
        c_enum32[enums.cGcInteractionMissionState],
        Field(c_enum32[enums.cGcInteractionMissionState], 0x20),
    ]
    AlsoAcceptMaintenanceDone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcMissionConditionCombinedStatLevel(Structure):
    Stats: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Modulo: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x18)
    ]


@partial_struct
class cGcMissionConditionCommunityResearchTier(Structure):
    CompletedTiers: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MissionIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]
    TakeTierFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcMissionConditionConvertedFromSeason(Structure):
    Season: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionBaseRequiresPower(Structure):
    MinNumPowerUsingParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionCookingSearch(Structure):
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    IfCookerOutputMustBeCorvetteModule: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x14)
    ]
    ReturnTrueIfCanMakeProduct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]
    SetIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16)]


@partial_struct
class cGcMissionConditionBinocsActive(Structure):
    pass


@partial_struct
class cGcMissionConditionBiomeType(Structure):
    Type: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x0)
    ]
    AnyInfested: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    AnyRuins: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcMissionConditionCreatureOwned(Structure):
    SpecificCreatureID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x14)
    ]
    AnyPredator: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcModelExplosionRule(Structure):
    AxisMultiplier: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]

    class eExplodeActionEnum(IntEnum):
        RelativeToParent = 0x0
        DontMove = 0x1
        SaveCenter = 0x2
        RelativeToSaved = 0x3

    ExplodeAction: Annotated[
        c_enum32[eExplodeActionEnum], Field(c_enum32[eExplodeActionEnum], 0x20)
    ]
    ExplodeMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]

    class eMatchNameEnum(IntEnum):
        ContainsString = 0x0
        ExactString = 0x1

    MatchName: Annotated[
        c_enum32[eMatchNameEnum], Field(c_enum32[eMatchNameEnum], 0x28)
    ]

    class eMatchNodeTypeEnum(IntEnum):
        Any = 0x0
        Mesh = 0x1
        Model = 0x2
        Joint = 0x3

    MatchNodeType: Annotated[
        c_enum32[eMatchNodeTypeEnum], Field(c_enum32[eMatchNodeTypeEnum], 0x2C)
    ]
    String: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x30)]


@partial_struct
class cGcMissionConditionBasePowerGenerated(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MustBeSpare: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcMissionConditionAbandonedFreighterExplored(Structure):
    TargetRooms: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionAbandonedMode(Structure):
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcMissionConditionAimingTeleporter(Structure):
    pass


@partial_struct
class cGcMissionConditionAlienPodAggroed(Structure):
    Threshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcMissionConditionAllMilestonesComplete(Structure):
    ForStage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    UseSeasonOverrideMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionAllSystemPlanetsDiscovered(Structure):
    DisplayNumberOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcMissionConditionAreDroneHivePartsDestroyed(Structure):
    ControllingScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcMissionConditionAutoPowerEnabled(Structure):
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcScanEventTriggers(Structure):
    Triggers: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Range: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AllowRetrigger: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcMissionConditionBasePartNear(Structure):
    PartID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    TakeIDFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRegionHotspotData(Structure):
    ClassStrengths: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ClassWeightings: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    DiscoveryDistanceThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    ProbabilityWeighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]


@partial_struct
class cGcRegionHotspotSubstance(Structure):
    SubstanceId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AmountCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    SubstanceYeild: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcRoomCountRule(Structure):
    RoomID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Max: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Min: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcRoomSequenceRule(Structure):
    MustBeAfterRoom: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MustBeBeforeRoom: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    RoomID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    MinRoomIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]


@partial_struct
class cGcQuestItemPlacementRule(Structure):
    MustBeAfterQuestItem: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MustBeBeforeQuestItem: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    QuestItemID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ValidRoomIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    MaxRoomIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    MinRoomIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]


@partial_struct
class cGcRegionHotspotBiomeGases(Structure):
    Gas1Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Gas2Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcFreighterDungeonChoice(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Weighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcFrigateUITraitLines(Structure):
    Line0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Line1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Line2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Line3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Line4: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcFrigateClassCost(Structure):
    Cost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcGaussianCurveData(Structure):
    Mean: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    StdDev: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcInventoryClassCostMultiplier(Structure):
    Multiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcFrigateStatRange(Structure):
    Maximum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Minimum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcFrigateStats(Structure):
    InitialTrait: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Stats: Annotated[cGcFrigateStatRange, Field(cGcFrigateStatRange, 0x10)]


@partial_struct
class cGcPhysicsCollisionGroupCollidesWith(Structure):
    CollidesWith: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcPhysicsCollisionGroups]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcPhysicsCollisionGroups]], 0x0),
    ]
    Group: Annotated[
        c_enum32[enums.cGcPhysicsCollisionGroups],
        Field(c_enum32[enums.cGcPhysicsCollisionGroups], 0x10),
    ]


@partial_struct
class cGcFrigateStatsByClass(Structure):
    FrigateClass: Annotated[cGcFrigateStats, Field(cGcFrigateStats, 0x0)]


@partial_struct
class cGcFreighterBaseOption(Structure):
    BaseDataFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    ProbabilityWeighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcFrigateTraitIcons(Structure):
    Icons: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcFreighterBaseOptions(Structure):
    FreighterBases: Annotated[
        basic.cTkDynamicArray[cGcFreighterBaseOption],
        Field(basic.cTkDynamicArray[cGcFreighterBaseOption], 0x0),
    ]


@partial_struct
class cGcFrigateTraitStrengthValues(Structure):
    StatLocID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    StatAlteration: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    StatDisplaysPositive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]


@partial_struct
class cGcFrigateTraitStrengthByType(Structure):
    FrigateStatType: Annotated[
        cGcFrigateTraitStrengthValues, Field(cGcFrigateTraitStrengthValues, 0x0)
    ]


@partial_struct
class cGcFishingRodData(Structure):
    DescriptorGroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcExpeditionCategoryStrength(Structure):
    OccurranceChance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcExpeditionDebriefPunctuation(Structure):
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Punctuation: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4)
    ]


@partial_struct
class cGcExpeditionDifficultyKeyframe(Structure):
    Difficulty: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    EventNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcExpeditionDurationValues(Structure):
    Duration: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcFishSizeProbability(Structure):
    BaseWeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    DepthModifier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    DepthRangeMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    DepthRangeMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]


@partial_struct
class cGcFishSizeProbabilityBiomeOverride(Structure):
    SizeWeights: Annotated[cGcFishSizeProbability, Field(cGcFishSizeProbability, 0x0)]
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x40)
    ]


@partial_struct
class cGcExpeditionEventOccurrenceRate(Structure):
    ExpeditionCategory: Annotated[
        cGcExpeditionCategoryStrength, Field(cGcExpeditionCategoryStrength, 0x0)
    ]


@partial_struct
class cGcDungeonRoomParams(Structure):
    RoomId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BranchProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcExpeditionPaymentToken(Structure):
    TokenName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TokenValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcDungeonQuestParams(Structure):
    QuestItems: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcDungeonGenerationParams(Structure):
    BranchRoomTypes: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    GenerationRules: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x10),
    ]
    MainRoomTypes: Annotated[
        basic.cTkDynamicArray[cGcDungeonRoomParams],
        Field(basic.cTkDynamicArray[cGcDungeonRoomParams], 0x20),
    ]
    PruningRules: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    Quests: Annotated[
        basic.cTkDynamicArray[cGcDungeonQuestParams],
        Field(basic.cTkDynamicArray[cGcDungeonQuestParams], 0x40),
    ]
    EntranceX: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x50)]
    EntranceY: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x54)]
    EntranceZ: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x58)]
    Rooms: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x5C)]
    SizeX: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x60)]
    SizeY: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x64)]
    SizeZ: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x68)]
    StraightMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    XProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    YProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    ZProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]


@partial_struct
class cGcFishData(Structure):
    CatchIncrementsStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MissionSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x10)]
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RequiresMissionActive: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    MissionCatchChanceOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    Quality: Annotated[
        c_enum32[enums.cGcItemQuality], Field(c_enum32[enums.cGcItemQuality], 0x44)
    ]
    Size: Annotated[
        c_enum32[enums.cGcFishSize], Field(c_enum32[enums.cGcFishSize], 0x48)
    ]
    Time: Annotated[
        c_enum32[enums.cGcFishingTime], Field(c_enum32[enums.cGcFishingTime], 0x4C)
    ]
    Biome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    MissionMustAlsoBeSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]
    NeedsStorm: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x62)]


@partial_struct
class cGcFishingRecord(Structure):
    ProductList: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LargestCatchList: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1000)]
    ProductCountList: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x1400)]


@partial_struct
class cGcGalaxyStarColours(Structure):
    ColourByStarType: Annotated[basic.Colour, Field(basic.Colour, 0x0)]


@partial_struct
class cGcGalaxyVoxelAttributesData(Structure):
    AtlasStationIndices: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    BlackholeIndices: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    TransitPopulationDistanceRange: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x60)
    ]
    AtlasStationCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    BlackholeCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6C)]
    GuideStarMinimumCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    GuideStarRenegadeCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    PurpleSystemsCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78)]
    PurpleSystemsStart: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7C)]
    RegionColourValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    TransitPopulationPerpDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x84)
    ]
    UnitDistanceFromGoalEdge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    InsideGoalGap: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8C)]


@partial_struct
class cGcAsteroidGenerationData(Structure):
    NoiseRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    ScaleVariance: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x8)]
    FadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Health: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    NoiseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcAsteroidSystemGenerationData(Structure):
    CommonAsteroidData: Annotated[
        cGcAsteroidGenerationData, Field(cGcAsteroidGenerationData, 0x0)
    ]
    LargeAsteroidData: Annotated[
        cGcAsteroidGenerationData, Field(cGcAsteroidGenerationData, 0x24)
    ]
    RareAsteroidData: Annotated[
        cGcAsteroidGenerationData, Field(cGcAsteroidGenerationData, 0x48)
    ]
    RingAsteroidData: Annotated[
        cGcAsteroidGenerationData, Field(cGcAsteroidGenerationData, 0x6C)
    ]


@partial_struct
class cGcBaitData(Structure):
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RarityBoosts: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SizeBoosts: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    DayTimeBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    NightTimeBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    StormBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]


@partial_struct
class cGcCutSceneClouds(Structure):
    BottomColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    InitialOffsetWorldSpace: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    TopColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    StratosphereWindOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x30)]
    WindOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x38)]
    AbsorbtionFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    AnimScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    AtmosphereEndHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    AtmosphereStartHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    Coverage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    Density: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    StratosphereHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    ControlClouds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5C)]


@partial_struct
class cGcDebugObjectDecoration(Structure):
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Local: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x50)]
    Resource: Annotated[basic.GcResource, Field(basic.GcResource, 0x60)]


@partial_struct
class cGcGalaxyCameraData(Structure):
    CameraFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CameraShakeDriftClip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    CameraShakeDriftShift: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    CameraShakeMaximum: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    CameraShakeSmoothingRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    FixedZoomRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    FreeElevationBlendRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    FreePanSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    FreePanSpeedTurbo: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FreeRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FreeUpDownSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    FreeUpDownSpeedTurbo: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    LockTransitionRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    LockedScaledElevationSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    LockedScaledPushSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    LockedSpinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MaxZoomDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MinPushingZoomDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MinPushingZoomDistanceScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    MinZoomDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    MovementBlendRateFree: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    MovementBlendRateLocked: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    MovementBlendRateLookLocked: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    ZoomInRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    ZoomOutElevation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    ZoomOutPushDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    ZoomOutRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    ZoomOutSpin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]


@partial_struct
class cGcGalaxyGenerationSetupData(Structure):
    InnerSectorColours: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    InnerFieldScales: Annotated[basic.Vector4f, Field(basic.Vector4f, 0xA0)]
    SpiralPull: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xB0)]
    StarSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xC0)]
    BaseSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xE8)]
    ConnectionAttractorMax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF0)]
    ConnectionAttractorMin: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF8)]
    ConnectionDistortion: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x100)]
    SpiralFlex: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x108)]
    SpiralInclusion: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x110)]
    SpiralSizeScale: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x118)]
    StarHighlightAlpha: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x120)]
    StarHighlightSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x128)]
    BaseGenerationThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    BaseTurbulenceGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x134)]
    BaseTurbulenceLac: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x138)]
    BaseTurbulenceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C)]
    ColourBaseBlendOnSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    ConnectionDistanceLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144)]
    ConnectionDistortionTMult: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    FieldGenerationThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    FieldAlphaBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150)]
    FieldAlphaField1Inf: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154)]
    FieldAlphaField2SqInf: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x158)]
    RareSunChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C)]
    SizeField4Inf: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160)]
    SizeNoisePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x164)]
    SizeNoiseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168)]
    SpiralFormChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16C)]
    SpiralTwistMult: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x170)]
    StarGenerationThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x174)]
    StarHighlightChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x178)]


@partial_struct
class cGcGalaxyMarkerSettings(Structure):
    Colours: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    OutlineColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    Icon: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    IconSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x50)]
    TimeScaleRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x58)]
    EdgeCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    LineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    LineWidthFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    OutlineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    RadiusBaseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    RadiusEdge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    RadiusFixed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    RadiusMinimum: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    RotationBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    SizeScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    MarkerLabel: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x88)
    ]


@partial_struct
class cGcGalaxyRenderAnostreakData(Structure):
    InnerColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    OuterColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    Contrast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    HorizontalScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    VerticalCompression: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcGalaxyRenderSetupData(Structure):
    MapLargeAreaPrimaryDefaultColours: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    MapLargeAreaPrimaryHighContrastColours: Annotated[
        basic.Colour, Field(basic.Colour, 0xA0)
    ]
    MapLargeAreaSecondaryDefaultColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x140)
    ]
    MapLargeAreaSecondaryHighContrastColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x1E0)
    ]
    CompositionControlB_S_C_G: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x280)]
    LensFlareColour: Annotated[basic.Colour, Field(basic.Colour, 0x290)]
    LensFlareSpread: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x2A0)]
    SunCoreColour: Annotated[basic.Colour, Field(basic.Colour, 0x2B0)]
    LensFlareExpandTowards: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2C0)]
    NebulaeTraceStepRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2C8)]
    BGCellHorizonInfluence: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D0)]
    BGCellMoveScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D4)]
    BGCellTraceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D8)]
    BGColourCellBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2DC)]
    BGColourPow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E0)]
    BGColourStage1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E4)]
    BGColourStage2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E8)]
    BGColourStage3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2EC)]
    BGColourStage4: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F0)]
    CompositionSaturationIncreaseError: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2F4)
    ]
    CompositionSaturationIncreaseFilter: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2F8)
    ]
    CompositionSaturationIncreaseSelected: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2FC)
    ]
    LensFlareBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x300)]
    NebulaeAlphaPow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x304)]
    NebulaeTraceDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x308)]
    NebulaeTraceDensityCutoff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30C)]
    NebulaeTraceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x310)]
    NebulaeTraceValueMult: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x314)]
    StarFieldBlendAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x318)]
    SunCoreBGContrib: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x31C)]
    SunCoreFGContrib: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x320)]
    SunCoreLarger: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x324)]
    SunCoreSmaller: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x328)]
    VignetteBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x32C)]
    VignetteSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x330)]
    VignetteSizeIncreaseError: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x334)]
    VignetteSizeIncreaseFilter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x338)]
    VignetteSizeIncreaseSelected: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x33C)
    ]


@partial_struct
class cGcGalaxySolarSystemOrbitParams(Structure):
    FirstOrbitRadiusMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FirstOrbitRadiusMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    OrbitLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    OrbitRadiusOffsetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    OrbitRadiusOffsetMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    OrbitRotationSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    OrbitRotationSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcWeightedResource(Structure):
    Geometry: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcWFCFace(Structure):
    ExcludedNeighboursR0: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    ExcludedNeighboursR1: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]
    ExcludedNeighboursR2: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    ExcludedNeighboursR3: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]

    class eTransformEnum(IntEnum):
        None_ = 0x0
        Rotated90 = 0x1
        Rotated180 = 0x2
        Rotated270 = 0x3
        FlippedHorizontally = 0x4

    Transform: Annotated[
        c_enum32[eTransformEnum], Field(c_enum32[eTransformEnum], 0x50)
    ]
    Connector: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x54)
    ]
    Incomplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]
    IsEntrance: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x75)]
    Symmetric: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x76)]
    Walkable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x77)]


@partial_struct
class cGcWFCTerrainConstraint(Structure):
    class eDirectionEnum(IntEnum):
        Left = 0x0
        Back = 0x1
        Right = 0x2
        Forward = 0x3
        LeftBack = 0x4
        RightBack = 0x5
        RightForward = 0x6
        LeftForward = 0x7
        All = 0x8

    Direction: Annotated[c_enum32[eDirectionEnum], Field(c_enum32[eDirectionEnum], 0x0)]

    class eLevelsEnum(IntEnum):
        Lower = 0x0
        Upper = 0x1
        Both = 0x2

    Levels: Annotated[c_enum32[eLevelsEnum], Field(c_enum32[eLevelsEnum], 0x4)]

    class eTerrainEnum(IntEnum):
        RequireAbove = 0x0
        RequireBelow = 0x1

    Terrain: Annotated[c_enum32[eTerrainEnum], Field(c_enum32[eTerrainEnum], 0x8)]


@partial_struct
class cGcWFCModulePrototype(Structure):
    Back: Annotated[cGcWFCFace, Field(cGcWFCFace, 0x0)]
    Down: Annotated[cGcWFCFace, Field(cGcWFCFace, 0x78)]
    Forward: Annotated[cGcWFCFace, Field(cGcWFCFace, 0xF0)]
    Left: Annotated[cGcWFCFace, Field(cGcWFCFace, 0x168)]
    Right: Annotated[cGcWFCFace, Field(cGcWFCFace, 0x1E0)]
    Up: Annotated[cGcWFCFace, Field(cGcWFCFace, 0x258)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2D0)]
    LayoutGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2E0)]
    Scenes: Annotated[
        basic.cTkDynamicArray[cGcWeightedResource],
        Field(basic.cTkDynamicArray[cGcWeightedResource], 0x2F0),
    ]
    TerrainConstraints: Annotated[
        basic.cTkDynamicArray[cGcWFCTerrainConstraint],
        Field(basic.cTkDynamicArray[cGcWFCTerrainConstraint], 0x300),
    ]

    class eFreighterModuleTypeEnum(IntEnum):
        None_ = 0x0
        Room = 0x1
        Corridor = 0x2

    FreighterModuleType: Annotated[
        c_enum32[eFreighterModuleTypeEnum],
        Field(c_enum32[eFreighterModuleTypeEnum], 0x310),
    ]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x314)]

    class eTerrainEditsEnum(IntEnum):
        None_ = 0x0
        ClearEntireBlock = 0x1
        UseScene = 0x2
        UseBasebuildingEdits = 0x3

    TerrainEdits: Annotated[
        c_enum32[eTerrainEditsEnum], Field(c_enum32[eTerrainEditsEnum], 0x318)
    ]
    Group: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x31C)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x39C)]
    DontRotateModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41C)]
    ExcludeOnGround: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41D)]
    ExcludeOnTop: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41E)]
    ExcludeRotatedVariants: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41F)]
    Include: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x420)]
    Indoors: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x421)]
    LimitToOnePerLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x422)]


@partial_struct
class cGcWeightedMaterialId(Structure):
    DecorationId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]


@partial_struct
class cGcWeightedBuildingSize(Structure):
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    SizeX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    SizeY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    SizeZ: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    CreateSymmetricBuilding: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcWeightedColourId(Structure):
    DecorationPaletteId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PaletteId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcFreighterBaseRoom(Structure):
    Palette: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcIDPair(Structure):
    Item1: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Item2: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcWeatherEffectLightningData(Structure):
    pass


@partial_struct
class cGcMinimumUseConstraint(Structure):
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Modules: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]
    MinUses: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcWeatherHazardLightningData(Structure):
    IndicatorDecal: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    StaticDecal: Annotated[cTkModelResource, Field(cTkModelResource, 0x20)]
    DamageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    ImpactParticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    ShakeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    DamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    DecalFullGrowthProgress: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    EarliestImpact: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    EarliestImpactFirstInstance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    FlashStartProgress: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    FullDamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    MaxRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    MaxStrikes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8C)]
    MinRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    MinStrikes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x94)]
    NumFlashes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    StormDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]


@partial_struct
class cGcModuleOverride(Structure):
    Module: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Scenes: Annotated[
        basic.cTkDynamicArray[cGcWeightedResource],
        Field(basic.cTkDynamicArray[cGcWeightedResource], 0x10),
    ]
    OriginalSceneProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    ProbabilityMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcWeatherHazardMeteorData(Structure):
    ImpactEffect: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    ImpactExplode: Annotated[cTkModelResource, Field(cTkModelResource, 0x20)]
    IndicatorDecal: Annotated[cTkModelResource, Field(cTkModelResource, 0x40)]
    Meteor: Annotated[cTkModelResource, Field(cTkModelResource, 0x60)]
    StaticDecal: Annotated[cTkModelResource, Field(cTkModelResource, 0x80)]
    DamageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    ImpactParticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    ShakeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    DamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    DecalFullGrowthProgress: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    EarliestImpact: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    EarliestImpactFirstInstance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    FlashStartProgress: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    FullDamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    MaxMeteors: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE8)]
    MaxRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    MinMeteors: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xF0)]
    MinRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    NumFlashes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    StormDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]


@partial_struct
class cGcWeatherHazardTornadoData(Structure):
    SuckInRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    SuckInStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    SuckUpHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    SuckUpHeightCutoff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    SuckUpRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SuckUpStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcWFCDecorationFace(Structure):
    class eCanWalkEnum(IntEnum):
        None_ = 0x0
        RequireCanWalk = 0x1
        RequireCanNotWalk = 0x2

    CanWalk: Annotated[c_enum32[eCanWalkEnum], Field(c_enum32[eCanWalkEnum], 0x0)]
    RequiredFace: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x4)
    ]


@partial_struct
class cGcHazardValues(Structure):
    Extreme: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Normal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcSelectableObjectData(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcSpaceSkyColours(Structure):
    CloudColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ColourBottom: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    ColourBottomPlanet: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    ColourMid: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    ColourMidPlanet: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    ColourTop: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    ColourTopPlanet: Annotated[basic.Colour, Field(basic.Colour, 0x60)]
    FogColour: Annotated[basic.Colour, Field(basic.Colour, 0x70)]
    FogColour2: Annotated[basic.Colour, Field(basic.Colour, 0x80)]
    NebulaColour1: Annotated[basic.Colour, Field(basic.Colour, 0x90)]
    NebulaColour2: Annotated[basic.Colour, Field(basic.Colour, 0xA0)]
    NebulaColour3: Annotated[basic.Colour, Field(basic.Colour, 0xB0)]
    NebulaShadowColour: Annotated[basic.Colour, Field(basic.Colour, 0xC0)]
    SunColour: Annotated[basic.Colour, Field(basic.Colour, 0xD0)]


@partial_struct
class cGcSpaceSkyProperties(Structure):
    PlanetHorizonColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    PlanetSkyColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    ColourIndex: Annotated[
        cGcPlanetWeatherColourIndex, Field(cGcPlanetWeatherColourIndex, 0x20)
    ]
    AtmosphereThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    CenterPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    CloudNoiseFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    HorizonFadeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    HorizonMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    NebulaBrightness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    NebulaCloudStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    NebulaCloudStrength1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    NebulaDistortionStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    NebulaFBMStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    NebulaFBMStrength1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    NebulaFogAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    NebulaFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    NebulaNoiseFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    NebulaSeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    NebulaSparseness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    NebulaTendrilStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    NebulaTurbulenceStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    NebulaWispyness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    NebulaWispyness1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    PlanetFogStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    SpaceFogColour2Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    SpaceFogColourStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    SpaceFogMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    SpaceFogPlanetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    SpaceFogStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    StarVisibility: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    SunSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    SunStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]


@partial_struct
class cGcTerrainTextureSettings(Structure):
    Brightness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Contrast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Specular: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcTileTypeOptions(Structure):
    Options: Annotated[
        basic.cTkDynamicArray[cTkPaletteTexture],
        Field(basic.cTkDynamicArray[cTkPaletteTexture], 0x0),
    ]


@partial_struct
class cGcTileTypeSet(Structure):
    Colours: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x0)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]


@partial_struct
class cGcSkyProperties(Structure):
    AtmosphereThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DayHorizonTightness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    DuskHorizonMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    HorizonFadeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    HorizonMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    NightHorizonMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SunSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    SunStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    SunSurroundSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    SunSurroundStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    UpperSkyFadeOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    UpperSkyFadeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]


@partial_struct
class cGcResourceCollectEffect(Structure):
    OffsetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    OffsetMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    PlayerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    RotateMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    RotateMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SizeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SizeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    StartOffsetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    StartOffsetMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    StartSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    StartSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    TimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    TimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]


@partial_struct
class cGcPlanetaryBuildingRestrictions(Structure):
    RequiresCorruptSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    RequiresRelicWorld: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]
    RequiresWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2)]


@partial_struct
class cGcExternalObjectListOptions(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Options: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x10),
    ]
    ResourceHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ResourceHintIcon: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Order: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    SeasonalProbabilityOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    TileType: Annotated[
        c_enum32[enums.cGcTerrainTileType],
        Field(c_enum32[enums.cGcTerrainTileType], 0x4C),
    ]
    AddToFilenameHashmapWhenOptional: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x50)
    ]
    AllowLimiting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    ChooseUsingLifeLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]
    SuppressSpawn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x53)]


@partial_struct
class cGcPlanetCloudProperties(Structure):
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x0)]
    CoverageRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]
    CoverExtremes: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x18)]

    class eCloudinessEnum(IntEnum):
        CloudyWithClearSpells = 0x0
        ClearWithCloudySpells = 0x1

    Cloudiness: Annotated[
        c_enum32[eCloudinessEnum], Field(c_enum32[eCloudinessEnum], 0x20)
    ]
    Coverage1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Coverage2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    Coverage3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    Offset1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Offset2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    Offset3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    RateOfChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    Ratio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    SecondaryRateOfChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]


@partial_struct
class cGcFogProperties(Structure):
    HeavyAir: Annotated[cGcHeavyAirSetting, Field(cGcHeavyAirSetting, 0x0)]
    CloudRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x190)]
    DepthOfField: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x194)]
    DepthOfFieldDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198)]
    DepthOfFieldFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C)]
    FogColourMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A0)]
    FogColourStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A4)]
    FogHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A8)]
    FogMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC)]
    FogStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B0)]
    FullscreenEffect: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B4)]
    HeightFogFadeOutStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B8)]
    HeightFogMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC)]
    HeightFogOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C0)]
    HeightFogStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C4)]
    RainWetness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C8)]
    IsRaining: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1CC)]


@partial_struct
class cGcLightProperties(Structure):
    BounceColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    LightColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    SunColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]


@partial_struct
class cGcLightShaftProperties(Structure):
    LightShaftColourBottom: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    LightShaftColourTop: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    LightShaftBottom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    LightShaftScattering: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    LightShaftStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    LightShaftTop: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]


@partial_struct
class cGcObjectDefinitionData(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]

    class eLifeTypeEnum(IntEnum):
        Rock = 0x0
        DryPlant = 0x1
        LushPlant = 0x2
        Artificial = 0x3

    LifeType: Annotated[c_enum32[eLifeTypeEnum], Field(c_enum32[eLifeTypeEnum], 0x10)]

    class eLocationTypeEnum(IntEnum):
        AboveGround = 0x0
        UnderGround = 0x1
        WaterSurface = 0x2
        UnderWater = 0x3

    LocationType: Annotated[
        c_enum32[eLocationTypeEnum], Field(c_enum32[eLocationTypeEnum], 0x14)
    ]

    class eObjectAlignmentEnum(IntEnum):
        Upright = 0x0
        SlightOffsetFromUpright = 0x1
        LargeOffsetFromUpright = 0x2
        ToNormal = 0x3
        SlightOffsetFromNormal = 0x4
        LargeOffsetFromNormal = 0x5

    ObjectAlignment: Annotated[
        c_enum32[eObjectAlignmentEnum], Field(c_enum32[eObjectAlignmentEnum], 0x18)
    ]

    class eObjectCoverageTypeEnum(IntEnum):
        Blanket = 0x0
        Cluster = 0x1
        Solo = 0x2

    ObjectCoverageType: Annotated[
        c_enum32[eObjectCoverageTypeEnum],
        Field(c_enum32[eObjectCoverageTypeEnum], 0x1C),
    ]

    class eObjectRenderTypeEnum(IntEnum):
        Instanced = 0x0
        Single = 0x1

    ObjectRenderType: Annotated[
        c_enum32[eObjectRenderTypeEnum], Field(c_enum32[eObjectRenderTypeEnum], 0x20)
    ]

    class eSizeClassEnum(IntEnum):
        Tiny = 0x0
        Small = 0x1
        Medium = 0x2
        Large = 0x3
        Massive = 0x4

    SizeClass: Annotated[
        c_enum32[eSizeClassEnum], Field(c_enum32[eSizeClassEnum], 0x24)
    ]
    AutoCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    MatchGroundColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]


@partial_struct
class cGcObjectSpawnDataVariant(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LodDistances: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Coverage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FadeOutEndDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    FadeOutOffsetDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    FadeOutStartDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    FlatDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    MaxImposterRadius: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    MaxRegionRadius: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    SlopeDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    SlopeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]


@partial_struct
class cGcBuildingDefinitionData(Structure):
    AABBOverrideMax: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    AABBOverrideMin: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    TextureNameHint: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    ClusterLayout: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Density: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    FlattenType: Annotated[cTkNoiseFlattenOptions, Field(cTkNoiseFlattenOptions, 0x70)]
    ClusterSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    MaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    NumModelsToGenerate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x84)]
    NumOverridesToGenerate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x88)]
    NumOverridesToGenerateWaterworlds: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x8C)
    ]
    OverrideRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    PlanetRestrictions: Annotated[
        cGcPlanetaryBuildingRestrictions, Field(cGcPlanetaryBuildingRestrictions, 0x94)
    ]
    EnabledWhenPlanetHasNoNPCs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x97)]
    GivesShelter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x98)]
    IgnoreParticlesInAABB: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x99)]


@partial_struct
class cGcEnvironmentProperties(Structure):
    SkyHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AsteroidFadeHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AsteroidFadeHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    AtmosphereEndHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    AtmosphereStartHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    CloudHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    CloudHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    FlightFogBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    FlightFogHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    HeavyAirHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    HeavyAirHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    HorizonBlendHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    HorizonBlendLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    PlanetLodSwitch0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    PlanetLodSwitch0Elevation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    PlanetLodSwitch1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    PlanetLodSwitch2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    PlanetLodSwitch3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    PlanetObjectSwitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    SkyAtmosphereHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    SkyColourBlendLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    SkyColourHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    SkyPositionBlendLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    SkyPositionHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    SolarSystemLUTBlendLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    SolarSystemLUTHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    StratosphereHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]


@partial_struct
class cGcBuildingFilename(Structure):
    LSystem: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Scene: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    WFC: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]


@partial_struct
class cGcBuildingFilenameList(Structure):
    BuildingFiles: Annotated[cGcBuildingFilename, Field(cGcBuildingFilename, 0x0)]


@partial_struct
class cGcBuildingDensity(Structure):
    BuildingSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcBuildingDistribution(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxDistance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MinDistance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcBuildingOverrideData(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x10)]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcBuildingClusterLayoutEntry(Structure):
    Building: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x0),
    ]
    Max: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Min: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    FacesCentre: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcBuildingClusterLayout(Structure):
    ClusterBuildings: Annotated[
        basic.cTkDynamicArray[cGcBuildingClusterLayoutEntry],
        Field(basic.cTkDynamicArray[cGcBuildingClusterLayoutEntry], 0x0),
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AlignmentJitter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AlignmentSteps: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcBuildingSpawnSlot(Structure):
    BuildingDataIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    HasBuilding: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcCloudProperties(Structure):
    CloudBaseColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    CloudHeightGradient1: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x10)]
    CloudHeightGradient2: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x20)]
    CloudHeightGradient3: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x30)]
    CloudTopColour: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    StratosphereWindOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x50)]
    WindOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x58)]
    AbsorptionFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AmbientDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    AmbientScalar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    AnimationScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    BackwardScatteringG: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    BaseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    CloudBottomFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    CloudDistortion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    CloudDistortionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    ConeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    DarkOutlineScalar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    Density: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    DetailScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    DitheringScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    ErosionEdgeSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    ForwardScatteringG: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    HorizonCoverageEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    HorizonCoverageStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    HorizonDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    HorizonFadeScalar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    HorizonFadeStartAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    LightScalar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    LODDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    MaxIterations: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    RayMinimumY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    SampleScalar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    SampleThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    SunRayLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    UseBlueNoiseDithering: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD0)]


@partial_struct
class cGcPetAccessoryGroup(Structure):
    DisallowedAccessories: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcPetAccessoryType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcPetAccessoryType]], 0x0),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcPetAccessoryInfo(Structure):
    Descriptor: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcPetEggSpeciesOverrideData(Structure):
    CreatureID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxScaleOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MinScaleOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    CanChangeAccessories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    CanChangeColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]
    CanChangeGrowth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A)]
    CanChangeTraits: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B)]


@partial_struct
class cGcSandwormTimerAndFrequencyOverride(Structure):
    PackedUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    SpawnChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    Timer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cGcEcosystemCreatureData(Structure):
    Creature: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Rarity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    TileType: Annotated[
        c_enum32[enums.cGcTerrainTileType],
        Field(c_enum32[enums.cGcTerrainTileType], 0x1C),
    ]


@partial_struct
class cGcSpookFiendSpawnData(Structure):
    SpawnID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxNumSpawns: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    SpawnChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    ThresholdSpookLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    TimerAccelerator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcEcosystemSpawnData(Structure):
    Creatures: Annotated[
        basic.cTkDynamicArray[cGcEcosystemCreatureData],
        Field(basic.cTkDynamicArray[cGcEcosystemCreatureData], 0x0),
    ]
    CreatureMaxNoise: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    CreatureMinNoise: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcIkPistonData(Structure):
    Joint1Name: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x0)
    ]
    Joint2Name: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x100)
    ]


@partial_struct
class cGcCreatureGenerationWeightedListDomainEntry(Structure):
    Archetype: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcCreatureGenerationWeightedList(Structure):
    Air: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry], 0x0),
    ]
    Cave: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry],
        Field(
            basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry], 0x10
        ),
    ]
    Ground: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry],
        Field(
            basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry], 0x20
        ),
    ]
    Water: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry],
        Field(
            basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry], 0x30
        ),
    ]


@partial_struct
class cGcCreatureGenerationOptionalWeightedList(Structure):
    Archetypes: Annotated[
        cGcCreatureGenerationWeightedList, Field(cGcCreatureGenerationWeightedList, 0x0)
    ]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    OverrideAllDomains: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]


@partial_struct
class cGcCreatureRoleFilename(Structure):
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    BiomeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcCreatureRoleFilenameList(Structure):
    Options: Annotated[
        basic.cTkDynamicArray[cGcCreatureRoleFilename],
        Field(basic.cTkDynamicArray[cGcCreatureRoleFilename], 0x0),
    ]


@partial_struct
class cGcCreatureGroupDescription(Structure):
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    GroupsPerSquareKm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MaxGroupSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    MinGroupSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cGcCreatureGroupProbability(Structure):
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcCreatureRoleFilenameTable(Structure):
    WeirdBiomeFiles: Annotated[
        cGcCreatureRoleFilenameList, Field(cGcCreatureRoleFilenameList, 0x0)
    ]
    BiomeFiles: Annotated[
        cGcCreatureRoleFilenameList, Field(cGcCreatureRoleFilenameList, 0x200)
    ]
    AirFiles: Annotated[
        cGcCreatureRoleFilenameList, Field(cGcCreatureRoleFilenameList, 0x310)
    ]
    CaveFiles: Annotated[
        cGcCreatureRoleFilenameList, Field(cGcCreatureRoleFilenameList, 0x320)
    ]
    RobotFiles: Annotated[
        cGcCreatureRoleFilenameList, Field(cGcCreatureRoleFilenameList, 0x330)
    ]
    UnderwaterFiles: Annotated[
        cGcCreatureRoleFilenameList, Field(cGcCreatureRoleFilenameList, 0x340)
    ]
    UnderwaterFilesExtra: Annotated[
        cGcCreatureRoleFilenameList, Field(cGcCreatureRoleFilenameList, 0x350)
    ]
    LifeChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x360)]
    RoleFrequencyModifiers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x370)]


@partial_struct
class cGcCreatureDebugWaypoint(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]

    class eWaypointTypeEnum(IntEnum):
        Move = 0x0
        MoveAlt = 0x1
        Idle = 0x2

    WaypointType: Annotated[
        c_enum32[eWaypointTypeEnum], Field(c_enum32[eWaypointTypeEnum], 0x24)
    ]


@partial_struct
class cGcCreatureFilename(Structure):
    ExtraFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcCreatureGenerationDomainEntry(Structure):
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    DensityModifier: Annotated[
        c_enum32[enums.cGcCreatureGenerationDensity],
        Field(c_enum32[enums.cGcCreatureGenerationDensity], 0x10),
    ]


@partial_struct
class cGcCreatureGenerationDomainAdditionalEntries(Structure):
    Tables: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationDomainEntry],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationDomainEntry], 0x0),
    ]
    ChanceOfHemisphereLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MaxTablesToAdd: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    MaxToHemisphereLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cGcBehaviourPlayAnimTrigger(Structure):
    Trigger: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Frame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcCreatureGenerationDomainTable(Structure):
    AdditionalTables: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationDomainAdditionalEntries],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationDomainAdditionalEntries], 0x0),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Tables: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationDomainEntry],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationDomainEntry], 0x20),
    ]
    ChanceOfHemisphereLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MaxToHemisphereLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]


@partial_struct
class cGcPetActionMoodModifier(Structure):
    MoodModifiers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcWeirdCreatureRewardList(Structure):
    Rewards: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcPetTraitMoodModifier(Structure):
    MoodIncreaseMultiplierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MoodIncreaseMultiplierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    TraitMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    TraitMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cGcPetTraitMoodModifierList(Structure):
    Modifiers: Annotated[cGcPetTraitMoodModifier, Field(cGcPetTraitMoodModifier, 0x0)]


@partial_struct
class cGcCreatureSubstanceList(Structure):
    CreatureType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Item: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcCreatureVocalTestData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Size: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Squawk: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Genus: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x18)]


@partial_struct
class cGcCreatureBehaviourTreeData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Nodes: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x10),
    ]


@partial_struct
class cGcCreatureBehaviourTrees(Structure):
    BehaviourTree: Annotated[
        basic.cTkDynamicArray[cGcCreatureBehaviourTreeData],
        Field(basic.cTkDynamicArray[cGcCreatureBehaviourTreeData], 0x0),
    ]


@partial_struct
class cGcCreatureStupidName(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Names: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x80],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x80], 0x10),
    ]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcCreatureEffectTrigger(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Effect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    JointName: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x100],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x100], 0x20),
    ]
    Frame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    GroundTint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]


@partial_struct
class cGcCreatureEffectTriggerRequirementCreatureSize(Structure):
    MaxCreatureSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MinCreatureSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcCreatureVocalSoundData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MinCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    PlayFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]

    class eVocalEmoteEnum(IntEnum):
        EmoteIdle = 0x0
        EmoteFlee = 0x1
        EmoteAggression = 0x2
        EmoteRoar = 0x3
        EmotePain = 0x4
        EmoteAttack = 0x5
        EmoteDie = 0x6
        EmoteMiniRoarNeutral = 0x7
        EmoteMiniRoarHappy = 0x8
        EmoteMiniRoarAngry = 0x9

    VocalEmote: Annotated[
        c_enum32[eVocalEmoteEnum], Field(c_enum32[eVocalEmoteEnum], 0x1C)
    ]
    PlayImmediately: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    PlayOnlyOnce: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]


@partial_struct
class cGcCreatureVocalData(Structure):
    AttackVocal: Annotated[
        cGcCreatureVocalSoundData, Field(cGcCreatureVocalSoundData, 0x0)
    ]
    DeathVocal: Annotated[
        cGcCreatureVocalSoundData, Field(cGcCreatureVocalSoundData, 0x28)
    ]
    FleeVocal: Annotated[
        cGcCreatureVocalSoundData, Field(cGcCreatureVocalSoundData, 0x50)
    ]
    IdleVocal: Annotated[
        cGcCreatureVocalSoundData, Field(cGcCreatureVocalSoundData, 0x78)
    ]
    ScaleBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]


@partial_struct
class cGcCreatureFoodList(Structure):
    DebrisEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FoodProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ResourceFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]


@partial_struct
class cGcCreatureWeirdMovementData(Structure):
    FeetNames: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x100],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x100], 0x0),
    ]
    BobAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    BobSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    JumpAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]

    class eMoveModeEnum(IntEnum):
        Roll = 0x0
        Float = 0x1
        Drill = 0x2

    MoveMode: Annotated[c_enum32[eMoveModeEnum], Field(c_enum32[eMoveModeEnum], 0x1C)]
    SpinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Node: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x24)]


@partial_struct
class cGcFlyingSnakeData(Structure):
    AirThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AltitudeSinAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    AltitudeSinPeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    ApproachBaitSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    AscendDescendSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    BarrelRollCount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    BarrelRollSpawnDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    BarrelRollSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    CircleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    DefaultCircleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    RiseDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    RiseHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    RiseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    TailStiffness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    TwistLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    WindForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]


@partial_struct
class cGcCreatureHarvestSubstanceList(Structure):
    CreatureType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Item: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    MinBlobs: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    Desc: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x24)]


@partial_struct
class cGcCreaturePetPartHider(Structure):
    PartName: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x0),
    ]
    AccessorySlot: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10)
    ]


@partial_struct
class cGcCreatureSwarmDataParams(Structure):
    AnimThrustCycleAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ValidDescriptors: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x10),
    ]
    Alignment: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AlignTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    AnimThrustCycleEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    AnimThrustCycleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    AnimThrustCycleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    AnimThrustCyclePeak: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    AnimThrustCycleStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    BankingTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    Coherence: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    FaceMoveDirStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    FlyTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    FlyTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    Follow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    LandAdjustDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    LandClampBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    LandIdleTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    LandIdleTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    LandSlowDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    LandTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    LandTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    LandWalkTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    LandWalkTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    MaxBankingAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    MaxPitchAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    MaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    MinPitchAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    SeparateStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    SpeedForMaxPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    SpeedForMinPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    SteeringSpringSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    SwimAnimSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    SwimAnimSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    SwimFastSpeedMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    SwimMaxAcceleration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    SwimTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    TakeOffStartSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    TakeOffTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    TakeOffUpwardBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    TurnRequiredForMaxBanking: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    UpwardMovementForMaxPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    WalkSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    WalkTurnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    ApplyScaleToSpeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xCC)]
    ApplyScaleToSteeringSmoothTime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xCD)]
    CanLand: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xCE)]
    CanWalk: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xCF)]
    FaceMoveDirYawOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD0)]
    UseAnimThrustCycle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD1)]


@partial_struct
class cGcCreatureSwarmData(Structure):
    Params: Annotated[
        basic.cTkDynamicArray[cGcCreatureSwarmDataParams],
        Field(basic.cTkDynamicArray[cGcCreatureSwarmDataParams], 0x0),
    ]
    MaxCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MinCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    SwarmMovementRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    SwarmMovementSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]

    class eSwarmMovementTypeEnum(IntEnum):
        None_ = 0x0
        Circle = 0x1
        Random = 0x2
        Search = 0x3
        FollowPlayer = 0x4
        FollowPlayerLimited = 0x5

    SwarmMovementType: Annotated[
        c_enum32[eSwarmMovementTypeEnum], Field(c_enum32[eSwarmMovementTypeEnum], 0x20)
    ]


@partial_struct
class cGcCreaturePetTraitRange(Structure):
    Max: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Min: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcCreaturePetTraitRanges(Structure):
    TraitRanges: Annotated[
        cGcCreaturePetTraitRange, Field(cGcCreaturePetTraitRange, 0x0)
    ]


@partial_struct
class cGcCreatureRidingAnimation(Structure):
    MovementAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RidingAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcCreatureRidingPartModifier(Structure):
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    RotationOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    VROffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    PartName: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x30)]
    DefaultRidingAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    IdleRidingAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    RidingAnims: Annotated[
        basic.cTkDynamicArray[cGcCreatureRidingAnimation],
        Field(basic.cTkDynamicArray[cGcCreatureRidingAnimation], 0x70),
    ]
    HeadCounterRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    LegSpreadOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    MaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    MinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    AdditionalScaleJoint: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x90)
    ]
    JointName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x190)
    ]
    BreakIfNotSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x290)]
    OverrideAnims: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x291)]
    RelativeOffset: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x292)]


@partial_struct
class cGcCreatureRidingData(Structure):
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    RotationOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    VROffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    DefaultRidingAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    IdleRidingAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    PartModifiers: Annotated[
        basic.cTkDynamicArray[cGcCreatureRidingPartModifier],
        Field(basic.cTkDynamicArray[cGcCreatureRidingPartModifier], 0x50),
    ]
    RidingAnims: Annotated[
        basic.cTkDynamicArray[cGcCreatureRidingAnimation],
        Field(basic.cTkDynamicArray[cGcCreatureRidingAnimation], 0x60),
    ]
    HeadCounterRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    ScaleForMaxLegSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    ScaleForMinLegSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    ScaleForNeutralLegSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    UprightStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    AdditionalScaleJoint: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x84)
    ]
    JointName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x184)
    ]
    LegSpread: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x284)]
    RequiresMatchingPartModifier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x285)]


@partial_struct
class cGcCreaturePetAccessorySlot(Structure):
    AccessoryGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AttachLocator: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10)
    ]


@partial_struct
class cGcCreaturePetAccessory(Structure):
    RequiredDescriptor: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    HideParts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x20),
    ]
    Slots: Annotated[
        basic.cTkDynamicArray[cGcCreaturePetAccessorySlot],
        Field(basic.cTkDynamicArray[cGcCreaturePetAccessorySlot], 0x30),
    ]


@partial_struct
class cGcCreaturePetData(Structure):
    AccessorySlots: Annotated[
        basic.cTkDynamicArray[cGcCreaturePetAccessory],
        Field(basic.cTkDynamicArray[cGcCreaturePetAccessory], 0x0),
    ]


@partial_struct
class cGcCreatureHealthData(Structure):
    DeathAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DeathAudio: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DeathEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    DespawnOnDeathDescriptors: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x30),
    ]
    HurtAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    HurtAudio: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    DespawnOnDeath: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]


@partial_struct
class cGcCreatureHoverTintableEffect(Structure):
    TintColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    LightStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    TintStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    EffectNode: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x18)
    ]


@partial_struct
class cGcCreatureHoverMovementDataParams(Structure):
    TintableEffects: Annotated[
        basic.cTkDynamicArray[cGcCreatureHoverTintableEffect],
        Field(basic.cTkDynamicArray[cGcCreatureHoverTintableEffect], 0x0),
    ]
    ValidDescriptors: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x10),
    ]
    ElevationAvoidStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    GroundAlignTimeModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    GroundEffectHeightForMaxAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x28)
    ]
    GroundEffectHeightForMinAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2C)
    ]
    GroundHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    HeightForMaxElevationAvoid: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    HeightForMaxGroundAlign: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    HeightForMaxGroundAvoid: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    HeightForMinElevationAvoid: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    HeightForMinGroundAlign: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    HeightForMinGroundAvoid: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    NavOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    NavOffsetZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    RayCastDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    RayCastUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    GroundEffect: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x5C)
    ]
    CanJump: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15C)]
    ElevationAvoid: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15D)]
    GroundAlign: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15E)]
    GroundAvoid: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15F)]


@partial_struct
class cGcCreatureHoverMovementData(Structure):
    Params: Annotated[
        basic.cTkDynamicArray[cGcCreatureHoverMovementDataParams],
        Field(basic.cTkDynamicArray[cGcCreatureHoverMovementDataParams], 0x0),
    ]


@partial_struct
class cGcCreatureJellyBossAttackData(Structure):
    BroodSpawnID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OrbAttackProjectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    OrbAttackCooldownRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    SpawnBroodCooldownRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x28)]
    DelayBetweenOrbAttacks: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    FadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    MaxBroodCountPreventSpawn: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    MaxIdleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MinIdleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MinWaterDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    OrbAttackCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    OrbAttackExplosionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    OrbAttackLaunchSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    OrbAttackPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    OrbAttackPickWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    OrbAttackProjectileCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x5C)]
    SpawnBroodCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    SpawnBroodPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    SpawnBroodPickWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    CanOrbAttack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6C)]
    CanSpawnBrood: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6D)]
    ExplodeOnPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6E)]
    IsSpooky: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6F)]


@partial_struct
class cGcCreatureMoveAnimData(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AnimLeft: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AnimRight: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    AnimMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    AnimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    MaxPetSpeedScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    MaxPredatorSpeedScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MaxSpeedScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MinPetSpeedScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MinSpeedScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    AnimMoveSpeedCached: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]


@partial_struct
class cGcCreatureMovementData(Structure):
    Anims: Annotated[
        basic.cTkDynamicArray[cGcCreatureMoveAnimData],
        Field(basic.cTkDynamicArray[cGcCreatureMoveAnimData], 0x0),
    ]
    HeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    HeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    HeightRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    HeightRangeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    HeightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MoveRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MoveSpeedScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    TurnRadiusScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    Herd: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    IgnoreRotationInPounce: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    LimitHeightRange: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]


@partial_struct
class cGcCreatureParticleEffectDataEntry(Structure):
    EffectLocator: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    EffectName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Requirements: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x20),
    ]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Attached: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]
    DetachOnRetire: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35)]


@partial_struct
class cGcCreatureParticleEffectData(Structure):
    Effects: Annotated[
        basic.cTkDynamicArray[cGcCreatureParticleEffectDataEntry],
        Field(basic.cTkDynamicArray[cGcCreatureParticleEffectDataEntry], 0x0),
    ]
    RetireTriggers: Annotated[
        c_enum32[enums.cGcCreatureParticleEffectTrigger],
        Field(c_enum32[enums.cGcCreatureParticleEffectTrigger], 0x10),
    ]
    SpawnTriggers: Annotated[
        c_enum32[enums.cGcCreatureParticleEffectTrigger],
        Field(c_enum32[enums.cGcCreatureParticleEffectTrigger], 0x14),
    ]


@partial_struct
class cGcCreatureFiendAttackData(Structure):
    PushBackAttackAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PushBackDamageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    SpawnBroodAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    SpawnBroodID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    SpitAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    SpitProjectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    TurnLAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    TurnRAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    TurnAnimSpeeds: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x80)]
    AnimSpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    AttackLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    DelayBetweenPounceAttacks: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    DelayBetweenSpitAttacks: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    FarDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    IdleLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    MaxFlurryHits: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    MinFlurryHits: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA4)]
    ModifyDistanceForHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    NearDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    PushBackAttackFrame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB0)]
    PushBackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    RoarChanceOnHit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    RoarChanceOnMiss: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    SpawnBroodTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    SpitAnimFrame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC4)]
    SpitFacingRequirement: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    StartDamageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    TurnAnimAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    TurnAnimAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    TurnToFaceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    AttackLight: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xDC)
    ]
    SpitJoint: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x11C)
    ]
    AllowPounce: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15C)]
    AllowPushBackAttack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15D)]
    AllowSpawnBrood: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15E)]
    AllowSpit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15F)]
    AllowSpitAlways: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x160)]
    AOESpitAttack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x161)]


@partial_struct
class cGcCreatureFlockMovementData(Structure):
    BankTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FlockAlign: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    FlockAvoidPredators: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    FlockAvoidPredatorsMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    FlockAvoidPredatorsMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    FlockAvoidPredatorsSpeedBoost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14)
    ]
    FlockAvoidTerrain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    FlockAvoidTerrainMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    FlockAvoidTerrainMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FlockCohere: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FlockFollow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    FlockHysteresis: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    FlockMoveDirectionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    FlockMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    FlockSeperate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    FlockSeperateMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    FlockSeperateMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    FlockTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MaxBank: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    MaxFlapSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    MaxFlockMembers: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    MinFlapSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    MinFlockMembers: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]
    MoveInFacingStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]


@partial_struct
class cGcCreatureParticleEffects(Structure):
    ParticleEffects: Annotated[
        basic.cTkDynamicArray[cGcCreatureParticleEffectData],
        Field(basic.cTkDynamicArray[cGcCreatureParticleEffectData], 0x0),
    ]


@partial_struct
class cGcCreatureFootParticleSingleData(Structure):
    EffectName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxCreatureSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MinCreatureSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]

    class eMoveSpeedEnum(IntEnum):
        Always = 0x0
        Walk = 0x1
        Run = 0x2

    MoveSpeed: Annotated[
        c_enum32[eMoveSpeedEnum], Field(c_enum32[eMoveSpeedEnum], 0x18)
    ]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcCreatureFootParticleData(Structure):
    ParticleData: Annotated[
        basic.cTkDynamicArray[cGcCreatureFootParticleSingleData],
        Field(basic.cTkDynamicArray[cGcCreatureFootParticleSingleData], 0x0),
    ]


@partial_struct
class cGcBehaviourRegisterAttackerData(Structure):
    TargetKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcBehaviourWaitData(Structure):
    Seconds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcBlackboardFloatCompareDecoratorData(Structure):
    CompareTo: Annotated[
        cTkBlackboardDefaultValueFloat, Field(cTkBlackboardDefaultValueFloat, 0x0)
    ]
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    OnFalse: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x28)]
    OnTrue: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x38)]
    CompareBlackboardValueType: Annotated[
        c_enum32[enums.cTkBlackboardComparisonTypeEnum],
        Field(c_enum32[enums.cTkBlackboardComparisonTypeEnum], 0x48),
    ]


@partial_struct
class cGcBlackboardIntCompareDecoratorData(Structure):
    CompareTo: Annotated[
        cTkBlackboardDefaultValueInteger, Field(cTkBlackboardDefaultValueInteger, 0x0)
    ]
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    OnFalse: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x28)]
    OnTrue: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x38)]
    Comparison: Annotated[
        c_enum32[enums.cTkBlackboardComparisonTypeEnum],
        Field(c_enum32[enums.cTkBlackboardComparisonTypeEnum], 0x48),
    ]


@partial_struct
class cGcBlackboardIntModifyData(Structure):
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eModifyIntTypeEnum(IntEnum):
        SetValue = 0x0
        IncrementValue = 0x1

    ModifyIntType: Annotated[
        c_enum32[eModifyIntTypeEnum], Field(c_enum32[eModifyIntTypeEnum], 0x10)
    ]
    Value: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcBlackboardValueDecoratorData(Structure):
    Child: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ClearOnSuccess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcCreatureDestroyInstancesData(Structure):
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    MinInstanceRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    DebugDraw: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcCooldownDecoratorData(Structure):
    CooldownTime: Annotated[
        cTkBlackboardDefaultValueFloat, Field(cTkBlackboardDefaultValueFloat, 0x0)
    ]
    Child: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x18)]
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x28)]


@partial_struct
class cGcBirdData(Structure):
    FlapAccel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FlapSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    FlapSpeedForMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    FlapSpeedForMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    FlapSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    FlapSpeedMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    FlapSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    FlapSpeedMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    FlapTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    CircleAttractor: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x24)
    ]


@partial_struct
class cGcCreatureAlertData(Structure):
    AlertInitiator: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x0)
    ]
    AlertTarget: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x4)
    ]
    FleeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    HearingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    SightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcBehaviourLookData(Structure):
    CanLook: Annotated[
        cTkBlackboardDefaultValueBool, Field(cTkBlackboardDefaultValueBool, 0x0)
    ]
    FocusOnTarget: Annotated[
        cTkBlackboardDefaultValueBool, Field(cTkBlackboardDefaultValueBool, 0x18)
    ]
    RelaxedLook: Annotated[
        cTkBlackboardDefaultValueBool, Field(cTkBlackboardDefaultValueBool, 0x30)
    ]
    LookTargetKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    LookWhenBeyondMaxAngle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]


@partial_struct
class cGcBehaviourMaintainRangeFromTargetData(Structure):
    MaxDist: Annotated[
        cTkBlackboardDefaultValueFloat, Field(cTkBlackboardDefaultValueFloat, 0x0)
    ]
    MinDist: Annotated[
        cTkBlackboardDefaultValueFloat, Field(cTkBlackboardDefaultValueFloat, 0x18)
    ]
    TargetKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    AvoidCreaturesStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    SpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    _2D: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    SucceedWhenInRange: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]


@partial_struct
class cGcBehaviourMoveToTargetData(Structure):
    ArriveDist: Annotated[
        cTkBlackboardDefaultValueFloat, Field(cTkBlackboardDefaultValueFloat, 0x0)
    ]
    TargetKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    AvoidCreaturesStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]

    class eBehaviourMoveSpeedEnum(IntEnum):
        Normal = 0x0
        Fast = 0x1
        Dynamic = 0x2

    BehaviourMoveSpeed: Annotated[
        c_enum32[eBehaviourMoveSpeedEnum],
        Field(c_enum32[eBehaviourMoveSpeedEnum], 0x2C),
    ]
    DynamicMoveSlowdownDistMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    SpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]


@partial_struct
class cGcBehaviourPlayAnimData(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Triggers: Annotated[
        basic.cTkDynamicArray[cGcBehaviourPlayAnimTrigger],
        Field(basic.cTkDynamicArray[cGcBehaviourPlayAnimTrigger], 0x10),
    ]
    BlendInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    BlendOutAt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcBehaviourAppearData(Structure):
    AppearAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcBehaviourApplyDamageData(Structure):
    Offset: Annotated[
        cTkBlackboardDefaultValueVector, Field(cTkBlackboardDefaultValueVector, 0x0)
    ]
    PlayerDamageType: Annotated[
        cTkBlackboardDefaultValueId, Field(cTkBlackboardDefaultValueId, 0x30)
    ]
    Radius: Annotated[
        cTkBlackboardDefaultValueFloat, Field(cTkBlackboardDefaultValueFloat, 0x58)
    ]


@partial_struct
class cGcBehaviourCheckDeathData(Structure):
    pass


@partial_struct
class cGcBehaviourCooldownBeginData(Structure):
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcBehaviourDetailAnimsData(Structure):
    CanDetail: Annotated[
        cTkBlackboardDefaultValueBool, Field(cTkBlackboardDefaultValueBool, 0x0)
    ]


@partial_struct
class cGcBehaviourFaceTargetData(Structure):
    TargetKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ArriveAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcCustomisationShipTrails(Structure):
    Trails: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    LinkedTechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcBehaviourGetTargetData(Structure):
    TargetKey: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcBehaviourIdleData(Structure):
    pass


@partial_struct
class cGcCustomisationThrusterJet(Structure):
    JetMesh: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Trail: Annotated[cTkModelResource, Field(cTkModelResource, 0x20)]
    Effect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    LocatorPrefix: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]


@partial_struct
class cGcCustomisationThrusterEffect(Structure):
    LightColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Tip: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10)]
    Jets: Annotated[
        basic.cTkDynamicArray[cGcCustomisationThrusterJet],
        Field(basic.cTkDynamicArray[cGcCustomisationThrusterJet], 0x30),
    ]
    LinkedSpecialID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    AllowedInSeasonalDefaults: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    HiddenInCustomiser: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]


@partial_struct
class cGcBehaviourIncrementCounter(Structure):
    Key: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcBehaviourLaunchProjectileData(Structure):
    Projectile: Annotated[
        cTkBlackboardDefaultValueId, Field(cTkBlackboardDefaultValueId, 0x0)
    ]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    HorizontalDispersion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    VerticalDispersion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    LaunchJoint: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x34)
    ]


@partial_struct
class cGcCustomisationTextureGroup(Structure):
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    GroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    TextureOptionGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcCustomisationFreighterEngineEffect(Structure):
    GlowColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    EffectResource: Annotated[cTkModelResource, Field(cTkModelResource, 0x10)]
    Tip: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x30)]
    LinkedSpecialID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    LinkedTechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]


@partial_struct
class cGcScareCreaturesAction(Structure):
    FleeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    HearRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcSpawnAction(Structure):
    Event: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcCustomisationCameraData(Structure):
    InteractionCameraIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MaxPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MaxYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MinPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MinYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    InteracttionCameraFocusJoint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x14)
    ]


@partial_struct
class cGcCustomisationColourGroup(Structure):
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    GroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Palette: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x30)]
    HiddenForFirstOption: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]


@partial_struct
class cGcAnimFrameEvent(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FrameStart: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    StartFromEnd: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcBeenShotEvent(Structure):
    DamageThreshold: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    HealthThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]

    class eShotByEnum(IntEnum):
        Player = 0x0
        Anything = 0x1
        PlayerOrRemotePlayer = 0x2

    ShotBy: Annotated[c_enum32[eShotByEnum], Field(c_enum32[eShotByEnum], 0x8)]


@partial_struct
class cGcCreatureNearbyEvent(Structure):
    AlertTable: Annotated[
        basic.cTkDynamicArray[cGcCreatureAlertData],
        Field(basic.cTkDynamicArray[cGcCreatureAlertData], 0x0),
    ]
    Inverse: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcPlayerAttributesEvent(Structure):
    CheckSpaceWalking: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    IsSpaceWalking: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]


@partial_struct
class cGcPlayerNearbyEvent(Structure):
    MustAffordCostID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Angle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AngleMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AngleOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]

    class eDistanceCheckTypeEnum(IntEnum):
        Radius = 0x0
        BoundingBox = 0x1

    DistanceCheckType: Annotated[
        c_enum32[eDistanceCheckTypeEnum], Field(c_enum32[eDistanceCheckTypeEnum], 0x20)
    ]

    class eRequirePlayerActionEnum(IntEnum):
        None_ = 0x0
        Fire = 0x1
        InShip = 0x2
        OnFoot = 0x3
        OnFootOutside = 0x4
        Upload = 0x5

    RequirePlayerAction: Annotated[
        c_enum32[eRequirePlayerActionEnum],
        Field(c_enum32[eRequirePlayerActionEnum], 0x24),
    ]
    AnglePlayerRelative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    AngleReflected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]
    IncludeAllPhysics: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A)]
    IncludeMobileNPCs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2B)]
    Inverse: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    OnlyForLocalPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    TeleporterCountsAsPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]


@partial_struct
class cGcStateTimeEvent(Structure):
    RandomSeconds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Seconds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    UseMissionClock: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcStormEvent(Structure):
    InStorm: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcCustomisationBackpackData(Structure):
    ActiveJetOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    NodeName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10)]


@partial_struct
class cGcCustomisationBannerImageData(Structure):
    TipText: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    BannerImage: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x20)]
    LinkedSpecialID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x38)]
    WideImage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]


@partial_struct
class cGcPlayAnimAction(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcPlayAudioAction(Structure):
    OcclusionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Sound: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x4)]
    UseOcclusion: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84)]


@partial_struct
class cGcPowerStateAction(Structure):
    SetConnectionEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    SetRateEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]


@partial_struct
class cGcResetSimpleInteractionAction(Structure):
    pass


@partial_struct
class cGcCustomisationBobbleHead(Structure):
    BobbleHead: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    LinkedTechId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcRewardAction(Structure):
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcCustomisationBoneScales(Structure):
    GroupTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Positions: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x20),
    ]
    ScaleBoneName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcMultitoolPoolData(Structure):
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MaxDraw: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MinDraw: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    PoolProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    PoolType: Annotated[
        c_enum32[enums.cGcMultitoolPoolType],
        Field(c_enum32[enums.cGcMultitoolPoolType], 0x1C),
    ]


@partial_struct
class cGcFireSimpleInteractionAction(Structure):
    pass


@partial_struct
class cGcFrigateInteractionAction(Structure):
    CommunicatorDialog: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]

    class eActionTypeEnum(IntEnum):
        Repair = 0x0
        UpdateDamagedComponents = 0x1
        CargoPhoneCall = 0x2

    ActionType: Annotated[
        c_enum32[eActionTypeEnum], Field(c_enum32[eActionTypeEnum], 0x20)
    ]


@partial_struct
class cGcHarvestPlantAction(Structure):
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcHazardAction(Structure):
    Hazard: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x0),
    ]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    RadiusBasedStrength: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcLodAction(Structure):
    LodOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcNodeActivationAction(Structure):
    SceneToAdd: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]

    class eNodeActiveStateEnum(IntEnum):
        Activate = 0x0
        Deactivate = 0x1
        Toggle = 0x2
        Add = 0x3
        Remove = 0x4
        RemoveChildren = 0x5

    NodeActiveState: Annotated[
        c_enum32[eNodeActiveStateEnum], Field(c_enum32[eNodeActiveStateEnum], 0x10)
    ]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x14)]
    AffectModels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]
    IncludeChildPhysics: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x95)]
    IncludePhysics: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x96)]
    NotifyNPC: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x97)]
    RestartEmitters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x98)]
    UseLocalNode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x99)]
    UseMasterModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9A)]


@partial_struct
class cGcSpaceStormData(Structure):
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    StormId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcPainAction(Structure):
    Damage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    RetriggerTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AffectsPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    RadiusBasedDamage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]


@partial_struct
class cGcLootProbability(Structure):
    LootModel: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcBaseBuildingSettingsAction(Structure):
    MaxAffectedDetail: Annotated[
        c_enum32[enums.cTkGraphicsDetailTypes],
        Field(c_enum32[enums.cTkGraphicsDetailTypes], 0x0),
    ]

    class eUseCorePartsOnlyEnum(IntEnum):
        False_ = 0x0
        True_ = 0x1
        DontCare = 0x2

    UseCorePartsOnly: Annotated[
        c_enum32[eUseCorePartsOnlyEnum], Field(c_enum32[eUseCorePartsOnlyEnum], 0x4)
    ]


@partial_struct
class cGcMetaBallComponentData(Structure):
    MaxSize: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    MinSize: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Root: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x34)]


@partial_struct
class cGcCameraShakeAction(Structure):
    Shake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FalloffMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    FalloffMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcDestroyAction(Structure):
    PlayEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DestroyAll: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    UseDestructables: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]


@partial_struct
class cGcColourisePalette(Structure):
    PrimaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    QuaternaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    SecondaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    TernaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]


@partial_struct
class cGcInventoryTechProbability(Structure):
    Tech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eDesiredTechProbabilityEnum(IntEnum):
        Never = 0x0
        Rare = 0x1
        Common = 0x2
        Always = 0x3

    DesiredTechProbability: Annotated[
        c_enum32[eDesiredTechProbabilityEnum],
        Field(c_enum32[eDesiredTechProbabilityEnum], 0x10),
    ]


@partial_struct
class cGcHeroLightData(Structure):
    DayColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    NightColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    DayIntensityMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FOVMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    NightIntensityMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    LightName: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x2C)
    ]


@partial_struct
class cGcActionTrigger(Structure):
    Action: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    Event: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x10)]


@partial_struct
class cGcActionTriggerState(Structure):
    StateID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Triggers: Annotated[
        basic.cTkDynamicArray[cGcActionTrigger],
        Field(basic.cTkDynamicArray[cGcActionTrigger], 0x10),
    ]


@partial_struct
class cGcBaseDefenceTrigger(Structure):
    LaserEffectId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PerceptionId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ActiveWhenIdle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    ActiveWhenSearching: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    ActiveWhenTargetAcquired: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]


@partial_struct
class cGcCameraShakeTriggerData(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FrameStart: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Shake: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x14)]


@partial_struct
class cGcChainComponentData(Structure):
    StartBone: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]


@partial_struct
class cGcEasyRagdollSetUpBodyDimensions(Structure):
    Centre: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Size: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Joint: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]


@partial_struct
class cGcEasyRagdollSetUpData(Structure):
    ChainEnds: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x0),
    ]
    ExcludeJoints: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x10),
    ]
    ForceBodyDimensions: Annotated[
        basic.cTkDynamicArray[cGcEasyRagdollSetUpBodyDimensions],
        Field(basic.cTkDynamicArray[cGcEasyRagdollSetUpBodyDimensions], 0x20),
    ]


@partial_struct
class cGcMiningComponentData(Structure):
    Range: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcOutpostLSystemPair(Structure):
    LSystems: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Locator: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x90)]


@partial_struct
class cGcInteractionDof(Structure):
    FarFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FarPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    NearPlaneAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    NearPlaneMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    IsEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    UseGlobals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]


@partial_struct
class cGcCombatEffectsProperties(Structure):
    DamageMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DurationMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    IgnoreFromOtherPlayers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    IgnoreFromSelf: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]
    IsAffected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]


@partial_struct
class cGcCharacterJetpackEffect(Structure):
    Effect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    NodeName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10)
    ]


@partial_struct
class cGcStatsBonus(Structure):
    Bonus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Stat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x8)
    ]


@partial_struct
class cGcCharacterLookAtData(Structure):
    CreatureLookAtRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    InteractionLookAtRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    LookAtMaxPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    LookAtMaxYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    LookAtRunGlanceMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    LookAtRunGlanceMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    LookAtRunMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    LookAtRunMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    LookAtTargetGlanceMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    LookAtTargetGlanceMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    LookAtTargetWaitMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    LookAtTargetWaitMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    SpaceshipLookAtRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]


@partial_struct
class cGcStatIconTable(Structure):
    StatIcons: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]


@partial_struct
class cGcPlayerControlInput(Structure):
    Inputs: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    InterceptInputBlackList: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]], 0x10),
    ]
    InterceptInputWhitelist: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]], 0x20),
    ]
    InterceptAllInputs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcInventoryValueData(Structure):
    BaseCostPerSlot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BaseMaxValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    BaseMinValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    ExponentialValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    SlotExponentialValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SlotsPerLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    ValueToCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcPlayerControlModeEntry(Structure):
    ControlModeResource: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcValueData(Structure):
    pass


@partial_struct
class cGcPlayerControlState(Structure):
    OverrideInput: Annotated[cGcPlayerControlInput, Field(cGcPlayerControlInput, 0x0)]
    Data: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x38),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    OverrideCamera: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    StickToGround: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x68)]


@partial_struct
class cGcExactResource(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    GenerationSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x10)]


@partial_struct
class cGcRewardDestructEntry(Structure):
    HealthFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcRewardDestructRarities(Structure):
    Rarities: Annotated[cGcRewardDestructEntry, Field(cGcRewardDestructEntry, 0x0)]


@partial_struct
class cGcCharacterMove(Structure):
    Input: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eModeEnum(IntEnum):
        SetVelocity = 0x0
        ApplyForce = 0x1

    Mode: Annotated[c_enum32[eModeEnum], Field(c_enum32[eModeEnum], 0x10)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcRewardDestructTable(Structure):
    Categories: Annotated[
        cGcRewardDestructRarities, Field(cGcRewardDestructRarities, 0x0)
    ]


@partial_struct
class cGcCharacterRotate(Structure):
    Input: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Damping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    RotateAxis: Annotated[
        c_enum32[enums.cGcPrimaryAxis], Field(c_enum32[enums.cGcPrimaryAxis], 0x14)
    ]
    RotateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcRewardTableEntitlementItem(Structure):
    EntitlementId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Reward: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x10)]
    RewardId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcCharacterAlternateAnimation(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Replacement: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcUnlockableSeasonReward(Structure):
    SpecificMilestoneLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    SeasonIds: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x30),
    ]
    StageIds: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x40),
    ]
    MustBeUnlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    SwitchExclusive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    UniqueInventoryItem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]


@partial_struct
class cGcItemFilterStageDataAcceptAll(Structure):
    pass


@partial_struct
class cGcItemFilterStageDataMatchID(Structure):
    DisabledMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ValidIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    MatchType: Annotated[
        c_enum32[enums.cGcItemFilterMatchIDType],
        Field(c_enum32[enums.cGcItemFilterMatchIDType], 0x30),
    ]


@partial_struct
class cGcItemFilterStageDataNegation(Structure):
    Child: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]


@partial_struct
class cGcItemFilterStageDataStageGroup(Structure):
    Children: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]

    class eFilterStageGroupOperatorEnum(IntEnum):
        AND = 0x0
        OR = 0x1

    FilterStageGroupOperator: Annotated[
        c_enum32[eFilterStageGroupOperatorEnum],
        Field(c_enum32[eFilterStageGroupOperatorEnum], 0x10),
    ]


@partial_struct
class cGcUnlockableTwitchReward(Structure):
    LinkedGroupId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ProductId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    TwitchId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcItemFilterStageDataTechPack(Structure):
    DisabledMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]


@partial_struct
class cGcWeaponTerminalInteractionData(Structure):
    RespawnPeriodInSeconds: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    UseSentinelWeapon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcWeaponInventoryMaxUpgradeCapacity(Structure):
    MaxInventoryCapacity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcWeightedFilename(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcUnlockableItemTreeNode(Structure):
    Children: Annotated[
        "basic.cTkDynamicArray[cGcUnlockableItemTreeNode]",
        Field("basic.cTkDynamicArray[cGcUnlockableItemTreeNode]", 0x0),
    ]
    Unlockable: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcCustomiseShipInteractionData(Structure):
    IsSettlementPad: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcItemFilterData(Structure):
    Root: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]


@partial_struct
class cGcItemFilterDataTableEntry(Structure):
    Filter: Annotated[cGcItemFilterData, Field(cGcItemFilterData, 0x0)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcUnlockablePlatformReward(Structure):
    ProductId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RewardId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcUnlockableItemTree(Structure):
    Root: Annotated[cGcUnlockableItemTreeNode, Field(cGcUnlockableItemTreeNode, 0x0)]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    CostTypeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]


@partial_struct
class cGcTradeData(Structure):
    AlwaysConsideredBarterProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    AlwaysPresentProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]
    AlwaysPresentSubstances: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    OptionalProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    OptionalSubstances: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x40),
    ]
    MaxAmountOfProductAvailable: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    MaxAmountOfSubstanceAvailable: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x60)
    ]
    MaxExtraSystemProducts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    MinAmountOfProductAvailable: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x80)]
    MinAmountOfSubstanceAvailable: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x90)
    ]
    MinExtraSystemProducts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    TradeProductsPriceImprovements: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB0)
    ]
    BarterItemPreferenceFloor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    BarterPriceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    BuyPriceDecreaseGreenThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC8)
    ]
    BuyPriceIncreaseRedThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    MaxItemsForSale: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD0)]
    MinItemsForSale: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD4)]
    PercentageOfItemsAreProducts: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    SellPriceDecreaseRedThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDC)
    ]
    SellPriceIncreaseGreenThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE0)
    ]
    BarterAcceptanceCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xE4)
    ]
    ShowSeasonRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE5)]
    UseBarterForBuy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE6)]


@partial_struct
class cGcTechList(Structure):
    AvailableTech: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcTradeSettings(Structure):
    BiggsBarterShop: Annotated[cGcTradeData, Field(cGcTradeData, 0x0)]
    BiggsBasicShop: Annotated[cGcTradeData, Field(cGcTradeData, 0xE8)]
    BoneShop: Annotated[cGcTradeData, Field(cGcTradeData, 0x1D0)]
    BuilderShop: Annotated[cGcTradeData, Field(cGcTradeData, 0x2B8)]
    ExpShip: Annotated[cGcTradeData, Field(cGcTradeData, 0x3A0)]
    IllegalProds: Annotated[cGcTradeData, Field(cGcTradeData, 0x488)]
    LoneExp: Annotated[cGcTradeData, Field(cGcTradeData, 0x570)]
    LoneTra: Annotated[cGcTradeData, Field(cGcTradeData, 0x658)]
    LoneWar: Annotated[cGcTradeData, Field(cGcTradeData, 0x740)]
    MapShop: Annotated[cGcTradeData, Field(cGcTradeData, 0x828)]
    NexusTechSpecialist: Annotated[cGcTradeData, Field(cGcTradeData, 0x910)]
    PirateTech: Annotated[cGcTradeData, Field(cGcTradeData, 0x9F8)]
    PirateVisitor: Annotated[cGcTradeData, Field(cGcTradeData, 0xAE0)]
    Scrap: Annotated[cGcTradeData, Field(cGcTradeData, 0xBC8)]
    SeasonRewardsShop: Annotated[cGcTradeData, Field(cGcTradeData, 0xCB0)]
    Ship: Annotated[cGcTradeData, Field(cGcTradeData, 0xD98)]
    ShipTechSpecialist: Annotated[cGcTradeData, Field(cGcTradeData, 0xE80)]
    Shop: Annotated[cGcTradeData, Field(cGcTradeData, 0xF68)]
    SmugglerStation: Annotated[cGcTradeData, Field(cGcTradeData, 0x1050)]
    SpaceStation: Annotated[cGcTradeData, Field(cGcTradeData, 0x1138)]
    SuitTechSpecialist: Annotated[cGcTradeData, Field(cGcTradeData, 0x1220)]
    TechShop: Annotated[cGcTradeData, Field(cGcTradeData, 0x1308)]
    TraShip: Annotated[cGcTradeData, Field(cGcTradeData, 0x13F0)]
    VehicleTechSpecialist: Annotated[cGcTradeData, Field(cGcTradeData, 0x14D8)]
    WarShip: Annotated[cGcTradeData, Field(cGcTradeData, 0x15C0)]
    WeapTechSpecialist: Annotated[cGcTradeData, Field(cGcTradeData, 0x16A8)]


@partial_struct
class cGcTradingCategoryData(Structure):
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    ProductMultiplierChangePer100: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18)
    ]
    SubstanceMultiplierChangePer100: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x20)]


@partial_struct
class cGcTradingClassData(Structure):
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    MaxBuyingPriceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MaxBuyingPriceMultiplierSurge: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C)
    ]
    MaxSellingPriceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MinBuyingPriceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MinBuyingPriceMultiplierSurge: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x28)
    ]
    MinSellingPriceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    Needs: Annotated[
        c_enum32[enums.cGcTradeCategory], Field(c_enum32[enums.cGcTradeCategory], 0x30)
    ]
    Sells: Annotated[
        c_enum32[enums.cGcTradeCategory], Field(c_enum32[enums.cGcTradeCategory], 0x34)
    ]


@partial_struct
class cGcSubstanceSecondary(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AmountMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AmountMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Chance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcSubstanceSecondaryBiome(Structure):
    SecondarySubstanceByBiome: Annotated[
        cGcSubstanceSecondary, Field(cGcSubstanceSecondary, 0x0)
    ]


@partial_struct
class cGcSubstanceSecondaryLookup(Structure):
    PrimaryID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SecondaryChances: Annotated[
        basic.cTkDynamicArray[cGcSubstanceSecondary],
        Field(basic.cTkDynamicArray[cGcSubstanceSecondary], 0x10),
    ]


@partial_struct
class cGcSettlementStatStrengthRanges(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcSettlementStatStrengthData(Structure):
    PerkStatStrengthValues: Annotated[
        cGcSettlementStatStrengthRanges, Field(cGcSettlementStatStrengthRanges, 0x0)
    ]


@partial_struct
class cGcShipInventoryMaxUpgradeCapacity(Structure):
    MaxCargoInventoryCapacity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MaxInventoryCapacity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MaxTechInventoryCapacity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcTechBoxData(Structure):
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    InstallTechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x28)]
    IsAlien: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]


@partial_struct
class cGcSettlementJudgementPerkOption(Structure):
    Perk: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PerkChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcStatsEntry(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    BaseTechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    RangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    RangeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Type: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x28)
    ]
    LessIsBetter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]


@partial_struct
class cGcStatsGroup(Structure):
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    StatIds: Annotated[
        basic.cTkDynamicArray[cGcStatsEntry],
        Field(basic.cTkDynamicArray[cGcStatsEntry], 0x28),
    ]


@partial_struct
class cGcStats(Structure):
    Stats: Annotated[
        basic.cTkDynamicArray[cGcStatsGroup],
        Field(basic.cTkDynamicArray[cGcStatsGroup], 0x0),
    ]


@partial_struct
class cGcRewardTriggerSettlementJudgement(Structure):
    pass


@partial_struct
class cGcRewardTriggerStorm(Structure):
    Duration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcRewardUnlockSeasonReward(Structure):
    EncryptedText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    MarkAsClaimedInShop: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    UniqueInventoryItem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]
    UseSpecialFormatting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x33)]


@partial_struct
class cGcRewardUnlockTitle(Structure):
    TitleID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    NoMusic: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    ShowEvenIfAlreadyUnlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]


@partial_struct
class cGcSettlementGiftDetails(Structure):
    LocID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcRewardUpgradeWeaponClass(Structure):
    MatchClassToCommunityTier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]
    SilentlyMoveOnAtMaxClass: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2)]


@partial_struct
class cGcRewardUploadBase(Structure):
    pass


@partial_struct
class cGcRewardWantedLevel(Structure):
    Message: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcRewardWeapon(Structure):
    PoolTypeProbabilities: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ItemLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    SetInteractionStateOnSuccess: Annotated[
        c_enum32[enums.cGcInteractionMissionState],
        Field(c_enum32[enums.cGcInteractionMissionState], 0x18),
    ]
    ForceFixed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]
    MarkInteractionComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D)]
    OnlyUseNextInteractionOnSuccess: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1E)
    ]
    ReinteractOnDecline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1F)]
    RequeueInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    UsePlanetSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]


@partial_struct
class cGcRewardWeaponSlot(Structure):
    Cost: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    NumTokens: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    AwardCostAndOpenWindow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRewardTechRecipe(Structure):
    RewardGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Category: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0x10),
    ]


@partial_struct
class cGcRewardWikiTopic(Structure):
    Topic: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    CentreMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcRewardTimeWarp(Structure):
    pass


@partial_struct
class cGcRewardTraderFlyby(Structure):
    ExperienceSpawnIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcRewardTrigger(Structure):
    Trigger: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    UseMasterModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardTriggerMaintenance(Structure):
    pass


@partial_struct
class cGcRewardStartPurchase(Structure):
    pass


@partial_struct
class cGcRewardStartSettlementExpedition(Structure):
    pass


@partial_struct
class cGcRewardStatCompareAndSet(Structure):
    CompareAndSetStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CoreStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcRewardStationTeleportEndpoint(Structure):
    pass


@partial_struct
class cGcRewardSwapMultiTool(Structure):
    pass


@partial_struct
class cGcRewardSystemSpecificProductFromList(Structure):
    ProductList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    ForceSpecialMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcRewardTableItem(Structure):
    LabelID: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Reward: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x10)]
    PercentageChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcRewardSpecificTechFromList(Structure):
    TechList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]

    class eTechListRewardOrderEnum(IntEnum):
        OneRandom = 0x0
        InOrder = 0x1
        TryAllRandom = 0x2

    TechListRewardOrder: Annotated[
        c_enum32[eTechListRewardOrderEnum],
        Field(c_enum32[eTechListRewardOrderEnum], 0x10),
    ]
    FailIfAllKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRewardShipMessage(Structure):
    ShipMessage: Annotated[
        c_enum32[enums.cGcShipMessage], Field(c_enum32[enums.cGcShipMessage], 0x0)
    ]


@partial_struct
class cGcRewardShipSlot(Structure):
    Cost: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    NumTokens: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    AwardCostAndOpenWindow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    FallbackOpenWindowIfBlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]
    IsAlien: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16)]


@partial_struct
class cGcRewardShowBlackHoles(Structure):
    pass


@partial_struct
class cGcRewardSpecialFromList(Structure):
    TextFormat: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    FallbackList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    PriorityList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]


@partial_struct
class cGcRewardSpecificCommunityTierProduct(Structure):
    ProductList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    RequiresTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    ForceSpecialMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcRewardSpecificSpecial(Structure):
    Message: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    MilestoneRewardOverrideText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    FailIfAlreadyKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    HideInSeasonRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    ShowSpecialProductPopup: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]
    UseSpecialFormatting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x53)]


@partial_struct
class cGcRewardSpecificSubstance(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionSubstanceEnum],
        Field(c_enum32[enums.cGcDefaultMissionSubstanceEnum], 0x18),
    ]
    DisableMultiplier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]
    RewardAsBlobs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1E)]
    UseFuelMultiplier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1F)]
    UseMissionBoardDifficultyScale: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcRewardSpecificTech(Structure):
    TechId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AutoPin: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    HideInSeasonRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12)]


@partial_struct
class cGcRewardSpecificProduct(Structure):
    SeasonRewardListFormat: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RequiresTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x48),
    ]
    ForceSpecialMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]
    HideAmountInMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]
    HideInSeasonRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4F)]


@partial_struct
class cGcRewardSettlementProgress(Structure):
    BuildingType: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x0),
    ]
    UseInteractionBuildingType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcRewardSpecificProductFromList(Structure):
    IncrementGlobalStatOnSuccess: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ProductList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    ForceSpecialMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcRewardSpecificProductRecipe(Structure):
    SeasonRewardFormat: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    HideInSeasonRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]


@partial_struct
class cGcRewardSpecificProductRecipeFromList(Structure):
    ProductList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]

    class eProductListRewardOrderEnum(IntEnum):
        OneRandom = 0x0
        InOrder = 0x1
        TryAllRandom = 0x2
        TryUnknownRandom = 0x3

    ProductListRewardOrder: Annotated[
        c_enum32[eProductListRewardOrderEnum],
        Field(c_enum32[eProductListRewardOrderEnum], 0x10),
    ]
    FailIfAllKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRewardSetWeaponSuppressed(Structure):
    WeaponSuppressed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardShield(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    ShowOSDOnFail: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    ShowOSDOnSuccess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]


@partial_struct
class cGcRewardSpecificSeasonalSubstance(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    ChanceToUse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    SeasonNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]


@partial_struct
class cGcRewardShipAssistance(Structure):
    class eAssistanceTypeEnum(IntEnum):
        Police = 0x0
        Wingmen = 0x1

    AssistanceType: Annotated[
        c_enum32[eAssistanceTypeEnum], Field(c_enum32[eAssistanceTypeEnum], 0x0)
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcRewardSalvageMultitool(Structure):
    pass


@partial_struct
class cGcRewardSetAbandonedFreighterMissionState(Structure):
    class eAbandonedFreighterMissionStateEnum(IntEnum):
        EndRoomComplete = 0x0
        CrewManifestRead = 0x1
        CaptainsLogRead = 0x2
        HazardOn = 0x3
        SlowWalkOn = 0x4
        OpenDoors = 0x5

    AbandonedFreighterMissionState: Annotated[
        c_enum32[eAbandonedFreighterMissionStateEnum],
        Field(c_enum32[eAbandonedFreighterMissionStateEnum], 0x0),
    ]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcRewardSetAtlasMissionActive(Structure):
    pass


@partial_struct
class cGcRewardSalvageShip(Structure):
    SpecificCustomisationSlotIDs: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RewardShipParts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB0)]


@partial_struct
class cGcRewardSetCurrentMission(Structure):
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Seeded: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]


@partial_struct
class cGcRewardScan(Structure):
    ScanDataId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcRewardSetFirstPurpleSystemUA(Structure):
    pass


@partial_struct
class cGcRewardScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    FailureOSD: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]

    class eScanEventTableEnum(IntEnum):
        Space = 0x0
        Planet = 0x1
        Missions = 0x2
        Tutorial = 0x3
        MissionsCreative = 0x4
        NPCPlanetSite = 0x5

    ScanEventTable: Annotated[
        c_enum32[eScanEventTableEnum], Field(c_enum32[eScanEventTableEnum], 0x40)
    ]
    StartDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    DoAerialScan: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    ForceSilentFailure: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]
    UseMissionIDSeedForEvent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A)]
    UseStartDelayWhenNoAerialScan: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B)]


@partial_struct
class cGcRewardScanEventNearestBuilding(Structure):
    DoAerialScan: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    IncludeVisited: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]


@partial_struct
class cGcRewardSetInteractionMissionState(Structure):
    MissionState: Annotated[
        c_enum32[enums.cGcInteractionMissionState],
        Field(c_enum32[enums.cGcInteractionMissionState], 0x0),
    ]
    SetForInteractionClassInMyBuilding: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x4),
    ]
    SetForThisInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcRewardSetInteractionSeenBitmask(Structure):
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    InteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x10),
    ]
    OverrideIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcRewardSetMissionStat(Structure):
    ValueToAdd: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    ValueToSet: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcRewardSetNexusExitWarpTargetToFireteamMemberUA(Structure):
    FireteamMemberIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcRewardSettlementCustomJudgement(Structure):
    CustomJudgement: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CanOverrideNonCustomJudgement: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    DisplaySettlementJudgementAlert: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x11)
    ]


@partial_struct
class cGcRewardSettlementJobGift(Structure):
    pass


@partial_struct
class cGcRewardRefreshHazProt(Structure):
    Amount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    SpecificHazard: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x4),
    ]
    SetNotAdd: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]


@partial_struct
class cGcRewardSettlementParty(Structure):
    OSD: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    FireworksDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FireworksFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcRewardReinitialise(Structure):
    OverrideMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DoIntroNextWarp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcRewardRemoveSettlementJobPerk(Structure):
    pass


@partial_struct
class cGcRewardRepairTech(Structure):
    Category: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0x0),
    ]


@partial_struct
class cGcRewardSecondarySubstance(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AmountFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    RewardAsBlobs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRewardRequirementsForRecipe(Structure):
    RecipeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RewardInCreative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardSendChatMessage(Structure):
    CustomText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    StatusMessageId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcRewardOpenPage(Structure):
    class ePageToOpenEnum(IntEnum):
        FreighterShipTransfer = 0x0
        DisplayPortalUa = 0x1
        ExpeditionSelect = 0x2
        TraderInventory = 0x3
        ExpeditionDetails = 0x4
        ExpeditionDebrief = 0x5
        BuildingPartsShop = 0x6
        ExocraftShop = 0x7
        NexusTechShop = 0x8
        ScrapDealerShop = 0x9
        BuyShip = 0xA
        SettlementsOverview = 0xB
        SettlementManagement = 0xC
        SettlerNPCDetails = 0xD
        SquadronManagement = 0xE
        SquadronRecruitment = 0xF
        FleetManagement = 0x10
        WeaponCustomisation = 0x11
        FoodUnit = 0x12
        CookTrade = 0x13
        ArchiveManagementShip = 0x14
        BoneShop = 0x15
        BiggsBarterShop = 0x16
        BiggsBasicShop = 0x17

    PageToOpen: Annotated[
        c_enum32[ePageToOpenEnum], Field(c_enum32[ePageToOpenEnum], 0x0)
    ]
    ReinteractWhenComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcRewardProceduralProductFromBiome(Structure):
    pass


@partial_struct
class cGcRewardOpenUnlockTree(Structure):
    PageIndexOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    TreeToOpen: Annotated[
        c_enum32[enums.cGcUnlockableItemTreeGroups],
        Field(c_enum32[enums.cGcUnlockableItemTreeGroups], 0x4),
    ]


@partial_struct
class cGcRewardProcTechProduct(Structure):
    Group: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    WeightedChanceEpic: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    WeightedChanceLegendary: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    WeightedChanceNormal: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    WeightedChanceRare: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]
    AllowAnyGroup: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    ForceQualityRelevant: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    ForceRelevant: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]


@partial_struct
class cGcRewardPurpleSystems(Structure):
    Allow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardRechargeTech(Structure):
    TechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardOverridePulseEncounterChance(Structure):
    Chance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcRewardPetAction(Structure):
    EffectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    PlayerEmoteID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    SpecialHarvestID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    PetAction: Annotated[
        c_enum32[enums.cGcCreaturePetRewardActions],
        Field(c_enum32[enums.cGcCreaturePetRewardActions], 0x30),
    ]
    SpecialHarvestMul: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]


@partial_struct
class cGcRewardMultiSpecificProductRecipes(Structure):
    SetName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    DisplayProductId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ProductIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcRewardPetEgg(Structure):
    pass


@partial_struct
class cGcRewardMultiSpecificProducts(Structure):
    SetName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    ProductIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    OnlyGiveThisManyFromTheListAtRandom: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x30)
    ]
    UseListPopup: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]


@partial_struct
class cGcRewardPetEggHatch(Structure):
    EggIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcRewardPirateAttack(Structure):
    AttackDefinition: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    NumSquads: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Instant: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRewardMultiSpecificTechRecipes(Structure):
    SetName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    DisplayTechId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    TechIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcRewardPirateProbeSignal(Structure):
    Attack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardNetworkPlayer(Structure):
    RewardWord: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x0)
    ]


@partial_struct
class cGcRewardPlanetSubstance(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    DisableMultiplier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    RewardAsBlobs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]
    UseFuelMultiplier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]


@partial_struct
class cGcRewardNexus(Structure):
    Allow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardPoliceScanSignal(Structure):
    Attack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardOpenFreeFreighter(Structure):
    NextInteractionIfBought: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    NextInteractionIfNotBought: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    ReinteractWhenBought: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcRewardMission(Structure):
    AlreadyActiveFailureMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    FailRewardIfMissionActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    Restart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    SetAsSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]


@partial_struct
class cGcRewardMissionMessage(Structure):
    MessageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BroadcastInMultiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardMissionMessageSeeded(Structure):
    MessageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SpecificMissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BroadcastInMultiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    BroadcastToActiveMultiplayerMission: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21)
    ]


@partial_struct
class cGcRewardMissionMessageToMatchingSeeds(Structure):
    MessageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BroadcastInMultiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardMissionOverride(Structure):
    ForceLocalMissionSelection: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcRewardMissionSeeded(Structure):
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MissionNoGroundCombat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    MissionNoSpaceCombat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ForceUseConversationSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    InheritActiveMultiplayerMissionSeed: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x31)
    ]
    SelectMissionAsLocalMissionBoard: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x32)
    ]


@partial_struct
class cGcRewardHazard(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcRewardHealth(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    SilentUnlessShieldAtMax: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcRewardIncrementStat(Structure):
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcRewardForgetSpecificTechRecipe(Structure):
    TechList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcRewardInstallTech(Structure):
    ReplaceExistingTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TechId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]

    class eInventoryToInstallInEnum(IntEnum):
        Personal = 0x0
        PersonalTech = 0x1
        Ship = 0x2
        ShipTech = 0x3
        Freighter = 0x4
        Vehicle = 0x5
        Weapon = 0x6

    InventoryToInstallIn: Annotated[
        c_enum32[eInventoryToInstallInEnum],
        Field(c_enum32[eInventoryToInstallInEnum], 0x20),
    ]
    SeedOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    InstallBroken: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]


@partial_struct
class cGcRewardFreeStamina(Structure):
    Duration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcRewardInteractionSketchBroadcast(Structure):
    BroadcastValue: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcRewardFreighterBaseReset(Structure):
    pass


@partial_struct
class cGcRewardInterventionResponse(Structure):
    InterveneWithMissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BasePercentOfMissionChanceSuccess: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x10)
    ]

    class eResponseTypeEnum(IntEnum):
        DontIntervene = 0x0
        InterveneWithMission = 0x1
        MissionSuccess = 0x2
        MissionFailure = 0x3
        MissionAvoid = 0x4
        MissionChance = 0x5

    ResponseType: Annotated[
        c_enum32[eResponseTypeEnum], Field(c_enum32[eResponseTypeEnum], 0x14)
    ]


@partial_struct
class cGcRewardFreighterMegaWarp(Structure):
    pass


@partial_struct
class cGcRewardInventorySlots(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcRewardFreighterSlot(Structure):
    Cost: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcRewardJetpackBoost(Structure):
    Duration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ForwardBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    IgnitionBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    UpBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cGcRewardDamageTech(Structure):
    TechToDamage_optional: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Category: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0x10),
    ]
    ShowDamageMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRewardDeactivateFiends(Structure):
    pass


@partial_struct
class cGcRewardEnergy(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcRewardExchangeProduct(Structure):
    IDToGive: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    IDToTake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AmountToGiveMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountToGiveMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    AmountToTakeMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    ForceSpecialMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    HideNewProduct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]


@partial_struct
class cGcRewardExitEditShipInteraction(Structure):
    pass


@partial_struct
class cGcRewardFactionStanding(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Faction: Annotated[
        c_enum32[enums.cGcMissionFaction], Field(c_enum32[enums.cGcMissionFaction], 0x8)
    ]
    SetToMinBeforeAdd: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcRewardFillInventoryWithBrokenSlots(Structure):
    CustomTechCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    CustomTechOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    FractionOfInventoryToBreak: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]

    class eInventoryToBreakEnum(IntEnum):
        Ship = 0x0
        ShipTech = 0x1
        Freighter = 0x2
        FreighterTech = 0x3
        Vehicle = 0x4
        VehicleTech = 0x5
        Weapon = 0x6

    InventoryToBreak: Annotated[
        c_enum32[eInventoryToBreakEnum], Field(c_enum32[eInventoryToBreakEnum], 0xC)
    ]
    CustomTechFormat: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10)
    ]


@partial_struct
class cGcRewardFishRelease(Structure):
    Rarity: Annotated[
        c_enum32[enums.cGcItemQuality], Field(c_enum32[enums.cGcItemQuality], 0x0)
    ]


@partial_struct
class cGcRewardForceDiscoverSystem(Structure):
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardForceOpenGalaxyMap(Structure):
    BlockWarp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardForgetSpecificProductRecipe(Structure):
    ProductList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcRewardDisableSentinels(Structure):
    OSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    WantedBarMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    Duration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]


@partial_struct
class cGcRewardDiscoverRune(Structure):
    AllRunes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcRewardCrashSiteFly(Structure):
    NPCScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcRewardDisguisedProduct(Structure):
    AwardDisplayIDDuringMission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DisplayAs: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x38),
    ]
    UseDisplayIDWhenInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]


@partial_struct
class cGcRewardCrashSiteRepair(Structure):
    pass


@partial_struct
class cGcRewardDisplayTechWindow(Structure):
    TechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Damaged: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    FullBox: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    NeedsInstall: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12)]


@partial_struct
class cGcRewardCustomExpeditionLogEntry(Structure):
    LocID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    RewardID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    FromIntervention: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    WhaleEvent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]


@partial_struct
class cGcRewardDummyLocID(Structure):
    LocID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]


@partial_struct
class cGcRewardCustomPlayerControl(Structure):
    RequestedMode: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcRewardEnableInteractionClass(Structure):
    pass


@partial_struct
class cGcRewardEnableSentinels(Structure):
    pass


@partial_struct
class cGcRewardEndFrigateFlyby(Structure):
    pass


@partial_struct
class cGcRewardEndScanEvent(Structure):
    EventID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]


@partial_struct
class cGcRewardBuildersKnown(Structure):
    pass


@partial_struct
class cGcRewardCargo(Structure):
    pass


@partial_struct
class cGcRewardCleanUpPulseEncounter(Structure):
    pass


@partial_struct
class cGcRewardClosePortal(Structure):
    pass


@partial_struct
class cGcRepShopDonation(Structure):
    AltIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DonationValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    MaxDonations: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    ValidProcProdCategories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcRewardAbortTakeoff(Structure):
    pass


@partial_struct
class cGcRewardActivateEncounterSentinels(Structure):
    EncounterComponentScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    EncounterOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcRealitySubstanceCraftingMix(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Ratio: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcRewardCompleteMission(Structure):
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcRewardAdvancePortalState(Structure):
    PortalScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]


@partial_struct
class cGcRewardCompleteMultiMission(Structure):
    Missions: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcRewardAssessCookedProduct(Structure):
    AmountAverage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountBad: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    AmountBest: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    AmountBestUpper: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    AmountGood: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    AmountWorst: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcRewardBeginSettlementBuilding(Structure):
    ValidBuildings: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]], 0x0),
    ]
    IsUpgrade: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRealityCraftingRecipeData(Structure):
    Inputs: Annotated[
        cGcRealitySubstanceCraftingMix, Field(cGcRealitySubstanceCraftingMix, 0x0)
    ]
    OutputID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]


@partial_struct
class cGcRealityIcon(Structure):
    ID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Texture: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x20)]


@partial_struct
class cGcPurchaseableSpecial(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MissionTier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    ShopNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    IsConsumable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcProductDescriptionOverride(Structure):
    NewDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcProceduralProductDeployable(Structure):
    BaseID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Variants: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcNameGeneratorWord(Structure):
    Word: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    NumOptions: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcProceduralTechnologyStatLevel(Structure):
    Stat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x0)
    ]
    ValueMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    ValueMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    WeightingCurve: Annotated[
        c_enum32[enums.cGcWeightingCurve], Field(c_enum32[enums.cGcWeightingCurve], 0xC)
    ]
    AlwaysChoose: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcNumberedTextList(Structure):
    Format: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcProceduralTechnologyData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    UpgradeColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    Group: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    StatLevels: Annotated[
        basic.cTkDynamicArray[cGcProceduralTechnologyStatLevel],
        Field(basic.cTkDynamicArray[cGcProceduralTechnologyStatLevel], 0x50),
    ]
    Template: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Category: Annotated[
        c_enum32[enums.cGcProceduralTechnologyCategory],
        Field(c_enum32[enums.cGcProceduralTechnologyCategory], 0x70),
    ]
    NumStatsMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    NumStatsMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78)]

    class eQualityEnum(IntEnum):
        Normal = 0x0
        Rare = 0x1
        Epic = 0x2
        Legendary = 0x3
        Illegal = 0x4
        Sentinel = 0x5
        Robot = 0x6
        SeaTrash = 0x7

    Quality: Annotated[c_enum32[eQualityEnum], Field(c_enum32[eQualityEnum], 0x7C)]
    WeightingCurve: Annotated[
        c_enum32[enums.cGcWeightingCurve],
        Field(c_enum32[enums.cGcWeightingCurve], 0x80),
    ]
    Description: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x84)
    ]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x104)]
    NameLower: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x184)
    ]
    Subtitle: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x204)
    ]
    IsBiggsProcTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x284)]


@partial_struct
class cGcPlanetResourceIconLookup(Structure):
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    IconBinocs: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x18)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcModularCustomisationTextureGroup(Structure):
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    TextureOptionGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcModularCustomisationColourGroup(Structure):
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Palettes: Annotated[
        basic.cTkDynamicArray[cTkPaletteTexture],
        Field(basic.cTkDynamicArray[cTkPaletteTexture], 0x20),
    ]
    DefaultColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]


@partial_struct
class cGcModularCustomisationColourData(Structure):
    RequiredTextureOption: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    ColourGroups: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationColourGroup],
        Field(basic.cTkDynamicArray[cGcModularCustomisationColourGroup], 0x20),
    ]
    PaletteID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    RequiredTextureGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]


@partial_struct
class cGcMultiSpecificItemEntry(Structure):
    CustomRewardLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ProcTechGroup: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    CommunityTierProductList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x40),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    SeasonRewardListFormat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]

    class eMultiItemRewardTypeEnum(IntEnum):
        Product = 0x0
        Substance = 0x1
        ProcTech = 0x2
        ProcProduct = 0x3
        InventorySlot = 0x4
        InventorySlotShip = 0x5
        InventorySlotWeapon = 0x6
        CommunityTierProduct = 0x7

    MultiItemRewardType: Annotated[
        c_enum32[eMultiItemRewardTypeEnum],
        Field(c_enum32[eMultiItemRewardTypeEnum], 0x74),
    ]
    ProcProdRarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x78)
    ]
    ProcProdType: Annotated[
        c_enum32[enums.cGcProceduralProductCategory],
        Field(c_enum32[enums.cGcProceduralProductCategory], 0x7C),
    ]
    ProcTechQuality: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x80)]
    AlsoTeachTechBoxRecipe: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84)]
    HideInSeasonRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x85)]
    IllegalProcTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x86)]
    SentinelProcTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x87)]


@partial_struct
class cGcModularCustomisationColourGroupPalette(Structure):
    RequiredTextureOption: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    RequiredTextureGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Palette: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x30)]


@partial_struct
class cGcModularCustomisationDescriptorGroupData(Structure):
    ActivatedDescriptorGroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcItemAmountCostPair(Structure):
    ItemId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcInventoryLayoutGenerationBounds(Structure):
    MaxHeightLarge: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MaxHeightSmall: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    MaxHeightStandard: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    MaxWidthLarge: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    MaxWidthSmall: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MaxWidthStandard: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcItemCostData(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ChangePerSale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Cost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MaxCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MinCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcItemPriceModifiers(Structure):
    BuyBaseMarkup: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    BuyMarkupMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    HighPriceMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    LowPriceMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    SpaceStationMarkup: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcLegacyItem(Structure):
    ConvertID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ConvertRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AddNewRecipe: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    RemoveOldRecipe: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]


@partial_struct
class cGcMaintenanceElement(Structure):
    LocatorOverride: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    AmountEmptyTimePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]

    class eCompletionRequirementEnum(IntEnum):
        FullyChargedAndRepaired = 0x0
        AnyChargeAndRepaired = 0x1
        FullyRepaired = 0x2
        NotFullyCharged = 0x3
        EmptySlot = 0x4
        NoRequirement = 0x5
        UserInstalls = 0x6
        HasIngredients = 0x7
        GroupInstall = 0x8

    CompletionRequirement: Annotated[
        c_enum32[eCompletionRequirementEnum],
        Field(c_enum32[eCompletionRequirementEnum], 0x34),
    ]
    DamagedAfterTimePeriodMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    DamagedAfterTimePeriodMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]

    class eDamageStatusEnum(IntEnum):
        Damaged = 0x0
        Repaired = 0x1
        Random = 0x2

    DamageStatus: Annotated[
        c_enum32[eDamageStatusEnum], Field(c_enum32[eDamageStatusEnum], 0x40)
    ]
    ItemGroupOverride: Annotated[
        c_enum32[enums.cGcMaintenanceElementGroups],
        Field(c_enum32[enums.cGcMaintenanceElementGroups], 0x44),
    ]
    MaxCapacity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    MaxRandAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    MinRandAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    Type: Annotated[
        c_enum32[enums.cGcInventoryType], Field(c_enum32[enums.cGcInventoryType], 0x54)
    ]

    class eUpdateTypeEnum(IntEnum):
        UpdatesAlways = 0x0
        UpdateOnlyWhenComplete = 0x1
        UpdateOnlyWhenNotComplete = 0x2

    UpdateType: Annotated[
        c_enum32[eUpdateTypeEnum], Field(c_enum32[eUpdateTypeEnum], 0x58)
    ]
    BlockDiscardWhenAllowedForParent: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x5C)
    ]
    HideWhenComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5D)]


@partial_struct
class cGcInventoryTableEntry(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LayoutSizeType: Annotated[
        c_enum32[enums.cGcInventoryLayoutSizeType],
        Field(c_enum32[enums.cGcInventoryLayoutSizeType], 0x10),
    ]
    MaxSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    MinSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cGcInventoryCostDataEntry(Structure):
    ClassMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CoolMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MaxSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    MaxValueInMillions: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MinSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    MinValueInMillions: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    TradeInMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcInventoryCostData(Structure):
    InventoryCostData: Annotated[
        cGcInventoryCostDataEntry, Field(cGcInventoryCostDataEntry, 0x0)
    ]


@partial_struct
class cGcInventoryGenerationBaseStatDataEntry(Structure):
    BaseStatID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Max: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MaxFixedAdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Min: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MinFixedAdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcInventoryGenerationBaseStatClassData(Structure):
    BaseStats: Annotated[
        basic.cTkDynamicArray[cGcInventoryGenerationBaseStatDataEntry],
        Field(basic.cTkDynamicArray[cGcInventoryGenerationBaseStatDataEntry], 0x0),
    ]


@partial_struct
class cGcInventoryGenerationBaseStatData(Structure):
    BaseStatsPerClass: Annotated[
        cGcInventoryGenerationBaseStatClassData,
        Field(cGcInventoryGenerationBaseStatClassData, 0x0),
    ]


@partial_struct
class cGcDiscoveryTrimScoringRules(Structure):
    MaxScoreValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MinScoreValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Curve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8)
    ]


@partial_struct
class cGcInventoryBaseStatBonus(Structure):
    StatType: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x0)
    ]
    LessIsBetter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcInventoryBaseStat(Structure):
    BaseStatID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LocID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    StatBonus: Annotated[
        basic.cTkDynamicArray[cGcInventoryBaseStatBonus],
        Field(basic.cTkDynamicArray[cGcInventoryBaseStatBonus], 0x20),
    ]


@partial_struct
class cGcInventoryBaseStatEntry(Structure):
    BaseStatID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcDiscoveryWorth(Structure):
    OnScan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Record: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    Mission: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cGcInventoryClassProbabilities(Structure):
    ClassProbabilities: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcExpeditionPowerup(Structure):
    ModuleDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    SelectionDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    ProductId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    StatModified: Annotated[
        c_enum32[enums.cGcFrigateStatType],
        Field(c_enum32[enums.cGcFrigateStatType], 0x50),
    ]
    ValueChange: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]


@partial_struct
class cGcDiscoveryOwner(Structure):
    Timestamp: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    LocalID: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x4)]
    OnlineID: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x44)]
    Platform: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x84)]
    Username: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xC4)]


@partial_struct
class cGcDiscoveryRewardLookup(Structure):
    BiomeSpecific: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x110)]
    Secondary: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x120)]


@partial_struct
class cGcFreighterCargoOption(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MinAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    PercentChance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cGcCostSalvageShip(Structure):
    ShipClassStringOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CannotAffordIfStringOverrideIsNull: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x160)
    ]
    WillGiveShipParts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x161)]


@partial_struct
class cGcDeathQuote(Structure):
    QuoteLine1: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x0)
    ]
    QuoteLine2: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x80)
    ]
    Author: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x100)]


@partial_struct
class cGcCostSalvageTool(Structure):
    pass


@partial_struct
class cGcCostSentinelBlockStatus(Structure):
    CanAffordIfSentinelsDisabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcCostSettlementBuildingUpgrade(Structure):
    LevelRequired: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcDialogClearanceInfo(Structure):
    GlobalDialogID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    AssociatedMission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    AlwaysForceClearThisPair: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcCostShipLowSpeed(Structure):
    MaxShipSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcCostShipUpgradeable(Structure):
    pass


@partial_struct
class cGcCostSpecificCreatureBait(Structure):
    pass


@partial_struct
class cGcCostStat(Structure):
    CostAsString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    StatGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Value: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]


@partial_struct
class cGcCostStatCompare(Structure):
    CostStringCanAfford: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CostStringCantAfford: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    CanAffordIfMissionActive: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    CompareAndSetStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    CoreStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]


@partial_struct
class cGcCostSubstance(Structure):
    UseScanEventToDetermineLocalSubstance: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionSubstanceEnum],
        Field(c_enum32[enums.cGcDefaultMissionSubstanceEnum], 0x34),
    ]
    LocalSubstanceType: Annotated[
        c_enum32[enums.cGcLocalSubstanceType],
        Field(c_enum32[enums.cGcLocalSubstanceType], 0x38),
    ]
    UseSpecificPlanetIndexForLocalSubstance: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x3C)
    ]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    UseRandomPlanetIndex: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]


@partial_struct
class cGcCostPoliceCargoComply(Structure):
    pass


@partial_struct
class cGcCostTableEntry(Structure):
    CannotAffordOSDMsg: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CommunityContributionCapLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    Cost: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x40)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    MissionMessageWhenCharged: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    CommunityContributionValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    DisplayCost: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]
    DisplayOnlyCostIfCantAfford: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x75)]
    DontCharge: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x76)]
    HideCostStringIfCanAfford: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x77)]
    HideOptionAndDisplayCostOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]
    InvertCanAffordOutcome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x79)]
    MustAffordInCreative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7A)]
    RemoveOptionIfCantAfford: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7B)]


@partial_struct
class cGcCostProcProduct(Structure):
    FreighterPasswordIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Rarity: Annotated[c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x4)]
    Type: Annotated[
        c_enum32[enums.cGcProceduralProductCategory],
        Field(c_enum32[enums.cGcProceduralProductCategory], 0x8),
    ]
    CareAboutRarity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcCostProduct(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x14),
    ]
    TakeIDFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]


@partial_struct
class cGcCostProductOnlyTakeIfCanAfford(Structure):
    AltCostLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x34),
    ]


@partial_struct
class cGcCostMultiTool(Structure):
    CostString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    WeaponClass: Annotated[
        c_enum32[enums.cGcWeaponClasses], Field(c_enum32[enums.cGcWeaponClasses], 0x20)
    ]


@partial_struct
class cGcCostOwnSettlement(Structure):
    NumRequired: Annotated[ctypes.c_int8, Field(ctypes.c_int8, 0x0)]


@partial_struct
class cGcCostInteractionMissionState(Structure):
    CanAffordLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CantAffordLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    RequiredState: Annotated[
        c_enum32[enums.cGcInteractionMissionState],
        Field(c_enum32[enums.cGcInteractionMissionState], 0x40),
    ]
    ThisInteractionClassInMyBuilding: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x44),
    ]
    AlsoAcceptMaintenanceDone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    TestThisInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]


@partial_struct
class cGcCostPendingSettlementJudgement(Structure):
    pass


@partial_struct
class cGcCostInteractionNeedsMaintenance(Structure):
    CantAffordLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]


@partial_struct
class cGcCostPirateTribute(Structure):
    CargoValuePercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MinimumValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcCostItemFromList(Structure):
    ItemList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcCostPoliceCargoBribe(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    IncludeNipNip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    OnlyCargoProbeInventories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcCostItemFromListOfValue(Structure):
    CostText: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    ItemList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    UnitValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]


@partial_struct
class cGcCostItemListIndexed(Structure):
    Costs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]

    class eItemIndexProviderEnum(IntEnum):
        None_ = 0x0
        Biome = 0x1
        SubBiome = 0x2

    ItemIndexProvider: Annotated[
        c_enum32[eItemIndexProviderEnum], Field(c_enum32[eItemIndexProviderEnum], 0x14)
    ]

    class eItemOutOfBoundsBehaviourEnum(IntEnum):
        NoCost = 0x0
        UseFirst = 0x1
        UseLast = 0x2

    ItemOutOfBoundsBehaviour: Annotated[
        c_enum32[eItemOutOfBoundsBehaviourEnum],
        Field(c_enum32[eItemOutOfBoundsBehaviourEnum], 0x18),
    ]
    AssertIfOutOfBounds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]


@partial_struct
class cGcCostJourneyMilestone(Structure):
    RequiredMilestone: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcCostJourneyStatLevel(Structure):
    StatName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RequiredLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcCostLocalMissionAvailable(Structure):
    TextOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]


@partial_struct
class cGcCostMissionActive(Structure):
    CostString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcCostMissionComplete(Structure):
    TextOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Cost: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    HideIfCompleted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcCostGroup(Structure):
    Text: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Costs: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x20),
    ]
    HideOptionIfCantAffordIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    TakeTextFromIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    Test: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x38),
    ]


@partial_struct
class cGcCostMoney(Structure):
    Cost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    CostCurrency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x4)
    ]


@partial_struct
class cGcCostHasActiveScanEvent(Structure):
    OptionalEventID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Text: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]


@partial_struct
class cGcCostMoneyList(Structure):
    Costs: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x0),
    ]
    CostCurrency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x10)
    ]

    class eIndexProviderEnum(IntEnum):
        None_ = 0x0
        ShipSlot = 0x1
        ShipClass = 0x2
        DailyFreighters = 0x3
        WeaponClass = 0x4
        WeaponSlot = 0x5
        PetSlot = 0x6
        PilotSlot = 0x7
        PilotRank = 0x8

    IndexProvider: Annotated[
        c_enum32[eIndexProviderEnum], Field(c_enum32[eIndexProviderEnum], 0x14)
    ]

    class eOutOfBoundsBehaviourEnum(IntEnum):
        NoCost = 0x0
        UseFirst = 0x1
        UseLast = 0x2

    OutOfBoundsBehaviour: Annotated[
        c_enum32[eOutOfBoundsBehaviourEnum],
        Field(c_enum32[eOutOfBoundsBehaviourEnum], 0x18),
    ]
    AssertIfOutOfBounds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]


@partial_struct
class cGcCostHasCorvetteProduct(Structure):
    pass


@partial_struct
class cGcCostHasFireteamMember(Structure):
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    BlockIfCannotAccessTheirPurpleSystem: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4)
    ]


@partial_struct
class cGcCostMultiItem(Structure):
    DisplayLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ItemList: Annotated[
        basic.cTkDynamicArray[cGcItemAmountCostPair],
        Field(basic.cTkDynamicArray[cGcItemAmountCostPair], 0x20),
    ]
    OnlyTakeIfCanAfford: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcCostHealth(Structure):
    HealthUnits: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcCostInstalledTech(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eInventoryToCheckEnum(IntEnum):
        All = 0x0
        Suit = 0x1
        Ship = 0x2
        Weapon = 0x3
        Freighter = 0x4
        Buggy = 0x5

    InventoryToCheck: Annotated[
        c_enum32[eInventoryToCheckEnum], Field(c_enum32[eInventoryToCheckEnum], 0x10)
    ]
    MinChargePercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    BurnCharge: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcCostCargo(Structure):
    Slots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcCostCommunityResearchTier(Structure):
    CompletedTiers: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MissionIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]


@partial_struct
class cGcCostCorvetteDockedForEdit(Structure):
    pass


@partial_struct
class cGcCostCorvetteDraftInProgress(Structure):
    pass


@partial_struct
class cGcCostCreatureCanLayEggs(Structure):
    pass


@partial_struct
class cGcCostDifficultyGroundCombat(Structure):
    CostStringCantAfford: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    GroundCombatTimers: Annotated[
        c_enum32[enums.cGcCombatTimerDifficultyOption],
        Field(c_enum32[enums.cGcCombatTimerDifficultyOption], 0x20),
    ]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x24)
    ]


@partial_struct
class cGcCostDifficultySpaceCombat(Structure):
    CostStringCantAfford: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    SpaceCombatTimers: Annotated[
        c_enum32[enums.cGcCombatTimerDifficultyOption],
        Field(c_enum32[enums.cGcCombatTimerDifficultyOption], 0x20),
    ]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x24)
    ]


@partial_struct
class cGcCostDiscovery(Structure):
    CostString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DiscoveryType: Annotated[
        c_enum32[enums.cGcDiscoveryType], Field(c_enum32[enums.cGcDiscoveryType], 0x20)
    ]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]


@partial_struct
class cGcCostAdvanceSettlementBuilding(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcCostFleetStoredIncome(Structure):
    Class: Annotated[
        c_enum32[enums.cGcFrigateClass], Field(c_enum32[enums.cGcFrigateClass], 0x0)
    ]
    RequiredAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcCostAnyCookedProduct(Structure):
    CostString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CostStringCantAfford: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    MixRandomAndBetter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]
    PreferBetterItems: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45)]


@partial_struct
class cGcCostFossilComponent(Structure):
    pass


@partial_struct
class cGcCostFrigateCargo(Structure):
    pass


@partial_struct
class cGcCostCanAddShip(Structure):
    pass


@partial_struct
class cGcBuildingBlueprint(Structure):
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    GroupId: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcCostCanAdoptCreature(Structure):
    pass


@partial_struct
class cGcBuildingCostPartCount(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcCostCanCustomiseCreature(Structure):
    pass


@partial_struct
class cGcCostCanDispatchFleetExpeditions(Structure):
    pass


@partial_struct
class cGcCostCanFreighterMegaWarp(Structure):
    pass


@partial_struct
class cGcCostCanMilkCreature(Structure):
    pass


@partial_struct
class cGcCostCanRideCreature(Structure):
    pass


@partial_struct
class cGcCostCanUseShipPad(Structure):
    ShipPadAvalible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcAlienPuzzleMissionOverride(Structure):
    Puzzle: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    RequireScanEventActive: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    AltPriorityMissionForSelection: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x40)
    ]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    OptionalMissionSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x60)]
    ForceMissionSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]
    RequireMainMissionActiveWhenUsingAlt: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x71)
    ]
    RequireMainMissionSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x72)]


@partial_struct
class cGcAlienSpeechEntry(Structure):
    Group: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Text: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Category: Annotated[
        c_enum32[enums.cGcWordCategoryTableEnum],
        Field(c_enum32[enums.cGcWordCategoryTableEnum], 0x50),
    ]
    Frequency: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x5C)
    ]

    class eWordInteractEffectEnum(IntEnum):
        Pain = 0x0
        Heal = 0x1

    WordInteractEffect: Annotated[
        c_enum32[eWordInteractEffectEnum],
        Field(c_enum32[eWordInteractEffectEnum], 0x60),
    ]


@partial_struct
class cGcBreakTechByStatData(Structure):
    DamageTechWithStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x0)
    ]
    IncludeStatChildren: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcChildNode(Structure):
    JointPositionInBone: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    PositionInBone: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    NodeName: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x20)]
    JointPositionInBoneSet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]


@partial_struct
class cGcAlienMoodMissionOverride(Structure):
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Mood: Annotated[
        c_enum32[enums.cGcAlienMood], Field(c_enum32[enums.cGcAlienMood], 0x10)
    ]


@partial_struct
class cGcExperienceDebugTriggerAction(Structure):
    Action: Annotated[
        c_enum32[enums.cGcExperienceDebugTriggerActionTypes],
        Field(c_enum32[enums.cGcExperienceDebugTriggerActionTypes], 0x0),
    ]
    IntParameter: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcExperienceDebugTriggerInput(Structure):
    Actions: Annotated[
        basic.cTkDynamicArray[cGcExperienceDebugTriggerAction],
        Field(basic.cTkDynamicArray[cGcExperienceDebugTriggerAction], 0x0),
    ]

    class eKeyPressEnum(IntEnum):
        _1 = 0x0
        _2 = 0x1
        _3 = 0x2
        _4 = 0x3
        _5 = 0x4
        _6 = 0x5
        _7 = 0x6
        _8 = 0x7
        _9 = 0x8
        PadUp = 0x9
        PadDown = 0xA
        PadLeft = 0xB
        PadRight = 0xC

    KeyPress: Annotated[c_enum32[eKeyPressEnum], Field(c_enum32[eKeyPressEnum], 0x10)]


@partial_struct
class cGcPerformanceFlyby(Structure):
    Length: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    LockOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    LockSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    LockTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Offset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Locked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcPlayfabMatchmakingAttributes(Structure):
    gameProgress: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    isBackfilling: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    needsSmallLobby: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    lobbyConnectionString: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xC)
    ]
    gamemode: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x10C)
    ]
    matchmakingVersion: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x18C)
    ]
    platform: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x20C)
    ]
    seasonNumber: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x28C)
    ]
    UA: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x2CC)]


@partial_struct
class cTkSaveID(Structure):
    Value: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]


@partial_struct
class cGcMessageTitanFall(Structure):
    pass


@partial_struct
class cGcMessageTrackTargetAlert(Structure):
    AlertPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Attacker: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Victim: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    Primary: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcJourneyMedalTiers(Structure):
    Bronze: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Gold: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    None_: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    Silver: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]


@partial_struct
class cGcMessageUpdateFrigateSpeed(Structure):
    StartSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    TargetSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcMessageCrime(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]

    class eCrimeEnum(IntEnum):
        AttackCreature = 0x0
        AttackSentinel = 0x1
        AttackSentinelLaser = 0x2
        KillCreature = 0x3
        KillSentinel = 0x4
        MineResources = 0x5
        HitResources = 0x6
        AttackSpaceStation = 0x7
        AttackShip = 0x8
        AttackPolice = 0x9
        KillShip = 0xA
        KillPolice = 0xB
        TimedShootable = 0xC

    Crime: Annotated[c_enum32[eCrimeEnum], Field(c_enum32[eCrimeEnum], 0x10)]
    Criminal: Annotated[basic.GcNodeID, Field(basic.GcNodeID, 0x14)]
    Value: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    Victim: Annotated[basic.GcNodeID, Field(basic.GcNodeID, 0x1C)]


@partial_struct
class cGcMessageCutSceneAction(Structure):
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Local: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    Action: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]


@partial_struct
class cGcMessageNPCBehaviourEvent(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    BehaviourEvent: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    UserData: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    InteractionSubType: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    InteractionTrigger: Annotated[
        c_enum32[enums.cGcNPCTriggerTypes],
        Field(c_enum32[enums.cGcNPCTriggerTypes], 0x34),
    ]
    SourceNode: Annotated[basic.GcNodeID, Field(basic.GcNodeID, 0x38)]


@partial_struct
class cGcMessagePetBehaviourEvent(Structure):
    Direction: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    UserData: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    BehaviourEvent: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    ForceBehaviour: Annotated[
        c_enum32[enums.cGcPetBehaviours], Field(c_enum32[enums.cGcPetBehaviours], 0x50)
    ]
    Mood: Annotated[
        c_enum32[enums.cGcAlienMood], Field(c_enum32[enums.cGcAlienMood], 0x54)
    ]
    SourceNode: Annotated[basic.GcNodeID, Field(basic.GcNodeID, 0x58)]


@partial_struct
class cGcMessageProjectileLaunch(Structure):
    pass


@partial_struct
class cGcMessageRequestTakeOff(Structure):
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ImmediatelyDissolveNPC: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMessageRequestWarp(Structure):
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcMessageSubstanceMined(Structure):
    Substance: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcVROverride_Text(Structure):
    FloatValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    IntValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]

    class eVROverride_TextEnum(IntEnum):
        FontHeight = 0x0
        FontIndex = 0x1

    VROverride_Text: Annotated[
        c_enum32[eVROverride_TextEnum], Field(c_enum32[eVROverride_TextEnum], 0x8)
    ]


@partial_struct
class cGcStyleProp_Colour(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]


@partial_struct
class cGcStyleProp_Font(Structure):
    FontIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcInputActionInfo(Structure):
    ConsoleLocTag: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    LocTag: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    OverlayIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    SolidIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    SpecialIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    VirtualButtonIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]

    class eInputActionInfoFlagsEnum(IntEnum):
        empty = 0x0
        AvailableOnConsole = 0x1
        HideInControlsPage = 0x2
        HideInControlRebindingPage = 0x4
        HideInMenusMenu = 0x8
        OnlyVR = 0x10
        OnlyNonVR = 0x20

    InputActionInfoFlags: Annotated[
        c_enum32[eInputActionInfoFlagsEnum],
        Field(c_enum32[eInputActionInfoFlagsEnum], 0x80),
    ]
    Pairing: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x84)
    ]
    TextTag: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x88)]
    ExternalDigitalAliasId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x108)
    ]
    ExternalId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x128)
    ]
    ExternalLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x148)
    ]
    Analogue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x168)]


@partial_struct
class cGcStyleProp_Size(Structure):
    FontSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcIKConstraint(Structure):
    DefaultState: Annotated[
        cGcPlayerCharacterIKOverrideData, Field(cGcPlayerCharacterIKOverrideData, 0x0)
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    States: Annotated[
        basic.cTkDynamicArray[cGcPlayerCharacterIKStateData],
        Field(basic.cTkDynamicArray[cGcPlayerCharacterIKStateData], 0x30),
    ]
    Type: Annotated[
        c_enum32[enums.cGcCreatureIkType],
        Field(c_enum32[enums.cGcCreatureIkType], 0x40),
    ]
    JointName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x44)
    ]


@partial_struct
class cGcNGuiStyleAnimationKeyframeData(Structure):
    StyleProperties: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    Position: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcNGuiStyleAnimationData(Structure):
    KeyFrames: Annotated[
        basic.cTkDynamicArray[cGcNGuiStyleAnimationKeyframeData],
        Field(basic.cTkDynamicArray[cGcNGuiStyleAnimationKeyframeData], 0x0),
    ]
    Length: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AnimateByDefault: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    Loop: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcActionSetAction(Structure):
    Action: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x0)
    ]
    Status: Annotated[
        c_enum32[enums.cGcActionUseType], Field(c_enum32[enums.cGcActionUseType], 0x4)
    ]


@partial_struct
class cGcActionSet(Structure):
    LocTag: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Actions: Annotated[
        basic.cTkDynamicArray[cGcActionSetAction],
        Field(basic.cTkDynamicArray[cGcActionSetAction], 0x20),
    ]
    BlockedActions: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]], 0x30),
    ]
    Status: Annotated[
        c_enum32[enums.cGcActionUseType], Field(c_enum32[enums.cGcActionUseType], 0x40)
    ]
    Type: Annotated[
        c_enum32[enums.cGcActionSetType], Field(c_enum32[enums.cGcActionSetType], 0x44)
    ]
    ExternalId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x48)
    ]
    ExternalLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x68)
    ]
    ParentExternalId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x88)
    ]


@partial_struct
class cGcVROverride_Layout(Structure):
    FloatValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]

    class eVROverride_LayoutEnum(IntEnum):
        PosX = 0x0
        PosY = 0x1
        LayerWidth = 0x2
        LayerHeight = 0x3
        MaxWidth = 0x4

    VROverride_Layout: Annotated[
        c_enum32[eVROverride_LayoutEnum], Field(c_enum32[eVROverride_LayoutEnum], 0x4)
    ]


@partial_struct
class cGcAccessibleOverride_Text(Structure):
    class eAccessibleOverride_TextEnum(IntEnum):
        FontHeight = 0x0

    AccessibleOverride_Text: Annotated[
        c_enum32[eAccessibleOverride_TextEnum],
        Field(c_enum32[eAccessibleOverride_TextEnum], 0x0),
    ]
    FloatValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcNGuiActionData(Structure):
    Data: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    LayerID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]

    class eActionEnum(IntEnum):
        Click = 0x0
        Hover = 0x1
        ArrowLeft = 0x2
        ArrowRight = 0x3

    Action: Annotated[c_enum32[eActionEnum], Field(c_enum32[eActionEnum], 0x20)]


@partial_struct
class cGcNGuiSpecialTextStyleData(Structure):
    Animation: Annotated[
        cGcNGuiStyleAnimationData, Field(cGcNGuiStyleAnimationData, 0x0)
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    StyleProperties: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x28),
    ]


@partial_struct
class cGcNGuiFileBrowserRecents(Structure):
    Recents: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x0)]


@partial_struct
class cGcShipHUDTargetIconData(Structure):
    Corner: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    GlowCorner: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    GlowLineHorizontal: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    GlowLineVertical: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    LineHorizontal: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    LineVertical: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]


@partial_struct
class cGcShipHUDTargetData(Structure):
    BaseColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    LockColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    PoliceColour1: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    PoliceColour2: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    ThreatColour: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    IconData: Annotated[cGcShipHUDTargetIconData, Field(cGcShipHUDTargetIconData, 0x50)]
    Arrow: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xB0)]
    ActivateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    ActiveDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    ArrowFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    ArrowMaxSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    ArrowMinFadeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    ArrowMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    ArrowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    ArrowScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    GlowAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    HighlightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    HitPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    HitPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    HitWhiteOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    IconMaxSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    IconMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    IconSizeIn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    IconSizeScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]
    PoliceColourFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]


@partial_struct
class cGcTextStyleOutline(Structure):
    OutlineColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    OutlineOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]


@partial_struct
class cGcTextStylePlain(Structure):
    pass


@partial_struct
class cGcTextStyleShadow(Structure):
    ShadowColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ShadowOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]


@partial_struct
class cGcNGuiSpecialTextImageData(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Path: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Size: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    HeightModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    ScaleFromFont: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    UseFontColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcAccessibleOverride_Layout(Structure):
    class eAccessibleOverride_LayoutEnum(IntEnum):
        PosX = 0x0
        PosY = 0x1
        LayerWidth = 0x2
        LayerHeight = 0x3
        MaxWidth = 0x4

    AccessibleOverride_Layout: Annotated[
        c_enum32[eAccessibleOverride_LayoutEnum],
        Field(c_enum32[eAccessibleOverride_LayoutEnum], 0x0),
    ]
    FloatValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcSpaceMapObjectData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    DistanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    DistanceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    ScaleMagnitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    ScaleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    ScaleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Orient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    TintModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]


@partial_struct
class cGcHUDComponent(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]

    class eAlignEnum(IntEnum):
        Center = 0x0
        TopLeft = 0x1
        TopRight = 0x2
        BottomLeft = 0x3
        BottomRight = 0x4

    Align: Annotated[c_enum32[eAlignEnum], Field(c_enum32[eAlignEnum], 0x10)]
    Height: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    PosX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    PosY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    Width: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcHUDEffectRewardData(Structure):
    BoxColourEnd: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    BoxColourStart: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    BoxSizeEnd: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    BoxSizeStart: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x28)]
    BoxAnimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    BoxAnimTimeBetweenBoxes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    BoxRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    BoxThicknessEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    BoxThicknessStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    NumBoxes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    BoxAnimTimeCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x48)
    ]


@partial_struct
class cGcHUDImageData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Data: Annotated[cGcHUDComponent, Field(cGcHUDComponent, 0x10)]
    Image: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x38)]


@partial_struct
class cGcPunctuationDelay(Structure):
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Punctuation: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4)
    ]


@partial_struct
class cGcHUDLayerData(Structure):
    Data: Annotated[cGcHUDComponent, Field(cGcHUDComponent, 0x0)]
    Children: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x28),
    ]


@partial_struct
class cGcPunctuationDelayData(Structure):
    PunctuationList: Annotated[
        basic.cTkDynamicArray[cGcPunctuationDelay],
        Field(basic.cTkDynamicArray[cGcPunctuationDelay], 0x0),
    ]
    DefaultDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcScannerIcon(Structure):
    Main: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    Small: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x18)]
    Highlight: Annotated[
        c_enum32[enums.cGcScannerIconHighlightTypes],
        Field(c_enum32[enums.cGcScannerIconHighlightTypes], 0x30),
    ]


@partial_struct
class cGcHUDMarkerData(Structure):
    Distance: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Icon: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    IconBehind: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]


@partial_struct
class cGcDiscoveryHelperTimings(Structure):
    DiscoverPlanetMessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DiscoverPlanetMessageWait: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    DiscoverPlanetTotalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcFontData(Structure):
    File: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    MinCharWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcCameraAnomalySetupData(Structure):
    CameraAt: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x0)]
    CameraOffset: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x10)]
    CameraUp: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x20)]
    SunDirection: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x30)]


@partial_struct
class cGcCameraFocusBuildingControlSettings(Structure):
    ClampRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    MaxStepRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MaxStepRateAccumulatedInput: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MinStepRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    StepSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Clamp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]
    StepRateCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1D)
    ]


@partial_struct
class cGcCameraFreeSettings(Structure):
    InitialOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    CollisionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MaxDistanceClampBuffer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    MaxDistanceClampForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    MoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    TurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]


@partial_struct
class cGcCameraSpawnSetupData(Structure):
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    HorizontalProportion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    YawProportion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    InFrontOfShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcCameraShakeCapturedData(Structure):
    ShakeFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ShakeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    VibrateFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    VibrateStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcCameraShakeMechanicalData(Structure):
    ExtraShakeFrequency: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    ExtraVibrateFrequency: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    ShakeFrequency: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    ShakeStrength: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    VibrateFrequency: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    VibrateStrength: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x50)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]


@partial_struct
class cGcCameraShakeData(Structure):
    MechanicalData: Annotated[
        cGcCameraShakeMechanicalData, Field(cGcCameraShakeMechanicalData, 0x0)
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    CapturedData: Annotated[
        cGcCameraShakeCapturedData, Field(cGcCameraShakeCapturedData, 0x80)
    ]
    DecayRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    FovFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    FovStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    StrengthScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    ThirdPersonDamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    TimeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    TotalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    VRStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]


@partial_struct
class cGcPresetTextureData(Structure):
    Filename: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x0)
    ]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x100)]


@partial_struct
class cGcScreenFilterData(Structure):
    LocText: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    FadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    HdrAreaAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    SelectableInPhotoMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]


@partial_struct
class cGcCameraAmbientBuildingData(Structure):
    Animation: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DroneAnimation: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Offset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AvailableBuildings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    AvailableRaces: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    AvoidTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x69)]
    UseLookAt: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6A)]


@partial_struct
class cGcCameraAmbientSpaceData(Structure):
    Animation: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DroneAnimation: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]

    class eOriginEnum(IntEnum):
        SpaceStationInternals = 0x0
        SpaceStationBack = 0x1
        FreighterBattle = 0x2
        Freighter = 0x3
        FreighterHangar = 0x4
        AtlasStation = 0x5
        BlackHole = 0x6
        Anomaly = 0x7

    Origin: Annotated[c_enum32[eOriginEnum], Field(c_enum32[eOriginEnum], 0x20)]


@partial_struct
class cGcCameraAmbientSpecialData(Structure):
    Animation: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DroneAnimation: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]

    class eCameraOriginEnum(IntEnum):
        ExternalBase = 0x0

    CameraOrigin: Annotated[
        c_enum32[eCameraOriginEnum], Field(c_enum32[eCameraOriginEnum], 0x20)
    ]
    AvoidTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    UseLookAt: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]


@partial_struct
class cGcCameraAnimationData(Structure):
    CameraAnimation: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]


@partial_struct
class cGcWorldUISettings(Structure):
    GameModeSelectorQuadOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    GameModeSelectorQuadOffsetV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    HUDDefWorldQuadOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    HUDDefWorldQuadOffsetV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    HUDDefWorldQuadShipAddOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    HUDDefWorldQuadShipAddOffsetV2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14)
    ]
    HUDInterpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    HUDThresholdHorz: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    HUDThresholdVert: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    HUDWorldQuadScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    HUDWorldQuadShipScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    UIWorldQuadOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    UIWorldQuadOffsetBuildMenu: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    UIWorldQuadOffsetBuildMenuV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    UIWorldQuadOffsetV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    UIWorldQuadScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    UIWorldQuadShipAddOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    UIWorldQuadShipAddOffsetV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    UIWorldQuadShipScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    UIWorldQuadSideOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]


@partial_struct
class cGcTerrainOverlayColours(Structure):
    Cutoff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FlightStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    PulsePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    PulseStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcCameraAerialViewData(Structure):
    class eAerialViewModeEnum(IntEnum):
        FaceDown = 0x0
        FaceOut = 0x1
        FaceDownThenOut = 0x2
        FaceDownThenFocus = 0x3

    AerialViewMode: Annotated[
        c_enum32[eAerialViewModeEnum], Field(c_enum32[eAerialViewModeEnum], 0x0)
    ]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    FocusTargetOffsetDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    LookTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    PauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SpeedLineDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    StartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    TargetOffsetAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    TimeBack: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Curve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x28)
    ]
    CurveDown: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x29)
    ]
    IgnoreDistanceRestrictions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A)]
    SlerpCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x2B)
    ]


@partial_struct
class cGcCameraFollowSettings(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AvoidCollisionLRSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AvoidCollisionPushSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AvoidCollisionUDSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    BackMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    BackMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    BackSlopeAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    BackSlopeRotationAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    CenterBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    CenterMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    CenterMaxSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    CenterStartSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    CenterStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    CustomBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    DistSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    DistSpeedOutsideMainRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    DistStiffness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    HorizRotationAngleMaxPerFrame: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x50)
    ]
    LeftMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    LeftMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    LookStickLimitAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    LookStickOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    LRProbesRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    LRProbesRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    MinMoveVelToTriggerSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    MinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    NumLRProbes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    NumUDProbes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78)]
    OffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    OffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    OffsetYAlt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    OffsetYExtraMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    OffsetYMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    OffsetYSlopeExtra: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    OffsetZFlat: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    PanFar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    PanNear: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    ProbeCenterX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    ProbeCenterY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    PushForwardDropoffLR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    PushForwardDropoffUD: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    SpeedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    SpringSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    UDProbesRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    UpGamma: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    UpMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    UpMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    UpSlopeAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    UpWaveAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    UpWaveAdjustMaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    VelocityAnticipate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    VelocityAnticipateSpringSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD8)
    ]
    VertMaxSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    VertRotationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    VertRotationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    VertRotationOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    VertRotationOffsetMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    VertRotationOffsetMinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    VertRotationSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    AvoidCollisionLRUseStickDelay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF8)]
    AvoidCollisionUDUseStickDelay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF9)]
    EnableCollisionDetection: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFA)]
    LockToObjectOnIdle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFB)]
    UseCustomBlendTime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFC)]
    UseMinSpeedYOffset: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFD)]
    UseSpeedBasedSpring: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFE)]
    VertStartLookingDown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFF)]


@partial_struct
class cGcCameraWarpSettings(Structure):
    FocusPointDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    OffsetXFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    OffsetXPhase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    OffsetXRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    OffsetYBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    OffsetYFrequency_1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    OffsetYFrequency_2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    OffsetYPhase_1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    OffsetYPhase_2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    OffsetYRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    OffsetYStartBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    OffsetZBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    OffsetZFrequency_1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    OffsetZFrequency_2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    OffsetZPhase_1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    OffsetZPhase_2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    OffsetZRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    OffsetZStartBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    RollRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    YawnRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    OffsetXCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x50)
    ]


@partial_struct
class cGcColourModifier(Structure):
    ForceColourTo: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    MultiplySaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MultiplyValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    OffsetSaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    OffsetValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    ForceColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcColourPaletteData(Structure):
    Colours: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ColourIndices: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]


@partial_struct
class cGcPaletteData(Structure):
    Colours: Annotated[basic.Colour, Field(basic.Colour, 0x0)]

    class eNumColoursEnum(IntEnum):
        Inactive = 0x0
        _1 = 0x1
        _4 = 0x2
        _8 = 0x3
        _16 = 0x4
        All = 0x5

    NumColours: Annotated[
        c_enum32[eNumColoursEnum], Field(c_enum32[eNumColoursEnum], 0x400)
    ]


@partial_struct
class cGcTerrainGlobals(Structure):
    TerrainBeamLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    MiningSubstanceBiome: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    MiningSubstanceRare: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x120),
    ]
    MiningSubstanceStar: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x130),
    ]
    MiningSubstanceStarExtreme: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x140),
    ]
    RegionHotspotsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x150)
    ]
    TerrainEditing: Annotated[cGcTerrainEditing, Field(cGcTerrainEditing, 0x160)]
    HueOverlay: Annotated[
        cGcTerrainOverlayColours, Field(cGcTerrainOverlayColours, 0x1F8)
    ]
    SaturationOverlay: Annotated[
        cGcTerrainOverlayColours, Field(cGcTerrainOverlayColours, 0x210)
    ]
    ValueOverlay: Annotated[
        cGcTerrainOverlayColours, Field(cGcTerrainOverlayColours, 0x228)
    ]
    HeightBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x240)]
    MaxHighWaterLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x244)]
    MaxHighWaterRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x248)]
    MaxWaterRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24C)]
    MinHighWaterLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x250)]
    MinHighWaterRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x254)]
    MinHighWaterRegionRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x258)]
    MinWaterRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x25C)]
    MouseWheelRotatePlaneSensitivity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x260)
    ]
    NumGeneratorCalls: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x264)]
    NumPolygoniseCalls: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x268)]
    NumPostPolygoniseCalls: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x26C)]
    PurpleSystemMaxHighWaterChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x270)
    ]
    RegisterTerrainMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x274)]
    SeaLevelGasGiant: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x278)]
    SeaLevelHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x27C)]
    SeaLevelMoon: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x280)]
    SeaLevelStandard: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x284)]
    SeaLevelWaterWorld: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x288)]
    SmoothStepAbove: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28C)]
    SmoothStepBelow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x290)]
    SmoothStepStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x294)]
    SubtractEditFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x298)]
    SubtractEditLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x29C)]
    SubtractEditOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2A0)]
    TerrainBeamDefaultRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2A4)]
    TerrainBeamHologramTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2A8)]
    TerrainBeamLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2AC)]
    TerrainBeamUndoRangeFromLastAdd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2B0)
    ]
    TerrainPrimeIndexStart: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2B4)]
    TerrainPurpleSystemIndexStart: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x2B8)
    ]
    TerrainUndoCubesAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2BC)]
    TerrainUndoCubesNoiseFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C0)]
    TerrainUndoCubesNoiseThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2C4)
    ]
    TerrainUndoCubesRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C8)]
    TerrainUndoFadeDepthConstant: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2CC)
    ]
    TerrainUndoFadeDepthScalar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D0)]
    TextureBlendOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D4)]
    TextureBlendScale0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D8)]
    TextureBlendScale1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2DC)]
    TextureBlendScale2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E0)]
    TextureFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E4)]
    TextureFadePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E8)]
    TextureScaleMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2EC)]
    TextureScalePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F0)]
    TileBlendMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F4)]
    UseMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F8)]
    DebugFlattenAllTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2FC)]
    DebugLockTerrainSettingsIndex: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2FD)]
    DebugNoFlattenForBuildings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2FE)]
    DebugRegionHotspots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2FF)]
    ForcePurpleSystemHighWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x300)]


@partial_struct
class cGcSmokeTestOptions(Structure):
    CameraFastHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CameraFastMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    CameraHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    CameraMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    CameraPitchAngleDeg: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    CameraPitchSpeedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    CameraRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    GifFrames: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    GifTimeBetweenKeyframes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    InitialPause: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    PlanetFlightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    PlanetFlightTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    SmokeBotNumWalksBeforeWarp: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    SmokeBotTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    SmokeTestFlashTimeDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    GifMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]


@partial_struct
class cGcSolarGenerationGlobals(Structure):
    PlanetRingsMax: Annotated[cGcPlanetRingData, Field(cGcPlanetRingData, 0x0)]
    PlanetRingsMin: Annotated[cGcPlanetRingData, Field(cGcPlanetRingData, 0x60)]
    SolarSystemSize: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xC0)]
    AsteroidSettings: Annotated[
        basic.cTkDynamicArray[cGcAsteroidSystemGenerationData],
        Field(basic.cTkDynamicArray[cGcAsteroidSystemGenerationData], 0xD0),
    ]
    CommonAsteroidResourceFuel: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE0)]
    CommonAsteroidResourceMain: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xF0)]
    CommonAsteroidResourceProduct: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x100)
    ]
    CommonAsteroidResourceSecondary: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x110)
    ]
    RareAsteroidDataProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x120)]
    RareAsteroidResource: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x130)]
    RareAsteroidResourceFuel: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x140)]
    SpaceshipSpawnFreqMultipliers: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x150),
    ]
    SpaceshipWeightings: Annotated[
        basic.cTkDynamicArray[cGcAISpaceshipWeightingData],
        Field(basic.cTkDynamicArray[cGcAISpaceshipWeightingData], 0x160),
    ]
    AbandonedSystemProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x170)]
    EmptySystemProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x184)]
    ExtremePlanetChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198)]
    PirateSystemProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC)]
    PerPlanetGenerationAngleChangeDegreesRange: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1C0)
    ]
    PerPlanetGenerationElevationChangeDegreesRange: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1C8)
    ]
    RareAsteroidNoiseRangeLotsOfRares: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1D0)
    ]
    RareAsteroidNoiseRangeSomeRares: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1D8)
    ]
    SpawnPointStationToPlanetInterpRange: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1E0)
    ]
    AsteroidAnomalyAvoidRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E8)]
    AsteroidLotsOfRaresOdds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EC)]
    AsteroidNoiseOctaves: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1F0)]
    AsteroidSomeRaresOdds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F4)]
    AsteroidSpaceStationAvoidRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F8)
    ]
    AsteroidWarpInAreaAvoidRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1FC)
    ]
    AsteroidCreatureRichSystemProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x200)
    ]
    CivilianTraderSpaceshipsCacheCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x204)
    ]
    CommonAsteroidMaxResources: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x208)]
    CommonAsteroidMinResources: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20C)]
    CommonAsteroidResourceFuelMultiplier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x210)
    ]
    CommonAsteroidResourceFuelOdds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x214)
    ]
    CommonAsteroidResourceProductOdds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x218)
    ]
    CommonAsteroidResourceSecondaryOdds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x21C)
    ]
    CorruptSentinelBuildingCheckDifficulty: Annotated[
        c_enum32[enums.cGcCombatTimerDifficultyOption],
        Field(c_enum32[enums.cGcCombatTimerDifficultyOption], 0x220),
    ]
    FuelAsteroidMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x224)]
    GenerateForcedNumberPlanets: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x228)]
    LargeAsteroidFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x22C)]
    LocatorScatterChanceOfCapitalShips: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x230)
    ]
    LocatorScatterChanceOfPirates: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x234)
    ]
    LocatorScatterMaxCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x238)]
    LocatorScatterMaxDistanceFromPlanet: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x23C)
    ]
    LocatorScatterMinCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x240)]
    PercentChanceExtraPrime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x244)]
    PirateClassShipOverrideProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x248)
    ]
    PirateClassShipOverrideProbabilityPirateSystem: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x24C)
    ]
    PlanetInvalidAsteroidZone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x250)]
    PlanetRingProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x254)]
    RareAsteroidDataProductOdds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x258)]
    RareAsteroidMaxResources: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x25C)]
    RareAsteroidMinResources: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x260)]
    RareAsteroidResourceFuelOdds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x264)
    ]
    RareAsteroidSystemOddsBlue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x268)]
    RareAsteroidSystemOddsGreen: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x26C)]
    RareAsteroidSystemOddsPurple: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x270)
    ]
    RareAsteroidSystemOddsRed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x274)]
    RareAsteroidSystemOddsYellow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x278)
    ]
    SolarSystemMaximumRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x27C)]
    SolarSystemMaximumRadiusMassive: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x280)
    ]
    SparseAsteroidSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x284)]
    StationSpawnAvoidRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x288)]
    AsteroidScaleVarianceCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x28C)
    ]
    AsteroidsCheckNoise: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28D)]
    AsteroidsEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28E)]
    GenerateMaximumSolarSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28F)]
    MassiveSolarSystems: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x290)]
    UseSingleRacePerSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x291)]
    UseCorruptSentinelLUT: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x292)]


@partial_struct
class cGcScratchpadGlobals(Structure):
    IBLMaps: Annotated[
        basic.cTkDynamicArray[cGcPresetTextureData],
        Field(basic.cTkDynamicArray[cGcPresetTextureData], 0x0),
    ]
    OverlayTextures: Annotated[
        basic.cTkDynamicArray[cGcPresetTextureData],
        Field(basic.cTkDynamicArray[cGcPresetTextureData], 0x10),
    ]
    TerrainColours: Annotated[
        basic.cTkDynamicArray[basic.Colour],
        Field(basic.cTkDynamicArray[basic.Colour], 0x20),
    ]
    TerrainTextures: Annotated[
        basic.cTkDynamicArray[cGcPresetTextureData],
        Field(basic.cTkDynamicArray[cGcPresetTextureData], 0x30),
    ]


@partial_struct
class cGcSimulationGlobals(Structure):
    AbandonedSpaceStationFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    AtlasStationAnomalies: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x10),
    ]
    BlackHoleAnomalies: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x20),
    ]
    BlackHoleTunnelFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    HeavyAirAbandonedFreighter: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    HeavyAirCave: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    HeavyAirSpaceStormDefault: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    HeavyAirSpaceStormList: Annotated[
        basic.cTkDynamicArray[cGcSpaceStormData],
        Field(basic.cTkDynamicArray[cGcSpaceStormData], 0x70),
    ]
    HeavyAirUnderwater: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)
    ]
    MultitoolPool: Annotated[
        basic.cTkDynamicArray[cGcMultitoolPoolData],
        Field(basic.cTkDynamicArray[cGcMultitoolPoolData], 0x90),
    ]
    NexusExteriorFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xA0)
    ]
    NexusFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xB0)
    ]
    None_: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xC0)]
    PirateSystemSpaceStationFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xD0)
    ]
    PlaceMarkerFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    PlacementDroneFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xF0)
    ]
    PlanetAtmosphereFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x100)
    ]
    PlanetAtmosphereMaterialFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x110)
    ]
    PlanetGasGiantAtmosphereFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x120)
    ]
    PlanetGasGiantAtmosphereMaterialFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x130)
    ]
    PlanetMaterialFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x140)
    ]
    PlanetRingFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x150)
    ]
    PlanetRingMaterialFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x160)
    ]
    PlanetTerrainMaterials: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x170),
    ]
    PortalStoryTunnelFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x180)
    ]
    PortalTunnelFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x190)
    ]
    PrefetchMaterialResources: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x1A0),
    ]
    PrefetchScenegraphResources: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x1B0),
    ]
    PrefetchTextureResources: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x1C0),
    ]
    SpaceStationFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1D0)
    ]
    StartingSceneFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1E0)
    ]
    TeleportTunnelFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1F0)
    ]
    WarpTunnelFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x200)
    ]
    ProceduralBuildingsGenerationSeed: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x210)
    ]
    GasGiantFadeDistanceEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x218)]
    GasGiantFadeDistanceStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x21C)]
    GasGiantFlowSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x220)]
    GasGiantFlowStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x224)]
    WarpTunnelScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x228)]


@partial_struct
class cGcRichPresenceGlobals(Structure):
    EvaluationPeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    GameModePriority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    IdleThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    PlanetLocationPriority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    PublishPeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SpaceCombatPriority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    SpaceLocationPriority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    StormLocationPriority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    ShowOnScreen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcSceneOptions(Structure):
    AtmosphereFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    BiomeFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    CaveBiomeFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    ForceResource: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x30),
    ]
    TerrainFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    WaterBiomeFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    ForceResourceSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    RecentToolboxIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x64)]
    SelectedToolboxIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    OverrideAtmosphere: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6C)]
    OverrideBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6D)]
    OverrideCaveBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6E)]
    OverrideTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6F)]
    OverrideWaterBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]


@partial_struct
class cGcPlacementGlobals(Structure):
    LodDistancesDetail: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    LodDistancesDistant: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    LodDistancesLandmark: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    LodDistancesObject: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    AddToLodDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    HighInterpValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    InterpValueVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    LowInterpValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    MaxDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    MaxFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    MaxPatchSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    MaxPatchVariance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6C)]
    MidInterpValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    MinDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    MinFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    MinPatchSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    MinPatchVariance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x80)]
    MultiplyLodDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]


@partial_struct
class cGcMultiplayerGlobals(Structure):
    EpicMissionIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    EpicMissionIconNotSelected: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x18)
    ]
    EpicMissionIconSelected: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x30)
    ]
    EpicMissionRewardOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    EpicMissionSecondReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    NexusMissionStandardReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x68)]
    QuicksilverMissionSecondReward: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x78)
    ]
    StandardMissionSecondReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x88)]
    WeekendMissionSecondReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x98)]
    AbandonedEntityWaitPeriod: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA8)]
    FullSimHandUpdateDistance: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xB0)]
    FullSimHandUpdateInterval: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xB8)]
    BaseHeaderBroadcastInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    BlobHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    ChanceMissionEpic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    CharacterDirectionLerpModifier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCC)
    ]
    ConstantScoreDepletionRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    DisconnectionDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    DistanceBetweenTeleportMovementEffects: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD8)
    ]
    EditMessageInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    EditMessageReceivedSyncBackOffTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE0)
    ]
    EditMessageSentSyncBackOffTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE4)
    ]
    EntityUpdateMaxRateDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    EntityUpdateMinRateDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    FactorScoreDepletionRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    FullSimHandUpdateDisabledDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF4)
    ]
    FullSimUpdateInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    HashCheckMessageInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    HashCheckMessageOverdueDistanceDivisor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x100)
    ]
    HashMessageSentCooldown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x104)]
    HashReceivedCooldown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x108)]
    HostBiasScore: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    HostOnConnectedTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    InviteInteractionTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    JoinInteractionTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    MaxDownloadableBases: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x11C)]
    MaxSyncResponsesPerHash: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x120)]
    MessageQueueSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x124)]
    MessageQueueSizeDropUnreliable: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x128)
    ]
    MinScore: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C)]
    MissionRecurrenceTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x130)]
    MissionWaitOnceAllPlayersReadyTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x134)
    ]
    NewBlockMessageInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x138)]
    NewBlockMessageOverdueDistanceDivisor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13C)
    ]
    NewBlockMessageSentCooldown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x140)]
    NewerHashReceivedCooldown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x144)]
    NPCInteractionTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    NPCReplicateEndDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    NPCReplicateStartDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150)]
    PlaceholderBroadcastInterval: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x154)
    ]
    PlanetLocalEnitityInterestEnd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x158)
    ]
    PlanetLocalEnitityInterestStart: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15C)
    ]
    PlayerInteractCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160)]
    PlayerMarkerDisplayDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x164)]
    PlayerMarkerLargeIconCloseSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x168)
    ]
    PlayerMarkerLargeIconDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16C)]
    PlayerMarkerLargeIconFarSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x170)
    ]
    PlayerMarkerMinShowDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x174)]
    PlayerMarkerScreenOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x178)]
    PlayerMarkerSmallIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C)]
    RemoveDuplicateChatMessageTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x180)
    ]
    ShipDirectionLerpModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x184)]
    ShipLandShakeMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x188)]
    ShipSyncConvervengeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18C)
    ]
    StatSyncRadiusPlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x190)]
    StatSyncRadiusSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x194)]
    SyncMessageInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198)]
    TransactionTimeout: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x19C)]
    UpdateSlerpModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A0)]
    UsefulSyncResponseCooldown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A4)]
    UsefulSyncResponseScore: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A8)]
    UselessSyncResponseCooldown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1AC)]
    UselessSyncResponseScore: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B0)]
    VehicleStickLerpModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B4)]
    VehicleThrottleLerpModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B8)]
    PlayerMarkerCenteredName: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BC)]
    VoiceChatEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BD)]


@partial_struct
class cGcGraphicsGlobals(Structure):
    ImGui: Annotated[cTkImGuiSettings, Field(cTkImGuiSettings, 0x0)]
    ShellsSettings: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x190)]
    TessSettings: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x1D0)]
    LightShaftProperties: Annotated[
        cGcLightShaftProperties, Field(cGcLightShaftProperties, 0x210)
    ]
    StormLightShaftProperties: Annotated[
        cGcLightShaftProperties, Field(cGcLightShaftProperties, 0x240)
    ]
    LensParams: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x270)]
    MipLevelDebug: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x280)]
    ScanColour: Annotated[basic.Colour, Field(basic.Colour, 0x290)]
    ShadowBias: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x2A0)]
    ShadowSplit: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x2B0)]
    ShadowSplitCameraView: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x2C0)]
    ShadowSplitShip: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x2D0)]
    ShadowSplitSpace: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x2E0)]
    ShadowSplitStation: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x2F0)]
    TaaSettings: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x300)]
    TerrainMipDistanceHigh: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x310)]
    TerrainMipDistanceLow: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x320)]
    TerrainMipDistanceMed: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x330)]
    TerrainMipDistanceUlt: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x340)]
    UIColour: Annotated[basic.Colour, Field(basic.Colour, 0x350)]
    UIShipColour: Annotated[basic.Colour, Field(basic.Colour, 0x360)]
    VerticalColourBottom: Annotated[basic.Colour, Field(basic.Colour, 0x370)]
    VerticalColourTop: Annotated[basic.Colour, Field(basic.Colour, 0x380)]
    VerticalGradient: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x390)]
    CascadeRenderSequence: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x3A0),
    ]
    GraphicsDetailPresetsPC: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x3B0)
    ]
    GraphicsDetailPresetiOS: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x540)
    ]
    GraphicsDetailPresetMacOS: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x5A4)
    ]
    GraphicsDetailPresetNX64Handheld: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x608)
    ]
    GraphicsDetailPresetOberon: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x66C)
    ]
    GraphicsDetailPresetPS4: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x6D0)
    ]
    GraphicsDetailPresetPS4Pro: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x734)
    ]
    GraphicsDetailPresetPS4ProVR: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x798)
    ]
    GraphicsDetailPresetPS4VR: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x7FC)
    ]
    GraphicsDetailPresetPS5: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x860)
    ]
    GraphicsDetailPresetPS5VR: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x8C4)
    ]
    GraphicsDetailPresetSwitch2Handheld: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x928)
    ]
    GraphicsDetailPresetTrinity: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x98C)
    ]
    GraphicsDetailPresetTrinityVR: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x9F0)
    ]
    GraphicsDetailPresetXB1: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0xA54)
    ]
    GraphicsDetailPresetXB1X: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0xAB8)
    ]
    VariableUpdatePeriodModifers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB1C)
    ]
    WindDir1: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xB2C)]
    WindDir2: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xB34)]
    AlphaCutoutMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB3C)]
    AlphaCutoutMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB40)]
    AtmosphereSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB44)]
    Brightness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB48)]
    Contrast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4C)]
    DirectionLightFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB50)]
    DirectionLightRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB54)]
    DirectionLightShadowBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB58)]
    DOFAmountManual: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB5C)]
    DOFAmountManualFull: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB60)]
    DOFAmountManualFullIndoor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB64)]
    DOFAmountManualLight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB68)]
    DOFAmountManualLightIndoor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB6C)]
    DOFAutoFarAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB70)]
    DOFAutoFarFarPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB74)]
    DOFAutoFarFarPlaneFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB78)]
    DOFAutoFarNearPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB7C)]
    DOFFarFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB80)]
    DOFFarFadeDistanceCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB84)]
    DOFFarFadeDistanceInteraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB88)
    ]
    DOFFarFadeDistanceManual: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8C)]
    DOFFarFadeDistanceManualIndoor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB90)
    ]
    DOFFarFadeDistanceSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB94)]
    DOFFarFadeDistanceWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB98)]
    DOFFarPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB9C)]
    DOFFarPlaneCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA0)]
    DOFFarPlaneInteraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA4)]
    DOFFarPlaneManual: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA8)]
    DOFFarPlaneSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBAC)]
    DOFFarPlaneWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB0)]
    DOFFarStrengthWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB4)]
    DOFNearAdjustInteraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB8)]
    DOFNearFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBBC)]
    DOFNearFadeDistanceManual: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC0)]
    DOFNearMinInteraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC4)]
    DOFNearPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC8)]
    FarClipDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBCC)]
    FoliageSaturationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD0)]
    FoliageSaturationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD4)]
    FoliageValueMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD8)]
    FoliageValueMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBDC)]
    FrustumJitterAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE0)]
    FrustumJitterAmountDLSS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE4)]
    GrassSaturationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE8)]
    GrassSaturationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBEC)]
    GrassValueMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF0)]
    GrassValueMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF4)]
    HBAOBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF8)]
    HBAOIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBFC)]
    HBAORadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC00)]
    HDRExposure: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC04)]
    HDRExposureCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC08)]
    HDRGamma: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0C)]
    HDRLutExposure: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC10)]
    HDRLutGamma: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC14)]
    HDRLutToe: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC18)]
    HDROffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC1C)]
    HDROffsetCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC20)]
    HDRThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC24)]
    HDRThresholdCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC28)]
    HUDDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC2C)]
    HUDMotionPos: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC30)]
    HUDMotionPosSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC34)]
    HUDMotionX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC38)]
    HUDMotionXSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC3C)]
    HUDMotionY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC40)]
    HUDMotionYSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC44)]
    HueVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC48)]
    LensDirt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4C)]
    LensDirtCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC50)]
    LensOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC54)]
    LensOffsetCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC58)]
    LensScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC5C)]
    LensScaleCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC60)]
    LensThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC64)]
    LensThresholdCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC68)]
    LowHealthDesaturationIntensityMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC6C)
    ]
    LowHealthDesaturationIntensityMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC70)
    ]
    LowHealthDesaturationIntensityTimeSinceHit: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC74)
    ]
    LowHealthFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC78)]
    LowHealthFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC7C)]
    LowHealthOverlayIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC80)]
    LowHealthPulseRateFullShield: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC84)
    ]
    LowHealthPulseRateLowShield: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC88)]
    LowHealthStrengthFullShield: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8C)]
    LowHealthStrengthLowShield: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC90)]
    LowHealthVignetteEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC94)]
    LowHealthVignetteStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC98)]
    LUTDistanceFlightMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC9C)]
    MaxParticleRenderRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA0)]
    MaxParticleRenderRangeSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA4)]
    MaxSpaceFogStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA8)]
    MinPixelSizeOfObjectsInShadowsCockpitOnPlanet: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCAC)
    ]
    MinPixelSizeOfObjectsInShadowsPlanet: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCB0)
    ]
    MinPixelSizeOfObjectsInShadowsSpace: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCB4)
    ]
    ModelRendererLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB8)]
    MotionBlurShutterAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCBC)]
    MotionBlurShutterSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC0)]
    MotionBlurThresholdDefault: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC4)]
    MotionBlurThresholdInVehicle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCC8)
    ]
    MotionBlurThresholdOnFoot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCCC)]
    MotionBlurThresholdSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD0)]
    NearClipDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD4)]
    New_BounceLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD8)]
    New_BounceLightPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCDC)]
    New_BounceLightWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE0)]
    New_SideRimColourMixer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE4)]
    New_SideRimWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE8)]
    New_SkyLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCEC)]
    New_SkyLightPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF0)]
    New_SkyLightWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF4)]
    New_TopRimColourMixer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF8)]
    New_TopRimIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCFC)]
    New_TopRimPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD00)]
    New_TopRimWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD04)]
    NoFocusMaxFPS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD08)]
    Old_BounceLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0C)]
    Old_BounceLightPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD10)]
    Old_BounceLightWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD14)]
    Old_SideRimColourMixer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD18)]
    Old_SideRimWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD1C)]
    Old_SkyLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD20)]
    Old_SkyLightPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD24)]
    Old_SkyLightWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD28)]
    Old_TopRimColourMixer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD2C)]
    Old_TopRimIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD30)]
    Old_TopRimPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD34)]
    Old_TopRimWarp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD38)]
    PetModelRendererLightIntensity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD3C)
    ]
    PhotoModeBloomGainMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD40)]
    PhotoModeBloomGainMedium: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD44)]
    PhotoModeBloomGainMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD48)]
    PhotoModeBloomThresholdMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4C)]
    PhotoModeBloomThresholdMedium: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD50)
    ]
    PhotoModeBloomThresholdMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD54)]
    PhotoModeDefaultBloomValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD58)]
    PhotoModeMediumValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD5C)]
    QuantizeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD60)]
    QuantizeTimeCameraView: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD64)]
    QuantizeTimeShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD68)]
    QuantizeTimeSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD6C)]
    Redo_BounceIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD70)]
    Redo_LightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD74)]
    Redo_SkyIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD78)]
    ReflectionStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD7C)]
    RingAvoidanceSphereInterpTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD80)
    ]
    RingRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD84)]
    RingSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD88)]
    Saturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8C)]
    SaturationVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD90)]
    ScanAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD94)]
    ScanBandWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD98)]
    ScanClamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD9C)]
    ScanDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDA0)]
    ScanEffectSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDA4)]
    ScanFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDA8)]
    ScanFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDAC)]
    ScanFresnel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDB0)]
    ScanHeightScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDB4)]
    ScanHorizontalScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDB8)]
    ScanObjectFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDBC)]
    ShadowBillboardOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC0)]
    ShadowLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC4)]
    ShadowLengthCameraView: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC8)]
    ShadowLengthFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDCC)]
    ShadowLengthFreighterAbandoned: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDD0)
    ]
    ShadowLengthShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDD4)]
    ShadowLengthSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDD8)]
    ShadowLengthStation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDDC)]
    ShadowMapSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xDE0)]
    SharpenFilterAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDE4)]
    SharpenFilterDepthFactorEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDE8)]
    SharpenFilterDepthFactorStart: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDEC)
    ]
    ShieldDownScanlineTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF0)]
    Single1ScanBandWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF4)]
    Single1ScanEffectSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF8)]
    Single1ScanHeightScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDFC)]
    Single1ScanHorizontalScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE00)]
    Single1ScanObjectFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE04)]
    Single1ScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE08)]
    Single2ScanBandWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0C)]
    Single2ScanEffectSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE10)]
    Single2ScanHeightScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE14)]
    Single2ScanHorizontalScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE18)]
    Single2ScanObjectFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE1C)]
    Single2ScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE20)]
    SkySaturationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE24)]
    SkySaturationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE28)]
    SkyValueMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE2C)]
    SkyValueMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE30)]
    SpaceIBLBlendDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE34)]
    SpaceIBLBlendStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE38)]
    SpaceMieFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE3C)]
    SpaceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE40)]
    SpaceSunFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE44)]
    SunLightBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE48)]
    SunLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4C)]
    SunRayDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE50)]
    SunRayDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE54)]
    SunRayExposure: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE58)]
    SunRayWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE5C)]
    SupersamplingLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE60)]
    TaaAccumDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE64)]
    TaaHighFreqConstant: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE68)]
    TaaLowFreqConstant: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE6C)]
    TargetTextureMemUsageMB: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE70)]
    TeleportFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE74)]
    TerrainAnisoHi: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE78)]
    TerrainAnisoLow: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE7C)]
    TerrainAnisoMed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE80)]
    TerrainAnisoUlt: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE84)]
    TerrainBlocksPerFrameHi: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE88)]
    TerrainBlocksPerFrameLow: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE8C)]
    TerrainBlocksPerFrameMed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE90)]
    TerrainBlocksPerFrameOberon: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE94)]
    TerrainBlocksPerFramePs430: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE98)]
    TerrainBlocksPerFramePs460: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE9C)]
    TerrainBlocksPerFrameUlt: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEA0)]
    TerrainBlocksPerFrameXb130: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEA4)]
    TerrainBlocksPerFrameXb160: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEA8)]
    TerrainDroppedMipsLow: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEAC)]
    TerrainDroppedMipsMed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEB0)]
    TerrainMipBiasLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEB4)]
    TerrainMipBiasMed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEB8)]
    ToneMapExposure: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEBC)]
    ToneMapExposureCave: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC0)]
    ValueVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC4)]
    VignetteEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC8)]
    VignetteEndMoveVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xECC)]
    VignetteEndMoveVRShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xED0)]
    VignetteEndRidingVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xED4)]
    VignetteEndTurnRidingVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xED8)]
    VignetteEndTurnVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEDC)]
    VignetteEndTurnVRShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEE0)]
    VignetteStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEE4)]
    VignetteStartMoveVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEE8)]
    VignetteStartMoveVRShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEEC)]
    VignetteStartRidingVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEF0)]
    VignetteStartTurnRidingVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEF4)]
    VignetteStartTurnVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEF8)]
    VignetteStartTurnVRShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEFC)]
    VignetteVRMoveInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF00)]
    VignetteVRMoveInterpTimeShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF04)
    ]
    VignetteVRRidingInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF08)]
    VignetteVRTurnInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0C)]
    VignetteVRTurnInterpTimeShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF10)
    ]
    VignetteVRTurnRidingInterpTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF14)
    ]
    WarpK: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF18)]
    WarpKCube: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF1C)]
    WarpKDispersion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF20)]
    WarpScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF24)]
    WaterHueShift: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF28)]
    WaterSaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF2C)]
    WaterValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF30)]
    WonderModelRendererLightIntensity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF34)
    ]
    AllowPartialCascadeRender: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF38)]
    ApplyTaaTest: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF39)]
    CenterRenderSpaceOffset: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF3A)]
    DebugLinesDepthTest: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF3B)]
    DOFEnablePhysCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF3C)]
    EnableCrossPipeSharing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF3D)]
    EnableSSR: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF3E)]
    EnableTerrainCachePs4Base: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF3F)]
    EnableTerrainCachePs4Pro: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF40)]
    EnableTerrainCachePs5: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF41)]
    EnableTerrainCacheXb1Base: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF42)]
    EnableTerrainCacheXb1X: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF43)]
    EnableTerrainCacheXboxSeriesS: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF44)]
    EnableTerrainCacheXboxSeriesX: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF45)]
    EnableTextureStreaming: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF46)]
    EnableVariableUpdate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF47)]
    ForceCachedTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF48)]
    ForceEvictAllTextures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF49)]
    ForceStreamAllTextures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF4A)]
    ForceUncachedTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF4B)]
    FullscreenScanEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF4C)]
    IBLReflections: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF4D)]
    Redo_On: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF4E)]
    ShadowQuantized: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF4F)]
    ShowReflectionProbes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF50)]
    ShowTaaBuf: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF51)]
    ShowTaaCVarianceBuf: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF52)]
    ShowTaaNVarianceBuf: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF53)]
    ShowTaaVarianceBuf: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF54)]
    TonemapInLuminance: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF55)]
    UseImposters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF56)]
    UseTaaResolve: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF57)]


@partial_struct
class cGcFishingGlobals(Structure):
    CastLaunchOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    LineColourBite: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    LineColourChase: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    LineColourDefault: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    LineColourFail: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    LineColourLand: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    LineColourNibble: Annotated[basic.Colour, Field(basic.Colour, 0x60)]
    RodFirstPersonOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70)]
    RodFirstPersonOffsetReelIn: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x80)]
    VRRodOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x90)]
    VRRodRotation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xA0)]
    BaitFlickBobCurve: Annotated[
        cGcCompositeCurveData, Field(cGcCompositeCurveData, 0xB0)
    ]
    BaitFlickLineCurve: Annotated[
        cGcCompositeCurveData, Field(cGcCompositeCurveData, 0xC8)
    ]
    SizeWeightsBiomeOverrides: Annotated[
        basic.cTkDynamicArray[cGcFishSizeProbabilityBiomeOverride],
        Field(basic.cTkDynamicArray[cGcFishSizeProbabilityBiomeOverride], 0xE0),
    ]
    SizeWeights: Annotated[cGcFishSizeProbability, Field(cGcFishSizeProbability, 0xF0)]
    FishMass: Annotated[cGcGaussianCurveData, Field(cGcGaussianCurveData, 0x130)]
    BaitRarityBoostTotalScoreQualityScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x150)
    ]
    MaxSeaHarvesterCaughtFish: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x164)]
    QualityWeights: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x178)]
    BaitSizeBoostTotalScoreQualityScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18C)
    ]
    ChaseTimes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C)]
    MysteryFishScales: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC)]
    BaitCookingValueMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC)]
    BaitFlickBobHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C0)]
    BaitFlickBobHeightLean: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C4)]
    BaitFlickBobTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C8)]
    BaitFlickBobTimeLean: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC)]
    BaitFlickBobTimeOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D0)]
    BaitFlickEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D4)]
    BaitRandScoreCookingValueFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D8)
    ]
    BaitRarityBoostTotalScoreMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1DC)
    ]
    BaitRarityBoostTotalScoreMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E0)
    ]
    BaitSizeBoostTotalScoreMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E4)]
    BaitSizeBoostTotalScoreMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E8)]
    BaitWeatherBoostScoreThresholdForNotes: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1EC)
    ]
    CastGravity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F0)]
    CastLaunchAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F4)]
    CastLaunchDelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F8)]
    CastVelocityBlendFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC)]
    DebugSceneCastDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x200)]
    DebugSceneFlicktimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x204)]
    DebugSceneFlicktimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x208)]
    FirstPersonMaxTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C)]
    FirstPersonPitchMaxSpeedScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x210)
    ]
    FirstPersonPitchMaxSpeedYawAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x214)
    ]
    FirstPersonPitchMinSpeedScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x218)
    ]
    FirstPersonPitchMinSpeedYawAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x21C)
    ]
    FirstPersonPullBackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x220)]
    FirstPersonPullBackSpeedScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x224)
    ]
    FirstPersonTurnSpeedBaseScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x228)
    ]
    FishCatchAfterBiteTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x22C)]
    FishingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x230)]
    FishingRangeVRMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x234)]
    FishMouthOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x238)]
    FishNibbleOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x23C)]
    FishWaterDisplacementSmoothTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x240)
    ]
    FloatTiltAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x244)]
    FloatTiltIntoTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x248)]
    FloatTiltOutOfTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24C)]
    FloatTiltThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x250)]
    LandTimeBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x254)]
    LandTimeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x258)]
    LeanCausesBobThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x25C)]
    LineAttachmentOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x260)]
    LineBiteSag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x264)]
    LineBrightness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x268)]
    LineColourChangeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x26C)]
    LineColourChangeRateBite: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x270)]
    LineColourChangeRateNibble: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x274)]
    LineFlickSag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x278)]
    LineNibbleSag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x27C)]
    LineWaitSag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x280)]
    LineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x284)]
    MaxWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x288)]
    MinVelocityToCast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28C)]
    MinWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x290)]
    ReelHoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x294)]
    RequiredBackCastAngleDegrees: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x298)
    ]
    RequiredCastAngleDegrees: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x29C)]
    SeaHarvesterAverageCatchTimeSeconds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2A0)
    ]
    StormThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2A4)]
    ThirdPersonLeanMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2A8)]
    ThirdPersonLeanMidpointAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2AC)
    ]
    ThirdPersonLeanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2B0)]
    VRCastStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2B4)]
    WaveStrengthBite: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2B8)]
    WaveStrengthBob: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2BC)]
    WaveStrengthLand: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C0)]
    EnableFirstPersonPitchSpeedScaling: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2C4)
    ]
    EnableFirstPersonYawPullback: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C5)]
    EnableFirstPersonYawTurnSpeedScaling: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2C6)
    ]
    FirstPersonPitchSpeedCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x2C7)
    ]
    FirstPersonPullBackSpeedCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x2C8)
    ]
    FirstPersonTurnSpeedCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x2C9)
    ]
    LineSagCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x2CA)
    ]
    LineUsesLineRenderer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2CB)]


@partial_struct
class cGcEnvironmentGlobals(Structure):
    CloudProperties: Annotated[cGcCloudProperties, Field(cGcCloudProperties, 0x0)]
    IndoorAmbientColour: Annotated[basic.Colour, Field(basic.Colour, 0xE0)]
    IndoorsLightingFactorFreighterAbandoned: Annotated[
        basic.Colour, Field(basic.Colour, 0xF0)
    ]
    IndoorsLightingFactorPlanet: Annotated[basic.Colour, Field(basic.Colour, 0x100)]
    IndoorsLightingFactorSpaceStation: Annotated[
        basic.Colour, Field(basic.Colour, 0x110)
    ]
    IndoorsLightingFactorSpaceStationAbandoned: Annotated[
        basic.Colour, Field(basic.Colour, 0x120)
    ]
    IndoorsLightingFactorSpaceStationPirate: Annotated[
        basic.Colour, Field(basic.Colour, 0x130)
    ]
    FarBlendHeight: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x140),
    ]
    ShearWindSettings: Annotated[
        basic.cTkDynamicArray[cTkShearWindData],
        Field(basic.cTkDynamicArray[cTkShearWindData], 0x150),
    ]
    SkyAtmosphereBlendLength: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x160),
    ]
    SkyBlendLength: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x170),
    ]
    SpacePlanetFogStrength: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x180),
    ]
    LODSettings: Annotated[cTkLODSettingsData, Field(cTkLODSettingsData, 0x190)]
    EnvironmentGasGiantProperties: Annotated[
        cGcEnvironmentProperties, Field(cGcEnvironmentProperties, 0x3E0)
    ]
    EnvironmentPrimeProperties: Annotated[
        cGcEnvironmentProperties, Field(cGcEnvironmentProperties, 0x45C)
    ]
    EnvironmentProperties: Annotated[
        cGcEnvironmentProperties, Field(cGcEnvironmentProperties, 0x4D8)
    ]
    DynamicTreeWindFrequency: Annotated[
        cTkDynamicTreeWindFrequency, Field(cTkDynamicTreeWindFrequency, 0x554)
    ]
    ExposureHeightBracket: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x574)]
    SpaceBuildingTemperature: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x57C)]
    AbandonedFreighterMaxTemperature: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x584)
    ]
    AbandonedFreighterMinTemperature: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x588)
    ]
    AsteroidFadeHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58C)]
    AsteroidFadeHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x590)]
    AsteroidFieldStableEnterTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x594)
    ]
    AsteroidFieldStableLeaveTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x598)
    ]
    AsteroidMaxRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x59C)]
    AsteroidMinRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5A0)]
    AsteroidScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5A4)]
    AtmosphereSpaceRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5A8)]
    CameraLocationStableTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5AC)]
    CreatureFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5B0)]
    DailyTempChangePercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5B4)]
    DeepWaterDepthTransitionMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5B8)]
    DeepWaterDepthTransitionMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5BC)]
    DeepWaterOxygenMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C0)]
    DistortionStep: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C4)]
    DoFHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C8)]
    DoFHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5CC)]
    DuplicateColourThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5D0)]
    ExposureGroundFactorAddMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5D4)]
    ExposureSurfaceContrib: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5D8)]
    ExposureSurfaceDistMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5DC)]
    FarBlendLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5E0)]
    FloraFadeTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5E4)]
    FloraFadeTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5E8)]
    GrassNormalMap: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5EC)]
    GrassNormalOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5F0)]
    GrassNormalSpherify: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5F4)]
    GrassNormalUpright: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5F8)]
    HDeform: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5FC)]
    HeavyAirFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x600)]
    HeavyAirFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x604)]
    HeavyAirFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x608)]
    HeightFogHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60C)]
    HotspotsLOD: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x610)]
    IblUndergroundFadeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x614)]
    IblUndergroundLightDirectionHorizonBias: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x618)
    ]
    IblUndergroundLightIntensity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x61C)
    ]
    IndoorColourBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x620)]
    IndoorsLightingAbandonedFreighterMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x624)
    ]
    IndoorsLightingFreighterMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x628)]
    IndoorsLightingNexusMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x62C)]
    IndoorsLightingPlanetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x630)]
    IndoorsLightingSpaceStationAbandonedMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x634)
    ]
    IndoorsLightingSpaceStationMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x638)
    ]
    IndoorsLightingSpaceStationPirateMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x63C)
    ]
    IndoorsLightingThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x640)]
    IndoorsLightingTransitionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x644)
    ]
    IndoorsLightingWeightAround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x648)]
    IndoorsLightingWeightGround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64C)]
    IndoorsLightingWeightOverhead: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x650)
    ]
    IndoorsLightingWeightTowardsSun: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x654)
    ]
    InteractionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x658)]
    InterestStableTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x65C)]
    LightColourBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x660)]
    LightColourHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x664)]
    LightDirectionBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x668)]
    LightDirectionHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x66C)]
    LocationStableTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x670)]
    MaxElevation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x674)]
    MaxHotspotFalloffDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x678)]
    MaxHotspotOffsetDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x67C)]
    MaxMurkVarianceOverTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x680)]
    MaxPlacementBlendValuePatch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x684)]
    MinHotspotFalloffDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x688)]
    MinPlacementBlendValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68C)]
    MinPlacementBlendValuePatch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x690)]
    MinPlacementObjectScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x694)]
    MinWaterReflections: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x698)]
    ObjectSpawnDetailRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x69C)]
    ObjectSpawnFirstDotCheck: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6A0)]
    ObjectSpawnFirstRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6A4)]
    PlanetEffectEndDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6A8)]
    PlanetFlipDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6AC)]
    PlanetUnwrapMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B0)]
    PlanetUnwrapMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B4)]
    ProbeBlendRadiusEdge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B8)]
    RegionHotspotProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6BC)]
    SDeform: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C0)]
    SenseProbingValueSmoothingTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C4)
    ]
    SenseProbingValueSmoothingTimeMed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C8)
    ]
    SenseProbingValueSmoothingTimeSlow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CC)
    ]
    ShipRadiation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D0)]
    ShipSpookLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D4)]
    ShipTemperature: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D8)]
    ShipToxicity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DC)]
    SkyAtmospherePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E0)]
    SmallAsteroidScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E4)]
    SpaceRadiation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E8)]
    SpaceSpookLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EC)]
    SpaceStationStateBoundingBoxScaler: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F0)
    ]
    SpaceTemperature: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F4)]
    SpaceToxicity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F8)]
    SpawnLowerAtmosphereRadiusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6FC)
    ]
    SphereLodTextureScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x700)]
    StandardNearProbeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x704)]
    SunClampHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x708)]
    SunClampHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70C)]
    SunFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x710)]

    class eSwitchTypeEnum(IntEnum):
        None_ = 0x0
        Debug = 0x1
        Enabled = 0x2

    SwitchType: Annotated[
        c_enum32[eSwitchTypeEnum], Field(c_enum32[eSwitchTypeEnum], 0x714)
    ]
    TemperatureSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x718)]
    TerrainFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x71C)]
    TerrainFadeTimeInShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x720)]
    TerrainFlattenMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x724)]
    TerrainFlattenMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x728)]
    UndergroundFakeSkyFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72C)]
    UndergroundNearProbeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x730)]
    VDeform: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x734)]
    WaterAlphaHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x738)]
    WaterAlphaHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73C)]
    WaterChangeTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x740)]
    WaterConditionTransitionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x744)
    ]
    WaterFogHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x748)]
    WaterMurkMaxPlayerDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74C)]
    WaterMurkMinPlayerDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x750)]
    WaterMurkVariancePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x754)]
    EnableWind: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x758)]
    ForceAddCaveProps: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x759)]
    ForceAddUnderwaterProps: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x75A)]
    MatchPlantPalettes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x75B)]


@partial_struct
class cGcDebugEditorGlobals(Structure):
    AtAxisColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    CentreHandleColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    RightAxisColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    SelectedAxisTint: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    TransformingAxisTint: Annotated[basic.Colour, Field(basic.Colour, 0x40)]
    UpAxisColour: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    AxisLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AxisThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    CameraDollySpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    CameraPanSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    CameraRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    CentrePickingSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    FramingMinOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    FramingOffsetFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    LinePickingSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    MaxCameraPivotOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    MinCameraPivotOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    PlaneHandleOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    PlaneHandleSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    ScaleHandleSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    SelectedAxisTintStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    TransformArrowLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    TransformArrowRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    TransformingAxisTintStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    TransformRotationSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]


@partial_struct
class cGcCharacterGlobals(Structure):
    CharacterFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    CharacterSeedOverride: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x10)]
    LadderClimbDown: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    LadderClimbIdle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    LadderClimbUp: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    LadderDismountBottom: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    LadderDismountTop: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    LadderMountBottom: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    LadderMountTop: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    NPCStaffPropTag: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    WaterEffectBodyID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    WaterEffectLeftHandID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    WaterEffectRightHandID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    AimPitchAnimScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    AimPitchInterpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    AimYawAnimScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    BankingMaxStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    BankingMinimumSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    BankingSpeedForMaxStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    BlendToNewFeetSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    CharacterJetpackTurnAimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    CharacterJetpackTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    CharacterRotationOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    CharacterRoughHeadHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    CharacterRunTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    CharacterSwimmingTurnAimSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x100)
    ]
    CharacterSwimmingTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    CharacterTurnAimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    CharacterTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    DontShowCharacterWithinCameraDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x110)
    ]
    FeetShiftOnTurnMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    FeetShiftOnTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    FootPlantedTolerance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C)]
    FootPlantSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    GunRotationSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124)]
    HoldWeaponAsPropXRotationDegrees: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x128)
    ]
    IkBlendStrengthSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C)]
    IKLegStretchStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    JetpackSwimmingPitchRotation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x134)
    ]
    LadderCooldownAfterBeforeAutoClimb: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x138)
    ]
    LadderDistanceToAutoMount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C)]
    MaxAnkleRotationAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    MaxSwimmingPitchRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144)]
    MaxSwimmingRollRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    MinimumIdleToJogAnimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    MinStickForIntoJogAnim: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150)]
    MinSwimmingPitchRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154)]
    MinSwimmingRollRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x158)]
    MinTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C)]
    NPCActiveListenChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160)]
    NPCAnimSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x164)]
    NPCAnimSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168)]
    NPCArriveDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16C)]
    NPCBehaviourTimeModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x170)]
    NPCBlockedDestRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x174)]
    NPCCamoScanRevealTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x178)]
    NPCCamoWipeEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C)]
    NPCDecelerateStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x180)]
    NPCDisplayThoughtsMaxDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x184)
    ]
    NPCDisplayThoughtsMaxDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x188)
    ]
    NPCDisplayThoughtsProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18C)
    ]
    NPCDisplayThoughtsRefreshInterval: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x190)
    ]
    NPCFastStaticTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x194)]
    NPCFlavourIdleTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198)]
    NPCFlavourIdleTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C)]
    NPCForceProp: Annotated[
        c_enum32[enums.cGcNPCPropType], Field(c_enum32[enums.cGcNPCPropType], 0x1A0)
    ]
    NPCHackMoveUpToStopFallingThoughFloor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A4)
    ]
    NPCIKBodyWeightNormal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A8)]
    NPCIKBodyWeightNormalGek: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC)]
    NPCIKBodyWeightSeated: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B0)]
    NPCIncreasedSteeringDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B4)]
    NPCLookAtTerminateAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B8)]
    NPCLookAtThingChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC)]
    NPCLookAtThingTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C0)]
    NPCLookAtThingTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C4)]
    NPCLookAwayTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C8)]
    NPCLookAwayTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC)]
    NPCMaxFreighterInteractionSearchDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D0)
    ]
    NPCMaxInteractionSearchDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D4)]
    NPCMaxLookAtAngleMoving: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D8)]
    NPCMaxLookAtAngleStatic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DC)]
    NPCMaxRandomNavPathMaxIndoorOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E0)
    ]
    NPCMaxRandomNavPathMaxOutdoorOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E4)
    ]
    NPCMaxRandomNavPathMinIndoorOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E8)
    ]
    NPCMaxRandomNavPathMinOutdoorOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1EC)
    ]
    NPCMaxSettlementInteractionSearchDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F0)
    ]
    NPCMaxStaticTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F4)]
    NPCMaxTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F8)]
    NPCMinInteractionSearchDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC)]
    NPCMinStaticTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x200)]
    NPCMinTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x204)]
    NPCMinTurnSpeedMech: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x208)]
    NPCMoodIdleDelayChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C)]
    NPCMoodIdleLowIntensityChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x210)
    ]
    NPCNumNavFailuresUntilNoPhysFallback: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x214)
    ]
    NPCPerceptionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x218)]
    NPCPermittedNavigationDelayFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x21C)
    ]
    NPCPOISelectionNearbyNPCBaseMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x220)
    ]
    NPCPropScaleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x224)]
    NPCReactCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x228)]
    NPCReactionChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x22C)]
    NPCReactToPlayerPresenceDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x230)
    ]
    NPCReactToPlayerPresenceGloablCooldown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x234)
    ]
    NPCReactToPlayerPresenceIndividualCooldown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x238)
    ]
    NPCReactToPlayerPresenceStaticTimer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x23C)
    ]
    NPCRunSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x240)]
    NPCRunSpeedGek: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x244)]
    NPCScalingMaxRandomVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x248)]
    NPCSeatedLookAtLateralReduction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x24C)
    ]
    NPCSlowStaticTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x250)]
    NPCSpineAdjustGek: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x254)]
    NPCSpineAdjustVykeen: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x258)]
    NPCStaticDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x25C)]
    NPCStaticTimeUntilFail: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x260)]
    NPCStaticTurnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x264)]
    NPCSteeringAvoidStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x268)]
    NPCSteeringCollisionAvoidAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x26C)
    ]
    NPCSteeringCollisionAvoidStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x270)
    ]
    NPCSteeringComingTowardsDegrees: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x274)
    ]
    NPCSteeringFollowStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x278)]
    NPCSteeringObstacleAvoidStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x27C)
    ]
    NPCSteeringRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x280)]
    NPCSteeringRayLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x284)]
    NPCSteeringRaySphereSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x288)]
    NPCSteeringRaySpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28C)]
    NPCSteeringRepelDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x290)]
    NPCSteeringSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x294)]
    NPCTeleportEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x298)]
    NPCWalkSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x29C)]
    NPCWalkSpeedGek: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2A0)]
    NPCWalkSpeedMech: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2A4)]
    NPCWithScanEventReactCooldown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2A8)
    ]
    NPCWithScanEventReactToPlayerPresenceDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2AC)
    ]
    NPCWithScanEventReactToPlayerPresenceIndividualCooldown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2B0)
    ]
    PitchTest: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2B4)]
    RagdollConeLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2B8)]
    RagdollDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2BC)]
    RagdollMotorFadeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C0)]
    RagdollMotorFadeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C4)]
    RagdollTau: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C8)]
    RagdollTwistLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2CC)]
    RocketBootsLandedTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D0)]
    RocketBootsTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D4)]
    RollTest: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2D8)]
    RootedAnimInterpolationTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2DC)]
    RotateToFaceSlopeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E0)]
    RoughSeaIdleSwimmingPitchRotation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2E4)
    ]
    SitPostureChangeTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2E8)]
    SitPostureChangeTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2EC)]
    SlidingBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F0)]
    SlopeAngleForDownhillClimb: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F4)]
    SlopeAngleForSlide: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F8)]
    SlopeAngleForUphillClimb: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2FC)]
    SmoothVelocitySpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x300)]
    SwimmingPitchRotationSurfaceExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x304)
    ]
    SwimmingRollSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x308)]
    SwimmingRollSmoothTimeWithWeapon: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x30C)
    ]
    SwimmingSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x310)]
    SwimmingSmoothTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x314)]
    SwimmingSmoothTimeWithWeapon: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x318)
    ]
    TimeAfterDeathRagdollIsEnabledBackward: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x31C)
    ]
    TimeAfterDeathRagdollIsEnabledForward: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x320)
    ]
    TimeAfterDeathRagdollIsEnabledWhenBlocked: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x324)
    ]
    TimeFallingUntilPanic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x328)]
    TimeNotOnGroundToBeConsideredInAir: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x32C)
    ]
    TimeNotOnGroundToUseFallingCamera: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x330)
    ]
    TimeToShowSplashEffect: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x334)]
    TrudgeUphillSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x338)]
    UnderwaterToAirTolerance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x33C)]
    UphillSpeedMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x340)]
    WaterBottomSmoothPushUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x344)]
    WaterBottomSmoothPushUpDepth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x348)
    ]
    WaterEffectFadeSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34C)]
    WaterEffectSpeedFadeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x350)]
    WaterEffectSpeedFadeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x354)]
    YawPullSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x358)]
    NPCBehaviourInfo: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35C)]
    NPCLightsAlwaysOn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35D)]
    NPCLookAtEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35E)]
    NPCUseBehaviourTree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35F)]


@partial_struct
class cGcCollisionTable(Structure):
    CollisionTable: Annotated[
        basic.cTkDynamicArray[cGcPhysicsCollisionGroupCollidesWith],
        Field(basic.cTkDynamicArray[cGcPhysicsCollisionGroupCollidesWith], 0x0),
    ]


@partial_struct
class cGcAtlasGlobals(Structure):
    ChanceOfDisconnect: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    TimeoutSecConnection: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    TimeoutSecNameResolution: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    TimeoutSecSendRecv: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]


@partial_struct
class cGcTelemetryStat(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Type: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Value: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcStatValueData(Structure):
    Denominator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FloatValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    IntValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]


@partial_struct
class cGcStatLevelData(Structure):
    LevelName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    LevelNameUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    OSDLevelName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    TrophyToUnlock: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Value: Annotated[cGcStatValueData, Field(cGcStatValueData, 0x70)]


@partial_struct
class cGcStatRewardGroupStatData(Structure):
    StatID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ManualAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    StatMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcStatRewardGroup(Structure):
    LocIDMultiple: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    LocIDSingle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x40)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    Stats: Annotated[
        basic.cTkDynamicArray[cGcStatRewardGroupStatData],
        Field(basic.cTkDynamicArray[cGcStatRewardGroupStatData], 0x68),
    ]
    BaseMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    Currency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x7C)
    ]


@partial_struct
class cGcStatusMessageDefinition(Structure):
    CustomPrefixLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Message: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    DisplayDurationMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    MissionMarkup: Annotated[
        c_enum32[enums.cGcStatusMessageMissionMarkup],
        Field(c_enum32[enums.cGcStatusMessageMissionMarkup], 0x58),
    ]

    class eReplicateToEnum(IntEnum):
        None_ = 0x0
        Fireteam = 0x1
        Fireteam_SameUA = 0x2
        Global = 0x3
        Global_Distance = 0x4
        Fireteam_Distance = 0x5
        Fireteam_Global_Distance = 0x6
        Not_Fireteam = 0x7

    ReplicateTo: Annotated[
        c_enum32[eReplicateToEnum], Field(c_enum32[eReplicateToEnum], 0x5C)
    ]
    AddFriendlyDronePrefix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    AddPetNamePrefix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]
    AddPlayerNamePrefix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x62)]
    IncludePlayerName: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x63)]
    OnlyInMultiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]
    OnlyOnFireteam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x65)]
    PostLocally: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x66)]


@partial_struct
class cGcStatDefinition(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DefaultValue: Annotated[cGcStatValueData, Field(cGcStatValueData, 0x10)]
    DisplayType: Annotated[
        c_enum32[enums.cGcStatDisplayType],
        Field(c_enum32[enums.cGcStatDisplayType], 0x1C),
    ]
    MissionMessageDecimals: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    TrackType: Annotated[
        c_enum32[enums.cGcStatTrackType], Field(c_enum32[enums.cGcStatTrackType], 0x24)
    ]
    Type: Annotated[
        c_enum32[enums.cGcStatType], Field(c_enum32[enums.cGcStatType], 0x28)
    ]
    IsProgression: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    TelemetryUpload: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]


@partial_struct
class cGcStatGroupData(Structure):
    GroupName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TrackedStats: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]


@partial_struct
class cGcPlayerTitle(Structure):
    AlreadyUnlockedDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    UnlockDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    RevealedBy: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    TitleUnlocksSpecials: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x80),
    ]
    UnlockedByMission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    UnlockedByProductRecipe: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    UnlockedByStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    UnlockedByTrophy: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    UnlockedByInteraction: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0xD0),
    ]
    UnlockedByInteractionIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD4)]
    UnlockedByInteractionRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0xD8)
    ]
    UnlockedByLeveledStatRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xDC)]
    UnlockedByStatValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    UnlockedByInteractionOnlyTestMainRaces: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xE4)
    ]


@partial_struct
class cGcJourneyMilestoneData(Structure):
    JourneyMilestoneTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    JourneyMilestoneTitleLower: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    JourneyMilestoneId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    PointsToUnlock: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]


@partial_struct
class cGcFriendlyDroneVocabularyEntry(Structure):
    GenericFallback: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]


@partial_struct
class cGcLeveledStatData(Structure):
    StatLevels: Annotated[cGcStatLevelData, Field(cGcStatLevelData, 0x0)]
    NotifyMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x580)
    ]
    NotifyMessageSingular: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x5A0)
    ]
    StatTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x5C0)
    ]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x5E0)]
    StatId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x5F8)]

    class eStatMessageTypeEnum(IntEnum):
        Full = 0x0
        Quick = 0x1
        Silent = 0x2

    StatMessageType: Annotated[
        c_enum32[eStatMessageTypeEnum], Field(c_enum32[eStatMessageTypeEnum], 0x608)
    ]
    ShowInTerminal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60C)]
    ShowStatLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60D)]
    TelemetryUpload: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60E)]
    UseRankNotStats: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60F)]


@partial_struct
class cGcPetVocabularyTraitEntry(Structure):
    Negative: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Positive: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Trait: Annotated[
        c_enum32[enums.cGcCreaturePetTraits],
        Field(c_enum32[enums.cGcCreaturePetTraits], 0x40),
    ]


@partial_struct
class cGcPetVocabularyEntry(Structure):
    GenericFallback: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Vocabulary: Annotated[
        basic.cTkDynamicArray[cGcPetVocabularyTraitEntry],
        Field(basic.cTkDynamicArray[cGcPetVocabularyTraitEntry], 0x20),
    ]
    OddsOfProcReplacement: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]


@partial_struct
class cGcMinMaxFloat(Structure):
    Max: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Min: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcPlayerStat(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Value: Annotated[cGcStatValueData, Field(cGcStatValueData, 0x10)]


@partial_struct
class cGcSyncBufferSaveData(Structure):
    SpaceAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    BufferVersion: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x8)]
    ItemsCount: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0xC)]
    OwnerOnlineId: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x10)
    ]
    OwnerPlatformId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]


@partial_struct
class cGcSyncBufferSaveDataArray(Structure):
    Data: Annotated[
        basic.cTkDynamicArray[cGcSyncBufferSaveData],
        Field(basic.cTkDynamicArray[cGcSyncBufferSaveData], 0x0),
    ]


@partial_struct
class cGcTerrainEdit(Structure):
    Position: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Data: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0x4)]


@partial_struct
class cGcPersistentTerrainEdits(Structure):
    BufferAnchors: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x0),
    ]
    BufferSizes: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x10),
    ]
    Edits: Annotated[
        basic.cTkDynamicArray[cGcTerrainEdit],
        Field(basic.cTkDynamicArray[cGcTerrainEdit], 0x20),
    ]
    GalacticAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x30)]


@partial_struct
class cGcSynchronisedBufferData(Structure):
    Data: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint64],
        Field(basic.cTkDynamicArray[ctypes.c_uint64], 0x0),
    ]


@partial_struct
class cGcSavedInteractionDialogData(Structure):
    Dialog: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Hash: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x20)]


@partial_struct
class cGcSavedInteractionRaceData(Structure):
    SavedRaceIndicies: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    HasLoopedIndicies: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcTerrainEditsBuffer(Structure):
    BufferAnchors: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    GalacticAddresses: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x1000)]
    Edits: Annotated[cGcTerrainEdit, Field(cGcTerrainEdit, 0x1800)]
    BufferSizes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C180)]
    BufferAges: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0x3C580)]
    BufferProtected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C680)]


@partial_struct
class cGcTradingSupplyData(Structure):
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    GalacticAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    Timestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x18)]
    Demand: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    InteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x24),
    ]
    Supply: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcSettlementTowerPowerTimestamps(Structure):
    TimeStamps: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    ClusterIndex: Annotated[ctypes.c_int8, Field(ctypes.c_int8, 0x20)]


@partial_struct
class cGcUniqueIdData(Structure):
    DeterministicSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    Iteration: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x8)]

    class eUniqueIdTypeEnum(IntEnum):
        Invalid = 0x0
        Deterministic = 0x1
        UserSpawned = 0x2

    UniqueIdType: Annotated[
        c_enum32[eUniqueIdTypeEnum], Field(c_enum32[eUniqueIdTypeEnum], 0xC)
    ]
    OnlineID: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x10)]
    PlatformID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]


@partial_struct
class cGcSettlementWeaponRespawnData(Structure):
    InteractionSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    LastWeaponRefreshTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x8)]


@partial_struct
class cGcWordGroupKnowledge(Structure):
    Group: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Races: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcSkiffSaveData(Structure):
    Direction: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x0)]
    Position: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x10)]
    Location: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x20)]


@partial_struct
class cGcWordKnowledge(Structure):
    Word: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Races: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcInteractionData(Structure):
    Position: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x0)]
    GalacticAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    Value: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x18)]


@partial_struct
class cGcSeasonPetConstraints(Structure):
    CreatureId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TimeSinceBirth: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    TimeSinceLastEgg: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x18)]
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x20)
    ]
    MaxRelativeScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MinRelativeScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    StartingTrust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    SpecificBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcSettlementProductionElementRequirement(Structure):
    RequiredSettlementBuildingLevel: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x0)
    ]
    RequiredSettlementBuildingType: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x4),
    ]


@partial_struct
class cGcSettlementProductionElement(Structure):
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Requirements: Annotated[
        basic.cTkDynamicArray[cGcSettlementProductionElementRequirement],
        Field(basic.cTkDynamicArray[cGcSettlementProductionElementRequirement], 0x10),
    ]
    ProductionAccumulationCap: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    ProductionAmountMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    ProductionTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcSettlementProductionSlotData(Structure):
    ElementId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LastChangeTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    ProductionAccumulationCap: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    ProductionAmountMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    ProductionTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    RequiredSettlementBuildingLevel: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x28)
    ]
    RequiredSettlementBuildingType: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x2C),
    ]


@partial_struct
class cGcSeasonalMilestoneEncryption(Structure):
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Subtitle: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    TitleUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    HoverPopupIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x60)]
    Patch: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x78)]
    DecryptMissionId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    DecryptMissionSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    IsEncrypted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA4)]


@partial_struct
class cGcSeasonalRingData(Structure):
    CoreOpacity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    RingOpacity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    RingSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcSeasonalRingArray(Structure):
    SeasonalRingData: Annotated[
        basic.cTkDynamicArray[cGcSeasonalRingData],
        Field(basic.cTkDynamicArray[cGcSeasonalRingData], 0x0),
    ]


@partial_struct
class cGcSettlementHistory(Structure):
    SeedValue: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    BugAttackCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    GiftsRecieved: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    InitialBuildingCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    InitialHappiness: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    InitialPopulation: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    InitialProductivity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    InitialUpkeepCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    JudgementsSettled: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    LastWentIntoDebtTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    LastWentIntoProfitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    LongestDebtStretch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    LongestProfitStretch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    PlayerClaimedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    PlayerKillCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    SentinelAttackCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    SettlerDeathCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]


@partial_struct
class cGcSaveContextDataMask(Structure):
    Ammo: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]
    AtlasStations: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1)]
    Banner: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2)]
    BaseBuildingObjects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3)]
    BuildersKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    CharacterCustomisation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]
    ChestInventories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6)]
    ChestMagicInventories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7)]
    CookingIngredientsInventory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    DifficultySettings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]
    FishPlatformInventory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]
    Fleet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB)]
    Freighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]
    GalaxyWaypoints: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD)]
    HotActions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE)]
    Interactions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF)]
    KnownProducts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    KnownRefinerRecipes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    KnownSpecials: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12)]
    KnownTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13)]
    KnownWords: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    MultiTools: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]
    Nanites: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16)]
    NexusAccess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x17)]
    NPCWorkers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    PersistentBases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]
    Pets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A)]
    PlayerInventory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B)]
    Portals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]
    ProcTechIndex: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1D)]
    ProgressionLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1E)]
    RedeemedRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1F)]
    RevealBlackHoles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    RocketLauncherInventory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    SeenBaseObjects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]
    SeenStories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23)]
    SettlementState: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    Ships: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]
    ShopTier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26)]
    Specials: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27)]
    SquadronPilots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    Stats: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]
    TeleportEndpoints: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A)]
    TerrainEdits: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2B)]
    TradingSupply: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    Units: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    Vehicles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]
    VisitedSystems: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F)]
    Wonders: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcSaveContextDataMaskTableEntry(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Mask: Annotated[cGcSaveContextDataMask, Field(cGcSaveContextDataMask, 0x10)]


@partial_struct
class cGcSavedEntitlement(Structure):
    EntitlementId: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x0)
    ]


@partial_struct
class cGcSeasonalMilestone(Structure):
    Encryption: Annotated[
        cGcSeasonalMilestoneEncryption, Field(cGcSeasonalMilestoneEncryption, 0x0)
    ]
    CantRewardMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA8)
    ]
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC8)
    ]
    DescriptionDone: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE8)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x108)]
    TitleUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x128)
    ]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x148)]
    IconGrey: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x160)]
    MissionIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x178)]
    MissionIconNotSelected: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x190)
    ]
    MissionIconSelected: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1A8)]
    IdToUseInMissionData: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1C0)]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1D0)]
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1E0)]
    RewardSwitchAlt: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1F0)]
    Amount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x200)]
    BlockRendezvousMilestoneSeed: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x204)
    ]
    MilestoneIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x208)]
    RendezvousIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20C)]
    StageIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x210)]
    CantClaimRewardDescription: Annotated[
        basic.cTkFixedString0x200, Field(basic.cTkFixedString0x200, 0x214)
    ]
    RewardDescription: Annotated[
        basic.cTkFixedString0x200, Field(basic.cTkFixedString0x200, 0x414)
    ]
    DontAttemptFallbackTextSubs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x614)]
    GreyIfCantStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x615)]
    IsOptional: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x616)]
    IsRendezvous: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x617)]
    IsStageControl: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x618)]


@partial_struct
class cGcPortalSaveData(Structure):
    PortalSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x0)]
    LastPortalUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    IsStoryPortal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcProtectedLocation(Structure):
    Location: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcPlayerMissionUpgradeMapEntry(Structure):
    CompletedMissions: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    NewMission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    CompletePoint: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    MinProgress: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]


@partial_struct
class cGcPlayerSpawnStateData(Structure):
    AbandonedFreighterPositionInSystem: Annotated[
        basic.Vector4f, Field(basic.Vector4f, 0x0)
    ]
    AbandonedFreighterTransformAt: Annotated[
        basic.Vector4f, Field(basic.Vector4f, 0x10)
    ]
    AbandonedFreighterTransformUp: Annotated[
        basic.Vector4f, Field(basic.Vector4f, 0x20)
    ]
    FreighterPositionInSystem: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x30)]
    FreighterTransformAt: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x40)]
    FreighterTransformUp: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x50)]
    PlayerDeathRespawnPositionInSystem: Annotated[
        basic.Vector4f, Field(basic.Vector4f, 0x60)
    ]
    PlayerDeathRespawnTransformAt: Annotated[
        basic.Vector4f, Field(basic.Vector4f, 0x70)
    ]
    PlayerPositionInSystem: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x80)]
    PlayerTransformAt: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x90)]
    ShipPositionInSystem: Annotated[basic.Vector4f, Field(basic.Vector4f, 0xA0)]
    ShipTransformAt: Annotated[basic.Vector4f, Field(basic.Vector4f, 0xB0)]
    ShipTransformUp: Annotated[basic.Vector4f, Field(basic.Vector4f, 0xC0)]

    class eLastKnownPlayerStateEnum(IntEnum):
        OnFoot = 0x0
        InShip = 0x1
        InStation = 0x2
        AboardFleet = 0x3
        InNexus = 0x4
        AbandonedFreighter = 0x5
        InShipLanded = 0x6
        InVehicle = 0x7
        OnFootInCorvette = 0x8
        OnFootInCorvetteLanded = 0x9

    LastKnownPlayerState: Annotated[
        c_enum32[eLastKnownPlayerStateEnum],
        Field(c_enum32[eLastKnownPlayerStateEnum], 0xD0),
    ]
    ShipHovering: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD4)]


@partial_struct
class cGcPlayerMissionParticipant(Structure):
    BuildingLocation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    BuildingSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x10)]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x20)]
    ParticipantType: Annotated[
        c_enum32[enums.cGcPlayerMissionParticipantType],
        Field(c_enum32[enums.cGcPlayerMissionParticipantType], 0x28),
    ]


@partial_struct
class cGcPlayerMissionProgress(Structure):
    Participants: Annotated[
        cGcPlayerMissionParticipant, Field(cGcPlayerMissionParticipant, 0x0)
    ]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x270)]
    Data: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x280)]
    Seed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x288)]
    Stat: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x290)]
    Progress: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x298)]


@partial_struct
class cGcPlayerMissionProgressMapEntry(Structure):
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    MaxProgress: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MinProgress: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    NewProgress: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]


@partial_struct
class cGcPetData(Structure):
    CustomSpeciesName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    BoneScaleSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x20)]
    ColourBaseSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x30)]
    CreatureID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    CreatureSecondarySeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x50)]
    CreatureSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x60)]
    Descriptors: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x70),
    ]
    BirthTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x80)]
    GenusSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x88)]
    LastEggTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x90)]
    LastTrustDecreaseTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x98)]
    LastTrustIncreaseTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA0)]
    SpeciesSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA8)]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xB0)]
    SenderData: Annotated[cGcDiscoveryOwner, Field(cGcDiscoveryOwner, 0xB8)]
    Traits: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC)]
    Moods: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C8)]
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x1D0)
    ]
    CreatureType: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x1D4)
    ]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D8)]
    Trust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DC)]
    CustomName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1E0)
    ]
    AllowUnmodifiedReroll: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x200)]
    EggModified: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x201)]
    HasBeenSummoned: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x202)]
    HasFur: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x203)]
    Predator: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x204)]


@partial_struct
class cGcInventoryLayout(Structure):
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x0)]
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Slots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcModularCustomisationProductLookupList(Structure):
    ProductLookupList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcKnownThingsPreset(Structure):
    KnownProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    KnownRefinerRecipes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x10),
    ]
    KnownSpecials: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    KnownTech: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    KnownWordGroups: Annotated[
        basic.cTkDynamicArray[cGcWordGroupKnowledge],
        Field(basic.cTkDynamicArray[cGcWordGroupKnowledge], 0x40),
    ]
    KnownWords: Annotated[
        basic.cTkDynamicArray[cGcWordKnowledge],
        Field(basic.cTkDynamicArray[cGcWordKnowledge], 0x50),
    ]


@partial_struct
class cGcHistoricalSeasonData(Structure):
    SeasonName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    SeasonNameUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    UnlockedTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    MainIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x60)]
    FinalReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x78)]
    DisplayNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x88)]
    RemixNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8C)]
    SeasonNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x90)]
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x94)
    ]


@partial_struct
class cGcMaintenanceSaveKey(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Location: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcInventoryIndex(Structure):
    X: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Y: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcInventoryElement(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Index: Annotated[cGcInventoryIndex, Field(cGcInventoryIndex, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    DamageFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    MaxAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    Type: Annotated[
        c_enum32[enums.cGcInventoryType], Field(c_enum32[enums.cGcInventoryType], 0x24)
    ]
    AddedAutomatically: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    FullyInstalled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]


@partial_struct
class cGcPersistedStatData(Structure):
    GroupId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    StatId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcModSettingsInfo(Structure):
    Dependencies: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint64],
        Field(basic.cTkDynamicArray[ctypes.c_uint64], 0x0),
    ]
    AuthorID: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    ID: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x18)]
    LastUpdated: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x20)]
    ModPriority: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x28)]
    Author: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x2A)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xAA)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12A)]
    EnabledVR: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12B)]


@partial_struct
class cGcModSettings(Structure):
    Data: Annotated[
        basic.cTkDynamicArray[cGcModSettingsInfo],
        Field(basic.cTkDynamicArray[cGcModSettingsInfo], 0x0),
    ]
    DisableAllMods: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcInventorySpecialSlot(Structure):
    Index: Annotated[cGcInventoryIndex, Field(cGcInventoryIndex, 0x0)]
    Type: Annotated[
        c_enum32[enums.cGcInventorySpecialSlotType],
        Field(c_enum32[enums.cGcInventorySpecialSlotType], 0x8),
    ]


@partial_struct
class cGcInventoryContainer(Structure):
    BaseStatValues: Annotated[
        basic.cTkDynamicArray[cGcInventoryBaseStatEntry],
        Field(basic.cTkDynamicArray[cGcInventoryBaseStatEntry], 0x0),
    ]
    Slots: Annotated[
        basic.cTkDynamicArray[cGcInventoryElement],
        Field(basic.cTkDynamicArray[cGcInventoryElement], 0x10),
    ]
    SpecialSlots: Annotated[
        basic.cTkDynamicArray[cGcInventorySpecialSlot],
        Field(basic.cTkDynamicArray[cGcInventorySpecialSlot], 0x20),
    ]
    ValidSlotIndices: Annotated[
        basic.cTkDynamicArray[cGcInventoryIndex],
        Field(basic.cTkDynamicArray[cGcInventoryIndex], 0x30),
    ]
    Class: Annotated[
        c_enum32[enums.cGcInventoryClass],
        Field(c_enum32[enums.cGcInventoryClass], 0x40),
    ]
    Height: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    NumSlotsFromTech: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    StackSizeGroup: Annotated[
        c_enum32[enums.cGcInventoryStackSizeGroup],
        Field(c_enum32[enums.cGcInventoryStackSizeGroup], 0x4C),
    ]
    Version: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    Width: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    Name: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x58)]
    IsCool: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x158)]


@partial_struct
class cGcCustomisationColourPaletteExtraData(Structure):
    ProductToUnlock: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    TipText: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x10),
    ]


@partial_struct
class cGcCustomisationColourPalette(Structure):
    PaletteData: Annotated[cGcPaletteData, Field(cGcPaletteData, 0x0)]
    ExtraData: Annotated[
        cGcCustomisationColourPaletteExtraData,
        Field(cGcCustomisationColourPaletteExtraData, 0x410),
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x430)]


@partial_struct
class cGcGalacticAddressData(Structure):
    PlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    SolarSystemIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    VoxelX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    VoxelY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    VoxelZ: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcCustomisationHeadToRace(Structure):
    HeadDescriptor: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    HeadAnimationRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x20)
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x24)
    ]


@partial_struct
class cGcFleetFrigateSaveData(Structure):
    ForcedTraitsSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x0)]
    HomeSystemSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x10)]
    ResourceSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x20)]
    Stats: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x30),
    ]
    TraitIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x40),
    ]
    TimeOfLastIncomeCollection: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x50)]
    DamageTaken: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]
    FrigateClass: Annotated[
        c_enum32[enums.cGcFrigateClass], Field(c_enum32[enums.cGcFrigateClass], 0x5C)
    ]
    InventoryClass: Annotated[
        c_enum32[enums.cGcInventoryClass],
        Field(c_enum32[enums.cGcInventoryClass], 0x60),
    ]
    NumberOfTimesDamaged: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x64)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x68)
    ]
    RepairsMade: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6C)]
    TotalNumberOfExpeditions: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    TotalNumberOfFailedEvents: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    TotalNumberOfSuccessfulEvents: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x78)
    ]
    CustomName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x7C)
    ]


@partial_struct
class cGcExpeditionEventSaveData(Structure):
    EventID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    InterventionEventID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    OverriddenRewardDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    AffectedFrigateIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x60),
    ]
    AffectedFrigateResponses: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x70),
    ]
    OverriddenReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    RepairingFrigateIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x90),
    ]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0xA0)]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xB0)]
    OverriddenDescription: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xB8)
    ]
    AvoidedIntervention: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF8)]
    IsInterventionEvent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF9)]
    Success: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFA)]
    WhaleEvent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xFB)]


@partial_struct
class cGcFleetExpeditionSaveData(Structure):
    SpawnPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    TerminalPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    ActiveFrigateIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x20),
    ]
    AllFrigateIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x30),
    ]
    DamagedFrigateIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x40),
    ]
    DestroyedFrigateIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x50),
    ]
    Events: Annotated[
        basic.cTkDynamicArray[cGcExpeditionEventSaveData],
        Field(basic.cTkDynamicArray[cGcExpeditionEventSaveData], 0x60),
    ]
    InterventionEventMissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    Powerups: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x80),
    ]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x90)]
    PauseTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA0)]
    StartTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA8)]
    TimeOfLastUAChange: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xB0)]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xB8)]
    ExpeditionCategory: Annotated[
        c_enum32[enums.cGcExpeditionCategory],
        Field(c_enum32[enums.cGcExpeditionCategory], 0xC0),
    ]
    ExpeditionDuration: Annotated[
        c_enum32[enums.cGcExpeditionDuration],
        Field(c_enum32[enums.cGcExpeditionDuration], 0xC4),
    ]
    NextEventToTrigger: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC8)]
    NumberOfFailedEventsThisExpedition: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xCC)
    ]
    NumberOfSuccessfulEventsThisExpedition: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xD0)
    ]
    SpeedMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    CustomName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xD8)
    ]
    InterventionPhoneCallActivated: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1D8)
    ]


@partial_struct
class cGcFreighterRoomNPCData(Structure):
    RoomID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    POISelectionWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SpawnCapacity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcFreighterRoomNPCSpawnCapacityEntry(Structure):
    RoomID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SpawnCapacity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcFreighterRoomNPCSpawnCapacities(Structure):
    RoomSpawnCapacities: Annotated[
        basic.cTkDynamicArray[cGcFreighterRoomNPCSpawnCapacityEntry],
        Field(basic.cTkDynamicArray[cGcFreighterRoomNPCSpawnCapacityEntry], 0x0),
    ]


@partial_struct
class cGcCustomisationMultiTextureSubOption(Structure):
    Option: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Layer: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcCustomisationMultiTextureOptionList(Structure):
    TextureOptionsID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    SubOptions: Annotated[
        basic.cTkDynamicArray[cGcCustomisationMultiTextureSubOption],
        Field(basic.cTkDynamicArray[cGcCustomisationMultiTextureSubOption], 0x20),
    ]


@partial_struct
class cGcCustomisationMultiTextureOption(Structure):
    MultiTextureOptionsID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Options: Annotated[
        basic.cTkDynamicArray[cGcCustomisationMultiTextureOptionList],
        Field(basic.cTkDynamicArray[cGcCustomisationMultiTextureOptionList], 0x10),
    ]
    ProductsToUnlock: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    Tips: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x30),
    ]


@partial_struct
class cGcNPCNavSubgraphNodeTypeConnectivity(Structure):
    ConnectionToPOI: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ExternalConnection: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    InternalConnection: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    PathToPOI: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cGcCharacterCustomisationBoneScaleData(Structure):
    BoneName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcCustomisationTextureOption(Structure):
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Layer: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Options: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x20),
    ]
    ProductsToUnlock: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    TextureOptionsID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Tips: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x50),
    ]
    AllowAllColoursWithNoMarkings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]


@partial_struct
class cGcCharacterCustomisationColourData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Palette: Annotated[cTkPaletteTexture, Field(cTkPaletteTexture, 0x10)]


@partial_struct
class cGcCharacterCustomisationTextureOptionData(Structure):
    TextureOptionName: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    TextureOptionGroupName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcCharacterCustomisationData(Structure):
    BoneScales: Annotated[
        basic.cTkDynamicArray[cGcCharacterCustomisationBoneScaleData],
        Field(basic.cTkDynamicArray[cGcCharacterCustomisationBoneScaleData], 0x0),
    ]
    Colours: Annotated[
        basic.cTkDynamicArray[cGcCharacterCustomisationColourData],
        Field(basic.cTkDynamicArray[cGcCharacterCustomisationColourData], 0x10),
    ]
    DescriptorGroups: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    PaletteID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    TextureOptions: Annotated[
        basic.cTkDynamicArray[cGcCharacterCustomisationTextureOptionData],
        Field(basic.cTkDynamicArray[cGcCharacterCustomisationTextureOptionData], 0x40),
    ]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]


@partial_struct
class cGcCharacterCustomisationSaveData(Structure):
    CustomData: Annotated[
        cGcCharacterCustomisationData, Field(cGcCharacterCustomisationData, 0x0)
    ]
    SelectedPreset: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]


@partial_struct
class cGcPersistentBBObjectData(Structure):
    At: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    ObjectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    GalacticAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x40)]
    RegionSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x48)]
    Timestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x50)]
    UserData: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x58)]


@partial_struct
class cGcCustomisationDescriptorGroup(Structure):
    Tip: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Descriptors: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x40),
    ]
    GroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    LinkedSpecialID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    SuffixInclusionList: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x70),
    ]
    Image: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x80)]
    HiddenInCustomiser: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x100)]


@partial_struct
class cGcCustomisationDescriptorGroupFallbackData(Structure):
    DescriptorGroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FallbackPriorityList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]


@partial_struct
class cGcFreighterNPCSpawnPriority(Structure):
    PriorityScale: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x0),
    ]


@partial_struct
class cGcCustomisationDescriptorList(Structure):
    Descriptors: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x0),
    ]


@partial_struct
class cGcCustomisationDescriptorVisualEffect(Structure):
    Effect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AttachTo: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10)]


@partial_struct
class cGcGeneratedBaseDecorationTemplate(Structure):
    TemplateScene: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    InvalidRoomIndexes: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x30),
    ]

    class eDecorationLayerEnum(IntEnum):
        Stairs = 0x0
        Corridor = 0x1
        Room = 0x2
        Door = 0x3
        Decoration1 = 0x4
        Decoration2 = 0x5
        Decoration3 = 0x6
        DecorationCorridor = 0x7

    DecorationLayer: Annotated[
        c_enum32[eDecorationLayerEnum], Field(c_enum32[eDecorationLayerEnum], 0x40)
    ]
    MaxPerRoom: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]


@partial_struct
class cGcGeneratedBaseLockDoorPair(Structure):
    Door: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Lock: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcGeneratedBasePruningRule(Structure):
    NodeName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RoomFilters: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]
    RuleId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    MaxPerDungeon: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    MaxPerRoom: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]


@partial_struct
class cGcGeneratedBaseRoomTemplate(Structure):
    PrimaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    QuaternaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    SecondaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    TernaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    LocId: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)]
    DecorationThemes: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x60),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    MaxPathLength: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x80)]
    MinContiguousDepth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x84)]
    MinContiguousHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x88)]
    MinContiguousWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8C)]
    MinPathLength: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x90)]
    ShrinkFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]


@partial_struct
class cGcGeneratedBaseStructuralTemplate(Structure):
    TemplateScene: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcGeneratedBaseThemeTemplate(Structure):
    DecorationTemplates: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcBiomeCondition(Structure):
    BiomeType: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x0)
    ]


@partial_struct
class cGcPersistentBaseEntry(Structure):
    At: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    ObjectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Timestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x40)]
    UserData: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x48)]
    Message: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x50)]


@partial_struct
class cGcGroupCondition(Structure):
    Conditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    ORConditions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcBuildMenuIconSet(Structure):
    Glow: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    Normal: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x18)]


@partial_struct
class cGcId256List(Structure):
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    IdList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x20),
    ]


@partial_struct
class cGcBaseGridSearchFilter(Structure):
    GridHasMaxNonPassiveParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    GridHasMaxParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    GridHasMinNonPassiveParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    GridHasMinParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    GridRateIsGreaterThan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    GridRateIsLessThan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    NetworkType: Annotated[
        c_enum32[enums.cGcLinkNetworkTypes],
        Field(c_enum32[enums.cGcLinkNetworkTypes], 0x18),
    ]
    PartRateIsGreaterThan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    PartRateIsLessThan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    GridHasANegativeRate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    GridHasAPositiveRate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]
    GridHasPositiveRatePotential: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26)]
    GridIsNotOnline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27)]
    GridIsOnline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcBaseBuildingProperties(Structure):
    DefaultInBaseObject: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DefaultInFreighterObject: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DefaultOnTerrainObject: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcBasePartSearchFilter(Structure):
    ReferenceWorldPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    IsSpecificID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BaseGridFilter: Annotated[
        cGcBaseGridSearchFilter, Field(cGcBaseGridSearchFilter, 0x20)
    ]
    MaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    ApplyGridFilter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    PartIsNotOnline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    PartIsNotVision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]
    PartIsOnline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x53)]
    PartIsVision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]


@partial_struct
class cGcBaseBuildingSubGroup(Structure):
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcBasePlacementRule(Structure):
    PartID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Conditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x20),
    ]

    class eTwinCriteriaEnum(IntEnum):
        None_ = 0x0
        MoveToTwin = 0x1
        StretchToTwin = 0x2
        StretchToRaycast = 0x3
        MoveToTwinRelative = 0x4

    TwinCriteria: Annotated[
        c_enum32[eTwinCriteriaEnum], Field(c_enum32[eTwinCriteriaEnum], 0x30)
    ]
    PositionLocator: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x34)
    ]
    ORConditions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB4)]


@partial_struct
class cGcBaseLinkGridConnectionData(Structure):
    LinkSocketPositions: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x0),
    ]
    LinkSocketSubGroups: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x10),
    ]
    ConnectionDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Network: Annotated[
        c_enum32[enums.cGcLinkNetworkTypes],
        Field(c_enum32[enums.cGcLinkNetworkTypes], 0x24),
    ]
    NetworkMask: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    NetworkSubGroup: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]
    UseMinDistance: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcBaseLinkGridConnectionDependency(Structure):
    Connection: Annotated[
        cGcBaseLinkGridConnectionData, Field(cGcBaseLinkGridConnectionData, 0x0)
    ]

    class eDependentEffectEnum(IntEnum):
        None_ = 0x0
        EnablesRate = 0x1
        DisablesRate = 0x2
        EnablesConnection = 0x3
        DisablesConnection = 0x4

    DependentEffect: Annotated[
        c_enum32[eDependentEffectEnum], Field(c_enum32[eDependentEffectEnum], 0x38)
    ]
    DependentRate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    DisableWhenOffline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    TransfersConnections: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]


@partial_struct
class cGcBaseSearchFilter(Structure):
    BasePartFilter: Annotated[
        cGcBasePartSearchFilter, Field(cGcBasePartSearchFilter, 0x0)
    ]
    ReferenceWorldPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x60)]
    OnSpecificPlanetScanEvent: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x70)
    ]
    MatchingTypes: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcPersistentBaseTypes]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcPersistentBaseTypes]], 0x90),
    ]
    InSpecificSystem: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA0)]
    OnSpecificPlanet: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA8)]
    ContainsMaxParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB0)]
    ContainsMinParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB4)]
    MaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    InCurrentSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBC)]
    IsBuildable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBD)]
    IsOverlapping: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE)]
    OnCurrentPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBF)]


@partial_struct
class cGcBaseLinkGridData(Structure):
    Connection: Annotated[
        cGcBaseLinkGridConnectionData, Field(cGcBaseLinkGridConnectionData, 0x0)
    ]
    DependentConnections: Annotated[
        basic.cTkDynamicArray[cGcBaseLinkGridConnectionDependency],
        Field(basic.cTkDynamicArray[cGcBaseLinkGridConnectionDependency], 0x38),
    ]

    class eDependsOnEnvironmentEnum(IntEnum):
        None_ = 0x0
        DayNight = 0x1
        Storms = 0x2

    DependsOnEnvironment: Annotated[
        c_enum32[eDependsOnEnvironmentEnum],
        Field(c_enum32[eDependsOnEnvironmentEnum], 0x48),
    ]

    class eDependsOnHotspotsEnum(IntEnum):
        None_ = 0x0
        Power = 0x1
        Mineral = 0x2
        Gas = 0x3

    DependsOnHotspots: Annotated[
        c_enum32[eDependsOnHotspotsEnum], Field(c_enum32[eDependsOnHotspotsEnum], 0x4C)
    ]
    Rate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    Storage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]


@partial_struct
class cGcBaseBuildingPartNavNodeData(Structure):
    AtDir: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    LocalPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    ConnectedNodeIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint32],
        Field(basic.cTkDynamicArray[ctypes.c_uint32], 0x20),
    ]
    InteractionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    ArriveDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    Type: Annotated[
        c_enum32[enums.cGcNPCNavSubgraphNodeType],
        Field(c_enum32[enums.cGcNPCNavSubgraphNodeType], 0x44),
    ]


@partial_struct
class cGcBaseStatCondition(Structure):
    class eBaseStatEnum(IntEnum):
        HasTeleporter = 0x0
        HasMainframe = 0x1

    BaseStat: Annotated[c_enum32[eBaseStatEnum], Field(c_enum32[eBaseStatEnum], 0x0)]
    StatValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcBaseBuildingPartData(Structure):
    MagicData: Annotated[cTkMagicModelData, Field(cTkMagicModelData, 0x0)]
    PartID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x30)]
    InstanceLastProfiledTimestamp: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x50)
    ]
    LastProfiledTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x58)]
    InstanceMeshesCost: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x60)]
    InstanceNodesCost: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x64)]
    InstanceTimeCost: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x68)]
    MeshesCost: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x6C)]
    NodesCost: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x70)]
    PhysicsCost: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x74)]
    Style: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0x78),
    ]
    TimeCost: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x7C)]


@partial_struct
class cGcBaseBuildingPartInteractionData(Structure):
    AtDir: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    LocalPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    InteractionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]


@partial_struct
class cGcBaseBuildingPartNavData(Structure):
    PartID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    NavNodeData: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPartNavNodeData],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPartNavNodeData], 0x20),
    ]
    SharedInteractions: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPartInteractionData],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPartInteractionData], 0x30),
    ]


@partial_struct
class cGcBaseBuildingFamily(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ObjectIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]

    class eFamilyTypeEnum(IntEnum):
        Replacements = 0x0
        Extras = 0x1
        Symmetrical = 0x2
        YFlip = 0x3
        Rotations = 0x4

    FamilyType: Annotated[
        c_enum32[eFamilyTypeEnum], Field(c_enum32[eFamilyTypeEnum], 0x20)
    ]


@partial_struct
class cGcBaseBuildingGroup(Structure):
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x20)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x38)]
    SubGroups: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingSubGroup],
        Field(basic.cTkDynamicArray[cGcBaseBuildingSubGroup], 0x48),
    ]
    DefaultColourIdx: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]


@partial_struct
class cGcBaseBuildingMaterial(Structure):
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    LocName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x40)]
    SwatchImage: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x58)]
    MaterialIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]


@partial_struct
class cGcBaseBuildingPalette(Structure):
    PrimaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    QuaternaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    SecondaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    TernaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x40)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)]

    class eSwatchPrimaryColourEnum(IntEnum):
        Primary = 0x0
        Secondary = 0x1
        Ternary = 0x2
        Quaternary = 0x3

    SwatchPrimaryColour: Annotated[
        c_enum32[eSwatchPrimaryColourEnum],
        Field(c_enum32[eSwatchPrimaryColourEnum], 0x80),
    ]

    class eSwatchSecondaryColourEnum(IntEnum):
        Primary = 0x0
        Secondary = 0x1
        Ternary = 0x2
        Quaternary = 0x3

    SwatchSecondaryColour: Annotated[
        c_enum32[eSwatchSecondaryColourEnum],
        Field(c_enum32[eSwatchSecondaryColourEnum], 0x84),
    ]


@partial_struct
class cGcBaseBuildingEntryCosts(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Active0AverageFrameTimeCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Active1AverageFrameTimeCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    ActivePhysicsComponents: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    ActiveTotalNodes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    Inactive0AverageFrameTimeCost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x20)
    ]
    Inactive1AverageFrameTimeCost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x24)
    ]
    InactivePhysicsComponents: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    InactiveTotalNodes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]


@partial_struct
class cGcBaseBuildingCostsTable(Structure):
    ObjectCosts: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingEntryCosts],
        Field(basic.cTkDynamicArray[cGcBaseBuildingEntryCosts], 0x0),
    ]


@partial_struct
class cGcBaseBuildingEntryGroup(Structure):
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SubGroupName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    SubGroup: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcSettlementStatValueRange(Structure):
    MaxValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MinValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Type: Annotated[
        c_enum32[enums.cGcSettlementStatType],
        Field(c_enum32[enums.cGcSettlementStatType], 0x8),
    ]


@partial_struct
class cGcSentinelSpawnSequenceGroupList(Structure):
    CorruptSequences: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    ExtremeSequences: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]
    Sequences: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]


@partial_struct
class cGcPlayerExperienceSpawnArchetypeData(Structure):
    AppearAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BehaviourOverrides: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x10),
    ]
    BehaviourTreeOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    BlackboardValues: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x30),
    ]
    DamageOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    DamageReceivedMultiplier: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    GenerateResource: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    KillingBlowMessageIDOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    KillStatIDOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    DespawnDistOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    HealthOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA4)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    ScaleVariation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    SpawnDistOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    SpeedMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    Type: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0xB8)
    ]
    AllowSpawnInAir: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBC)]


@partial_struct
class cGcPlayerExperienceSpawnData(Structure):
    SpawnLocatorScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    AppearAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Archetype: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    SpawnLocator: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    MaxNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    MinNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    ActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]

    class eFaceDirEnum(IntEnum):
        Random = 0x0
        TowardsPlayer = 0x1
        SpawnerAt = 0x2
        InFrontOfPlayer = 0x3

    FaceDir: Annotated[c_enum32[eFaceDirEnum], Field(c_enum32[eFaceDirEnum], 0x74)]
    MaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    MinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    PlayerFacingOffsetMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]


@partial_struct
class cGcSentinelWaveGroup(Structure):
    ExtremeWaves: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Waves: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]


@partial_struct
class cGcPlayerExperienceSpawnTable(Structure):
    Event: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Spawns: Annotated[
        basic.cTkDynamicArray[cGcPlayerExperienceSpawnData],
        Field(basic.cTkDynamicArray[cGcPlayerExperienceSpawnData], 0x10),
    ]

    class eExperienceSpawnTypeEnum(IntEnum):
        Freighter = 0x0
        Mission = 0x1

    ExperienceSpawnType: Annotated[
        c_enum32[eExperienceSpawnTypeEnum],
        Field(c_enum32[eExperienceSpawnTypeEnum], 0x20),
    ]
    InitialDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    PerSpawnDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    ResponseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    Destroy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcSettlementBuildingContribution(Structure):
    Base: Annotated[
        basic.cTkDynamicArray[cGcSettlementStatValueRange],
        Field(basic.cTkDynamicArray[cGcSettlementStatValueRange], 0x0),
    ]
    Upgrade1: Annotated[
        basic.cTkDynamicArray[cGcSettlementStatValueRange],
        Field(basic.cTkDynamicArray[cGcSettlementStatValueRange], 0x10),
    ]
    Upgrade2: Annotated[
        basic.cTkDynamicArray[cGcSettlementStatValueRange],
        Field(basic.cTkDynamicArray[cGcSettlementStatValueRange], 0x20),
    ]
    Upgrade3: Annotated[
        basic.cTkDynamicArray[cGcSettlementStatValueRange],
        Field(basic.cTkDynamicArray[cGcSettlementStatValueRange], 0x30),
    ]


@partial_struct
class cGcPoliceSpawnWaveData(Structure):
    ShipData: Annotated[cGcAIShipSpawnData, Field(cGcAIShipSpawnData, 0x0)]
    MaxCountsForFireteamSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x160)]


@partial_struct
class cGcPortalData(Structure):
    RuneRotateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    KnowAllRunes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    SkipRuneEntry: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcSentinelSpawnData(Structure):
    MaxAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MinAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Type: Annotated[
        c_enum32[enums.cGcSentinelTypes], Field(c_enum32[enums.cGcSentinelTypes], 0x8)
    ]


@partial_struct
class cGcSentinelSpawnSequenceStep(Structure):
    WavePool: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcSentinelSpawnNamedSequence(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Waves: Annotated[
        basic.cTkDynamicArray[cGcSentinelSpawnSequenceStep],
        Field(basic.cTkDynamicArray[cGcSentinelSpawnSequenceStep], 0x10),
    ]


@partial_struct
class cGcPersistencyMissionOverride(Structure):
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Buffer: Annotated[
        c_enum32[enums.cGcInteractionBufferType],
        Field(c_enum32[enums.cGcInteractionBufferType], 0x10),
    ]


@partial_struct
class cGcPlayerExperienceAsteroidCreatureSpawnData(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LargeMinMax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]
    MediumMinMax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x18)]
    SmallMinMax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcSentinelSpawnSequence(Structure):
    Waves: Annotated[
        basic.cTkDynamicArray[cGcSentinelSpawnSequenceStep],
        Field(basic.cTkDynamicArray[cGcSentinelSpawnSequenceStep], 0x0),
    ]


@partial_struct
class cGcPlayerExperienceAsteroidCreatureSpawnTable(Structure):
    LargeAsteroidSpawns: Annotated[
        basic.cTkDynamicArray[cGcPlayerExperienceAsteroidCreatureSpawnData],
        Field(basic.cTkDynamicArray[cGcPlayerExperienceAsteroidCreatureSpawnData], 0x0),
    ]
    MediumAsteroidSpawns: Annotated[
        basic.cTkDynamicArray[cGcPlayerExperienceAsteroidCreatureSpawnData],
        Field(
            basic.cTkDynamicArray[cGcPlayerExperienceAsteroidCreatureSpawnData], 0x10
        ),
    ]
    SmallAsteroidSpawns: Annotated[
        basic.cTkDynamicArray[cGcPlayerExperienceAsteroidCreatureSpawnData],
        Field(
            basic.cTkDynamicArray[cGcPlayerExperienceAsteroidCreatureSpawnData], 0x20
        ),
    ]
    LargeAsteroidSpawnPercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MediumAsteroidSpawnPercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    SmallAsteroidSpawnPercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]


@partial_struct
class cGcSentinelSpawnSequenceGroup(Structure):
    ExtremeSequence: Annotated[
        cGcSentinelSpawnSequence, Field(cGcSentinelSpawnSequence, 0x0)
    ]
    Sequence: Annotated[cGcSentinelSpawnSequence, Field(cGcSentinelSpawnSequence, 0x10)]


@partial_struct
class cGcInteractionActivationCost(Structure):
    AltIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    OnlyChargeDuringSeasons: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x10),
    ]
    RequiredTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    StartMissionOnCantAfford: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    SubstanceId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    UseCostID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    Cost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    Repeat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]


@partial_struct
class cGcInteractionBaseBuildingState(Structure):
    TriggerAction: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Time: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcFiendCrimeSpawnData(Structure):
    MaxNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MinNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    MinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Type: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x28)
    ]


@partial_struct
class cGcAntagonistEnemy(Structure):
    Perceptions: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    GrudgeFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    HatredFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcAntagonistFriend(Structure):
    Perceptions: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    ArticulationFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]


@partial_struct
class cGcAntagonistPerception(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Range: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]

    class eViewShapeEnum(IntEnum):
        Pyramid = 0x0
        Cone = 0x1

    ViewShape: Annotated[
        c_enum32[eViewShapeEnum], Field(c_enum32[eViewShapeEnum], 0x14)
    ]
    XFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    YFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    SenseLocator: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    Raycast: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcDroneGun(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RequiredDestructibles: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x10),
    ]
    Locator: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    LaunchDuringAnim: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    MirrorAnim: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]


@partial_struct
class cGcBasePlacementComponentData(Structure):
    Rules: Annotated[
        basic.cTkDynamicArray[cGcBasePlacementRule],
        Field(basic.cTkDynamicArray[cGcBasePlacementRule], 0x0),
    ]


@partial_struct
class cGcFontTableEntry(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    LargeOverrideFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    VROverrideFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]


@partial_struct
class cGcFontTable(Structure):
    Fonts: Annotated[
        basic.cTkDynamicArray[cGcFontTableEntry],
        Field(basic.cTkDynamicArray[cGcFontTableEntry], 0x0),
    ]
    Language: Annotated[
        c_enum32[enums.cTkLanguages], Field(c_enum32[enums.cTkLanguages], 0x10)
    ]


@partial_struct
class cGcEntitlementRewardData(Structure):
    Error: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    EntitlementId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    RewardId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]


@partial_struct
class cTkEntitlementListData(Structure):
    EntitlementId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ServiceID: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x10)
    ]


@partial_struct
class cGcCutSceneTriggerActionData(Structure):
    Action: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    GroupFilter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    IdFilter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Parameter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cGcConstraintsToCreateSpec(Structure):
    PushingStrength_Diagonal_1x1_0011: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x0)
    ]
    PushingStrength_Diagonal_1x1_0110: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4)
    ]
    PushingStrength_Horizontal_1x0: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x8)
    ]
    PushingStrength_Horizontal_2x0: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC)
    ]
    PushingStrength_SkewedDiagonal_2x1_0012: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10)
    ]
    PushingStrength_SkewedDiagonal_2x1_0021: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14)
    ]
    PushingStrength_SkewedDiagonal_2x1_1002: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18)
    ]
    PushingStrength_SkewedDiagonal_2x1_2001: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C)
    ]
    PushingStrength_Vertical_1x0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    PushingStrength_Vertical_2x0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Diagonal_1x1_0011: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    Diagonal_1x1_0110: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]
    Horizontal_1x0: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A)]
    Horizontal_2x0: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2B)]
    SkewedDiagonal_2x1_0012: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    SkewedDiagonal_2x1_0021: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    SkewedDiagonal_2x1_1002: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]
    SkewedDiagonal_2x1_2001: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F)]
    Vertical_1x0: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    Vertical_2x0: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]


@partial_struct
class cGcByteBeatSong(Structure):
    LocID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RequiredSpecialId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Data: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x40)]
    AuthorOnlineID: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x240)
    ]
    AuthorPlatform: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x280)
    ]
    AuthorUsername: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x2C0)
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x300)]


@partial_struct
class cGcByteBeatLibraryData(Structure):
    MySongs: Annotated[cGcByteBeatSong, Field(cGcByteBeatSong, 0x0)]
    Playlist: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1900)]
    AutoplayInShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A00)]
    AutoplayInVehicle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A01)]
    AutoplayOnFoot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A02)]
    Shuffle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A03)]


@partial_struct
class cGcByteBeatTemplate(Structure):
    Children: Annotated[
        "basic.cTkDynamicArray[cGcByteBeatTemplate]",
        Field("basic.cTkDynamicArray[cGcByteBeatTemplate]", 0x0),
    ]
    MaxValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    MinValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    TokenType: Annotated[
        c_enum32[enums.cGcByteBeatToken], Field(c_enum32[enums.cGcByteBeatToken], 0x18)
    ]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcAdvancedTweaks(Structure):
    NodesThatMustBePresent: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0x0),
    ]
    NodesToHide: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0x10),
    ]
    EdgeMultiplierForTangentI: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    EdgeMultiplierForTangentJ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    ParticleKillSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    ParticleKillSpeedWrtFixed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    RenderNormalMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    StretchUvsToHideTextureEdges: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    LeaveRenderedTrianglesUnaffected: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x38)
    ]


@partial_struct
class cGcAttachedNode(Structure):
    RelativeTransform_Axis0: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    RelativeTransform_Axis1: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    RelativeTransform_Axis2: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    RelativeTransform_Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    BlendStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MaxRenderIFraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MaxRenderJFraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    MinRenderIFraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    MinRenderJFraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    NodeName: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x54)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]


@partial_struct
class cGcByteBeatDrum(Structure):
    AttackEnvelope: Annotated[
        c_enum32[enums.cGcByteBeatEnvelope],
        Field(c_enum32[enums.cGcByteBeatEnvelope], 0x0),
    ]

    class eAugmentModeEnum(IntEnum):
        Add = 0x0
        Multiply = 0x1
        Max = 0x2

    AugmentMode: Annotated[
        c_enum32[eAugmentModeEnum], Field(c_enum32[eAugmentModeEnum], 0x4)
    ]
    AugmentOverdrive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    AugmentPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    AugmentPitchFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AugmentPitchFalloffPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AugmentSineNoiseMix: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    AugmentVolume: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    DecayEnvelope: Annotated[
        c_enum32[enums.cGcByteBeatEnvelope],
        Field(c_enum32[enums.cGcByteBeatEnvelope], 0x20),
    ]
    Duration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    OctaveShift: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    Volume: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    WaveType: Annotated[
        c_enum32[enums.cGcByteBeatWave], Field(c_enum32[enums.cGcByteBeatWave], 0x30)
    ]
    Tree: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x34)]


@partial_struct
class cGcAttachmentPointData(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    SimP: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcAttachmentPointSet(Structure):
    AttachmentPoints: Annotated[
        basic.cTkDynamicArray[cGcAttachmentPointData],
        Field(basic.cTkDynamicArray[cGcAttachmentPointData], 0x0),
    ]
    AttractionStartDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AttractionStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    NumSimI: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    NumSimJ: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]
    JointName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x20)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x60)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA0)]


@partial_struct
class cGcByteBeatJukeboxData(Structure):
    Playlist: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Playing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x100)]
    Shuffle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x101)]


@partial_struct
class cGcAudio3PointDopplerData(Structure):
    Front: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Mid: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Rear: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcAudioNPCDoppler(Structure):
    Config: Annotated[cGcAudio3PointDopplerData, Field(cGcAudio3PointDopplerData, 0x0)]


@partial_struct
class cGcAlienPodAnimParams(Structure):
    Intensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcThirdPersonAnimParams(Structure):
    AimDirection: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    MoveForce: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x8)]
    Velocity: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]
    VelocityXY: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x18)]
    AimPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AimYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    DistanceFromGround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    Foot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    HitFB: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    HitLR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    LeanFB: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    LeanLR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MoveForceApplied: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    SlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    TimeSinceJetpackEngaged: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    TurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    Uphill: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    VelocityY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    VelocityZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]


@partial_struct
class cGcAtlasSendSubmitContribution(Structure):
    Contribution: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    MissionIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cTkPhysicsComponentData(Structure):
    Data: Annotated[cTkPhysicsData, Field(cTkPhysicsData, 0x0)]

    class eModelOwnershipEnum(IntEnum):
        Model = 0x0
        MasterModel = 0x1
        None_ = 0x2

    ModelOwnership: Annotated[
        c_enum32[eModelOwnershipEnum], Field(c_enum32[eModelOwnershipEnum], 0x18)
    ]
    SimpleCharacterCollisionFwdOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C)
    ]
    SimpleCharacterCollisionHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x20)
    ]
    SimpleCharacterCollisionHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x24)
    ]
    SimpleCharacterCollisionRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x28)
    ]
    SpinOnCreate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]

    class eSurfacePropertiesEnum(IntEnum):
        None_ = 0x0
        Glass = 0x1

    SurfaceProperties: Annotated[
        c_enum32[eSurfacePropertiesEnum], Field(c_enum32[eSurfacePropertiesEnum], 0x30)
    ]
    TriggerVolumeType: Annotated[
        c_enum32[enums.cTkVolumeTriggerType],
        Field(c_enum32[enums.cTkVolumeTriggerType], 0x34),
    ]
    AllowedDefaultCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]
    AllowTeleporter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39)]
    Animated: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A)]
    BlocksInteract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3B)]
    BlockTeleporter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    CameraInvisible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3D)]
    CanBeTooSteepForTeleporter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3E)]
    Climbable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F)]
    DisableGravity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    Floor: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]
    IgnoreAllCollisions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x42)]
    IgnoreModelOwner: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43)]
    InvisibleForInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]
    IsTransporter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45)]
    NoFallDamage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46)]
    NoFireCollide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x47)]
    NoPlayerCollide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    NoTerrainCollide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]
    NoVehicleCollide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A)]
    RotateSimpleCharacterCollisionCapsule: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4B)
    ]
    ScaleAffectsMass: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]
    TriggerVolume: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]
    UseBasePartOptimisation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E)]
    UseSimpleCharacterCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4F)]
    Walkable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]


@partial_struct
class cTkAnimPoseComponentData(Structure):
    BabyModifiers: Annotated[
        basic.cTkDynamicArray[cTkAnimPoseBabyModifier],
        Field(basic.cTkDynamicArray[cTkAnimPoseBabyModifier], 0x0),
    ]
    CorrelationMat: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x10),
    ]
    Correlations: Annotated[
        basic.cTkDynamicArray[cTkAnimPoseCorrelationData],
        Field(basic.cTkDynamicArray[cTkAnimPoseCorrelationData], 0x20),
    ]
    Examples: Annotated[
        basic.cTkDynamicArray[cTkAnimPoseExampleData],
        Field(basic.cTkDynamicArray[cTkAnimPoseExampleData], 0x30),
    ]
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    PoseAnims: Annotated[
        basic.cTkDynamicArray[cTkAnimPoseData],
        Field(basic.cTkDynamicArray[cTkAnimPoseData], 0x50),
    ]
    AdultCorrelationValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    DisableForAnimOverrides: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]
    ShouldRandomise: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x65)]


@partial_struct
class cTkSketchComponentData(Structure):
    Nodes: Annotated[
        basic.cTkDynamicArray[cTkSketchNodeData],
        Field(basic.cTkDynamicArray[cTkSketchNodeData], 0x0),
    ]
    GraphPosX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    GraphPosY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    GraphZoom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    UpdateRateMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcBootLogoData(Structure):
    DisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Textures: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10)
    ]


@partial_struct
class cTkAnimDetailSettingsTable(Structure):
    Table: Annotated[cTkAnimDetailSettings, Field(cTkAnimDetailSettings, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]


@partial_struct
class cGcTechnologyAttachmentComponentData(Structure):
    Techs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]

    class eInventoryEnum(IntEnum):
        Vehicle = 0x0

    Inventory: Annotated[
        c_enum32[eInventoryEnum], Field(c_enum32[eInventoryEnum], 0x10)
    ]
    Inverted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcTriggerActionComponentData(Structure):
    PersistentState: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    States: Annotated[
        basic.cTkDynamicArray[cGcActionTriggerState],
        Field(basic.cTkDynamicArray[cGcActionTriggerState], 0x10),
    ]
    HideModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    LinkStateToBaseGrid: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    Persistent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]
    ResetShotTimeOnStateChange: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23)]
    StartInactive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcPlayerCharacterComponentData(Structure):
    IntialPlayerControlMode: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    JetpackEffects: Annotated[
        basic.cTkDynamicArray[cGcCharacterJetpackEffect],
        Field(basic.cTkDynamicArray[cGcCharacterJetpackEffect], 0x10),
    ]
    PlayerControlModes: Annotated[
        basic.cTkDynamicArray[cGcPlayerControlModeEntry],
        Field(basic.cTkDynamicArray[cGcPlayerControlModeEntry], 0x20),
    ]


@partial_struct
class cGcCharacterInterfaceComponentData(Structure):
    pass


@partial_struct
class cGcBuildableSpaceshipComponentData(Structure):
    InitialLayouts: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x0),
    ]


@partial_struct
class cGcNPCComponentData(Structure):
    AlternateAnims: Annotated[
        basic.cTkDynamicArray[cGcCharacterAlternateAnimation],
        Field(basic.cTkDynamicArray[cGcCharacterAlternateAnimation], 0x0),
    ]
    HologramEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Tags: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x30)
    ]
    IsMech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]
    IsOldStyleNPC: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35)]


@partial_struct
class cTkMaterialData(Structure):
    Flags: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cTkMaterialFlags]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cTkMaterialFlags]], 0x0),
    ]
    FxFlags: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cTkMaterialFxFlags]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cTkMaterialFxFlags]], 0x10),
    ]
    Link: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    Metamaterial: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    Name: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    Samplers: Annotated[
        basic.cTkDynamicArray[cTkMaterialSampler],
        Field(basic.cTkDynamicArray[cTkMaterialSampler], 0x50),
    ]
    Shader: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)]
    Uniforms_Float: Annotated[
        basic.cTkDynamicArray[cTkMaterialUniform_Float],
        Field(basic.cTkDynamicArray[cTkMaterialUniform_Float], 0x70),
    ]
    Uniforms_UInt: Annotated[
        basic.cTkDynamicArray[cTkMaterialUniform_UInt],
        Field(basic.cTkDynamicArray[cTkMaterialUniform_UInt], 0x80),
    ]
    ShaderMillDataHash: Annotated[ctypes.c_int64, Field(ctypes.c_int64, 0x90)]
    TransparencyLayerID: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x98)]
    Class: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9C)]
    CastShadow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBC)]
    CreateFur: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBD)]
    DisableZTest: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE)]
    EnableLodFade: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBF)]
    UseShaderMill: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC0)]


@partial_struct
class cGcCreatureComponentData(Structure):
    DiscoveryUIOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    PetLargeUIOverrideOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    DeathEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    DeathEffectTrail: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    PetAccessoryNodes: Annotated[
        basic.cTkDynamicArray[basic.HashedString],
        Field(basic.cTkDynamicArray[basic.HashedString], 0x50),
    ]
    ReplacementImpacts: Annotated[
        basic.cTkDynamicArray[cGcReplacementEffectData],
        Field(basic.cTkDynamicArray[cGcReplacementEffectData], 0x60),
    ]
    ThumbnailOverrides: Annotated[
        basic.cTkDynamicArray[cGcCreatureDiscoveryThumbnailOverride],
        Field(basic.cTkDynamicArray[cGcCreatureDiscoveryThumbnailOverride], 0x70),
    ]
    AccessoryPitchOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    Axis: Annotated[
        c_enum32[enums.cGcPrimaryAxis], Field(c_enum32[enums.cGcPrimaryAxis], 0x84)
    ]
    DeathEffectScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    DeathFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    DiscoveryFurScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    DiscoveryUIScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    NavRadiusModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    PetIndoorScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    PetLargeUIOverrideScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    Scaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    UnderwaterRagdollAnimStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA8)
    ]
    UnderwaterRagdollAnimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    UnderwaterRagdollDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    UnderwaterRagdollDampingTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    UnderwaterRagdollGravityScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB8)
    ]
    UnderwaterRagdollSpinStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBC)
    ]
    UnderwaterRagdollSpinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    UsePetLargeUIOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC4)]
    UseStandardWaterPusher: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC5)]


@partial_struct
class cGcLanguageFontTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcFontTable],
        Field(basic.cTkDynamicArray[cGcFontTable], 0x0),
    ]


@partial_struct
class cGcPunctuationDelayTable(Structure):
    PunctuationDelays: Annotated[
        cGcPunctuationDelayData, Field(cGcPunctuationDelayData, 0x0)
    ]


@partial_struct
class cGcNGuiSpecialTextImages(Structure):
    SpecialImages: Annotated[
        basic.cTkDynamicArray[cGcNGuiSpecialTextImageData],
        Field(basic.cTkDynamicArray[cGcNGuiSpecialTextImageData], 0x0),
    ]


@partial_struct
class cGcNGuiSpecialTextStyles(Structure):
    SpecialStyles: Annotated[
        basic.cTkDynamicArray[cGcNGuiSpecialTextStyleData],
        Field(basic.cTkDynamicArray[cGcNGuiSpecialTextStyleData], 0x0),
    ]


@partial_struct
class cGcLightingRigComponentData(Structure):
    LightData: Annotated[
        basic.cTkDynamicArray[cGcHeroLightData],
        Field(basic.cTkDynamicArray[cGcHeroLightData], 0x0),
    ]
    PitchAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    PitchAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cTkMeshWaterQualitySettings(Structure):
    MeshWaterQualitySettings: Annotated[
        cTkMeshWaterQualitySettingData, Field(cTkMeshWaterQualitySettingData, 0x0)
    ]
    MeshWaterReflectionQualitySettings: Annotated[
        cTkMeshWaterReflectionQualitySettingData,
        Field(cTkMeshWaterReflectionQualitySettingData, 0xB0),
    ]


@partial_struct
class cGcTexturePrefetchData(Structure):
    Textures: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x0),
    ]


@partial_struct
class cGcAudioPulseDemo(Structure):
    InWarp: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x0)]
    Planet: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x8)]
    Space: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]
    SpaceStation: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x18)]
    Wanted: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    MixRateSeconds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]


@partial_struct
class cGcBaseBuildingPartsDataTable(Structure):
    PartsData: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPartData],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPartData], 0x0),
    ]


@partial_struct
class cGcGeneratedBaseTemplatesTable(Structure):
    DecorationTemplates: Annotated[
        basic.cTkDynamicArray[cGcGeneratedBaseDecorationTemplate],
        Field(basic.cTkDynamicArray[cGcGeneratedBaseDecorationTemplate], 0x0),
    ]
    PruningRules: Annotated[
        basic.cTkDynamicArray[cGcGeneratedBasePruningRule],
        Field(basic.cTkDynamicArray[cGcGeneratedBasePruningRule], 0x10),
    ]
    RoomTemplates: Annotated[
        basic.cTkDynamicArray[cGcGeneratedBaseRoomTemplate],
        Field(basic.cTkDynamicArray[cGcGeneratedBaseRoomTemplate], 0x20),
    ]
    ThemeTemplates: Annotated[
        basic.cTkDynamicArray[cGcGeneratedBaseThemeTemplate],
        Field(basic.cTkDynamicArray[cGcGeneratedBaseThemeTemplate], 0x30),
    ]


@partial_struct
class cTkStaticPhysicsComponentData(Structure):
    Data: Annotated[cTkPhysicsData, Field(cTkPhysicsData, 0x0)]
    NavMeshInclusion: Annotated[
        cTkNavMeshInclusionParams, Field(cTkNavMeshInclusionParams, 0x18)
    ]

    class eStaticPhysicsTargetNodeEnum(IntEnum):
        Attachment = 0x0
        MasterModel = 0x1

    StaticPhysicsTargetNode: Annotated[
        c_enum32[eStaticPhysicsTargetNodeEnum],
        Field(c_enum32[eStaticPhysicsTargetNodeEnum], 0x20),
    ]
    TriggerVolumeType: Annotated[
        c_enum32[enums.cTkVolumeTriggerType],
        Field(c_enum32[enums.cTkVolumeTriggerType], 0x24),
    ]
    AddToWorldImmediately: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    AddToWorldOnPrepare: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]
    CameraInvisible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A)]
    Climbable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2B)]
    NoPlayerCollide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    NoTerrainCollide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    NoVehicleCollide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]
    TriggerVolume: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F)]


@partial_struct
class cGcBuildingModeCondition(Structure):
    ValidBuildingModes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcBaseBuildingPartsNavDataTable(Structure):
    Parts: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPartNavData],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPartNavData], 0x0),
    ]


@partial_struct
class cGcBaseObjectDescriptorComponentData(Structure):
    ProcSceneFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    ForceShowPickUpLabel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcFishingRodTable(Structure):
    FishingRodResource: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    FishingRods: Annotated[
        basic.cTkDynamicArray[cGcFishingRodData],
        Field(basic.cTkDynamicArray[cGcFishingRodData], 0x10),
    ]


@partial_struct
class cGcEntitlementRewardsTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcEntitlementRewardData],
        Field(basic.cTkDynamicArray[cGcEntitlementRewardData], 0x0),
    ]


@partial_struct
class cGcPlayerMissionUpgradeMapTable(Structure):
    MissionProgressTable: Annotated[
        basic.cTkDynamicArray[cGcPlayerMissionUpgradeMapEntry],
        Field(basic.cTkDynamicArray[cGcPlayerMissionUpgradeMapEntry], 0x0),
    ]


@partial_struct
class cGcInventoryStoreBalance(Structure):
    DeconstructRefundPercentage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    PlayerPersonalInventoryCargoHeight: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x4)
    ]
    PlayerPersonalInventoryCargoWidth: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x8)
    ]
    PlayerPersonalInventoryTechHeight: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xC)
    ]
    PlayerPersonalInventoryTechWidth: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x10)
    ]


@partial_struct
class cGcPlayerMissionProgressMapTable(Structure):
    MissionProgressTable: Annotated[
        basic.cTkDynamicArray[cGcPlayerMissionProgressMapEntry],
        Field(basic.cTkDynamicArray[cGcPlayerMissionProgressMapEntry], 0x0),
    ]


@partial_struct
class cTkGraphicsSettings(Structure):
    MonitorNames: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x100],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x100], 0x0),
    ]
    GraphicsDetail: Annotated[
        cTkGraphicsDetailPreset, Field(cTkGraphicsDetailPreset, 0x10)
    ]
    AdapterIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    Brightness: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78)]
    FoVInShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    FoVOnFoot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]

    class eHDRModeEnum(IntEnum):
        Off = 0x0
        HDR400 = 0x1
        HDR600 = 0x2
        HDR1000 = 0x3

    HDRMode: Annotated[c_enum32[eHDRModeEnum], Field(c_enum32[eHDRModeEnum], 0x84)]
    MaxframeRate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x88)]
    Monitor: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8C)]
    MotionBlurStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    MouseClickSpeedMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    NumGraphicsThreadsBeta: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x98)]
    NumHighThreads: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9C)]
    NumLowThreads: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    ResolutionHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA4)]
    ResolutionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    ResolutionWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xAC)]
    RetinaScaleIOS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]

    class eTextureStreamingVkEnum(IntEnum):
        Off = 0x0
        On = 0x1
        Auto = 0x2
        NonDynamic = 0x3

    TextureStreamingVk: Annotated[
        c_enum32[eTextureStreamingVkEnum],
        Field(c_enum32[eTextureStreamingVkEnum], 0xB4),
    ]
    Version: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB8)]

    class eVsyncExEnum(IntEnum):
        Off = 0x0
        On = 0x1
        Adaptive = 0x2
        Triple = 0x3

    VsyncEx: Annotated[c_enum32[eVsyncExEnum], Field(c_enum32[eVsyncExEnum], 0xBC)]
    AdapterName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xC0)
    ]
    Borderless: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C0)]
    FullScreen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C1)]
    RemoveBaseBuildingRestrictions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C2)
    ]
    ShowRequirementsWarnings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C3)]
    UseArbSparseTexture: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C4)]
    UseTerrainTextureCache: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5)]
    VignetteAndScanlines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C6)]


@partial_struct
class cGcPetAccessoryTable(Structure):
    Accessories: Annotated[cGcPetAccessoryInfo, Field(cGcPetAccessoryInfo, 0x0)]
    AccessoryGroups: Annotated[
        basic.cTkDynamicArray[cGcPetAccessoryGroup],
        Field(basic.cTkDynamicArray[cGcPetAccessoryGroup], 0x3C0),
    ]


@partial_struct
class cGcPetEggSpeciesOverrideTable(Structure):
    SpeciesOverrides: Annotated[
        basic.cTkDynamicArray[cGcPetEggSpeciesOverrideData],
        Field(basic.cTkDynamicArray[cGcPetEggSpeciesOverrideData], 0x0),
    ]


@partial_struct
class cTkNetReplicatedEntityComponentData(Structure):
    ReplicaComponentMask: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x80],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x80], 0x0),
    ]

    class eReplicationRangeEnum(IntEnum):
        NotSet = 0x0
        System = 0x1
        SystemLocal = 0x2
        Planet = 0x3
        PlanetLocal = 0x4
        Space = 0x5
        SpaceStation = 0x6
        Nexus = 0x7

    ReplicationRange: Annotated[
        c_enum32[eReplicationRangeEnum], Field(c_enum32[eReplicationRangeEnum], 0x10)
    ]

    class eSpawnTypeEnum(IntEnum):
        Basic = 0x0
        Creature = 0x1

    SpawnType: Annotated[
        c_enum32[eSpawnTypeEnum], Field(c_enum32[eSpawnTypeEnum], 0x14)
    ]
    IgnoreComponents: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    ReplicateToShipmates: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]


@partial_struct
class cGcCustomisationColourPalettes(Structure):
    CustomisationTypePalettes: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Palettes: Annotated[
        basic.cTkDynamicArray[cGcCustomisationColourPalette],
        Field(basic.cTkDynamicArray[cGcCustomisationColourPalette], 0x1A0),
    ]


@partial_struct
class cGcCustomisationTextureOptions(Structure):
    MultiTextureOptions: Annotated[
        basic.cTkDynamicArray[cGcCustomisationMultiTextureOption],
        Field(basic.cTkDynamicArray[cGcCustomisationMultiTextureOption], 0x0),
    ]
    TextureOptions: Annotated[
        basic.cTkDynamicArray[cGcCustomisationTextureOption],
        Field(basic.cTkDynamicArray[cGcCustomisationTextureOption], 0x10),
    ]


@partial_struct
class cGcCustomisationThrusterEffects(Structure):
    BackpackData: Annotated[
        basic.cTkDynamicArray[cGcCustomisationBackpackData],
        Field(basic.cTkDynamicArray[cGcCustomisationBackpackData], 0x0),
    ]
    FreighterEngineEffects: Annotated[
        basic.cTkDynamicArray[cGcCustomisationFreighterEngineEffect],
        Field(basic.cTkDynamicArray[cGcCustomisationFreighterEngineEffect], 0x10),
    ]
    JetpackEffects: Annotated[
        basic.cTkDynamicArray[cGcCustomisationThrusterEffect],
        Field(basic.cTkDynamicArray[cGcCustomisationThrusterEffect], 0x20),
    ]
    ShipEffects: Annotated[
        basic.cTkDynamicArray[cGcCustomisationShipTrails],
        Field(basic.cTkDynamicArray[cGcCustomisationShipTrails], 0x30),
    ]


@partial_struct
class cGcCustomisationBannerGroup(Structure):
    BackgroundColours: Annotated[cGcPaletteData, Field(cGcPaletteData, 0x0)]
    MainColours: Annotated[cGcPaletteData, Field(cGcPaletteData, 0x410)]
    BackgroundColoursExtraData: Annotated[
        cGcCustomisationColourPaletteExtraData,
        Field(cGcCustomisationColourPaletteExtraData, 0x820),
    ]
    MainColoursExtraData: Annotated[
        cGcCustomisationColourPaletteExtraData,
        Field(cGcCustomisationColourPaletteExtraData, 0x840),
    ]
    BannerImages: Annotated[
        basic.cTkDynamicArray[cGcCustomisationBannerImageData],
        Field(basic.cTkDynamicArray[cGcCustomisationBannerImageData], 0x860),
    ]


@partial_struct
class cGcCustomisationShipBobbleHeads(Structure):
    BobbleHeads: Annotated[
        basic.cTkDynamicArray[cGcCustomisationBobbleHead],
        Field(basic.cTkDynamicArray[cGcCustomisationBobbleHead], 0x0),
    ]


@partial_struct
class cGcSaveContextDataMaskTable(Structure):
    Masks: Annotated[
        basic.cTkDynamicArray[cGcSaveContextDataMaskTableEntry],
        Field(basic.cTkDynamicArray[cGcSaveContextDataMaskTableEntry], 0x0),
    ]
    Default: Annotated[cGcSaveContextDataMask, Field(cGcSaveContextDataMask, 0x10)]


@partial_struct
class cGcUserSettingsData(Structure):
    CustomBindingsMac: Annotated[
        basic.cTkDynamicArray[cGcInputActionMapping2],
        Field(basic.cTkDynamicArray[cGcInputActionMapping2], 0x0),
    ]
    CustomBindingsPC: Annotated[
        basic.cTkDynamicArray[cGcInputActionMapping2],
        Field(basic.cTkDynamicArray[cGcInputActionMapping2], 0x10),
    ]
    CustomBindingsPlaystation: Annotated[
        basic.cTkDynamicArray[cGcInputActionMapping2],
        Field(basic.cTkDynamicArray[cGcInputActionMapping2], 0x20),
    ]
    CustomBindingsSwitch: Annotated[
        basic.cTkDynamicArray[cGcInputActionMapping2],
        Field(basic.cTkDynamicArray[cGcInputActionMapping2], 0x30),
    ]
    CustomBindingsXbox: Annotated[
        basic.cTkDynamicArray[cGcInputActionMapping2],
        Field(basic.cTkDynamicArray[cGcInputActionMapping2], 0x40),
    ]
    SeenProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x50),
    ]
    SeenSubstances: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x60),
    ]
    SeenTechnologies: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x70),
    ]
    SeenWikiTopics: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x80),
    ]
    UnlockedPlatformRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x90),
    ]
    UnlockedSeasonRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xA0),
    ]
    UnlockedSpecials: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xB0),
    ]
    UnlockedTitles: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xC0),
    ]
    UnlockedTwitchRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xD0),
    ]
    UnlockedWikiTopics: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xE0),
    ]
    UpgradedUsers: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x80],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x80], 0xF0),
    ]
    BlockList: Annotated[cGcBlockListPersistence, Field(cGcBlockListPersistence, 0x100)]
    GyroSettings: Annotated[cGcGyroSettingsData, Field(cGcGyroSettingsData, 0x3950)]

    class eBaseSharingModeEnum(IntEnum):
        Undecided = 0x0
        On = 0x1
        Off = 0x2

    BaseSharingMode: Annotated[
        c_enum32[eBaseSharingModeEnum], Field(c_enum32[eBaseSharingModeEnum], 0x39C4)
    ]
    CamerShakeStrength: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39C8)]

    class eConsoleHFREnum(IntEnum):
        False_ = 0x0
        True_ = 0x1

    ConsoleHFR: Annotated[
        c_enum32[eConsoleHFREnum], Field(c_enum32[eConsoleHFREnum], 0x39CC)
    ]
    CrossSavesUploadTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x39D0)]
    CursorSensitivityMode1: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39D4)]
    CursorSensitivityMode2: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39D8)]
    DominantHand: Annotated[
        c_enum32[enums.cGcHand], Field(c_enum32[enums.cGcHand], 0x39DC)
    ]

    class eEyeTrackingFlagsEnum(IntEnum):
        empty = 0x0
        BaseBuilding = 0x1
        WristMenus = 0x2
        Menus = 0x4

    EyeTrackingFlags: Annotated[
        c_enum32[eEyeTrackingFlagsEnum], Field(c_enum32[eEyeTrackingFlagsEnum], 0x39E0)
    ]
    Filter: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39E4)]
    FireteamSessionCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39E8)]
    FlightSensitivityMode1: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39EC)]
    FlightSensitivityMode2: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39F0)]
    FrontendZoom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x39F4)]
    HazardEffectsStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x39F8)]
    HeadsetVibrationStrength: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x39FC)]

    class eHighResVRUIEnum(IntEnum):
        High = 0x0
        Low = 0x1

    HighResVRUI: Annotated[
        c_enum32[eHighResVRUIEnum], Field(c_enum32[eHighResVRUIEnum], 0x3A00)
    ]
    HUDZoom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A04)]
    Language: Annotated[
        c_enum32[enums.cTkLanguages], Field(c_enum32[enums.cTkLanguages], 0x3A08)
    ]
    LastSeenCommunityMission: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A0C)]
    LastSeenCommunityMissionTier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x3A10)
    ]
    LookSensitivityMode1: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A14)]
    LookSensitivityMode2: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A18)]
    MotionBlurAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A1C)]
    MouseSpringSmoothing: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A20)]
    MovementDirectionHands: Annotated[
        c_enum32[enums.cGcMovementDirection],
        Field(c_enum32[enums.cGcMovementDirection], 0x3A24),
    ]
    MovementDirectionPad: Annotated[
        c_enum32[enums.cGcMovementDirection],
        Field(c_enum32[enums.cGcMovementDirection], 0x3A28),
    ]

    class eMovementModeEnum(IntEnum):
        Teleporter = 0x0
        Smooth = 0x1

    MovementMode: Annotated[
        c_enum32[eMovementModeEnum], Field(c_enum32[eMovementModeEnum], 0x3A2C)
    ]
    MusicVolume: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A30)]
    PlayerHUDVROffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A34)]

    class ePlayerVoiceEnum(IntEnum):
        Off = 0x0
        High = 0x1
        Low = 0x2
        Alien = 0x3

    PlayerVoice: Annotated[
        c_enum32[ePlayerVoiceEnum], Field(c_enum32[ePlayerVoiceEnum], 0x3A38)
    ]

    class ePS4FixedFPSEnum(IntEnum):
        Invalid = 0x0
        True_ = 0x1
        False_ = 0x2
        MaxPerformance = 0x3

    PS4FixedFPS: Annotated[
        c_enum32[ePS4FixedFPSEnum], Field(c_enum32[ePS4FixedFPSEnum], 0x3A3C)
    ]
    PS4FOVFoot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A40)]
    PS4FOVShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A44)]
    ScreenBrightness: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A48)]
    SfxVolume: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A4C)]
    ShipHUDVROffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A50)]

    class eSpaceCombatFollowModeEnum(IntEnum):
        Disabled = 0x0
        Hold = 0x1
        Toggle = 0x2

    SpaceCombatFollowMode: Annotated[
        c_enum32[eSpaceCombatFollowModeEnum],
        Field(c_enum32[eSpaceCombatFollowModeEnum], 0x3A54),
    ]

    class eSuitVoiceEnum(IntEnum):
        Off = 0x0
        High = 0x1
        Low = 0x2

    SuitVoice: Annotated[
        c_enum32[eSuitVoiceEnum], Field(c_enum32[eSuitVoiceEnum], 0x3A58)
    ]

    class eTemperatureUnitEnum(IntEnum):
        Invalid = 0x0
        C = 0x1
        F = 0x2
        K = 0x3

    TemperatureUnit: Annotated[
        c_enum32[eTemperatureUnitEnum], Field(c_enum32[eTemperatureUnitEnum], 0x3A5C)
    ]
    TriggerFeedbackStrength: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A60)]

    class eTurnModeEnum(IntEnum):
        Smooth = 0x0
        Snap = 0x1

    TurnMode: Annotated[c_enum32[eTurnModeEnum], Field(c_enum32[eTurnModeEnum], 0x3A64)]

    class eUIColourSchemeEnum(IntEnum):
        Default = 0x0
        Protanopia = 0x1
        Deuteranopia = 0x2
        Tritanopia = 0x3

    UIColourScheme: Annotated[
        c_enum32[eUIColourSchemeEnum], Field(c_enum32[eUIColourSchemeEnum], 0x3A68)
    ]
    UnderwaterDepthOfFieldStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3A6C)
    ]
    VibrationStrength: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A70)]
    VoiceVolume: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3A74)]
    VRVignetteStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A78)]
    AccessibleText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A7C)]
    AllowWhiteScreenTransitions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A7D)]
    AutoRotateThirdPersonPlayerCamera: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3A7E)
    ]
    AutoScanDiscoveries: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A7F)]
    BaseBuildingShowOptionsFromVision: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3A80)
    ]
    BaseComplexityLimitsEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A81)]
    CrossPlatform: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A82)]
    CrossSaves: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A83)]
    CrossSavesAutoUploads: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A84)]
    CrossSavesSuppressAutoUploadTimeoutPopup: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3A85)
    ]
    DamageNumbers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A86)]
    EnableControllerCursorInVR: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A87)]
    EnableLargeLobbies: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A88)]
    EnableModdingConsole: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A89)]
    HeadBob: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A8A)]
    HighlightInteractableObjects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A8B)]
    HUDHidden: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A8C)]
    IncreaseMissionTextContrast: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A8D)]
    InstantUIDelete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A8E)]
    InstantUIInputs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A8F)]
    InvertFlightControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A90)]
    InvertLookControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A91)]
    InvertVRInWorldFlightControls: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3A92)
    ]
    MoveableWristMenus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A93)]
    Multiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A94)]
    PlaceJumpSwap: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A95)]
    PS4VignetteAndScanlines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A96)]
    PS5ProVRPSSR: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A97)]
    QuickMenuBuildMenuSwap: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A98)]
    SpeechToText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A99)]
    SpookHazardSkySpin: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A9A)]
    SprintScanSwap: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A9B)]
    Translate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A9C)]
    UseAutoTorch: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A9D)]
    UseCharacterHeightForCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A9E)]
    UseOldMouseFlight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A9F)]
    UseShipAutoControlVignette: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA0)]
    Vibration: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA1)]
    VoiceChat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA2)]
    VRHandControllerEnableTwist: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA3)]
    VRHandControllerSwapYawAndRoll: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3AA4)
    ]
    VRHeadBob: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA5)]
    VRShowBody: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA6)]
    VRVehiclesUseWorldControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA7)]
    XboxOneXHighResolutionMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3AA8)]


@partial_struct
class cGcLeveledStatTable(Structure):
    LeveledStatTable: Annotated[
        basic.cTkDynamicArray[cGcLeveledStatData],
        Field(basic.cTkDynamicArray[cGcLeveledStatData], 0x0),
    ]


@partial_struct
class cGcStatGroupTable(Structure):
    StatGroupTable: Annotated[
        basic.cTkDynamicArray[cGcStatGroupData],
        Field(basic.cTkDynamicArray[cGcStatGroupData], 0x0),
    ]


@partial_struct
class cGcJourneyMilestoneTable(Structure):
    JourneyMilestoneTable: Annotated[
        basic.cTkDynamicArray[cGcJourneyMilestoneData],
        Field(basic.cTkDynamicArray[cGcJourneyMilestoneData], 0x0),
    ]


@partial_struct
class cGcStatDefinitionTable(Structure):
    StatDefinitionTable: Annotated[
        basic.cTkDynamicArray[cGcStatDefinition],
        Field(basic.cTkDynamicArray[cGcStatDefinition], 0x0),
    ]


@partial_struct
class cGcPaletteList(Structure):
    Palettes: Annotated[cGcPaletteData, Field(cGcPaletteData, 0x0)]


@partial_struct
class cGcByteBeatTemplates(Structure):
    HiHats: Annotated[
        basic.cTkDynamicArray[cGcByteBeatDrum],
        Field(basic.cTkDynamicArray[cGcByteBeatDrum], 0x0),
    ]
    InitialTrees: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0x10),
    ]
    KickDrums: Annotated[
        basic.cTkDynamicArray[cGcByteBeatDrum],
        Field(basic.cTkDynamicArray[cGcByteBeatDrum], 0x20),
    ]
    SnareDrums: Annotated[
        basic.cTkDynamicArray[cGcByteBeatDrum],
        Field(basic.cTkDynamicArray[cGcByteBeatDrum], 0x30),
    ]
    Songs: Annotated[
        basic.cTkDynamicArray[cGcByteBeatSong],
        Field(basic.cTkDynamicArray[cGcByteBeatSong], 0x40),
    ]
    Templates: Annotated[
        basic.cTkDynamicArray[cGcByteBeatTemplate],
        Field(basic.cTkDynamicArray[cGcByteBeatTemplate], 0x50),
    ]
    CombinerWeights: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    OperatorPermuteChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    TemplateCombineChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    TemplateCombineChanceAtRoot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]


@partial_struct
class cGcByteBeatIcons(Structure):
    Icons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    SawTooth: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1B0)]
    Sine: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1C8)]
    Square: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1E0)]
    Triangle: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1F8)]


@partial_struct
class cGcCustomInventoryComponentData(Structure):
    DesiredTechs: Annotated[
        basic.cTkDynamicArray[cGcInventoryTechProbability],
        Field(basic.cTkDynamicArray[cGcInventoryTechProbability], 0x0),
    ]
    Size: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Cool: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cTkMetadataFilenameList(Structure):
    Filenames: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x0),
    ]


@partial_struct
class cGcScannerIcons(Structure):
    ScannableColours: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    NetworkFSPlayerColours: Annotated[basic.Colour, Field(basic.Colour, 0x4B0)]
    BuildingColour: Annotated[basic.Colour, Field(basic.Colour, 0x4F0)]
    GenericColour: Annotated[basic.Colour, Field(basic.Colour, 0x500)]
    RelicColour: Annotated[basic.Colour, Field(basic.Colour, 0x510)]
    SignalColour: Annotated[basic.Colour, Field(basic.Colour, 0x520)]
    UnknownColour: Annotated[basic.Colour, Field(basic.Colour, 0x530)]
    ScannableIcons: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x540)]
    ScannableIconsBinocs: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x15A8)]
    BuildingIcons: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x2610)]
    BuildingIconsBinocs: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x2DB8)]
    BuildingIconsHuge: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x3560)]
    Vehicles: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x3D08)]
    GenericIcons: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x3E90)]
    NetworkFSPlayerCorvetteTeleporter: Annotated[
        cGcScannerIcon, Field(cGcScannerIcon, 0x3FE0)
    ]
    NetworkFSPlayerMarkers: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x40C0)]
    NetworkFSPlayerMarkersShip: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x41A0)]
    NetworkPlayerFreighter: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4280)]
    HighlightIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x4360)]
    ArrowLarge: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x43D8)]
    ArrowSmall: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4410)]
    BaseBuildingMarker: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4448)]
    Battle: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4480)]
    BattleSmall: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x44B8)]
    BlackHole: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x44F0)]
    Bounty1: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4528)]
    Bounty2: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4560)]
    Bounty3: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4598)]
    BountySmall: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x45D0)]
    Checkpoint: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4608)]
    CircleAnimation: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4640)]
    Corvette: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4678)]
    CorvetteDeployedTeleporter: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x46B0)]
    CreatureAction: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x46E8)]
    CreatureCurious: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4720)]
    CreatureDanger: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4758)]
    CreatureDiscovered: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4790)]
    CreatureFiend: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x47C8)]
    CreatureInteraction: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4800)]
    CreatureMilk: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4838)]
    CreatureTame: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4870)]
    CreatureUndiscovered: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x48A8)]
    CreatureUnknown: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x48E0)]
    DamagedFrigate: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4918)]
    Death: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4950)]
    DeathSmall: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4988)]
    DiamondAnimation: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x49C0)]
    EditingBase: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x49F8)]
    Expedition: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4A30)]
    Freighter: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4A68)]
    FreighterBase: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4AA0)]
    FriendlyDrone: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4AD8)]
    Garage: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4B10)]
    HexAnimation: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4B48)]
    MessageBeacon: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4B80)]
    MessageBeaconSmall: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4BB8)]
    MissionAbandonedFreighter: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4BF0)]
    MissionEnterBuilding: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4C28)]
    MissionEnterFreighter: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4C60)]
    MissionEnterOrbit: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4C98)]
    MissionEnterStation: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4CD0)]
    MonumentMarker: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4D08)]
    NetworkPlayerMarker: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4D40)]
    NetworkPlayerMarkerShip: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4D78)]
    NetworkPlayerMarkerVehicle: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4DB0)]
    NPC: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4DE8)]
    OtherPlayerSettlement: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4E20)]
    Pet: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4E58)]
    PetActivity: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4E90)]
    PetInteraction: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4EC8)]
    PetSad: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4F00)]
    PirateRaid: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4F38)]
    PlanetPoleEast: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4F70)]
    PlanetPoleNorth: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4FA8)]
    PlanetPoleSouth: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x4FE0)]
    PlanetPoleWest: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5018)]
    PlayerBase: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5050)]
    PlayerFreighter: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5088)]
    PlayerSettlement: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x50C0)]
    PortalMarker: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x50F8)]
    PurchasableFrigate: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5130)]
    SettlementNPC: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5168)]
    Ship: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x51A0)]
    ShipSmall: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x51D8)]
    TaggedBuilding: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5210)]
    TaggedPlanet: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5248)]
    TimedEvent: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x5280)]
    VehicleGeneric: Annotated[cGcScannerIcon, Field(cGcScannerIcon, 0x52B8)]


@partial_struct
class cGcScreenFilterTable(Structure):
    Filters: Annotated[cGcScreenFilterData, Field(cGcScreenFilterData, 0x0)]


@partial_struct
class cGcNetworkInterpolationComponentData(Structure):
    class eSynchroniseScaleEnum(IntEnum):
        Never = 0x0
        Once = 0x1
        Always = 0x2

    SynchroniseScale: Annotated[
        c_enum32[eSynchroniseScaleEnum], Field(c_enum32[eSynchroniseScaleEnum], 0x0)
    ]
    SupportTeleportation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    UpdateWhileInactive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]


@partial_struct
class cGcNetworkPlayerMarkerComponentData(Structure):
    pass


@partial_struct
class cGcStatusMessageDefinitions(Structure):
    MissionMarkupColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    PetChatTemplates: Annotated[
        cGcPetVocabularyEntry, Field(cGcPetVocabularyEntry, 0x10)
    ]
    PetVocabulary: Annotated[cGcPetVocabularyEntry, Field(cGcPetVocabularyEntry, 0x4A8)]
    FriendlyDroneChatTemplates: Annotated[
        cGcFriendlyDroneVocabularyEntry, Field(cGcFriendlyDroneVocabularyEntry, 0x7F0)
    ]
    Messages: Annotated[
        basic.cTkDynamicArray[cGcStatusMessageDefinition],
        Field(basic.cTkDynamicArray[cGcStatusMessageDefinition], 0x890),
    ]


@partial_struct
class cGcItemFilterDataTable(Structure):
    Filters: Annotated[
        basic.cTkDynamicArray[cGcItemFilterDataTableEntry],
        Field(basic.cTkDynamicArray[cGcItemFilterDataTableEntry], 0x0),
    ]


@partial_struct
class cGcGalaxyInfoIcons(Structure):
    RaceIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    EconomyIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0xD8)]
    ConflictIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x180)]
    WealthIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1E0)]
    ConflictTechNotInstalledIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x240)
    ]
    EconomyTechNotInstalledIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x258)
    ]
    WarpErrorIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x270)]
    WarpIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x288)]
    WarpTechNotInstalledIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x2A0)
    ]


@partial_struct
class cGcMissionCommunityData(Structure):
    CommunityMissionsData: Annotated[
        basic.cTkDynamicArray[cGcMissionCommunityMissionData],
        Field(basic.cTkDynamicArray[cGcMissionCommunityMissionData], 0x0),
    ]
    CommunityMissionsIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]


@partial_struct
class cGcPlayerEmoteList(Structure):
    Emotes: Annotated[cGcPlayerEmote, Field(cGcPlayerEmote, 0x0)]


@partial_struct
class cGcHistoricalSeasonDataTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcHistoricalSeasonData],
        Field(basic.cTkDynamicArray[cGcHistoricalSeasonData], 0x0),
    ]


@partial_struct
class cGcPlayerTitleData(Structure):
    Titles: Annotated[cGcPlayerTitle, Field(cGcPlayerTitle, 0x0)]


@partial_struct
class cGcBaitTable(Structure):
    Bait: Annotated[
        basic.cTkDynamicArray[cGcBaitData],
        Field(basic.cTkDynamicArray[cGcBaitData], 0x0),
    ]


@partial_struct
class cGcProductDescriptionOverrideTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcProductDescriptionOverride],
        Field(basic.cTkDynamicArray[cGcProductDescriptionOverride], 0x0),
    ]


@partial_struct
class cGcDialogClearanceTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcDialogClearanceInfo],
        Field(basic.cTkDynamicArray[cGcDialogClearanceInfo], 0x0),
    ]


@partial_struct
class cGcFishTable(Structure):
    Fish: Annotated[
        basic.cTkDynamicArray[cGcFishData],
        Field(basic.cTkDynamicArray[cGcFishData], 0x0),
    ]


@partial_struct
class cGcTradingClassTable(Structure):
    CategoryData: Annotated[cGcTradingCategoryData, Field(cGcTradingCategoryData, 0x0)]
    TradingClassesData: Annotated[
        cGcTradingClassData, Field(cGcTradingClassData, 0x360)
    ]
    MaxTradingMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4E8)]
    MinTradingMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4EC)]


@partial_struct
class cGcItemCostTable(Structure):
    Items: Annotated[cGcItemCostData, Field(cGcItemCostData, 0x0)]


@partial_struct
class cGcUnlockableSeasonRewards(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcUnlockableSeasonReward],
        Field(basic.cTkDynamicArray[cGcUnlockableSeasonReward], 0x0),
    ]


@partial_struct
class cGcUnlockablePlatformRewards(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcUnlockablePlatformReward],
        Field(basic.cTkDynamicArray[cGcUnlockablePlatformReward], 0x0),
    ]


@partial_struct
class cGcUnlockableTwitchRewards(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcUnlockableTwitchReward],
        Field(basic.cTkDynamicArray[cGcUnlockableTwitchReward], 0x0),
    ]


@partial_struct
class cGcCostTable(Structure):
    AtlasPathCosts: Annotated[
        basic.cTkDynamicArray[cGcCostTableEntry],
        Field(basic.cTkDynamicArray[cGcCostTableEntry], 0x0),
    ]
    InteractionTable: Annotated[
        basic.cTkDynamicArray[cGcCostTableEntry],
        Field(basic.cTkDynamicArray[cGcCostTableEntry], 0x10),
    ]
    ItemCostsTable: Annotated[
        basic.cTkDynamicArray[cGcCostTableEntry],
        Field(basic.cTkDynamicArray[cGcCostTableEntry], 0x20),
    ]
    SimpleInteractionTable: Annotated[
        basic.cTkDynamicArray[cGcCostTableEntry],
        Field(basic.cTkDynamicArray[cGcCostTableEntry], 0x30),
    ]
    UnusedCostsTable: Annotated[
        basic.cTkDynamicArray[cGcCostTableEntry],
        Field(basic.cTkDynamicArray[cGcCostTableEntry], 0x40),
    ]


@partial_struct
class cGcPurchaseableSpecials(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcPurchaseableSpecial],
        Field(basic.cTkDynamicArray[cGcPurchaseableSpecial], 0x0),
    ]


@partial_struct
class cGcPurchaseableBuildingBlueprints(Structure):
    GroupMaxItems: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x0),
    ]
    Table: Annotated[
        basic.cTkDynamicArray[cGcBuildingBlueprint],
        Field(basic.cTkDynamicArray[cGcBuildingBlueprint], 0x10),
    ]


@partial_struct
class cGcDiscoveryRewardLookupTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcDiscoveryRewardLookup],
        Field(basic.cTkDynamicArray[cGcDiscoveryRewardLookup], 0x0),
    ]


@partial_struct
class cGcStatRewardsTable(Structure):
    StatRewardGroups: Annotated[
        basic.cTkDynamicArray[cGcStatRewardGroup],
        Field(basic.cTkDynamicArray[cGcStatRewardGroup], 0x0),
    ]


@partial_struct
class cGcAlienSpeechTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcAlienSpeechEntry],
        Field(basic.cTkDynamicArray[cGcAlienSpeechEntry], 0x0),
    ]


@partial_struct
class cGcLegacyItemTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcLegacyItem],
        Field(basic.cTkDynamicArray[cGcLegacyItem], 0x0),
    ]


@partial_struct
class cGcTechBoxTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcTechBoxData],
        Field(basic.cTkDynamicArray[cGcTechBoxData], 0x0),
    ]


@partial_struct
class cGcProceduralTechnologyTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcProceduralTechnologyData],
        Field(basic.cTkDynamicArray[cGcProceduralTechnologyData], 0x0),
    ]


@partial_struct
class cGcAudioAreaTriggerComponentData(Structure):
    EnterDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    EventEnter: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x4),
    ]
    EventExit: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x8),
    ]
    ExitDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cGcObjectSpawnerComponentData(Structure):
    Object: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    SpawnCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    SpawnPowerCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]


@partial_struct
class cGcSpawnedObjectComponentData(Structure):
    CanBeTeleported: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcHologramComponentData(Structure):
    HologramColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    AttractDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    HologramType: Annotated[
        c_enum32[enums.cGcHologramType], Field(c_enum32[enums.cGcHologramType], 0x14)
    ]
    MaxSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    OnInteractState: Annotated[
        c_enum32[enums.cGcHologramState], Field(c_enum32[enums.cGcHologramState], 0x20)
    ]
    RotateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    xPivot: Annotated[
        c_enum32[enums.cGcHologramPivotType],
        Field(c_enum32[enums.cGcHologramPivotType], 0x28),
    ]
    yPivot: Annotated[
        c_enum32[enums.cGcHologramPivotType],
        Field(c_enum32[enums.cGcHologramPivotType], 0x2C),
    ]
    zPivot: Annotated[
        c_enum32[enums.cGcHologramPivotType],
        Field(c_enum32[enums.cGcHologramPivotType], 0x30),
    ]
    DisableOnInteract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]
    DisableWhenNotInteracting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35)]
    ScaleInAndOut: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x36)]
    UseStationLightColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x37)]


@partial_struct
class cGcDissolveEffectComponentData(Structure):
    DissolveBeginHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DissolveEndHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcModelExplosionRules(Structure):
    Rules: Annotated[
        basic.cTkDynamicArray[cGcModelExplosionRule],
        Field(basic.cTkDynamicArray[cGcModelExplosionRule], 0x0),
    ]
    ShipSalvageDisplayScales: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    UseRules: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]


@partial_struct
class cGcAlienPodComponentData(Structure):
    AgroMovement: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AgroMovementRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    AgroRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    AgroSpookTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    AgroSpookTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AgroSpookTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    AgroSpookValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    AgroThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    AgroThresholdOffscreen: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AgroTorch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    AgroTorchFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    AgroTorchRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    GlowIntensityMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    GlowIntensityMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    GunfireAgro: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    GunfireAgroRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    InstaAgroDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]


@partial_struct
class cGcAntagonistComponentData(Structure):
    Enemies: Annotated[cGcAntagonistEnemy, Field(cGcAntagonistEnemy, 0x0)]
    Friends: Annotated[cGcAntagonistFriend, Field(cGcAntagonistFriend, 0x90)]
    Perceptions: Annotated[
        basic.cTkDynamicArray[cGcAntagonistPerception],
        Field(basic.cTkDynamicArray[cGcAntagonistPerception], 0x120),
    ]
    CommunicationDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    ComprehensionFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x134)]
    Group: Annotated[
        c_enum32[enums.cGcAntagonistGroup],
        Field(c_enum32[enums.cGcAntagonistGroup], 0x138),
    ]
    ScarinessFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C)]
    ShockedFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]


@partial_struct
class cGcAtmosphereEntryComponentData(Structure):
    FlareEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ImpactEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    EditTerrainRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    EntryOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    EntryTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    AutoEntry: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]


@partial_struct
class cGcBaseDefenceComponentData(Structure):
    Triggers: Annotated[
        basic.cTkDynamicArray[cGcBaseDefenceTrigger],
        Field(basic.cTkDynamicArray[cGcBaseDefenceTrigger], 0x0),
    ]
    LaserRangeAnimateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    LostUncertaintyThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SearchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    PrioritiseThreats: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]


@partial_struct
class cGcByteBeatSwitchComponentData(Structure):
    Temp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcBuildingComponentData(Structure):
    pass


@partial_struct
class cGcChairComponentData(Structure):
    pass


@partial_struct
class cTkLODComponentData(Structure):
    LODModels: Annotated[
        basic.cTkDynamicArray[cTkLODModelResource],
        Field(basic.cTkDynamicArray[cTkLODModelResource], 0x0),
    ]
    CrossFadeOverlap: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    CrossFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    UseMasterModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcCustomSpaceStormComponentData(Structure):
    StormId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcDiscoveryDisplayComponentData(Structure):
    DiscoveryScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x0)]
    DiscoveryScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    DiscoveryScalePlanets: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]


@partial_struct
class cTkAudioComponentData(Structure):
    AmbientState: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AnimTriggers: Annotated[
        basic.cTkDynamicArray[cTkAudioAnimTrigger],
        Field(basic.cTkDynamicArray[cTkAudioAnimTrigger], 0x10),
    ]
    Emitters: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x20),
    ]
    MaxDistance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    OcclusionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    OcclusionRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    Ambient: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x3C)]
    Shutdown: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xBC)]
    LocalOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13C)]


@partial_struct
class cGcCombatEffectsComponentData(Structure):
    EffectsProperties: Annotated[
        cGcCombatEffectsProperties, Field(cGcCombatEffectsProperties, 0x0)
    ]


@partial_struct
class cGcBaseMiniPortalComponentData(Structure):
    CorvetteTeleportInteractionName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DestinationGroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    GroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    AssociatedCorvetteDockIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]

    class eDestinationSortTypeEnum(IntEnum):
        NearestPotal = 0x0
        BaseBuildingConnection = 0x1
        AbandonedFreighter = 0x2
        PortalNearestPlayerShip = 0x3
        ExitCorvette = 0x4
        ReturnToCorvette = 0x5
        ReturnToCorvetteOutpost = 0x6

    DestinationSortType: Annotated[
        c_enum32[eDestinationSortTypeEnum],
        Field(c_enum32[eDestinationSortTypeEnum], 0x44),
    ]
    PowerCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    SnapFacingAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    AllowSpawnedObjects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    AllowVehicles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    DoPlayerEffects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]
    FlipFacingDirection: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x53)]
    SnapFacingDirection: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]
    TeleportCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x55)]


@partial_struct
class cGcDistanceScaleComponentData(Structure):
    MaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    DisabledWhenOnFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    UseGlobals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcPlayerEffectsComponentData(Structure):
    VehicleInOutDissolveDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    VehicleInOutEffectDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    VehicleInOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcNPCHabitationComponentData(Structure):
    NPCSpawnLocator: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    NPCHabitationType: Annotated[
        c_enum32[enums.cGcNPCHabitationType],
        Field(c_enum32[enums.cGcNPCHabitationType], 0x10),
    ]


@partial_struct
class cGcEncounterComponentData(Structure):
    InteractMissionTable: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    EncounterType: Annotated[
        c_enum32[enums.cGcEncounterType], Field(c_enum32[enums.cGcEncounterType], 0x10)
    ]


@partial_struct
class cGcEncounterStateComponentData(Structure):
    pass


@partial_struct
class cGcGroundWormComponentData(Structure):
    AttackDamageType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    EmergeEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    EmergeShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RoarShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    SpitProjectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    SubmergeEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    AttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AttackCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    AttackDamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    AttackDistMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    AttackDistMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    CollisionBodySize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    EmergeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    EmergeEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    EmergeLookBlendEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    EmergeLookBlendStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    EmergeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    FlinchAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    FlinchAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    FlinchSmooth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    FlinchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    LungeAngleBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    LungeAngleHead: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    LungeBeginTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    LungeBlendInSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    LungeBlendOutSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    LungeEndTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    LungeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    RearUpBeginDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    RearUpEndDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    RestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    RoarCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    RumbleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    SpitCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    SpitCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD0)]
    SubmergeDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    SubmergeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    TrackTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    TurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    WindUpAngleBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    WindUpAngleHead: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    WindUpStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    GrabJoint: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xF0)
    ]
    LookJoint: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1F0)
    ]


@partial_struct
class cGcExhibitAssemblyComponentData(Structure):
    ExhibitType: Annotated[
        c_enum32[enums.cGcModularCustomisationResourceType],
        Field(c_enum32[enums.cGcModularCustomisationResourceType], 0x0),
    ]


@partial_struct
class cGcFishableAreaComponentData(Structure):
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    SourceFishBasedOnSettlementBuildingLevel: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4)
    ]


@partial_struct
class cGcExpeditionHologramComponentData(Structure):
    SpawnOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    CaptainScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    FrigateScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    HologramRotationSpeedDegPerSec: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18)
    ]


@partial_struct
class cGcGrabPlayerComponentData(Structure):
    GrabOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    DamageType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DefendAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    GrabAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    HitReactAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    HoldAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    IdleAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    PlayerGrabbedAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    HitReactAngles: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x80)]
    LookAroundAngles: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x88)]
    LookAroundAnglesFine: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x90)]
    LookAroundTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x98)]
    LookAroundTrackTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xA0)]
    LookAtPlayerTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xA8)]
    SleepTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xB0)]
    ActivateRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    BodgeInputAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    BodgeOutputAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    CooldownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    DamageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    EjectImpulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    FocusRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    GrabAttachStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    GrabBeginAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xD8),
    ]
    GrabBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    GrabEndAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xE0),
    ]
    GrabRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    HitReactAnimChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    HoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    LookAroundFineModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    LookAtPlayerChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    LungeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    MaxLookAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    RestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]
    SleepChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    TrackTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    TriggerRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    GrabJoint: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x110)
    ]
    LookJoint: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x210)
    ]


@partial_struct
class cGcFleetHologramComponentData(Structure):
    pass


@partial_struct
class cGcHeightAdjustComponentData(Structure):
    HeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcGrabbableComponentData(Structure):
    GrabbableDataArray: Annotated[
        basic.cTkDynamicArray[cGcGrabbableData],
        Field(basic.cTkDynamicArray[cGcGrabbableData], 0x0),
    ]


@partial_struct
class cGcLandingHelperComponentData(Structure):
    ActiveDistanceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    ActiveDistanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    LandPoint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcLadderComponentData(Structure):
    pass


@partial_struct
class cGcLootComponentData(Structure):
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    TimeOutEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Timed: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    FlashPercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    NumFlashes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]
    DeathPoint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    KeepUpright: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    PhysicsControlled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]


@partial_struct
class cGcLookAtComponentData(Structure):
    class eLookAtTypeEnum(IntEnum):
        Player = 0x0

    LookAtType: Annotated[
        c_enum32[eLookAtTypeEnum], Field(c_enum32[eLookAtTypeEnum], 0x0)
    ]
    MinRotationRateDegrees: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    RotationRateFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    NodeName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC)]


@partial_struct
class cGcNPCPlacementComponentData(Structure):
    PlacementInfosToApply: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    PlaceInAbandonedSystems: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    SearchPlacementFromMaster: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    WaitToPlace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12)]


@partial_struct
class cGcObjectPlacementComponentData(Structure):
    class eActivationTypeEnum(IntEnum):
        GroupNode = 0x0
        Locator = 0x1

    ActivationType: Annotated[
        c_enum32[eActivationTypeEnum], Field(c_enum32[eActivationTypeEnum], 0x0)
    ]
    FractionOfNodesActive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MaxGroupsActivated: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    MaxNodesActivated: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    GroupNodeName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10)
    ]
    UseNodeParent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    UseRaycast: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]


@partial_struct
class cGcSentinelCoverComponentData(Structure):
    CoverStateAnims: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DestroyEffectId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    SpawnEffectId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    HealthPercLostPerSecMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    HealthPercLostPerSecMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    EffectLocator: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x68)
    ]


@partial_struct
class cGcSimpleInteractionComponentData(Structure):
    ActivationCost: Annotated[
        cGcInteractionActivationCost, Field(cGcInteractionActivationCost, 0x0)
    ]
    RarityLocators: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x68)]
    ForceSubtitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x98)
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xB8)]
    ScanData: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD8)]
    ScanType: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xF8)]
    TerminalHeading: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x118)
    ]
    TerminalMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x138)
    ]
    VRInteractMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x158)
    ]
    BaseBuildingTriggerActions: Annotated[
        basic.cTkDynamicArray[cGcInteractionBaseBuildingState],
        Field(basic.cTkDynamicArray[cGcInteractionBaseBuildingState], 0x178),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x188)]
    PersistencyBufferOverride: Annotated[
        basic.cTkDynamicArray[cGcPersistencyMissionOverride],
        Field(basic.cTkDynamicArray[cGcPersistencyMissionOverride], 0x198),
    ]
    RewardOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcRewardMissionOverride],
        Field(basic.cTkDynamicArray[cGcRewardMissionOverride], 0x1A8),
    ]
    TriggerAction: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1B8)]
    TriggerActionOnPrepare: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1C8)]
    TriggerActionToggle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1D8)]
    DeactivateSimilarInteractionsNearbyRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E8)
    ]
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EC)]
    IncreaseCorruptSentinelWanted: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1F0)
    ]
    InteractCrimeLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1F4)]
    InteractDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F8)]
    InteractFiendCrimeChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC)]
    InteractFiendCrimeType: Annotated[
        c_enum32[enums.cGcFiendCrime], Field(c_enum32[enums.cGcFiendCrime], 0x200)
    ]
    Rarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x204)
    ]
    ScanIcon: Annotated[
        c_enum32[enums.cGcDiscoveryType], Field(c_enum32[enums.cGcDiscoveryType], 0x208)
    ]

    class eSimpleInteractionTypeEnum(IntEnum):
        Interact = 0x0
        Treasure = 0x1
        Beacon = 0x2
        Scan = 0x3
        Save = 0x4
        CallShip = 0x5
        CallVehicle = 0x6
        Word = 0x7
        Tech = 0x8
        GenericReward = 0x9
        Feed = 0xA
        Ladder = 0xB
        ClaimBase = 0xC
        TeleportStartPoint = 0xD
        TeleportEndPoint = 0xE
        Portal = 0xF
        Chest = 0x10
        ResourceHarvester = 0x11
        BaseCapsule = 0x12
        Hologram = 0x13
        NPCTerminalMessage = 0x14
        VehicleBoot = 0x15
        BiomeHarvester = 0x16
        FreighterGalacticMap = 0x17
        FreighterChest = 0x18
        Collectable = 0x19
        Chair = 0x1A
        BaseTreasureChest = 0x1B
        SpawnObject = 0x1C
        NoiseBox = 0x1D
        AbandFreighterTeleporter = 0x1E
        PetEgg = 0x1F
        SubstancePickup = 0x20
        FreighterTeleport = 0x21
        MiniPortalTrigger = 0x22
        SuperDoopaScanner = 0x23
        RefundedCorvetteStorage = 0x24
        CorvetteMissionBoard = 0x25
        CorvetteRampSwitch = 0x26

    SimpleInteractionType: Annotated[
        c_enum32[eSimpleInteractionTypeEnum],
        Field(c_enum32[eSimpleInteractionTypeEnum], 0x20C),
    ]
    Size: Annotated[
        c_enum32[enums.cGcSizeIndicator], Field(c_enum32[enums.cGcSizeIndicator], 0x210)
    ]
    StatToTrack: Annotated[
        c_enum32[enums.cGcStatsEnum], Field(c_enum32[enums.cGcStatsEnum], 0x214)
    ]
    ActivateLocatorsFromRarity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x218)]
    BroadcastTriggerAction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x219)]
    CanCollectInMech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A)]
    DisableAnimationUntilInteract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B)]
    HideContents: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C)]
    InteractIsCrime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D)]
    MustBeVisibleToInteract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E)]
    NeedsStorm: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21F)]
    NotifyEncounter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x220)]
    ReseedOnRewardSuccess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x221)]
    StartsBuried: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x222)]
    Use2dInteractDistance: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x223)]
    UsePersonalPersistentBuffer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224)]


@partial_struct
class cGcThereminComponentData(Structure):
    IgnorePlayerDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MaxPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MaxVolume: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MinPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MinVolume: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    PitchMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    PitchMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    VolumeMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    VolumeMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    PitchEndLocator: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x24)
    ]
    PitchStartLocator: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x44)
    ]
    VolumeBBName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x64)
    ]


@partial_struct
class cGcSquadronHologramComponentData(Structure):
    SpawnOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    HologramRotationSpeedDegPerSec: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10)
    ]
    PilotScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SpawnRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcWiringSocketComponentData(Structure):
    Value: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcTurretComponentData(Structure):
    LaserEffectId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LaserMuzzleChargeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    LaserMuzzleFlashId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    MissileId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    ProjectileId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    ProjectileMuzzleFlashId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    BaseRotationAngleThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]

    class eGunTypeEnum(IntEnum):
        Laser = 0x0
        Projectile = 0x1
        Missile = 0x2

    GunType: Annotated[c_enum32[eGunTypeEnum], Field(c_enum32[eGunTypeEnum], 0x64)]
    LevelledBurstCountExtra: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    LevelledBurstTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]

    class eTargetFilterEnum(IntEnum):
        Any = 0x0
        FreightersOnly = 0x1
        SmallShipsOnly = 0x2

    TargetFilter: Annotated[
        c_enum32[eTargetFilterEnum], Field(c_enum32[eTargetFilterEnum], 0x70)
    ]
    TurrentLaserShootTimeRandomExtraMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74)
    ]
    TurretAimOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    TurretAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    TurretBurstCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x80)]
    TurretBurstTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    TurretDispersionAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    TurretLaserAbortDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    TurretLaserActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    TurretLaserChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    TurretLaserLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    TurretLaserMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    TurretLaserShootTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    TurretMaxDownAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    TurretMaxPitchTurnSpeedDegPerSec: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA8)
    ]
    TurretMaxYawTurnSpeedDegPerSec: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC)
    ]
    TurretMissileLaunchSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    TurretMissileLaunchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    TurretMissileRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    TurretPitchSmoothTurnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    TurretProjectileRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    TurretRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    TurretShootPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    TurretYawSmoothTurnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    CanMoveDuringBurst: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD0)]
    FireInTurretFacing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD1)]
    HasFreighterAlertLight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD2)]
    RemotePlayersCanDamage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD3)]


@partial_struct
class cGcPortalComponentData(Structure):
    Temp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcSkiffComponentData(Structure):
    ArrivalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MaximumTravelForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcBuoyancyComponentData(Structure):
    AirborneSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AnchorArrivalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MaximumAnchorForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MaximumForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MinimumForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SelfRightingStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    TargetHeightBufferFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    TargetSurfaceHeightCalm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    TargetSurfaceHeightRough: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    UnderwaterSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    UpwardRotationFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    WaveRotationFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    SetAnchorOnPrepare: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcRocketLockerComponentData(Structure):
    NumSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcOutpostComponentData(Structure):
    Door: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LSystems: Annotated[
        basic.cTkDynamicArray[cGcOutpostLSystemPair],
        Field(basic.cTkDynamicArray[cGcOutpostLSystemPair], 0x10),
    ]
    ApproachAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    ApproachNodeTargetOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    ApproachRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    ApproachSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    CircleRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    CorvetteLandingIndicatorRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x34)
    ]
    DockingAttractConeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    DockingAttractFacingAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    DockingAttractRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    LandingHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    LandingSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    PlayerAutoLandRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    PostTakeOffExtraPlayerHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    PostTakeOffExtraPlayerSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    TakeOffAlignTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    TakeOffBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    TakeOffExtraAIHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    TakeOffFwdDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    TakeOffHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    TakeOffProgressForExtraHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C)
    ]
    TakeOffSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    TakeOffTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    AbandonedFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]
    AIDestination: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x79)]
    Anomaly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7A)]
    CheckLandingAreaClear: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7B)]
    Frigate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7C)]
    HasDoors: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7D)]
    HasOwnGravity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7E)]
    NexusExterior: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F)]
    NexusInterior: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x80)]
    RotateToDock: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x81)]
    SpaceStation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x82)]


@partial_struct
class cGcPlayerWeaponComponentData(Structure):
    pass


@partial_struct
class cGcScannableComponentData(Structure):
    FreighterObjectAlreadyUsedLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ValidMissionSurveyIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    AlwaysShowRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    BinocsDiscoIconOverride: Annotated[
        c_enum32[enums.cGcDiscoveryType], Field(c_enum32[enums.cGcDiscoveryType], 0x34)
    ]
    CompassRangeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    Icon: Annotated[
        c_enum32[enums.cGcScannerIconTypes],
        Field(c_enum32[enums.cGcScannerIconTypes], 0x3C),
    ]
    MarkerOffsetOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    MinDisplayDistanceOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]

    class eScannableTypeEnum(IntEnum):
        Binoculars = 0x0
        BinocularsHotspots = 0x1
        Scanner = 0x2
        Marker = 0x3
        SpaceBattleTarget = 0x4
        None_ = 0x5

    ScannableType: Annotated[
        c_enum32[eScannableTypeEnum], Field(c_enum32[eScannableTypeEnum], 0x48)
    ]
    ScanRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    ScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    ScanName: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x54)]
    AllowedToMerge: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]
    CanTagIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x75)]
    ClearTagOnArrival: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x76)]
    DisableIfBuildingPart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x77)]
    DisableIfInBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]
    GetIconAndNameFromSettlementBuilding: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x79)
    ]
    IsPlacedMarker: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7A)]
    MarkerActiveWithNodeInactive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7B)]
    ShowInFreighterBranchRoom: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7C)]
    TellPlayerIfFreighterObjectUsed: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x7D)
    ]
    UseModelNode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7E)]


@partial_struct
class cGcScanToRevealComponentData(Structure):
    LockedMarkerScanOverride: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OnRevealEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    RequiredTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    DissolveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]

    class eHideScanMarkerConditionEnum(IntEnum):
        Never = 0x0
        MissingTech = 0x1
        Hidden = 0x2

    HideScanMarkerCondition: Annotated[
        c_enum32[eHideScanMarkerConditionEnum],
        Field(c_enum32[eHideScanMarkerConditionEnum], 0x34),
    ]
    MaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    RequiredStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x3C)
    ]
    RevealTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    DoDissolve: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]
    EnabledOnlyOnAbandonedNexus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45)]
    LockedMarkerClearOnReveal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46)]
    OnRevealEffectScaleWithAABB: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x47)]
    RevealedByShipScan: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    RevealedByToolScan: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]
    SetNodeActivation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A)]
    StartEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B)]


@partial_struct
class cGcScanEffectComponentData(Structure):
    ScanEffects: Annotated[
        basic.cTkDynamicArray[cGcScanEffectData],
        Field(basic.cTkDynamicArray[cGcScanEffectData], 0x0),
    ]
    NodeName: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x10)]


@partial_struct
class cGcEncyclopediaComponentData(Structure):
    Type: Annotated[
        c_enum32[enums.cGcDiscoveryType], Field(c_enum32[enums.cGcDiscoveryType], 0x0)
    ]


@partial_struct
class cGcWFCBuilding(Structure):
    DecorationSet: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    FallbackSeeds: Annotated[
        basic.cTkDynamicArray[ctypes.c_int64],
        Field(basic.cTkDynamicArray[ctypes.c_int64], 0x10),
    ]
    GroupsEnabled: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    Layouts: Annotated[
        basic.cTkDynamicArray[cGcWeightedResource],
        Field(basic.cTkDynamicArray[cGcWeightedResource], 0x30),
    ]
    MinimumUseConstraints: Annotated[
        basic.cTkDynamicArray[cGcMinimumUseConstraint],
        Field(basic.cTkDynamicArray[cGcMinimumUseConstraint], 0x40),
    ]
    ModuleOverrides: Annotated[
        basic.cTkDynamicArray[cGcModuleOverride],
        Field(basic.cTkDynamicArray[cGcModuleOverride], 0x50),
    ]
    ModuleSet: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    NPCs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x70),
    ]
    PresetFallbackSeeds: Annotated[
        basic.cTkDynamicArray[ctypes.c_int64],
        Field(basic.cTkDynamicArray[ctypes.c_int64], 0x80),
    ]
    Rooms: Annotated[
        basic.cTkDynamicArray[cGcFreighterBaseRoom],
        Field(basic.cTkDynamicArray[cGcFreighterBaseRoom], 0x90),
    ]
    Sizes: Annotated[
        basic.cTkDynamicArray[cGcWeightedBuildingSize],
        Field(basic.cTkDynamicArray[cGcWeightedBuildingSize], 0xA0),
    ]
    InitialUnlockProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    NumberOfPresetsPerPlanet: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB4)]
    ReplaceMaterials: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0xB8),
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xBC)]
    DontSpawnNearPlayerBases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDC)]
    ImprovedCoherence: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDD)]
    RemoveUnreachableBlocks: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDE)]
    RequireNoUnreachableRooms: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDF)]


@partial_struct
class cGcAbandonedFreighterComponentData(Structure):
    DungeonRootScene: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    MarkerLabel: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    MarkerIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x40)]
    DungeonOptions: Annotated[
        basic.cTkDynamicArray[cGcFreighterDungeonChoice],
        Field(basic.cTkDynamicArray[cGcFreighterDungeonChoice], 0x58),
    ]


@partial_struct
class cGcColouriseComponentData(Structure):
    PrimaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    QuaternaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    SecondaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    TernaryColour: Annotated[basic.Colour, Field(basic.Colour, 0x30)]


@partial_struct
class cGcCameraShakeComponentData(Structure):
    ShakeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FalloffDistanceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    FalloffDistanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcFreighterBaseComponentData(Structure):
    FreighterBaseOptions: Annotated[
        cGcFreighterBaseOptions, Field(cGcFreighterBaseOptions, 0x0)
    ]
    FreighterBaseForPlayerReset: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    WFCBuildingFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]

    class eFreighterBaseGenerationModeEnum(IntEnum):
        Prefab = 0x0
        WFC = 0x1

    FreighterBaseGenerationMode: Annotated[
        c_enum32[eFreighterBaseGenerationModeEnum],
        Field(c_enum32[eFreighterBaseGenerationModeEnum], 0x60),
    ]


@partial_struct
class cGcDecorationComponentData(Structure):
    MaxTestRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    StartOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcPlayerCharacterStateTable(Structure):
    CharacterStates: Annotated[
        cGcPlayerCharacterStateData, Field(cGcPlayerCharacterStateData, 0x0)
    ]


@partial_struct
class cGcMultiColouriseComponentData(Structure):
    Palettes: Annotated[
        basic.cTkDynamicArray[cGcColourisePalette],
        Field(basic.cTkDynamicArray[cGcColourisePalette], 0x0),
    ]


@partial_struct
class cGcMarkerComponentData(Structure):
    CustomName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CustomIcon: Annotated[
        c_enum32[enums.cGcRealityGameIcons],
        Field(c_enum32[enums.cGcRealityGameIcons], 0x20),
    ]

    class eDisplayModeEnum(IntEnum):
        Always = 0x0
        SpaceOnly = 0x1
        PlanetOnly = 0x2

    DisplayMode: Annotated[
        c_enum32[eDisplayModeEnum], Field(c_enum32[eDisplayModeEnum], 0x24)
    ]
    Icon: Annotated[
        c_enum32[enums.cGcGenericIconTypes],
        Field(c_enum32[enums.cGcGenericIconTypes], 0x28),
    ]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    ShipScannable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    UseCustomIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]


@partial_struct
class cGcPlayerControlComponentData(Structure):
    BaseInput: Annotated[cGcPlayerControlInput, Field(cGcPlayerControlInput, 0x0)]
    AimDir: Annotated[cTkBlackboardKey, Field(cTkBlackboardKey, 0x38)]
    CrosshairDir: Annotated[cTkBlackboardKey, Field(cTkBlackboardKey, 0x50)]
    TorchDir: Annotated[cTkBlackboardKey, Field(cTkBlackboardKey, 0x68)]
    BaseCamera: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    InitialState: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    States: Annotated[
        basic.cTkDynamicArray[cGcPlayerControlState],
        Field(basic.cTkDynamicArray[cGcPlayerControlState], 0xA0),
    ]


@partial_struct
class cGcSimpleIkRecoilComponentData(Structure):
    ActiveRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AngleLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    HitReactDirectedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    HitReactDirectedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    HitReactRandomMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    HitReactRandomMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MinHitReactTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    RecoverTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    EndJoint: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x20)
    ]


@partial_struct
class cGcUniqueIdComponentData(Structure):
    pass


@partial_struct
class cGcIDEnum(Structure):
    Values: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]


@partial_struct
class cGcCreatureAttractorComponentData(Structure):
    ArriveDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]

    class eAttractorTypeEnum(IntEnum):
        Food = 0x0
        Harvester = 0x1

    AttractorType: Annotated[
        c_enum32[eAttractorTypeEnum], Field(c_enum32[eAttractorTypeEnum], 0x4)
    ]
    Static: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    Universal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]


@partial_struct
class cGcCreatureBaitComponentData(Structure):
    AttractList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    BaitRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    BaitStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Debug: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    InducesRage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]


@partial_struct
class cTkRandomComponentData(Structure):
    Seed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcCreatureEffectComponentData(Structure):
    AnimTriggers: Annotated[
        basic.cTkDynamicArray[cGcCreatureEffectTrigger],
        Field(basic.cTkDynamicArray[cGcCreatureEffectTrigger], 0x0),
    ]


@partial_struct
class cGcCreatureEggComponentData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]


@partial_struct
class cGcCreatureLegIKComponentData(Structure):
    Stuff: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcCreatureFilenameTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcCreatureFilename],
        Field(basic.cTkDynamicArray[cGcCreatureFilename], 0x0),
    ]


@partial_struct
class cGcCreatureAudioTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcCreatureVocalSoundData],
        Field(basic.cTkDynamicArray[cGcCreatureVocalSoundData], 0x0),
    ]


@partial_struct
class cGcFoliageComponentData(Structure):
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcRegionHotspotsTable(Structure):
    RegionHotspotBiomeGases: Annotated[
        cGcRegionHotspotBiomeGases, Field(cGcRegionHotspotBiomeGases, 0x0)
    ]
    RegionHotspotSubstances: Annotated[
        basic.cTkDynamicArray[cGcRegionHotspotSubstance],
        Field(basic.cTkDynamicArray[cGcRegionHotspotSubstance], 0x220),
    ]
    RegionHotspots: Annotated[cGcRegionHotspotData, Field(cGcRegionHotspotData, 0x230)]
    RegionHotspotsMaxDifferentCategoryOverlap: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x350)
    ]
    RegionHotspotsMinSameCategorySpacing: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x354)
    ]
    RegionHotspotsPerPoleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x358)]
    RegionHotspotsPerPoleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x35C)]
    RegionHotspotsPoleSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x360)]


@partial_struct
class cGcVehicleScanTable(Structure):
    VehicleScanTable: Annotated[
        basic.cTkDynamicArray[cGcVehicleScanTableEntry],
        Field(basic.cTkDynamicArray[cGcVehicleScanTableEntry], 0x0),
    ]


@partial_struct
class cGcScanDataTable(Structure):
    ScanData: Annotated[
        basic.cTkDynamicArray[cGcScanDataTableEntry],
        Field(basic.cTkDynamicArray[cGcScanDataTableEntry], 0x0),
    ]


@partial_struct
class cGcAreaDamageDataTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcAreaDamageData],
        Field(basic.cTkDynamicArray[cGcAreaDamageData], 0x0),
    ]


@partial_struct
class cGcShootableComponentData(Structure):
    ImpactOverrideData: Annotated[
        cGcProjectileImpactData, Field(cGcProjectileImpactData, 0x0)
    ]
    DamageMultiplier: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ImpactShakeEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    RequiredTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    CapHealthForMissingArmour: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    FiendCrimeModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    FiendCrimeType: Annotated[
        c_enum32[enums.cGcFiendCrime], Field(c_enum32[enums.cGcFiendCrime], 0x58)
    ]
    ForceImpactType: Annotated[
        c_enum32[enums.cGcProjectileImpactType],
        Field(c_enum32[enums.cGcProjectileImpactType], 0x5C),
    ]
    Health: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    IncreaseCorruptSentinelWanted: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x64)
    ]
    IncreaseWanted: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    IncreaseWantedThresholdTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    LevelledExtraHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    MinDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x74)]
    RepairTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    NameOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x7C)
    ]
    AutoAimTarget: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9C)]
    CouldCountAsArmourForParent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9D)]
    HitEffectEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9E)]
    HitEffectEntireModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9F)]
    IgnoreHitPush: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA0)]
    IgnorePlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA1)]
    IgnoreTerrainEditKills: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA2)]
    ImpactShake: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA3)]
    IsAffectedByPiercing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA4)]
    IsArmoured: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA5)]
    IsPiercable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA6)]
    PlayerOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA7)]
    StaticUntilShot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA8)]
    UseSpaceLevelForExtraHealth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA9)]


@partial_struct
class cGcNPCNavigationAreaComponentData(Structure):
    ConnectionLengthFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    MaxNeighbourSlope: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MaxRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MinRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]

    class eNavAreaTypeEnum(IntEnum):
        Normal = 0x0
        BuildingWithExterior = 0x1
        Debris = 0x2
        Ship = 0x3
        Mech = 0x4
        PlanetMech = 0x5
        Demo = 0x6
        WFCBase = 0x7
        FreighterBase = 0x8

    NavAreaType: Annotated[
        c_enum32[eNavAreaTypeEnum], Field(c_enum32[eNavAreaTypeEnum], 0x10)
    ]
    NeighbourCandidateDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    SphereCastHeightClearance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    LimitPOIConnections: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]


@partial_struct
class cGcPlayerHazardTable(Structure):
    Table: Annotated[cGcPlayerHazardData, Field(cGcPlayerHazardData, 0x0)]


@partial_struct
class cGcTorpedoComponentData(Structure):
    DamageProjectileId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DamageShieldProjectileId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DestroyedEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ApproachTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    BrakeForceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    BrakeForceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    BrakeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    ForceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    ForceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    HitRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    MaxLifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    MaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    MinCircleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    NoTargetLife: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    RotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]


@partial_struct
class cGcMissileComponentData(Structure):
    Explosion: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Trail: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    NoTargetLife: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcDroneComponentData(Structure):
    Health: Annotated[cGcCreatureHealthData, Field(cGcCreatureHealthData, 0x0)]
    Guns: Annotated[
        basic.cTkDynamicArray[cGcDroneGun],
        Field(basic.cTkDynamicArray[cGcDroneGun], 0x68),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x78)]
    ProjectileChoices: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x88),
    ]
    Axis: Annotated[
        c_enum32[enums.cGcPrimaryAxis], Field(c_enum32[enums.cGcPrimaryAxis], 0x98)
    ]
    HeadLookIdleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    HeadLookTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    MaxHeadPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    MaxHeadRoll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    MaxHeadYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    Scaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    HeadJointName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xB4)
    ]


@partial_struct
class cGcSentinelRobotComponentData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Type: Annotated[
        c_enum32[enums.cGcSentinelTypes], Field(c_enum32[enums.cGcSentinelTypes], 0x10)
    ]


@partial_struct
class cGcSceneSettings(Structure):
    PlayerState: Annotated[cGcPlayerSpawnStateData, Field(cGcPlayerSpawnStateData, 0x0)]
    PlanetFiles: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    Events: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x130),
    ]
    NextSettingFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x140)
    ]
    PlanetSceneFiles: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x150),
    ]
    PostWarpEvents: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x160),
    ]
    SceneFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x170)
    ]
    ShipPreloadFiles: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x180),
    ]
    SolarSystemFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x190)
    ]
    SpawnerOptionId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1A0)]
    SpawnInsideShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B0)]
    SpawnShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B1)]


@partial_struct
class cGcWFCModuleSet(Structure):
    BlockSize: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    CompatibleConnectors: Annotated[
        basic.cTkDynamicArray[cGcIDPair], Field(basic.cTkDynamicArray[cGcIDPair], 0x10)
    ]
    ConnectorsOnHorizontalBoundary: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x20),
    ]
    ConnectorsOnLowerBoundary: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x30),
    ]
    ConnectorsOnUpperBoundary: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x40),
    ]
    DefaultGroups: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x50),
    ]
    ModulePrototypes: Annotated[
        basic.cTkDynamicArray[cGcWFCModulePrototype],
        Field(basic.cTkDynamicArray[cGcWFCModulePrototype], 0x60),
    ]
    VerticalOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x74)]
    ApplyWallThemes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]


@partial_struct
class cGcBuildingDefinitionTable(Structure):
    BuildingPlacement: Annotated[
        cGcBuildingDefinitionData, Field(cGcBuildingDefinitionData, 0x0)
    ]
    BuildingFiles: Annotated[
        cGcBuildingFilenameList, Field(cGcBuildingFilenameList, 0x2580)
    ]
    ClusterLayouts: Annotated[
        basic.cTkDynamicArray[cGcBuildingClusterLayout],
        Field(basic.cTkDynamicArray[cGcBuildingClusterLayout], 0xF000),
    ]


@partial_struct
class cGcSpaceSkyColourSettingList(Structure):
    Settings: Annotated[
        basic.cTkDynamicArray[cGcSolarSystemSkyColourData],
        Field(basic.cTkDynamicArray[cGcSolarSystemSkyColourData], 0x0),
    ]


@partial_struct
class cGcNPCWordReactionTable(Structure):
    Races: Annotated[cGcNPCWordReactionCategory, Field(cGcNPCWordReactionCategory, 0x0)]


@partial_struct
class cGcNPCColourTable(Structure):
    Groups: Annotated[
        basic.cTkDynamicArray[cGcNPCColourGroup],
        Field(basic.cTkDynamicArray[cGcNPCColourGroup], 0x0),
    ]


@partial_struct
class cGcDeprecatedAssetsTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x80],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x80], 0x0),
    ]


@partial_struct
class cGcHeavyAirList(Structure):
    Options: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x0),
    ]


@partial_struct
class cGcBiomeListPerStarType(Structure):
    StarType: Annotated[cGcBiomeList, Field(cGcBiomeList, 0x0)]
    AbandonedYellow: Annotated[cGcBiomeList, Field(cGcBiomeList, 0x2A8)]
    LushYellow: Annotated[cGcBiomeList, Field(cGcBiomeList, 0x330)]
    AbandonedLifeChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3B8)]
    LifeChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C8)]
    ConvertDeadToWeird: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D8)]


@partial_struct
class cGcTileTypeSets(Structure):
    TileTypeSets: Annotated[
        basic.cTkDynamicArray[cGcTileTypeSet],
        Field(basic.cTkDynamicArray[cGcTileTypeSet], 0x0),
    ]


@partial_struct
class cGcTerrainTexture(Structure):
    DiffuseTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    NormalMap: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    TextureConfig: Annotated[
        cGcTerrainTextureSettings, Field(cGcTerrainTextureSettings, 0x20)
    ]


@partial_struct
class cGcCreatureGenerationData(Structure):
    SubBiomeSpecific: Annotated[
        cGcCreatureGenerationOptionalWeightedList,
        Field(cGcCreatureGenerationOptionalWeightedList, 0x0),
    ]
    BiomeSpecific: Annotated[
        cGcCreatureGenerationOptionalWeightedList,
        Field(cGcCreatureGenerationOptionalWeightedList, 0x900),
    ]
    AbandonedSystemSpecific: Annotated[
        cGcCreatureGenerationOptionalWeightedList,
        Field(cGcCreatureGenerationOptionalWeightedList, 0xDC8),
    ]
    EmptySystemSpecific: Annotated[
        cGcCreatureGenerationOptionalWeightedList,
        Field(cGcCreatureGenerationOptionalWeightedList, 0xE10),
    ]
    PurpleSystemSpecific: Annotated[
        cGcCreatureGenerationOptionalWeightedList,
        Field(cGcCreatureGenerationOptionalWeightedList, 0xE58),
    ]
    Generic: Annotated[
        cGcCreatureGenerationWeightedList,
        Field(cGcCreatureGenerationWeightedList, 0xEA0),
    ]
    AirArchetypesForEmptyGround: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry],
        Field(
            basic.cTkDynamicArray[cGcCreatureGenerationWeightedListDomainEntry], 0xEE0
        ),
    ]
    SandwormPresenceChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEF0)]
    AirGroupsPerKm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF34)]
    CaveGroupsPerKm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF44)]
    DensityModifiers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF54)]
    GroundGroupsPerKm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF64)]
    LifeChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF74)]
    LifeLevelDensityModifiers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF84)]
    RarityFrequencyModifiers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF94)]
    RoleFrequencyModifiers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFA4)]
    WaterGroupsPerKm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFB4)]
    HerdCreaturePenalty: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC4)]


@partial_struct
class cGcCreatureGenerationArchetypes(Structure):
    AirArchetypes: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationDomainTable],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationDomainTable], 0x0),
    ]
    CaveArchetypes: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationDomainTable],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationDomainTable], 0x10),
    ]
    GroundArchetypes: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationDomainTable],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationDomainTable], 0x20),
    ]
    WaterArchetypes: Annotated[
        basic.cTkDynamicArray[cGcCreatureGenerationDomainTable],
        Field(basic.cTkDynamicArray[cGcCreatureGenerationDomainTable], 0x30),
    ]


@partial_struct
class cGcOverlayTexture(Structure):
    OverlayDiffuse: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    OverlayMasks: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    OverlayNormal: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    OverlayMaskIdx: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]


@partial_struct
class cGcWeatherTable(Structure):
    Table: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    DefaultRadiation: Annotated[cGcHazardValues, Field(cGcHazardValues, 0x110)]
    DefaultSpookLevel: Annotated[cGcHazardValues, Field(cGcHazardValues, 0x140)]
    DefaultTemperature: Annotated[cGcHazardValues, Field(cGcHazardValues, 0x170)]
    DefaultToxicity: Annotated[cGcHazardValues, Field(cGcHazardValues, 0x1A0)]


@partial_struct
class cGcSpawnDensityList(Structure):
    DensityList: Annotated[
        basic.cTkDynamicArray[cGcSpawnDensity],
        Field(basic.cTkDynamicArray[cGcSpawnDensity], 0x0),
    ]


@partial_struct
class cGcWaterColourSettingList(Structure):
    Settings: Annotated[
        basic.cTkDynamicArray[cGcPlanetWaterColourData],
        Field(basic.cTkDynamicArray[cGcPlanetWaterColourData], 0x0),
    ]
    EmissionTypeSelection: Annotated[
        cGcWaterEmissionBiomeData, Field(cGcWaterEmissionBiomeData, 0x10)
    ]


@partial_struct
class cGcGasGiantAtmosphereSettingsList(Structure):
    LookUps: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x0),
    ]
    Normals: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x10),
    ]
    Settings: Annotated[
        basic.cTkDynamicArray[cGcGasGiantAtmosphereSetting],
        Field(basic.cTkDynamicArray[cGcGasGiantAtmosphereSetting], 0x20),
    ]


@partial_struct
class cGcPlanetaryMappingTable(Structure):
    MappingInfo: Annotated[
        cGcPlanetaryMappingValues, Field(cGcPlanetaryMappingValues, 0x0)
    ]


@partial_struct
class cGcAmbientModeCameras(Structure):
    BuildingCameraAnimations: Annotated[
        basic.cTkDynamicArray[cGcCameraAmbientBuildingData],
        Field(basic.cTkDynamicArray[cGcCameraAmbientBuildingData], 0x0),
    ]
    SpaceCameraAnimations: Annotated[
        basic.cTkDynamicArray[cGcCameraAmbientSpaceData],
        Field(basic.cTkDynamicArray[cGcCameraAmbientSpaceData], 0x10),
    ]
    SpecialCameraAnimations: Annotated[
        basic.cTkDynamicArray[cGcCameraAmbientSpecialData],
        Field(basic.cTkDynamicArray[cGcCameraAmbientSpecialData], 0x20),
    ]


@partial_struct
class cGcShipAIAttackDataTable(Structure):
    TraderAttackLookup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BehaviourTable: Annotated[
        basic.cTkDynamicArray[cGcShipAIAttackData],
        Field(basic.cTkDynamicArray[cGcShipAIAttackData], 0x40),
    ]
    Definitions: Annotated[
        basic.cTkDynamicArray[cGcShipAICombatDefinition],
        Field(basic.cTkDynamicArray[cGcShipAICombatDefinition], 0x50),
    ]
    EngineTable: Annotated[
        basic.cTkDynamicArray[cGcSpaceshipTravelData],
        Field(basic.cTkDynamicArray[cGcSpaceshipTravelData], 0x60),
    ]
    ShieldTable: Annotated[
        basic.cTkDynamicArray[cGcSpaceshipShieldData],
        Field(basic.cTkDynamicArray[cGcSpaceshipShieldData], 0x70),
    ]


@partial_struct
class cGcAISpaceshipComponentData(Structure):
    Hangar: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    CombatDefinitionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Axis: Annotated[
        c_enum32[enums.cGcPrimaryAxis], Field(c_enum32[enums.cGcPrimaryAxis], 0x30)
    ]
    Class: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0x34),
    ]
    Type: Annotated[
        c_enum32[enums.cGcAISpaceshipTypes],
        Field(c_enum32[enums.cGcAISpaceshipTypes], 0x38),
    ]
    IsSpaceAnomaly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]


@partial_struct
class cTkGravityComponentData(Structure):
    OverrideBounds: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    FalloffRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MoveWithParent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcShipAccesswayComponentData(Structure):
    HasCustomInFlightAnimations: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcFreighterSyncComponentData(Structure):
    Dummy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x0)]


@partial_struct
class cGcCockpitComponentData(Structure):
    Cockpit: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    FoVFixedDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    MaxHeadPitchDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MaxHeadPitchUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MaxHeadTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcEngineComponentData(Structure):
    Type: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]


@partial_struct
class cGcLandingGearComponentData(Structure):
    ExtendAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FlyingAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DeployTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    EndAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x24),
    ]
    LandTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    RetractTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    StartAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x30),
    ]
    TakeOffTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    DeployCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x38)
    ]
    FlyingCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x39)
    ]
    RetractCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x3A)
    ]


@partial_struct
class cGcSpaceshipShieldComponentData(Structure):
    ShieldID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    IgnoreHitsWhenPlayerAimingElsewhere: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x10)
    ]
    RotateOnHit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]


@partial_struct
class cGcVehicleCheckpointComponentData(Structure):
    class eCheckpointTypeEnum(IntEnum):
        Checkpoint = 0x0
        Start = 0x1

    CheckpointType: Annotated[
        c_enum32[eCheckpointTypeEnum], Field(c_enum32[eCheckpointTypeEnum], 0x0)
    ]

    class eRaceTypeEnum(IntEnum):
        Vehicle = 0x0
        Spaceship = 0x1

    RaceType: Annotated[c_enum32[eRaceTypeEnum], Field(c_enum32[eRaceTypeEnum], 0x4)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcVehicleGarageComponentData(Structure):
    Vehicle: Annotated[
        c_enum32[enums.cGcVehicleType], Field(c_enum32[enums.cGcVehicleType], 0x0)
    ]


@partial_struct
class cGcVehicleRaceInviteComponentData(Structure):
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]


@partial_struct
class cGcVehicleComponentData(Structure):
    WheelModel: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Cockpit: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    VehicleType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    BaseHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    Class: Annotated[
        c_enum32[enums.cGcVehicleType], Field(c_enum32[enums.cGcVehicleType], 0x44)
    ]
    FoVFixedDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    MaxHeadPitchDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    MaxHeadPitchUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    MaxHeadTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    MinTurretAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]


@partial_struct
class cGcWaypointComponentData(Structure):
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]


@partial_struct
class cGcActionSets(Structure):
    ActionSets: Annotated[
        basic.cTkDynamicArray[cGcActionSet],
        Field(basic.cTkDynamicArray[cGcActionSet], 0x0),
    ]


@partial_struct
class cGcInputActionInfoMap(Structure):
    ActionMap: Annotated[cGcInputActionInfo, Field(cGcInputActionInfo, 0x0)]


@partial_struct
class cGcVibrationDataTable(Structure):
    Data: Annotated[
        basic.cTkDynamicArray[cGcVibrationChannelData],
        Field(basic.cTkDynamicArray[cGcVibrationChannelData], 0x0),
    ]


@partial_struct
class cGcTriggerFeedbackStateTable(Structure):
    Events: Annotated[
        basic.cTkDynamicArray[cGcTriggerFeedbackState],
        Field(basic.cTkDynamicArray[cGcTriggerFeedbackState], 0x0),
    ]


@partial_struct
class cGcBaseBuildingEntry(Structure):
    LinkGridData: Annotated[cGcBaseLinkGridData, Field(cGcBaseLinkGridData, 0x0)]
    ColourPaletteGroupId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x58)]
    DefaultColourPaletteId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x78)]
    DefaultMaterialId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x98)]
    DescriptorID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0xB8)]
    MaterialGroupId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0xD8)]
    NPCInteractionScene: Annotated[cTkModelResource, Field(cTkModelResource, 0xF8)]
    PlacementScene: Annotated[cTkModelResource, Field(cTkModelResource, 0x118)]
    SinglePartID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x138)]
    CompositePartObjectIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x158),
    ]
    FamilyIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x168),
    ]
    FossilDisplayID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x178)]
    Groups: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingEntryGroup],
        Field(basic.cTkDynamicArray[cGcBaseBuildingEntryGroup], 0x188),
    ]
    IconOverrideProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x198)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1A8)]
    ModularCustomisationBaseID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1B8)]
    OverrideProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1C8)]
    Tag: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1D8)]

    class eBaseTerrainEditShapeEnum(IntEnum):
        Cube = 0x0
        Cylinder = 0x1

    BaseTerrainEditShape: Annotated[
        c_enum32[eBaseTerrainEditShapeEnum],
        Field(c_enum32[eBaseTerrainEditShapeEnum], 0x1E8),
    ]
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x1EC)
    ]
    BuildEffectAccelerator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F0)]
    CorvetteBaseLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1F4)]
    DecorationType: Annotated[
        c_enum32[enums.cGcBaseBuildingObjectDecorationTypes],
        Field(c_enum32[enums.cGcBaseBuildingObjectDecorationTypes], 0x1F8),
    ]
    FreighterBaseLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1FC)]
    GhostsCountOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x200)]
    MinimumDeleteDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x204)]
    PlanetBaseLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x208)]
    PlanetLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20C)]
    RegionLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x210)]
    RegionSpawnLOD: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x214)]
    SnappingDistanceOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x218)]
    StorageContainerIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x21C)]
    Style: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0x220),
    ]
    BuildableAboveWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224)]
    BuildableInShipDecorative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x225)]
    BuildableInShipStructural: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x226)]
    BuildableOnFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x227)]
    BuildableOnPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x228)]
    BuildableOnPlanetBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x229)]
    BuildableOnPlanetWithProduct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22A)]
    BuildableOnSpaceBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22B)]
    BuildableUnderwater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22C)]
    CanChangeColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22D)]
    CanChangeMaterial: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22E)]
    CanPickUp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22F)]
    CanRotate3D: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x230)]
    CanScale: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x231)]
    CanStack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x232)]
    CheckPlaceholderCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x233)]
    CheckPlayerCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x234)]
    CloseMenuAfterBuild: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x235)]
    EditsTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x236)]
    HasDescriptor: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x237)]
    IsDecoration: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x238)]
    IsFromModFolder: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x239)]
    IsModularCustomisation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23A)]
    IsPlaceable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23B)]
    IsSealed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23C)]
    IsTemporary: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23D)]
    RemovesAttachedDecoration: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23E)]
    RemovesWhenUnsnapped: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x23F)]
    ShowGhosts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x240)]
    ShowInBuildMenu: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x241)]
    SnapRotateBlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x242)]
    UseProductIDOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x243)]


@partial_struct
class cTkAttachmentData(Structure):
    AdditionalData: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    Components: Annotated[
        basic.cTkDynamicArray[basic.LinkableNMSTemplate],
        Field(basic.cTkDynamicArray[basic.LinkableNMSTemplate], 0x10),
    ]
    LodDistances: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cTkSpeedLineData(Structure):
    ColourEnd: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ColourOrigin: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    Material: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    Alpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    FadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    Length: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    Lifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]

    class eLinesPositionEnum(IntEnum):
        Absolute = 0x0
        Relative = 0x1

    LinesPosition: Annotated[
        c_enum32[eLinesPositionEnum], Field(c_enum32[eLinesPositionEnum], 0x40)
    ]
    MaxVisibleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MinVisibleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    NumberOfParticles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4C)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    RemoveCylinderRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]


@partial_struct
class cTkTrailData(Structure):
    DistanceThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FrontPoints: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    FrontUvEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    MaxPointsPerFrame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    PointLife: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Points: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cAxisSpecification(Structure):
    CustomAxis: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]

    class eAxisEnum(IntEnum):
        X = 0x0
        Y = 0x1
        Z = 0x2
        NegativeX = 0x3
        NegativeY = 0x4
        NegativeZ = 0x5
        CustomAxis = 0x6

    Axis: Annotated[c_enum32[eAxisEnum], Field(c_enum32[eAxisEnum], 0x10)]


@partial_struct
class cDirectMesh(Structure):
    NumPointsInDirectMeshI: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    NumPointsInDirectMeshJ: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    NumSimPointsI: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    NumSimPointsJ: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    VertexOrdering: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    NodeName: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x14)]
    RenderVertexBasedCloth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]


@partial_struct
class cMappedMesh(Structure):
    NodeName: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x0)]


@partial_struct
class cShapePoint(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Uv: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x10)]


@partial_struct
class cMappingInfluence(Structure):
    mTransformInClothT_Axis0: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    mTransformInClothT_Axis1: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    mTransformInClothT_Axis2: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    mTransformInClothT_Pos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    DistanceSquared: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    SimP: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]


@partial_struct
class cTkVoxelGeneratorRegionData(Structure):
    FlattenTerrainPoints: Annotated[
        basic.cTkDynamicArray[cTkNoiseFlattenPoint],
        Field(basic.cTkDynamicArray[cTkNoiseFlattenPoint], 0x0),
    ]
    FlattenTypeChances: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x10),
    ]
    ShelterIndices: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AddShelterChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    LandingPadIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    NumShelters: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    PlanetRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    VoronoiPointDivisions: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    VoronoiPointSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    VoronoiSectorSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    WaypointIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]


@partial_struct
class cTkNoiseUberLayerData(Structure):
    NoiseData: Annotated[cTkNoiseUberData, Field(cTkNoiseUberData, 0x0)]
    Height: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    HeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    MaximumLOD: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    Offset: Annotated[
        c_enum32[enums.cTkNoiseOffsetEnum],
        Field(c_enum32[enums.cTkNoiseOffsetEnum], 0x4C),
    ]
    PlateauRegionSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    PlateauSharpness: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    PlateauStratas: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    RegionGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    RegionRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    RegionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    SeedOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    SmoothRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    TileBlendMeters: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    VoxelType: Annotated[
        c_enum32[enums.cTkNoiseVoxelTypeEnum],
        Field(c_enum32[enums.cTkNoiseVoxelTypeEnum], 0x74),
    ]

    class eWaterFadeEnum(IntEnum):
        None_ = 0x0
        Above = 0x1
        Below = 0x2

    WaterFade: Annotated[
        c_enum32[eWaterFadeEnum], Field(c_enum32[eWaterFadeEnum], 0x78)
    ]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x80)]
    Subtract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x81)]


@partial_struct
class cTkNoiseGridData(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    TurbulenceNoiseLayer: Annotated[
        cTkNoiseUberLayerData, Field(cTkNoiseUberLayerData, 0x10)
    ]
    SuperPrimitive: Annotated[
        cTkNoiseSuperPrimitiveData, Field(cTkNoiseSuperPrimitiveData, 0x94)
    ]
    SuperFormula1: Annotated[
        cTkNoiseSuperFormulaData, Field(cTkNoiseSuperFormulaData, 0xB0)
    ]
    SuperFormula2: Annotated[
        cTkNoiseSuperFormulaData, Field(cTkNoiseSuperFormulaData, 0xC0)
    ]
    HeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    MaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    MaxHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    MaximumLOD: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xDC)]
    MaxWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    MinHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    MinWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]

    class eNoiseGridTypeEnum(IntEnum):
        Cube = 0x0
        Cone = 0x1
        Torus = 0x2
        Sphere = 0x3
        Cylinder = 0x4
        Capsule = 0x5
        Corridor = 0x6
        Pipe = 0x7
        Puck = 0x8
        SuperPrimitiveRandom = 0x9
        SuperFormula_01 = 0xA
        SuperFormula_02 = 0xB
        SuperFormula_03 = 0xC
        SuperFormula_04 = 0xD
        SuperFormula_05 = 0xE
        SuperFormula_06 = 0xF
        SuperFormula_07 = 0x10
        SuperFormula_08 = 0x11
        SuperFormulaRandom = 0x12
        SuperFormula = 0x13
        SuperPrimitive = 0x14
        File = 0x15

    NoiseGridType: Annotated[
        c_enum32[eNoiseGridTypeEnum], Field(c_enum32[eNoiseGridTypeEnum], 0xF0)
    ]
    Offset: Annotated[
        c_enum32[enums.cTkNoiseOffsetEnum],
        Field(c_enum32[enums.cTkNoiseOffsetEnum], 0xF4),
    ]
    Pitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    RandomPrimitive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    RegionRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]
    RegionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    Roll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    SeedOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10C)]
    SmoothRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    TileBlendMeters: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    VaryPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    VaryRoll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C)]
    VaryYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    VoxelType: Annotated[
        c_enum32[enums.cTkNoiseVoxelTypeEnum],
        Field(c_enum32[enums.cTkNoiseVoxelTypeEnum], 0x124),
    ]
    Yaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12C)]
    Hemisphere: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12D)]
    Subtract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12E)]
    SwapZY: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12F)]


@partial_struct
class cTkVirtualBinding(Structure):
    CustomLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    AltHudLayerIDs: Annotated[
        basic.cTkDynamicArray[cTkVirtualBindingAltLayer],
        Field(basic.cTkDynamicArray[cTkVirtualBindingAltLayer], 0x20),
    ]
    HudLayerID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    TogglableActions: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcInputActions]], 0x40),
    ]
    BottomAction: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x50)
    ]
    LeftAction: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x54)
    ]
    RightAction: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x58)
    ]
    TopAction: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x5C)
    ]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    DefaultActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]
    DirectionalActions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x62)]
    SupportsJoystick: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x63)]


@partial_struct
class cTkButtonPathMapping(Structure):
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    OverlayIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    SolidIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    SpecialIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    Hand: Annotated[
        c_enum32[enums.cTkInputHandEnum], Field(c_enum32[enums.cTkInputHandEnum], 0x50)
    ]
    Id: Annotated[
        c_enum32[enums.cTkInputEnum], Field(c_enum32[enums.cTkInputEnum], 0x54)
    ]
    OpenVROriginNames: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x58)
    ]


@partial_struct
class cTkButtonImageLookup(Structure):
    Lookup: Annotated[
        basic.cTkDynamicArray[cTkButtonPathMapping],
        Field(basic.cTkDynamicArray[cTkButtonPathMapping], 0x0),
    ]


@partial_struct
class cTkChordPathMapping(Structure):
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    ButtonIds: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cTkInputEnum]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cTkInputEnum]], 0x20),
    ]
    OverlayIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    SolidIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    SpecialIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    TextTag: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]


@partial_struct
class cTkChordsImageLookup(Structure):
    Lookup: Annotated[
        basic.cTkDynamicArray[cTkChordPathMapping],
        Field(basic.cTkDynamicArray[cTkChordPathMapping], 0x0),
    ]


@partial_struct
class cTkActionButtonMap(Structure):
    ActionId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Platforms: Annotated[
        basic.cTkDynamicArray[cTkPlatformButtonPair],
        Field(basic.cTkDynamicArray[cTkPlatformButtonPair], 0x10),
    ]
    PadButtonId: Annotated[
        c_enum32[enums.cTkInputEnum], Field(c_enum32[enums.cTkInputEnum], 0x20)
    ]
    ScaleToFitFont: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cTkActionButtonLookup(Structure):
    Lookup: Annotated[
        basic.cTkDynamicArray[cTkActionButtonMap],
        Field(basic.cTkDynamicArray[cTkActionButtonMap], 0x0),
    ]


@partial_struct
class cTkAxisPathMapping(Structure):
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    OverlayIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    SolidIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    SpecialIcon: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    Hand: Annotated[
        c_enum32[enums.cTkInputHandEnum], Field(c_enum32[enums.cTkInputHandEnum], 0x50)
    ]
    Id: Annotated[
        c_enum32[enums.cTkInputAxisEnum], Field(c_enum32[enums.cTkInputAxisEnum], 0x54)
    ]
    OpenVROriginNames: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x58)
    ]


@partial_struct
class cTkAxisImageLookup(Structure):
    Lookup: Annotated[
        basic.cTkDynamicArray[cTkAxisPathMapping],
        Field(basic.cTkDynamicArray[cTkAxisPathMapping], 0x0),
    ]


@partial_struct
class cTkTestMetadata(Structure):
    DocOptionalVector: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    TestColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    TestVector: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    TestVector4: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x30)]
    TestClass: Annotated[cTkTrophyEntry, Field(cTkTrophyEntry, 0x40)]
    TestExternalBitfieldEnumArray: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB8)
    ]
    TestHashMap: Annotated[cTkLocalisationEntry, Field(cTkLocalisationEntry, 0xF8)]
    DocOptionalRenamed: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x128)
    ]
    TestID256: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x148)]
    TestLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x168)
    ]
    TestHashedString: Annotated[basic.HashedString, Field(basic.HashedString, 0x188)]
    TestClassPointer: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x1A0)]
    TestDynamicArray: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x1B0),
    ]
    TestDynamicString: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1C0)
    ]
    TestID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1D0)]
    TestIDLookup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1E0)]
    TestLinkableClassPointerArray: Annotated[
        basic.cTkDynamicArray[basic.LinkableNMSTemplate],
        Field(basic.cTkDynamicArray[basic.LinkableNMSTemplate], 0x1F0),
    ]
    TestModelFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x200)
    ]
    TestSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x210)]
    TestTextureFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x220)
    ]
    TestInt64: Annotated[ctypes.c_int64, Field(ctypes.c_int64, 0x230)]
    TestUInt64: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x238)]
    TestUniqueId: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x240)]
    TestStaticArray: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x248)]
    TestExternalEnumArray: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x270)]
    TestEnumArray: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x284)]
    TestVector2: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x294)]

    class eDocOptionalEnumEnum(IntEnum):
        SomeValue1 = 0x0
        SomeValue2 = 0x1
        SomeValue3 = 0x2
        SomeValue4 = 0x3

    DocOptionalEnum: Annotated[
        c_enum32[eDocOptionalEnumEnum], Field(c_enum32[eDocOptionalEnumEnum], 0x29C)
    ]
    TestAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x2A0),
    ]

    class eTestEnumEnum(IntEnum):
        Default = 0x0
        Option1 = 0x1
        Option2 = 0x2
        Option3 = 0x3

    TestEnum: Annotated[c_enum32[eTestEnumEnum], Field(c_enum32[eTestEnumEnum], 0x2A4)]

    class eTestEnumClassEnum(IntEnum):
        Default = 0x0
        Option1 = 0x1
        Option2 = 0x2
        Option3 = 0x3

    TestEnumClass: Annotated[
        c_enum32[eTestEnumClassEnum], Field(c_enum32[eTestEnumClassEnum], 0x2A8)
    ]

    class eTestEnumUInt32BitFieldEnum(IntEnum):
        empty = 0x0
        Enum1 = 0x1
        Enum2 = 0x2
        Enum3 = 0x4

    TestEnumUInt32BitField: Annotated[
        c_enum32[eTestEnumUInt32BitFieldEnum],
        Field(c_enum32[eTestEnumUInt32BitFieldEnum], 0x2AC),
    ]
    TestExternalEnum: Annotated[
        c_enum32[enums.cTkLanguages], Field(c_enum32[enums.cTkLanguages], 0x2B0)
    ]

    class eTestFlagsEnum(IntEnum):
        empty = 0x0
        Flag1 = 0x1
        Flag2 = 0x2
        Flag3 = 0x4

    TestFlags: Annotated[
        c_enum32[eTestFlagsEnum], Field(c_enum32[eTestFlagsEnum], 0x2B4)
    ]
    TestFloat: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2B8)]

    class eTestInlineEnumEnum(IntEnum):
        Default = 0x0
        NotDefault = 0x1
        Other = 0x2

    TestInlineEnum: Annotated[
        c_enum32[eTestInlineEnumEnum], Field(c_enum32[eTestInlineEnumEnum], 0x2BC)
    ]
    TestInt: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C0)]
    TestNodeHandle: Annotated[basic.GcNodeID, Field(basic.GcNodeID, 0x2C4)]
    TestResource: Annotated[basic.GcResource, Field(basic.GcResource, 0x2C8)]
    TestUInt32: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x2CC)]
    TestInt16: Annotated[ctypes.c_int16, Field(ctypes.c_int16, 0x2D0)]
    TestUInt16: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x2D2)]
    TestString2048: Annotated[
        basic.cTkFixedString0x800, Field(basic.cTkFixedString0x800, 0x2D4)
    ]
    TestString1024: Annotated[
        basic.cTkFixedString0x400, Field(basic.cTkFixedString0x400, 0xAD4)
    ]
    TestString512: Annotated[
        basic.cTkFixedString0x200, Field(basic.cTkFixedString0x200, 0xED4)
    ]
    TestString256: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x10D4)
    ]
    TestString128: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x11D4)
    ]
    DocRenamedString64: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1254)
    ]
    TestString64: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1294)
    ]
    TestString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x12D4)
    ]
    TestColour32: Annotated[basic.Colour32, Field(basic.Colour32, 0x12F4)]
    TestBool: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12F8)]
    TestByte: Annotated[ctypes.c_byte, Field(ctypes.c_byte, 0x12F9)]

    class eTestEnumUInt8Enum(IntEnum):
        Enum1 = 0x0
        Enum2 = 0x1
        Enum3 = 0x2

    TestEnumUInt8: Annotated[
        c_enum32[eTestEnumUInt8Enum], Field(c_enum32[eTestEnumUInt8Enum], 0x12FA)
    ]
    TestInt8: Annotated[ctypes.c_int8, Field(ctypes.c_int8, 0x12FB)]


@partial_struct
class cTkReplacementResource(Structure):
    Original: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    Replacement: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x18)]


@partial_struct
class cTkMaterialMetaData(Structure):
    WaveOneAmplitude: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    WaveOneFallOff: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    WaveOneFrequency: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    WaveTwoAmplitude: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    WaveTwoFallOff: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    WaveTwoFrequency: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x50)]
    ShaderMillData: Annotated[
        cTkMaterialShaderMillData, Field(cTkMaterialShaderMillData, 0x60)
    ]
    DetailNormal: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x2F8)
    ]
    ExternalMaterial: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x308)
    ]
    ForceDiffuse: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x318)
    ]
    ForceFeature: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x328)
    ]
    ForceMask: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x338)
    ]
    ForceNormal: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x348)
    ]
    BillboardSphereFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x358)]
    BranchHSwing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x35C)]
    BranchTrunkAnim: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x360)]
    BranchVSwing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x364)]
    DetailHeightBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x368)]
    DetailHeightBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x36C)]
    FurNoiseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x370)]
    FurNoiseThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x374)]
    FurNoiseTurbulence: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x378)]
    FurTurbulenceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x37C)]
    Glow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x380)]
    HeightScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x384)]
    IBLWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x388)]
    LeafNoise: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38C)]
    LeafSwing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x390)]
    NormalTiling: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x394)]
    NumSteps: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x398)]
    ParallaxDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x39C)]
    ParticleRefractionBrightnessMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3A0)
    ]
    ParticleRefractionStrengthX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A4)]
    ParticleRefractionStrengthY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A8)]
    ParticleRefractionTint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3AC)]
    ReactivityBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3B0)]
    Reflectance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3B4)]
    Refraction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3B8)]
    RefractionIndex: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3BC)]
    Roughness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C0)]

    class eShaderEnum(IntEnum):
        UberShader = 0x0
        Sky = 0x1
        Screen = 0x2
        UberHack = 0x3
        UIScreen = 0x4
        Decal = 0x5
        Particle = 0x6
        ReflectionProbe = 0x7

    Shader: Annotated[c_enum32[eShaderEnum], Field(c_enum32[eShaderEnum], 0x3C4)]
    ShadowFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C8)]
    ShellsHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3CC)]
    SoftFadeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D0)]
    Subsurface: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D4)]
    TerrainNormalFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D8)]
    TessellationHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3DC)]
    TopBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E0)]
    TopBlendOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E4)]
    TopBlendSharpness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E8)]
    TransparencyLayerID: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3EC)]
    TrunkBend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F0)]
    UVFrameTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F4)]
    UVNumTilesX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F8)]
    UVNumTilesY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3FC)]
    UVScrollNormalX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x400)]
    UVScrollNormalY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x404)]
    UVScrollX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x408)]
    UVScrollY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40C)]
    WaveOneSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x410)]
    WaveTwoSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x414)]
    MaterialClass: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x418)
    ]
    Additive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x438)]
    AlphaCutout: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x439)]
    AlwaysOnTopUI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43A)]
    AnisotropicFilter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43B)]
    AOMap: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43C)]
    BeforeUI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43D)]
    BentNormals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43E)]
    Billboard: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43F)]
    BrightEdge: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x440)]
    CameraRelative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x441)]
    CastShadow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x442)]
    Colourisable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x443)]
    ColourMask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x444)]
    CreateFur: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x445)]
    DecalNormalOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x446)]
    DecalTerrainOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x447)]
    DepthMaskUI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x448)]
    DisablePostProcess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x449)]
    DisableZTest: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44A)]
    DisplacementPositionOffset: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B)]
    DisplacementWave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44C)]
    Dissolve: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44D)]
    DoubleBufferGeometry: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44E)]
    DoubleSided: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44F)]
    DoubleSidedKeepNormals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x450)]
    DrawToBloom: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x451)]
    DrawToLensFlare: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x452)]
    EnableLodFade: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x453)]
    FeatureMap: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x454)]
    FullPrecisionPosition: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x455)]
    GlowMask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x456)]
    HighQualityParticle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x457)]
    ImageBasedLighting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x458)]
    Imposter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x459)]
    InvertAlpha: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45A)]
    LightLayers: Annotated[
        c_enum32[enums.cTkLightLayer], Field(c_enum32[enums.cTkLightLayer], 0x45B)
    ]
    MatchGroundColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45C)]
    MergedMeshBillboard: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45D)]
    Metallic: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45E)]
    MetallicMask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x45F)]
    Multitexture: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x460)]
    ParallaxMapped: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x461)]
    ReceiveShadow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x462)]
    ReflectanceMask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x463)]
    ReflectionProbe: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x464)]
    RefractionMask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x465)]
    RotateAroundAt: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x466)]
    RoughnessMask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x467)]
    ScanEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x468)]
    ScreenSpaceReflections: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x469)]
    SelfShadow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46A)]
    ShadowOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46B)]
    SimulatedCloth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46C)]
    SubsurfaceMask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46D)]
    TopBlendFlip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46E)]
    Transparent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46F)]
    UISurface: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x470)]
    Unlit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x471)]
    UseShaderMill: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x472)]
    UVAnimation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x473)]
    UVScrolling: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x474)]
    UVTileAlts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x475)]
    VertexAlphaAO: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x476)]
    VertexColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x477)]
    VertexDetailBlend: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x478)]
    Wind: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x479)]
    WriteLogZ: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x47A)]


@partial_struct
class cTkProceduralTextureLayer(Structure):
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    LinkedLayer: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Textures: Annotated[
        basic.cTkDynamicArray[cTkProceduralTexture],
        Field(basic.cTkDynamicArray[cTkProceduralTexture], 0x30),
    ]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    SelectToMatchBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]


@partial_struct
class cTkEmitterFloatProperty(Structure):
    NextStage: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x0)]

    class eAuthoringEnum(IntEnum):
        FixedValue = 0x0
        RandomRangeFloat = 0x1
        Curves = 0x2

    Authoring: Annotated[
        c_enum32[eAuthoringEnum], Field(c_enum32[eAuthoringEnum], 0x10)
    ]
    CurveBlendMidpoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    CurveEndValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    CurveMidValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    CurveStartValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    CurveVariation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FixedValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    MaxRandomValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    MinRandomValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Curve1Shape: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x34)
    ]
    Curve2Shape: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x35)
    ]


@partial_struct
class cTkEmitterRotation(Structure):
    RotationAxis: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Rotation: Annotated[cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x10)]

    class eAlignmentAxisEnum(IntEnum):
        Rotation = 0x0
        Velocity = 0x1
        VelocityScreenSpace = 0x2

    AlignmentAxis: Annotated[
        c_enum32[eAlignmentAxisEnum], Field(c_enum32[eAlignmentAxisEnum], 0x48)
    ]
    StartRotationVariation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]


@partial_struct
class cTkEmitterWindDrift(Structure):
    CurveBlendMidpoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CurveEndValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    CurveMidValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    CurveStartValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Strength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Curve1Shape: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x18)
    ]
    Curve2Shape: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x19)
    ]
    LimitEmitterLifetime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A)]
    LimitEmitterSpeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B)]


@partial_struct
class cTkProceduralTextureChosenOptionSampler(Structure):
    Options: Annotated[
        basic.cTkDynamicArray[cTkProceduralTextureChosenOption],
        Field(basic.cTkDynamicArray[cTkProceduralTextureChosenOption], 0x0),
    ]


@partial_struct
class cTkLocalisationTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cTkLocalisationEntry],
        Field(basic.cTkDynamicArray[cTkLocalisationEntry], 0x0),
    ]


@partial_struct
class cTkProceduralTextureChosenOptionList(Structure):
    Samplers: Annotated[
        basic.cTkDynamicArray[cTkProceduralTextureChosenOptionSampler],
        Field(basic.cTkDynamicArray[cTkProceduralTextureChosenOptionSampler], 0x0),
    ]


@partial_struct
class cTkModelRendererCameraData(Structure):
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Wander: Annotated[cTkCameraWanderData, Field(cTkCameraWanderData, 0x10)]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    LightPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    LightRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    Pitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    Roll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    Rotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]


@partial_struct
class cTkModelRendererData(Structure):
    Camera: Annotated[
        cTkModelRendererCameraData, Field(cTkModelRendererCameraData, 0x0)
    ]
    FocusOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    FocusLocator: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x50)]
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    AspectRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    BlendInOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    BlendInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    FocusInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]

    class eFocusTypeEnum(IntEnum):
        ResourceBounds = 0x0
        ResourceBoundingHeight = 0x1
        NodeBoundingBox = 0x2
        DiscoveryView = 0x3

    FocusType: Annotated[
        c_enum32[eFocusTypeEnum], Field(c_enum32[eFocusTypeEnum], 0x90)
    ]
    Fov: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    HeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    LightIntensityMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]

    class eThumbnailModeEnum(IntEnum):
        None_ = 0x0
        HUD = 0x1
        GUI = 0x2

    ThumbnailMode: Annotated[
        c_enum32[eThumbnailModeEnum], Field(c_enum32[eThumbnailModeEnum], 0xA0)
    ]
    AlignUIToCameraInHmd: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA4)]
    FlipRotationIfNecessary: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA5)]
    LookForFocusInMasterModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA6)]
    UsePlayerCameraInHmd: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA7)]
    UseSensibleCameraFocusNodeIsNowOffsetNode: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xA8)
    ]


@partial_struct
class cTkModelResourceCameraData(Structure):
    CameraData: Annotated[cTkCameraData, Field(cTkCameraData, 0x0)]
    FocusLocator: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x30)]
    Wander: Annotated[cTkCameraWanderData, Field(cTkCameraWanderData, 0x50)]
    FocusInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]

    class eResourceFocusTypeEnum(IntEnum):
        ResourceBounds = 0x0
        ResourceBoundingHeight = 0x1
        NodeBoundingBox = 0x2
        World = 0x3

    ResourceFocusType: Annotated[
        c_enum32[eResourceFocusTypeEnum], Field(c_enum32[eResourceFocusTypeEnum], 0x60)
    ]
    UseWorldUp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]


@partial_struct
class cTkModelResourceData(Structure):
    Camera: Annotated[
        cTkModelResourceCameraData, Field(cTkModelResourceCameraData, 0x0)
    ]
    Anim: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x70)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    AspectRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    BlendInOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    BlendInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    HeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    LightPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    LightRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]

    class eResourceThumbnailModeEnum(IntEnum):
        None_ = 0x0
        HUD = 0x1
        GUI = 0x2

    ResourceThumbnailMode: Annotated[
        c_enum32[eResourceThumbnailModeEnum],
        Field(c_enum32[eResourceThumbnailModeEnum], 0xB8),
    ]
    CanRotateWithInput: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBC)]


@partial_struct
class cTkVolumeNavMeshBuildParams(Structure):
    BoundsMax: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    BoundsMin: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    BaseParams: Annotated[cTkNavMeshBuildParams, Field(cTkNavMeshBuildParams, 0x20)]
    CellsPerUnitHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    CellsPerUnitWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    NumBorderCells: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x5C)]
    TileSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]


@partial_struct
class cTkAnimCompactMetadata(Structure):
    StillFrameData: Annotated[
        cTkAnimNodeFrameHalfData, Field(cTkAnimNodeFrameHalfData, 0x0)
    ]
    AnimFrameData: Annotated[
        basic.cTkDynamicArray[cTkAnimNodeFrameHalfData],
        Field(basic.cTkDynamicArray[cTkAnimNodeFrameHalfData], 0x30),
    ]
    NodeData: Annotated[
        basic.cTkDynamicArray[cTkAnimNodeData],
        Field(basic.cTkDynamicArray[cTkAnimNodeData], 0x40),
    ]
    FrameCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    NodeCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    Has30HzFrames: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]


@partial_struct
class cTkAnimMetadata(Structure):
    StillFrameData: Annotated[cTkAnimNodeFrameData, Field(cTkAnimNodeFrameData, 0x0)]
    AnimFrameData: Annotated[
        basic.cTkDynamicArray[cTkAnimNodeFrameData],
        Field(basic.cTkDynamicArray[cTkAnimNodeFrameData], 0x30),
    ]
    NodeData: Annotated[
        basic.cTkDynamicArray[cTkAnimNodeData],
        Field(basic.cTkDynamicArray[cTkAnimNodeData], 0x40),
    ]
    FrameCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    NodeCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    Has30HzFrames: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]


@partial_struct
class cTkNGuiLayoutList(Structure):
    Layouts: Annotated[
        basic.cTkDynamicArray[cTkNGuiLayoutListData],
        Field(basic.cTkDynamicArray[cTkNGuiLayoutListData], 0x0),
    ]


@partial_struct
class cTkNGuiLayoutShortcut(Structure):
    EditorIcon: Annotated[
        c_enum32[enums.cTkNGuiEditorIcons],
        Field(c_enum32[enums.cTkNGuiEditorIcons], 0x0),
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4)]
    Available: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cTkNGuiGraphicStyleData(Structure):
    CornerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Desaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    EditorIcon: Annotated[
        c_enum32[enums.cTkNGuiEditorIcons],
        Field(c_enum32[enums.cTkNGuiEditorIcons], 0x8),
    ]
    GradientEndOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    GradientStartOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    Image: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    MarginX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    MarginY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    PaddingX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    PaddingY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    StrokeGradientFeather: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    StrokeGradientOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    StrokeSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Colour: Annotated[basic.Colour32, Field(basic.Colour32, 0x34)]
    GradientColour: Annotated[basic.Colour32, Field(basic.Colour32, 0x38)]
    IconColour: Annotated[basic.Colour32, Field(basic.Colour32, 0x3C)]
    StrokeColour: Annotated[basic.Colour32, Field(basic.Colour32, 0x40)]
    StrokeGradientColour: Annotated[basic.Colour32, Field(basic.Colour32, 0x44)]

    class eGradientEnum(IntEnum):
        None_ = 0x0
        Vertical = 0x1
        Horizontal = 0x2
        HorizontalBounce = 0x3
        Radial = 0x4
        Box = 0x5

    Gradient: Annotated[c_enum32[eGradientEnum], Field(c_enum32[eGradientEnum], 0x48)]
    GradientOffsetPercent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]
    HasDropShadow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A)]
    HasInnerGradient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B)]
    HasOuterGradient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]

    class eShapeEnum(IntEnum):
        Rectangle = 0x0
        Ellipse = 0x1
        Line = 0x2
        LineInverted = 0x3
        Bezier = 0x4
        BezierInverted = 0x5
        BezierWide = 0x6
        BezierWideInverted = 0x7

    Shape: Annotated[c_enum32[eShapeEnum], Field(c_enum32[eShapeEnum], 0x4D)]
    SolidColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E)]
    StrokeGradient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4F)]


@partial_struct
class cTkNGuiGraphicStyle(Structure):
    Active: Annotated[cTkNGuiGraphicStyleData, Field(cTkNGuiGraphicStyleData, 0x0)]
    Default: Annotated[cTkNGuiGraphicStyleData, Field(cTkNGuiGraphicStyleData, 0x50)]
    Highlight: Annotated[cTkNGuiGraphicStyleData, Field(cTkNGuiGraphicStyleData, 0xA0)]
    CustomMaxStart: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF0)]
    CustomMinStart: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF8)]

    class eAnimateEnum(IntEnum):
        None_ = 0x0
        WipeRightToLeft = 0x1
        SimpleWipe = 0x2
        SimpleWipeDown = 0x3
        CustomWipe = 0x4
        CustomWipeAlpha = 0x5

    Animate: Annotated[c_enum32[eAnimateEnum], Field(c_enum32[eAnimateEnum], 0x100)]
    AnimSplit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    AnimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    GlobalFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    HighlightScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    HighlightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    AnimCurve1: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x118)
    ]
    AnimCurve2: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x119)
    ]
    AutoAdjustToChildrenHeight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11A)]
    AutoAdjustToChildrenWidth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11B)]
    DistributeChildrenHeight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11C)]
    DistributeChildrenWidth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11D)]
    InheritStyleFromParentLayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11E)]


@partial_struct
class cTkNGuiTextStyleData(Structure):
    DropShadowAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    DropShadowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    FontHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    FontIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    FontSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    OutlineSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Colour: Annotated[basic.Colour32, Field(basic.Colour32, 0x18)]
    OutlineColour: Annotated[basic.Colour32, Field(basic.Colour32, 0x1C)]
    ShadowColour: Annotated[basic.Colour32, Field(basic.Colour32, 0x20)]
    Align: Annotated[cTkNGuiAlignment, Field(cTkNGuiAlignment, 0x24)]
    AllowScroll: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26)]
    AutoAdjustFontHeight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27)]
    AutoAdjustHeight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]
    BlockAudio: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x29)]
    BypassStyleColours: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A)]
    BypassStyleFont: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2B)]
    BypassStyleFontHeight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    ForceUpperCase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]
    HasDropShadow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2E)]
    HasOutline: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F)]
    IsIndented: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    IsParagraph: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    ScrollOnHover: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]


@partial_struct
class cTkNGuiTextStyle(Structure):
    Active: Annotated[cTkNGuiTextStyleData, Field(cTkNGuiTextStyleData, 0x0)]
    Default: Annotated[cTkNGuiTextStyleData, Field(cTkNGuiTextStyleData, 0x34)]
    Highlight: Annotated[cTkNGuiTextStyleData, Field(cTkNGuiTextStyleData, 0x68)]


@partial_struct
class cTkNGuiEditorStyleData(Structure):
    SkinColours: Annotated[
        cTkNGuiEditorStyleColour, Field(cTkNGuiEditorStyleColour, 0x0)
    ]
    Font: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x480)]
    LayoutShortcuts: Annotated[
        basic.cTkDynamicArray[cTkNGuiLayoutShortcut],
        Field(basic.cTkDynamicArray[cTkNGuiLayoutShortcut], 0x490),
    ]
    SnapSettings: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x4A0),
    ]
    GraphicStyles: Annotated[cTkNGuiGraphicStyle, Field(cTkNGuiGraphicStyle, 0x4B0)]
    TextStyles: Annotated[cTkNGuiTextStyle, Field(cTkNGuiTextStyle, 0x6F90)]
    Sizes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78B4)]
    SkinFontHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79B8)]


@partial_struct
class cTkEntitlementList(Structure):
    Entitlements: Annotated[
        basic.cTkDynamicArray[cTkEntitlementListData],
        Field(basic.cTkDynamicArray[cTkEntitlementListData], 0x0),
    ]


@partial_struct
class cTkNGuiRectanglePulseEffect(Structure):
    PulseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    PulseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    PulseWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    PulseAlphaCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xC)
    ]
    PulseSizeCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xD)
    ]


@partial_struct
class cTkIOSDevicePreset(Structure):
    DefaultGraphicsSettings: Annotated[
        cTkGraphicsSettings, Field(cTkGraphicsSettings, 0x0)
    ]
    ModelIdentifiers: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x100],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x100], 0x1C8),
    ]
    DeviceName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1D8)
    ]


@partial_struct
class cTkAnimDetailSettingsTables(Structure):
    Tables: Annotated[
        basic.cTkDynamicArray[cTkAnimDetailSettingsTable],
        Field(basic.cTkDynamicArray[cTkAnimDetailSettingsTable], 0x0),
    ]


@partial_struct
class cTkWaterConditionData(Structure):
    Waves: Annotated[
        basic.cTkDynamicArray[cTkWaveInputData],
        Field(basic.cTkDynamicArray[cTkWaveInputData], 0x0),
    ]
    FoamProperties: Annotated[cTkFoamProperties, Field(cTkFoamProperties, 0x10)]
    DetailNormalsStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    WaveRTPCStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]


@partial_struct
class cTkBiomeSpecificWaterConditions(Structure):
    WaterConditionUsage: Annotated[
        cTkAllowedWaterConditions, Field(cTkAllowedWaterConditions, 0x0)
    ]


@partial_struct
class cTkCreatureTailComponentData(Structure):
    DefaultParams: Annotated[cTkCreatureTailParams, Field(cTkCreatureTailParams, 0x0)]
    ParamVariations: Annotated[
        basic.cTkDynamicArray[cTkCreatureTailParams],
        Field(basic.cTkDynamicArray[cTkCreatureTailParams], 0x78),
    ]
    LengthAxis: Annotated[
        c_enum32[enums.cGcPrimaryAxis], Field(c_enum32[enums.cGcPrimaryAxis], 0x88)
    ]
    CanUseDefaultParams: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8C)]


@partial_struct
class cTkAnimationOverrideList(Structure):
    Anims: Annotated[
        basic.cTkDynamicArray[cTkAnimationData],
        Field(basic.cTkDynamicArray[cTkAnimationData], 0x0),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cTkEasedFalloff(Structure):
    LeftMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    RightMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    LeftCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8)
    ]
    RightCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x9)
    ]


@partial_struct
class cTkInOutCurve(Structure):
    Midpoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    InCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x4)
    ]
    OutCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x5)
    ]


@partial_struct
class cTkHitCurveData(Structure):
    Curve: Annotated[cTkInOutCurve, Field(cTkInOutCurve, 0x0)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cTkAnimStateMachineTransitionData(Structure):
    Conditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    DestinationStateDebugName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BlendType: Annotated[
        c_enum32[enums.cTkAnimBlendType], Field(c_enum32[enums.cTkAnimBlendType], 0x20)
    ]
    DestinationState: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    ExitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    TransitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    TransitionTimeMode: Annotated[
        c_enum32[enums.cTkAnimStateMachineBlendTimeMode],
        Field(c_enum32[enums.cTkAnimStateMachineBlendTimeMode], 0x30),
    ]
    HasTimedExit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]


@partial_struct
class cTkAnimStateMachineStateData(Structure):
    Anim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Transitions: Annotated[
        basic.cTkDynamicArray[cTkAnimStateMachineTransitionData],
        Field(basic.cTkDynamicArray[cTkAnimStateMachineTransitionData], 0x20),
    ]
    Id: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    NodePosX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    NodePosY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    ScrollX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    ScrollY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    Zoom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]


@partial_struct
class cTkAnimationDataTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cTkAnimationData],
        Field(basic.cTkDynamicArray[cTkAnimationData], 0x0),
    ]


@partial_struct
class cTkAnimationNotifies(Structure):
    Notifies: Annotated[
        basic.cTkDynamicArray[cTkAnimationNotify],
        Field(basic.cTkDynamicArray[cTkAnimationNotify], 0x0),
    ]


@partial_struct
class cTkAnimStateMachineData(Structure):
    EntryTransitions: Annotated[
        basic.cTkDynamicArray[cTkAnimStateMachineTransitionData],
        Field(basic.cTkDynamicArray[cTkAnimStateMachineTransitionData], 0x0),
    ]
    LayerId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    States: Annotated[
        basic.cTkDynamicArray[cTkAnimStateMachineStateData],
        Field(basic.cTkDynamicArray[cTkAnimStateMachineStateData], 0x20),
    ]
    DefaultState: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    EntryPosX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    EntryPosY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    ScrollX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    ScrollY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    Zoom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]


@partial_struct
class cTkAnimBlendTree(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Tree: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x10)]
    GameData: Annotated[cTkAnimationGameData, Field(cTkAnimationGameData, 0x20)]
    Priority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]


@partial_struct
class cGcResourceElement(Structure):
    AltId: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    ProceduralTexture: Annotated[
        cTkProceduralTextureChosenOptionList,
        Field(cTkProceduralTextureChosenOptionList, 0x20),
    ]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x30)]
    ResHandle: Annotated[basic.GcResource, Field(basic.GcResource, 0x40)]


@partial_struct
class cGcWikiTopic(Structure):
    MissionButtonText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ShortDescriptionID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    TopicID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x60)]
    NotifyIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x78)]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    Pages: Annotated[
        basic.cTkDynamicArray[cGcWikiPage],
        Field(basic.cTkDynamicArray[cGcWikiPage], 0xA0),
    ]
    ActionSet: Annotated[
        c_enum32[enums.cGcActionSetType], Field(c_enum32[enums.cGcActionSetType], 0xB0)
    ]
    Seen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB4)]
    Unlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB5)]


@partial_struct
class cGcWikiCategory(Structure):
    CategoryID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CategoryIDUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    IconOff: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x40)]
    IconOn: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x58)]
    Items: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x70),
    ]
    Topics: Annotated[
        basic.cTkDynamicArray[cGcWikiTopic],
        Field(basic.cTkDynamicArray[cGcWikiTopic], 0x80),
    ]
    Type: Annotated[
        c_enum32[enums.cGcWikiTopicType], Field(c_enum32[enums.cGcWikiTopicType], 0x90)
    ]
    UnlockedCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x94)]
    UnseenCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x98)]


@partial_struct
class cGcStoryEntry(Structure):
    AlienText: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Entry: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)]
    BranchedEntries: Annotated[
        basic.cTkDynamicArray[cGcStoryEntryBranch],
        Field(basic.cTkDynamicArray[cGcStoryEntryBranch], 0x60),
    ]
    AlienTextForceRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x70)
    ]
    AutoPrefixWithAlienText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]


@partial_struct
class cGcStoryPage(Structure):
    ID: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x20)]
    Entries: Annotated[
        basic.cTkDynamicArray[cGcStoryEntry],
        Field(basic.cTkDynamicArray[cGcStoryEntry], 0x38),
    ]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    InteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x58),
    ]
    WikiGridType: Annotated[
        c_enum32[enums.cGcWikiTopicType], Field(c_enum32[enums.cGcWikiTopicType], 0x5C)
    ]
    StatIsBitmask: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    UseGridType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]


@partial_struct
class cGcStoryCategory(Structure):
    CategoryID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CategoryIDUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    IconOff: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x40)]
    IconOn: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x58)]
    Pages: Annotated[
        basic.cTkDynamicArray[cGcStoryPage],
        Field(basic.cTkDynamicArray[cGcStoryPage], 0x70),
    ]


@partial_struct
class cGcPersistentBaseDifficultyData(Structure):
    DifficultyPreset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x0),
    ]

    class ePersistentBaseDifficultyFlagsEnum(IntEnum):
        empty = 0x0
        Locked = 0x1

    PersistentBaseDifficultyFlags: Annotated[
        c_enum32[ePersistentBaseDifficultyFlagsEnum],
        Field(c_enum32[ePersistentBaseDifficultyFlagsEnum], 0x4),
    ]


@partial_struct
class cGcDifficultySettingsReplicatedState(Structure):
    EasiestUsedPreset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x0),
    ]
    HardestUsedPreset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x4),
    ]
    Preset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x8),
    ]
    RoundedDownPreset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0xC),
    ]
    IsLocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    IsPermadeath: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]


@partial_struct
class cGcDifficultyStartWithAllItemsKnownOptionData(Structure):
    InitialShipInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x0)
    ]
    InitialWeaponInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x160)
    ]
    InitialKnownThings: Annotated[
        cGcKnownThingsPreset, Field(cGcKnownThingsPreset, 0x2C0)
    ]


@partial_struct
class cGcDifficultySettingsData(Structure):
    ActiveSurvivalBars: Annotated[
        c_enum32[enums.cGcActiveSurvivalBarsDifficultyOption],
        Field(c_enum32[enums.cGcActiveSurvivalBarsDifficultyOption], 0x0),
    ]
    BreakTechOnDamage: Annotated[
        c_enum32[enums.cGcBreakTechOnDamageDifficultyOption],
        Field(c_enum32[enums.cGcBreakTechOnDamageDifficultyOption], 0x4),
    ]
    ChargingRequirements: Annotated[
        c_enum32[enums.cGcChargingRequirementsDifficultyOption],
        Field(c_enum32[enums.cGcChargingRequirementsDifficultyOption], 0x8),
    ]
    CreatureHostility: Annotated[
        c_enum32[enums.cGcCreatureHostilityDifficultyOption],
        Field(c_enum32[enums.cGcCreatureHostilityDifficultyOption], 0xC),
    ]
    CurrencyCost: Annotated[
        c_enum32[enums.cGcCurrencyCostDifficultyOption],
        Field(c_enum32[enums.cGcCurrencyCostDifficultyOption], 0x10),
    ]
    DamageGiven: Annotated[
        c_enum32[enums.cGcDamageGivenDifficultyOption],
        Field(c_enum32[enums.cGcDamageGivenDifficultyOption], 0x14),
    ]
    DamageReceived: Annotated[
        c_enum32[enums.cGcDamageReceivedDifficultyOption],
        Field(c_enum32[enums.cGcDamageReceivedDifficultyOption], 0x18),
    ]
    DeathConsequences: Annotated[
        c_enum32[enums.cGcDeathConsequencesDifficultyOption],
        Field(c_enum32[enums.cGcDeathConsequencesDifficultyOption], 0x1C),
    ]
    EnergyDrain: Annotated[
        c_enum32[enums.cGcEnergyDrainDifficultyOption],
        Field(c_enum32[enums.cGcEnergyDrainDifficultyOption], 0x20),
    ]
    Fishing: Annotated[
        c_enum32[enums.cGcFishingDifficultyOption],
        Field(c_enum32[enums.cGcFishingDifficultyOption], 0x24),
    ]
    FuelUse: Annotated[
        c_enum32[enums.cGcFuelUseDifficultyOption],
        Field(c_enum32[enums.cGcFuelUseDifficultyOption], 0x28),
    ]
    GroundCombatTimers: Annotated[
        c_enum32[enums.cGcCombatTimerDifficultyOption],
        Field(c_enum32[enums.cGcCombatTimerDifficultyOption], 0x2C),
    ]
    HazardDrain: Annotated[
        c_enum32[enums.cGcHazardDrainDifficultyOption],
        Field(c_enum32[enums.cGcHazardDrainDifficultyOption], 0x30),
    ]
    InventoryStackLimits: Annotated[
        c_enum32[enums.cGcInventoryStackLimitsDifficultyOption],
        Field(c_enum32[enums.cGcInventoryStackLimitsDifficultyOption], 0x34),
    ]
    ItemShopAvailability: Annotated[
        c_enum32[enums.cGcItemShopAvailabilityDifficultyOption],
        Field(c_enum32[enums.cGcItemShopAvailabilityDifficultyOption], 0x38),
    ]
    LaunchFuelCost: Annotated[
        c_enum32[enums.cGcLaunchFuelCostDifficultyOption],
        Field(c_enum32[enums.cGcLaunchFuelCostDifficultyOption], 0x3C),
    ]
    NPCPopulation: Annotated[
        c_enum32[enums.cGcNPCPopulationDifficultyOption],
        Field(c_enum32[enums.cGcNPCPopulationDifficultyOption], 0x40),
    ]
    ReputationGain: Annotated[
        c_enum32[enums.cGcReputationGainDifficultyOption],
        Field(c_enum32[enums.cGcReputationGainDifficultyOption], 0x44),
    ]
    ScannerRecharge: Annotated[
        c_enum32[enums.cGcScannerRechargeDifficultyOption],
        Field(c_enum32[enums.cGcScannerRechargeDifficultyOption], 0x48),
    ]
    SpaceCombatTimers: Annotated[
        c_enum32[enums.cGcCombatTimerDifficultyOption],
        Field(c_enum32[enums.cGcCombatTimerDifficultyOption], 0x4C),
    ]
    SprintingCost: Annotated[
        c_enum32[enums.cGcSprintingCostDifficultyOption],
        Field(c_enum32[enums.cGcSprintingCostDifficultyOption], 0x50),
    ]
    SubstanceCollection: Annotated[
        c_enum32[enums.cGcSubstanceCollectionDifficultyOption],
        Field(c_enum32[enums.cGcSubstanceCollectionDifficultyOption], 0x54),
    ]
    AllSlotsUnlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]
    BaseAutoPower: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x59)]
    CraftingIsFree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5A)]
    InventoriesAlwaysInRange: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5B)]
    SettingsLocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5C)]
    StartWithAllItemsKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5D)]
    TutorialEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5E)]
    WarpDriveRequirements: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5F)]


@partial_struct
class cGcQuickMenuActionSaveData(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    InventoryIndex: Annotated[cGcInventoryIndex, Field(cGcInventoryIndex, 0x10)]
    Action: Annotated[
        c_enum32[enums.cGcQuickMenuActions],
        Field(c_enum32[enums.cGcQuickMenuActions], 0x18),
    ]
    Number: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]


@partial_struct
class cGcHotActionsSaveData(Structure):
    KeyActions: Annotated[
        cGcQuickMenuActionSaveData, Field(cGcQuickMenuActionSaveData, 0x0)
    ]


@partial_struct
class cGcShipWeaponData(Structure):
    Projectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Reticle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AutoAimAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    AutoAimExtraAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    CoolRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    OverheatCoolTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    RemoteType: Annotated[
        c_enum32[enums.cGcRemoteWeapons], Field(c_enum32[enums.cGcRemoteWeapons], 0x30)
    ]
    Stat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x34)
    ]
    IsProjectile: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]
    ShowOverheatSwitch: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39)]


@partial_struct
class cGcPlayerWeaponBiomeProperties(Structure):
    UpgradeColourOverride: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    MuzzleChargedAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    MuzzleChargedParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    MuzzleFireAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    MuzzleFireParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    MuzzleIdleAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    MuzzleIdleParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Projectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    StatBonusesOverride: Annotated[
        basic.cTkDynamicArray[cGcStatsBonus],
        Field(basic.cTkDynamicArray[cGcStatsBonus], 0x80),
    ]
    WeaponChargedAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    WeaponFireAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    WeaponFireParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    WeaponIdleAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0xD0)
    ]


@partial_struct
class cGcPlayerWeaponPropertiesData(Structure):
    DefaultMuzzleLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    BiomeProperties: Annotated[
        basic.cTkDynamicArray[cGcPlayerWeaponBiomeProperties],
        Field(basic.cTkDynamicArray[cGcPlayerWeaponBiomeProperties], 0x10),
    ]
    DefaultMuzzleChargedAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    DefaultMuzzleChargedParticlesId: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x30)
    ]
    DefaultMuzzleFireAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    DefaultMuzzleFireParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    DefaultMuzzleIdleAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    DefaultMuzzleIdleParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    DefaultProjectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    DefaultWeaponChargedAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    DefaultWeaponFireAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    DefaultWeaponFireParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    DefaultWeaponIdleAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    MuzzleGunResource: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xD0)
    ]
    MuzzleLaserResource: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    ShakeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xF0)]
    VibartionId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x100)]
    ChargingMuzzleFlashMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    ChargingMuzzleFlashMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    MuzzleFlashScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    MuzzleLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C)]
    ParticlesOffsetMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    RemoteType: Annotated[
        c_enum32[enums.cGcRemoteWeapons], Field(c_enum32[enums.cGcRemoteWeapons], 0x124)
    ]
    RumbleScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128)]
    Stat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x12C)
    ]
    VibrationScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    WeaponClass: Annotated[
        c_enum32[enums.cGcPlayerWeaponClass],
        Field(c_enum32[enums.cGcPlayerWeaponClass], 0x134),
    ]
    FlashMuzzleOnProjectileFire: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x138)]
    MuzzleLightUsesLaserColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x139)]
    MuzzleLightUsesMuzzleColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13A)]
    UseMuzzleLight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13B)]
    UsesCustomBiomeAnims: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13C)]
    UsesCustomBiomeColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13D)]
    UsesCustomBiomeFireAnims: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13E)]
    UsesCustomBiomeFireParticles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x13F)]
    UsesCustomBiomeMuzzleParticles: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x140)
    ]
    UsesCustomBiomeProjectile: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x141)]
    UsesCustomBiomeStats: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x142)]


@partial_struct
class cGcMechMeshPartTable(Structure):
    Parts: Annotated[cGcMechMeshPartData, Field(cGcMechMeshPartData, 0x0)]


@partial_struct
class cGcMechWeaponLocationPriority(Structure):
    MechWeaponLocationPriority: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcMechWeaponLocation]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcMechWeaponLocation]], 0x0),
    ]


@partial_struct
class cGcMechPartAudioEventOverride(Structure):
    MeshPart: Annotated[
        c_enum32[enums.cGcMechMeshPart], Field(c_enum32[enums.cGcMechMeshPart], 0x0)
    ]
    MeshType: Annotated[
        c_enum32[enums.cGcMechMeshType], Field(c_enum32[enums.cGcMechMeshType], 0x4)
    ]
    OverrideEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x8),
    ]


@partial_struct
class cGcMechAudioEvent(Structure):
    MeshPartOverrides: Annotated[
        basic.cTkDynamicArray[cGcMechPartAudioEventOverride],
        Field(basic.cTkDynamicArray[cGcMechPartAudioEventOverride], 0x0),
    ]
    DefaultEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x10),
    ]


@partial_struct
class cGcMechAudioEventTable(Structure):
    JetpackLP: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x0)]
    JetpackLPEnd: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x18)]
    JetpackRetrigger: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x30)]
    JetpackTrigger: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x48)]
    JumpLanding: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x60)]
    JumpLandingSkid: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x78)]
    MechEnter: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x90)]
    MechExit: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0xA8)]
    StepRun: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0xC0)]
    StepWalk: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0xD8)]
    TitanFallLanding: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0xF0)]
    TitanFallPoseIntro: Annotated[cGcMechAudioEvent, Field(cGcMechAudioEvent, 0x108)]


@partial_struct
class cGcMechDebugSpawnData(Structure):
    Destination: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    CustomisatonData: Annotated[
        cGcCharacterCustomisationSaveData,
        Field(cGcCharacterCustomisationSaveData, 0x40),
    ]
    MoveDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    TitanFallDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    Running: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB0)]
    UseCustomisation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB1)]


@partial_struct
class cGcPulseEncounterInfo(Structure):
    CustomNotifyColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    SpawnConditions: Annotated[
        cGcPulseEncounterSpawnConditions, Field(cGcPulseEncounterSpawnConditions, 0x10)
    ]
    ChatMessageName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x70)
    ]
    CustomNotify: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x90)
    ]
    CustomNotifyOSD: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xB0)
    ]
    CustomNotifyTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD0)
    ]
    MarkerLabel: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xF0)
    ]
    MarkerIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x110)]
    Encounter: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x128)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x138)]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x148),
    ]
    SpawnChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    SpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150)]
    HasColourOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x154)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x155)]
    UseMarkerIconInOSD: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x156)]


@partial_struct
class cGcBackgroundSpaceEncounterSpawnConditions(Structure):
    NeedsMissionActive: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    NeedsStarType: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x10),
    ]
    NeedsAbandonedSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    NeedsAsteroidField: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]
    NeedsEmptySystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16)]
    NeedsNearbyCorruptWorld: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x17)]
    NeedsPirateSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]
    UseStarType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19)]


@partial_struct
class cGcBackgroundSpaceEncounterInfo(Structure):
    Encounter: Annotated[
        cGcPulseEncounterSpawnObject, Field(cGcPulseEncounterSpawnObject, 0x0)
    ]
    SpawnConditions: Annotated[
        cGcBackgroundSpaceEncounterSpawnConditions,
        Field(cGcBackgroundSpaceEncounterSpawnConditions, 0x70),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    DespawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    MinDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    SelectionWeighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    SpawnChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    SpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]


@partial_struct
class cGcPulseEncounterSpawnSpaceHostiles(Structure):
    CustomShipResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]
    AttackDefinition: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    NumberOfShips: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]


@partial_struct
class cGcDoShipEscort(Structure):
    EscortTargetShipFaction: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0x0),
    ]
    EscortTargetShipRole: Annotated[
        c_enum32[enums.cGcAISpaceshipRoles],
        Field(c_enum32[enums.cGcAISpaceshipRoles], 0x4),
    ]
    EscortTargetShipType: Annotated[
        c_enum32[enums.cGcAISpaceshipTypes],
        Field(c_enum32[enums.cGcAISpaceshipTypes], 0x8),
    ]
    MaxSearchDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MatchFaction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]
    MatchRole: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11)]
    MatchType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12)]


@partial_struct
class cGcBountySpawnInfo(Structure):
    Data: Annotated[cGcAIShipSpawnData, Field(cGcAIShipSpawnData, 0x0)]
    Label: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x160)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x180)]
    AttackData: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x198)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1A8)]


@partial_struct
class cGcAISpaceshipModelData(Structure):
    Filename: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    AIRole: Annotated[
        c_enum32[enums.cGcAISpaceshipRoles],
        Field(c_enum32[enums.cGcAISpaceshipRoles], 0x10),
    ]
    Class: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0x14),
    ]
    FrigateClass: Annotated[
        c_enum32[enums.cGcFrigateClass], Field(c_enum32[enums.cGcFrigateClass], 0x18)
    ]


@partial_struct
class cGcAISpaceshipModelDataArray(Structure):
    Spaceships: Annotated[
        basic.cTkDynamicArray[cGcAISpaceshipModelData],
        Field(basic.cTkDynamicArray[cGcAISpaceshipModelData], 0x0),
    ]


@partial_struct
class cGcWeatherColourSettingList(Structure):
    Settings: Annotated[
        basic.cTkDynamicArray[cGcPlanetWeatherColourData],
        Field(basic.cTkDynamicArray[cGcPlanetWeatherColourData], 0x0),
    ]


@partial_struct
class cGcAISpaceshipPreloadCacheData(Structure):
    TextureDescriptorHint: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x20)]
    Faction: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0x30),
    ]
    FrigateClass: Annotated[
        c_enum32[enums.cGcFrigateClass], Field(c_enum32[enums.cGcFrigateClass], 0x34)
    ]
    ShipClass: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0x38),
    ]
    ShipRole: Annotated[
        c_enum32[enums.cGcAISpaceshipRoles],
        Field(c_enum32[enums.cGcAISpaceshipRoles], 0x3C),
    ]


@partial_struct
class cGcAISpaceshipPreloadList(Structure):
    Cache: Annotated[
        basic.cTkDynamicArray[cGcAISpaceshipPreloadCacheData],
        Field(basic.cTkDynamicArray[cGcAISpaceshipPreloadCacheData], 0x0),
    ]
    Faction: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0x10),
    ]


@partial_struct
class cGcScreenFilterOption(Structure):
    Filter: Annotated[
        c_enum32[enums.cGcScreenFilters], Field(c_enum32[enums.cGcScreenFilters], 0x0)
    ]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcPlanetColourData(Structure):
    Palettes: Annotated[cGcColourPaletteData, Field(cGcColourPaletteData, 0x0)]


@partial_struct
class cGcPlanetHeavyAirData(Structure):
    Colours: Annotated[cGcHeavyAirColourData, Field(cGcHeavyAirColourData, 0x0)]
    Filename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x140)
    ]


@partial_struct
class cGcPlanetGenerationInputData(Structure):
    CommonSubstance: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RareSubstance: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x20)]
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x30)
    ]
    BiomeSubType: Annotated[
        c_enum32[enums.cGcBiomeSubType], Field(c_enum32[enums.cGcBiomeSubType], 0x34)
    ]
    Class: Annotated[
        c_enum32[enums.cGcPlanetClass], Field(c_enum32[enums.cGcPlanetClass], 0x38)
    ]
    PlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    PlanetSize: Annotated[
        c_enum32[enums.cGcPlanetSize], Field(c_enum32[enums.cGcPlanetSize], 0x40)
    ]
    RealityIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    Star: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x48),
    ]
    ForceContinents: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]
    HasRings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]
    InAbandonedSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E)]
    InEmptySystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4F)]
    InGasGiantSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    InPirateSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    Prime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]


@partial_struct
class cGcExternalObjectFileList(Structure):
    ExternalObjectFiles: Annotated[
        basic.cTkDynamicArray[cGcExternalObjectListOptions],
        Field(basic.cTkDynamicArray[cGcExternalObjectListOptions], 0x0),
    ]
    ForceOnDuringSeasons: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x10),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    SubBiomeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MaxFilesToChoose: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB0)]
    MinFilesToChoose: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB4)]
    OnlyOnBiome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0xB8)
    ]
    ProbabilityOfBeingActive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    ForceOnSeasonStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC0)]
    NotOnDeadPlanets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC1)]
    NotOnExtremePlanets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC2)]
    NotOnGasGiant: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC3)]
    NotOnInfested: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC4)]
    NotOnStartPlanets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC5)]
    NotOnWeirdPlanets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC6)]
    OnlyOnCorruptSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC7)]
    OnlyOnDeepWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC8)]
    OnlyOnExtremeSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC9)]
    OnlyOnExtremeWeather: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xCA)]
    OnlyOnInfested: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xCB)]


@partial_struct
class cGcMiningSubstanceData(Structure):
    Rarity: Annotated[c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x0)]
    SubstanceCategory: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x4),
    ]
    UseRarity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcSolarSystemEventWarpIn(Structure):
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x0)]
    ShipChoiceSequence: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x10),
    ]
    Locator: Annotated[
        cGcSolarSystemLocatorChoice, Field(cGcSolarSystemLocatorChoice, 0x20)
    ]
    RepeatIntervalRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x4C)]
    ShipCountRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x54)]
    SpeedRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x5C)]
    WarpIntervalRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x64)]
    Faction: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0x6C),
    ]
    Repeat: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]
    ShipRole: Annotated[
        c_enum32[enums.cGcAISpaceshipRoles],
        Field(c_enum32[enums.cGcAISpaceshipRoles], 0x74),
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    SquadName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x7C)
    ]
    InstantWarpIn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9C)]
    InvertDirection: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9D)]


@partial_struct
class cGcSolarSystemEventWarpPlayer(Structure):
    Locator: Annotated[
        cGcSolarSystemLocatorChoice, Field(cGcSolarSystemLocatorChoice, 0x0)
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]


@partial_struct
class cGcSentinelMechWeaponData(Structure):
    LaserLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    LaserLightOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    MuzzleData: Annotated[
        cGcVehicleWeaponMuzzleData, Field(cGcVehicleWeaponMuzzleData, 0x20)
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    LaserID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    Projectile: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    AttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    ChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    CooldownTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    CooldownTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    IdealRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    LaserFireTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    LaserFireTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    LaserLightAttackIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    LaserLightChargeIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    LaserSpringTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    LaserSpringTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    MaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]
    MinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    ProjectileExplosionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    ProjectileFireInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    ProjectileInheritInitialVelocity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC)
    ]
    ProjectileNumShotsMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB0)]
    ProjectileNumShotsMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB4)]
    ProjectilesPerShot: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB8)]
    ProjectileSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]

    class eSentinelMechWeaponTypeEnum(IntEnum):
        Projectile = 0x0
        Laser = 0x1

    SentinelMechWeaponType: Annotated[
        c_enum32[eSentinelMechWeaponTypeEnum],
        Field(c_enum32[eSentinelMechWeaponTypeEnum], 0xC0),
    ]
    ShootLocation: Annotated[
        c_enum32[enums.cGcMechWeaponLocation],
        Field(c_enum32[enums.cGcMechWeaponLocation], 0xC4),
    ]
    StartFireAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xC8),
    ]
    StopFireAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xCC),
    ]


@partial_struct
class cGcSentinelQuadWeaponData(Structure):
    ChargingIdleAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FiringIdleAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    LaunchProjectileAnimId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    MuzzleFlashEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    ProjectileId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    ChargeLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    ChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    ExplosionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    FireInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    FireTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    FireTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    InheritInitialVelocity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    MaxAttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    MaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    MinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    NumProjectiles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x88)]
    NumShotsMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8C)]
    NumShotsMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x90)]
    ProjectileSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    StartFireAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x98),
    ]
    StopFireAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x9C),
    ]
    Timeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    ShootLocatorName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA4)
    ]


@partial_struct
class cGcButtonSpawnOffset(Structure):
    AngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    AngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    Facing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Faction: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0x10),
    ]
    Offset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    ShipRole: Annotated[
        c_enum32[enums.cGcAISpaceshipRoles],
        Field(c_enum32[enums.cGcAISpaceshipRoles], 0x18),
    ]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]


@partial_struct
class cGcButtonSpawn(Structure):
    Offset: Annotated[cGcButtonSpawnOffset, Field(cGcButtonSpawnOffset, 0x0)]
    Button: Annotated[
        c_enum32[enums.cTkInputEnum], Field(c_enum32[enums.cTkInputEnum], 0x20)
    ]

    class eEventEnum(IntEnum):
        None_ = 0x0
        Pirates = 0x1
        Police = 0x2
        Traders = 0x3
        Walker = 0x4

    Event: Annotated[c_enum32[eEventEnum], Field(c_enum32[eEventEnum], 0x24)]


@partial_struct
class cGcButtonSpawnTable(Structure):
    ButtonSpawns: Annotated[
        basic.cTkDynamicArray[cGcButtonSpawn],
        Field(basic.cTkDynamicArray[cGcButtonSpawn], 0x0),
    ]


@partial_struct
class cGcDroneData(Structure):
    EyeColourAlert: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    EyeColourPatrol: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    EyeColourSearch: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    CoverResource: Annotated[cGcSentinelResource, Field(cGcSentinelResource, 0x30)]
    DamageEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    MeleeAttackDamageType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x68)]
    SpinAttackDamageType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x78)]
    Attack: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x88)]
    Friendly: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0xC0)]
    FriendlyFast: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0xF8)]
    MeleeAttack: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x130)]
    Patrol: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x168)]
    Repair: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x1A0)]
    Scan: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x1D8)]
    Search: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x210)]
    Stun: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x248)]
    Summon: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x280)]
    ToCover: Annotated[cGcDroneControlData, Field(cGcDroneControlData, 0x2B8)]
    AttackActivateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F0)]
    AttackAlertFailTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F4)]
    AttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F8)]
    AttackBobAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2FC)]
    AttackBobRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x300)]
    AttackMaxDistanceFromAlert: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x304)]
    AttackMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x308)]
    AttackMoveAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30C)]
    AttackMoveLookDistanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x310)]
    AttackMoveLookDistanceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x314)]
    AttackMoveMinChoiceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x318)]
    BaseAnimationSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x31C)]
    CollisionAvoidOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x320)]
    CoverPlacementActivateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x324)]
    CoverPlacementActivateTimeMaxRandomExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x328)
    ]
    CoverPlacementCooldownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x32C)]
    CoverPlacementMaxActiveCover: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x330)
    ]
    CoverPlacementMaxDistanceFromSelf: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x334)
    ]
    CoverPlacementMinDistanceFromSelf: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x338)
    ]
    CoverPlacementMinDistanceFromTarget: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x33C)
    ]
    CoverPlacementUpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x340)]
    DamageEffectHealthPercentThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x344)
    ]
    DroneAlertTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x348)]
    DronePatrolDistanceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34C)]
    DronePatrolDistanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x350)]
    DronePatrolHonkProbability: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x354)]
    DronePatrolHonkRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x358)]
    DronePatrolHonkTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x35C)]
    DronePatrolInspectDistanceMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x360)
    ]
    DronePatrolInspectDistanceMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x364)
    ]
    DronePatrolInspectRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x368)]
    DronePatrolInspectSwitchTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x36C)
    ]
    DronePatrolInspectTargetTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x370)
    ]
    DronePatrolRepelDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x374)]
    DronePatrolRepelStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x378)]
    DronePatrolTargetDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x37C)]
    DroneScanPlayerTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x380)]
    DroneSearchCriminalScanRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x384)
    ]
    DroneSearchCriminalScanRadiusInShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x388)
    ]
    DroneSearchCriminalScanRadiusWanted: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x38C)
    ]
    DroneSearchPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x390)]
    DroneSearchRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x394)]
    DroneSearchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x398)]
    EngineDirAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x39C)]
    EngineDirSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A0)]
    EyeAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A4)]
    EyeFocusTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3A8)]
    EyeNumRandomsMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3AC)]
    EyeNumRandomsMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3B0)]
    EyeOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3B4)]
    EyeTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3B8)]
    EyeTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3BC)]
    HideBehindCoverHealthPercentThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3C0)
    ]
    HideBehindCoverSearchRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C4)]
    LeanAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C8)]
    LeanSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3CC)]
    LeanSpeedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D0)]
    MeleeAttackDamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D4)]
    MeleeAttackHomingStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D8)]
    MeleeAttackMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3DC)]
    MeleeAttackWindUpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E0)]
    SpinAttackCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E4)]
    SpinAttackDamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3E8)]
    SpinAttackDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3EC)]
    SpinAttackHomingStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F0)]
    SpinAttackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F4)]
    SpinAttackRevolutions: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3F8)]
    EnableCoverPlacement: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3FC)]
    SpinAttackRevolutionCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x3FD)
    ]


@partial_struct
class cGcDroneDataWithId(Structure):
    Data: Annotated[cGcDroneData, Field(cGcDroneData, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x400)]


@partial_struct
class cGcSentinelEncounterOverride(Structure):
    OSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    OSDOnDefeat: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    OSDOnWaveStart: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    ExtremeSpawnID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    SpawnID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    StatusMessage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    CustomOSDIcon: Annotated[
        c_enum32[enums.cGcRealityGameIcons],
        Field(c_enum32[enums.cGcRealityGameIcons], 0xA0),
    ]
    EncounterTypeOverride: Annotated[
        c_enum32[enums.cGcEncounterType], Field(c_enum32[enums.cGcEncounterType], 0xA4)
    ]
    OSDOnWaveStartAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xA8),
    ]
    SummonRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    EncounterBlocksWantedSpawns: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB0)]
    EncounterClearsWantedOnDefeat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB1)]
    IgnoreBuildingCrimesOnDefeat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB2)]
    SpawnsAreAggressive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB3)]
    UseCustomOSDIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB4)]
    UseEncounterTypeOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB5)]


@partial_struct
class cGcCombatEffectDamageMultiplier(Structure):
    CombatEffectType: Annotated[
        c_enum32[enums.cGcCombatEffectType],
        Field(c_enum32[enums.cGcCombatEffectType], 0x0),
    ]
    DamageMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]


@partial_struct
class cGcCameraAerialViewDataTableEntry(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CameraAerialViewData: Annotated[
        cGcCameraAerialViewData, Field(cGcCameraAerialViewData, 0x10)
    ]


@partial_struct
class cGcPlayerCommunicatorMessage(Structure):
    Dialog: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    ShipHUDOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]

    class eCommunicatorTypeEnum(IntEnum):
        HoloExplorer = 0x0
        HoloSceptic = 0x1
        HoloNoone = 0x2
        Generic = 0x3
        PlayerFreighterCaptain = 0x4
        Polo = 0x5
        Nada = 0x6
        QuicksilverBot = 0x7
        PlayerSettlementResident = 0x8
        CargoScanDrone = 0x9
        Tethys = 0xA
        FleetExpeditionCaptain = 0xB
        LivingFrigate = 0xC

    CommunicatorType: Annotated[
        c_enum32[eCommunicatorTypeEnum], Field(c_enum32[eCommunicatorTypeEnum], 0x40)
    ]
    HailAudioOverride: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x44),
    ]
    RaceOverride: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x48)
    ]
    ShowHologram: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]


@partial_struct
class cGcPlayerCommunicatorMessageWeighted(Structure):
    Message: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x0)
    ]
    Weight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]


@partial_struct
class cGcExplosionData(Structure):
    AddedLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Model: Annotated[cTkModelResource, Field(cTkModelResource, 0x10)]
    Debris: Annotated[
        basic.cTkDynamicArray[cGcDebrisData],
        Field(basic.cTkDynamicArray[cGcDebrisData], 0x30),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    ShakeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    AddedLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AudioEndEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x64),
    ]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x68),
    ]
    CamShakeCustomMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    ClampToGroundRayDownLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    ClampToGroundRayUpLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    DistanceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    DistanceScaleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    Life: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    LightFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    LightFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    MaxSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    ShakeStrengthModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    AddLight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x98)]
    AllowDestructableDebris: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x99)]
    AllowShootableDebris: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9A)]
    AllowTriggerActionOnDebris: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9B)]
    CamShake: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9C)]
    CamShakeSpaceScale: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9D)]
    ClampToGround: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9E)]
    ClampToGroundContinuously: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9F)]
    UseGroundNormal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA0)]


@partial_struct
class cGcNPCRaceProbabilityModifierData(Structure):
    Modifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x4)
    ]


@partial_struct
class cGcNPCProbabilityReactionData(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RaceModifiers: Annotated[
        basic.cTkDynamicArray[cGcNPCRaceProbabilityModifierData],
        Field(basic.cTkDynamicArray[cGcNPCRaceProbabilityModifierData], 0x10),
    ]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcNPCPropInfo(Structure):
    ScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x0)]
    AttachRotation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x50)]
    AttachTranslation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x60)]
    AttachLocator: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    Model: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)]
    AttachScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    AttachScaleGek: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    DominantHand: Annotated[
        c_enum32[enums.cGcHand], Field(c_enum32[enums.cGcHand], 0x98)
    ]

    class eNPCPropAttachLocationEnum(IntEnum):
        Hand = 0x0
        Wrist = 0x1

    NPCPropAttachLocation: Annotated[
        c_enum32[eNPCPropAttachLocationEnum],
        Field(c_enum32[eNPCPropAttachLocationEnum], 0x9C),
    ]
    ShopType: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0xA0),
    ]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    ScanEffectNodeName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xA8)
    ]
    Hologram: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE8)]


@partial_struct
class cGcNPCReactionEntry(Structure):
    Animations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityReactionData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityReactionData], 0x0),
    ]
    Emote: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ReactionChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcNPCInteractiveObjectStateTransition(Structure):
    ExcludeTags: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    ForceIfMood: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcAlienMood]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcAlienMood]], 0x10),
    ]
    NewState: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RequireEvent: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    RequireLocator: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]

    class eRequireModeEnum(IntEnum):
        Seated = 0x0
        Standing = 0x1
        None_ = 0x2

    RequireMode: Annotated[
        c_enum32[eRequireModeEnum], Field(c_enum32[eRequireModeEnum], 0x54)
    ]


@partial_struct
class cGcNPCSettlementBehaviourBuildingClassCapacityEntry(Structure):
    BuildingClass: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x0),
    ]
    Capacity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]


@partial_struct
class cGcNPCSettlementBehaviourBuildingClassWeightEntry(Structure):
    BuildingClass: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x0),
    ]
    EntryWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    ExitWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]


@partial_struct
class cGcNPCSettlementBehaviourEntry(Structure):
    AreaPropertyWeights: Annotated[
        basic.cTkDynamicArray[cGcNPCSettlementBehaviourAreaPropertyWeightEntry],
        Field(
            basic.cTkDynamicArray[cGcNPCSettlementBehaviourAreaPropertyWeightEntry], 0x0
        ),
    ]
    BuildingClassCapacities: Annotated[
        basic.cTkDynamicArray[cGcNPCSettlementBehaviourBuildingClassCapacityEntry],
        Field(
            basic.cTkDynamicArray[cGcNPCSettlementBehaviourBuildingClassCapacityEntry],
            0x10,
        ),
    ]
    BuildingClassWeights: Annotated[
        basic.cTkDynamicArray[cGcNPCSettlementBehaviourBuildingClassWeightEntry],
        Field(
            basic.cTkDynamicArray[cGcNPCSettlementBehaviourBuildingClassWeightEntry],
            0x20,
        ),
    ]
    ObjectTypeWeights: Annotated[
        basic.cTkDynamicArray[cGcNPCSettlementBehaviourObjectTypeWeightEntry],
        Field(
            basic.cTkDynamicArray[cGcNPCSettlementBehaviourObjectTypeWeightEntry], 0x30
        ),
    ]
    RunWhenOutdoorsProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    OnlyUseIndoorPOIs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44)]


@partial_struct
class cGcNPCProbabilityAnimationData(Structure):
    ExcludeRace: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcAlienRace]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcAlienRace]], 0x0),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Tags: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]

    class eAnimationIntensityEnum(IntEnum):
        Low = 0x0
        Medium = 0x1
        High = 0x2
        None_ = 0x3

    AnimationIntensity: Annotated[
        c_enum32[eAnimationIntensityEnum],
        Field(c_enum32[eAnimationIntensityEnum], 0x30),
    ]
    Probability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]


@partial_struct
class cGcNPCAnimationList(Structure):
    Animations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityAnimationData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityAnimationData], 0x0),
    ]


@partial_struct
class cGcNPCInteractionData(Structure):
    Data: Annotated[cTkAttachmentData, Field(cTkAttachmentData, 0x0)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x38)]


@partial_struct
class cGcBuildingPartSearchType(Structure):
    BaseSearchFilters: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcPersistentBaseTypes]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcPersistentBaseTypes]], 0x0),
    ]

    class eBuildPartSearchTypeEnum(IntEnum):
        Base = 0x0
        Freighter = 0x1
        AllPlayerOwned = 0x2
        OtherPlayerBase = 0x3

    BuildPartSearchType: Annotated[
        c_enum32[eBuildPartSearchTypeEnum],
        Field(c_enum32[eBuildPartSearchTypeEnum], 0x10),
    ]
    IncludeGlobalBaseObjects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    IncludeOnlyOverlappingBases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]


@partial_struct
class cGcNPCAnimationSetData(Structure):
    MoodAnims: Annotated[cGcNPCAnimationList, Field(cGcNPCAnimationList, 0x0)]
    MoodLoops: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    ChatterAnimations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityAnimationData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityAnimationData], 0x140),
    ]
    GreetAnimations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityAnimationData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityAnimationData], 0x150),
    ]
    IdleAnimations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityAnimationData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityAnimationData], 0x160),
    ]
    IdleFlavourAnimations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityAnimationData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityAnimationData], 0x170),
    ]
    ListenAnimations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityAnimationData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityAnimationData], 0x180),
    ]


@partial_struct
class cGcNPCInteractiveObjectState(Structure):
    Animations: Annotated[
        basic.cTkDynamicArray[cGcNPCProbabilityAnimationData],
        Field(basic.cTkDynamicArray[cGcNPCProbabilityAnimationData], 0x0),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Transitions: Annotated[
        basic.cTkDynamicArray[cGcNPCInteractiveObjectStateTransition],
        Field(basic.cTkDynamicArray[cGcNPCInteractiveObjectStateTransition], 0x20),
    ]
    BlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    EarlyOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    MaxAnims: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    MaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    MinAnims: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    MinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    Prop: Annotated[
        c_enum32[enums.cGcNPCPropType], Field(c_enum32[enums.cGcNPCPropType], 0x48)
    ]
    SeatedPosture: Annotated[
        c_enum32[enums.cGcNPCSeatedPosture],
        Field(c_enum32[enums.cGcNPCSeatedPosture], 0x4C),
    ]
    SpineAdjustAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    LookAtNode: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x54)
    ]
    CanConverse: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]
    FaceInvNodeDir: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x95)]
    FaceLookAt: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x96)]
    FaceNodeDir: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x97)]
    FaceSpawnDir: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x98)]
    LookAtModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x99)]
    MaintainLookAt: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9A)]
    PlayIdles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9B)]


@partial_struct
class cGcMissionSequenceWaitForRefuel(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    TargetStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x24)
    ]


@partial_struct
class cGcMissionSequenceWaitForRepair(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    TargetStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x20)
    ]


@partial_struct
class cGcMissionSequenceWaitForShips(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    MessageLowShield: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    Type: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0x34),
    ]


@partial_struct
class cGcMissionSequenceStartScanEvent(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    InSystemRerolls: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    Participant: Annotated[
        c_enum32[enums.cGcPlayerMissionParticipantType],
        Field(c_enum32[enums.cGcPlayerMissionParticipantType], 0x34),
    ]
    Table: Annotated[
        c_enum32[enums.cGcScanEventTableType],
        Field(c_enum32[enums.cGcScanEventTableType], 0x38),
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    AllowOtherPlayersBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    DoAerialScan: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]
    IgnoreIfAlreadyActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x42)]


@partial_struct
class cGcMissionSequenceWaitForFactionStanding(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    SelectFrom: Annotated[cGcFactionSelectOptions, Field(cGcFactionSelectOptions, 0x20)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]


@partial_struct
class cGcMissionSequenceStartScanEventSpecific(Structure):
    Participant: Annotated[
        cGcPlayerMissionParticipant, Field(cGcPlayerMissionParticipant, 0x0)
    ]
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x30)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    AllowOtherPlayersBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]
    IMeantThisAndKnowWhatItDoes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x65)]


@partial_struct
class cGcMissionSequenceStartSummonAnomaly(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Anomaly: Annotated[
        c_enum32[enums.cGcGalaxyStarAnomaly],
        Field(c_enum32[enums.cGcGalaxyStarAnomaly], 0x10),
    ]
    SummonInFrontDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcMissionSequenceTeleport(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    EffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    SequenceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    TeleporterType: Annotated[
        c_enum32[enums.cGcTeleporterType],
        Field(c_enum32[enums.cGcTeleporterType], 0x28),
    ]
    DoCameraShake: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    DoWhiteout: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]


@partial_struct
class cGcMissionSequenceWaitForConditions(Structure):
    ForceAllowMissionRestartEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Conditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x20),
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    ConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x50),
    ]
    StatusMessageMissionMarkup: Annotated[
        c_enum32[enums.cGcStatusMessageMissionMarkup],
        Field(c_enum32[enums.cGcStatusMessageMissionMarkup], 0x54),
    ]
    AllowedToFormatObjectives: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x58)]
    ForceAllowMissionRestart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x59)]


@partial_struct
class cGcMissionSequenceShowMessage(Structure):
    OSDMessageColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    OSDMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    OSDMessageSubtitle: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    StatusMessageDefinition: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    UseConditionsForTextFormatting: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x60),
    ]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x70),
    ]
    Category: Annotated[
        c_enum32[enums.cGcMissionCategory],
        Field(c_enum32[enums.cGcMissionCategory], 0x74),
    ]

    class eOSDMessageStyleEnum(IntEnum):
        Standard = 0x0
        Fancy = 0x1
        Stats = 0x2
        Settlement = 0x3
        Spook = 0x4

    OSDMessageStyle: Annotated[
        c_enum32[eOSDMessageStyleEnum], Field(c_enum32[eOSDMessageStyleEnum], 0x78)
    ]
    OSDTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    DisableIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84)]
    DisableTitlePrefix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x85)]
    OSDUseMissionIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x86)]


@partial_struct
class cGcMissionSequenceModifyStat(Structure):
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    ModifyType: Annotated[
        c_enum32[enums.cGcStatModifyType],
        Field(c_enum32[enums.cGcStatModifyType], 0x14),
    ]


@partial_struct
class cGcMissionSequenceGroup(Structure):
    ColourOverride: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    SurveyTarget: Annotated[
        cGcTargetMissionSurveyOptions, Field(cGcTargetMissionSurveyOptions, 0x10)
    ]
    SeasonalObjectiveOverrides: Annotated[
        cGcSeasonalObjectiveOverrides, Field(cGcSeasonalObjectiveOverrides, 0xB8)
    ]
    ObjectiveFormatting: Annotated[
        cGcObjectiveTextFormatOptions, Field(cGcObjectiveTextFormatOptions, 0x108)
    ]
    ObjectiveID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x150)
    ]
    ObjectiveTipID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x170)
    ]
    PageDataLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x190)
    ]
    PrefixTitleText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1B0)
    ]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1D0)]
    BuildMenuHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1E8)]
    Conditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x1F8),
    ]
    Consequences: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x208),
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x218)
    ]
    FoodTarget: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x228)]
    InventoryHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x238)]
    Stages: Annotated[
        basic.cTkDynamicArray[cGcGenericMissionStage],
        Field(basic.cTkDynamicArray[cGcGenericMissionStage], 0x248),
    ]
    TerrainTarget: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x258)]
    CustomNotifyTimers: Annotated[
        cGcCustomNotifyTimerOptions, Field(cGcCustomNotifyTimerOptions, 0x268)
    ]
    ConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x274),
    ]

    class eGalMapPathOverrideEnum(IntEnum):
        None_ = 0x0
        BlackHole = 0x1
        Atlas = 0x2

    GalMapPathOverride: Annotated[
        c_enum32[eGalMapPathOverrideEnum],
        Field(c_enum32[eGalMapPathOverrideEnum], 0x278),
    ]

    class eIconStyleEnum(IntEnum):
        Default = 0x0
        Large = 0x1
        Square = 0x2
        NoFrame = 0x3

    IconStyle: Annotated[
        c_enum32[eIconStyleEnum], Field(c_enum32[eIconStyleEnum], 0x27C)
    ]
    OverrideCategory: Annotated[
        c_enum32[enums.cGcMissionCategory],
        Field(c_enum32[enums.cGcMissionCategory], 0x280),
    ]
    PageHint: Annotated[
        c_enum32[enums.cGcMissionPageHint],
        Field(c_enum32[enums.cGcMissionPageHint], 0x284),
    ]

    class eRepeatLogicEnum(IntEnum):
        None_ = 0x0
        Loop = 0x1
        RestartOnConditionFail = 0x2

    RepeatLogic: Annotated[
        c_enum32[eRepeatLogicEnum], Field(c_enum32[eRepeatLogicEnum], 0x288)
    ]
    SpecialButtonIcon: Annotated[
        c_enum32[enums.cTkInputEnum], Field(c_enum32[enums.cTkInputEnum], 0x28C)
    ]
    AutoPinRepairs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x290)]
    BlockPinning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x291)]
    BlockSpaceBattles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x292)]
    DoConsequencesIfNeverActivated: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x293)
    ]
    HasCategoryOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x294)]
    HasColourOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x295)]
    HideFromLogIfConditionsMet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x296)]
    PrefixTitle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x297)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x298)]


@partial_struct
class cGcMissionSequenceGatherForRefuel(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    TargetStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x24)
    ]


@partial_struct
class cGcMissionSequenceGatherForRepair(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    GatherResource: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    TargetStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x30)
    ]


@partial_struct
class cGcMissionSequenceDoMissionsForFaction(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x10)]
    SelectFrom: Annotated[cGcFactionSelectOptions, Field(cGcFactionSelectOptions, 0x20)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]


@partial_struct
class cGcMissionSequenceDetailMessage(Structure):
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Image: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    Points: Annotated[
        basic.cTkDynamicArray[cGcMissionSequenceDetailMessagePoint],
        Field(basic.cTkDynamicArray[cGcMissionSequenceDetailMessagePoint], 0x70),
    ]
    TakeImageFromItemIcon: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x90),
    ]
    TakeDataFromSeason: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]


@partial_struct
class cGcMissionSequenceCommunicator(Structure):
    Comms: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x0)
    ]
    OptionalWaitMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)]
    OSDMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x90)
    ]
    VRMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xA0)
    ]
    MinTimeInSpaceBeforeCall: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    FormatDialogIDWithSeasonData: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xB4)
    ]
    AutoOpen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD4)]
    UsePulseEncounterObjectAsAttachment: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xD5)
    ]


@partial_struct
class cGcMissionSequenceCommunicatorOnTakeOff(Structure):
    Comms: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x0)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)]


@partial_struct
class cGcMissionSequenceCollectSubstance(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    ForBuild: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ForRepair: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    Substance: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionSubstanceEnum],
        Field(c_enum32[enums.cGcDefaultMissionSubstanceEnum], 0x58),
    ]
    DefaultValueMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    Purpose: Annotated[
        c_enum32[enums.cGcItemNeedPurpose],
        Field(c_enum32[enums.cGcItemNeedPurpose], 0x60),
    ]
    CanFormatObjectives: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]
    CanSetIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x65)]
    FromNow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x66)]
    SearchCookingIngredients: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x67)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x68)]
    UseDefaultValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x69)]
    WaitForSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6A)]


@partial_struct
class cGcMissionSequenceConstruct(Structure):
    NexusNeedPartsScanEvent: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    NoBaseInSystemScanEvent: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    Type: Annotated[cGcBuildingPartSearchType, Field(cGcBuildingPartSearchType, 0x40)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x58)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x68)]
    MessageInNexusAndNeedParts: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x78)
    ]
    MessageNoBaseInSystem: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x88)
    ]
    MessageNoBaseInSystemAndNoStation: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x98)
    ]
    MessageOutsideBase: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xA8)
    ]
    PotentialPartGroups: Annotated[
        basic.cTkDynamicArray[cGcConstructionPartGroup],
        Field(basic.cTkDynamicArray[cGcConstructionPartGroup], 0xB8),
    ]
    PotentialParts: Annotated[
        basic.cTkDynamicArray[cGcConstructionPart],
        Field(basic.cTkDynamicArray[cGcConstructionPart], 0xC8),
    ]
    NumUniquePartsRequired: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD8)]
    HideCompletedPartsOutOfBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDC)]
    HideOtherPartsWhenBuyingBlueprints: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xDD)
    ]
    OnlyPickFromKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDE)]
    ShuffleParts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDF)]


@partial_struct
class cGcMissionSchedulingData(Structure):
    MissionIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    RecurrenceType: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x10)]
    EarlyEndOffset: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x20)]
    EndDate: Annotated[cGcDate, Field(cGcDate, 0x28)]
    StartDate: Annotated[cGcDate, Field(cGcDate, 0x3C)]
    HasEndDate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    IndependentStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]


@partial_struct
class cGcMissionSequenceBuild(Structure):
    Type: Annotated[cGcBuildingPartSearchType, Field(cGcBuildingPartSearchType, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x18)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x28)]
    Part: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x38)]
    TakePartFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    TeachIfNotKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]


@partial_struct
class cGcMissionSequenceCollectLocalSubstance(Structure):
    UseScanEventToDetermineLocation: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    DefaultValueMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    LocalSubstanceType: Annotated[
        c_enum32[enums.cGcLocalSubstanceType],
        Field(c_enum32[enums.cGcLocalSubstanceType], 0x48),
    ]
    UseSpecificPlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4C)]
    CanFormatObjectives: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x50)]
    CanSetIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x51)]
    FromNow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x52)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x53)]
    UseDefaultValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]
    UseRandomPlanetIndex: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x55)]
    WaitForSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56)]


@partial_struct
class cGcMissionSequenceCollectMoney(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    ForItemID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    CollectCurrency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x34)
    ]
    ForItemQuantity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    ApplyDifficultyScaling: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    DiscountAlreadyAcquiredForItems: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3D)
    ]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3E)]


@partial_struct
class cGcWeeklyRecurrence(Structure):
    RecurrenceDay: Annotated[c_enum32[enums.cGcDay], Field(c_enum32[enums.cGcDay], 0x0)]
    RecurrenceHour: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    RecurrenceMinute: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    DebugText: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0xC)]


@partial_struct
class cGcYearlyRecurrence(Structure):
    RecurrenceDay: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    RecurrenceHour: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    RecurrenceMinute: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    RecurrenceMonth: Annotated[
        c_enum32[enums.cGcMonth], Field(c_enum32[enums.cGcMonth], 0xC)
    ]
    DebugText: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x10)
    ]


@partial_struct
class cGcMissionSequenceCollectProduct(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    ForBuild: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    ForRepair: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)]
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x54)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x58),
    ]
    Purpose: Annotated[
        c_enum32[enums.cGcItemNeedPurpose],
        Field(c_enum32[enums.cGcItemNeedPurpose], 0x5C),
    ]
    CanFormatObjectives: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    CanSetIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]
    DependentOnSeasonMilestone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x62)]
    FromNow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x63)]
    HintAtCraftTree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x64)]
    SearchCookingIngredients: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x65)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x66)]
    TeachIfNotKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x67)]
    UseDefaultValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x68)]
    WaitForSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x69)]


@partial_struct
class cGcMissionSequenceAudioEvent(Structure):
    DebugText: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x10),
    ]
    UseFrontendAudioObject: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcMissionConsequenceAudioEvent(Structure):
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x0),
    ]
    UseFrontendAudioObject: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionWordCategoryKnown(Structure):
    Category: Annotated[
        c_enum32[enums.cGcWordCategoryTableEnum],
        Field(c_enum32[enums.cGcWordCategoryTableEnum], 0x0),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x4)
    ]


@partial_struct
class cGcMissionConditionUsingInteraction(Structure):
    InteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x0),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x4)
    ]
    MustBeSelectedMission: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionSystemRace(Structure):
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x0)
    ]


@partial_struct
class cGcMissionConditionSystemStarClass(Structure):
    Class: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x0),
    ]


@partial_struct
class cGcMissionConditionSeasonRewardRedemptionState(Structure):
    CurrentContext: Annotated[
        c_enum32[enums.cGcSaveContextQuery],
        Field(c_enum32[enums.cGcSaveContextQuery], 0x0),
    ]
    RewardRedempionState: Annotated[
        c_enum32[enums.cGcSeasonEndRewardsRedemptionState],
        Field(c_enum32[enums.cGcSeasonEndRewardsRedemptionState], 0x4),
    ]


@partial_struct
class cGcMissionConditionSettlementStatLevel(Structure):
    NormalisedLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    Stat: Annotated[
        c_enum32[enums.cGcSettlementStatType],
        Field(c_enum32[enums.cGcSettlementStatType], 0x4),
    ]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]


@partial_struct
class cGcMissionConditionPlanetDiscoveries(Structure):
    DiscoveryType: Annotated[
        c_enum32[enums.cGcDiscoveryType], Field(c_enum32[enums.cGcDiscoveryType], 0x0)
    ]
    PercentDiscovered: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    DeepSearchDoneDiscos: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionPlanetHasBuilding(Structure):
    AdditionalBuildings: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]], 0x0),
    ]
    Building: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x10),
    ]


@partial_struct
class cGcMissionConditionNPCHabitationHasWorker(Structure):
    class eWorkerInCurrentBaseEnum(IntEnum):
        DontCare = 0x0
        Yes = 0x1
        No = 0x2

    WorkerInCurrentBase: Annotated[
        c_enum32[eWorkerInCurrentBaseEnum],
        Field(c_enum32[eWorkerInCurrentBaseEnum], 0x0),
    ]
    WorkerType: Annotated[
        c_enum32[enums.cGcNPCHabitationType],
        Field(c_enum32[enums.cGcNPCHabitationType], 0x4),
    ]


@partial_struct
class cGcMissionConditionNearestBuilding(Structure):
    AdditionalBuildings: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]], 0x0),
    ]
    Building: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x10),
    ]
    Distance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    RequireIncompleteInteraction: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x18),
    ]


@partial_struct
class cGcMissionConditionIsTechnologyRepaired(Structure):
    SpecificComponent: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Technology: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    RepairedComponents: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    TechStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x24)
    ]
    CountAsRepairIfTechMissing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcMissionConditionItemCostsEnabled(Structure):
    Purpose: Annotated[
        c_enum32[enums.cGcItemNeedPurpose],
        Field(c_enum32[enums.cGcItemNeedPurpose], 0x0),
    ]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionIsAnomalyLoaded(Structure):
    Anomaly: Annotated[
        c_enum32[enums.cGcGalaxyStarAnomaly],
        Field(c_enum32[enums.cGcGalaxyStarAnomaly], 0x0),
    ]


@partial_struct
class cGcMissionConditionIsFrigateFlybyActive(Structure):
    FrigateFlybyType: Annotated[
        c_enum32[enums.cGcFrigateFlybyType],
        Field(c_enum32[enums.cGcFrigateFlybyType], 0x0),
    ]


@partial_struct
class cGcMissionConditionInteractionIndexChanged(Structure):
    InteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x0),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x4)
    ]


@partial_struct
class cGcMissionConditionHasProcProduct(Structure):
    ProcProduct: Annotated[
        c_enum32[enums.cGcProceduralProductCategory],
        Field(c_enum32[enums.cGcProceduralProductCategory], 0x0),
    ]
    SpecificFossilType: Annotated[
        c_enum32[enums.cGcModularCustomisationResourceType],
        Field(c_enum32[enums.cGcModularCustomisationResourceType], 0x4),
    ]
    ForceSearchFreighterAndChests: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    SearchEveryShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]


@partial_struct
class cGcMissionConditionHasProduct(Structure):
    Product: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    UseAmountToAffordRecipe: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionProductEnum],
        Field(c_enum32[enums.cGcDefaultMissionProductEnum], 0x24),
    ]
    ProductCategory: Annotated[
        c_enum32[enums.cGcProductCategory],
        Field(c_enum32[enums.cGcProductCategory], 0x28),
    ]
    Purpose: Annotated[
        c_enum32[enums.cGcItemNeedPurpose],
        Field(c_enum32[enums.cGcItemNeedPurpose], 0x2C),
    ]
    AllowedToSetInventoryHint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    DependentOnSeasonMilestone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]
    DoNotFormatText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x32)]
    ForceInventoryHintAtAllTimes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x33)]
    ForceSearchFreighterAndChests: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]
    MustBeImmediatelyAccessible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35)]
    SearchCookingIngredients: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x36)]
    SearchEveryShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x37)]
    SearchGrave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]
    SyncWithMissionFireteam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39)]
    TakeAffordRecipeFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3B)]
    TakeIdFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    TeachIfNotKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3D)]
    UseAffordRecipeForTextFormatting: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3E)
    ]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F)]
    UseProductCategory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    UseProductIconAsMissionIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]


@partial_struct
class cGcMissionConditionHasSettlement(Structure):
    SpecificAlienRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x0)
    ]


@partial_struct
class cGcMissionConditionHasSettlementBuilding(Structure):
    BuildingClass: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x0),
    ]
    RequireComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionHasShip(Structure):
    ShipInventoryClass: Annotated[
        c_enum32[enums.cGcInventoryClass], Field(c_enum32[enums.cGcInventoryClass], 0x0)
    ]
    ShipType: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0x4),
    ]
    BetterClassMatches: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    CheckAllShips: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]
    DontCheckType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]
    TakeValueFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB)]


@partial_struct
class cGcMissionConditionHasSubstance(Structure):
    Substance: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Default: Annotated[
        c_enum32[enums.cGcDefaultMissionSubstanceEnum],
        Field(c_enum32[enums.cGcDefaultMissionSubstanceEnum], 0x14),
    ]
    DefaultValueMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Purpose: Annotated[
        c_enum32[enums.cGcItemNeedPurpose],
        Field(c_enum32[enums.cGcItemNeedPurpose], 0x1C),
    ]
    MustBeImmediatelyAccessible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    UseDefaultAmount: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]


@partial_struct
class cGcMissionConditionHasMoney(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    TestCurrency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x4)
    ]
    ApplyDifficultyScaling: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcMissionConditionHasMultiTool(Structure):
    InventoryClass: Annotated[
        c_enum32[enums.cGcInventoryClass], Field(c_enum32[enums.cGcInventoryClass], 0x0)
    ]
    WeaponClass: Annotated[
        c_enum32[enums.cGcWeaponClasses], Field(c_enum32[enums.cGcWeaponClasses], 0x4)
    ]
    BetterClassMatches: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]
    CheckAllTools: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9)]
    MustMatchWeaponClass: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA)]
    TakeValueFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB)]


@partial_struct
class cGcMissionConditionHasFish(Structure):
    TargetFishInfo: Annotated[cGcFishData, Field(cGcFishData, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    QualityTest: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x6C)
    ]
    SizeTest: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x70)
    ]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]


@partial_struct
class cGcMissionConditionHasFossilComponent(Structure):
    SpecificCategory: Annotated[
        c_enum32[enums.cGcFossilCategory], Field(c_enum32[enums.cGcFossilCategory], 0x0)
    ]


@partial_struct
class cGcMissionConditionHasFuel(Structure):
    SpecificTechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    TargetStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x14)
    ]
    FormatTextAsPercentage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcMissionConditionHasIngredientsForItem(Structure):
    TakeTargetItemsFromScanEvent: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    TargetItems: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    ExpectedTargetItemsFromScanEvent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x30)
    ]
    HorribleJustFormatTargetAmount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x34)
    ]
    ScanEventTargetGroup: Annotated[
        c_enum32[enums.cGcMaintenanceElementGroups],
        Field(c_enum32[enums.cGcMaintenanceElementGroups], 0x38),
    ]
    FormatTextOneReqAtATime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    NeverReturnTrueOnlyUseForFormatting: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3D)
    ]
    Repair: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3E)]
    TakeTargetFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F)]


@partial_struct
class cGcMissionConditionHasCorvetteProduct(Structure):
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    PartType: Annotated[
        c_enum32[enums.cGcCorvettePartCategory],
        Field(c_enum32[enums.cGcCorvettePartCategory], 0x4),
    ]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x8)
    ]
    SpecificPartType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcMissionConditionEventRequiresRGB(Structure):
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    StarType: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x20),
    ]
    IgnoreIfPlayerHasAccess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]


@partial_struct
class cGcMissionConditionExpeditionCaptainRace(Structure):
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x0)
    ]


@partial_struct
class cGcMissionConditionGameMode(Structure):
    Mode: Annotated[
        c_enum32[enums.cGcGameMode], Field(c_enum32[enums.cGcGameMode], 0x0)
    ]


@partial_struct
class cGcMissionConditionBuildMenuOpen(Structure):
    SecondaryMode: Annotated[
        c_enum32[enums.cGcBaseBuildingSecondaryMode],
        Field(c_enum32[enums.cGcBaseBuildingSecondaryMode], 0x0),
    ]
    CheckSecondaryMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcMissionConditionBuildMode(Structure):
    Mode: Annotated[
        c_enum32[enums.cGcBaseBuildingMode],
        Field(c_enum32[enums.cGcBaseBuildingMode], 0x0),
    ]


@partial_struct
class cGcMissionConditionBaseQuery(Structure):
    BaseSearchFilter: Annotated[cGcBaseSearchFilter, Field(cGcBaseSearchFilter, 0x0)]
    MaxBasesFound: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC0)]
    MinBasesFound: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC4)]
    SearchDistanceLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    TakeSpecificPartIdFromSeasonData: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xCC)
    ]


@partial_struct
class cGcMissionConditionCorvetteHasTaggedParts(Structure):
    SpecificItem: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]

    class eCorvetteToQueryEnum(IntEnum):
        PrimaryShip = 0x0
        Draft = 0x1

    CorvetteToQuery: Annotated[
        c_enum32[eCorvetteToQueryEnum], Field(c_enum32[eCorvetteToQueryEnum], 0x14)
    ]
    PartType: Annotated[
        c_enum32[enums.cGcCorvettePartCategory],
        Field(c_enum32[enums.cGcCorvettePartCategory], 0x18),
    ]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x1C)
    ]
    AlsoCountPartsInInventory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]
    UseSpecificItemOnlyForText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22)]


@partial_struct
class cGcMissionConditionBasePartsQuery(Structure):
    ExcludeBasesFilter: Annotated[cGcBaseSearchFilter, Field(cGcBaseSearchFilter, 0x0)]
    PartsSearchFilter: Annotated[
        cGcBasePartSearchFilter, Field(cGcBasePartSearchFilter, 0xC0)
    ]
    MaxPartsFound: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x120)]
    MinPartsFound: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x124)]
    SearchDistanceLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128)]
    ExcludeGlobalBuffer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x12C)]


@partial_struct
class cGcMissionConditionAIShipCount(Structure):
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    Test: Annotated[
        c_enum32[enums.cTkEqualityEnum], Field(c_enum32[enums.cTkEqualityEnum], 0x4)
    ]
    Type: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0x8),
    ]


@partial_struct
class cGcMissionConditionBaseClaimed(Structure):
    Base: Annotated[
        c_enum32[enums.cGcPersistentBaseTypes],
        Field(c_enum32[enums.cGcPersistentBaseTypes], 0x0),
    ]

    class eIsOnCurrentSystemEnum(IntEnum):
        DontCare = 0x0
        Yes = 0x1
        No = 0x2

    IsOnCurrentSystem: Annotated[
        c_enum32[eIsOnCurrentSystemEnum], Field(c_enum32[eIsOnCurrentSystemEnum], 0x4)
    ]
    MinParts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    Claimed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]
    MustBeInBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD)]


@partial_struct
class cGcMissionConditionBasePartBuilt(Structure):
    Type: Annotated[cGcBuildingPartSearchType, Field(cGcBuildingPartSearchType, 0x0)]
    PartID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18)]
    Count: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]

    class ePartInCurrentBaseEnum(IntEnum):
        DontCare = 0x0
        YesAllPlayerOwned = 0x1

    PartInCurrentBase: Annotated[
        c_enum32[ePartInCurrentBaseEnum], Field(c_enum32[ePartInCurrentBaseEnum], 0x2C)
    ]
    TakeIDFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcScanEventSave(Structure):
    BuildingLocation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Event: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x10)]
    BuildingSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x30)]
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    GalacticAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x50)]
    MissionSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x58)]
    BuildingClass: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x60),
    ]
    ParticipantType: Annotated[
        c_enum32[enums.cGcPlayerMissionParticipantType],
        Field(c_enum32[enums.cGcPlayerMissionParticipantType], 0x64),
    ]
    Table: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]


@partial_struct
class cGcPhysicsCollisionTable(Structure):
    CollisionTable: Annotated[
        basic.cTkDynamicArray[cGcPhysicsCollisionGroupCollidesWith],
        Field(basic.cTkDynamicArray[cGcPhysicsCollisionGroupCollidesWith], 0x0),
    ]


@partial_struct
class cGcScanEventSolarSystemLookup(Structure):
    SamePlanetAsEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    ExcludePlanetsWithEvents: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x20),
    ]
    NeedsResourceHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    SystemNeedsResourceHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    TradingData: Annotated[cGcPlanetTradingData, Field(cGcPlanetTradingData, 0x50)]
    MinPlanets: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]
    NeedsBiomeType: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x5C)
    ]
    SamePlanetAsSeasonParty: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    StarType: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x64),
    ]
    UseAnomaly: Annotated[
        c_enum32[enums.cGcGalaxyStarAnomaly],
        Field(c_enum32[enums.cGcGalaxyStarAnomaly], 0x68),
    ]
    UseBiomeSubType: Annotated[
        c_enum32[enums.cGcBiomeSubType], Field(c_enum32[enums.cGcBiomeSubType], 0x6C)
    ]
    UseConflict: Annotated[
        c_enum32[enums.cGcPlayerConflictData],
        Field(c_enum32[enums.cGcPlayerConflictData], 0x70),
    ]
    UseRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x74)
    ]
    AllowedToBePurpleWithoutAccess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]
    AllowUnsafeMatches: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x79)]
    AnyBiomeNotWeirdOrDead: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7A)]
    AnyInfestedBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7B)]
    AnyRGBBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7C)]
    NeedsAbandonedSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7D)]
    NeedsBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7E)]
    NeedsCorruptSentinelPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F)]
    NeedsDeepWaterPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x80)]
    NeedsEmptySystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x81)]
    NeedsExtremeHazardPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x82)]
    NeedsExtremeSentinelPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x83)]
    NeedsExtremeWeatherPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84)]
    NeedsPrimePlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x85)]
    NeedsSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x86)]
    NeedsWaterPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x87)]
    NeverAllowAbandoned: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x88)]
    NeverAllowEmpty: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x89)]
    NeverAllowExtremeSentinelPlanet: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x8A)
    ]
    NeverAllowExtremeWeatherPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8B)]
    NeverAllowGasGiantSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8C)]
    RequireUndiscovered: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8D)]
    SuitableForCreatureDiscovery: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8E)]
    SuitableForCreatureTaming: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8F)]
    SuitableForRobotCreatureDiscovery: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x90)
    ]
    SuitableForWeirdCreatureDiscovery: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x91)
    ]
    SystemNeedsCorruptSentinelPlanet: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x92)
    ]
    SystemNeedsExtremeStormPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x93)]
    SystemNeedsGasGiant: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x94)]
    SystemNeedsInfestedPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x95)]
    SystemNeedsWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x96)]
    SystemNeedsWeirdPlanet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x97)]
    UseStarType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x98)]
    UseTrading: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x99)]
    UseWealth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9A)]


@partial_struct
class cGcFreighterDungeonParams(Structure):
    DungeonParams: Annotated[
        cGcDungeonGenerationParams, Field(cGcDungeonGenerationParams, 0x0)
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]


@partial_struct
class cGcFrigateFlybyOption(Structure):
    FrigateClass: Annotated[
        c_enum32[enums.cGcFrigateClass], Field(c_enum32[enums.cGcFrigateClass], 0x0)
    ]
    MaxCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    MinCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x8)]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cGcFrigateFlybyLayout(Structure):
    Frigates: Annotated[
        basic.cTkDynamicArray[cGcFrigateFlybyOption],
        Field(basic.cTkDynamicArray[cGcFrigateFlybyOption], 0x0),
    ]
    FlybyType: Annotated[
        c_enum32[enums.cGcFrigateFlybyType],
        Field(c_enum32[enums.cGcFrigateFlybyType], 0x10),
    ]
    InitialSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    InterestDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    InterestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    TargetSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]


@partial_struct
class cGcMissionFishData(Structure):
    SpecificFish: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Quality: Annotated[
        c_enum32[enums.cGcItemQuality], Field(c_enum32[enums.cGcItemQuality], 0x10)
    ]
    Size: Annotated[
        c_enum32[enums.cGcFishSize], Field(c_enum32[enums.cGcFishSize], 0x14)
    ]
    Time: Annotated[
        c_enum32[enums.cGcFishingTime], Field(c_enum32[enums.cGcFishingTime], 0x18)
    ]
    Biome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C)]
    NeedsStorm: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]


@partial_struct
class cGcPassiveFrigateIncome(Structure):
    IncomeId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AmountOfIncomeRewarded: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    ForEveryXAmountOfTheStat: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    IncomeType: Annotated[
        c_enum32[enums.cGcInventoryType], Field(c_enum32[enums.cGcInventoryType], 0x18)
    ]


@partial_struct
class cGcPassiveFrigateIncomeArray(Structure):
    Array: Annotated[cGcPassiveFrigateIncome, Field(cGcPassiveFrigateIncome, 0x0)]


@partial_struct
class cGcFrigateTraitData(Structure):
    DisplayName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    ChanceOfBeingOffered: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    FrigateStatType: Annotated[
        c_enum32[enums.cGcFrigateStatType],
        Field(c_enum32[enums.cGcFrigateStatType], 0x58),
    ]
    Strength: Annotated[
        c_enum32[enums.cGcFrigateTraitStrength],
        Field(c_enum32[enums.cGcFrigateTraitStrength], 0x5C),
    ]


@partial_struct
class cGcExpeditionEventData(Structure):
    ID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    DamageDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x20)
    ]
    FailureDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x38)
    ]
    GenericFailureDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x50)
    ]
    GenericFailureWhaleDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x68)
    ]
    GenericSuccessDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x80)
    ]
    SecondaryDamageDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x98)
    ]
    SecondaryDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0xB0)
    ]
    SecondaryFailureDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0xC8)
    ]
    SuccessDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0xE0)
    ]
    SuccessWhaleDescriptionList: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0xF8)
    ]
    EasySuccessReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x110)]
    FailureReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x120)]
    SuccessReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x130)]
    WhaleReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x140)]
    StatContribution: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150)]
    AdditionalShipDifficultyIncrease: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x164)
    ]
    DifficultyModifier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x168)]
    DifficultyVarianceModifier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x16C)]


@partial_struct
class cGcExpeditionInterventionEventData(Structure):
    ID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    InteractionID: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0x20)]
    AvoidanceFailureReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x38)]
    AvoidanceSuccessReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    FailureReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    SuccessReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x68)]
    ExpeditionCategory: Annotated[
        c_enum32[enums.cGcExpeditionCategory],
        Field(c_enum32[enums.cGcExpeditionCategory], 0x78),
    ]
    FailureDamageChance: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7C)]
    MissionType: Annotated[
        c_enum32[enums.cGcMissionType], Field(c_enum32[enums.cGcMissionType], 0x80)
    ]
    SelectionWeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x84)]
    AvoidanceFailureLogEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x88)
    ]
    AvoidanceSuccessLogEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA8)
    ]
    FailureLogEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC8)
    ]
    SuccessLogEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE8)
    ]


@partial_struct
class cGcGalaxyWaypoint(Structure):
    EventId: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Address: Annotated[cGcGalacticAddressData, Field(cGcGalacticAddressData, 0x20)]
    RealityIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x34)]
    Type: Annotated[
        c_enum32[enums.cGcGalaxyWaypointTypes],
        Field(c_enum32[enums.cGcGalaxyWaypointTypes], 0x38),
    ]


@partial_struct
class cGcGalaxySolarSystemParams(Structure):
    MoonParameters: Annotated[
        cGcGalaxySolarSystemOrbitParams, Field(cGcGalaxySolarSystemOrbitParams, 0x0)
    ]
    PlanetParameters: Annotated[
        cGcGalaxySolarSystemOrbitParams, Field(cGcGalaxySolarSystemOrbitParams, 0x1C)
    ]
    PlanetRadii: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    DefaultDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    NonVisitedPlanetAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    SystemTilt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    VisitedPlanetAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]


@partial_struct
class cGcGalaxyStarAttributesData(Structure):
    PlanetSeeds: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x0)]
    PlanetParentIndices: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x100)]
    PlanetSizes: Annotated[
        c_enum32[enums.cGcPlanetSize], Field(c_enum32[enums.cGcPlanetSize], 0x140)
    ]
    TradingData: Annotated[cGcPlanetTradingData, Field(cGcPlanetTradingData, 0x180)]
    Anomaly: Annotated[
        c_enum32[enums.cGcGalaxyStarAnomaly],
        Field(c_enum32[enums.cGcGalaxyStarAnomaly], 0x188),
    ]
    ConflictData: Annotated[
        c_enum32[enums.cGcPlayerConflictData],
        Field(c_enum32[enums.cGcPlayerConflictData], 0x18C),
    ]
    NumberOfPlanets: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x190)]
    NumberOfPrimePlanets: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x194)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x198)
    ]
    Type: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x19C),
    ]
    AbandonedSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A0)]
    IsGasGiantSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A1)]
    IsGiantSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A2)]
    IsPirateSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A3)]
    IsSystemSafe: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A4)]


@partial_struct
class cGcGalaxyAudioSetupData(Structure):
    EventAddWaypoint: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x0),
    ]
    EventMapEnter: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x4),
    ]
    EventMapExit: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x8),
    ]
    EventNavmodeChange: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xC),
    ]
    EventNavmodeChangeFailed: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x10),
    ]
    EventNavmodePathMove: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x14),
    ]
    EventPlanetRumble: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x18),
    ]
    EventRemoveWaypoint: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x1C),
    ]
    EventRouteLines: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x20),
    ]
    EventSystemDeselect: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x24),
    ]
    EventSystemSelect: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x28),
    ]
    EventTextAppear: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x2C),
    ]
    EventWaypointError: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x30),
    ]
    EventWaypointLoop: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x34),
    ]
    RTPCStarWhoosh: Annotated[
        c_enum32[enums.cGcAudioWwiseRTPCs],
        Field(c_enum32[enums.cGcAudioWwiseRTPCs], 0x38),
    ]
    WhooshClip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    WhooshMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]


@partial_struct
class cGcSettlementColourUpgradeBuildingOverride(Structure):
    BuildingPalette: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DecorationPalette: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    Building: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x40),
    ]


@partial_struct
class cGcWFCDecorationItem(Structure):
    ApplicableModules: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    Scenes: Annotated[
        basic.cTkDynamicArray[cGcWeightedResource],
        Field(basic.cTkDynamicArray[cGcWeightedResource], 0x30),
    ]
    Back: Annotated[cGcWFCDecorationFace, Field(cGcWFCDecorationFace, 0x40)]
    Down: Annotated[cGcWFCDecorationFace, Field(cGcWFCDecorationFace, 0xC4)]
    Forward: Annotated[cGcWFCDecorationFace, Field(cGcWFCDecorationFace, 0x148)]
    Left: Annotated[cGcWFCDecorationFace, Field(cGcWFCDecorationFace, 0x1CC)]
    Right: Annotated[cGcWFCDecorationFace, Field(cGcWFCDecorationFace, 0x250)]
    Up: Annotated[cGcWFCDecorationFace, Field(cGcWFCDecorationFace, 0x2D4)]

    class eInsideOutsideEnum(IntEnum):
        Both = 0x0
        InteriorOnly = 0x1
        ExteriorOnly = 0x2

    InsideOutside: Annotated[
        c_enum32[eInsideOutsideEnum], Field(c_enum32[eInsideOutsideEnum], 0x358)
    ]

    class eLevelEnum(IntEnum):
        Everywhere = 0x0
        GroundLevelOnly = 0x1
        AboveGroundOnly = 0x2

    Level: Annotated[c_enum32[eLevelEnum], Field(c_enum32[eLevelEnum], 0x35C)]
    MaxPerBuilding: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x360)]
    MinPerBuilding: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x364)]
    NoSceneProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x368)]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x36C)]
    DecorationThemes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x370)]
    Include: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x375)]
    IsRoof: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x376)]
    RequireAboveTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x377)]
    RequireReachable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x378)]
    Rotate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x379)]


@partial_struct
class cGcBuildingColourPalette(Structure):
    Palettes: Annotated[
        basic.cTkDynamicArray[cGcWeightedColourId],
        Field(basic.cTkDynamicArray[cGcWeightedColourId], 0x0),
    ]
    Building: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x10),
    ]


@partial_struct
class cGcBuildingMaterialOverride(Structure):
    Materials: Annotated[
        basic.cTkDynamicArray[cGcWeightedMaterialId],
        Field(basic.cTkDynamicArray[cGcWeightedMaterialId], 0x0),
    ]
    Building: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x10),
    ]


@partial_struct
class cGcSettlementMaterialData(Structure):
    BuildingMaterials: Annotated[
        basic.cTkDynamicArray[cGcBuildingMaterialOverride],
        Field(basic.cTkDynamicArray[cGcBuildingMaterialOverride], 0x0),
    ]
    BuildingPalettes: Annotated[
        basic.cTkDynamicArray[cGcBuildingMaterialOverride],
        Field(basic.cTkDynamicArray[cGcBuildingMaterialOverride], 0x10),
    ]
    DefaultMaterials: Annotated[
        basic.cTkDynamicArray[cGcWeightedMaterialId],
        Field(basic.cTkDynamicArray[cGcWeightedMaterialId], 0x20),
    ]
    DefaultPalettes: Annotated[
        basic.cTkDynamicArray[cGcWeightedMaterialId],
        Field(basic.cTkDynamicArray[cGcWeightedMaterialId], 0x30),
    ]


@partial_struct
class cGcSettlementColourPalette(Structure):
    UpgradeLevel: Annotated[
        cGcSettlementMaterialData, Field(cGcSettlementMaterialData, 0x0)
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x100)]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    Style: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0x114),
    ]


@partial_struct
class cGcSelectableObjectSpawnData(Structure):
    Resource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]


@partial_struct
class cGcSelectableObjectSpawnList(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Objects: Annotated[
        basic.cTkDynamicArray[cGcSelectableObjectSpawnData],
        Field(basic.cTkDynamicArray[cGcSelectableObjectSpawnData], 0x10),
    ]


@partial_struct
class cGcWeatherColourModifiers(Structure):
    HeavyAirColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x0)]
    CloudColour1: Annotated[cGcColourModifier, Field(cGcColourModifier, 0xF0)]
    CloudColour2: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x120)]
    FogColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x150)]
    HeightFogColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x180)]
    HorizonColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x1B0)]
    LightColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x1E0)]
    SkyColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x210)]
    SkyUpperColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x240)]
    SunColour: Annotated[cGcColourModifier, Field(cGcColourModifier, 0x270)]


@partial_struct
class cGcSelectableObjectList(Structure):
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Options: Annotated[
        basic.cTkDynamicArray[cGcSelectableObjectData],
        Field(basic.cTkDynamicArray[cGcSelectableObjectData], 0x10),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x20)
    ]


@partial_struct
class cGcWeatherEffect(Structure):
    OSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    BlockedByCluster: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    EffectData: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x30)]
    Effects: Annotated[
        basic.cTkDynamicArray[cGcWeightedFilename],
        Field(basic.cTkDynamicArray[cGcWeightedFilename], 0x40),
    ]
    ForcedOnByHazard: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    ImpactGift: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    Audio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x80),
    ]
    ChanceOfPlanetBeingExtreme: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    ClusterMaxLifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    ClusterMinLifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    ClusterSpawnChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    FadeoutStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    ImpactGiftChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    MaxHazardsOfThisTypeActive: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9C)]
    MaxLifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    MaxSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    MaxSpawnScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    MinLifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    MinSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    MinSpawnScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    MoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    MultiplySpawnChanceByHazardLevel: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0xBC),
    ]
    PatchMaxRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    PatchMaxSpawns: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC4)]
    PatchMaxTimeSpawnOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    PatchMinRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    PatchMinSpawns: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD0)]
    PatchScaling: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    SpawnAttemptsPerRegion: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD8)]
    SpawnChancePerSecondExtreme: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    SpawnChancePerSecondPerAttempt: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE0)
    ]

    class eSpawnConditionsEnum(IntEnum):
        Anytime = 0x0
        DuringStorm = 0x1
        AtNight = 0x2
        NotInStorm = 0x3
        AtNightNotInStorm = 0x4

    SpawnConditions: Annotated[
        c_enum32[eSpawnConditionsEnum], Field(c_enum32[eSpawnConditionsEnum], 0xE4)
    ]
    WanderMaxArcDeg: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    WanderMaxRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    WanderMinArcDeg: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    WanderMinRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]

    class eWeatherEffectBehaviourEnum(IntEnum):
        Static = 0x0
        Wander = 0x1
        ChasePlayer = 0x2

    WeatherEffectBehaviour: Annotated[
        c_enum32[eWeatherEffectBehaviourEnum],
        Field(c_enum32[eWeatherEffectBehaviourEnum], 0xF8),
    ]

    class eWeatherEffectSpawnTypeEnum(IntEnum):
        Single = 0x0
        Cluster = 0x1
        Patch = 0x2
        ClusterPatch = 0x3

    WeatherEffectSpawnType: Annotated[
        c_enum32[eWeatherEffectSpawnTypeEnum],
        Field(c_enum32[eWeatherEffectSpawnTypeEnum], 0xFC),
    ]
    ExclusivePrimaryHazard: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x100)]
    FadeoutAudio: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x101)]
    FadeoutVisuals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x102)]
    RandomRotationAroundUp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x103)]


@partial_struct
class cGcStormProperties(Structure):
    ColourModifiers: Annotated[
        cGcWeatherColourModifiers, Field(cGcWeatherColourModifiers, 0x0)
    ]
    Fog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x2A0)]
    HazardModifiers: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x470)]
    Weighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4A0)]


@partial_struct
class cGcSubstanceAmount(Structure):
    Specific: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SpecificSecondary: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    Category: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x28),
    ]
    Rarity: Annotated[c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x2C)]


@partial_struct
class cGcPlanetSkyProperties(Structure):
    PlanetExtremeFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x0)]
    PlanetFlightFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x1D0)]
    PlanetFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x3A0)]
    PlanetStormFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x570)]
    PlanetSky: Annotated[cGcSkyProperties, Field(cGcSkyProperties, 0x740)]


@partial_struct
class cGcObjectSpawnData(Structure):
    QualityVariantData: Annotated[
        cGcObjectSpawnDataVariant, Field(cGcObjectSpawnDataVariant, 0x0)
    ]
    Resource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x48)]
    AltResources: Annotated[
        basic.cTkDynamicArray[cGcResourceElement],
        Field(basic.cTkDynamicArray[cGcResourceElement], 0x90),
    ]
    DebugName: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    DestroyedByVehicleEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    ExtraTileTypes: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcTerrainTileType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcTerrainTileType]], 0xC0),
    ]
    Placement: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xD0)]
    QualityVariants: Annotated[
        basic.cTkDynamicArray[cGcObjectSpawnDataVariant],
        Field(basic.cTkDynamicArray[cGcObjectSpawnDataVariant], 0xE0),
    ]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0xF0)]

    class eGroundColourIndexEnum(IntEnum):
        Auto = 0x0
        Main = 0x1
        Patch = 0x2

    GroundColourIndex: Annotated[
        c_enum32[eGroundColourIndexEnum], Field(c_enum32[eGroundColourIndexEnum], 0x100)
    ]

    class eLargeObjectCoverageEnum(IntEnum):
        DoNotPlace = 0x0
        DoNotPlaceIgnoreFootprint = 0x1
        DoNotPlaceClose = 0x2
        DoNotPlaceAnywhereNear = 0x3
        OnlyPlaceAround = 0x4
        OnlyPlaceAroundIgnoreFootprint = 0x5
        AlwaysPlace = 0x6

    LargeObjectCoverage: Annotated[
        c_enum32[eLargeObjectCoverageEnum],
        Field(c_enum32[eLargeObjectCoverageEnum], 0x104),
    ]
    MaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    MaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    MaxLower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    MaxRaise: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    MaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    MaxScaleY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C)]
    MaxXZRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    MaxYRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124)]
    MinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C)]
    MinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    MinScaleY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x134)]
    Order: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x138)]

    class eOverlapStyleEnum(IntEnum):
        None_ = 0x0
        SameSeed = 0x1
        All = 0x2

    OverlapStyle: Annotated[
        c_enum32[eOverlapStyleEnum], Field(c_enum32[eOverlapStyleEnum], 0x13C)
    ]
    PatchEdgeScaling: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]

    class ePlacementPriorityEnum(IntEnum):
        Low = 0x0
        Normal = 0x1
        High = 0x2

    PlacementPriority: Annotated[
        c_enum32[ePlacementPriorityEnum], Field(c_enum32[ePlacementPriorityEnum], 0x144)
    ]
    ShearWindStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    SlopeScaling: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]

    class eTypeEnum(IntEnum):
        Instanced = 0x0
        Single = 0x1

    Type: Annotated[c_enum32[eTypeEnum], Field(c_enum32[eTypeEnum], 0x150)]
    AlignToNormal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x154)]
    AutoCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x155)]
    CollideWithPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x156)]
    CollideWithPlayerVehicle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x157)]
    CreaturesCanEat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x158)]
    DestroyedByPlayerShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x159)]
    DestroyedByPlayerVehicle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15A)]
    DestroyedByTerrainEdit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15B)]
    ImposterActivation: Annotated[
        c_enum32[enums.cTkImposterActivation],
        Field(c_enum32[enums.cTkImposterActivation], 0x15C),
    ]
    ImposterType: Annotated[
        c_enum32[enums.cTkImposterType], Field(c_enum32[enums.cTkImposterType], 0x15D)
    ]
    InvisibleToCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15E)]
    IsFloatingIsland: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15F)]
    MatchGroundColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x160)]
    MoveToGroundOnUpgrade: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x161)]
    RelativeToSeaLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x162)]
    SupportsScanToReveal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x163)]
    SwapPrimaryForRandomColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x164)]
    SwapPrimaryForSecondaryColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x165)]


@partial_struct
class cGcBuildingSpawnData(Structure):
    AABBMax: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    AABBMin: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Resource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x20)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x68)]
    ClusterLayouts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78)]
    FlattenType: Annotated[cTkNoiseFlattenOptions, Field(cTkNoiseFlattenOptions, 0x98)]
    Classification: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0xA0),
    ]
    ClusterLayoutCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA4)]
    ClusterSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    Density: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    InstanceID: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB0)]
    LSystemID: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB4)]
    MaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    MaxXZRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    MinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    WFCBuildingPreset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xCC)]
    WFCModuleSet: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD0)]
    AlignToNormal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD4)]
    AutoCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD5)]
    BuildingSizeCalculated: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD6)]
    GivesShelter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD7)]
    IgnoreParticlesAABB: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD8)]
    LowerIntoGround: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD9)]


@partial_struct
class cGcPetEggTraitModifierOverrideData(Structure):
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SubstanceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    BaseValueOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    Trait: Annotated[
        c_enum32[enums.cGcCreaturePetTraits],
        Field(c_enum32[enums.cGcCreaturePetTraits], 0x24),
    ]
    IncreasesTrait: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcSpawnComponentOption(Structure):
    SpecificModel: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x58)]


@partial_struct
class cGcCreatureIkData(Structure):
    Type: Annotated[
        c_enum32[enums.cGcCreatureIkType], Field(c_enum32[enums.cGcCreatureIkType], 0x0)
    ]
    JointName: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x4)
    ]


@partial_struct
class cGcCreatureRoleDescription(Structure):
    Filter: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    ForceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RequireTag: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    ActiveTime: Annotated[
        c_enum32[enums.cGcCreatureActiveTime],
        Field(c_enum32[enums.cGcCreatureActiveTime], 0x40),
    ]
    Density: Annotated[
        c_enum32[enums.cGcCreatureGenerationDensity],
        Field(c_enum32[enums.cGcCreatureGenerationDensity], 0x44),
    ]
    ForceType: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x48)
    ]
    IncreasedSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    MaxGroupSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]
    MaxSize: Annotated[
        c_enum32[enums.cGcCreatureSizeClasses],
        Field(c_enum32[enums.cGcCreatureSizeClasses], 0x54),
    ]
    MinGroupSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]
    MinSize: Annotated[
        c_enum32[enums.cGcCreatureSizeClasses],
        Field(c_enum32[enums.cGcCreatureSizeClasses], 0x5C),
    ]
    ProbabilityOfBeingEnabled: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    Role: Annotated[
        c_enum32[enums.cGcCreatureRoles], Field(c_enum32[enums.cGcCreatureRoles], 0x64)
    ]


@partial_struct
class cGcCreatureSpawnData(Structure):
    ExtraResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]
    FemaleResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x48)]
    Resource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x90)]
    Filter: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0xD8)]
    CreatureID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xF8)]
    CreatureActiveInDayChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    CreatureActiveInNightChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    CreatureDespawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    CreatureGroupsPerSquareKm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    CreatureMaxGroupSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x118)]
    CreatureMinGroupSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x11C)]
    CreatureRole: Annotated[
        c_enum32[enums.cGcCreatureRoles], Field(c_enum32[enums.cGcCreatureRoles], 0x120)
    ]
    CreatureSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124)]
    CreatureType: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x128)
    ]
    HemiSphere: Annotated[
        c_enum32[enums.cGcCreatureHemiSphere],
        Field(c_enum32[enums.cGcCreatureHemiSphere], 0x12C),
    ]
    MaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    MinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x134)]
    Rarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x138)
    ]
    RoleDataIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x13C)]
    TileType: Annotated[
        c_enum32[enums.cGcTerrainTileType],
        Field(c_enum32[enums.cGcTerrainTileType], 0x140),
    ]
    AllowFur: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x144)]
    Herd: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x145)]
    SwapPrimaryForRandomColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x146)]
    SwapPrimaryForSecondaryColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x147)]


@partial_struct
class cGcCreatureDebugSpawnData(Structure):
    Waypoints: Annotated[
        basic.cTkDynamicArray[cGcCreatureDebugWaypoint],
        Field(basic.cTkDynamicArray[cGcCreatureDebugWaypoint], 0x0),
    ]
    CreatureIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    CurrentWaypoint: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    InitialDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]

    class eOnCompleteEnum(IntEnum):
        Hold = 0x0
        Loop = 0x1
        Destroy = 0x2

    OnComplete: Annotated[
        c_enum32[eOnCompleteEnum], Field(c_enum32[eOnCompleteEnum], 0x1C)
    ]
    SmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    SmoothTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    SpecialCreatureType: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x28)
    ]
    Timer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    ArrivedAtCurrentWaypoint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]
    EcosystemCreature: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x31)]


@partial_struct
class cGcPetFollowUpBehaviour(Structure):
    Behaviour: Annotated[
        c_enum32[enums.cGcPetBehaviours], Field(c_enum32[enums.cGcPetBehaviours], 0x0)
    ]
    Trait: Annotated[
        c_enum32[enums.cGcCreaturePetTraits],
        Field(c_enum32[enums.cGcCreaturePetTraits], 0x4),
    ]
    TraitMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    TraitMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    WeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    WeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    TraitBased: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcPetBehaviourTraitModifier(Structure):
    CooldownModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CooldownModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Trait: Annotated[
        c_enum32[enums.cGcCreaturePetTraits],
        Field(c_enum32[enums.cGcCreaturePetTraits], 0x8),
    ]
    TraitMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    TraitMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    WeightModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    WeightModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcPetBehaviourMoodModifier(Structure):
    CooldownModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    CooldownModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    Mood: Annotated[
        c_enum32[enums.cGcCreaturePetMood],
        Field(c_enum32[enums.cGcCreaturePetMood], 0x8),
    ]
    MoodMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    MoodMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    WeightModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    WeightModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcPetBehaviourData(Structure):
    LabelText: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    FollowUpBehaviours: Annotated[
        basic.cTkDynamicArray[cGcPetFollowUpBehaviour],
        Field(basic.cTkDynamicArray[cGcPetFollowUpBehaviour], 0x20),
    ]
    MoodBehaviourModifiers: Annotated[
        basic.cTkDynamicArray[cGcPetBehaviourMoodModifier],
        Field(basic.cTkDynamicArray[cGcPetBehaviourMoodModifier], 0x30),
    ]
    TraitBehaviourModifiers: Annotated[
        basic.cTkDynamicArray[cGcPetBehaviourTraitModifier],
        Field(basic.cTkDynamicArray[cGcPetBehaviourTraitModifier], 0x40),
    ]
    MoodModifyOnComplete: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    ApproachPlayerDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    ChatChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    CooldownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    MaxPerformTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    MinPerformTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]

    class ePetBehaviourValidityEnum(IntEnum):
        Everywhere = 0x0
        OnPlanet = 0x1

    PetBehaviourValidity: Annotated[
        c_enum32[ePetBehaviourValidityEnum],
        Field(c_enum32[ePetBehaviourValidityEnum], 0x6C),
    ]
    SearchDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    Weight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    ReactiveBehaviour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]
    UsefulBehaviour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x79)]


@partial_struct
class cGcPetTraitStaminaModifier(Structure):
    StaminaDrainModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    StaminaDrainModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    StaminaRechargeModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    StaminaRechargeModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    Trait: Annotated[
        c_enum32[enums.cGcCreaturePetTraits],
        Field(c_enum32[enums.cGcCreaturePetTraits], 0x10),
    ]
    TraitMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    TraitMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcPetMoodStaminaModifier(Structure):
    Mood: Annotated[
        c_enum32[enums.cGcCreaturePetMood],
        Field(c_enum32[enums.cGcCreaturePetMood], 0x0),
    ]
    MoodMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    MoodMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    StaminaDrainModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]
    StaminaDrainModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    StaminaRechargeModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    StaminaRechargeModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcCreatureStupidNameTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcCreatureStupidName],
        Field(basic.cTkDynamicArray[cGcCreatureStupidName], 0x0),
    ]
    StupidUserName: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x10)
    ]


@partial_struct
class cGcCreatureTagAndRarity(Structure):
    Tag: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    RarityOverride: Annotated[
        c_enum32[enums.cGcCreatureRarity],
        Field(c_enum32[enums.cGcCreatureRarity], 0x10),
    ]


@partial_struct
class cGcCreatureInfo(Structure):
    BiomeDesc: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    DietDesc: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    NotesDesc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    TempermentDesc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]

    class eAgeEnum(IntEnum):
        Regular = 0x0
        Weird = 0x1

    Age: Annotated[c_enum32[eAgeEnum], Field(c_enum32[eAgeEnum], 0x80)]
    Height1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    Height2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    Rarity: Annotated[c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x8C)]
    Weight1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    Weight2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    Diet: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x98)]
    Gender1: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x118)]
    Gender2: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x198)]
    Height1_cTkFixedString0x80: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x218)
    ]
    Height2_cTkFixedString0x80: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x298)
    ]
    Notes: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x318)]
    Temperament: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x398)
    ]
    Weight1_cTkFixedString0x80: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x418)
    ]
    Weight2_cTkFixedString0x80: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x498)
    ]


@partial_struct
class cGcCreatureData(Structure):
    Data: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x0),
    ]
    EggType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    KillingBlowMessageID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    KillStatID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Tags: Annotated[
        basic.cTkDynamicArray[cGcCreatureTagAndRarity],
        Field(basic.cTkDynamicArray[cGcCreatureTagAndRarity], 0x50),
    ]
    ForceType: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x60)
    ]
    FurChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    FurLengthModifierAtMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    FurLengthModifierAtMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    HerbivoreProbabilityModifier: Annotated[
        c_enum32[enums.cGcCreatureRoleFrequencyModifier],
        Field(c_enum32[enums.cGcCreatureRoleFrequencyModifier], 0x70),
    ]
    MaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    MinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]

    class eMoveAreaEnum(IntEnum):
        Ground = 0x0
        Water = 0x1
        Air = 0x2
        Space = 0x3

    MoveArea: Annotated[c_enum32[eMoveAreaEnum], Field(c_enum32[eMoveAreaEnum], 0x7C)]
    PredatorProbabilityModifier: Annotated[
        c_enum32[enums.cGcCreatureRoleFrequencyModifier],
        Field(c_enum32[enums.cGcCreatureRoleFrequencyModifier], 0x80),
    ]
    Rarity: Annotated[
        c_enum32[enums.cGcCreatureRarity],
        Field(c_enum32[enums.cGcCreatureRarity], 0x84),
    ]
    RealType: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x88)
    ]
    CanBeFemale: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8C)]
    EcoSystemCreature: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8D)]
    OnlySpawnWhenIdIsForced: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8E)]


@partial_struct
class cGcCreaturePetEggData(Structure):
    EggResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]
    HatchResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x48)]
    IconResource: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x90)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA8)]
    HatchOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    HatchScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]


@partial_struct
class cGcCreatureSpookFiendAttackData(Structure):
    SpitAttackAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FollowDistanceOscillationRange: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x10)
    ]
    FollowHeightOscillationRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x18)]
    FollowSpeedOscillationRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x20)]
    HideDuration: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x28)]
    KamikazeCooldown: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x30)]
    KamikazePickWeightRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x38)]
    KamikazeThreatLevelRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x40)]
    NullAttackCooldown: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x48)]
    PostAttackMinVisibleDuration: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x50)]
    RevealDuration: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x58)]
    SpitAttackCooldown: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x60)]
    SpitPickWeightRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x68)]
    SpitThreatLevelRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x70)]
    ThreatLevelHealthScale: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x78)]
    ThreatLevelTimeAliveScale: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x80)]
    ApproachDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    FadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    FollowDistanceOscillationPeriod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x90)
    ]
    FollowHeightOscillationPeriod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x94)
    ]
    FollowSpeedOscillationPeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    KamikazeAudioEventBegin: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x9C),
    ]
    KamikazeAudioEventEnd: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xA0),
    ]
    MaxSimultaneousKamikaze: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA4)]
    NullAttackWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    ReapproachDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    SpitAttackAnimFrame: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB0)]
    SpitAttackPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    ThreatLevelHealthWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    ThreatLevelSpookWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    ThreatLevelTimeAliveWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]


@partial_struct
class cGcCreatureCrystalMovementDataParams(Structure):
    DustEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ValidBiomes: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBiomeSubType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBiomeSubType]], 0x10),
    ]
    ValidDescriptors: Annotated[
        basic.cTkDynamicArray[basic.TkID0x20],
        Field(basic.cTkDynamicArray[basic.TkID0x20], 0x20),
    ]
    AppearOvershoot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Audio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x34),
    ]
    CreationAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x38),
    ]
    DeathFadeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    DeathFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]

    class eDeathTypeEnum(IntEnum):
        Explode = 0x0
        Drop = 0x1

    DeathType: Annotated[
        c_enum32[eDeathTypeEnum], Field(c_enum32[eDeathTypeEnum], 0x44)
    ]
    DespawnDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]
    HideOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4C)]
    IdleSpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    MaxAppearTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    MaxDisappearTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    MaxOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    MaxOffsetZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    MaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    MaxTilt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    MinAppearTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    MinDisappearTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    MinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    MinShowTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    MoveStartAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x7C),
    ]
    MoveStopAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x80),
    ]
    NumShards: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x84)]
    OffsetTilt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    ParticleScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    RetractAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x90),
    ]
    RunSpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    ShowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    SpawnDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9C)]

    class eSubTypeEnum(IntEnum):
        Crystal = 0x0
        Tentacle = 0x1

    SubType: Annotated[c_enum32[eSubTypeEnum], Field(c_enum32[eSubTypeEnum], 0xA0)]
    TentacleChurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    TentacleIdleLookChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    TentacleMoveSwingAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    TentacleMoveTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    TentacleMoveTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    TentaclePitchRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    TentacleRollRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    TentacleRotationApplyBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    TentacleRotationApplyTip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    TentacleRunSwingSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    TentacleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    TentacleStretchMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    TentacleStretchMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    TentacleWalkSwingSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    TentacleYawRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    WalkSpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    TentacleEndJoint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE4)
    ]
    TentacleStartJoint: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x104)
    ]
    CustomHideCurve: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x124)]
    HideCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x125)
    ]
    ScaleOnAppear: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x126)]
    UseTerrainAngle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x127)]


@partial_struct
class cGcCreatureCrystalMovementData(Structure):
    Params: Annotated[
        basic.cTkDynamicArray[cGcCreatureCrystalMovementDataParams],
        Field(basic.cTkDynamicArray[cGcCreatureCrystalMovementDataParams], 0x0),
    ]


@partial_struct
class cGcCustomisationDescriptorGroupOption(Structure):
    BoneScales: Annotated[
        basic.cTkDynamicArray[cGcCustomisationBoneScales],
        Field(basic.cTkDynamicArray[cGcCustomisationBoneScales], 0x0),
    ]
    ColourGroups: Annotated[
        basic.cTkDynamicArray[cGcCustomisationColourGroup],
        Field(basic.cTkDynamicArray[cGcCustomisationColourGroup], 0x10),
    ]
    DescriptorOption: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    HideIfGroupActive: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    SelectingAddsGroup: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x40),
    ]
    SelectingRemovesGroup: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x50),
    ]
    TextureGroups: Annotated[
        basic.cTkDynamicArray[cGcCustomisationTextureGroup],
        Field(basic.cTkDynamicArray[cGcCustomisationTextureGroup], 0x60),
    ]
    UnselectingAddsGroup: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x70),
    ]
    UnselectingRemovesGroup: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x80),
    ]
    InteractionCameraIndexOverride: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x90)
    ]
    InteracttionCameraFocusJointOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x94)
    ]
    ForceDisableDoF: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB4)]
    ReplaceBaseBoneScales: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB5)]
    ReplaceBaseColours: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB6)]


@partial_struct
class cGcParticleAction(Structure):
    Effect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    FindRange: Annotated[
        c_enum32[enums.cGcBroadcastLevel],
        Field(c_enum32[enums.cGcBroadcastLevel], 0x10),
    ]
    Joint: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x14)]
    Exact: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]


@partial_struct
class cGcDisplayText(Structure):
    ChooseRandomTextOptions: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x0),
    ]

    class eHUDTextDisplayTypeEnum(IntEnum):
        Full = 0x0
        Compact = 0x1
        EyeLevel = 0x2
        Prompt = 0x3
        Tooltip = 0x4

    HUDTextDisplayType: Annotated[
        c_enum32[eHUDTextDisplayTypeEnum],
        Field(c_enum32[eHUDTextDisplayTypeEnum], 0x10),
    ]
    UseAlienLanguage: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x14)
    ]
    Subtitle1: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x18)
    ]
    Subtitle2: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x118)
    ]
    Title: Annotated[basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x218)]


@partial_struct
class cGcFiendCrimeAction(Structure):
    FiendCrimeModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x0)]
    FiendCrimeType: Annotated[
        c_enum32[enums.cGcFiendCrime], Field(c_enum32[enums.cGcFiendCrime], 0x4)
    ]


@partial_struct
class cGcGoToStateAction(Structure):
    State: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    BroadcastLevel: Annotated[
        c_enum32[enums.cGcBroadcastLevel],
        Field(c_enum32[enums.cGcBroadcastLevel], 0x10),
    ]
    Broadcast: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcBaseDefenceStatusAction(Structure):
    TryState: Annotated[
        c_enum32[enums.cGcBaseDefenceStatusType],
        Field(c_enum32[enums.cGcBaseDefenceStatusType], 0x0),
    ]


@partial_struct
class cGcPlayerControlInputAxis(Structure):
    Output: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OutputLength: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    InputX: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x20)
    ]
    InputY: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x24)
    ]
    OutputSpace: Annotated[
        c_enum32[enums.cGcCharacterControlOutputSpace],
        Field(c_enum32[enums.cGcCharacterControlOutputSpace], 0x28),
    ]
    Validity: Annotated[
        c_enum32[enums.cGcCharacterControlInputValidity],
        Field(c_enum32[enums.cGcCharacterControlInputValidity], 0x2C),
    ]


@partial_struct
class cGcPlayerControlInputMouse(Structure):
    Output: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OutputLength: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]

    class eInputMouseModeEnum(IntEnum):
        ScreenCentrePos = 0x0

    InputMouseMode: Annotated[
        c_enum32[eInputMouseModeEnum], Field(c_enum32[eInputMouseModeEnum], 0x20)
    ]
    OutputSpace: Annotated[
        c_enum32[enums.cGcCharacterControlOutputSpace],
        Field(c_enum32[enums.cGcCharacterControlOutputSpace], 0x24),
    ]
    Validity: Annotated[
        c_enum32[enums.cGcCharacterControlInputValidity],
        Field(c_enum32[enums.cGcCharacterControlInputValidity], 0x28),
    ]


@partial_struct
class cGcPlayerControlInputRemap(Structure):
    Action: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x0)
    ]
    CanBeTriggeredBy: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x4)
    ]

    class eInputRemapModeEnum(IntEnum):
        ReplaceOriginalBinding = 0x0
        AdditionalBinding = 0x1

    InputRemapMode: Annotated[
        c_enum32[eInputRemapModeEnum], Field(c_enum32[eInputRemapModeEnum], 0x8)
    ]
    Validity: Annotated[
        c_enum32[enums.cGcCharacterControlInputValidity],
        Field(c_enum32[enums.cGcCharacterControlInputValidity], 0xC),
    ]


@partial_struct
class cGcRewardTableItemList(Structure):
    IncrementStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    List: Annotated[
        basic.cTkDynamicArray[cGcRewardTableItem],
        Field(basic.cTkDynamicArray[cGcRewardTableItem], 0x10),
    ]

    class eRewardChoiceEnum(IntEnum):
        GiveAll = 0x0
        Select = 0x1
        SelectAlways = 0x2
        TryEach = 0x3
        TryEachSilent = 0x4
        SelectSilent = 0x5
        GiveAllSilent = 0x6
        TryFirst_ThenSelectAlways = 0x7
        GiveFirst_ThenAlsoSelectAlwaysFromRest = 0x8
        SelectFromSuccess = 0x9
        SelectAlwaysSilent = 0xA
        SelectFromSuccessSilent = 0xB

    RewardChoice: Annotated[
        c_enum32[eRewardChoiceEnum], Field(c_enum32[eRewardChoiceEnum], 0x20)
    ]
    OverrideZeroSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24)]
    UseInventoryChoiceOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x25)]


@partial_struct
class cGcItemFilterStageDataIsType(Structure):
    DisabledMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Type: Annotated[
        c_enum32[enums.cGcInventoryType], Field(c_enum32[enums.cGcInventoryType], 0x20)
    ]


@partial_struct
class cGcUnlockableTreeCostType(Structure):
    CantAffordString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CostTypeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    TypeID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    CurrencyType: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x40)
    ]

    class eTypeOfCostEnum(IntEnum):
        Currency = 0x0
        Substance = 0x1
        Product = 0x2

    TypeOfCost: Annotated[
        c_enum32[eTypeOfCostEnum], Field(c_enum32[eTypeOfCostEnum], 0x44)
    ]


@partial_struct
class cGcItemFilterStageDataProductCategory(Structure):
    DisabledMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Category: Annotated[
        c_enum32[enums.cGcProductCategory],
        Field(c_enum32[enums.cGcProductCategory], 0x20),
    ]


@partial_struct
class cGcUnlockableItemTrees(Structure):
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Trees: Annotated[
        basic.cTkDynamicArray[cGcUnlockableItemTree],
        Field(basic.cTkDynamicArray[cGcUnlockableItemTree], 0x20),
    ]


@partial_struct
class cGcTechnologyRequirement(Structure):
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Type: Annotated[
        c_enum32[enums.cGcInventoryType], Field(c_enum32[enums.cGcInventoryType], 0x14)
    ]


@partial_struct
class cGcTechnology(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    LinkColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    UpgradeColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    FocusLocator: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x30)]
    Group: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)]
    HintEnd: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x70)]
    HintStart: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x90)
    ]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0xB0)]
    AmmoId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC8)]
    ChargeBy: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xD8),
    ]
    DamagedDescription: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE8)
    ]
    Description: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xF8)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x108)]
    ParentTechId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x118)]
    RequiredTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x128)]
    Requirements: Annotated[
        basic.cTkDynamicArray[cGcTechnologyRequirement],
        Field(basic.cTkDynamicArray[cGcTechnologyRequirement], 0x138),
    ]
    RewardGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x148)]
    StatBonuses: Annotated[
        basic.cTkDynamicArray[cGcStatsBonus],
        Field(basic.cTkDynamicArray[cGcStatsBonus], 0x158),
    ]
    Subtitle: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x168)
    ]
    Cost: Annotated[cGcItemPriceModifiers, Field(cGcItemPriceModifiers, 0x178)]
    BaseStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x18C)
    ]
    BaseValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x190)]
    Category: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0x194),
    ]
    ChargeAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x198)]
    ChargeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C)]
    ChargeType: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x1A0),
    ]
    DispensingRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x1A4)
    ]
    FragmentCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A8)]
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1AC)]
    Rarity: Annotated[
        c_enum32[enums.cGcTechnologyRarity],
        Field(c_enum32[enums.cGcTechnologyRarity], 0x1B0),
    ]
    RequiredLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B4)]
    RequiredRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B8)]
    TechShopRarity: Annotated[
        c_enum32[enums.cGcTechnologyRarity],
        Field(c_enum32[enums.cGcTechnologyRarity], 0x1BC),
    ]
    Value: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C0)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1C4)]
    NameLower: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x244)
    ]
    BrokenSlotTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C4)]
    BuildFullyCharged: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C5)]
    Chargeable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C6)]
    Core: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C7)]
    ExclusivePrimaryStat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C8)]
    IsTemplate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C9)]
    NeverPinnable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2CA)]
    PrimaryItem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2CB)]
    Procedural: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2CC)]
    RepairTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2CD)]
    Teach: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2CE)]
    Upgrade: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2CF)]
    UsesAmmo: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D0)]
    WikiEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D1)]


@partial_struct
class cGcStoryUtilityOverride(Structure):
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    Reward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    SpecificRewardOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcRewardMissionOverride],
        Field(basic.cTkDynamicArray[cGcRewardMissionOverride], 0x30),
    ]


@partial_struct
class cGcSettlementPerkUsefulData(Structure):
    BaseID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SeedValue: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]
    ChangeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    Stat: Annotated[
        c_enum32[enums.cGcSettlementStatType],
        Field(c_enum32[enums.cGcSettlementStatType], 0x1C),
    ]
    IsNegative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]
    IsProc: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21)]


@partial_struct
class cGcSettlementStatChange(Structure):
    Stat: Annotated[
        c_enum32[enums.cGcSettlementStatType],
        Field(c_enum32[enums.cGcSettlementStatType], 0x0),
    ]
    Strength: Annotated[
        c_enum32[enums.cGcSettlementStatStrength],
        Field(c_enum32[enums.cGcSettlementStatStrength], 0x4),
    ]
    DirectlyChangePopulation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcSettlementJudgementOption(Structure):
    OptionText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    AdditionalRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    AltOptionText: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x30),
    ]
    ChainedJudgementID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Perks: Annotated[
        basic.cTkDynamicArray[cGcSettlementJudgementPerkOption],
        Field(basic.cTkDynamicArray[cGcSettlementJudgementPerkOption], 0x50),
    ]
    StatChanges: Annotated[
        basic.cTkDynamicArray[cGcSettlementStatChange],
        Field(basic.cTkDynamicArray[cGcSettlementStatChange], 0x60),
    ]

    class eJudgementOptionStandingEnum(IntEnum):
        None_ = 0x0
        Positive = 0x1
        Negative = 0x2

    JudgementOptionStanding: Annotated[
        c_enum32[eJudgementOptionStandingEnum],
        Field(c_enum32[eJudgementOptionStandingEnum], 0x70),
    ]
    HidePerkInJudgement: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]
    OptionIsPositiveForNPC: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x75)]
    UseGiftReward: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x76)]
    UsePolicyPerk: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x77)]
    UsePolicyStat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x78)]
    UseTechPerk: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x79)]


@partial_struct
class cGcSettlementJudgementData(Structure):
    DilemmaText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    HeaderOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    NPC1CustomName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    NPC2CustomName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    NPCTitle: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)]
    QuestionText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA0)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC0)]
    NPC1CustomId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE0)]
    NPC1HoloEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xF0)]
    NPC2CustomId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x100)]
    NPC2HoloEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x110)]
    Option1List: Annotated[
        basic.cTkDynamicArray[cGcSettlementJudgementOption],
        Field(basic.cTkDynamicArray[cGcSettlementJudgementOption], 0x120),
    ]
    Option2List: Annotated[
        basic.cTkDynamicArray[cGcSettlementJudgementOption],
        Field(basic.cTkDynamicArray[cGcSettlementJudgementOption], 0x130),
    ]
    Option3List: Annotated[
        basic.cTkDynamicArray[cGcSettlementJudgementOption],
        Field(basic.cTkDynamicArray[cGcSettlementJudgementOption], 0x140),
    ]
    Option4List: Annotated[
        basic.cTkDynamicArray[cGcSettlementJudgementOption],
        Field(basic.cTkDynamicArray[cGcSettlementJudgementOption], 0x150),
    ]
    JudgementType: Annotated[
        c_enum32[enums.cGcSettlementJudgementType],
        Field(c_enum32[enums.cGcSettlementJudgementType], 0x160),
    ]

    class eNPCsEnum(IntEnum):
        None_ = 0x0
        One = 0x1
        Two = 0x2
        ExistingPerkJob = 0x3

    NPCs: Annotated[c_enum32[eNPCsEnum], Field(c_enum32[eNPCsEnum], 0x164)]
    Weighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168)]
    DilemmaTextIsAlien: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16C)]
    UseAltResearchLoc: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16D)]
    UseResearchLoc: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16E)]


@partial_struct
class cGcSettlementCustomJudgement(Structure):
    Data: Annotated[cGcSettlementJudgementData, Field(cGcSettlementJudgementData, 0x0)]
    CustomCostText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x170)
    ]
    CustomMissionObjectiveText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x190)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1B0)]


@partial_struct
class cGcRewardUpgradeBase(Structure):
    MatchingBaseTypes: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcPersistentBaseTypes]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcPersistentBaseTypes]], 0x0),
    ]

    class eUpgradeBaseTypeEnum(IntEnum):
        AllMatching = 0x0
        NearestMatching = 0x1

    UpgradeBaseType: Annotated[
        c_enum32[eUpgradeBaseTypeEnum], Field(c_enum32[eUpgradeBaseTypeEnum], 0x10)
    ]


@partial_struct
class cGcSettlementJobGiftDetails(Structure):
    GiftItemLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    PotentialGiftItems: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    GiftAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    ProcProductType: Annotated[
        c_enum32[enums.cGcProceduralProductCategory],
        Field(c_enum32[enums.cGcProceduralProductCategory], 0x34),
    ]
    GiveProcProduct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]
    GiveStanding: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39)]
    GiveWords: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A)]


@partial_struct
class cGcSettlementJobDetails(Structure):
    Gifts: Annotated[
        cGcSettlementJobGiftDetails, Field(cGcSettlementJobGiftDetails, 0x0)
    ]
    InTextTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    PerkTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    Stat: Annotated[
        c_enum32[enums.cGcSettlementStatType],
        Field(c_enum32[enums.cGcSettlementStatType], 0x80),
    ]


@partial_struct
class cGcRewardUpgradeShipClass(Structure):
    ForceToSpecificClass: Annotated[
        c_enum32[enums.cGcInventoryClass], Field(c_enum32[enums.cGcInventoryClass], 0x0)
    ]
    MatchClassToCommunityTier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5)]
    SilentlyMoveOnAtMaxClass: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x6)]


@partial_struct
class cGcRewardWorker(Structure):
    NPCHabitationType: Annotated[
        c_enum32[enums.cGcNPCHabitationType],
        Field(c_enum32[enums.cGcNPCHabitationType], 0x0),
    ]


@partial_struct
class cGcSettlementBuildingCostData(Structure):
    Products: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Substances: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x10),
    ]
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    Currency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x28)
    ]


@partial_struct
class cGcSettlementBuildingCost(Structure):
    StageCosts: Annotated[
        cGcSettlementBuildingCostData, Field(cGcSettlementBuildingCostData, 0x0)
    ]


@partial_struct
class cGcRewardSpecificWeapon(Structure):
    WeaponInventory: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x0)]
    NameOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x160)
    ]
    WeaponResource: Annotated[cGcExactResource, Field(cGcExactResource, 0x180)]
    WeaponLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x1A0)]
    InventorySizeOverride: Annotated[
        c_enum32[enums.cGcInventoryLayoutSizeType],
        Field(c_enum32[enums.cGcInventoryLayoutSizeType], 0x1B8),
    ]
    WeaponType: Annotated[
        c_enum32[enums.cGcWeaponClasses], Field(c_enum32[enums.cGcWeaponClasses], 0x1BC)
    ]
    FormatAsSeasonal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C0)]
    IsGift: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C1)]
    IsRewardWeapon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C2)]


@partial_struct
class cGcRewardStanding(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x8)
    ]
    UseExpeditionEventSystemRace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcRewardStatDiff(Structure):
    CompareAndSetStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    CoreStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    SubstanceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    AmountPerStat: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x30)]
    RewardCurrency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x34)
    ]
    StatRewardCap: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    OKToGiveZero: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]


@partial_struct
class cGcRewardTeachSpecificWords(Structure):
    CustomOSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    SpecificWordGroups: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x20),
    ]
    OSDMessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x34)
    ]
    SuppressOSDMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]


@partial_struct
class cGcRewardSubstance(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    ItemCatagory: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x8),
    ]
    ItemLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    ItemRarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x10)
    ]
    DisableMultiplier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]
    RewardAsBlobs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]
    UseFuelMultiplier: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16)]


@partial_struct
class cGcRewardTeachWord(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Category: Annotated[
        c_enum32[enums.cGcWordCategoryTableEnum],
        Field(c_enum32[enums.cGcWordCategoryTableEnum], 0x8),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0xC)
    ]
    UseCategory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardTableCategory(Structure):
    Sizes: Annotated[cGcRewardTableItemList, Field(cGcRewardTableItemList, 0x0)]


@partial_struct
class cGcRewardTableEntry(Structure):
    Rarities: Annotated[cGcRewardTableCategory, Field(cGcRewardTableCategory, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x168)]


@partial_struct
class cGcRewardSpecificShip(Structure):
    ShipInventory: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x0)]
    Customisation: Annotated[
        cGcCharacterCustomisationData, Field(cGcCharacterCustomisationData, 0x160)
    ]
    ShipResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x1B8)]
    NameOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x200)
    ]
    ShipLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x220)]
    CostAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x238)]
    CostCurrency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x23C)
    ]
    ModelViewOverride: Annotated[
        c_enum32[enums.cGcModelViews], Field(c_enum32[enums.cGcModelViews], 0x240)
    ]
    OverrideSizeType: Annotated[
        c_enum32[enums.cGcInventoryLayoutSizeType],
        Field(c_enum32[enums.cGcInventoryLayoutSizeType], 0x244),
    ]
    ShipType: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0x248),
    ]
    FormatAsSeasonal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24C)]
    IsGift: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24D)]
    IsRewardShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24E)]
    UseOverrideSizeType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x24F)]


@partial_struct
class cGcRewardSpecificFrigate(Structure):
    NameOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    PrimaryTrait: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    FrigateSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x30)]
    SystemSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x38)]
    AlienRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x40)
    ]
    FrigateClass: Annotated[
        c_enum32[enums.cGcFrigateClass], Field(c_enum32[enums.cGcFrigateClass], 0x44)
    ]
    FormatAsSeasonal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    IgnoreAndMoveOnIfCannotRecruit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]
    IsGift: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A)]
    IsRewardFrigate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B)]
    UseSeedFromCommunicator: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]


@partial_struct
class cGcRewardSpecificPetEgg(Structure):
    EggData: Annotated[cGcPetData, Field(cGcPetData, 0x0)]
    ImmediatelyHatchable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x208)]


@partial_struct
class cGcRewardSettlementStat(Structure):
    StatToAward: Annotated[cGcSettlementStatChange, Field(cGcSettlementStatChange, 0x0)]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcRewardSettlementJudgement(Structure):
    JudgementTypes: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcSettlementJudgementType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcSettlementJudgementType]], 0x0),
    ]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardProceduralProduct(Structure):
    OSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    FreighterTechQualityOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    Rarity: Annotated[c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x24)]
    Type: Annotated[
        c_enum32[enums.cGcProceduralProductCategory],
        Field(c_enum32[enums.cGcProceduralProductCategory], 0x28),
    ]
    OverrideRarity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]
    SubIfPlayerAlreadyHasOne: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2D)]


@partial_struct
class cGcRewardProceduralTechnology(Structure):
    Type: Annotated[
        c_enum32[enums.cGcProceduralTechnologyCategory],
        Field(c_enum32[enums.cGcProceduralTechnologyCategory], 0x0),
    ]


@partial_struct
class cGcRewardProduct(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    ItemCategory: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x8),
    ]
    ItemLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC)]
    ItemRarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x10)
    ]
    AllowedProductTypes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x14)]


@partial_struct
class cGcRewardProductRecipe(Structure):
    ItemCatagory: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x0),
    ]
    ItemLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    ItemRarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x8)
    ]
    AllowedProductTypes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]
    IgnoreRarity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x17)]


@partial_struct
class cGcRewardOSDMessage(Structure):
    MessageColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x10)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x28)]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x38),
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    RandomiseMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    UseFancyMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]
    UseSpookMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x42)]
    UseTimedMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x43)]


@partial_struct
class cGcRewardModifyStat(Structure):
    OtherStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    ModifyType: Annotated[
        c_enum32[enums.cGcStatModifyType],
        Field(c_enum32[enums.cGcStatModifyType], 0x24),
    ]
    UseOtherStat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcRewardFrigateFlyby(Structure):
    CommunicatorMessage: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x0)
    ]
    CommunicatorOSDLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]
    MarkerIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x70)]
    CameraShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x88)]
    AppearanceDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    AudioSting: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x9C),
    ]
    FlybyType: Annotated[
        c_enum32[enums.cGcFrigateFlybyType],
        Field(c_enum32[enums.cGcFrigateFlybyType], 0xA0),
    ]
    PulseAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xA4),
    ]


@partial_struct
class cGcRewardMoney(Structure):
    AmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x0)]
    AmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    Currency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x8)
    ]
    RoundNumber: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xC)]


@partial_struct
class cGcRewardMultiSpecificItems(Structure):
    Items: Annotated[
        basic.cTkDynamicArray[cGcMultiSpecificItemEntry],
        Field(basic.cTkDynamicArray[cGcMultiSpecificItemEntry], 0x0),
    ]
    Silent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10)]


@partial_struct
class cGcRewardIncrementInteractionIndex(Structure):
    InteractionToIncrement: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x0),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x4)
    ]


@partial_struct
class cGcRewardDeath(Structure):
    InitialFadeColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    DeathAuthor: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10)
    ]
    DeathQuote: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x30)
    ]
    CameraShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    PlayerDamage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    DeathSpinPitch: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x70)]
    DeathSpinRoll: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x78)]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x80),
    ]
    BlackScreenBeforeQuote: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84)]
    FadeDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    SetSeasonSaveState: Annotated[
        c_enum32[enums.cGcSeasonSaveStateOnDeath],
        Field(c_enum32[enums.cGcSeasonSaveStateOnDeath], 0x8C),
    ]
    TimeToSpendDead: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]
    FadeCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x94)
    ]
    OverrideShipSpin: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x95)]


@partial_struct
class cGcRefinerRecipeElement(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    Type: Annotated[
        c_enum32[enums.cGcInventoryType], Field(c_enum32[enums.cGcInventoryType], 0x14)
    ]


@partial_struct
class cGcRefinerRecipe(Structure):
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    RecipeName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    RecipeType: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    Result: Annotated[cGcRefinerRecipeElement, Field(cGcRefinerRecipeElement, 0x60)]
    Ingredients: Annotated[
        basic.cTkDynamicArray[cGcRefinerRecipeElement],
        Field(basic.cTkDynamicArray[cGcRefinerRecipeElement], 0x78),
    ]
    TimeToMake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    Cooking: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8C)]


@partial_struct
class cGcRepShopItem(Structure):
    AltIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    ProductID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    AmountForSale: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    Currency: Annotated[
        c_enum32[enums.cGcCurrency], Field(c_enum32[enums.cGcCurrency], 0x24)
    ]
    PriceMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    RepLevelRequired: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2C)]


@partial_struct
class cGcRepShopData(Structure):
    DonatableItems: Annotated[
        basic.cTkDynamicArray[cGcRepShopDonation],
        Field(basic.cTkDynamicArray[cGcRepShopDonation], 0x0),
    ]
    RepItems: Annotated[
        basic.cTkDynamicArray[cGcRepShopItem],
        Field(basic.cTkDynamicArray[cGcRepShopItem], 0x10),
    ]


@partial_struct
class cGcRewardCommunicatorMessage(Structure):
    Comms: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x0)
    ]
    FailureMessageBusy: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]
    FailureMessageNotInShip: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x70)
    ]


@partial_struct
class cGcRewardCommunityContribution(Structure):
    OtherStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Stat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Contribution: Annotated[
        cGcAtlasSendSubmitContribution, Field(cGcAtlasSendSubmitContribution, 0x20)
    ]

    class eSubmitTypeEnum(IntEnum):
        Value = 0x0
        Stat = 0x1
        StatsDiff = 0x2

    SubmitType: Annotated[
        c_enum32[eSubmitTypeEnum], Field(c_enum32[eSubmitTypeEnum], 0x28)
    ]
    AutosaveOnHandIn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]


@partial_struct
class cGcRewardActivateFiends(Structure):
    ActiveFailureOSD: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    WaterFailureOSD: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    SpawnID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    CrimeType: Annotated[
        c_enum32[enums.cGcFiendCrime], Field(c_enum32[enums.cGcFiendCrime], 0x50)
    ]
    AllowInWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54)]
    FailIfAlreadyActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x55)]


@partial_struct
class cGcRealitySubstanceData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    WorldColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    DebrisFile: Annotated[cTkModelResource, Field(cTkModelResource, 0x20)]
    PinObjective: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    PinObjectiveMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    PinObjectiveTip: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)
    ]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0xA0)]
    Description: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xB8)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC8)]
    Subtitle: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xD8)]
    WikiMissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE8)]
    Cost: Annotated[cGcItemPriceModifiers, Field(cGcItemPriceModifiers, 0xF8)]
    BaseValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10C)]
    Category: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x110),
    ]
    ChargeValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x114)]
    EconomyInfluenceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    Legality: Annotated[
        c_enum32[enums.cGcLegality], Field(c_enum32[enums.cGcLegality], 0x11C)
    ]
    NormalisedValueOffWorld: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    NormalisedValueOnWorld: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124)]
    PinObjectiveScannableType: Annotated[
        c_enum32[enums.cGcScannerIconTypes],
        Field(c_enum32[enums.cGcScannerIconTypes], 0x128),
    ]
    Rarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x12C)
    ]
    StackMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x130)]
    TradeCategory: Annotated[
        c_enum32[enums.cGcTradeCategory], Field(c_enum32[enums.cGcTradeCategory], 0x134)
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x138)]
    NameLower: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x158)
    ]
    Symbol: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x178)]
    CookingIngredient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x198)]
    EasyToRefine: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x199)]
    EggModifierIngredient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19A)]
    GoodForSelling: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19B)]
    OnlyFoundInPurpleSytems: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19C)]
    WikiEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x19D)]


@partial_struct
class cGcPuzzleTextFlow(Structure):
    DisablingConditionId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Text: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)]
    DisablingConditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x60),
    ]
    AlienLanguageOverride: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x70)
    ]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x74),
    ]

    class eBracketsOverrideEnum(IntEnum):
        None_ = 0x0
        Brackets = 0x1
        NoBrackets = 0x2

    BracketsOverride: Annotated[
        c_enum32[eBracketsOverrideEnum], Field(c_enum32[eBracketsOverrideEnum], 0x78)
    ]
    DisablingConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x7C),
    ]
    Mood: Annotated[
        c_enum32[enums.cGcAlienMood], Field(c_enum32[enums.cGcAlienMood], 0x80)
    ]

    class eTranslateAlienTextOverrideEnum(IntEnum):
        None_ = 0x0
        Translate = 0x1
        DoNotTranslate = 0x2

    TranslateAlienTextOverride: Annotated[
        c_enum32[eTranslateAlienTextOverrideEnum],
        Field(c_enum32[eTranslateAlienTextOverrideEnum], 0x84),
    ]
    IsAlien: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x88)]
    ShowHologram: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x89)]


@partial_struct
class cGcProductProceduralOnlyData(Structure):
    Description: Annotated[cGcNameGeneratorWord, Field(cGcNameGeneratorWord, 0x0)]
    HeroIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x28)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x40)]
    AgeMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x58)]
    AgeMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x5C)]
    BaseValueMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    BaseValueMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x64)]
    DropWeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x68)]


@partial_struct
class cGcRealityIconTable(Structure):
    GameIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x0)]
    BinocularDiscoveryIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0xAC8)
    ]
    ProductCategoryIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0xC60)
    ]
    MissionFactionIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0xD68)]
    DiscoveryPageRaceIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0xE58)
    ]
    SubstanceCategoryIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0xF30)
    ]
    DifficultyPresetIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x1008)
    ]
    DiscoveryPageTradingIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x10B0)
    ]
    HazardIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1158)]
    HazardIconsHUD: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x1200)]
    OptionsUIHeaderIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x12A8)
    ]
    InventoryFilterIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x1338)
    ]
    DifficultyUIOptionIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x13B0)
    ]
    DiscoveryPageConflictIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x1410)
    ]
    MissionDetailIcons: Annotated[cGcRealityIcon, Field(cGcRealityIcon, 0x1470)]
    DiscoveryPageConflictUnknown: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x14A0)
    ]
    DiscoveryPageRaceUnknown: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x14B8)
    ]
    DiscoveryPageTradingUnknown: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x14D0)
    ]
    PlanetResourceIconLookups: Annotated[
        basic.cTkDynamicArray[cGcPlanetResourceIconLookup],
        Field(basic.cTkDynamicArray[cGcPlanetResourceIconLookup], 0x14E8),
    ]
    RepairTechIcons: Annotated[
        basic.cTkDynamicArray[cTkTextureResource],
        Field(basic.cTkDynamicArray[cTkTextureResource], 0x14F8),
    ]
    TerrainIconLookups: Annotated[
        basic.cTkDynamicArray[cGcPlanetResourceIconLookup],
        Field(basic.cTkDynamicArray[cGcPlanetResourceIconLookup], 0x1508),
    ]


@partial_struct
class cGcProceduralProductWord(Structure):
    RareWord: Annotated[cGcNameGeneratorWord, Field(cGcNameGeneratorWord, 0x0)]
    UncommonWord: Annotated[cGcNameGeneratorWord, Field(cGcNameGeneratorWord, 0x28)]
    Word: Annotated[cGcNameGeneratorWord, Field(cGcNameGeneratorWord, 0x50)]
    ReplaceKey: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x78)
    ]


@partial_struct
class cGcPlayerDamageData(Structure):
    CriticalHitMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DeathMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    HitChatMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    HitMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    HitIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x80)]
    CameraShakeNoShield: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x98)]
    CameraShakeShield: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA8)]
    DamageTechWithStat: Annotated[
        basic.cTkDynamicArray[cGcBreakTechByStatData],
        Field(basic.cTkDynamicArray[cGcBreakTechByStatData], 0xB8),
    ]
    DeathStat: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC8)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xD8)]
    CameraTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    CriticalHitMessageAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xEC),
    ]
    Damage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    HazardDrain: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xF4)]
    HitMessageAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xF8),
    ]

    class ePlayerDamageTypeEnum(IntEnum):
        Normal = 0x0
        Toxic = 0x1
        Radioactive = 0x2
        Freeze = 0x3
        Scorch = 0x4

    PlayerDamageType: Annotated[
        c_enum32[ePlayerDamageTypeEnum], Field(c_enum32[ePlayerDamageTypeEnum], 0xFC)
    ]
    PushForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]
    TechDamageChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    AllowDeathInInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x108)]
    ForceDamageInInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x109)]
    ShowTrackIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10A)]


@partial_struct
class cGcModularCustomisationSlotItemData(Structure):
    DescriptorGroupData: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationDescriptorGroupData],
        Field(basic.cTkDynamicArray[cGcModularCustomisationDescriptorGroupData], 0x0),
    ]
    ItemID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    SpecificLocID: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    CreatureDiet: Annotated[
        c_enum32[enums.cGcCreatureDiet], Field(c_enum32[enums.cGcCreatureDiet], 0x30)
    ]

    class eDescriptorGroupSalvageRuleEnum(IntEnum):
        All = 0x0
        Any = 0x1

    DescriptorGroupSalvageRule: Annotated[
        c_enum32[eDescriptorGroupSalvageRuleEnum],
        Field(c_enum32[eDescriptorGroupSalvageRuleEnum], 0x34),
    ]
    InventoryClass: Annotated[
        c_enum32[enums.cGcInventoryClass],
        Field(c_enum32[enums.cGcInventoryClass], 0x38),
    ]
    SetInventoryClass: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    UseAltCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3D)]


@partial_struct
class cGcModularCustomisationSlotConfig(Structure):
    SlotEmptyFinalCustomisation: Annotated[
        cGcModularCustomisationSlotItemData,
        Field(cGcModularCustomisationSlotItemData, 0x0),
    ]
    SlotEmptyPreviewCustomisation: Annotated[
        cGcModularCustomisationSlotItemData,
        Field(cGcModularCustomisationSlotItemData, 0x40),
    ]
    LabelLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)
    ]
    AdditionalSlottableItemLists: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xA0),
    ]
    AssociatedNonProcNodes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xB0),
    ]
    SlotID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    SlottableItems: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationSlotItemData],
        Field(basic.cTkDynamicArray[cGcModularCustomisationSlotItemData], 0xD0),
    ]
    UISlotGraphicLayer: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE0)]
    UISlotPosition: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF0)]
    UILineLengthFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    UILineMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    UILocatorName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x100)
    ]
    IncludeInSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x120)]


@partial_struct
class cGcModularCustomisationConfig(Structure):
    InteractionCameraData: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x0)
    ]
    ModelRenderData: Annotated[cTkModelRendererData, Field(cTkModelRendererData, 0xB0)]
    BaseResource: Annotated[cGcExactResource, Field(cGcExactResource, 0x160)]
    SubtitleApplyingLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x180)
    ]
    SubtitleLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1A0)
    ]
    SubtitleSlotsBlockedLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1C0)
    ]
    SubtitleSlotsFullLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1E0)
    ]
    TitleLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x200)
    ]
    ColourDataPriorityList: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationColourData],
        Field(basic.cTkDynamicArray[cGcModularCustomisationColourData], 0x220),
    ]
    Slots: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationSlotConfig],
        Field(basic.cTkDynamicArray[cGcModularCustomisationSlotConfig], 0x230),
    ]
    TextureData: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationTextureGroup],
        Field(basic.cTkDynamicArray[cGcModularCustomisationTextureGroup], 0x240),
    ]
    Effects: Annotated[
        cGcModularCustomisationEffectsData,
        Field(cGcModularCustomisationEffectsData, 0x250),
    ]
    HologramOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x258)]
    HologramScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x25C)]
    IsEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x260)]
    OverrideInteractionCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x261)]


@partial_struct
class cGcMaintenanceGroupInstallData(Structure):
    InstallSubtitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    InstallTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    UninstallSubtitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    UninstallTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    BuildingSeedOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x80)]
    ItemGroupOverride: Annotated[
        c_enum32[enums.cGcMaintenanceElementGroups],
        Field(c_enum32[enums.cGcMaintenanceElementGroups], 0x84),
    ]
    OverrideAudioID: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x88),
    ]
    DismantleIsDelete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8C)]
    HideChargingInfo: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8D)]
    InstallIsFree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8E)]


@partial_struct
class cGcModularCustomisationSlotItemDataTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationSlotItemData],
        Field(basic.cTkDynamicArray[cGcModularCustomisationSlotItemData], 0x0),
    ]


@partial_struct
class cGcModularCustomisationSlottableItemList(Structure):
    ListID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SlottableItems: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationSlotItemData],
        Field(basic.cTkDynamicArray[cGcModularCustomisationSlotItemData], 0x10),
    ]


@partial_struct
class cGcMaintenanceGroupEntry(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OverrideAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    ProbabilityWeighting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Type: Annotated[
        c_enum32[enums.cGcInventoryType], Field(c_enum32[enums.cGcInventoryType], 0x18)
    ]


@partial_struct
class cGcMaintenanceGroup(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcMaintenanceGroupEntry],
        Field(basic.cTkDynamicArray[cGcMaintenanceGroupEntry], 0x0),
    ]


@partial_struct
class cGcInventoryLayoutGenerationDataEntry(Structure):
    Bounds: Annotated[
        cGcInventoryLayoutGenerationBounds,
        Field(cGcInventoryLayoutGenerationBounds, 0x0),
    ]
    TechBounds: Annotated[
        cGcInventoryLayoutGenerationBounds,
        Field(cGcInventoryLayoutGenerationBounds, 0x18),
    ]
    SpecialTechSlotMaxIndex: Annotated[
        cGcInventoryIndex, Field(cGcInventoryIndex, 0x30)
    ]
    MaxCargoSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x38)]
    MaxNumSpecialTechSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3C)]
    MaxSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x40)]
    MaxTechSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    MinCargoSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    MinSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4C)]
    MinTechSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]


@partial_struct
class cGcInventoryLayoutGenerationData(Structure):
    GenerationDataPerSizeType: Annotated[
        cGcInventoryLayoutGenerationDataEntry,
        Field(cGcInventoryLayoutGenerationDataEntry, 0x0),
    ]


@partial_struct
class cGcDiscoveryTrimSettings(Structure):
    BaseSearchFilter: Annotated[cGcBaseSearchFilter, Field(cGcBaseSearchFilter, 0x0)]
    DiscoveryTrimScoringRules: Annotated[
        cGcDiscoveryTrimScoringRules, Field(cGcDiscoveryTrimScoringRules, 0xC0)
    ]
    DiscoveryTrimScoringWeights: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    DiscoveryTrimGroupMaxCounts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x140)]


@partial_struct
class cGcGenericRewardTableEntry(Structure):
    List: Annotated[cGcRewardTableItemList, Field(cGcRewardTableItemList, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x28)]


@partial_struct
class cGcCostSettlementTowerReward(Structure):
    Power: Annotated[
        c_enum32[enums.cGcSettlementTowerPower],
        Field(c_enum32[enums.cGcSettlementTowerPower], 0x0),
    ]


@partial_struct
class cGcCostStanding(Structure):
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x0)
    ]
    RequiredStanding: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x4)]
    UseCurrentRankString: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8)]


@partial_struct
class cGcCostWordKnowledge(Structure):
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x0)
    ]

    class eRequirementEnum(IntEnum):
        CanLearn = 0x0
        CanSpeak = 0x1

    Requirement: Annotated[
        c_enum32[eRequirementEnum], Field(c_enum32[eRequirementEnum], 0x4)
    ]


@partial_struct
class cGcCostRaceItemCombo(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AlienRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x10)
    ]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcCostNPCHabitation(Structure):
    NPCHabitationType: Annotated[
        c_enum32[enums.cGcNPCHabitationType],
        Field(c_enum32[enums.cGcNPCHabitationType], 0x0),
    ]
    MustBeInhabited: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4)]


@partial_struct
class cGcCostInteractionIndex(Structure):
    CantAffordLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Index: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]
    InteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x24),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x28)
    ]
    AffordIfGreaterThanIndex: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C)]


@partial_struct
class cGcConsumableItem(Structure):
    CustomOSD: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    RequiresMissionActive: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    RewardID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    RewardOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcRewardMissionOverride],
        Field(basic.cTkDynamicArray[cGcRewardMissionOverride], 0x50),
    ]
    TutorialRewardID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    AudioEventOnOpen: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x70),
    ]
    ButtonLocID: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x74)
    ]
    ButtonSubLocID: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xB4)
    ]
    RewardFailedLocID: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xF4)
    ]
    AddCommunityTierClassIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x134)]
    CloseInventoryWhenUsed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x135)]
    DestroyItemWhenConsumed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x136)]
    OverrideMissionMustBeSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x137)]
    SuppressResourceMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x138)]


@partial_struct
class cGcCostBuildingParts(Structure):
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    RequiredParts: Annotated[
        basic.cTkDynamicArray[cGcBuildingCostPartCount],
        Field(basic.cTkDynamicArray[cGcBuildingCostPartCount], 0x20),
    ]


@partial_struct
class cGcCostGameMode(Structure):
    CostStringCantAfford: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Mode: Annotated[
        c_enum32[enums.cGcGameMode], Field(c_enum32[enums.cGcGameMode], 0x20)
    ]
    SpecificSeasonIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x24)]
    InvertMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x28)]


@partial_struct
class cGcAlienPuzzleOption(Structure):
    DisablingConditionId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Name: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    NextInteraction: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x40)]
    Text: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)]
    TitleOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)
    ]
    Cost: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    DisablingConditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0xB0),
    ]
    Rewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xC0),
    ]
    AlienWordSpecificRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0xD0)
    ]
    AudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xD4),
    ]
    DisablingConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0xD8),
    ]
    Mood: Annotated[
        c_enum32[enums.cGcAlienMood], Field(c_enum32[enums.cGcAlienMood], 0xDC)
    ]
    Prop: Annotated[
        c_enum32[enums.cGcNPCPropType], Field(c_enum32[enums.cGcNPCPropType], 0xE0)
    ]
    ResponseLanguageOverride: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0xE4)
    ]
    WordCategory: Annotated[
        c_enum32[enums.cGcWordCategoryTableEnum],
        Field(c_enum32[enums.cGcWordCategoryTableEnum], 0xE8),
    ]
    DisplayCost: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xEC)]
    IsAlien: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xED)]
    KeepOpen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xEE)]
    MarkInteractionComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xEF)]
    OverrideWithAlienWord: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF0)]
    ReseedInteractionOnUse: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF1)]
    SelectedOnBackOut: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF2)]
    SkipStraightToOptionsOnNextPuzzle: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xF3)
    ]
    TruncateCost: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF4)]


@partial_struct
class cGcAdditionalOptionMissionOverride(Structure):
    Option: Annotated[cGcAlienPuzzleOption, Field(cGcAlienPuzzleOption, 0x0)]
    ApplicableSeasons: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0xF8),
    ]
    Mission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x108)]
    MissionMustBeSelected: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x118)]


@partial_struct
class cGcRagdolCollisionObject(Structure):
    Centre: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Extent: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    HalfVector: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    OrientationQuaternion: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x30)]
    CollisionShapeType: Annotated[
        c_enum32[enums.cCollisionShapeType],
        Field(c_enum32[enums.cCollisionShapeType], 0x40),
    ]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]


@partial_struct
class cGcRagdollBone(Structure):
    LimitedPlaneAxis: Annotated[cAxisSpecification, Field(cAxisSpecification, 0x0)]
    LimitedTwistAxis: Annotated[cAxisSpecification, Field(cAxisSpecification, 0x20)]
    LimitingPlaneAxis: Annotated[cAxisSpecification, Field(cAxisSpecification, 0x40)]
    LimitingTwistAxis: Annotated[cAxisSpecification, Field(cAxisSpecification, 0x60)]
    ParentNodeTransformInBone_AxisX: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x80)
    ]
    ParentNodeTransformInBone_AxisY: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x90)
    ]
    ParentNodeTransformInBone_AxisZ: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0xA0)
    ]
    ParentNodeTransformInBone_Position: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0xB0)
    ]
    ChildNodes: Annotated[
        basic.cTkDynamicArray[cGcChildNode],
        Field(basic.cTkDynamicArray[cGcChildNode], 0xC0),
    ]
    CollisionObjects: Annotated[
        basic.cTkDynamicArray[cGcRagdolCollisionObject],
        Field(basic.cTkDynamicArray[cGcRagdolCollisionObject], 0xD0),
    ]
    NodeNames: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0xE0),
    ]
    NodeTransformInBone_AxisX: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0xF0),
    ]
    NodeTransformInBone_AxisY: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x100),
    ]
    NodeTransformInBone_AxisZ: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x110),
    ]
    NodeTransformInBone_Position: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x120),
    ]
    ConeLimitDeg: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]

    class eLimbTypeEnum(IntEnum):
        LeftUpperArm = 0x0
        RightUpperArm = 0x1
        LeftUpperLeg = 0x2
        RightUpperLeg = 0x3
        LeftFoot = 0x4
        RightFoot = 0x5
        Other = 0x6

    LimbType: Annotated[c_enum32[eLimbTypeEnum], Field(c_enum32[eLimbTypeEnum], 0x134)]
    PlaneMaxAngleDeg: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x138)]
    PlaneMinAngleDeg: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C)]
    TwistLimitDeg: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x144)]
    ParentNodeName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x184)
    ]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C4)]


@partial_struct
class cGcAlienPuzzleEntry(Structure):
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    RequiresScanEvent: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x20)]
    Text: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)]
    TextAlien: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x80)]
    AdditionalText: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xA0),
    ]
    AdditionalTextAlien: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xB0),
    ]
    AdvancedInteractionFlow: Annotated[
        basic.cTkDynamicArray[cGcPuzzleTextFlow],
        Field(basic.cTkDynamicArray[cGcPuzzleTextFlow], 0xC0),
    ]
    Options: Annotated[
        basic.cTkDynamicArray[cGcAlienPuzzleOption],
        Field(basic.cTkDynamicArray[cGcAlienPuzzleOption], 0xD0),
    ]

    class eAdditionalOptionsEnum(IntEnum):
        None_ = 0x0
        LearnWord = 0x1
        SayWord = 0x2

    AdditionalOptions: Annotated[
        c_enum32[eAdditionalOptionsEnum], Field(c_enum32[eAdditionalOptionsEnum], 0xE0)
    ]
    Category: Annotated[
        c_enum32[enums.cGcAlienPuzzleCategory],
        Field(c_enum32[enums.cGcAlienPuzzleCategory], 0xE4),
    ]
    CustomFreighterTextIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xE8)]
    MinProgressionForSelection: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEC)]
    Mood: Annotated[
        c_enum32[enums.cGcAlienMood], Field(c_enum32[enums.cGcAlienMood], 0xF0)
    ]
    NextStageAudioEventOverride: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xF4),
    ]

    class ePersistancyBufferOverrideEnum(IntEnum):
        None_ = 0x0
        AlwaysPersonal = 0x1
        AlwaysFireteam = 0x2

    PersistancyBufferOverride: Annotated[
        c_enum32[ePersistancyBufferOverrideEnum],
        Field(c_enum32[ePersistancyBufferOverrideEnum], 0xF8),
    ]
    ProgressionIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xFC)]
    Prop: Annotated[
        c_enum32[enums.cGcNPCPropType], Field(c_enum32[enums.cGcNPCPropType], 0x100)
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x104)
    ]
    Type: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x108),
    ]
    AllowNoOptions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10C)]
    ProgressiveDialogue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10D)]
    RadialInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10E)]
    TranslateAlienText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10F)]
    TranslationBrackets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x110)]
    UseTitleOverrideInLabel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x111)]


@partial_struct
class cTkUniqueID(Structure):
    Address: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    Index: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x8)]
    OwnerID: Annotated[cTkSaveID, Field(cTkSaveID, 0x10)]


@partial_struct
class cTkUniqueSyncKey(Structure):
    Index: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    OwnerID: Annotated[cTkSaveID, Field(cTkSaveID, 0x8)]


@partial_struct
class cTkUserAccount(Structure):
    PlatformGroup: Annotated[
        c_enum32[enums.cTkPlatformGroup], Field(c_enum32[enums.cTkPlatformGroup], 0x0)
    ]
    OnlineID: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x4)]


@partial_struct
class cGcCutSceneTriggerInputData(Structure):
    Actions: Annotated[
        basic.cTkDynamicArray[cGcCutSceneTriggerActionData],
        Field(basic.cTkDynamicArray[cGcCutSceneTriggerActionData], 0x0),
    ]

    class eCutSceneKeyPressEnum(IntEnum):
        _1 = 0x0
        _2 = 0x1
        _3 = 0x2
        _4 = 0x3
        _5 = 0x4
        _6 = 0x5
        _7 = 0x6
        _8 = 0x7
        _9 = 0x8
        PadUp = 0x9
        PadDown = 0xA
        PadLeft = 0xB
        PadRight = 0xC

    CutSceneKeyPress: Annotated[
        c_enum32[eCutSceneKeyPressEnum], Field(c_enum32[eCutSceneKeyPressEnum], 0x10)
    ]


@partial_struct
class cGcPerformanceGuard(Structure):
    Encounter: Annotated[
        cGcEncounterComponentData, Field(cGcEncounterComponentData, 0x0)
    ]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]


@partial_struct
class cGcMessageFiendCrime(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    FiendCrimeType: Annotated[
        c_enum32[enums.cGcFiendCrime], Field(c_enum32[enums.cGcFiendCrime], 0x10)
    ]
    Value: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    Victim: Annotated[basic.GcNodeID, Field(basic.GcNodeID, 0x18)]


@partial_struct
class cGcJourneyMedal(Structure):
    MedalProgressText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    MedalTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    PinnedDescription: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    IconBronze: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x60)]
    IconGold: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x78)]
    IconNone: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x90)]
    IconSilver: Annotated[cTkTextureResource, Field(cTkTextureResource, 0xA8)]
    LevelledStatID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    PinnedMission: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xD0)]
    StatType: Annotated[
        c_enum32[enums.cGcStatType], Field(c_enum32[enums.cGcStatType], 0xE0)
    ]
    OverallJourneyDummy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE4)]


@partial_struct
class cGcJourneyCategory(Structure):
    DescriptionID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    NameIDLower: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)
    ]
    NameIDUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x40)
    ]
    IconOff: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x60)]
    IconOn: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x78)]
    Medals: Annotated[
        basic.cTkDynamicArray[cGcJourneyMedal],
        Field(basic.cTkDynamicArray[cGcJourneyMedal], 0x90),
    ]
    Faction: Annotated[
        c_enum32[enums.cGcMissionFaction],
        Field(c_enum32[enums.cGcMissionFaction], 0xA0),
    ]
    GameModeRestriction: Annotated[
        c_enum32[enums.cGcGameMode], Field(c_enum32[enums.cGcGameMode], 0xA4)
    ]
    Type: Annotated[
        c_enum32[enums.cGcJourneyCategoryType],
        Field(c_enum32[enums.cGcJourneyCategoryType], 0xA8),
    ]


@partial_struct
class cGcActionSetHudLayer(Structure):
    HudLayerIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    Type: Annotated[
        c_enum32[enums.cGcActionSetType], Field(c_enum32[enums.cGcActionSetType], 0x10)
    ]


@partial_struct
class cGcInputBinding(Structure):
    VirtualBinding: Annotated[cTkVirtualBinding, Field(cTkVirtualBinding, 0x0)]
    Action: Annotated[
        c_enum32[enums.cGcInputActions], Field(c_enum32[enums.cGcInputActions], 0x68)
    ]
    Axis: Annotated[
        c_enum32[enums.cTkInputAxisEnum], Field(c_enum32[enums.cTkInputAxisEnum], 0x6C)
    ]
    Button: Annotated[
        c_enum32[enums.cTkInputEnum], Field(c_enum32[enums.cTkInputEnum], 0x70)
    ]


@partial_struct
class cGcInputBindingSet(Structure):
    InputBindings: Annotated[
        basic.cTkDynamicArray[cGcInputBinding],
        Field(basic.cTkDynamicArray[cGcInputBinding], 0x0),
    ]
    Type: Annotated[
        c_enum32[enums.cGcActionSetType], Field(c_enum32[enums.cGcActionSetType], 0x10)
    ]


@partial_struct
class cGcNGuiLayoutData(Structure):
    AccessibleOverrides: Annotated[
        basic.cTkDynamicArray[cGcAccessibleOverride_Layout],
        Field(basic.cTkDynamicArray[cGcAccessibleOverride_Layout], 0x0),
    ]
    VROverrides: Annotated[
        basic.cTkDynamicArray[cGcVROverride_Layout],
        Field(basic.cTkDynamicArray[cGcVROverride_Layout], 0x10),
    ]
    ConstrainAspect: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    Height: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    MaxWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    PositionX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    PositionY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    Align: Annotated[cTkNGuiAlignment, Field(cTkNGuiAlignment, 0x38)]
    Anchor: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3A)]
    AnchorPercent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3B)]
    ConstrainProportions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C)]
    ForceAspect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3D)]
    HeightPercentage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3E)]
    SameLine: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F)]
    SlowCursorOnHover: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]
    WidthPercentage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x41)]


@partial_struct
class cGcNGuiElementData(Structure):
    Layout: Annotated[cGcNGuiLayoutData, Field(cGcNGuiLayoutData, 0x0)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    EditorVisible: Annotated[
        c_enum32[enums.cGcNGuiEditorVisibility],
        Field(c_enum32[enums.cGcNGuiEditorVisibility], 0x58),
    ]
    ForcedStyle: Annotated[
        c_enum32[enums.cTkNGuiForcedStyle],
        Field(c_enum32[enums.cTkNGuiForcedStyle], 0x5C),
    ]
    IgnoreInput: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    IsHidden: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]


@partial_struct
class cGcNGuiGraphicData(Structure):
    ElementData: Annotated[cGcNGuiElementData, Field(cGcNGuiElementData, 0x0)]
    Image: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x68)]
    Style: Annotated[cTkNGuiGraphicStyle, Field(cTkNGuiGraphicStyle, 0x78)]
    Angle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198)]


@partial_struct
class cGcNGuiPresetGraphic(Structure):
    Layout: Annotated[cGcNGuiLayoutData, Field(cGcNGuiLayoutData, 0x0)]
    Image: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x48)]
    PresetID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    Style: Annotated[cTkNGuiGraphicStyle, Field(cTkNGuiGraphicStyle, 0x68)]


@partial_struct
class cGcNGuiPresetText(Structure):
    Layout: Annotated[cGcNGuiLayoutData, Field(cGcNGuiLayoutData, 0x0)]
    Image: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x48)]
    PresetID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    GraphicStyle: Annotated[cTkNGuiGraphicStyle, Field(cTkNGuiGraphicStyle, 0x68)]
    Style: Annotated[cTkNGuiTextStyle, Field(cTkNGuiTextStyle, 0x188)]


@partial_struct
class cGcNGuiSpacingData(Structure):
    ElementData: Annotated[cGcNGuiElementData, Field(cGcNGuiElementData, 0x0)]


@partial_struct
class cGcTextPreset(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    Style: Annotated[basic.NMSTemplate, Field(basic.NMSTemplate, 0x10)]
    Font: Annotated[
        c_enum32[enums.cGcFontTypesEnum], Field(c_enum32[enums.cGcFontTypesEnum], 0x20)
    ]
    Height: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]


@partial_struct
class cGcTextPresetTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcTextPreset],
        Field(basic.cTkDynamicArray[cGcTextPreset], 0x0),
    ]


@partial_struct
class cGcModelViewCollection(Structure):
    ModelViewData: Annotated[cTkModelRendererData, Field(cTkModelRendererData, 0x0)]


@partial_struct
class cGcHUDStartup(Structure):
    RequiresTechBroken: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Audio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x10),
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcHUDStartupTable(Structure):
    HUDStartup: Annotated[cGcHUDStartup, Field(cGcHUDStartup, 0x0)]
    BackgroundAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x138)]
    ButtonFlashAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C)]
    ButtonFlashRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    FadeInFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144)]
    LookSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    StartHoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]


@partial_struct
class cGcHUDTextData(Structure):
    Preset: Annotated[cGcTextPreset, Field(cGcTextPreset, 0x0)]
    Data: Annotated[cGcHUDComponent, Field(cGcHUDComponent, 0x30)]
    Text: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x58)]


@partial_struct
class cGcInventorySlotActionData(Structure):
    ActionAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x0),
    ]
    ScaleAtMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    ScaleAtMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    SuitAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xC),
    ]
    Time: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    AnimCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x14)
    ]
    Disabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x15)]
    Glows: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x16)]
    Loops: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x17)]
    Scales: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcVehicleGlobals(Structure):
    CheckpointBeamColourActive: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    CheckpointBeamColourNormal: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    DefaultBoosterColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    MechCrouchOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    MechWalkBackwardsCoGOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    MechMeshPartsTable: Annotated[
        cGcMechMeshPartTable, Field(cGcMechMeshPartTable, 0x50)
    ]
    MechWeaponData: Annotated[cGcExoMechWeaponData, Field(cGcExoMechWeaponData, 0x2D0)]
    VehicleWeaponMuzzleFlash: Annotated[
        cGcVehicleMuzzleData, Field(cGcVehicleMuzzleData, 0x550)
    ]
    MechAudioEventTable: Annotated[
        cGcMechAudioEventTable, Field(cGcMechAudioEventTable, 0x780)
    ]
    MechEffectTable: Annotated[cGcMechEffectTable, Field(cGcMechEffectTable, 0x8A0)]
    BugMechRightArmTechNameOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x940)
    ]
    SentinelRightArmTechNameOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x960)
    ]
    BugMechLeftArmTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x980)]
    BugMechRightArmTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x990)]
    DefaultBikeLoadout: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x9A0),
    ]
    DefaultBuggyLoadout: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x9B0),
    ]
    DefaultTruckLoadout: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x9C0),
    ]
    MechArmPitchAnimLeft: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x9D0)]
    MechArmPitchAnimRight: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x9E0)]
    MechStrongLaser: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x9F0)]
    SentinelLeftArmTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA00)]
    SentinelRightArmTech: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA10)]
    SentinelRightLeftArmLaserData: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xA20)
    ]
    UnderwaterBubbleOffset: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0xA30),
    ]
    VehicleDataTable: Annotated[
        basic.cTkDynamicArray[cGcVehicleData],
        Field(basic.cTkDynamicArray[cGcVehicleData], 0xA40),
    ]
    VehicleLocalScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA50)]
    VehicleScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA60)]
    VehicleStrongLaser: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA70)]
    VehicleWeaponMuzzleDataTable: Annotated[
        basic.cTkDynamicArray[cGcVehicleWeaponMuzzleData],
        Field(basic.cTkDynamicArray[cGcVehicleWeaponMuzzleData], 0xA80),
    ]
    UnderwaterAvoidance: Annotated[
        cGcSpaceshipAvoidanceData, Field(cGcSpaceshipAvoidanceData, 0xA90)
    ]
    MechLookStickSpeedLimit: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xAB4)]
    MechMovementStickSpeedLimit: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xABC)]
    AIMechFlamethrowerFireInterval: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC4)
    ]
    AIMechFlamethrowerNumShotsMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xAC8)
    ]
    AIMechFlamethrowerNumShotsMin: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACC)
    ]
    AIMechGunExplosionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAD0)]
    AIMechGunFireInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAD4)]
    AIMechGunInheritVelocity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAD8)]
    AIMechGunNumShotsMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xADC)]
    AIMechGunNumShotsMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xAE0)]
    AIMechLaserFireDurationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAE4)]
    AIMechLaserFireDurationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAE8)]
    AIMechStunGunFireInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAEC)]
    AIMechStunGunNumShotsMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xAF0)]
    AIMechStunGunNumShotsMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xAF4)]
    AttractAlign: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAF8)]
    AttractAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAFC)]
    AttractDirectionBrakeThresholdSq: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB00)
    ]
    AttractMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB04)]
    BoostPadStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB08)]
    BoostPadTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0C)]
    BuoyancyMaxDownForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB10)]
    BuoyancyMaxUpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB14)]
    BuoyancySurfaceFudge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB18)]
    BuoyancySurfacingTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB1C)]
    BuoyancyUnderwaterSphereRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB20)
    ]
    CheckpointBeamOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB24)]
    CheckpointBeamSizeActive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB28)]
    CheckpointBeamSizeNormal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB2C)]
    CheckpointDeleteAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB30)]
    CheckpointDeleteDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB34)]
    CheckpointFlashDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB38)]
    CheckpointFlashIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB3C)]
    CheckpointPlacementOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB40)]
    CheckpointPlacementRayLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB44)
    ]
    CheckpointRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB48)]
    ControlStickRecenterSpeedDegPerSec: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB4C)
    ]
    DamageTechMinHitIntervalSeconds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB50)
    ]
    DamageTechNumHitsRequired: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB54)]
    DisablePhysicsRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB58)]
    ExitStopForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB5C)]
    ExitStopTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB60)]
    FirstPersonSteeringAdditionalForward: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB64)
    ]
    FirstPersonSteeringAdditionalForwardThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB68)
    ]
    FirstPersonSteeringAdditionalReverseThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB6C)
    ]
    FirstPersonSteeringLowSpeedTurnDamping: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB70)
    ]
    FirstPersonSteeringMinThrottleHardLeftRight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB74)
    ]
    GunBaseDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB78)]
    GunBaseMiningDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB7C)]
    GunFireRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB80)]
    HeadlightIntensitySpringTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB84)
    ]
    HornScareFleeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB88)]
    HornScareRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8C)]
    HornScareTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB90)]
    LevelVehicleCameraFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB94)]
    MechAIGroundTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB98)]
    MechAIResummonMinSpawnDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB9C)
    ]
    MechAIResummonMinSpeedForVelBasedSpawnPos: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBA0)
    ]
    MechAIResummonTriggerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBA4)
    ]
    MechAIResummonVelBasedSpawnSpeedMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBA8)
    ]
    MechArmPitchAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBAC)]
    MechArmPitchAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB0)]
    MechArmPitchLerpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB4)]
    MechArmSwingAngleFastWalk: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB8)]
    MechArmSwingAngleWalk: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBBC)]
    MechArmSwingPhaseFastWalk: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC0)]
    MechArmSwingPhaseWalk: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC4)]
    MechCameraOffsetAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC8)]
    MechCameraOffsetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBCC)]
    MechCockPitBobPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD0)]
    MechCockPitBobRoll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD4)]
    MechCockPitBobX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD8)]
    MechCockPitBobY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBDC)]
    MechCockPitBobYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE0)]
    MechCockPowerDownY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE4)]
    MechCoGAdjustTimeAir: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE8)]
    MechCoGAdjustTimeLand: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBEC)]
    MechCoGAdjustTimeWindUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF0)]
    MechContrailAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF4)]
    MechCrouchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF8)]
    MechDefaultBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBFC)]
    MechFirstPersonCrouchAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC00)]
    MechFirstPersonDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC04)]
    MechFirstPersonIgnoreReverseThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC08)
    ]
    MechFirstPersonMaxLookTurret: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC0C)
    ]
    MechFirstPersonMaxTurnTurret: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC10)
    ]
    MechFirstPersonStickXModerator: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC14)
    ]
    MechFirstPersonTurretAngleThrottleStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC18)
    ]
    MechFirstPersonTurretAngleThrottleThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC1C)
    ]
    MechFirstPersonTurretBaseThrottleThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC20)
    ]
    MechFirstPersonTurretBaseTurnThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC24)
    ]
    MechFirstPersonTurretPitchModerator: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC28)
    ]
    MechFirstPersonTurretShootTimer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC2C)
    ]
    MechFirstPersonTurretThrottleLookThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC30)
    ]
    MechFirstPersonTurretTurnModerator: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC34)
    ]
    MechFootprintFadeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC38)]
    MechFootprintFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC3C)]
    MechIdleLowBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC40)]
    MechIdleLowDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC44)]
    MechIdleStopDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC48)]
    MechJetpackAvoidGroundForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4C)]
    MechJetpackAvoidGroundProbeLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC50)
    ]
    MechJetpackBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC54)]
    MechJetpackDrainRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC58)]
    MechJetpackFallForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC5C)]
    MechJetpackFillRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC60)]
    MechJetpackForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC64)]
    MechJetpackIgnitionForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC68)]
    MechJetpackIgnitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC6C)]
    MechJetpackJetScaleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC70)]
    MechJetpackLandTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC74)]
    MechJetpackMaxCoGAdjustX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC78)]
    MechJetpackMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC7C)]
    MechJetpackMaxUpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC80)]
    MechJetpackStrafeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC84)]
    MechJetpackTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC88)]
    MechJetpackUpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8C)]
    MechJumpBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC90)]
    MechJumpDownBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC94)]
    MechJumpFlyBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC98)]
    MechLandBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC9C)]
    MechLandBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA0)]
    MechLandCameraShakeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA4)]
    MechMaxTurnAngleWhileStationary: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCA8)
    ]
    MechPlayerGroundTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCAC)]
    MechPowerUpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB0)]
    MechSpawnRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB4)]
    MechSpeedBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB8)]
    MechTitanFallCameraShakeDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCBC)
    ]
    MechTitanFallHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC0)]
    MechTitanFallLandIdleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC4)]
    MechTitanFallLandIntroTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC8)]
    MechTitanFallTerrainEditOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCCC)
    ]
    MechTitanFallTerrainEditSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCD0)
    ]
    MechTurretMaxAngleAir: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD4)]
    MechTurretMaxAngleGround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD8)]
    MechTurretTimeVRModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCDC)]
    MechTurretTurnTimeAir: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE0)]
    MechTurretTurnTimeGround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE4)]
    MechTurretTurnTimeGroundPlayerCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCE8)
    ]
    MechWalkToRunTimeIdle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCEC)]
    MechWalkToRunTimeSkid: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF0)]
    MechWeaponInterpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF4)]
    MiningLaserDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xCF8)]
    MiningLaserDrainSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCFC)]
    MiningLaserMiningDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD00)]
    MiningLaserRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD04)]
    MiningLaserSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD08)]
    ProjectileDrainPerShot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0C)]
    RaceCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD10)]
    RaceInteractRespawnOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD14)]
    RaceInteractRespawnUpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD18)]
    RaceMultipleStartCaptureRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD1C)
    ]
    RaceMultipleStartOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD20)]
    RaceResetFlashDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD24)]
    RaceResetFlashIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD28)]
    RaceStartSpawnUpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD2C)]
    RemoteBoostingEffectTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD30)]
    ResourceCollectOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD34)]
    SpawnRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD38)]
    SteeringWheelCentreOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD3C)]
    SteeringWheelPitchAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD40)]
    SteeringWheelPushRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD44)]
    SteeringWheelSpringBothHands: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD48)
    ]
    SteeringWheelSpringOneHand: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4C)]
    StickReverseTurnStiffness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD50)]
    StickReverseTurnThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD54)]
    StickTurnReducer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD58)]
    StickTurnReducerAltNonVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD5C)]
    StickTurnReducerVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD60)]
    StickTurnReducerWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD64)]
    StunGunBaseDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD68)]
    StunGunFireRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD6C)]
    SubmarineEjectDownOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD70)]
    SubmarineEjectRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD74)]
    SubmarineFirstPersonSteeringSensitivity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD78)
    ]
    SubmarineMinSummonDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD7C)]
    SummoningRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD80)]
    SuspensionDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD84)]
    SuspensionDampingAngularFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD88)
    ]
    TestAnimBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8C)]
    TestAnimThrust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD90)]
    TestAnimTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD94)]
    TestFrictionStat: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD98)]
    TestSkidFrictionStat: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD9C)]
    TravelSpeedReportReducer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDA0)]
    UnderwaterBuoyancyRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDA4)]
    UnderwaterBuoyancyRangeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDA8)]
    UnderwaterDiveForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDAC)]
    UnderwaterFlattenMinDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDB0)]
    UnderwaterFlattenRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDB4)]
    UnderwaterJumpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDB8)]
    UnderwaterScannerIconRangeBoost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDBC)
    ]
    UnderwaterSummonSurfaceOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDC0)
    ]
    UnderwaterSurfaceForceFlatteningAngleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDC4)
    ]
    UnderwaterSurfaceForceFlatteningAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDC8)
    ]
    UnderwaterSurfaceOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDCC)]
    UnderwaterSurfaceSplashdownForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDD0)
    ]
    UnderwaterSurfaceSplashdownMinSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDD4)
    ]
    VehicleAltControlStickSmoothInTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDD8)
    ]
    VehicleAltControlStickSmoothOutTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDDC)
    ]
    VehicleBoostFuelRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDE0)]
    VehicleBoostFuelRateSurvival: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDE4)
    ]
    VehicleBoostSpeedMultiplierPercent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDE8)
    ]
    VehicleCollisionScaleFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDEC)]
    VehicleDeactivateRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF0)]
    VehicleFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF4)]
    VehicleFuelRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF8)]
    VehicleFuelRateTruckMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDFC)
    ]
    VehicleGarageHologramFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE00)
    ]
    VehicleGarageHologramMinFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE04)
    ]
    VehicleJumpCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE08)]
    VehicleJumpTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0C)]
    VehicleJumpTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE10)]
    VehicleMaxSummonDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE14)]
    VehicleMaxSummonDistanceUnderwater: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE18)
    ]
    VehicleMinSummonDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE1C)]
    VehicleMotionDeadZone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE20)]
    VehicleSolarRegenFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE24)]
    VehicleSuspensionAudioDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE28)]
    VehicleSuspensionAudioScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE2C)]
    VehicleSuspensionAudioSpacing: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE30)
    ]
    VehicleSuspensionAudioTrigger: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE34)
    ]
    VehicleTextSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE38)]
    VehicleWheelNoise: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE3C)]
    VehicleWheelNoiseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE40)]
    VignetteAmountAcceleration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE44)]
    VignetteAmountTurning: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE48)]
    VisualRollUnderwaterSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4C)]
    VisualTurnSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE50)]
    VisualTurnUnderwaterSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE54)]
    WeaponInterpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE58)]
    WheelDustColourLightFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE5C)]
    WheelForceHalflife: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE60)]
    WheelSideVerticalFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE64)]
    MechWeaponLocatorNames: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE68)
    ]
    MechAltJumpMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF08)]
    MechArmSwingCurveFastWalk: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xF09)
    ]
    MechArmSwingCurveWalk: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xF0A)
    ]
    MechCanUpdateMeshWhileMaintenanceUIActive: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xF0B)
    ]
    MechFirstPersonTurretTweaksEnabled: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xF0C)
    ]
    MechStrafeEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF0D)]
    MechTitanFallTerrainEditEnabled: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xF0E)
    ]
    RaceFinishAtStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF0F)]
    ShowAllCheckpoints: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF10)]
    ShowTempVehicleMesh: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF11)]
    ShowVehicleDebugging: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF12)]
    ShowVehicleParticleDebug: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF13)]
    ShowVehicleText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF14)]
    ShowVehicleWheelGuards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF15)]
    SteeringWheelOutputCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xF16)
    ]
    TestAnims: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF17)]
    ThrottleButtonCamRelative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF18)]
    UnderwaterBuoyancyDepthCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xF19)
    ]
    UseFirstPersonCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF1A)]
    VehicleAltControlScheme: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF1B)]
    VehicleDrawAudioDebug: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xF1C)]


@partial_struct
class cGcUIGlobals(Structure):
    ModelViews: Annotated[cGcModelViewCollection, Field(cGcModelViewCollection, 0x0)]
    ShipThumbnailRenderSettings: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2260)
    ]
    HoverShipThumbnailModelView: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x29F0)
    ]
    LargeMultitoolThumbnailModelView: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2AA0)
    ]
    MultitoolThumbnailModelView: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2B50)
    ]
    PetThumbnailModelView: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2C00)
    ]
    RepairBackpackCamera: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2CB0)
    ]
    RepairCamera: Annotated[cTkModelRendererData, Field(cTkModelRendererData, 0x2D60)]
    RepairShipCameraInWorld: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2E10)
    ]
    RepairShipCameraModelView: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2EC0)
    ]
    RepairShipCameraVR: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2F70)
    ]
    RepairWeaponCamera: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x3020)
    ]
    SpookShipThumbnailModelView: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x30D0)
    ]
    FileBrowserTreeViewTemplate: Annotated[
        cTkNGuiTreeViewTemplate, Field(cTkNGuiTreeViewTemplate, 0x3180)
    ]
    SceneInfoTreeViewTemplate: Annotated[
        cTkNGuiTreeViewTemplate, Field(cTkNGuiTreeViewTemplate, 0x3200)
    ]
    SkeletonToolsTreeViewTemplate: Annotated[
        cTkNGuiTreeViewTemplate, Field(cTkNGuiTreeViewTemplate, 0x3280)
    ]
    DebugEditorPreviewEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x3300)
    ]
    FreighterSummonScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x3350)
    ]
    OSDEpicItemRewardEffect: Annotated[
        cGcHUDEffectRewardData, Field(cGcHUDEffectRewardData, 0x33A0)
    ]
    OSDRareItemRewardEffect: Annotated[
        cGcHUDEffectRewardData, Field(cGcHUDEffectRewardData, 0x33F0)
    ]
    SystemHooverLEDColours: Annotated[basic.Colour, Field(basic.Colour, 0x3440)]
    SystemHooverStatusBarColours: Annotated[basic.Colour, Field(basic.Colour, 0x3490)]
    TargetDisplayScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x34E0)
    ]
    SpaceMapAtlasData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x3530)
    ]
    SpaceMapBlackHoleData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x3560)
    ]
    SpaceMapFreighterData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x3590)
    ]
    SpaceMapMarkerData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x35C0)
    ]
    SpaceMapNexusData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x35F0)
    ]
    SpaceMapPlanetData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x3620)
    ]
    SpaceMapPulseEncounterData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x3650)
    ]
    SpaceMapShipData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x3680)
    ]
    SpaceMapStationData: Annotated[
        cGcSpaceMapObjectData, Field(cGcSpaceMapObjectData, 0x36B0)
    ]
    AltimeterBandColour1: Annotated[basic.Colour, Field(basic.Colour, 0x36E0)]
    AltimeterBandColour2: Annotated[basic.Colour, Field(basic.Colour, 0x36F0)]
    AltimeterColour1: Annotated[basic.Colour, Field(basic.Colour, 0x3700)]
    AltimeterColour2: Annotated[basic.Colour, Field(basic.Colour, 0x3710)]
    BaseComplexityDangerColour: Annotated[basic.Colour, Field(basic.Colour, 0x3720)]
    BaseComplexityDefaultColour: Annotated[basic.Colour, Field(basic.Colour, 0x3730)]
    BaseComplexityWarningColour: Annotated[basic.Colour, Field(basic.Colour, 0x3740)]
    BinocularPanelLinePointOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3750)
    ]
    BuildMenuErrorTextColour: Annotated[basic.Colour, Field(basic.Colour, 0x3760)]
    BuildMenuErrorTextFlashColour: Annotated[basic.Colour, Field(basic.Colour, 0x3770)]
    BuildMenuErrorTextOutlineColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3780)
    ]
    BuildMenuErrorTextOutlineFlashColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3790)
    ]
    BuildMenuInfoTextColour: Annotated[basic.Colour, Field(basic.Colour, 0x37A0)]
    BuildMenuInfoTextOutlineColour: Annotated[basic.Colour, Field(basic.Colour, 0x37B0)]
    BuildMenuPassiveErrorTextColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x37C0)
    ]
    BuildMenuPassiveErrorTextOutlineColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x37D0)
    ]
    ByteBeatArpGridActiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x37E0)]
    ByteBeatArpGridInactiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x37F0)]
    ByteBeatArpPipActiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x3800)]
    ByteBeatArpPipInactiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x3810)]
    ByteBeatRhythmColour0Active: Annotated[basic.Colour, Field(basic.Colour, 0x3820)]
    ByteBeatRhythmColour0Inactive: Annotated[basic.Colour, Field(basic.Colour, 0x3830)]
    ByteBeatRhythmColour1Active: Annotated[basic.Colour, Field(basic.Colour, 0x3840)]
    ByteBeatRhythmColour1Inactive: Annotated[basic.Colour, Field(basic.Colour, 0x3850)]
    ByteBeatRhythmColour2Active: Annotated[basic.Colour, Field(basic.Colour, 0x3860)]
    ByteBeatRhythmColour2Inactive: Annotated[basic.Colour, Field(basic.Colour, 0x3870)]
    ByteBeatSequencerBGColourActive: Annotated[
        basic.Colour, Field(basic.Colour, 0x3880)
    ]
    ByteBeatSequencerBGColourInactive: Annotated[
        basic.Colour, Field(basic.Colour, 0x3890)
    ]
    ByteBeatSequencerHighlightColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x38A0)
    ]
    ByteBeatSequencerRimColourActive: Annotated[
        basic.Colour, Field(basic.Colour, 0x38B0)
    ]
    ByteBeatSequencerRimColourInactive: Annotated[
        basic.Colour, Field(basic.Colour, 0x38C0)
    ]
    ByteBeatSequencerUnpoweredTint: Annotated[basic.Colour, Field(basic.Colour, 0x38D0)]
    ByteBeatSliderFGColour: Annotated[basic.Colour, Field(basic.Colour, 0x38E0)]
    ByteBeatSliderTextActiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x38F0)]
    ByteBeatSliderTextInactiveColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3900)
    ]
    ByteBeatTreeLineColour: Annotated[basic.Colour, Field(basic.Colour, 0x3910)]
    ByteBeatVisGridColour: Annotated[basic.Colour, Field(basic.Colour, 0x3920)]
    ByteBeatVisLineColour: Annotated[basic.Colour, Field(basic.Colour, 0x3930)]
    CommunicatorMessageColour: Annotated[basic.Colour, Field(basic.Colour, 0x3940)]
    CrosshairColour: Annotated[basic.Colour, Field(basic.Colour, 0x3950)]
    CrosshairLeadPassiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x3960)]
    CrosshairLeadThreatColour: Annotated[basic.Colour, Field(basic.Colour, 0x3970)]
    CursorColour: Annotated[basic.Colour, Field(basic.Colour, 0x3980)]
    CursorConfirmColour: Annotated[basic.Colour, Field(basic.Colour, 0x3990)]
    CursorDeleteColour: Annotated[basic.Colour, Field(basic.Colour, 0x39A0)]
    CursorTransferUploadColour: Annotated[basic.Colour, Field(basic.Colour, 0x39B0)]
    DamageNumberCriticalColour: Annotated[basic.Colour, Field(basic.Colour, 0x39C0)]
    DamageNumberIneffectiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x39D0)]
    DamageNumberIneffectiveWarningColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x39E0)
    ]
    DeathMessageColour: Annotated[basic.Colour, Field(basic.Colour, 0x39F0)]
    DebugEditorAxisColourAtActive: Annotated[basic.Colour, Field(basic.Colour, 0x3A00)]
    DebugEditorAxisColourAtInactive: Annotated[
        basic.Colour, Field(basic.Colour, 0x3A10)
    ]
    DebugEditorAxisColourRightActive: Annotated[
        basic.Colour, Field(basic.Colour, 0x3A20)
    ]
    DebugEditorAxisColourRightInactive: Annotated[
        basic.Colour, Field(basic.Colour, 0x3A30)
    ]
    DebugEditorAxisColourUpActive: Annotated[basic.Colour, Field(basic.Colour, 0x3A40)]
    DebugEditorAxisColourUpInactive: Annotated[
        basic.Colour, Field(basic.Colour, 0x3A50)
    ]
    DefaultRefinerOffsetIn: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x3A60)]
    DefaultRefinerOffsetOut: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x3A70)]
    EnergyBgColour: Annotated[basic.Colour, Field(basic.Colour, 0x3A80)]
    EnergyBgPulseColour: Annotated[basic.Colour, Field(basic.Colour, 0x3A90)]
    FaceLockedScreenOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x3AA0)]
    FreighterSummonScanEffectColourBlocked: Annotated[
        basic.Colour, Field(basic.Colour, 0x3AB0)
    ]
    FreighterSummonScanEffectColourHighlight: Annotated[
        basic.Colour, Field(basic.Colour, 0x3AC0)
    ]
    FrontendCursorBackgroundColour: Annotated[basic.Colour, Field(basic.Colour, 0x3AD0)]
    FuelBgColour: Annotated[basic.Colour, Field(basic.Colour, 0x3AE0)]
    GridBackgroundNegativeColour: Annotated[basic.Colour, Field(basic.Colour, 0x3AF0)]
    GridBackgroundNeutralColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B00)]
    GridBackgroundPositiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B10)]
    GridDisconnectedColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B20)]
    GridOfflineColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B30)]
    GridOnlineColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B40)]
    HazardBgPulseColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B50)]
    HazardDamagePulseColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B60)]
    HmdFramerateScreenOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x3B70)]
    HUDMarkerColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B80)]
    HUDNotifyColour: Annotated[basic.Colour, Field(basic.Colour, 0x3B90)]
    HUDOutpostColour: Annotated[basic.Colour, Field(basic.Colour, 0x3BA0)]
    HUDPlayerTrackArrowDamageGlowHullHitMaxColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3BB0)
    ]
    HUDPlayerTrackArrowDamageGlowHullHitMinColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3BC0)
    ]
    HUDPlayerTrackArrowDamageGlowShieldHitMaxColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3BD0)
    ]
    HUDPlayerTrackArrowDamageGlowShieldHitMinColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3BE0)
    ]
    HUDPlayerTrackArrowDotColour: Annotated[basic.Colour, Field(basic.Colour, 0x3BF0)]
    HUDPlayerTrackArrowDotColourPirate: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C00)
    ]
    HUDPlayerTrackArrowDotColourPolice: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C10)
    ]
    HUDPlayerTrackArrowDotColourTrader: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C20)
    ]
    HUDPlayerTrackArrowEnergyShieldColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C30)
    ]
    HUDPlayerTrackArrowEnergyShieldDepletedGlowMaxColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C40)
    ]
    HUDPlayerTrackArrowEnergyShieldDepletedGlowMinColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C50)
    ]
    HUDPlayerTrackArrowEnergyShieldLowColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C60)
    ]
    HUDPlayerTrackArrowEnergyShieldStartChargeGlowMaxColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C70)
    ]
    HUDPlayerTrackArrowEnergyShieldStartChargeGlowMinColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3C80)
    ]
    HUDPlayerTrackArrowTextColour: Annotated[basic.Colour, Field(basic.Colour, 0x3C90)]
    HUDRelicMarkerColourDiscovered: Annotated[basic.Colour, Field(basic.Colour, 0x3CA0)]
    HUDRelicMarkerColourUnknown: Annotated[basic.Colour, Field(basic.Colour, 0x3CB0)]
    HUDSpaceshipColour: Annotated[basic.Colour, Field(basic.Colour, 0x3CC0)]
    HUDWarningColour: Annotated[basic.Colour, Field(basic.Colour, 0x3CD0)]
    IconGlowColourActive: Annotated[basic.Colour, Field(basic.Colour, 0x3CE0)]
    IconGlowColourError: Annotated[basic.Colour, Field(basic.Colour, 0x3CF0)]
    IconGlowColourHighlight: Annotated[basic.Colour, Field(basic.Colour, 0x3D00)]
    IconGlowColourNeutral: Annotated[basic.Colour, Field(basic.Colour, 0x3D10)]
    InteractionLabelCostColour: Annotated[basic.Colour, Field(basic.Colour, 0x3D20)]
    InteractionLabelPickupColour: Annotated[basic.Colour, Field(basic.Colour, 0x3D30)]
    InteractionLabelPickupFillColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3D40)
    ]
    InvSlotGradientBaseColour: Annotated[basic.Colour, Field(basic.Colour, 0x3D50)]
    InWorldInteractLabelCentreOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3D60)
    ]
    InWorldInteractLabelLineOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3D70)
    ]
    InWorldInteractLabelTopOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3D80)
    ]
    InWorldNGuiScreenRotation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x3D90)]
    InWorldStaffBinocsScreenOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3DA0)
    ]
    ItemSlotColourPartiallyInstalled: Annotated[
        basic.Colour, Field(basic.Colour, 0x3DB0)
    ]
    ItemSlotColourProduct: Annotated[basic.Colour, Field(basic.Colour, 0x3DC0)]
    ItemSlotColourSubstance: Annotated[basic.Colour, Field(basic.Colour, 0x3DD0)]
    ItemSlotColourTech: Annotated[basic.Colour, Field(basic.Colour, 0x3DE0)]
    ItemSlotColourTechCharge: Annotated[basic.Colour, Field(basic.Colour, 0x3DF0)]
    ItemSlotColourTechDamage: Annotated[basic.Colour, Field(basic.Colour, 0x3E00)]
    ItemSlotTextColourProduct: Annotated[basic.Colour, Field(basic.Colour, 0x3E10)]
    ItemSlotTextColourSubstance: Annotated[basic.Colour, Field(basic.Colour, 0x3E20)]
    ItemSlotTextColourTech: Annotated[basic.Colour, Field(basic.Colour, 0x3E30)]
    JoaoBoxCompletedObjectiveColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3E40)
    ]
    LockOnMarkerActiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x3E50)]
    LowerHelmetScreenOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x3E60)]
    MarkerRingBGColour: Annotated[basic.Colour, Field(basic.Colour, 0x3E70)]
    MissionOSDMessageBarColour: Annotated[basic.Colour, Field(basic.Colour, 0x3E80)]
    MultiplayerMissionParticipantsColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x3E90)
    ]
    NetworkPopupTextDisabledColour: Annotated[basic.Colour, Field(basic.Colour, 0x3EA0)]
    NetworkPopupTextEnabledColour: Annotated[basic.Colour, Field(basic.Colour, 0x3EB0)]
    NGuiModelTranslationFactors: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3EC0)
    ]
    NGuiModelTranslationFactorsInteraction: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3ED0)
    ]
    NGuiThumbnailModelTranslationFactors: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x3EE0)
    ]
    NotificationDangerColour: Annotated[basic.Colour, Field(basic.Colour, 0x3EF0)]
    NotificationDefaultColour: Annotated[basic.Colour, Field(basic.Colour, 0x3F00)]
    NotificationInfoColour: Annotated[basic.Colour, Field(basic.Colour, 0x3F10)]
    NotificationUrgentColour: Annotated[basic.Colour, Field(basic.Colour, 0x3F20)]
    OutpostReturnMarkerOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x3F30)]
    PhotoModeSelectedColour: Annotated[basic.Colour, Field(basic.Colour, 0x3F40)]
    PhotoModeUnselectedColour: Annotated[basic.Colour, Field(basic.Colour, 0x3F50)]
    PickedItemBorderColour: Annotated[basic.Colour, Field(basic.Colour, 0x3F60)]
    PinnedRecipeBorder: Annotated[basic.Colour, Field(basic.Colour, 0x3F70)]
    ProcProductColourCommon: Annotated[basic.Colour, Field(basic.Colour, 0x3F80)]
    ProcProductColourRare: Annotated[basic.Colour, Field(basic.Colour, 0x3F90)]
    ProcProductColourUncommon: Annotated[basic.Colour, Field(basic.Colour, 0x3FA0)]
    PulseAlertColour: Annotated[basic.Colour, Field(basic.Colour, 0x3FB0)]
    PulseDamageColour: Annotated[basic.Colour, Field(basic.Colour, 0x3FC0)]
    QuickMenuSelectedItemColour1: Annotated[basic.Colour, Field(basic.Colour, 0x3FD0)]
    QuickMenuSelectedItemColour2: Annotated[basic.Colour, Field(basic.Colour, 0x3FE0)]
    RadialMenuInnerColourDisabled: Annotated[basic.Colour, Field(basic.Colour, 0x3FF0)]
    RadialMenuInnerColourSelected: Annotated[basic.Colour, Field(basic.Colour, 0x4000)]
    RadialMenuInnerColourUnselected: Annotated[
        basic.Colour, Field(basic.Colour, 0x4010)
    ]
    RadialMenuOuterColourDisabled: Annotated[basic.Colour, Field(basic.Colour, 0x4020)]
    RadialMenuOuterColourSelected: Annotated[basic.Colour, Field(basic.Colour, 0x4030)]
    RadialMenuOuterColourUnselected: Annotated[
        basic.Colour, Field(basic.Colour, 0x4040)
    ]
    RefinerBackgroundColour: Annotated[basic.Colour, Field(basic.Colour, 0x4050)]
    RefinerErrorBackgroundColour: Annotated[basic.Colour, Field(basic.Colour, 0x4060)]
    RemappedControlColour: Annotated[basic.Colour, Field(basic.Colour, 0x4070)]
    SelectedControlColour: Annotated[basic.Colour, Field(basic.Colour, 0x4080)]
    SettlementStatBackgroundColour: Annotated[basic.Colour, Field(basic.Colour, 0x4090)]
    SettlementStatColour: Annotated[basic.Colour, Field(basic.Colour, 0x40A0)]
    ShieldBgColour: Annotated[basic.Colour, Field(basic.Colour, 0x40B0)]
    ShieldColour: Annotated[basic.Colour, Field(basic.Colour, 0x40C0)]
    ShieldDamageBgColour: Annotated[basic.Colour, Field(basic.Colour, 0x40D0)]
    ShieldDamageColour: Annotated[basic.Colour, Field(basic.Colour, 0x40E0)]
    ShipBuilderLineColour: Annotated[basic.Colour, Field(basic.Colour, 0x40F0)]
    ShipBuilderLineColourHologram: Annotated[basic.Colour, Field(basic.Colour, 0x4100)]
    ShipHUDAimTargetColour: Annotated[basic.Colour, Field(basic.Colour, 0x4110)]
    ShipHUDAimTargetCritColour: Annotated[basic.Colour, Field(basic.Colour, 0x4120)]
    ShipHUDTargetArrowsColourLocal: Annotated[basic.Colour, Field(basic.Colour, 0x4130)]
    ShipHUDTargetArrowsColourOutOfRange: Annotated[
        basic.Colour, Field(basic.Colour, 0x4140)
    ]
    ShipHUDTargetArrowsColourThreat: Annotated[
        basic.Colour, Field(basic.Colour, 0x4150)
    ]
    ShipTeleportPadMarkerOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x4160)
    ]
    SpaceEnemyShipLineColour: Annotated[basic.Colour, Field(basic.Colour, 0x4170)]
    SpaceFriendlyShipLineColour: Annotated[basic.Colour, Field(basic.Colour, 0x4180)]
    SpaceMapAttackColour: Annotated[basic.Colour, Field(basic.Colour, 0x4190)]
    SpaceMapCockpitOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x41A0)]
    SpaceMapDeathPointColour: Annotated[basic.Colour, Field(basic.Colour, 0x41B0)]
    SpaceMapNeutralColour: Annotated[basic.Colour, Field(basic.Colour, 0x41C0)]
    SpaceMapOtherPlayerColour: Annotated[basic.Colour, Field(basic.Colour, 0x41D0)]
    SpaceMapPosScaler: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x41E0)]
    SpaceMapSquadronColour: Annotated[basic.Colour, Field(basic.Colour, 0x41F0)]
    SpaceMapThreatColour: Annotated[basic.Colour, Field(basic.Colour, 0x4200)]
    SpookMeterColour: Annotated[basic.Colour, Field(basic.Colour, 0x4210)]
    StoreDialFillColour: Annotated[basic.Colour, Field(basic.Colour, 0x4220)]
    SuperchargeGradientBaseColour: Annotated[basic.Colour, Field(basic.Colour, 0x4230)]
    SuperchargeGradientBlendColour: Annotated[basic.Colour, Field(basic.Colour, 0x4240)]
    SuperchargeGradientTechColour: Annotated[basic.Colour, Field(basic.Colour, 0x4250)]
    SuperchargePopupColour: Annotated[basic.Colour, Field(basic.Colour, 0x4260)]
    TargetDisplayShipOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x4270)]
    TargetDisplayTorpedoOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x4280)]
    TargetMarkerColour: Annotated[basic.Colour, Field(basic.Colour, 0x4290)]
    TargetMarkerHighlightColour: Annotated[basic.Colour, Field(basic.Colour, 0x42A0)]
    TouchButtonChargeIndicatorColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x42B0)
    ]
    TransferSendPopupColour: Annotated[basic.Colour, Field(basic.Colour, 0x42C0)]
    TravelLineColour: Annotated[basic.Colour, Field(basic.Colour, 0x42D0)]
    TravelLineInvalidColour: Annotated[basic.Colour, Field(basic.Colour, 0x42E0)]
    TravelLineNotAllowedColour: Annotated[basic.Colour, Field(basic.Colour, 0x42F0)]
    TravelLineTooFarColour: Annotated[basic.Colour, Field(basic.Colour, 0x4300)]
    TravelLineTooSteepColour: Annotated[basic.Colour, Field(basic.Colour, 0x4310)]
    TravelTargetColour: Annotated[basic.Colour, Field(basic.Colour, 0x4320)]
    UnseenItemColour: Annotated[basic.Colour, Field(basic.Colour, 0x4330)]
    WantedColour: Annotated[basic.Colour, Field(basic.Colour, 0x4340)]
    WristMenuDefaultBorderColour: Annotated[basic.Colour, Field(basic.Colour, 0x4350)]
    WristMenuRepositionableBorderColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x4360)
    ]
    WonderCreatureCategoryConfig: Annotated[
        cGcWonderCategoryConfig, Field(cGcWonderCategoryConfig, 0x4370)
    ]
    WonderTreasureCategoryConfig: Annotated[
        cGcWonderCategoryConfig, Field(cGcWonderCategoryConfig, 0x46B8)
    ]
    BuildMenuOnActionDisabledLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4990)
    ]
    BuildMenuOnActionErrorLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4C30)
    ]
    BuildMenuOnActionLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4ED0)
    ]
    WonderCustomCategoryConfig: Annotated[
        cGcWonderCategoryConfig, Field(cGcWonderCategoryConfig, 0x5170)
    ]
    WonderPlanetCategoryConfig: Annotated[
        cGcWonderCategoryConfig, Field(cGcWonderCategoryConfig, 0x5410)
    ]
    WonderWeirdBasePartCategoryConfig: Annotated[
        cGcWonderCategoryConfig, Field(cGcWonderCategoryConfig, 0x5678)
    ]
    WonderFloraCategoryConfig: Annotated[
        cGcWonderCategoryConfig, Field(cGcWonderCategoryConfig, 0x58E0)
    ]
    WonderMineralCategoryConfig: Annotated[
        cGcWonderCategoryConfig, Field(cGcWonderCategoryConfig, 0x5AA0)
    ]
    IntroTiming: Annotated[cGcHUDStartupTable, Field(cGcHUDStartupTable, 0x5C60)]
    IntroTimingFreighter: Annotated[
        cGcHUDStartupTable, Field(cGcHUDStartupTable, 0x5DB0)
    ]
    IntroTimingFreighterRepaired: Annotated[
        cGcHUDStartupTable, Field(cGcHUDStartupTable, 0x5F00)
    ]
    SettlementStatFormatLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x6050)
    ]
    SettlementStatLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x6150)
    ]
    SettlementStatBasicImages: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x6250)
    ]
    SettlementStatNegativeImages: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x6310)
    ]
    SettlementStatPositiveImages: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x63D0)
    ]
    WonderTypeIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x6490)]
    BaseBuildingPartsGridExpandableIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x6538)
    ]
    BaseBuildingPartsGridExpandedIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x6550)
    ]
    BaseBuildingPartsGridRetractableIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x6568)
    ]
    RefinerPopupEmptyOutputIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x6580)
    ]
    CamoNormalTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6598)
    ]
    CamoTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x65A8)
    ]
    DebugInventoryHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x65B8)]
    ExplorationLogMissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x65C8)]
    HazardDistortionParams: Annotated[
        basic.cTkDynamicArray[basic.Vector4f],
        Field(basic.cTkDynamicArray[basic.Vector4f], 0x65D8),
    ]
    HazardHeightmaps: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x65E8),
    ]
    HazardHeightmapsVR: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x65F8),
    ]
    HazardNormalMaps: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x6608),
    ]
    HazardNormalMapsVR: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x6618),
    ]
    HazardTextures: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x6628),
    ]
    HazardTexturesVR: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x6638),
    ]
    InventoryIconPositions: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x6648),
    ]
    MultiplayerMissionInteractEndTrigger: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x6658)
    ]
    MultiplayerMissionInteractStartTrigger: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x6668)
    ]
    SeasonalRingTable: Annotated[
        basic.cTkDynamicArray[cGcSeasonalRingArray],
        Field(basic.cTkDynamicArray[cGcSeasonalRingArray], 0x6678),
    ]
    ShipHUDTargetArrowsColour: Annotated[
        basic.cTkDynamicArray[basic.Colour],
        Field(basic.cTkDynamicArray[basic.Colour], 0x6688),
    ]
    ShowStatWithDeathQuote: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x6698)]
    StatIcons: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x66A8),
    ]
    VehicleTypeRepairCamera: Annotated[
        basic.cTkDynamicArray[cTkModelRendererData],
        Field(basic.cTkDynamicArray[cTkModelRendererData], 0x66B8),
    ]
    CrosshairTargetLockSizeSpecific: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x66C8)
    ]
    WorldUISettings: Annotated[cGcWorldUISettings, Field(cGcWorldUISettings, 0x6718)]
    WonderValueModifiersCreature: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6768)
    ]
    WonderValueModifiersPlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x67A4)]
    WonderValueModifiersFlora: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x67D0)]
    WonderValueModifiersMineral: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x67F0)
    ]
    BuildProductSlotAction: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x6810)
    ]
    ChargeSlotAction: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x682C)
    ]
    InstallTechSlotAction: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x6848)
    ]
    InventoryHintAction: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x6864)
    ]
    InventoryHintActionNoGlow: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x6880)
    ]
    NewSlotPulseAction: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x689C)
    ]
    NewSlotRevealAction: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x68B8)
    ]
    RepairSlotAction: Annotated[
        cGcInventorySlotActionData, Field(cGcInventorySlotActionData, 0x68D4)
    ]
    InteractionDOFDisabled: Annotated[
        cGcInteractionDof, Field(cGcInteractionDof, 0x68F0)
    ]
    PulseBarData: Annotated[
        cTkNGuiRectanglePulseEffect, Field(cTkNGuiRectanglePulseEffect, 0x6904)
    ]
    PulseIconData: Annotated[
        cTkNGuiRectanglePulseEffect, Field(cTkNGuiRectanglePulseEffect, 0x6914)
    ]
    CrosshairLeadHitCurve: Annotated[cTkHitCurveData, Field(cTkHitCurveData, 0x6924)]
    DiscoveryHelperTimings: Annotated[
        cGcDiscoveryHelperTimings, Field(cGcDiscoveryHelperTimings, 0x6930)
    ]
    ShootableHitCurve: Annotated[cTkHitCurveData, Field(cTkHitCurveData, 0x693C)]
    BinocularEdgeFade: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6948)]
    BinocularsDiscoveryPos: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6950)]
    CompassCentre: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6958)]
    ControlsPageParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6960)]
    CursorlessDialogPageCursorOffset: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6968)
    ]
    DamageNumberSideSpeed: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6970)]
    DialogPageCursorOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6978)]
    HUDMarkerCompassPrimaryIndicatorOffset: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6980)
    ]
    HUDMarkerPrimaryIndicatorOffset: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6988)
    ]
    HUDPlayerSentinelPulseFreq: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6990)]
    HUDPlayerSentinelPulseSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6998)]
    HUDPlayerTrackArrowDamageGlowSize: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x69A0)
    ]
    HUDPlayerTrackArrowEnergyShieldGlowSize: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x69A8)
    ]
    HUDPlayerTrackArrowEnergyShieldSize: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x69B0)
    ]
    HUDPlayerTrackArrowHealthSize: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x69B8)
    ]
    HUDPlayerTrackArrowIconPulseSize: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x69C0)
    ]
    HUDPlayerTrackIconOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x69C8)]
    HUDTargetHealthIconOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x69D0)]
    HUDTargetHealthOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x69D8)]
    HUDTargetHealthSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x69E0)]
    InteractionLabelOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x69E8)]
    InteractionLabelOffset_1: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x69F0)]
    InteractionLabelScreenMax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x69F8)]
    InteractionLabelScreenMin: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A00)]
    InteractionLabelSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A08)]
    InteractionLabelTouchAreaMax: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6A10)
    ]
    InteractionLabelTouchAreaMin: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6A18)
    ]
    InteractionWorldParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A20)]
    IntermediateInteractionPageCursorOffset: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6A28)
    ]
    InWorldGameGuiAlignment: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A30)]
    InWorldInteractLabelAlignment: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6A38)
    ]
    InWorldNGuiParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A40)]
    MainMenuSaveIconPosition: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A48)]
    MarkerDistanceVRAlignment: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A50)]
    ModelViewWorldParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A58)]
    NGuiMax2DParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A60)]
    NGuiMin2DParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A68)]
    NGuiModelParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A70)]
    NGuiShipInteractParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A78)]
    NGuiTouchPadSensitivity: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6A80)]
    NotificationMissionHintPauseTime: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6A88)
    ]
    NotificationMissionHintPauseTimeCritical: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6A90)
    ]
    NotificationMissionHintPauseTimeSecondary: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x6A98)
    ]
    PersonalRefinerInputPos: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AA0)]
    PersonalRefinerOutputPos: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AA8)]
    PickingCursorOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AB0)]
    PlanetLabelOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AB8)]
    PlanetLineOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AC0)]
    PlanetMeasureOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AC8)]
    RefinerParallax: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AD0)]
    SaveIconPosition: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AD8)]
    ScanLabelOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AE0)]
    TargetScreenCamOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AE8)]
    TrackCriticalHitOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AF0)]
    TrackTypeIconOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x6AF8)]
    AbandonedFreighterAirlockRoomNumber: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x6B00)
    ]
    AccessibleUIHUDPopupScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B04)]
    AccessibleUIPopupScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B08)]
    AlignmentRequiredToDisableFrostedGlass: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B0C)
    ]
    AltimeterLineSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B10)]
    AltimeterMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B14)]
    AltimeterMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B18)]
    AltimeterMinValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B1C)]
    AltimeterResolution: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B20)]
    AltimeterTextSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B24)]
    AltimeterWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B28)]
    AlwaysOnHazardMultiplierCold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B2C)
    ]
    AlwaysOnHazardMultiplierHeat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B30)
    ]
    AlwaysOnHazardMultiplierRad: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B34)
    ]
    AlwaysOnHazardMultiplierSpook: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B38)
    ]
    AlwaysOnHazardMultiplierTox: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B3C)
    ]
    AlwaysOnHazardStrengthCold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B40)]
    AlwaysOnHazardStrengthHeat: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B44)]
    AlwaysOnHazardStrengthRad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B48)]
    AlwaysOnHazardStrengthSpook: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B4C)
    ]
    AlwaysOnHazardStrengthTox: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B50)]
    AlwaysOnHazardThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B54)]
    AlwaysShowIconFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B58)]
    AlwaysShowIconFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B5C)]
    AmbientModeFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B60)]
    ArrowBounceLeftRate1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B64)]
    ArrowBounceLeftRate2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B68)]
    ArrowBounceLeftRate3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B6C)]
    ArrowBounceLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B70)]
    ArrowBounceRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B74)]
    ArrowBounceRightRate1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B78)]
    ArrowBounceRightRate2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B7C)]
    AsteroidMarkerMinDisplayAngleDegrees: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B80)
    ]
    AsteroidMarkerMinDisplayDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B84)
    ]
    BaseBuildingFreeRotateDelayBeforeAudioStops: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B88)
    ]
    BaseBuildingFreeRotateDelayBeforeReset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B8C)
    ]
    BaseBuildingFreeRotateSpeedPadMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B90)
    ]
    BaseBuildingInputHighlightAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B94)
    ]
    BaseBuildingInputHighlightDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B98)
    ]
    BaseBuildingMaxFreeRotateSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6B9C)
    ]
    BaseBuildingMinFreeRotateSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BA0)
    ]
    BaseBuildingPartsGridBreadcrumbFlashDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BA4)
    ]
    BaseBuildingPartsGridMaxCursorRestorationTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BA8)
    ]
    BaseBuildingPartsGridMinVisibilityForActive: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BAC)
    ]
    BaseBuildingPartsGridPopupDelay: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BB0)
    ]
    BaseBuildingPartsGridScrollSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BB4)
    ]
    BaseBuildingPartsGridScrollSpeedPad: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BB8)
    ]
    BaseBuildingPinHighlightDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BBC)
    ]
    BaseBuildingRotationResetRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BC0)
    ]
    BaseBuildingScaleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6BC4)]
    BaseBuildingTimeToMaxRotationSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BC8)
    ]
    BaseBuildingUIAdjustTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6BCC)]
    BaseBuildingUIErrorFadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BD0)
    ]
    BaseBuildingUIHorizontalSafeArea: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BD4)
    ]
    BaseBuildingUIVerticalOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BD8)
    ]
    BaseBuildingUIVerticalOffsetEdit: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BDC)
    ]
    BaseBuildingUIVerticalOffsetFromBB: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BE0)
    ]
    BaseBuildingUIVerticalPosWiring: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BE4)
    ]
    BaseBuildingUIVerticalSafeArea: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BE8)
    ]
    BaseComplexityDangerFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6BEC)]
    BaseComplexityWarningFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6BF0)
    ]
    BattleHUDBarInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6BF4)]
    BeaconHUDMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6BF8)]
    BinocularMarkerSideAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6BFC)]
    BinocularMarkerUpAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C00)]
    BinocularsAltUIRescaleFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C04)
    ]
    BinocularScreenOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C08)]
    BinocularScreenScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C0C)]
    BinocularsFarIconDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C10)]
    BinocularsFarIconFadeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C14)]
    BinocularsFarIconOpacity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C18)]
    BinocularsMidIconOpacity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C1C)]
    BinocularsNearIconDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C20)]
    BinocularsNearIconFadeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C24)]
    BinocularsNearIconOpacity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C28)]
    BountyMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C2C)]
    BuildingShopMaxItems: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6C30)]
    BuildMenuActionMessageDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C34)
    ]
    BuildMenuItemNavAnimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C38)]
    BuildMenuItemNextNavAnimTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C3C)
    ]
    BuildMenuItemNextNavAnimWait: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C40)
    ]
    ByteBeatArpLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C44)]
    ByteBeatArpPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C48)]
    ByteBeatArpRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C4C)]
    ByteBeatIconLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C50)]
    ByteBeatIconPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C54)]
    ByteBeatPartSequencerPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C58)]
    ByteBeatRhythmBeatPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C5C)]
    ByteBeatRhythmSequencerActiveSaturation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C60)
    ]
    ByteBeatRhythmSequencerInactiveSaturation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C64)
    ]
    ByteBeatSequencerActiveSaturation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C68)
    ]
    ByteBeatSequencerCornerRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C6C)
    ]
    ByteBeatSequencerHighlightLineWidth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C70)
    ]
    ByteBeatSequencerInactiveSaturation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C74)
    ]
    ByteBeatSequencerLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C78)]
    ByteBeatSequencerPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C7C)]
    ByteBeatSequencerUnpoweredTintStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6C80)
    ]
    ByteBeatSliderCornerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C84)]
    ByteBeatSliderLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C88)]
    ByteBeatSliderPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C8C)]
    ByteBeatSwitchPanelAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C90)]
    ByteBeatSwitchPanelSplit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C94)]
    ByteBeatTreeLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C98)]
    ByteBeatVisLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C9C)]
    ClosestDoorMarkerBuffer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CA0)]
    CockpitGlassDefrostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CA4)]
    CockpitGlassFrostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CA8)]
    CommunicatorMessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CAC)]
    CompassAngleClamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CB0)]
    CompassAngleClampSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CB4)]
    CompassAngleFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CB8)]
    CompassDistanceMarkerMinScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CBC)
    ]
    CompassDistanceMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CC0)]
    CompassDistanceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CC4)]
    CompassDistanceScaleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CC8)]
    CompassDistanceScaleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CCC)]
    CompassDistanceShipMinScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CD0)
    ]
    CompassDistanceSpaceScaleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CD4)
    ]
    CompassDistanceSpaceScaleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CD8)
    ]
    CompassDistanceYOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CDC)]
    CompassHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CE0)]
    CompassIconOffsetVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CE4)]
    CompassLineContractionEndAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CE8)
    ]
    CompassLineContractionStartAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CEC)
    ]
    CompassLineContractionTargetAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6CF0)
    ]
    CompassLineNotchAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CF4)]
    CompassLineNotchLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CF8)]
    CompassLineNotchThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6CFC)]
    CompassLineNumNotches: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6D00)]
    CompassLineOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D04)]
    CompassLineThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D08)]
    CompassScreenHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6D0C)]
    CompassScreenWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6D10)]
    CompassWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D14)]
    ConsoleTextSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D18)]
    ConsoleTextTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D1C)]
    ConsoleTextTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D20)]
    ControlScrollDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D24)]
    ControlScrollSteps: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6D28)]
    CreatureDistanceAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D2C)]
    CreatureDistanceDisplayAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6D30)
    ]
    CreatureDistanceFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D34)]
    CreatureDistanceOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D38)]
    CreatureDistanceShadowOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6D3C)
    ]
    CreatureDistanceSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D40)]
    CreatureIconMergeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D44)]
    CreatureIconOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D48)]
    CreatureIconOffsetPhysics: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D4C)]
    CreatureInteractLabelOffsetY: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6D50)
    ]
    CreatureReticuleScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D54)]
    CreatureRoutineMarkerTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D58)]
    CreatureRoutineRegionsPerFrame: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x6D5C)
    ]
    CriticalMessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D60)]
    CrosshairAimOffTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D64)]
    CrosshairAimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D68)]
    CrosshairInnerMinFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D6C)]
    CrosshairInnerMinFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D70)]
    CrosshairInterceptAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D74)]
    CrosshairInterceptBaseSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D78)]
    CrosshairInterceptCentreBaseSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6D7C)
    ]
    CrosshairInterceptLockRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6D80)
    ]
    CrosshairInterceptSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D84)]
    CrosshairInterceptSpringTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6D88)
    ]
    CrosshairLeadCornerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D8C)]
    CrosshairLeadFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D90)]
    CrosshairLeadFadeSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D94)]
    CrosshairLeadInDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D98)]
    CrosshairLeadInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6D9C)]
    CrosshairLeadPulseSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DA0)]
    CrosshairLeadScaleIn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DA4)]
    CrosshairLeadSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DA8)]
    CrosshairLeadSpringOff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DAC)]
    CrosshairLeadTopLock: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DB0)]
    CrosshairLeadTopOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DB4)]
    CrosshairOffsetHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DB8)]
    CrosshairOffsetHmdUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DBC)]
    CrosshairScaleHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DC0)]
    CrosshairScreenHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6DC4)]
    CrosshairScreenWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6DC8)]
    CrosshairSpringAimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DCC)]
    CrosshairSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DD0)]
    CrosshairTargetLockSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DD4)]
    CursorHoverSlowFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DD8)]
    CursorHoverSlowFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DDC)]
    CursorHoverSlowFixedValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DE0)]
    DamageDirectionIndicatorOnScreenRadiusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6DE4)
    ]
    DamageImpactMergeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DE8)]
    DamageImpactMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DEC)]
    DamageImpactTimeBetweenNumbers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6DF0)
    ]
    DamageNumberBlackAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DF4)]
    DamageNumberFadeIn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DF8)]
    DamageNumberFadeOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6DFC)]
    DamageNumberLaserMaxDamage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E00)]
    DamageNumberLaserMinDamage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E04)]
    DamageNumberOffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E08)]
    DamageNumberOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E0C)]
    DamageNumberOutline: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E10)]
    DamageNumberOutline2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E14)]
    DamageNumberSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E18)]
    DamageNumberSizeCritMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E1C)
    ]
    DamageNumberSizeInShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E20)]
    DamageNumberSizeLaserMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E24)
    ]
    DamageNumberTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E28)]
    DamageNumberUpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E2C)]
    DamagePerSecondSampleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E30)]
    DamageScannableHighlightTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E34)
    ]
    DamageTrackArrowTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E38)]
    DeathMessageSwitchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E3C)]
    DeathMessageTotalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E40)]
    DebugMedalRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6E44)]
    DeepSeaHazardMultiplierCold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E48)
    ]
    DeepSeaHazardMultiplierHeat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E4C)
    ]
    DeepSeaHazardMultiplierRad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E50)]
    DeepSeaHazardMultiplierTox: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E54)]
    DelayBeforeHidingHangarAfterGalaxyMap: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E58)
    ]
    DelayBeforeShowingHangarIntoGalaxyMap: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E5C)
    ]
    DescriptionTextDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E60)]
    DescriptionTextSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E64)]
    DescriptionTextSpeedProgressive: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E68)
    ]
    DescriptionTextTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E6C)]
    DescriptionTextTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E70)]
    DetailMessageDismissTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E74)]
    DroneIndicatorCentreRadiusMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E78)
    ]
    DroneIndicatorCentreRadiusMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E7C)
    ]
    DroneIndicatorFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E80)]
    DroneIndicatorRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E84)]
    EggModifiyAnimLoopTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E88)]
    EggModifiyAnimMaxSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E8C)]
    EndOfSeasonAlertDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E90)]
    ExocraftHUDMarkerHideDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6E94)
    ]
    ExocraftHUDMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E98)]
    ExpeditionStageChangeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6E9C)]
    EyeTrackingCursorBlendRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EA0)]
    EyeTrackingCursorBlendRateGameModeSelect: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6EA4)
    ]
    EyeTrackingPopupLookAwayTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6EA8)
    ]
    EyeTrackingStickyHoverTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EAC)]
    EyeTrackingTimeBeforePopupsActivate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6EB0)
    ]
    FeedFrigateAnimAlphaChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EB4)]
    FeedFrigateAnimNumPeriods: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6EB8)]
    FeedFrigateAnimPeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EBC)]
    FeedFrigateAnimScaleChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EC0)]
    ForceOpenHazardProtInventoryThreshold: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x6EC4)
    ]
    FreighterCommanderMarkerMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6EC8)
    ]
    FreighterEntranceOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6ECC)]
    FreighterHighlightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6ED0)]
    FreighterLeaderIconDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6ED4)
    ]
    FreighterMegaWarpTransitionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6ED8)
    ]
    FreighterSummonDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EDC)]
    FreighterSummonGridSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EE0)]
    FreighterSummonLookTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EE4)]
    FreighterSummonOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EE8)]
    FreighterSummonOffsetPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EEC)]
    FreighterSummonPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EF0)]
    FreighterSummonPlanetOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6EF4)
    ]
    FreighterSummonPulseFadeAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6EF8)
    ]
    FreighterSummonPulseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6EFC)]
    FreighterSummonTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F00)]
    FreighterSummonTurnAngleIncrement: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F04)
    ]
    FreighterSummonTurnNumTries: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x6F08)
    ]
    FreighterSurfaceMinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F0C)]
    FrigateDamageIconVisibilityDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F10)
    ]
    FrigateIconOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F14)]
    FrigatePurchaseNotificationResetDistanceMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F18)
    ]
    FrontendActivateSplit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F1C)]
    FrontendActivateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F20)]
    FrontendBGAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F24)]
    FrontendBootBarTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F28)]
    FrontendBootTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F2C)]
    FrontendConfirmTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F30)]
    FrontendConfirmTimeFast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F34)]
    FrontendConfirmTimeMouseMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F38)
    ]
    FrontendConfirmTimeSlow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F3C)]
    FrontendCursorOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F40)]
    FrontendCursorSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F44)]
    FrontendCursorWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F48)]
    FrontendDeactivateSplit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F4C)]
    FrontendDeactivateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F50)]
    FrontendDoFBlurMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F54)]
    FrontendDoFFarPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F58)]
    FrontendDoFFarPlaneFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F5C)]
    FrontendDoFNearPlane: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F60)]
    FrontendOffsetVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F64)]
    FrontendShineSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F68)]
    FrontendStatCircleWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F6C)]
    FrontendStatCircleWidthExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F70)
    ]
    FrontendTitleFontSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F74)]
    FrontendToolbarTextHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F78)]
    FrontendToolbarTextHeightSelected: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F7C)
    ]
    FrontendTouchConfirmTimeFastMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F80)
    ]
    FrontendWaitFadeProgressiveDialogOut: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F84)
    ]
    FrontendWaitFadeTextFrameOut: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F88)
    ]
    FrontendWaitFadeTextOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F8C)]
    FrontendWaitInitial: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F90)]
    FrontendWaitInitialTerminal: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6F94)
    ]
    FrontendWaitResponse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F98)]
    FrontendWaitResponseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F9C)]
    GalaxyMapRadialBorder: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FA0)]
    GalaxyMapRadialTargetDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FA4)]
    GalmapDiscoveryOffsetVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FA8)]
    GameModeSelectColourFadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6FAC)
    ]
    GridDecayRateSwitchValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FB0)]
    GridFlickerAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FB4)]
    GridFlickerBaseAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FB8)]
    GridFlickerFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FBC)]
    HandButtonClickTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FC0)]
    HandButtonCursorScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FC4)]
    HandButtonDotRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FC8)]
    HandButtonFrontendCursorScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6FCC)
    ]
    HandButtonNearDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FD0)]
    HandButtonPostClickTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FD4)]
    HandButtonPulseRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FD8)]
    HandButtonPulseThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FDC)]
    HandButtonPushDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FE0)]
    HandButtonRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FE4)]
    HandButtonRadiusClick: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FE8)]
    HandButtonRadiusTouch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FEC)]
    HandButtonRadiusTouchNear: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FF0)]
    HandButtonRadiusTouchNearActive: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6FF4)
    ]
    HandButtonReleaseThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6FF8)]
    HandButtonReleaseThresholdInit: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x6FFC)
    ]
    HandButtonThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7000)]
    HandButtonTouchReturnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7004)]
    HandControlButtonSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7008)]
    HandControlMenuAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x700C)]
    HandControlMenuCursorScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7010)]
    HandControlMenuDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7014)]
    HandControlMenuMoveActionDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7018)
    ]
    HandControlMenuMoveDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x701C)
    ]
    HandControlMenuMoveDistanceScroll: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7020)
    ]
    HandControlMenuMoveDistanceVertical: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7024)
    ]
    HandControlMenuSelectRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7028)
    ]
    HandControlMenuSelectRadius1: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x702C)
    ]
    HandControlMenuSelectRadius2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7030)
    ]
    HandControlMenuSurfaceOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7034)
    ]
    HandControlPointActiveMargin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7038)
    ]
    HandControlPointMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x703C)]
    HandControlTopMenuSelectRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7040)
    ]
    HandheldZoomFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7044)]
    HandScreenGraphicsHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7048)]
    HandScreenGraphicsWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x704C)]
    HandScreenHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7050)]
    HandScreenNearActivateDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7054)
    ]
    HandScreenWeaponHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7058)]
    HandScreenWeaponWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x705C)]
    HandScreenWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7060)]
    HatchAlphaBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7064)]
    HatchAlphaCursor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7068)]
    HatchAlphaMain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x706C)]
    HatchCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7070)]
    HatchCursorRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7074)]
    HatchPulsePauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7078)]
    HatchPulseSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x707C)]
    HatchPulseWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7080)]
    HazardArrowsLevel2Threshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7084)
    ]
    HazardArrowsLevel3Threshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7088)
    ]
    HazardBarPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x708C)]
    HazardPainPulseStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7090)]
    HazardPulseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7094)]
    HazardScreenEffectPulseRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7098)
    ]
    HazardScreenEffectPulseTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x709C)
    ]
    HazardScreenEffectStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70A0)]
    HazardWarningPulseStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70A4)]
    HazardWarningPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70A8)]
    HitMarkerPulseSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70AC)]
    HitMarkerPulseSizeStatic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70B0)]
    HitMarkerPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70B4)]
    HmdFramerateScreenPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70B8)]
    HoldTimerResetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70BC)]
    HoverOffscreenBorder: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70C0)]
    HoverOffscreenBorderXVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70C4)]
    HoverOffscreenBorderYAltUI: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70C8)]
    HoverPopAnimDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70CC)]
    HoverPopScaleModification: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70D0)]
    HUDDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70D4)]
    HUDDroneCombatPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70D8)]
    HUDDroneHealingPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70DC)]
    HUDDroneSummoningPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70E0)]
    HUDElementsOffsetHMDBottom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70E4)]
    HUDElementsOffsetHMDSide: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70E8)]
    HUDElementsOffsetHMDTop: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70EC)]
    HUDElementsOffsetX_0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70F0)]
    HUDElementsOffsetX_1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70F4)]
    HUDElementsOffsetX_2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70F8)]
    HUDElementsOffsetX_3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70FC)]
    HUDElementsOffsetX_4: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7100)]
    HUDElementsOffsetX_5: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7104)]
    HUDElementsOffsetY_0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7108)]
    HUDElementsOffsetY_1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x710C)]
    HUDElementsOffsetY_2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7110)]
    HUDElementsOffsetY_3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7114)]
    HUDElementsOffsetY_4: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7118)]
    HUDElementsOffsetY_5: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x711C)]
    HUDMarkerActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7120)]
    HUDMarkerAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7124)]
    HUDMarkerAnimLoopTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7128)]
    HUDMarkerAnimOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x712C)]
    HUDMarkerAnimScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7130)]
    HUDMarkerAnimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7134)]
    HUDMarkerDistanceOrTimeDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7138)
    ]
    HUDMarkerFarDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x713C)]
    HUDMarkerFarFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7140)]
    HUDMarkerHorizonBlendRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7144)]
    HUDMarkerHoverAngleTestGround: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7148)
    ]
    HUDMarkerHoverAngleTestGroundHmd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x714C)
    ]
    HUDMarkerHoverAngleTestShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7150)
    ]
    HUDMarkerHoverShowLargeAngleTest: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7154)
    ]
    HUDMarkerIconHoverMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7158)]
    HUDMarkerLabelArriveDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x715C)
    ]
    HUDMarkerLabelBaseWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7160)]
    HUDMarkerLabelDisplayDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7164)
    ]
    HUDMarkerLabelWidthMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7168)
    ]
    HUDMarkerModelFadeMinHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x716C)
    ]
    HUDMarkerModelFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7170)]
    HUDMarkerNearFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7174)]
    HUDMarkerNearFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7178)]
    HUDMarkerNonActiveMissionAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x717C)
    ]
    HUDMarkerObjectMinScreenDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7180)
    ]
    HUDMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7184)]
    HUDMarkerPrimaryIndicatorSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7188)
    ]
    HUDMarkerScalerMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x718C)]
    HUDMarkerScalerRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7190)]
    HUDMarkerScalerSizeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7194)]
    HUDMarkerScalerSizeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7198)]
    HUDMarkerShipOffsetMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x719C)]
    HUDMarkerShipOffsetMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x71A0)]
    HUDMarkerShowActualIconDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71A4)
    ]
    HUDMarkerShowActualSpaceIconDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71A8)
    ]
    HUDMarkerWideHoverAngleTest: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71AC)
    ]
    HUDMarkerWideHoverAngleTestHmd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71B0)
    ]
    HUDNetworkMarkerHoverAngleTestGround: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71B4)
    ]
    HUDNetworkMarkerHoverAngleVRMul: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71B8)
    ]
    HUDNetworkMarkerHoverShowLargeAngleTest: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71BC)
    ]
    HUDPetCentreScreenAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x71C0)]
    HUDPetMarkerAngleTest: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x71C4)]
    HUDPetMarkerAngleVRMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x71C8)]
    HUDPlayerPhonePulseScanFreq: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71CC)
    ]
    HUDPlayerSentinelPulseScanFreq: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71D0)
    ]
    HUDPlayerSentinelPulseWidth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71D4)
    ]
    HUDPlayerSentinelRangeFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71D8)
    ]
    HUDPlayerTrackArrowArrowSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71DC)
    ]
    HUDPlayerTrackArrowDamageGlowHullHitCriticalOpacityScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71E0)
    ]
    HUDPlayerTrackArrowDamageGlowHullHitOpacityScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71E4)
    ]
    HUDPlayerTrackArrowDamageGlowOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71E8)
    ]
    HUDPlayerTrackArrowDamageGlowShieldHitCriticalOpacityScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71EC)
    ]
    HUDPlayerTrackArrowDamageGlowShieldHitOpacityScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71F0)
    ]
    HUDPlayerTrackArrowDotSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x71F4)]
    HUDPlayerTrackArrowEnergyShieldDepletedGlowOpacityScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71F8)
    ]
    HUDPlayerTrackArrowEnergyShieldDepletedTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x71FC)
    ]
    HUDPlayerTrackArrowEnergyShieldGlowOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7200)
    ]
    HUDPlayerTrackArrowEnergyShieldLowThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7204)
    ]
    HUDPlayerTrackArrowEnergyShieldOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7208)
    ]
    HUDPlayerTrackArrowEnergyShieldStartChargeGlowOpacityScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x720C)
    ]
    HUDPlayerTrackArrowEnergyShieldStartChargeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7210)
    ]
    HUDPlayerTrackArrowFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7214)
    ]
    HUDPlayerTrackArrowGlowBaseOpacity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7218)
    ]
    HUDPlayerTrackArrowHealthOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x721C)
    ]
    HUDPlayerTrackArrowIconBorderReducerShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7220)
    ]
    HUDPlayerTrackArrowIconFadeDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7224)
    ]
    HUDPlayerTrackArrowIconFadeDistDrone: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7228)
    ]
    HUDPlayerTrackArrowIconFadeDistShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x722C)
    ]
    HUDPlayerTrackArrowIconFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7230)
    ]
    HUDPlayerTrackArrowIconFadeRangeShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7234)
    ]
    HUDPlayerTrackArrowIconFadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7238)
    ]
    HUDPlayerTrackArrowIconPulse2Alpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x723C)
    ]
    HUDPlayerTrackArrowIconPulseTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7240)
    ]
    HUDPlayerTrackArrowIconPulseWidth1: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7244)
    ]
    HUDPlayerTrackArrowIconPulseWidth2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7248)
    ]
    HUDPlayerTrackArrowIconShowTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x724C)
    ]
    HUDPlayerTrackArrowIconSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7250)
    ]
    HUDPlayerTrackArrowMinFadeDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7254)
    ]
    HUDPlayerTrackArrowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7258)]
    HUDPlayerTrackArrowPulseOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x725C)
    ]
    HUDPlayerTrackArrowPulseRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7260)
    ]
    HUDPlayerTrackArrowScreenBorder: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7264)
    ]
    HUDPlayerTrackArrowShipLabelOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7268)
    ]
    HUDPlayerTrackArrowSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x726C)]
    HUDPlayerTrackArrowSizeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7270)]
    HUDPlayerTrackArrowSizeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7274)]
    HUDPlayerTrackArrowSmallIconSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7278)
    ]
    HUDPlayerTrackArrowTargetDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x727C)
    ]
    HUDPlayerTrackArrowTargetDistShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7280)
    ]
    HUDPlayerTrackArrowTextExtraHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7284)
    ]
    HUDPlayerTrackArrowTextExtraOffsetX: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7288)
    ]
    HUDPlayerTrackArrowTextExtraOffsetY: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x728C)
    ]
    HUDPlayerTrackArrowTextHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7290)
    ]
    HUDPlayerTrackArrowTextOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7294)
    ]
    HUDPlayerTrackDangerPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7298)]
    HUDPlayerTrackNoSightPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x729C)]
    HUDPlayerTrackTimerEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72A0)]
    HUDPlayerTrackTimerPulseRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x72A4)
    ]
    HUDPlayerTrackTimerStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72A8)]
    HUDPlayerTrackTimerStartFade: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x72AC)
    ]
    HUDTargetHealthDangerTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72B0)]
    HUDTargetHealthIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72B4)]
    HUDTargetIconOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72B8)]
    HUDTargetIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72BC)]
    HUDTargetMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72C0)]
    HUDTargetMarkerSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72C4)]
    IconBackgroundAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72C8)]
    IconGlowStrengthActive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72CC)]
    IconGlowStrengthError: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72D0)]
    IconGlowStrengthHighlight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72D4)]
    IconGlowStrengthNeutral: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72D8)]
    IconPulseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72DC)]
    InfoPortalGuideCycleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72E0)]
    InfoPortalMilestonesCycleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x72E4)
    ]
    InteractionIconInnerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72E8)]
    InteractionIconOuterRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72EC)]
    InteractionInWorldMinScreenDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x72F0)
    ]
    InteractionInWorldMinScreenDistanceV2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x72F4)
    ]
    InteractionInWorldPitchDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x72F8)
    ]
    InteractionInWorldSeatedNPCHeightAdjust: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x72FC)
    ]
    InteractionInWorldSeatedNPCHeightAdjustV2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7300)
    ]
    InteractionLabelHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7304)]
    InteractionLabelHorizontalLineLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7308)
    ]
    InteractionLabelLineAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x730C)]
    InteractionLabelPixelHeightMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7310)
    ]
    InteractionLabelPixelHeightMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7314)
    ]
    InteractionLabelRadiusScaler: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7318)
    ]
    InteractionLabelSpeedClose: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x731C)]
    InteractionLabelSpeedOpen: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7320)]
    InteractionScanDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7324)]
    InteractionScanMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7328)]
    InteractionScanScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x732C)]
    InteractionScanSlapOverallTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7330)
    ]
    InteractionScanSlapScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7334)]
    InteractionScanSlapTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7338)]
    InventoryFullMessageRepeatTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x733C)
    ]
    InventoryIconTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7340)]
    InvSlotGradientFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7344)]
    InvSlotGradientFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7348)]
    InvSlotGradientTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x734C)]
    InWorldInteractionScreenScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7350)
    ]
    InWorldInteractLabelFarDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7354)
    ]
    InWorldInteractLabelFarRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7358)
    ]
    InWorldInteractLabelHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x735C)]
    InWorldInteractLabelMinHeadOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7360)
    ]
    InWorldInteractLabelNearDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7364)
    ]
    InWorldInteractLabelNearRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7368)
    ]
    InWorldInteractLabelScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x736C)]
    InWorldInteractLabelScaleV2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7370)
    ]
    InWorldInteractLabelWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7374)]
    InWorldNGuiScreenScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7378)]
    InWorldNPCInteractionScreenScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x737C)
    ]
    InWorldScreenForwardOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7380)]
    InWorldScreenMinScreenDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7384)
    ]
    InWorldScreenScaleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7388)]
    InWorldUIInteractionDistanceWithEyeTrackingEnabled: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x738C)
    ]
    ItemReceivedMessageTimeToAdd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7390)
    ]
    ItemSlotColourTechChargeRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7394)
    ]
    KeepHazardBarActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7398)]
    KeepSecondHazardBarActiveTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x739C)
    ]
    LandNotifyHeightThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73A0)]
    LandNotifySpeedThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73A4)]
    LandNotifyTimeThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73A8)]
    LargeSpaceIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73AC)]
    LoadFadeInDefaultTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73B0)]
    LoadingScreenTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73B4)]
    LoadingScreenTravelSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73B8)]
    LoadingTravelDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73BC)]
    LockOnMarkerSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73C0)]
    LockOnMarkerSizeLock: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73C4)]
    LowerHelmetScreenPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73C8)]
    LowerHelmetScreenScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73CC)]
    LowHealthShieldFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73D0)]
    LowHealthShieldMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73D4)]
    MaintenanceIconFadeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73D8)]
    MaintenanceIconFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73DC)]
    ManualNotificationPauseTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x73E0)
    ]
    ManualScrollChangePerInputMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x73E4)
    ]
    ManualScrollChangePerInputMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x73E8)
    ]
    MarkerComponentOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73EC)]
    MarkerHorizonApproachAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73F0)]
    MarkerHorizonMinOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73F4)]
    MarkerHorizonOffPlanetLightBeamAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x73F8)
    ]
    MarkerHorizonOffsetAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x73FC)]
    MarkerHorizonShipApproachOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7400)
    ]
    MarkerOffsetTypeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7404)]
    MarkerOffsetTypeAngleAsteroid: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7408)
    ]
    MarkerOffsetTypeAngleBattle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x740C)
    ]
    MarkerOffsetTypeAngleBounty: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7410)
    ]
    MarkerOffsetTypeAnglePlayerShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7414)
    ]
    MarkerRingInnerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7418)]
    MarkerRingOuterRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x741C)]
    MarkerTagAppearDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7420)]
    MaxDialogCharSizeIdeographic: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7424)
    ]
    MaxDialogCharSizeRoman: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7428)]
    MaxNumMessageBeaconIcons: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x742C)]
    MaxProjectorDistanceFromDefault: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7430)
    ]
    MaxProjectorGrabDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7434)]
    MaxSubstanceMaxAmountForAmountFraction: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7438)
    ]
    MessageNotificationTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x743C)]
    MessageTimeQuick: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7440)]
    MilestoneStingDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7444)]
    MinimumHoldFill: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7448)]
    MinSeasonPlayTimeInDays: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x744C)]
    MissileCentreOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7450)]
    MissileIconAttackPulseAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7454)
    ]
    MissileIconAttackPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7458)]
    MissionCompassIconScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x745C)]
    MissionDetailsPageBaseHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7460)
    ]
    MissionLoopCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7464)]
    MissionLoopCountPirate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7468)]
    MissionMarkerSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x746C)]
    MissionObjectiveBaseHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7470)]
    MissionObjectiveDoneHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7474)]
    MissionObjectiveScrollingExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7478)
    ]
    MissionSeedOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x747C)]
    MissionSpecificMissionPercent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7480)
    ]
    MissionStartEndOSDTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7484)]
    MissionStartEndOSDTimeProcedural: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7488)
    ]
    MissionStartEndTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x748C)]
    ModularCustomisationApplyTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7490)
    ]
    MouseRotateCameraSensitivity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7494)
    ]
    MultiplayerTeleportEffectAppearTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7498)
    ]
    MultiplayerTeleportEffectDisappearTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x749C)
    ]
    NGuiActiveAreaOffsetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74A0)]
    NGuiAltPlacementDistanceScrollSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74A4)
    ]
    NGuiCursorOffsetMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74A8)]
    NGuiHmdOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74AC)]
    NGuiModelRotationDegreesX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74B0)]
    NGuiModelRotationDegreesY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74B4)]
    NGuiModelRotationDegreesZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74B8)]
    NGuiModelViewCdSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74BC)]
    NGuiModelViewDistanceDiscoveryPage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74C0)
    ]
    NGuiModelViewDistanceGlobal: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74C4)
    ]
    NGuiModelViewDistanceShipPage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74C8)
    ]
    NGuiModelViewDistanceSuitPage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74CC)
    ]
    NGuiModelViewDistanceWeaponPage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74D0)
    ]
    NGuiModelViewFadeInAfterRenderTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74D4)
    ]
    NGuiModelViewFov: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74D8)]
    NGuiModelViewFractionOfBBHeightAboveReflectivePlane: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74DC)
    ]
    NGuiMouseSensitivity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74E0)]
    NGuiPadSensitivity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74E4)]
    NGuiPlacementAngleScrollSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74E8)
    ]
    NGuiThumbnailModelRotationDegreesY: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74EC)
    ]
    NGuiThumbnailModelViewDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74F0)
    ]
    NotificationBackgroundGradientAlphaInShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74F4)
    ]
    NotificationBackgroundGradientEndOffsetPercentInShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74F8)
    ]
    NotificationBridgeReachDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x74FC)
    ]
    NotificationBuildHintStartTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7500)
    ]
    NotificationCantFireTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7504)]
    NotificationDangerTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7508)]
    NotificationDeviceIdleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x750C)]
    NotificationDiscoveryIdleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7510)
    ]
    NotificationFinalMissionWait: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7514)
    ]
    NotificationGoToSpaceStationWait: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7518)
    ]
    NotificationHazardMinTimeAfterRecharge: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x751C)
    ]
    NotificationHazardSafeThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7520)
    ]
    NotificationHazardTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7524)]
    NotificationInfoIdleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7528)]
    NotificationInteractHintStartTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x752C)
    ]
    NotificationJetpackTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7530)]
    NotificationMaxPageHintTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7534)
    ]
    NotificationMessageCycleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7538)
    ]
    NotificationMinVisibleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x753C)]
    NotificationMissionHintTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7540)
    ]
    NotificationMissionHintTimeCritical: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7544)
    ]
    NotificationMissionHintTimeSecondary: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7548)
    ]
    NotificationMonolithMissionWait: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x754C)
    ]
    NotificationNewTechIdleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7550)
    ]
    NotificationScanEventMissionIdleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7554)
    ]
    NotificationScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7558)]
    NotificationScanTimeCutoff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x755C)]
    NotificationShieldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7560)]
    NotificationShipBoostMinTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7564)
    ]
    NotificationShipBoostReminderTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7568)
    ]
    NotificationShipBoostReminderTimeTutorial: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x756C)
    ]
    NotificationShipBoostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7570)]
    NotificationShipBoostTimeVR: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7574)
    ]
    NotificationShipJumpMinTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7578)
    ]
    NotificationShipJumpReminderTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x757C)
    ]
    NotificationShipJumpReminderTutorial: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7580)
    ]
    NotificationsResourceExtractHintCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7584)
    ]
    NotificationStaminaHintDistanceWalked: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7588)
    ]
    NotificationTimeBeforeHeridiumMarker: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x758C)
    ]
    NotificationUrgentMessageTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7590)
    ]
    NotificationWaypointReachDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7594)
    ]
    NumDeathQuotes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7598)]
    OnFootDamageDirectionIndicatorFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x759C)
    ]
    OnFootDamageDirectionIndicatorRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x75A0)
    ]
    OSDMessagePauseOffscreenAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x75A4)
    ]
    OSDMessageQueueMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x75A8)]
    OSDMessageQueueMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x75AC)]
    OSDMessageQueueSpeedMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x75B0)
    ]
    OutpostPortalMarkerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x75B4)
    ]
    PadCursorAcceleration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75B8)]
    PadCursorMaxSpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75BC)]
    PadCursorUICurveStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75C0)]
    PadRotateCameraSensitivity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75C4)]
    PageTurnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75C8)]
    ParagraphAutoScrollSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75CC)]
    PauseMenuHoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75D0)]
    PetHoverIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75D4)]
    PetHUDMarkerExtraFollowInfoDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x75D8)
    ]
    PetHUDMarkerHideDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75DC)]
    PetHUDMarkerHideDistanceShort: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x75E0)
    ]
    PetHUDMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75E4)]
    PetIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75E8)]
    PetMoodMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75EC)]
    PetSlotUnlockBounceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75F0)]
    PhotoModeTimeofDayChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75F4)]
    PhotoModeValueAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x75F8)]
    PirateAttackIndicatorRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x75FC)
    ]
    PirateAttackIndicatorWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7600)]
    PirateAttackProbeDisplayFinishFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7604)
    ]
    PirateCountdownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7608)]
    PirateFreighterSummonAtOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x760C)
    ]
    PirateFreighterSummonOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7610)
    ]
    PirateFreighterSummonOffsetPulse: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7614)
    ]
    PlacedMarkerFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7618)]
    PlanetDataExtraRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x761C)]
    PlanetLabelAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7620)]
    PlanetLabelTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7624)]
    PlanetPoleEastWestDistanceFromPlayer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7628)
    ]
    PlanetPoleMaxDotProduct: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x762C)]
    PlanetRaidMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7630)]
    PlanetScanDelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7634)]
    PopupActivateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7638)]
    PopupDeactivateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x763C)]
    PopupDebounceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7640)]
    PopupSlotWidthOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7644)]
    PopupTitleGradientFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7648)]
    PopupValueSectionBaseHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x764C)
    ]
    PopupValueSectionHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7650)]
    PopupXClampOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7654)]
    PopupXClampOffsetRightAligned: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7658)
    ]
    ProjectorGrabBorderPercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x765C)]
    ProjectorGrabDistanceBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7660)]
    ProjectorGrabResetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7664)]
    ProjectorScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7668)]
    QuickMenuAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x766C)]
    QuickMenuCentrePos: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7670)]
    QuickMenuCentreSideOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7674)]
    QuickMenuCloseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7678)]
    QuickMenuCursorScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x767C)]
    QuickMenuErrorTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7680)]
    QuickMenuHighlightRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7684)]
    QuickMenuHoldNavTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7688)]
    QuickMenuInteractAdjustX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x768C)]
    QuickMenuInteractAdjustY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7690)]
    QuickMenuScreenHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7694)]
    QuickMenuScreenWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7698)]
    QuickMenuSideOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x769C)]
    QuickMenuSwipeHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76A0)]
    QuickMenuSwipeHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76A4)]
    RadialMenuInnerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76A8)]
    RadialMenuInnerRadiusCursor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76AC)
    ]
    RadialMenuWedgeOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76B0)]
    RefinerAutoCloseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76B4)]
    RefinerBeginDialInnerRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76B8)
    ]
    RefinerPadStartDecayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76BC)]
    RefinerPadStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76C0)]
    RefinerProgressDialInnerRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76C4)
    ]
    RepairTechLabelOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76C8)]
    RepairTechRepairedMessageTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76CC)
    ]
    RepairTechRepairedWaitTime1: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76D0)
    ]
    RepairTechRepairedWaitTime2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76D4)
    ]
    ReportBaseFlashDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76D8)]
    ReportBaseFlashIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76DC)]
    ReportBaseFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76E0)]
    ReportCameraSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x76E4)]
    ScanEventArrowOffsetMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76E8)
    ]
    ScanEventArrowOffsetMultiplierFresh: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76EC)
    ]
    ScanEventArrowOffsetMultiplierLerpTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76F0)
    ]
    ScanEventArrowOffsetMultiplierOneEvent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76F4)
    ]
    ScanEventArrowPlayerFadeDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76F8)
    ]
    ScanEventArrowPlayerFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x76FC)
    ]
    ScanEventArrowSecondaryAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7700)
    ]
    ScanEventArrowShipFadeDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7704)
    ]
    ScanEventArrowShipFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7708)
    ]
    ScanEventIconAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x770C),
    ]
    ScannableIconMergeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7710)]
    ScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7714)]
    SeasonalRingChangeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7718)]
    SeasonalRingMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x771C)]
    SeasonalRingPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7720)]
    SeasonEndAutoHighlightDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7724)
    ]
    SeasonEndAutoHighlightDurationMilestone: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7728)
    ]
    SeasonEndAutoHighlightSFX: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x772C),
    ]
    SeasonEndRewardsMaxScrollRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7730)
    ]
    SeasonEndRewardsPageOpenDelayTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7734)
    ]
    SeasonFinalStageIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7738)]
    SeasonMessageDelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x773C)]
    SentinelsDisabledHUDMessageTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7740)
    ]
    SettlementStatFlashSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7744)]
    SettlementStatInnerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7748)]
    SettlementStatOuterRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x774C)]
    ShieldHazardPulseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7750)]
    ShieldHazardPulseThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7754)]
    ShieldPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7758)]
    ShieldSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x775C)]
    ShipBuilderBarTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7760)]
    ShipBuilderEndCircleRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7764)]
    ShipBuilderLineLengthFadeMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7768)
    ]
    ShipBuilderLineLengthFadeMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x776C)
    ]
    ShipBuilderLineMinFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7770)]
    ShipBuilderLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7774)]
    ShipBuilderSlotDropLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7778)]
    ShipBuilderSlotLineDefaultWidthFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x777C)
    ]
    ShipBuilderSlotLineMaxFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7780)
    ]
    ShipBuilderSlotLineMinFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7784)
    ]
    ShipBuilderSlotStartOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7788)]
    ShipBuilderStartCircleRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x778C)
    ]
    ShipDamageDirectionIndicatorFadeRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7790)
    ]
    ShipDamageDirectionIndicatorRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7794)
    ]
    ShipDesatDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7798)]
    ShipFullscreenDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x779C)]
    ShipFullscreenDamperMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77A0)]
    ShipHeadsUpDisplayDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77A4)]
    ShipHeadsUpLineFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77A8)]
    ShipHologramInWorldUIHeightAdjust: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77AC)
    ]
    ShipHologramInWorldUIHeightAdjustV2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77B0)
    ]
    ShipHUDHitPointSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77B4)]
    ShipHUDHitPointTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77B8)]
    ShipHUDMarkerHideDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77BC)]
    ShipHUDMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77C0)]
    ShipHUDMaxOffscreenTargetDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77C4)
    ]
    ShipHUDMissileLockSizeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77C8)]
    ShipHUDMissileLockSizeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77CC)]
    ShipHUDMissileLockSpringFast: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77D0)
    ]
    ShipHUDMissileLockSpringSlow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77D4)
    ]
    ShipHUDTargetAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77D8)]
    ShipHUDTargetArrowLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77DC)]
    ShipHUDTargetArrowsRotationRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77E0)
    ]
    ShipHUDTargetMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77E4)]
    ShipHUDTargetRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77E8)]
    ShipHUDTargetRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77EC)]
    ShipHUDTargetScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77F0)]
    ShipHUDTargetTriangleRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77F4)
    ]
    ShipOverheatSwitchMessageTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77F8)
    ]
    ShipOverheatSwitchMessageWait: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x77FC)
    ]
    ShipScreenTexScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7800)]
    ShipSideScreenHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7804)]
    ShipTeleportPadMarkerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7808)
    ]
    ShipTeleportPadMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x780C)]
    ShopInteractionInWorldForcedOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7810)
    ]
    ShopInteractionInWorldForcedOffsetV2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7814)
    ]
    ShowDaysIfLessThan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7818)]
    ShowHoursIfLessThan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x781C)]
    ShowWeeksIfLessThan: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7820)]
    SmallSpaceIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7824)]
    SolidPointerLengthScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7828)]
    SolidPointerMaxLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x782C)]
    SolidPointerScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7830)]
    SpaceMapActionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7834)]
    SpaceMapAnomalyScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7838)]
    SpaceMapAspectRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x783C)]
    SpaceMapCamAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7840)]
    SpaceMapCamDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7844)]
    SpaceMapCamHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7848)]
    SpaceMapCockpitAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x784C)]
    SpaceMapCockpitScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7850)]
    SpaceMapCockpitScaleAdjustAlien: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7854)
    ]
    SpaceMapCockpitScaleAdjustCorvette: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7858)
    ]
    SpaceMapCockpitScaleAdjustDropShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x785C)
    ]
    SpaceMapCockpitScaleAdjustFighter: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7860)
    ]
    SpaceMapCockpitScaleAdjustRobot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7864)
    ]
    SpaceMapCockpitScaleAdjustRoyal: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7868)
    ]
    SpaceMapCockpitScaleAdjustSail: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x786C)
    ]
    SpaceMapCockpitScaleAdjustScientific: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7870)
    ]
    SpaceMapCockpitScaleAdjustShuttle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7874)
    ]
    SpaceMapDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7878)]
    SpaceMapDistanceLogScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x787C)]
    SpaceMapDistanceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7880)]
    SpaceMapDistanceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7884)]
    SpaceMapFadeAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7888)]
    SpaceMapFadeAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x788C)]
    SpaceMapFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7890)]
    SpaceMapFreighterScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7894)]
    SpaceMapHorizonThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7898)]
    SpaceMapLightPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x789C)]
    SpaceMapLightYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78A0)]
    SpaceMapLineBaseFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78A4)]
    SpaceMapLineBaseScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78A8)]
    SpaceMapLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78AC)]
    SpaceMapMarkerScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78B0)]
    SpaceMapMaxTraderDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78B4)]
    SpaceMapMoonScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78B8)]
    SpaceMapObjectScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78BC)]
    SpaceMapPirateFreighterScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x78C0)
    ]
    SpaceMapPirateFrigateScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78C4)]
    SpaceMapPlanetLineOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78C8)]
    SpaceMapPlanetScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78CC)]
    SpaceMapScaleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78D0)]
    SpaceMapScaleRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78D4)]
    SpaceMapScaleRangeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78D8)]
    SpaceMapShipCombineDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x78DC)
    ]
    SpaceMapShipScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78E0)]
    SpaceMapShipScaleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78E4)]
    SpaceMapStationScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78E8)]
    SpaceMarkersBattleOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78EC)]
    SpaceMarkersOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78F0)]
    StackSizeChangeMaxRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78F4)]
    StackSizeChangeMinRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78F8)]
    StackSizeRateChangeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78FC)]
    StageStingDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7900)]
    StandingRewardOSDTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7904)]
    StatsMessageDelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7908)]
    StoreDialDecayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x790C)]
    StoreDialHoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7910)]
    StoreDialInnerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7914)]
    StoreDialOuterRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7918)]
    SuperchargeGradientFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x791C)]
    SuperchargeGradientFactorMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7920)
    ]
    SuperchargeGradientTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7924)]
    SurveyObjectArrowOffsetMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7928)
    ]
    TakeoffFuelMessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x792C)]
    TalkBoxAlienTextSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7930)]
    TalkBoxAlienTextTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7934)]
    TalkBoxAlienTextTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7938)]
    TargetDisplayDamageFlashTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x793C)
    ]
    TargetDisplayScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7940)]
    TargetDisplayShipScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7944)]
    TargetDisplayTorpedoScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7948)]
    TargetMarkerFadeAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x794C)]
    TargetMarkerFadeAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7950)]
    TargetMarkerScaleEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7954)]
    TargetMarkerScaleStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7958)]
    TargetParallaxMaintenancePageMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x795C)
    ]
    TargetParallaxMouseMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7960)
    ]
    TargetScreenDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7964)]
    TargetScreenFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7968)]
    TechDisplayDelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x796C)]
    TechPopupBuildLayerHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7970)]
    TechPopupInstallLayerHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7974)
    ]
    TechPopupRepairLayerHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7978)]
    TechPopupRequirementHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x797C)]
    TextChatMaxDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7980)]
    TextChatStayBigAfterTextInput: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7984)
    ]
    TextPrintoutMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7988)]
    TextPrintoutMultiplierAlien: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x798C)
    ]
    TextTouchScrollCap: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7990)]
    ThirdPersonCrosshairCircle1Distance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7994)
    ]
    ThirdPersonCrosshairCircle2Distance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7998)
    ]
    ThirdPersonCrosshairDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x799C)
    ]
    TimedEventLookTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79A0)]
    TooltipTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79A4)]
    TouchScrollChangePageThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x79A8)
    ]
    TouchScrollMaxDelta: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79AC)]
    TouchScrollSpeedMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79B0)]
    TrackCriticalHitSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79B4)]
    TrackCriticalPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79B8)]
    TrackLeadTargetInScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79BC)]
    TrackMissileTargetPulseRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x79C0)
    ]
    TrackPoliceFreighterCentreOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x79C4)
    ]
    TrackPrimaryCentreOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79C8)]
    TrackReticuleAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79CC)]
    TrackReticuleInactiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79D0)]
    TrackReticuleInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79D4)]
    TrackReticuleRandomDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79D8)]
    TrackReticuleRandomTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79DC)]
    TrackReticuleScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79E0)]
    TrackScaleCritical: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79E4)]
    TrackScaleHit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79E8)]
    TrackTimerAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79EC)]
    TrackTimerIconExclaimRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x79F0)
    ]
    TrackTimerIconInnerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79F4)]
    TrackTimerIconOuterRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79F8)]
    TrackTimerRadarPulseSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79FC)]
    TrackTypeIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A00)]
    TradePageNotifyOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A04)]
    TransferPopupCursorOffsetFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A08)
    ]
    TransferSendOffscreenBorder: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A0C)
    ]
    TransitionOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A10)]
    TravelLineThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A14)]
    TravelTargetRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A18)]
    TrialUpsellDeclineDecayTimeQuick: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A1C)
    ]
    TrialUpsellDeclineDecayTimeSlow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A20)
    ]
    TrialUpsellDeclineDialInnerRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A24)
    ]
    TrialUpsellDeclineDialOuterRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A28)
    ]
    TrialUpsellDeclineHoldTimeQuick: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A2C)
    ]
    TrialUpsellDeclineHoldTimeSlow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A30)
    ]
    UnknownWordsToShowInCatalogue: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7A34)
    ]
    UseZoomedOutBuildCamRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A38)]
    VRFaceLockedScreenHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7A3C)]
    VRFaceLockedScreenWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7A40)]
    WantedDetectMessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A44)]
    WantedDetectMinTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A48)]
    WantedLevelScanAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A4C)]
    WantedLevelScannedRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A50)]
    WantedLevelTimeoutPulseRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A54)
    ]
    WantedLevelWitnessAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A58)]
    WantedLevelWitnessOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A5C)]
    WantedLevelWitnessPulseRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7A60)
    ]
    ZoomFactorOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A64)]
    ZoomHUDElementsOffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A68)]
    ZoomHUDElementsOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A6C)]
    ZoomHUDElementTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A70)]
    HUDCircleAnimIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x7A74)
    ]
    HUDDeathPointIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x7B74)
    ]
    HUDHexAnimIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x7C74)
    ]
    HUDMarkerColourIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x7D74)
    ]
    HUDMarkerIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x7E74)
    ]
    HUDMarkerPrimaryIndicatorIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x7F74)
    ]
    HUDPointIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x8074)
    ]
    HUDSaveIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x8174)
    ]
    HUDSpaceshipIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x8274)
    ]
    DistanceUnitKM: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x8374)
    ]
    DistanceUnitM: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x8394)
    ]
    DistanceUnitMpS: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x83B4)
    ]
    MaxDialogCharSizeIdeographicString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x83D4)
    ]
    MaxDialogCharSizeRomanString: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x83F4)
    ]
    VRDistanceWarningUIFile: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x8414)
    ]
    BuildMenuUseSmallIconOnPad: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8434)]
    AllowInventorySorting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8449)]
    AllowInWorldDebugBorders: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x844A)]
    AllowProjectorRepositioning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x844B)]
    AlwaysCloseQuickMenu: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x844C)]
    ArrowBounceLeftCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x844D)
    ]
    ArrowBounceRightCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x844E)
    ]
    AutoScrollParagraphs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x844F)]
    BaseBuildingSmoothMenuWhileSnapped: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x8450)
    ]
    BigPicking: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8451)]
    BigPickingUsesNumbers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8452)]
    BinocularScanScreen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8453)]
    CompassCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8454)
    ]
    CreatureInteractLabelUseBB: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8455)]
    CreatureReticuleAlphaCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8456)
    ]
    CreatureReticuleScaleCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8457)
    ]
    CrosshairLeadScaleCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8458)
    ]
    CrosshairTargetLockAlphaCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8459)
    ]
    CrosshairTargetLockCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x845A)
    ]
    DamageNumberUpCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x845B)
    ]
    DebugInventoryIndices: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x845C)]
    DebugMarkerLabels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x845D)]
    DebugMissionLogText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x845E)]
    DebugPopupSizes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x845F)]
    DebugShowMaintenanceScreenCentre: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x8460)
    ]
    EnableAccessibleUIOnSwitch: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8461)]
    EnableBlackouts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8462)]
    EnableBuilderRobotGreekConversion: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x8463)
    ]
    EnableCraftingTree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8464)]
    EnableHandMenuButtons: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8465)]
    EnableHandMenuDebug: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8466)]
    EnableKanaConversion: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8467)]
    EnablePopupUses: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8468)]
    FixedInventoryIconPositions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8469)]
    FrontendBootBarCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x846A)
    ]
    FrontendConfirmCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x846B)
    ]
    FrontendDoFCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x846C)
    ]
    HideExtremePlanetNotifications: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x846D)
    ]
    HideQuickMenuControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x846E)]
    HUDMarkerActiveCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x846F)
    ]
    HUDMarkerAnimAlphaCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8470)
    ]
    HUDMarkerAnimCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8471)
    ]
    HUDPlayerTrackArrowEnergyShieldDepletedCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8472)
    ]
    HUDPlayerTrackArrowEnergyShieldStartChargeCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8473)
    ]
    InteractionInWorldPlayerCamAlways: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x8474)
    ]
    InteractionScanSlapCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8475)
    ]
    LeadTargetEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8476)]
    ModelRendererBGPass: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8477)]
    ModelRendererPass1: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8478)]
    ModelRendererPass2: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8479)]
    NGuiModelViewFadeInAfterRenderCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x847A)
    ]
    NGuiUseSeparateLayersForModelAndReflection: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x847B)
    ]
    OnlyShowEjectHandlesInVR: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x847C)]
    PadCursorUICurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x847D)
    ]
    PageTurnCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x847E)
    ]
    PageTurnFadeCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x847F)
    ]
    PopupActivateCurve1: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8480)
    ]
    PopupActivateCurve2: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x8481)
    ]
    ProgressiveDialogStyle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8482)]
    QuickMenuAllowCycle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8483)]
    QuickMenuEnableSwipe: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8484)]
    RepairTechUseTechIcon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8485)]
    ReplaceItemBarWithNumbers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8486)]
    ShieldHUDAlwaysOn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8487)]
    ShowDamageNumbers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8488)]
    ShowDifficultyForBases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8489)]
    ShowJetpackNotificationForNonTerrain: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x848A)
    ]
    ShowOnscreenPredatorMarkers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x848B)]
    ShowPadlockForLockedSettings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x848C)]
    ShowVRDistanceWarning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x848D)]
    SkipShopIntro: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x848E)]
    SpaceMapDistanceCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x848F)
    ]
    SpaceMapShowAnomaly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8490)]
    SpaceMapShowAnomalyLines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8491)]
    SpaceMapShowFrieghterLines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8492)]
    SpaceMapShowFrieghters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8493)]
    SpaceMapShowNexus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8494)]
    SpaceMapShowNexusLines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8495)]
    SpaceMapShowPlanetLines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8496)]
    SpaceMapShowPlanets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8497)]
    SpaceMapShowPulseEncounterLines: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x8498)
    ]
    SpaceMapShowPulseEncounters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x8499)]
    SpaceMapShowShipLines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x849A)]
    SpaceMapShowShips: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x849B)]
    SpaceMapShowStation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x849C)]
    SpaceMapShowStationLines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x849D)]
    SpaceOnlyLeadTargetEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x849E)]
    TechBoxesCanStack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x849F)]
    TrackCritCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x84A0)
    ]
    TrackReticuleInAngleCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x84A1)
    ]
    TrackReticuleInCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x84A2)
    ]
    UseCursorHoverSlowFixedValue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84A3)]
    UseIntermediateMissionGiverOptions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x84A4)
    ]
    UseNamesOnShipHUD: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84A5)]
    UseSquareSlots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84A6)]
    UseWorldNodesForRepair: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x84A7)]


@partial_struct
class cGcSpaceshipGlobals(Structure):
    ShieldEffectScanData: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x0)]
    AlarmLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    AlarmLightColourHostile: Annotated[basic.Colour, Field(basic.Colour, 0x60)]
    AtmosphereLightOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70)]
    CockpitScale: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x80)]
    DamageLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x90)]
    DamageLightColourShield: Annotated[basic.Colour, Field(basic.Colour, 0xA0)]
    DamageLightOffsetLeft: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xB0)]
    DamageLightOffsetRight: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xC0)]
    DamageLightOffsetTop: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xD0)]
    DefaultCentreOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xE0)]
    DefaultCentreOffsetDropship: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xF0)]
    DefaultCentreOffsetRoyal: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x100)]
    DefaultCentreOffsetSail: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x110)]
    DefaultCentreOffsetScientific: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x120)
    ]
    DirectionDockingInRangeColour: Annotated[basic.Colour, Field(basic.Colour, 0x130)]
    DirectionDockingOutRangeColour: Annotated[basic.Colour, Field(basic.Colour, 0x140)]
    GroundEffectBuildingColour: Annotated[basic.Colour, Field(basic.Colour, 0x150)]
    GroundEffectWaterColour: Annotated[basic.Colour, Field(basic.Colour, 0x160)]
    GunOffset3rdPersonLeft: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x170)]
    GunOffset3rdPersonRight: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x180)]
    GunOffsetLeft: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x190)]
    GunOffsetLeft2: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1A0)]
    GunOffsetRight: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1B0)]
    GunOffsetRight2: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1C0)]
    HandControllerDeadZone: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1D0)]
    HandControllerExtents: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1E0)]
    HandControllerValueMultiplier: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x1F0)
    ]
    HandControllerValueMultiplierSpace: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x200)
    ]
    LandingEffectSpaceColourOverride: Annotated[
        basic.Colour, Field(basic.Colour, 0x210)
    ]
    MuzzleLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x220)]
    PostCollisionAngularFactor: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x230)]
    StickAnimationDamping: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x240)]
    TargetLockDangerColour: Annotated[basic.Colour, Field(basic.Colour, 0x250)]
    TargetLockPassiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x260)]
    AlarmLightOffsets: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x270),
    ]
    GunAimArray: Annotated[
        basic.cTkDynamicArray[cGcPlayerSpaceshipAim],
        Field(basic.cTkDynamicArray[cGcPlayerSpaceshipAim], 0x280),
    ]
    LaserAimArray: Annotated[
        basic.cTkDynamicArray[cGcPlayerSpaceshipAim],
        Field(basic.cTkDynamicArray[cGcPlayerSpaceshipAim], 0x290),
    ]
    SailShipCoreTechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2A0)]
    ShipModels: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x2B0),
    ]
    WaterEffectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2C0)]
    WaterJetHoverEffectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2D0)]
    WaterJetLandingEffectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2E0)]
    WaterJetTakeoffEffectID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2F0)]
    Control: Annotated[
        cGcPlayerSpaceshipControlData, Field(cGcPlayerSpaceshipControlData, 0x300)
    ]
    ControlCorvette: Annotated[
        cGcPlayerSpaceshipControlData, Field(cGcPlayerSpaceshipControlData, 0x518)
    ]
    ControlHeavy: Annotated[
        cGcPlayerSpaceshipControlData, Field(cGcPlayerSpaceshipControlData, 0x730)
    ]
    ControlHeavyHover: Annotated[
        cGcPlayerSpaceshipControlData, Field(cGcPlayerSpaceshipControlData, 0x948)
    ]
    ControlHover: Annotated[
        cGcPlayerSpaceshipControlData, Field(cGcPlayerSpaceshipControlData, 0xB60)
    ]
    ControlLight: Annotated[
        cGcPlayerSpaceshipControlData, Field(cGcPlayerSpaceshipControlData, 0xD78)
    ]
    ControlBonusA: Annotated[
        cGcPlayerSpaceshipClassBonuses, Field(cGcPlayerSpaceshipClassBonuses, 0xF90)
    ]
    ControlBonusB: Annotated[
        cGcPlayerSpaceshipClassBonuses, Field(cGcPlayerSpaceshipClassBonuses, 0xFC0)
    ]
    ControlBonusC: Annotated[
        cGcPlayerSpaceshipClassBonuses, Field(cGcPlayerSpaceshipClassBonuses, 0xFF0)
    ]
    ControlBonusS: Annotated[
        cGcPlayerSpaceshipClassBonuses, Field(cGcPlayerSpaceshipClassBonuses, 0x1020)
    ]
    SummonShipAnywhereRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1050)]
    Avoidance: Annotated[
        cGcSpaceshipAvoidanceData, Field(cGcSpaceshipAvoidanceData, 0x107C)
    ]
    AvoidanceLowAltitude: Annotated[
        cGcSpaceshipAvoidanceData, Field(cGcSpaceshipAvoidanceData, 0x10A0)
    ]
    StickData: Annotated[cGcPlayerStickData, Field(cGcPlayerStickData, 0x10C4)]
    MissileAim: Annotated[cGcPlayerSpaceshipAim, Field(cGcPlayerSpaceshipAim, 0x10E0)]
    Warp: Annotated[
        cGcPlayerSpaceshipWarpData, Field(cGcPlayerSpaceshipWarpData, 0x10F8)
    ]
    CorvetteLandingRotateNoseLiftFalloff: Annotated[
        cTkEasedFalloff, Field(cTkEasedFalloff, 0x1108)
    ]
    CorvetteLandingRotateTiltFalloff: Annotated[
        cTkEasedFalloff, Field(cTkEasedFalloff, 0x1114)
    ]
    DamageLightCurve: Annotated[cTkHitCurveData, Field(cTkHitCurveData, 0x1120)]
    MuzzleLightCurve: Annotated[cTkHitCurveData, Field(cTkHitCurveData, 0x112C)]
    DeathSpinPitch: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1138)]
    DeathSpinRoll: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1140)]
    _3rdPersonAngleMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1148)]
    _3rdPersonAngleSpeedRangePitch: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x114C)
    ]
    _3rdPersonAngleSpeedRangeYaw: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1150)
    ]
    _3rdPersonAngleSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1154)]
    _3rdPersonAvoidanceAdjustPitchFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1158)
    ]
    _3rdPersonAvoidanceAdjustRollFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x115C)
    ]
    _3rdPersonAvoidanceAdjustYawFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1160)
    ]
    _3rdPersonFlashDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1164)]
    _3rdPersonFlashIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1168)]
    _3rdPersonHeightForceAdjustPitchFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x116C)
    ]
    _3rdPersonLowHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1170)]
    _3rdPersonLowHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1174)]
    _3rdPersonLowHeightOffsetVertRotationY: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1178)
    ]
    _3rdPersonLowHeightOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x117C)]
    _3rdPersonLowHeightSpringTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1180)
    ]
    _3rdPersonPitchAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1184)]
    _3rdPersonRollAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1188)]
    _3rdPersonRollAngleAlien: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118C)]
    _3rdPersonRollAngleDropship: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1190)
    ]
    _3rdPersonRollAngleScience: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1194)]
    _3rdPersonTransitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1198)]
    _3rdPersonUpOffsetRollChangeSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x119C)
    ]
    _3rdPersonWarpWanderSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A0)]
    _3rdPersonWarpWanderStartTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11A4)
    ]
    _3rdPersonWarpWanderTimeX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A8)]
    _3rdPersonWarpWanderTimeY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11AC)]
    _3rdPersonWarpWanderTimeZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B0)]
    _3rdPersonWarpXWander: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B4)]
    _3rdPersonWarpYWander: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B8)]
    _3rdPersonWarpZWander: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11BC)]
    _3rdPersonYawAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C0)]
    _3rdPersonYawAngleLateralExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11C4)
    ]
    AcrobaticLowFlightLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C8)]
    AimCritAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11CC)]
    AimCritBehindAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11D0)]
    AimCritMinFwdAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11D4)]
    AimFoVBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11D8)]
    AimFoVBoostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11DC)]
    AimFoVBoostTimeAuto: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11E0)]
    AimMaxAutoAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11E4)]
    AimSpeedTrackDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11E8)]
    AimSpeedTrackForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11EC)]
    AimTurnSlower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11F0)]
    AlarmLastHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11F4)]
    AlarmLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11F8)]
    AlarmLightIntensityHostile: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11FC)]
    AlarmRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1200)]
    AlarmRateHostileMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1204)]
    AlarmRateHostileMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1208)]
    AngularDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120C)]
    AnomalyStationMaxApproachSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1210)
    ]
    AsteroidHitAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1214)]
    AsteroidHitAngleBoosting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1218)]
    AtmosphereAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x121C)]
    AtmosphereCombatHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1220)]
    AtmosphereLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1224)]
    AtmosphereSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1228)]
    AutoLevelMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x122C)]
    AutoLevelMaxPitchAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1230)]
    AutoLevelMinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1234)]
    AutoLevelMinPitchAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1238)]
    AutoLevelPitchCorrectMargin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x123C)
    ]
    AutoLevelWaterAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1240)]
    AutoLevelWaterMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1244)]
    AutoLevelWaterTorque: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1248)]
    AutoPilotAlignStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124C)]
    AutoPilotAlignStrengthCorvetteAutopilot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1250)
    ]
    AutoPilotCallAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1254)]
    AutoPilotCallAngleGhost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1258)]
    AutoPilotCallAngleVertical: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x125C)]
    AutoPilotCallAngleVerticalGhost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1260)
    ]
    AutoPilotCallDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1264)]
    AutoPilotCallDistanceGhost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1268)]
    AutoPilotCallDistanceSpacePOI: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x126C)
    ]
    AutoPilotPositionAlignStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1270)
    ]
    AutoPilotSmallShipAlignStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1274)
    ]
    AvoidanceDistancePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1278)]
    AvoidancePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x127C)]
    BoostChargeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1280)]
    BoostNoAsteroidRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1284)]
    CameraPostWarpFov: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1288)]
    CameraPostWarpFovTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128C)]
    CockpitDriftAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1290)]
    CockpitDriftAngleHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1294)]
    CockpitExitAnimMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1298)]
    CockpitExitAnimOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x129C)]
    CockpitExitAnimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12A0)]
    CockpitPitchCorrectAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12A4)]
    CockpitPitchCorrectAngleHmd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12A8)
    ]
    CockpitRollAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12AC)]
    CockpitRollAngleExtra: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12B0)]
    CockpitRollAngleHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12B4)]
    CockpitRollMultiplierCentre: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12B8)
    ]
    CockpitRollMultiplierOpposite: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12BC)
    ]
    CockpitRollTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C0)]
    CollisionAlignStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C4)]
    CollisionAsteroidDamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C8)]
    CollisionDeflectDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12CC)]
    CollisionDeflectForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12D0)]
    CollisionDeflectNormalFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12D4)
    ]
    CollisionDeflectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12D8)]
    CollisionDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12DC)]
    CollisionDistanceAsteroid: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12E0)]
    CollisionDistanceAsteroidSide: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12E4)
    ]
    CollisionDistanceGround: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12E8)]
    CollisionDistanceSpaceships: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12EC)
    ]
    CollisionGroundDamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12F0)]
    CollisionRadiusMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12F4)]
    CollisionSpeedDamageAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12F8)]
    CombatBoostMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12FC)]
    CombatBoostTurnDamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1300)]
    ContrailDefaultAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1304)]
    ContrailSpeedDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1308)]
    CorvetteAutopilotSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130C)]
    CorvetteAutopilotSpeedSpace: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1310)
    ]
    CorvetteBignessLandingMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1314)
    ]
    CorvetteBignessLandingTurnMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1318)
    ]
    CorvetteHoverBobPosAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x131C)]
    CorvetteHoverBobPosSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1320)]
    CorvetteHoverBobRotationAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1324)
    ]
    CorvetteHoverBobRotationSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1328)
    ]
    CorvetteLandingRotateNoseLiftAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x132C)
    ]
    CorvetteLandingRotateTilt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1330)]
    CorvetteLandingRotateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1334)]
    CorvettePulseBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1338)]
    CorvetteSizeMaxTurnDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x133C)]
    CruiseForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1340)]
    CruiseHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1344)]
    CruiseHeightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1348)]
    CruiseOffAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x134C)]
    CruiseOffAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1350)]
    DamageFlashMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1354)]
    DamageFlashScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1358)]
    DamageLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x135C)]
    DamageMaxHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1360)]
    DamageMinHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1364)]
    DamageMinWoundTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1368)]
    DefaultTrailInitialSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x136C)]
    DefaultTrailMinForwardSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1370)
    ]
    DefaultTrailSpeedDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1374)]
    DeflectAlignTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1378)]
    DeflectAlignTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x137C)]
    DeflectDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1380)]
    DirectionBrakeVerticalMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1384)
    ]
    DirectionBrakeVRBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1388)]
    DirectionDockingAlignmentAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x138C)
    ]
    DirectionDockingAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1390)]
    DirectionDockingCircleOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1394)
    ]
    DirectionDockingCircleOffsetExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1398)
    ]
    DirectionDockingCircleRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x139C)
    ]
    DirectionDockingCircleRadiusExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13A0)
    ]
    DirectionDockingCircleWidth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13A4)
    ]
    DirectionDockingIndicatorAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13A8)
    ]
    DirectionDockingIndicatorClearAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13AC)
    ]
    DirectionDockingIndicatorMaxHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13B0)
    ]
    DirectionDockingIndicatorMinHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13B4)
    ]
    DirectionDockingIndicatorRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13B8)
    ]
    DirectionDockingIndicatorSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13BC)
    ]
    DirectionDockingInfoRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C0)]
    DirectionDockTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C4)]
    DistanceFromShipToAllowSpawningOnFreighter: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13C8)
    ]
    DockingApproachActiveRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13CC)]
    DockingApproachBrakeHmdMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13D0)]
    DockingApproachRollHmdMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13D4)]
    DockingApproachSpeedHmdMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13D8)]
    DockingRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13DC)]
    DockingRotateSpeedVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13E0)]
    DrawLineLockTargetLineWidth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13E4)
    ]
    DriftEffectIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13E8)]
    DriftSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13EC)]
    DriftTurnBrakeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13F0)]
    DriftTurnStrengthMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13F4)
    ]
    DroneAlertAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13F8)]
    DroneAlertRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13FC)]
    DroneAlignUpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1400)]
    DroneDustHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1404)]
    DroneHeightAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1408)]
    DroneMinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140C)]
    DroneMoveArrivedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1410)]
    DronePatrolRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1414)]
    DronePatrolTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1418)]
    DronePlanetAttackMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x141C)]
    DronePlanetAttackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1420)]
    DroneShootTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1424)]
    DroneWarpMaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1428)]
    DroneWarpMinForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x142C)]
    DroneWarpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1430)]
    EjectAnimSpeedFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1434)]
    EjectAnimSwitchPoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1438)]
    EngineEffectsThrustContribution: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x143C)
    ]
    EngineJetLightIntensityMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1440)
    ]
    ExhaustSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1444)]
    ExplorerTakeOffMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1448)]
    FighterTakeOffMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144C)]
    FreighterApproachCombatDistanceMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1450)
    ]
    FreighterApproachCombatDistanceMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1454)
    ]
    FreighterApproachCombatMinSpeedFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1458)
    ]
    FreighterApproachDistanceMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x145C)
    ]
    FreighterApproachDistanceMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1460)
    ]
    FreighterApproachExtraMargin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1464)
    ]
    FreighterApproachExtraMarginCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1468)
    ]
    FreighterApproachExtraMarginPirate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x146C)
    ]
    FreighterApproachSpeedDamper: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1470)
    ]
    FreighterBattleIgnoreFriendlyFireDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1474)
    ]
    FreighterBattleRangeBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1478)]
    FreighterCombatBoostMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x147C)]
    FreighterCombatSpeedMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1480)]
    FreighterSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1484)]
    FrigateTargetLockRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1488)]
    GravityDropForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148C)]
    GravityDropMaxForceHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1490)]
    GravityDropMaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1494)]
    GravityDropMinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1498)]
    GroundHeightBrakeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x149C)
    ]
    GroundHeightDownSpeedMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14A0)
    ]
    GroundHeightHard: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14A4)]
    GroundHeightHardCorvetteAutopilot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14A8)
    ]
    GroundHeightHardHorizontal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14AC)]
    GroundHeightHardHorizontalCorvetteAutopilot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14B0)
    ]
    GroundHeightHardOverWater: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14B4)]
    GroundHeightHardTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14B8)]
    GroundHeightHardTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14BC)]
    GroundHeightNumRays: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14C0)]
    GroundHeightPostCollisionDamper: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14C4)
    ]
    GroundHeightPostCollisionMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14C8)
    ]
    GroundHeightPostCollisionMultiplierTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14CC)
    ]
    GroundHeightSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14D0)]
    GroundHeightSoft: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14D4)]
    GroundHeightSoftCorvetteAutopilot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14D8)
    ]
    GroundHeightSoftForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14DC)]
    GroundHeightSoftForceCorvetteAutopilot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14E0)
    ]
    GroundHeightSoftHorizontal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14E4)]
    GroundHeightSoftHorizontalCorvetteAutopilot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14E8)
    ]
    GroundHeightSpeedAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14EC)]
    GroundHeightSpeedAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14F0)
    ]
    GroundHeightSpeedLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14F4)]
    GroundNearEffectBuildingFade: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14F8)
    ]
    GroundNearEffectHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14FC)]
    GroundNearEffectLightFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1500)
    ]
    GroundNearEffectNormalOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1504)
    ]
    GroundNearEffectRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1508)]
    GroundNearEffectWaterLightFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x150C)
    ]
    GroundWaterSpeedFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1510)]
    GunAimLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1514)]
    GunAmmoMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1518)]
    GunOffset3rdPersonMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x151C)
    ]
    HandControllerActiveBlendMinTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1520)
    ]
    HandControllerActiveBlendTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1524)
    ]
    HandControllerDirOffsetAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1528)
    ]
    HandControllerDirOffsetAngleMove: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x152C)
    ]
    HandControllerThrottleDeadZone: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1530)
    ]
    HandControllerThrottleDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1534)
    ]
    HandControllerThrottleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1538)
    ]
    HandControllerXReorientation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x153C)
    ]
    HandControllerXReorientationMove: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1540)
    ]
    HandControllerZReorientation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1544)
    ]
    HandControllerZReorientationMove: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1548)
    ]
    HaulerTakeOffMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154C)]
    HitAsteroidDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1550)]
    HoverAlignTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1554)]
    HoverAlignTimeAlt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1558)]
    HoverBrakeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x155C)]
    HoverHeightFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1560)]
    HoverLandManeuvreBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1564)]
    HoverLandManeuvreTimeCorvetteMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1568)
    ]
    HoverLandManeuvreTimeHmdMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x156C)
    ]
    HoverLandManeuvreTimeHmdMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1570)
    ]
    HoverLandManeuvreTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1574)]
    HoverLandManeuvreTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1578)]
    HoverLandManeuvreTimeWaterMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x157C)
    ]
    HoverLandReachedDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1580)]
    HoverLandReachedMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1584)]
    HoverMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1588)]
    HoverMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x158C)]
    HoverSpeedFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1590)]
    HoverStopTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1594)]
    HoverTakeoffHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1598)]
    HoverTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x159C)]
    HoverTimeAlt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15A0)]
    HUDBoostUpgradeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15A4)]
    KBThrustSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15A8)]
    LandGroundTakeOffTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15AC)]
    LandHeightThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B0)]
    LandingAreaFloorOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B4)]
    LandingAreaRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B8)]
    LandingButtonMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15BC)]
    LandingCheckBuildingRadiusFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15C0)
    ]
    LandingCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15C4)]
    LandingDirectionalSideOffsetFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15C8)
    ]
    LandingHelperMinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15CC)]
    LandingHelperRollTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15D0)]
    LandingHelperTurnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15D4)]
    LandingHoverOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15D8)]
    LandingMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15DC)]
    LandingMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15E0)]
    LandingMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15E4)]
    LandingObstacleMinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15E8)]
    LandingOnGroundTip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15EC)]
    LandingPushNoseUpFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15F0)]
    LandingTooManyLowPointsFraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15F4)
    ]
    LandingWaterHoverHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15F8)]
    LandingWaterHoverHeightCorvette: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15FC)
    ]
    LandingWaterHoverOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1600)]
    LandLookingForward: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1604)]
    LandOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1608)]
    LandSlopeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160C)]
    LandWidthThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1610)]
    LaserAimLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1614)]
    LaserCoolFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1618)]
    LaserFireTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x161C)]
    LaserOverheatDownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1620)]
    LaserOverheatTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1624)]
    LaserWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1628)]
    LateralDriftRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x162C)]
    LateralDriftRollAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1630)]
    LaunchThrustersMinimumSummonPercentage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1634)
    ]
    LaunchThrustersRegenTimePeriod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1638)
    ]
    LaunchThrustersSummonCostMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x163C)
    ]
    LinearDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1640)]
    LockTargetMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1644)]
    LockTargetMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1648)]
    LockTargetMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x164C)]
    LockTargetRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1650)]
    LootAttractDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1654)]
    LootAttractTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1658)]
    LootCollectDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x165C)]
    LootDampForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1660)]
    LowAltitudeAnimationHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1664)]
    LowAltitudeAnimationHysteresisTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1668)
    ]
    LowAltitudeAnimationTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x166C)]
    LowAltitudeContrailFadeAtAnimProgress: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1670)
    ]
    MarkerEventTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1674)]
    MaximumDistanceFromShipWhenExiting: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1678)
    ]
    MaximumHeightWhenExitingShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x167C)
    ]
    MaxOverspeedBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1680)]
    MaxSpeedUpDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1684)]
    MaxSpeedUpVelocity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1688)]
    MiniWarpAlignSlerp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168C)]
    MiniWarpAlignStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1690)]
    MiniWarpChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1694)]
    MiniWarpCooldownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1698)]
    MiniWarpExitSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x169C)]
    MiniWarpExitSpeedStation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A0)]
    MiniWarpExitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A4)]
    MiniWarpFlashDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A8)]
    MiniWarpFlashDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16AC)]
    MiniWarpFlashIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B0)]
    MiniWarpFuelTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B4)]
    MiniWarpHUDArrowAttractAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16B8)
    ]
    MiniWarpHUDArrowAttractAngleDense: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16BC)
    ]
    MiniWarpHUDArrowAttractAngleOtherPlayerStuff: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C0)
    ]
    MiniWarpHUDArrowAttractAngleSaveBeacon: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C4)
    ]
    MiniWarpHUDArrowAttractAngleStation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C8)
    ]
    MiniWarpHUDArrowNumMarkersToBeDense: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x16CC)
    ]
    MiniWarpLinesHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16D0)]
    MiniWarpLinesNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x16D4)]
    MiniWarpLinesOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16D8)]
    MiniWarpLinesSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16DC)]
    MiniWarpMarkerAlignSlowdown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16E0)
    ]
    MiniWarpMarkerAlignSlowdownRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16E4)
    ]
    MiniWarpMarkerApproachSlowdown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16E8)
    ]
    MiniWarpMinPlanetDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16EC)]
    MiniWarpNoAsteroidRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F0)]
    MiniWarpPlanetRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F4)]
    MiniWarpShakeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F8)]
    MiniWarpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16FC)]
    MiniWarpStationRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1700)]
    MiniWarpStoppingMarginDefault: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1704)
    ]
    MiniWarpStoppingMarginLong: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1708)]
    MiniWarpStoppingMarginPlanet: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x170C)
    ]
    MiniWarpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1710)]
    MiniWarpTopSpeedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1714)]
    MiniWarpTrackingMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1718)]
    MissileLockSpeedUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x171C)]
    MissileLockTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1720)]
    MissileShootTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1724)]
    MuzzleAnimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1728)]
    MuzzleLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x172C)]
    NearGroundPitchCorrectMinHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1730)
    ]
    NearGroundPitchCorrectMinHeightRemote: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1734)
    ]
    NearGroundPitchCorrectRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1738)
    ]
    NearGroundPitchCorrectRangeRemote: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x173C)
    ]
    NetworkDockSearchRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1740)]
    NoBoostAnomalyDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1744)]
    NoBoostCombatEventMinBattleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1748)
    ]
    NoBoostCombatEventMinFreighterBattleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x174C)
    ]
    NoBoostCombatEventTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1750)]
    NoBoostFreighterAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1754)]
    NoBoostFreighterDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1758)]
    NoBoostShipDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x175C)]
    NoBoostShipLastHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1760)]
    NoBoostShipNearMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1764)]
    NoBoostSpaceAnomalyDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1768)
    ]
    NoBoostStationDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x176C)]
    OutpostDockSpeedAlignMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1770)
    ]
    OutpostDockSpeedAlignRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1774)]
    PadThrustSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1778)]
    PadTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x177C)]
    PitchCorrectCockpitSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1780)]
    PitchCorrectDownSpeedHeightMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1784)
    ]
    PitchCorrectDownSpeedHeightMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1788)
    ]
    PitchCorrectDownSpeedMaxDownAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x178C)
    ]
    PitchCorrectDownSpeedMinSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1790)
    ]
    PitchCorrectDownSpeedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1794)]
    PitchCorrectDownSpeedSoftAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1798)
    ]
    PitchCorrectHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x179C)]
    PitchCorrectHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A0)]
    PitchCorrectHeightSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A4)]
    PitchCorrectMaxDownAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A8)]
    PitchCorrectMaxDownAnglePostCollision: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17AC)
    ]
    PitchCorrectMaxDownAngleWater: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17B0)
    ]
    PitchCorrectSoftDownAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17B4)]
    PitchCorrectSoftDownAnglePostCollision: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17B8)
    ]
    PitchCorrectSoftDownAngleWater: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17BC)
    ]
    PitchCorrectTimeHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C0)]
    PitchCorrectTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C4)]
    PitchCorrectTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C8)]
    PlayerFreighterClearSpaceRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17CC)
    ]
    PostFreighterWarpTransitionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17D0)
    ]
    PostWarpSlowDownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D4)]
    PowerSettingEngineDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D8)]
    PowerSettingEngineMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17DC)]
    PowerSettingShieldDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17E0)]
    PowerSettingShieldMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17E4)]
    PowerSettingWeaponDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17E8)]
    PowerSettingWeaponMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17EC)]
    ProjectileClipSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x17F0)]
    ProjectileFireRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17F4)]
    ProjectileOverheatTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17F8)]
    ProjectileReloadTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17FC)]
    PulseDriveBoostDoubleTapTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1800)
    ]
    PulseDrivePlanetApproachHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1804)
    ]
    PulseDrivePlanetApproachMaxAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1808)
    ]
    PulseDrivePlanetApproachMinAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x180C)
    ]
    PulseDriveStationApproachAngleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1810)
    ]
    PulseDriveStationApproachAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1814)
    ]
    PulseDriveStationApproachOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1818)
    ]
    PulseDriveStationApproachPerpAngleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x181C)
    ]
    PulseDriveStationApproachPerpAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1820)
    ]
    PulseDriveStationApproachSlowdown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1824)
    ]
    PulseDriveStationApproachSlowdownRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1828)
    ]
    PulseDriveStationApproachSlowdownRangeMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x182C)
    ]
    RemotePlayerLockTimeAfterShot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1830)
    ]
    ResetTargetLockAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1834)]
    ResourceCollectOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1838)]
    RoyalTakeOffMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x183C)]
    RudderToRollAngleDownMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1840)]
    RudderToRollAngleDownMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1844)]
    RudderToRollAngleUpMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1848)]
    RudderToRollCutoffRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x184C)]
    RudderToRollMultiplierLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1850)]
    RudderToRollMultiplierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1854)]
    RudderToRollMultiplierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1858)]
    RudderToRollMultiplierOpposite: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x185C)
    ]
    RudderToRollMultiplierSpace: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1860)
    ]
    RudderToRollUpsideDownRotation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1864)
    ]
    ShakeAlignBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1868)]
    ShakeMaxPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x186C)]
    ShakeMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1870)]
    ShakePowerScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1874)]
    ShakeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1878)]
    ShieldEffectHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x187C)]
    ShieldLeechMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1880)]
    ShieldRechargeMinHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1884)]
    ShieldRechargeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1888)]
    ShipDifferentRepelAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x188C)]
    ShipDifferentRepelRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1890)]
    ShipEnterAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1894)]
    ShipEnterMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1898)]
    ShipEnterRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x189C)]
    ShipEnterSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18A0)]
    ShipEnterTransitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18A4)]
    ShipHeatAlertTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18A8)]
    ShipMotionDeadZone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18AC)]
    ShipThrottleBrakeVibrationStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18B0)
    ]
    ShipThrottleNotchVibrationStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18B4)
    ]
    ShipThrustReverseThreshhold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18B8)
    ]
    ShuttleTakeOffMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18BC)]
    SpaceBrakeAngularRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18C0)]
    SpaceBrakeMinAngularSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18C4)]
    SpaceCombatFollowModeAimTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18C8)
    ]
    SpaceCombatFollowModeBrakeBehindAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18CC)
    ]
    SpaceCombatFollowModeEvadeRoll: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18D0)
    ]
    SpaceCombatFollowModeEvadeThrust: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18D4)
    ]
    SpaceCombatFollowModeEvadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18D8)
    ]
    SpaceCombatFollowModeMaxBrakeBehind: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18DC)
    ]
    SpaceCombatFollowModeMaxBrakeHeadOn: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18E0)
    ]
    SpaceCombatFollowModeMaxTorque: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18E4)
    ]
    SpaceCombatFollowModeTargetDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18E8)
    ]
    SpeedCoolNormalSpeedAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18EC)]
    SpeedCoolOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18F0)]
    SpeedUpDistanceFadeThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18F4)
    ]
    SpeedUpDistanceThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18F8)]
    SpeedUpVelocityCoeff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18FC)]
    SpeedUpVelocityThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1900)]
    SpringSpeedBoosting: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1904)]
    SpringSpeedBraking: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1908)]
    SpringSpeedDefault: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x190C)]
    SpringSpeedRolling: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1910)]
    SpringSpeedSpringSpeedIn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1914)]
    SpringSpeedSpringSpeedOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1918)]
    StickLandThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x191C)]
    StickPulseThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1920)]
    StickyStickAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1924)]
    StickyTurnAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1928)]
    StickyTurnHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x192C)]
    StickyTurnLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1930)]
    StickyTurnMinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1934)]
    SummonShipAnywhereFwdOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1938)
    ]
    SummonShipAnywhereHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x193C)
    ]
    SummonShipAnywhereRangeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1940)]
    SummonShipApproachOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1944)]
    SummonShipHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1948)]
    SummonShipInSpaceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x194C)]
    TakeOffCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1950)]
    TakeOffSphereCastLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1954)]
    TakeOffSphereCastRadiusMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1958)]
    TargetLockAngleTorpedo: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x195C)]
    TargetLockChangeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1960)]
    TargetLockLoseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1964)]
    TargetLockNearestAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1968)]
    TargetLockRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x196C)]
    TargetLockTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1970)]
    TestJetsBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1974)]
    TestJetsStage1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1978)]
    TestJetsStage2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x197C)]
    TestShieldEffect: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1980)]
    TestShipAnimLowAltitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1984)]
    TestShipAnimPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1988)]
    TestShipAnimRoll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198C)]
    TestShipAnimSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1990)]
    TestShipAnimThrust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1994)]
    TestTrailRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1998)]
    TestTrailSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x199C)]
    TestTrailThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19A0)]
    ThrustDecaySpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19A4)]
    ThrustDecaySpringCombat: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19A8)]
    TrailMaxNumPointsPerFrameOverride: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x19AC)
    ]
    TrailVelocityFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B0)]
    TurnRudderStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B4)]
    VignetteAmountAcceleration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B8)]
    VignetteAmountTurning: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19BC)]
    WarpAnimMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C0)]
    WarpAnimMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C4)]
    WarpFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C8)]
    WarpInFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19CC)]
    WarpInFlashTimeFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D0)]
    WarpInFlashTimeNexus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D4)]
    WarpInLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D8)]
    WarpInRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19DC)]
    WarpInRangeFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19E0)]
    WarpInRangeNexus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19E4)]
    WarpInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19E8)]
    WarpInTimeFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19EC)]
    WarpInTimeNexus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F0)]
    WarpNexusDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F4)]
    WarpNexusPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F8)]
    WarpNexusRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19FC)]
    WarpOnFootInCorvetteMaxWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A00)
    ]
    WarpOutRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A04)]
    WarpOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A08)]
    WarpScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A0C)]
    WarpScaleFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A10)]
    WarpScaleNexus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A14)]
    WaterEffectScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A18)]
    WeaponDamagePotentialReferenceRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A1C)
    ]
    WingmanAlign: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A20)]
    WingmanAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A24)]
    WingmanAngle2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A28)]
    WingmanAttackAimAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A2C)]
    WingmanAttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A30)]
    WingmanAttackCoolTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A34)]
    WingmanAttackMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A38)]
    WingmanAttackOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A3C)]
    WingmanAttackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A40)]
    WingmanAttackTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A44)]
    WingmanAttackTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A48)]
    WingmanAtTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A4C)]
    WingmanAtTimeBack: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A50)]
    WingmanAtTimeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A54)]
    WingmanFwd1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A58)]
    WingmanFwd2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A5C)]
    WingmanPerpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A60)]
    WingmanRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A64)]
    WingmanSpawnDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A68)]
    WingmanSpeedApproachSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A6C)]
    WingmanSpeedApproachSpeedSpace: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A70)
    ]
    WingmanSpeedTrackDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A74)]
    WingmanSpeedTrackForceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A78)]
    WingmanSpeedTrackForceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A7C)]
    WingmanSpeedTrackOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A80)]
    WingmanViewerAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A84)]
    HoverShipDataNames: Annotated[cGcShipDataNames, Field(cGcShipDataNames, 0x1A88)]
    HoverShipDataNamesSpecial: Annotated[
        cGcShipDataNames, Field(cGcShipDataNames, 0x1BA8)
    ]
    SpookShipDataNames: Annotated[cGcShipDataNames, Field(cGcShipDataNames, 0x1CC8)]
    _3rdPersonShipEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DE8)]
    _3rdPersonWarpWanderCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DE9)
    ]
    AddShipToCollectionOnEnter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DEA)]
    AimZoomAuto: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DEB)]
    AllowSideScreenPointing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DEC)]
    AltAtmosphere: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DED)]
    AltControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DEE)]
    ApplyHeightAlign: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DEF)]
    ApplyHeightForce: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DF0)]
    AutoEjectOnLanding: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DF1)]
    CockpitExitAnimCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DF2)
    ]
    CritsFromBehind: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DF3)]
    DeflectCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DF4)
    ]
    DirectionDockingIndicatorCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DF5)
    ]
    DoPreCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DF6)]
    DrawLineLockTarget: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DF7)]
    EnableDepthTestedCrosshairSections: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1DF8)
    ]
    EnablePulseDriveSpaceStationOrient: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1DF9)
    ]
    GroundHeightHardCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DFA)
    ]
    GroundHeightSoftCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DFB)
    ]
    LandedCockpitFreeLook: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DFC)]
    LandingCheckBuildings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DFD)]
    LandingCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DFE)
    ]
    LandingCurveHeavy: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DFF)
    ]
    LandingCurveWater: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1E00)
    ]
    MiniWarpCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1E01)
    ]
    PitchCorrectHeightCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1E02)
    ]
    RudderToRollCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1E03)
    ]
    ShieldEffectHitCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1E04)
    ]
    SpaceCombatFollowModeUseBoost: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1E05)
    ]
    SpaceCombatFollowModeUseEvadeTarget: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1E06)
    ]
    SpaceMapInWorld: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1E07)]
    SpeedTrackModeEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1E08)]
    SpringSpeedSpringEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1E09)]
    TestShipAnims: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1E0A)]
    WarpInCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1E0B)
    ]


@partial_struct
class cGcSkyGlobals(Structure):
    PlanetGasGiantProperties: Annotated[
        cGcPlanetSkyProperties, Field(cGcPlanetSkyProperties, 0x0)
    ]
    PlanetPrimeProperties: Annotated[
        cGcPlanetSkyProperties, Field(cGcPlanetSkyProperties, 0x770)
    ]
    PlanetProperties: Annotated[
        cGcPlanetSkyProperties, Field(cGcPlanetSkyProperties, 0xEE0)
    ]
    AbandonedFreighterFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x1650)]
    NightSkyColours: Annotated[
        cGcPlanetWeatherColourData, Field(cGcPlanetWeatherColourData, 0x1820)
    ]
    SpaceSkyMax: Annotated[cGcSpaceSkyProperties, Field(cGcSpaceSkyProperties, 0x1900)]
    SpaceSkyMin: Annotated[cGcSpaceSkyProperties, Field(cGcSpaceSkyProperties, 0x19A0)]
    AbandonedFreighterFogColour: Annotated[basic.Colour, Field(basic.Colour, 0x1A40)]
    AsteroidColour: Annotated[basic.Colour, Field(basic.Colour, 0x1A50)]
    DayLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x1A60)]
    DuskLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x1A70)]
    HeavyAirColour1: Annotated[basic.Colour, Field(basic.Colour, 0x1A80)]
    HeavyAirColour2: Annotated[basic.Colour, Field(basic.Colour, 0x1A90)]
    NightFogColour: Annotated[basic.Colour, Field(basic.Colour, 0x1AA0)]
    NightHeightFogColour: Annotated[basic.Colour, Field(basic.Colour, 0x1AB0)]
    NightHorizonColour: Annotated[basic.Colour, Field(basic.Colour, 0x1AC0)]
    NightLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x1AD0)]
    NightSkyColour: Annotated[basic.Colour, Field(basic.Colour, 0x1AE0)]
    SleepSunFromSettingsPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1AF0)]
    SpaceLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x1B00)]
    SunPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1B10)]
    SunRotationAxis: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1B20)]
    PlanetCloudsMax: Annotated[
        cGcPlanetCloudProperties, Field(cGcPlanetCloudProperties, 0x1B30)
    ]
    PlanetCloudsMin: Annotated[
        cGcPlanetCloudProperties, Field(cGcPlanetCloudProperties, 0x1B78)
    ]
    SpaceSkyColours: Annotated[
        basic.cTkDynamicArray[cGcSpaceSkyColours],
        Field(basic.cTkDynamicArray[cGcSpaceSkyColours], 0x1BC0),
    ]
    CloudAdjust: Annotated[
        cGcPhotoModeAdjustData, Field(cGcPhotoModeAdjustData, 0x1BD0)
    ]
    FogAdjust: Annotated[cGcPhotoModeAdjustData, Field(cGcPhotoModeAdjustData, 0x1BE0)]
    VignetteAdjust: Annotated[
        cGcPhotoModeAdjustData, Field(cGcPhotoModeAdjustData, 0x1BF0)
    ]
    PhotoModeVignette: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1C00)]
    AmbientFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C08)]
    BinaryStarChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C0C)]
    CloudColourH: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C10)]
    CloudColourS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C14)]
    CloudColourV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C18)]
    CloudCoverSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C1C)]
    CloudRatioSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C20)]
    CreatureStormThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C24)]
    DayLength: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C28)]
    DayLengthSpookMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C2C)]
    ExtremeAudioLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C30)]
    ForceFlightStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C34)]
    ForceNightBlendValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C38)]
    ForceStormStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C3C)]
    FreshStartTimeOfDay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C40)]
    HeavyAirScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C44)]
    InFlightStormStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C48)]
    LowFlightFogThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C4C)]
    MaxCloudCover: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C50)]
    MaxColourS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C54)]
    MaxColourV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C58)]
    MaxFogSaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C5C)]
    MaxFogValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C60)]
    MaxNightFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C64)]
    MaxRainWetness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C68)]
    MaxSaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C6C)]
    MaxStormCloudCover: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C70)]
    MaxStormLengthHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C74)]
    MaxStormLengthLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C78)]
    MaxSunsetAtmosphereFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C7C)]
    MaxSunsetColourFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C80)]
    MaxSunsetFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C84)]
    MaxSunsetFogFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C88)]
    MaxSunsetHorizonFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C8C)]
    MaxSunsetPosFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C90)]
    MaxTimeBetweenStormsExtremeFallback: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C94)
    ]
    MaxTimeBetweenStormsHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C98)]
    MaxTimeBetweenStormsLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C9C)]
    MaxValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CA0)]
    MidColourH: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CA4)]
    MidColourS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CA8)]
    MidColourV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CAC)]
    MinColourS: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CB0)]
    MinColourV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CB4)]
    MinFogSaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CB8)]
    MinFogValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CBC)]
    MinNightFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC0)]
    MinSaturation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC4)]
    MinStormLengthHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC8)]
    MinStormLengthLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CCC)]
    MinSunsetAtmosphereFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CD0)]
    MinSunsetColourFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CD4)]
    MinSunsetFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CD8)]
    MinSunsetFogFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CDC)]
    MinSunsetHorizonFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CE0)]
    MinSunsetPosFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CE4)]
    MinTimeBetweenStormsExtremeFallback: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1CE8)
    ]
    MinTimeBetweenStormsHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CEC)]
    MinTimeBetweenStormsLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CF0)]
    MinValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CF4)]
    MulticolourH: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CF8)]
    NebulaColour1S: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CFC)]
    NebulaColour1V: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D00)]
    NebulaColour2S: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D04)]
    NebulaColour2V: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D08)]
    NebulaColourH: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D0C)]
    NightHorizonBlendMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D10)]
    NightHorizonBlendMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D14)]
    NightLightBlendMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D18)]
    NightLightBlendMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D1C)]
    NightSkyBlendMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D20)]
    NightSkyBlendMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D24)]
    NightThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D28)]
    NoAtmosphereColourMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D2C)]
    NoAtmosphereColourStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D30)]
    NoAtmosphereFogMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D34)]
    NoAtmosphereFogStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D38)]
    PhotoModeMacroMaxDOFAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D3C)]
    PhotoModeMacroMaxDOFAperture: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D40)
    ]
    PhotoModeSunSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D44)]
    RainbowAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D48)]
    RainbowDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D4C)]
    RainbowFadeWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D50)]
    RainbowScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D54)]
    RainbowStormAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D58)]
    RainbowWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D5C)]
    RainWetnessFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D60)]
    RainWetnessFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D64)]
    SpaceAtmosphereThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D68)]
    StormAudioLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D6C)]
    StormCloudBottomColourMaxBlend: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D70)
    ]
    StormCloudBottomColourMinBlend: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D74)
    ]
    StormCloudSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D78)]
    StormCloudTopColourMaxBlend: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D7C)
    ]
    StormCloudTopColourMinBlend: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D80)
    ]
    StormScreenFilterDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D84)]
    StormScreenFilterFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D88)]
    StormTransitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D8C)]
    StormWarningTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D90)]
    SunClampAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D94)]
    TakeoffStormThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D98)]
    TernaryStarChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D9C)]
    ToFlightFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DA0)]
    ToFootFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DA4)]
    WaterHeavyAirAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DA8)]
    WeatherBloomGain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DAC)]
    WeatherBloomGainSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DB0)]
    WeatherBloomImpulseSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DB4)]
    WeatherBloomThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DB8)]
    WeatherBloomThresholdSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DBC)]
    WeatherFilterSpaceTransitionChangeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1DC0)
    ]
    DoFAdjustMagnitudeMaxCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DC4)
    ]
    ForceFlightSetting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DC5)]
    ForceNightBlend: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DC6)]
    ForceStormSetting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DC7)]
    SleepSunFromSettings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DC8)]
    UpdateWeatherWhenSunLocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1DC9)]
    WeatherBloomCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1DCA)
    ]


@partial_struct
class cGcSettlementGlobals(Structure):
    NegativeStatColour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    PositiveStatColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    SettlementBuildingCosts: Annotated[
        cGcSettlementBuildingCost, Field(cGcSettlementBuildingCost, 0x20)
    ]
    SettlementBuildingContributions: Annotated[
        cGcSettlementBuildingContribution,
        Field(cGcSettlementBuildingContribution, 0x6560),
    ]
    BuildingProductionNotes: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x7460)
    ]
    BuildingUpgradePageNames: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x7BE0)
    ]
    SettlementBuildingClassGenericRequirement: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x8360)
    ]
    SettlementBuildingClassGenericTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x8AE0)
    ]
    SettlementBuildingTimes: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x9260)]
    JudgementMissionObjectives: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9440)
    ]
    JudgementUpdateMainText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x95C0)
    ]
    JudgementUpdateSubtitles: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9740)
    ]
    JudgementUpdateTitles: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x98C0)
    ]
    LongAltResearchLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9A40)
    ]
    LongPolicyLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9B40)
    ]
    LongResearchLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9C40)
    ]
    NegativeFakePerkOSDLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9D40)
    ]
    NegativeStatChangeOSDLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9E40)
    ]
    PositiveFakePerkOSDLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x9F40)
    ]
    PositiveStatChangeOSDLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA040)
    ]
    ProcPerkDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA140)
    ]
    ShortAltResearchLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA240)
    ]
    ShortPolicyLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA340)
    ]
    ShortResearchLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA440)
    ]
    AltResearchPerks: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA540)]
    NegativeStatChangeSubstances: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xA5C0)
    ]
    PolicyPerks: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA640)]
    PositiveStatChangeSubstances: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xA6C0)
    ]
    ResearchPerks: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA740)]
    BuilderNPCScanToRevealData: Annotated[
        cGcScanToRevealComponentData, Field(cGcScanToRevealComponentData, 0xA7C0)
    ]
    TowerPowerRechargeTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA810)]
    AutophageGifts: Annotated[
        basic.cTkDynamicArray[cGcSettlementGiftDetails],
        Field(basic.cTkDynamicArray[cGcSettlementGiftDetails], 0xA830),
    ]
    AutophageProductionElementsSelectable: Annotated[
        basic.cTkDynamicArray[cGcSettlementProductionElement],
        Field(basic.cTkDynamicArray[cGcSettlementProductionElement], 0xA840),
    ]
    CustomJudgements: Annotated[
        basic.cTkDynamicArray[cGcSettlementCustomJudgement],
        Field(basic.cTkDynamicArray[cGcSettlementCustomJudgement], 0xA850),
    ]
    GekGifts: Annotated[
        basic.cTkDynamicArray[cGcSettlementGiftDetails],
        Field(basic.cTkDynamicArray[cGcSettlementGiftDetails], 0xA860),
    ]
    GekProductionElementsSelectable: Annotated[
        basic.cTkDynamicArray[cGcSettlementProductionElement],
        Field(basic.cTkDynamicArray[cGcSettlementProductionElement], 0xA870),
    ]
    Gifts: Annotated[
        basic.cTkDynamicArray[cGcSettlementGiftDetails],
        Field(basic.cTkDynamicArray[cGcSettlementGiftDetails], 0xA880),
    ]
    JobTypes: Annotated[
        basic.cTkDynamicArray[cGcSettlementJobDetails],
        Field(basic.cTkDynamicArray[cGcSettlementJobDetails], 0xA890),
    ]
    Judgements: Annotated[
        basic.cTkDynamicArray[cGcSettlementJudgementData],
        Field(basic.cTkDynamicArray[cGcSettlementJudgementData], 0xA8A0),
    ]
    JudgementTextHashID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA8B0)]
    KorvaxGifts: Annotated[
        basic.cTkDynamicArray[cGcSettlementGiftDetails],
        Field(basic.cTkDynamicArray[cGcSettlementGiftDetails], 0xA8C0),
    ]
    KorvaxProductionElementsSelectable: Annotated[
        basic.cTkDynamicArray[cGcSettlementProductionElement],
        Field(basic.cTkDynamicArray[cGcSettlementProductionElement], 0xA8D0),
    ]
    MiniMissionFailJudgement: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA8E0)]
    MiniMissionSuccessJudgement: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xA8F0)
    ]
    ScanEventsThatPreventSentinelAlert: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xA900),
    ]
    SettlementCostAutophage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA910)]
    SettlementCostGek: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA920)]
    SettlementCostKorvax: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA930)]
    SettlementCostVykeen: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA940)]
    SettlementMiniExpeditionMissionID: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xA950)
    ]
    TechGiftPerks: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xA960),
    ]
    VykeenGifts: Annotated[
        basic.cTkDynamicArray[cGcSettlementGiftDetails],
        Field(basic.cTkDynamicArray[cGcSettlementGiftDetails], 0xA970),
    ]
    VykeenProductionElementsSelectable: Annotated[
        basic.cTkDynamicArray[cGcSettlementProductionElement],
        Field(basic.cTkDynamicArray[cGcSettlementProductionElement], 0xA980),
    ]
    AlertCycleDurationInSeconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0xA990)
    ]
    BugAttackCycleDurationInSeconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0xA998)
    ]
    BuildingFreeUpgradeTimeInSeconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0xA9A0)
    ]
    BuildingUpgradeTimeInSeconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0xA9A8)
    ]
    ProductionCycleDurationInSeconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0xA9B0)
    ]
    ProductionSlotTimerOffsetInSeconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0xA9B8)
    ]
    TowerRechargeTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xA9C0)]
    PerkStatStrengthValues: Annotated[
        cGcSettlementStatStrengthData, Field(cGcSettlementStatStrengthData, 0xA9C8)
    ]
    JudgementSelectionWeights: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAB88)]
    InitialStatsMaxValues: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xABB8)]
    InitialStatsMinValues: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xABD8)]
    NormalisedStatBadThresholds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xABF8)
    ]
    NormalisedStatGoodThresholds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC18)
    ]
    StatProductivityContributionModifiers: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xAC38)
    ]
    StatsMaxValues: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xAC58)]
    StatsMinValues: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xAC78)]
    AlertUnitsPerCycleRateModifier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xAC98)
    ]
    BugAttackUnitsPerCycleRateModifier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xAC9C)
    ]
    BuildingRevealCutsceneLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACA0)
    ]
    DailyDebtPaymentModifier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACA4)]
    InitialBuildingCountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACA8)]
    InitialBuildingCountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACAC)]
    InitialDebtCycles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACB0)]
    JudgementSpecificRacePartyChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACB4)
    ]
    JudgementWaitTimeMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACB8)]
    JudgementWaitTimeMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACBC)]
    MaxInitialNegativePerksCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACC0)
    ]
    MaxInitialPositivePerksCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACC4)
    ]
    MaxNPCPopulation: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACC8)]
    MaxPerksCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xACCC)]
    MinInitialNegativePerksCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACD0)
    ]
    MinInitialPositivePerksCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACD4)
    ]
    PopulationGrowthRatePerDayBad: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACD8)
    ]
    PopulationGrowthRatePerDayGood: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACDC)
    ]
    PopulationGrowthRatePerDayNeutral: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACE0)
    ]
    PopulationGrowthRateThresholdBad: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACE4)
    ]
    PopulationGrowthRateThresholdGood: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACE8)
    ]
    ProductionBoostConversionRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACEC)
    ]
    ProductUnitsPerCycleRateModifier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACF0)
    ]
    SettlementEntryMessageDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACF4)
    ]
    SettlementMiniExpeditionSuccessChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACF8)
    ]
    SettlementMiniExpeditionTime: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xACFC)
    ]
    StartingPopulationScalar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAD00)]
    SubstanceUnitsPerCycleRateModifier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xAD04)
    ]
    StatIsGoodWhenPositive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAD08)]
    StatProductionIsNegativeWhenBad: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xAD10)
    ]
    DebugForceShowHiddenPerks: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAD18)]


@partial_struct
class cGcRobotGlobals(Structure):
    DroneScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x0)]
    QuadLaser: Annotated[cGcRobotLaserData, Field(cGcRobotLaserData, 0x50)]
    WalkerLaser: Annotated[cGcRobotLaserData, Field(cGcRobotLaserData, 0xA0)]
    DroneCriticalOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xF0)]
    DroneRepairOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x100)]
    QuadCriticalOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x110)]
    WalkerGunOffset1: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x120)]
    WalkerGunOffset2: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x130)]
    WalkerHeadEyeOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x140)]
    DamageData: Annotated[cGcSentinelDamagedData, Field(cGcSentinelDamagedData, 0x150)]
    QuadWeapons: Annotated[
        cGcSentinelQuadWeaponData, Field(cGcSentinelQuadWeaponData, 0x490)
    ]
    SentinelResources: Annotated[cGcSentinelResource, Field(cGcSentinelResource, 0x7B0)]
    RobotCamoData: Annotated[cGcCamouflageData, Field(cGcCamouflageData, 0x9B8)]
    AttackScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x9E8)]
    DroneControlData: Annotated[
        basic.cTkDynamicArray[cGcDroneDataWithId],
        Field(basic.cTkDynamicArray[cGcDroneDataWithId], 0x9F8),
    ]
    DroneWeapons: Annotated[
        basic.cTkDynamicArray[cGcDroneWeaponData],
        Field(basic.cTkDynamicArray[cGcDroneWeaponData], 0xA08),
    ]
    ForceDroneWeapon: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA18)]
    RepairEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA28)]
    SentinelMechAvailableWeapons: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xA38),
    ]
    SentinelMechWeaponData: Annotated[
        basic.cTkDynamicArray[cGcSentinelMechWeaponData],
        Field(basic.cTkDynamicArray[cGcSentinelMechWeaponData], 0xA48),
    ]
    StoneMechAvailableWeapons: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xA58),
    ]
    SummonerDroneBuildupEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA68)]
    SummonerDroneSpawnEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA78)]
    WalkerLeftLegArmourNodes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xA88),
    ]
    WalkerRightLegArmourNodes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xA98),
    ]
    WalkerTitanFallEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xAA8)]
    WalkerTitanFallShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xAB8)]
    PounceData: Annotated[
        cGcSentinelPounceBalance, Field(cGcSentinelPounceBalance, 0xAC8)
    ]
    FireRateModifierScores: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC68)]
    SentinelSpawnLimits: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC9C)]
    MechTargetSelectionWeightingSettings: Annotated[
        cGcMechTargetSelectionWeightingSettings,
        Field(cGcMechTargetSelectionWeightingSettings, 0xCD0),
    ]
    MechPatrolPauseTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xD00)]
    QuadAttackTurnSpeeds: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xD08)]
    QuadLookTurnSpeeds: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xD10)]
    QuadPatrolPauseTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xD18)]
    AttackMoveArrivalDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD20)]
    AttackMoveMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD24)]
    AttackSentinelWantedValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD28)]
    CollisionDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD2C)]
    CombatSpawnSquadRadiusDrones: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD30)
    ]
    CombatSpawnSquadRadiusRobots: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD34)
    ]
    CombatWaveSpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD38)]
    CorruptedDroneRepairInteruptCooldownTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD3C)
    ]
    CriticalHitSizeDrone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD40)]
    CriticalHitSizeMech: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD44)]
    CriticalHitSizeQuad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD48)]
    CriticalHitSizeWalker: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4C)]
    DroneAggressiveInvestigateAttackTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD50)
    ]
    DroneAggroDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD54)]
    DroneAttackGetInRangeBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD58)]
    DroneAttackMaxAngleDownFromPlayer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD5C)
    ]
    DroneAttackPlayerHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD60)
    ]
    DroneCombatSpawnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD64)]
    DroneCrimeCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD68)]
    DroneCrimeCooldownWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD6C)]
    DroneCrimeCooldownWaitTimeAtMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD70)
    ]
    DroneCrimePostInvestigateWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD74)
    ]
    DroneCrimeWitnessInvestigateDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD78)
    ]
    DroneCriminalScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD7C)]
    DroneDecisionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD80)]
    DroneHeightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD84)]
    DroneHitImpulseCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD88)]
    DroneHitImpulseFlipForceDownBound: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD8C)
    ]
    DroneHitImpulseLaserMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD90)
    ]
    DroneHitImpulseMinVerticalComponentScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD94)
    ]
    DroneHitImpulseMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD98)]
    DroneInvestigateMaxPositionAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD9C)
    ]
    DroneInvestigateMinChaseRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDA0)
    ]
    DroneInvestigateMinCrimeInterval: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDA4)
    ]
    DroneInvestigateMinPositionAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDA8)
    ]
    DroneInvestigateMinScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDAC)]
    DroneInvestigateMinWitnessRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDB0)
    ]
    DroneInvestigateMinWitnessRangeCantSee: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDB4)
    ]
    DroneInvestigateMinWitnessTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDB8)
    ]
    DroneInvestigateRepositionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDBC)
    ]
    DroneInvestigateSpeedBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC0)]
    DroneInvestigateSpeedBoostRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDC4)
    ]
    DroneInvestigateSpeedBoostStartDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDC8)
    ]
    DroneMaxScanAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDCC)]
    DroneMaxScanLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDD0)]
    DroneMoveDistancePlayerMechMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDD4)
    ]
    DronePatrolAttackSightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDD8)]
    DronePatrolInvestigateSpeedBoost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDDC)
    ]
    DronePatrolSearchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDE0)]
    DronePerceptionMinHearingSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDE4)
    ]
    DronePerceptionRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDE8)]
    DronePerceptionRangeHostile: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDEC)]
    DronePerceptionSightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF0)]
    DronePerceptionSightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDF4)]
    DronePerceptionSightRangeHostile: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDF8)
    ]
    DronePushLaserForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDFC)]
    DronePushMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE00)]
    DronePushMaxTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE04)]
    DroneRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE08)]
    DroneReAttackTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0C)]
    DroneScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE10)]
    DroneScanMinPerpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE14)]
    DroneScanRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE18)]
    DroneScanWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE1C)]
    DroneSearchLookDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE20)]
    DroneSearchLookSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE24)]
    DroneSearchPickNearbyAngleMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE28)
    ]
    DroneSearchPickNearbyAngleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE2C)
    ]
    DroneSearchPickNearbyTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE30)]
    DroneSpawnFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE34)]
    DroneSpawnHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE38)]
    DroneSpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE3C)]
    DroneSquadSpawnRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE40)]
    DroneUpdateDistForMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE44)]
    DroneUpdateDistForMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE48)]
    DroneUpdateFPSMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4C)]
    DroneUpdateFPSMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE50)]
    EncounterRangeToAllowPulledIntoFight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE54)
    ]
    EncounterRangeToBlockWantedSpawns: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE58)
    ]
    EnergyExplodeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE5C)]
    ExoMechJumpCooldownTimeInCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE60)
    ]
    ExoMechJumpCooldownTimeOutOfCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE64)
    ]
    FakeQuadGuard: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE68)]
    FireRateLastHitBypassTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE6C)]
    FireRateModifierMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE70)]
    FireRateModifierMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE74)]
    FollowRoutineArriveRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE78)]
    FriendlyDroneBeepReplaceChatChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE7C)
    ]
    FriendlyDroneChatChanceBecomeWanted: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE80)
    ]
    FriendlyDroneChatChanceIdle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE84)]
    FriendlyDroneChatChanceLoseWanted: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE88)
    ]
    FriendlyDroneChatChanceSummoned: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE8C)
    ]
    FriendlyDroneChatChanceUnsummoned: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE90)
    ]
    FriendlyDroneChatCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE94)]
    FriendlyDroneDissolveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE98)]
    GrenadeLaunchFlightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE9C)]
    HeightTestSampleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEA0)]
    HeightTestSampleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEA4)]
    HitsToCancelStealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEA8)]
    HitsToCancelStealthSmall: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEAC)]
    LabelOffsetDrone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEB0)]
    LabelOffsetMech: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEB4)]
    LabelOffsetQuad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEB8)]
    LabelOffsetSpiderQuad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEBC)]
    LabelOffsetWalker: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC0)]
    LaserFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC4)]
    LaserFadeTime2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC8)]
    LineOfSightReturnCheckMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xECC)
    ]
    LineOfSightReturnCheckRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xED0)
    ]
    LineOfSightReturnRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xED4)]
    MaxNumInvestigatingDrones: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xED8)]
    MaxNumPatrolDrones: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xEDC)]
    MechAlertRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEE0)]
    MechAttackMoveAngleToleranceDeg: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xEE4)
    ]
    MechAttackMoveFacingAngleTolerance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xEE8)
    ]
    MechAttackMoveHoldPositionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xEEC)
    ]
    MechAttackMoveMaxOffsetRotation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xEF0)
    ]
    MechAttackMoveMinOffsetRotation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xEF4)
    ]
    MechAttackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEF8)]
    MechAttackRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEFC)]
    MechEndJumpMinDistanceInCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF00)
    ]
    MechEndJumpMinDistanceOutOfCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF04)
    ]
    MechFadeInDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF08)]
    MechFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0C)]
    MechFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF10)]
    MechHearingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF14)]
    MechMinMaintainFireTargetTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF18)
    ]
    MechMinMaintainTargetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF1C)]
    MechMinTurretAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF20)]
    MechPatrolRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF24)]
    MechSightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF28)]
    MechSightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF2C)]
    MechStartJumpMinDistanceInCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF30)
    ]
    MechStartJumpMinDistanceOutOfCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF34)
    ]
    MedicDroneMinHealTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF38)]
    MinInvestigateMessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF3C)]
    MinRobotKillsForHint: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xF40)]
    QuadAlertRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF44)]
    QuadAttackMinMoveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF48)]
    QuadAttackMoveMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4C)]
    QuadAttackMoveMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF50)]
    QuadAttackMoveRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF54)]
    QuadAttackRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF58)]
    QuadAttackTurnAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF5C)]
    QuadAttackTurnAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF60)]
    QuadCannotSeeTargetRepositionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF64)
    ]
    QuadDamageMoveThreshold: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xF68)]
    QuadEvadeCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF6C)]
    QuadEvadeFacingAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF70)]
    QuadHearingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF74)]
    QuadHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF78)]
    QuadJumpBackCheckRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF7C)]
    QuadJumpBackDoFlipDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF80)]
    QuadJumpBackFacingAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF84)]
    QuadJumpBackHeightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF88)]
    QuadJumpBackJumpDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8C)]
    QuadJumpBackJumpMinLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF90)]
    QuadJumpBackMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF94)]
    QuadJumpBackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF98)]
    QuadJumpBackRecoveryTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF9C)]
    QuadJumpBackTestHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFA0)
    ]
    QuadJumpBackTestRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFA4)]
    QuadLaserSpringMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFA8)]
    QuadLaserSpringMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFAC)]
    QuadLookAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFB0)]
    QuadLookAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFB4)]
    QuadMinStationaryTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFB8)]
    QuadNavRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFBC)]
    QuadObstacleSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC0)]
    QuadPatrolRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC4)]
    QuadPounceDamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC8)]
    QuadPounceOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFCC)]
    QuadRepositionHealthThresholdPercent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFD0)
    ]
    QuadRepositionMaxTimeSinceHit: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFD4)
    ]
    QuadRepositionMinMoveDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFD8)]
    QuadRepositionMinTargetDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFDC)]
    QuadRepositionTargetDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFE0)]
    QuadRepositionTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFE4)]
    QuadSightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFE8)]
    QuadSightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFEC)]
    QuadStealthCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFF0)]
    QuadStealthRepositionHealthThresholdPercent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFF4)
    ]
    QuadStealthRepositionHealthThresholdPercentSmall: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFF8)
    ]
    QuadStealthRepositionMaxTimeSinceHit: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFFC)
    ]
    QuadTurnBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1000)]
    RepairChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1004)]
    RepairCheckForTargetCooldownTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1008)
    ]
    RepairEffectScaleDrone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100C)]
    RepairEffectScaleQuad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1010)]
    RepairOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1014)]
    RepairOffsetChangeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1018)]
    RepairRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x101C)]
    RepairScanArriveDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1020)]
    RepairScanRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1024)]
    RobotHUDMarkerFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1028)]
    RobotHUDMarkerRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x102C)]
    RobotMapScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1030)]
    RobotSightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1034)]
    RobotSightTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1038)]
    RobotSteeringAvoidCreaturesWeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x103C)
    ]
    RobotSteeringAvoidDangerWeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1040)
    ]
    RobotSteeringAvoidTurnWeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1044)
    ]
    RobotSteeringFollowWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1048)]
    ScoreForMaxFireRateModifier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x104C)
    ]
    ScoreForMinFireRateModifier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1050)
    ]
    SentinelMechJumpCooldownTimeInCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1054)
    ]
    SentinelMechJumpCooldownTimeOutOfCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1058)
    ]
    SpiderPounceAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x105C)]
    SpiderPounceMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1060)]
    SpiderPounceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1064)]
    SpiderQuadHeadTrackSmoothTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1068)
    ]
    SpiderQuadHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x106C)]
    SpiderQuadMiniHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1070)]
    SpiderQuadMiniNavRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1074)]
    SpiderQuadMiniObstacleSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1078)]
    SpiderQuadNavRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x107C)]
    StoneEnemyTrackArrowOffsetMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1080)
    ]
    SummonerDroneBeginTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1084)]
    SummonerDroneBuildupTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1088)]
    SummonerDroneCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108C)]
    SummonerDroneCooldownOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1090)
    ]
    SummonerDroneResummonThreshold: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1094)
    ]
    SummonPreviewInterpSpeedMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1098)
    ]
    SummonPreviewInterpSpeedMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x109C)
    ]
    SummonRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10A0)]
    SummonVerticalOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10A4)]
    TrackArrowOffsetMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10A8)]
    UnderwaterPerceptionMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10AC)]
    WalkerAttackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10B0)]
    WalkerAttackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10B4)]
    WalkerAttackRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10B8)]
    WalkerClosingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10BC)]
    WalkerEnergyLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C0)]
    WalkerEnergyMaxAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C4)]
    WalkerEnergyMinAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C8)]
    WalkerEnergyRadiusStartMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10CC)]
    WalkerEnergyRadiusStartMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10D0)]
    WalkerEnergySpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10D4)]
    WalkerEnergySpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10D8)]
    WalkerFastMoveFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10DC)]
    WalkerGuardAlertRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10E0)]
    WalkerGunChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10E4)]
    WalkerGunRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10E8)]
    WalkerGunShootTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10EC)]
    WalkerHeadMaxPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10F0)]
    WalkerHeadMaxYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10F4)]
    WalkerHeadMoveTimeActive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10F8)]
    WalkerHeadMoveTimeIdle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10FC)]
    WalkerHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1100)]
    WalkerLaserBodyOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1104)]
    WalkerLaserOvershootEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1108)]
    WalkerLaserOvershootStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110C)]
    WalkerLaserOvershootVehicleReducer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1110)
    ]
    WalkerLegShotDefendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1114)]
    WalkerLegShotEnrageShotInterval: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1118)
    ]
    WalkerLegShotEnrageShotsPerVolley: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x111C)
    ]
    WalkerLegShotEnrageShotSpreadMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1120)
    ]
    WalkerLegShotEnrageShotSpreadMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1124)
    ]
    WalkerLegShotEnrageVolleyInterval: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1128)
    ]
    WalkerMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x112C)]
    WalkerNavRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1130)]
    WalkerObstacleSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1134)]
    WalkerPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1138)]
    WalkerPushRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x113C)]
    WalkerPushTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1140)]
    WalkerTitanFallEffectScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1144)]
    WalkerTitanFallHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1148)]
    WalkerTitanFallSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114C)]
    DisableDronePerception: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1150)]
    DroneChatter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1151)]
    DroneClickToMove: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1152)]
    DroneEnableVariableUpdate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1153)]
    DroneHitImpulseEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1154)]
    DronePatrolScanPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1155)]
    DronesUseEscalationTimer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1156)]
    ForceShowDebugMoveTrail: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1157)]
    SpawnFriendlyDrone: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1158)]
    SummonerTestSummonEffects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1159)]
    WalkerLegShotDefendEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x115A)]
    WalkerLegShotEnrageEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x115B)]


@partial_struct
class cGcNavigationGlobals(Structure):
    FreighterBaseNavMeshBuildParams: Annotated[
        cTkVolumeNavMeshBuildParams, Field(cTkVolumeNavMeshBuildParams, 0x0)
    ]
    NexusNavMeshBuildParams: Annotated[
        cTkVolumeNavMeshBuildParams, Field(cTkVolumeNavMeshBuildParams, 0x70)
    ]
    SpaceStationNavMeshBuildParams: Annotated[
        cTkVolumeNavMeshBuildParams, Field(cTkVolumeNavMeshBuildParams, 0xE0)
    ]
    PlanetaryNavMeshBuildParams: Annotated[
        cGcPlanetaryNavMeshBuildParams, Field(cGcPlanetaryNavMeshBuildParams, 0x150)
    ]
    MaxAsyncTileBuildsInFlight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18C)]
    PlanetaryNavMeshLod: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x190)]


@partial_struct
class cGcGameplayGlobals(Structure):
    DiscoveryTrimSettings: Annotated[
        cGcDiscoveryTrimSettings, Field(cGcDiscoveryTrimSettings, 0x0)
    ]
    HUDTarget: Annotated[cGcShipHUDTargetData, Field(cGcShipHUDTargetData, 0x150)]
    BaseBuildingDeleteScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x260)
    ]
    BaseBuildingErrorAboveWaterScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x2B0)
    ]
    BaseBuildingErrorBelowWaterScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x300)
    ]
    BaseBuildingErrorCollisionScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x350)
    ]
    BaseBuildingErrorImpossibleScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x3A0)
    ]
    BaseBuildingErrorInsideScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x3F0)
    ]
    BaseBuildingErrorUnaffordableScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x440)
    ]
    BaseBuildingGhostScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x490)
    ]
    BaseBuildingPreviewSelectionScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x4E0)
    ]
    BaseBuildingRemotePlayerSelectionScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x530)
    ]
    BaseBuildingRemotePlayerValidScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x580)
    ]
    BaseBuildingSelectionScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x5D0)
    ]
    BaseBuildingSpawnStaticEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x620)
    ]
    BaseBuildingValidScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x670)
    ]
    BaseBuildingVisionScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x6C0)
    ]
    BinocularScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x710)]
    BinocularSelectedEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x760)
    ]
    BlankScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x7B0)]
    BuildingScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x800)]
    CreatureScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x850)]
    DeconstructEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x8A0)]
    HitEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x8F0)]
    HitEffectCritical: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x940)]
    HUDShipScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x990)]
    ObjectsScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x9E0)]
    PassiveScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0xA30)]
    ShipBuilderNullScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0xA80)
    ]
    ShipBuilderScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0xAD0)]
    ShipSalvageScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0xB20)]
    TargetShipScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0xB70)]
    VRGhostScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0xBC0)]
    BinocularScanTargetColour: Annotated[basic.Colour, Field(basic.Colour, 0xC10)]
    BinocularSelectedColour: Annotated[basic.Colour, Field(basic.Colour, 0xC20)]
    BinocularSelectedUnknownColour: Annotated[basic.Colour, Field(basic.Colour, 0xC30)]
    BulletTraceLineColour: Annotated[basic.Colour, Field(basic.Colour, 0xC40)]
    CommunicatorShipSpawnOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xC50)]
    HUDDamageSplatPainColour: Annotated[basic.Colour, Field(basic.Colour, 0xC60)]
    HUDDamageSplatShieldColour: Annotated[basic.Colour, Field(basic.Colour, 0xC70)]
    OverHeatBarColour: Annotated[basic.Colour, Field(basic.Colour, 0xC80)]
    OverHeatColour: Annotated[basic.Colour, Field(basic.Colour, 0xC90)]
    PainColour: Annotated[basic.Colour, Field(basic.Colour, 0xCA0)]
    PlayerAmbientSpotLightColour: Annotated[basic.Colour, Field(basic.Colour, 0xCB0)]
    RefinerColour1A: Annotated[basic.Colour, Field(basic.Colour, 0xCC0)]
    RefinerColour1B: Annotated[basic.Colour, Field(basic.Colour, 0xCD0)]
    RefinerColour1C: Annotated[basic.Colour, Field(basic.Colour, 0xCE0)]
    RefinerColour1D: Annotated[basic.Colour, Field(basic.Colour, 0xCF0)]
    ScannerColour1: Annotated[basic.Colour, Field(basic.Colour, 0xD00)]
    ScannerColour2: Annotated[basic.Colour, Field(basic.Colour, 0xD10)]
    TorchColour: Annotated[basic.Colour, Field(basic.Colour, 0xD20)]
    CaveGraveRevealData: Annotated[
        cGcScanToRevealComponentData, Field(cGcScanToRevealComponentData, 0xD30)
    ]
    SalvageTechList: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xD80)]
    SalvageTechListMultiTool: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xDD0)]
    SalvageRewardsDropship: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE20)]
    SalvageRewardsFighter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xE60)]
    SalvageRewardsScience: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xEA0)]
    SalvageRewardsShuttle: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xEE0)]
    CommunicatorFireteamNexusExitDialog: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xF20)
    ]
    CommunicatorNexusExitAbandonWarningDialog: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xF40)
    ]
    WeaponSpawnAltObject: Annotated[cTkModelResource, Field(cTkModelResource, 0xF60)]
    WeaponSpawnObject: Annotated[cTkModelResource, Field(cTkModelResource, 0xF80)]
    BaseBuildingTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xFA0)
    ]
    BeaconScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xFB0)]
    BioShipTerrainResource: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xFC0)]
    BuildersWordReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xFD0)]
    CommunicatorEffectTable: Annotated[
        basic.cTkDynamicArray[cGcScanEffectData],
        Field(basic.cTkDynamicArray[cGcScanEffectData], 0xFE0),
    ]
    DebugScanPlanet: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xFF0)]
    DebugScanSpace: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1000)]
    DefaultAnim: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1010)]
    DistressSignalScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1020)]
    FreeShipSlotID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1030)]
    FreeSuitSlotID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1040)]
    FreeWeapSlotID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1050)]
    FreighterHyperdriveAccess: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x1060),
    ]
    HyperdriveAccess: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x1070),
    ]
    InitialDebrisScene: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1080)
    ]
    LegacyBaseBuildingTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1090)
    ]
    MissionSurveyBugsID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10A0)]
    MissionSurveyWormID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10B0)]
    NexusRecipeCostType: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10C0)]
    ObservatoryScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10D0)]
    PirateEarlySpawnChances: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x10E0),
    ]
    PirateMissionPrimaryReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10F0)]
    PirateMissionSecondReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1100)]
    RadioTowerScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1110)]
    ResourceDirtSubstanceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1120)]
    ResourceParticleFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1130)
    ]
    ResourceUnderwaterSubstanceID: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x1140)
    ]
    SalvageProdsList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x1150),
    ]
    SalvageSubstancesList: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x1160),
    ]
    SandwormTerrainResource: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1170)]
    SeaTrashDeployID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1180)]
    ShipScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1190)]
    ToolScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x11A0)]
    ToolScanHardMode: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x11B0)]
    VisualScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x11C0)]
    WaypointScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x11D0)]
    ZoomLevels: Annotated[
        basic.cTkDynamicArray[cGcZoomData],
        Field(basic.cTkDynamicArray[cGcZoomData], 0x11E0),
    ]
    CookingRefreshTimeInSeconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x11F0)
    ]
    NPCWorkerInteractionCooldown: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x11F8)
    ]
    AsteroidResourceCollect: Annotated[
        cGcResourceCollectEffect, Field(cGcResourceCollectEffect, 0x1200)
    ]
    AlienShipEvolveCosts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1234)]
    FlybyTimers: Annotated[cGcExperienceTimers, Field(cGcExperienceTimers, 0x1254)]
    FreighterTechQualityWeightings: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1274)
    ]
    FreighterTimers: Annotated[cGcExperienceTimers, Field(cGcExperienceTimers, 0x1294)]
    PlanetPirateTimers: Annotated[
        cGcExperienceTimers, Field(cGcExperienceTimers, 0x12B4)
    ]
    PoliceTimers: Annotated[cGcExperienceTimers, Field(cGcExperienceTimers, 0x12D4)]
    SentinelTimersLow: Annotated[
        cGcExperienceTimers, Field(cGcExperienceTimers, 0x12F4)
    ]
    SentinelTimersNormal: Annotated[
        cGcExperienceTimers, Field(cGcExperienceTimers, 0x1314)
    ]
    SpaceFlybyTimers: Annotated[cGcExperienceTimers, Field(cGcExperienceTimers, 0x1334)]
    SpacePirateTimers: Annotated[
        cGcExperienceTimers, Field(cGcExperienceTimers, 0x1354)
    ]
    BulletTracer: Annotated[cGcTracerData, Field(cGcTracerData, 0x1374)]
    ShipTracer: Annotated[cGcTracerData, Field(cGcTracerData, 0x138C)]
    ChanceOfPirateFreighterBattleOnWarpToSystem: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13A4)
    ]
    MissionSubstanceDifficultyMultipliers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13B4)
    ]
    PirateInterestLevels: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x13C0)]
    PirateInterestLevelsSurvival: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x13CC)
    ]
    PoliceInterestLevels: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x13D8)]
    PoliceInterestLevelsSurvival: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x13E4)
    ]
    FrigateFlybyTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x13F0)]
    HUDDamageSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x13F8)]
    HUDDamageSplatSize: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1400)]
    Portal: Annotated[cGcPortalData, Field(cGcPortalData, 0x1408)]
    SaveContextTransferShipCostScaleNanites: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1410)
    ]
    SaveContextTransferShipCostScaleUnits: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1418)
    ]
    SaveContextTransferWeaponCostScaleNanites: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1420)
    ]
    SaveContextTransferWeaponCostScaleUnits: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1428)
    ]
    AggressiveSentinelProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1430)
    ]
    AggressiveSentinelProbabilitySurvival: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1434)
    ]
    AirLockDoorRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1438)]
    AlienPodThreshold1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x143C)]
    AlienPodThreshold2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1440)]
    AllRecipesKnownNanitesMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1444)]
    AllRecipesKnownNanitesMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1448)]
    AngleFromBaseComputerWhenTeleporting: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x144C)
    ]
    AsteroidCarveRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1450)]
    AsteroidHitForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1454)]
    AsteroidResourceReducer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1458)]
    AsteroidScanMaxShown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x145C)]
    AsteroidScanRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1460)]
    AsteroidScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1464)]
    AsteroidTorqueForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1468)]
    AtlasGunCurrencyConversion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x146C)]
    AtmosphereEntryErrorTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1470)]
    AtmosphereEntryFadeTimeFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1474)
    ]
    AtmosphereEntryOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1478)]
    AtmosphereEntryTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x147C)]
    AutoTranslateWordChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1480)]
    BackgroundSpaceEncounterCheckTimer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1484)
    ]
    BarrelOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1488)]
    BaseBuildingHoverTimeToKnowPart: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x148C)
    ]
    BaseBuildingRemotePlayerErrorAlphaScanEffect: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1490)
    ]
    BaseFoodDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1494)]
    BaseLaserHeatTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1498)]
    BeaconInteractRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x149C)]
    BinocCreatureScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14A0)]
    BinocMinScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14A4)]
    BinocScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14A8)]
    BinocTimeBeforeScan: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14AC)]
    BinocularScanTargetFadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14B0)
    ]
    BinocularScanTargetHeightRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14B4)
    ]
    BinocularScanTargetInitialFadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14B8)
    ]
    BinocularScanTargetLineWidth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14BC)
    ]
    BinocularScanTargetMinHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14C0)
    ]
    BinocularScanTargetScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C4)]
    BlackHoleJumpVoxelDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C8)]
    BlackHoleJumpVoxelVariation: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14CC)
    ]
    BonusChildTypeElementsAdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14D0)]
    BonusChildTypeElementsMultiply: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14D4)
    ]
    BonusSameTypeElementsAdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14D8)]
    BonusSameTypeElementsMultiply: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14DC)
    ]
    BugFiendCap: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14E0)]
    BuildingBeamDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14E4)]
    BuildingPlayerBaseIconOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14E8)
    ]
    BulletTraceLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14EC)]
    CargoShieldStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14F0)]
    CockpitScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14F4)]
    CombatLevelBaseValueBoltcaster: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14F8)
    ]
    CombatLevelBaseValueCannon: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14FC)]
    CombatLevelBaseValueGrenade: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1500)
    ]
    CombatLevelBaseValueRailgun: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1504)
    ]
    CombatLevelBaseValueShotgun: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1508)
    ]
    CombatLevelBaseValueSMG: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150C)]
    CombatLevelBestWeaponBias: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1510)]
    CombatLevelSClassValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1514)]
    CombatSpeedReadoutMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1518)
    ]
    CommonProductEffectiveness: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x151C)]
    CommunicatorCargoScanDroneAtOffsetFallback: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1520)
    ]
    CommunicatorCargoScanDronePitch: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1524)
    ]
    CommunicatorCargoScanDroneRoll: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1528)
    ]
    CommunicatorCargoScanDroneScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x152C)
    ]
    CommunicatorCargoScanDroneScaleFallback: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1530)
    ]
    CommunicatorCargoScanDroneUpOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1534)
    ]
    CommunicatorCargoScanDroneUpOffsetFallback: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1538)
    ]
    CommunicatorCargoScanDroneYaw: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x153C)
    ]
    CommunicatorFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1540)]
    CommunicatorSpawnHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1544)
    ]
    CommunicatorSpawnOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1548)]
    CommunicatorSpawnRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154C)]
    CommunicatorSpawnScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1550)]
    CorruptSentinelProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1554)]
    CreatureMinScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1558)]
    CreatureScanAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x155C)]
    CreatureScanStickyDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1560)]
    CreaturesToBaitForTutorial: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1564)]
    CreaturesToFeedForTutorial: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1568)]
    CritDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x156C)]
    CriticalHitMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1570)]
    CritScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1574)]
    CronusNaniteDonationMul: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1578)]
    DeadPlanetGravityFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x157C)]
    DeathMoneyPenalty: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1580)]
    DebugScanForceBuildingType: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x1584),
    ]
    DeepWaterJellyCrimeModMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1588)]
    DeepWaterResourceMulMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x158C)]
    DerelictPulseEncounterAtmosphericEffectChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1590)
    ]
    DestroyEffectHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1594)]
    DestroyEffectMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1598)]
    DistanceFromBaseComputerWhenTeleporting: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x159C)
    ]
    DockNodeBuyRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15A0)]
    EarlyPiratesToBeKilled: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15A4)]
    EmergencyBuildingScanEventDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15A8)
    ]
    EmergencyBuildingScanEventTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15AC)
    ]
    EventTargetSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B0)]
    ExcitingNearRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B4)]
    ExcitingViewAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B8)]
    ExcitingViewRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15BC)]
    ExplosionForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C0)]
    ExplosionForceMaxForceRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15C4)
    ]
    ExplosionRadiusMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C8)]
    FourthRaceSpawnPercentage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15CC)]
    FreighterBattleRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15D0)]
    FreighterCargoPodHealthFraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15D4)
    ]
    FreighterFuelRodHealthFraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15D8)
    ]
    FreighterStartPecent: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15DC)]
    GasGiantGravityFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15E0)]
    GoalGapVoxelDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15E4)]
    GPSRandomChangeTimeBuilderCorruption: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x15E8)
    ]
    GPSRandomChangeTimeMid: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15EC)]
    GPSRandomChangeTimeNarrow: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15F0)]
    GPSRandomChangeTimeWide: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15F4)]
    GrabPlayerCooldownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15F8)]
    GuildStockReplenishTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15FC)]
    GuildStockReplenishTimeSubstance: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1600)
    ]
    GunDownAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1604)]
    GunOffsetAggressiveX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1608)]
    GunOffsetAggressiveY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160C)]
    GunOffsetAggressiveZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1610)]
    GunOffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1614)]
    GunOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1618)]
    GunOffsetZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x161C)]
    GunUpAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1620)]
    HardModeTechDamageHighPercent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1624)
    ]
    HardModeTechDamageMidNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1628)]
    HardModeTechDamageMidPercent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x162C)
    ]
    HeatAlertTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1630)]
    HeatDamageBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1634)]
    HeatMaxPowerPoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1638)]
    HeatWidthBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x163C)]
    HeatWidthBoostAlt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1640)]
    HitEffectMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1644)]
    HitOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1648)]
    HmdInteractionRangeMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x164C)
    ]
    HmdInteractionRangeMinRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1650)
    ]
    HmdInteractionRangeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1654)
    ]
    HoursBetweenBattles: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1658)]
    HoursBetweenMiniStation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x165C)]
    HoverTimeToScan: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1660)]
    HoverTimeToScanCreatures: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1664)]
    HoverVisiblePointsNeeded: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1668)]
    HUDArrowPrimaryScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x166C)]
    HUDDamageOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1670)]
    HUDDamageRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1674)]
    HUDDamageScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1678)]
    HUDLabelAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x167C)]
    HUDLabelAngleOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1680)]
    HUDLabelOffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1684)]
    HUDLabelOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1688)]
    HUDLabelOffsetZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168C)]
    HUDLabelScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1690)]
    HUDLabelTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1694)]
    HUDLockOnAudioTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1698)]
    HUDReticuleMoveAim: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x169C)]
    HUDReticuleMoveBack: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A0)]
    HUDScaleAdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A4)]
    HUDScaleFarTarget: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A8)]
    HUDScaleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16AC)]
    HUDScaleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B0)]
    HUDScaleMinAim: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B4)]
    HUDScaleRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B8)]
    HUDStoreFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16BC)]
    IllegalTechProductTradingMod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C0)
    ]
    InfestedPlanetDeepSpaceFlybyMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C4)
    ]
    InitialLocationProtectionRadiusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C8)
    ]
    InteractionAttractTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16CC)]
    InteractionComponentUpdateDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16D0)
    ]
    InteractionDescriptionTextTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16D4)
    ]
    InteractionMessageModuleDisplayTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16D8)
    ]
    InteractionMinTimeBeforeHighlightedOptionSelection: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16DC)
    ]
    InteractionMinTimeBetweenStickOptionHighlights: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16E0)
    ]
    InteractionMinTimeForResponseText: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16E4)
    ]
    InteractionOverrideFrom: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x16E8),
    ]
    InteractionOverrideTo: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x16EC),
    ]
    InteractionPickupAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F0)]
    InteractionPickupRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F4)]
    InteractionStickOptionStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16F8)
    ]
    InteractionTorchFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16FC)]
    InteractionTorchStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1700)]
    JumpToCenterFuelCost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1704)]
    LaserExplosionForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1708)]
    LaserExplosionForceMaxForceRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x170C)
    ]
    LaserExplosionForceRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1710)]
    LaserRechargeHintThresholdEarly: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1714)
    ]
    LaserRechargeHintThresholdLate: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1718)
    ]
    LightStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x171C)]
    LineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1720)]
    LockOffFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1724)]
    LowSentinelProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1728)]
    LowSentinelProbabilitySurvival: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x172C)
    ]
    MapFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1730)]
    MapHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1734)]
    MapOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1738)]
    MapRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x173C)]
    MapTargetOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1740)]
    MaxActiveWeatherHazardGifts: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1744)
    ]
    MaxCookingRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1748)]
    MaxDistanceForLadderTeleport: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x174C)
    ]
    MaxDronesAggressive: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1750)]
    MaxDronesAggressiveSurvival: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1754)
    ]
    MaxDronesLow: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1758)]
    MaxDronesLowSurvival: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x175C)]
    MaxDronesNormal: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1760)]
    MaxDronesNormalSurvival: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1764)]
    MaxMeteorSurfaceAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1768)]
    MaxNumMissionsFromMissionGiver: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x176C)
    ]
    MaxNumSameGroupTech: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1770)]
    MaxPossibleShipDamagePotential: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1774)
    ]
    MaxResourceCrystalBlobSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1778)]
    MaxRespawnOnGroundHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x177C)]
    MaxSpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1780)]
    MaxStandingTechDiscount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1784)]
    MaxTorpedoesInFlight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1788)]
    MeleeHintThresholdEarly: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x178C)]
    MeleeHintThresholdLate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1790)]
    MinCookingRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1794)]
    MissileApproachTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1798)]
    MissileBrakeForceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x179C)]
    MissileBrakeForceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A0)]
    MissileBrakeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A4)]
    MissileForceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A8)]
    MissileForceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17AC)]
    MissileHitRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17B0)]
    MissileLockTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17B4)]
    MissileMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17B8)]
    MissileMaxTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17BC)]
    MissileMinCircleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C0)]
    MissileOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C4)]
    MissileReloadTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C8)]
    MissileRotateMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17CC)]
    MissileRotateMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D0)]
    MissileRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D4)]
    MissileThreatTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D8)]
    MissionEventAllowResetDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17DC)
    ]
    MissionSurveyAutoScanDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17E0)
    ]
    MissionSurveyAutoScanFlattenRadiusMul: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17E4)
    ]
    MissionSurveyBeginScanPercentageEvent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17E8)
    ]
    MissionSurveyBeginScanPercentageScannable: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17EC)
    ]
    MissionSurveyInShipArrivedDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17F0)
    ]
    MissionSurveyMarkerAutoHideTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17F4)
    ]
    MissionSurveyMaxAngleOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17F8)
    ]
    MissionSurveyMaxGuidanceDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17FC)
    ]
    MissionSurveyMaxGuidanceDistanceWorms: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1800)
    ]
    MissionSurveyMaxScanAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1804)]
    MissionSurveyMaxScanAngleScannableComp: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1808)
    ]
    MissionSurveyMaxSignalConeAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x180C)
    ]
    MissionSurveyRevealWithoutScanDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1810)
    ]
    MissionSurveyScanRangeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1814)
    ]
    MissionSurveyScanSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1818)]
    MissionSurveyScanSpeedScannableComp: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x181C)
    ]
    MissionSurveySonarMaxPulseSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1820)
    ]
    MissionSurveySonarMinPulseSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1824)
    ]
    MissionSurveySonarPulseSpeedBandCount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1828)
    ]
    MouseSensitivity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x182C)]
    MouseSensitivityShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1830)]
    MouseSensitivityVehicle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1834)]
    MultidimensionalFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1838)]
    NewDiscoveryDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x183C)]
    NexusDespawnSquaredDistance: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1840)
    ]
    NexusRecipeCostNaniteMultiplier: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1844)
    ]
    NonAggressiveLushSurvivalProbabability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1848)
    ]
    NonDominantRaceSpawnPercentage: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x184C)
    ]
    NonDominantRaceSpawnPercentagePirate: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1850)
    ]
    NonNaturalCostMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1854)]
    NormalModeHeatBonus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1858)]
    NPCNavNodeSearchUpDistScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x185C)
    ]
    NPCWaitWhenRevealedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1860)]
    NumMissionsPerSolarSystem: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1864)]
    OffscreenFadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1868)]
    OffscreenMinDot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x186C)]
    OverheatDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1870)]
    OverheatGenerosity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1874)]
    PainTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1878)]
    PartyPlanetSearchDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x187C)]
    PersonalInventoryMinHeightMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1880)
    ]
    PersonalInventoryMinWidthMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1884)
    ]
    PersonalTechInventoryMinHeightMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1888)
    ]
    PersonalTechInventoryMinWidthMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x188C)
    ]
    PirateEarlySpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1890)]
    PirateFreighterBattleNoTargetLeaderTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1894)
    ]
    PirateFreighterBeginFleeHealthFraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1898)
    ]
    PirateFreighterFrigateCountForReinforce: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x189C)
    ]
    PirateFreighterRewardDelayTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18A0)
    ]
    PirateFreighterRewardDelayTimeEscaped: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18A4)
    ]
    PirateFreighterRewardMessageDelayTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18A8)
    ]
    PirateFreighterRewardMessageDelayTimeEscaped: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18AC)
    ]
    PirateFreighterWarpChargeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18B0)
    ]
    PirateFreighterWarpChargeTimeToAddPerBrokenEngine: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18B4)
    ]
    PirateGroundAccelerator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18B8)]
    PirateGroundInventoryAccelerator: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18BC)
    ]
    PirateInterestDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18C0)]
    PirateInterestDistanceMPMission: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18C4)
    ]
    PirateInterestOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18C8)]
    PirateRaidAccelerator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18CC)]
    PlanetPirateFlybyMaxRepeatCounter: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x18D0)
    ]
    PlayerAmbientSpotLightIntensity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18D4)
    ]
    PlayerAmbientSpotLightOffsetY: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18D8)
    ]
    PlayerAmbientSpotLightOffsetZ: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18DC)
    ]
    PoliceAcceleratorNoCargoNormal: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18E0)
    ]
    PoliceAcceleratorNoCargoSkipScanOdds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18E4)
    ]
    PoliceAcceleratorNoCargoWealthy: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18E8)
    ]
    PoliceAcceleratorPulseExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18EC)
    ]
    PoliceAcceleratorSmugglingItemsMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x18F0)
    ]
    PoliceAcceleratorSmugglingMulMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18F4)
    ]
    PoliceAcceleratorStationLockOn: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18F8)
    ]
    PoliceInterestDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18FC)]
    PoliceInterestDistanceMPMission: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1900)
    ]
    PoliceInterestOverride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1904)]
    ProductItemStockDecayTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1908)]
    ProductItemStockReplenishTime: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x190C)
    ]
    ProjectileLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1910)]
    ProjectileSpeedBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1914)]
    PulseEncounterChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1918)]
    PulseEncounterChanceBlue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x191C)]
    PulseEncounterChanceGreen: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1920)]
    PulseEncounterChanceRed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1924)]
    PulseEncounterChanceStandard: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1928)
    ]
    PulseEncounterCheckTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x192C)]
    PulseEncounterStopPower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1930)]
    PulseEncounterStopSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1934)]
    RareProductEffectiveness: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1938)]
    RareSubstanceEffectiveness: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x193C)]
    RefinerProductsMadeInTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1940)]
    RefinerProductsMadeInTimeSurvival: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1944)
    ]
    RefinerSubsMadeInTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1948)]
    RefinerSubsMadeInTimeSurvival: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x194C)
    ]
    ResourceCommonMaxAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1950)]
    ResourceCommonMinAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1954)]
    ResourceCommonReducer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1958)]
    ResourceDirtMaxAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x195C)]
    ResourceDirtMinAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1960)]
    ResourceDirtReducer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1964)]
    ResourceMaxAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1968)]
    ResourceMinAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x196C)]
    ResourceParticleMaxNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1970)]
    ResourceParticleMinNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1974)]
    ResourceParticleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1978)]
    ResourceParticleSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x197C)]
    ResourceReducer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1980)]
    RocketLockerFuelUse: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1984)]
    SalvageShipExplodeShipDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1988)
    ]
    SalvageShipExplodeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198C)]
    SalvageShipHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1990)]
    SalvageShipOneRevolutionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1994)
    ]
    SalvageShipPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1998)]
    SalvageShipShowShipDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x199C)
    ]
    SalvageShipShowShipSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19A0)]
    SalvageShipShowShipSpeedSwitching: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19A4)
    ]
    SalvageSubstanceValueThreshold: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x19A8)
    ]
    SalvageValueAsProds: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19AC)]
    SalvageWeaponHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B0)]
    SalvageWeaponMaxSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B4)]
    SalvageWeaponPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B8)]
    SalvageWeaponScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19BC)]
    ScanAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C0)]
    ScanAngleCutoff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C4)]
    ScannableComponentMarkerOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19C8)
    ]
    ScannableComponentPlaceMarkerOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19CC)
    ]
    ScannerAnalyzeFXRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D0)]
    ScannerIconsClumpRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D4)]
    ScannerMarkerFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D8)]
    ScannerPhysicsProbeAABBSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19DC)
    ]
    ScannerSmallMarkerFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19E0)]
    ScannerSubstanceTimePerTrigger: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19E4)
    ]
    ScannerTuningA: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19E8)]
    ScannerTuningB: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19EC)]
    ScannerTuningC: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F0)]
    ScannerTuningD: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F4)]
    ScannerTuningResourceOffset1: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19F8)
    ]
    ScannerTuningResourceOffset2: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19FC)
    ]
    ScannerTuningSmoothStepAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A00)
    ]
    ScannerTuningTrailingEdge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A04)]
    ScanStartTimeDelayMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A08)]
    ScanStartTimeDelayRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A0C)]
    ScanStartTimeDistanceDelayTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A10)
    ]
    ScanStickyDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A14)]
    ScanToRevealDelayOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A18)]
    ScanToRevealVFXBaseScalingSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A1C)
    ]
    ScrapDroneProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A20)]
    SeasonalMessageModuleAttractDistanceMul: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A24)
    ]
    SentinelsHigh: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A28)]
    SentinelsLow: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A2C)]
    ShipBulletTraceLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A30)]
    ShipDisplayDamageMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A34)
    ]
    ShipInteractRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A38)]
    ShipInterestAcceleratorInAsteroidField: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A3C)
    ]
    ShipInventoryMinHeightMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A40)]
    ShipInventoryMinWidthMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A44)]
    ShipMiningMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A48)]
    ShipScanOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A4C)]
    ShipScanOffsetGap: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A50)]
    ShipScanPlanetRechargeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A54)
    ]
    ShipScanSpaceRechargeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A58)
    ]
    ShipTechInventoryMinHeightMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A5C)
    ]
    ShipTechInventoryMinWidthMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A60)
    ]
    ShootableAggroForgetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A64)]
    ShootableAggroMinStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A68)]
    ShootableArmourHighlightHitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A6C)
    ]
    SimpleInteractionMessageTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A70)
    ]
    SimpleInteractionPickupAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A74)
    ]
    SimpleInteractionPickupRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A78)
    ]
    SmugglerSellingMarkup: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A7C)]
    SpaceBattleAnyHostileShipsRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A80)
    ]
    SpaceBattleMaxTorpedosTargetingLeaderShip: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A84)
    ]
    SpaceBattleMaxTorpedosTargetingNonLeaderShip: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A88)
    ]
    SpaceBattleRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A8C)]
    SpaceCombatRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A90)]
    SpaceSpeedReadoutMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A94)
    ]
    SpawnerWeaponRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A98)]
    SpecialMiningAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A9C)]
    SpecialMiningTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AA0)]
    SpecialTechSlotBonus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AA4)]
    SpeedReadoutMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AA8)]
    SpookMessageChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AAC)]
    SpookMessageCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB0)]
    SpookMessageThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB4)]
    StormBonusJetpackMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB8)]
    StormBonusJetpackWeather: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x1ABC),
    ]
    StormBonusMiningAmountMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC0)]
    StormBonusMiningAmountWeather: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x1AC4),
    ]
    StormBonusMiningHeatMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC8)]
    StormBonusMiningHeatWeather: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x1ACC),
    ]
    StormBonusSprintMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD0)]
    StormBonusSprintWeather: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x1AD4),
    ]
    StormGravityChangeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD8)]
    SubstanceItemStockDecayTime: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1ADC)
    ]
    SubstanceItemStockReplenishTime: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1AE0)
    ]
    SurveyBeginScanPercentage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AE4)]
    SurveyMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AE8)]
    SurveyScanMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AEC)]
    SurveyScanMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF0)]
    SurveySonarMaxPulseSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF4)]
    SurveySonarMiddleRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF8)]
    SurveySonarMiddleRangeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AFC)]
    SurveySonarMinPulseSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B00)]
    SurveySonarPulseSpeedBandCount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B04)
    ]
    TapInteractionDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B08)]
    TapInteractionIncreaseAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B0C)
    ]
    TechDamageChanceShieldedMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B10)
    ]
    TechDamageChanceShieldLevelMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B14)
    ]
    TechDamageChanceShieldLevelMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B18)
    ]
    TechDamageChanceToSelectPrimary: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B1C)
    ]
    TechnologyOverrideForSmuggler: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0x1B20),
    ]
    TeleporterDistanceTravelledMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B24)
    ]
    TerrainResourceCompassRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B28)
    ]
    TerrainResourceScanRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B2C)]
    TerrainResourceScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B30)]
    TimeToDisplayScanResults: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B34)]
    TorchCookieIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B38)]
    TorchDimCookieIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B3C)]
    TorchDimFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B40)]
    TorchDimStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B44)]
    TorchFollowCameraPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B48)]
    TorchFollowCameraTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B4C)]
    TorchFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B50)]
    TorchHandOffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B54)]
    TorchHandOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B58)]
    TorchHandOffsetZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B5C)]
    TorchOffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B60)]
    TorchOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B64)]
    TorchOffsetZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B68)]
    TorchOffsetZMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B6C)]
    TorchOffsetZMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B70)]
    TorchOffsetZSpeedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B74)]
    TorchRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B78)]
    TorchStaffOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B7C)]
    TorchStaffOffsetZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B80)]
    TorchStaffOffsetZMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B84)]
    TorchStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B88)]
    TorpedoCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B8C)]
    TorpedoCooldownRandomExtra: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B90)]
    TorpedoInitialWait: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B94)]
    TorpedoLaunchWarning: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B98)]
    TunnelStatReducer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B9C)]
    TurretAITargetingDistanceFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BA0)
    ]
    TurretAITargetingFocusPlayerFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BA4)
    ]
    TurretAITargetingLastHitFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BA8)
    ]
    TurretAITargetingPitchAngleFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BAC)
    ]
    TurretAITargetingYawAngleFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BB0)
    ]
    UndergroundTorchFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BB4)]
    UndergroundTorchStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BB8)]
    UnderwaterAmbientLightStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BBC)
    ]
    UnderwaterLightningDamageDistanceMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BC0)
    ]
    UnderwaterTorchFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC4)]
    UnderwaterTorchStrengthMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC8)]
    UnderwaterTorchVolumetricStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BCC)
    ]
    VehicleAllIconScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BD0)]
    VehicleInventoryMinHeightMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1BD4)
    ]
    VehicleInventoryMinWidthMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1BD8)
    ]
    ViciousSentinelProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BDC)]
    ViciousStormProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BE0)]
    ViciousWeatherProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BE4)]
    VoxelAsteroidResourceChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BE8)
    ]
    WarpsBetweenBattles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1BEC)]
    WarpsBetweenMiniStation: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1BF0)]
    WaterLandingDamageMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BF4)
    ]
    WaypointScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BF8)]
    WeaponInventoryMinHeightMax: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1BFC)
    ]
    WeaponInventoryMinWidthMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C00)]
    WeatherHazardGiftLifeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C04)]
    WeatherHazardGiftMaxDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C08)
    ]
    ZoomFindBuildingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C0C)]
    DepotResource: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1C10)
    ]
    RobotResource: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1C30)
    ]
    AllowBinocularMarker: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C50)]
    AllowDeconstruct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C51)]
    AllowSpaceScanEvents: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C52)]
    AtmosphereEntryCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1C53)
    ]
    Autolevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C54)]
    BinocsDisplayUnknownCreatures: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C55)
    ]
    BinocularScanTargetHeightCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1C56)
    ]
    CanMoveTechnology: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C57)]
    ChangePricesLocally: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C58)]
    DebugDrawTriggerBoxes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C59)]
    DebugPrintShootables: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5A)]
    DebugScanForceBuilding: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5B)]
    DisableAnomalyAmbientSpawn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5C)]
    DisableBasePowerHUDOverlay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5D)]
    DisableGalaxyMapInQuickMenu: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5E)]
    DisableNexusInQuickMenu: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5F)]
    EnableShootHitEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C60)]
    EnableTechPackaging: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C61)]
    EnableTeleporters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C62)]
    EveryMaintenanceIsBroken: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C63)]
    FailToFindBuildings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C64)]
    FreighterRequiresRGBHyperdriveUpgrades: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C65)
    ]
    HUDUpdateFromData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C66)]
    InstallTechWithInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C67)]
    InteractionOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C68)]
    KeepAttackingMaxWantedLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C69)]
    MissionSurveySuggestSurveyForNearScannables: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C6A)
    ]
    OverheatColourCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1C6B)
    ]
    OverheatColourCurveShip: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1C6C)
    ]
    OverheatCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1C6D)
    ]
    PainCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1C6E)
    ]
    PlayHitEffectsOnZeroDamage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C6F)]
    RewardInventoryClassItemFromShipSalvage: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C70)
    ]
    ScanToRevealIgnoreRequirements: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C71)
    ]
    ScanToRevealNPCsAlwaysTriggersCameraEvent: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C72)
    ]
    ShipScanCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1C73)
    ]
    ShowPriceMarkupsAsPercentages: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C74)
    ]
    SpawnResourceBlobsOnPartDelete: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1C75)
    ]
    TechMustBeInTechInventory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C76)]
    TorchDisabledInTheDay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C77)]
    UseCustomSaveDirectory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C78)]
    UseDebugScan: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C79)]
    UseMultiplierBonus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C7A)]
    UseOverheatColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C7B)]
    UseSecondaryBiomeSubstances: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C7C)]
    UseTradingCostTable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C7D)]


@partial_struct
class cGcGalaxyGlobals(Structure):
    MarkerSettings: Annotated[
        cGcGalaxyMarkerSettings, Field(cGcGalaxyMarkerSettings, 0x0)
    ]
    DefaultRenderSetup: Annotated[
        cGcGalaxyRenderSetupData, Field(cGcGalaxyRenderSetupData, 0xB00)
    ]
    FinalAnimationRenderSetup: Annotated[
        cGcGalaxyRenderSetupData, Field(cGcGalaxyRenderSetupData, 0xE40)
    ]
    DefaultGeneration: Annotated[
        cGcGalaxyGenerationSetupData, Field(cGcGalaxyGenerationSetupData, 0x1180)
    ]
    FinalAnimationGeneration: Annotated[
        cGcGalaxyGenerationSetupData, Field(cGcGalaxyGenerationSetupData, 0x1300)
    ]
    RaceFilterDefaultColours: Annotated[basic.Colour, Field(basic.Colour, 0x1480)]
    RaceFilterDeuteranopiaColours: Annotated[basic.Colour, Field(basic.Colour, 0x1510)]
    RaceFilterProtanopiaColours: Annotated[basic.Colour, Field(basic.Colour, 0x15A0)]
    RaceFilterTritanopiaColours: Annotated[basic.Colour, Field(basic.Colour, 0x1630)]
    EconomyFilterDefaultColours: Annotated[basic.Colour, Field(basic.Colour, 0x16C0)]
    EconomyFilterDeuteranopiaColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x1730)
    ]
    EconomyFilterProtanopiaColours: Annotated[basic.Colour, Field(basic.Colour, 0x17A0)]
    EconomyFilterTritanopiaColours: Annotated[basic.Colour, Field(basic.Colour, 0x1810)]
    GalacticWaypointDefaultColours: Annotated[basic.Colour, Field(basic.Colour, 0x1880)]
    GalacticWaypointDeuteranopiaColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x18F0)
    ]
    GalacticWaypointProtanopiaColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x1960)
    ]
    GalacticWaypointTritanopiaColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x19D0)
    ]
    BaseStarDefaultColours: Annotated[
        cGcGalaxyStarColours, Field(cGcGalaxyStarColours, 0x1A40)
    ]
    BaseStarDeuteranopiaColours: Annotated[
        cGcGalaxyStarColours, Field(cGcGalaxyStarColours, 0x1A90)
    ]
    BaseStarProtanopiaColours: Annotated[
        cGcGalaxyStarColours, Field(cGcGalaxyStarColours, 0x1AE0)
    ]
    BaseStarTritanopiaColours: Annotated[
        cGcGalaxyStarColours, Field(cGcGalaxyStarColours, 0x1B30)
    ]
    ConflictFilterDefaultColours: Annotated[basic.Colour, Field(basic.Colour, 0x1B80)]
    ConflictFilterDeuteranopiaColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x1BC0)
    ]
    ConflictFilterProtanopiaColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x1C00)
    ]
    ConflictFilterTritanopiaColours: Annotated[
        basic.Colour, Field(basic.Colour, 0x1C40)
    ]
    AnostreakAway: Annotated[
        cGcGalaxyRenderAnostreakData, Field(cGcGalaxyRenderAnostreakData, 0x1C80)
    ]
    AnostreakFacing: Annotated[
        cGcGalaxyRenderAnostreakData, Field(cGcGalaxyRenderAnostreakData, 0x1CB0)
    ]
    HandMenuOffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x1CE0)
    ]
    HandGizmoColourAt: Annotated[basic.Colour, Field(basic.Colour, 0x1D10)]
    HandGizmoColourInner: Annotated[basic.Colour, Field(basic.Colour, 0x1D20)]
    HandGizmoColourRight: Annotated[basic.Colour, Field(basic.Colour, 0x1D30)]
    HandGizmoColourUp: Annotated[basic.Colour, Field(basic.Colour, 0x1D40)]
    HandGizmoHeadOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1D50)]
    SelectionTreeColour: Annotated[basic.Colour, Field(basic.Colour, 0x1D60)]
    MarkerDefaultHex: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x1D70)
    ]
    Camera: Annotated[cGcGalaxyCameraData, Field(cGcGalaxyCameraData, 0x1D80)]
    SolarSystemParameters: Annotated[
        cGcGalaxySolarSystemParams, Field(cGcGalaxySolarSystemParams, 0x1DF0)
    ]
    Audio: Annotated[cGcGalaxyAudioSetupData, Field(cGcGalaxyAudioSetupData, 0x1E4C)]
    ClickToSelectIconOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1E90)]
    GoalDistanceRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1E98)]
    SolarInfoPanelAlignment: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1EA0)]
    SolarInfoPanelLineOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1EA8)]
    SolarInfoPanelOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1EB0)]
    SolarInfoPanelOffsetVR: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1EB8)]
    SolarMarkerAlignmentVR: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1EC0)]
    SolarMarkerOriginOffsetVR: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1EC8)]
    SolarMarkerOriginOffsetVRPS4: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1ED0)
    ]
    SolarMarkerSizeVR: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1ED8)]
    SolarMarkerSizeVRPS4: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x1EE0)]
    AnostreakAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EE8)]
    ClickToSelectIconScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EEC)]
    DistanceComputerScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EF0)]
    EarlyStageMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EF4)]
    FadeGameInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EF8)]
    FadeGameOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EFC)]
    FadeMapInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F00)]
    FadeMapOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F04)]
    FadeGameOutTimeCentreJourney: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F08)
    ]
    FadeMapInTimeCentreJourney: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F0C)]
    FinalFadedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F10)]
    FinalFadeInRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F14)]
    FinalFadeOutRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F18)]
    FinalHoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F1C)]
    FinalHoldTowardsCenterTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F20)]
    FinalTransitionAcceleration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F24)
    ]
    FinalTransitionInterpolationValue: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F28)
    ]
    FinalTransitionMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F2C)]
    GalacticPathMaximumJumpDistanceLightyears: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F30)
    ]
    GalacticPathPreferGuideStarsTillJump: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F34)
    ]
    HandControlDefaultOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F38)]
    HandControlFreeMoveAngleOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F3C)
    ]
    HandControlFreeMoveMaxOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F40)
    ]
    HandControlGizmoScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F44)]
    HandControlMaxLockDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F48)]
    HandControlMaxOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F4C)]
    HandControlMinLockDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F50)]
    HandControlMoveBlendRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F54)]
    HandControlMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F58)]
    HandControlMoveSpeedTurbo: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F5C)]
    HandControlPitchSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F60)]
    HandControlPointerLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F64)]
    HandControlPointerLengthMini: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F68)
    ]
    HandControlRotateBlendRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F6C)]
    HandControlRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F70)]
    HandControlWarpSelectAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F74)]
    HandControlZoomSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F78)]
    HandGizmoInnerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F7C)]
    HandGizmoInnerThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F80)]
    HandGizmoLineThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F84)]
    HandGizmoMinAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F88)]
    HandGizmoRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F8C)]
    HandPitchFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F90)]
    HandPitchFactorRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F94)]
    HandPitchMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F98)]
    HandTurnFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F9C)]
    HandTurnFactorRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FA0)]
    HandZoomFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FA4)]
    HandZoomFactorRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FA8)]
    HexMarkerOuterWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FAC)]
    HexMarkerRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FB0)]
    HexMarkerRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FB4)]
    HexMarkerWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FB8)]
    HexStackOffsetX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FBC)]
    HexStackOffsetXOdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC0)]
    HexStackOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC4)]
    IntroCameraLookSmoothRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC8)]
    IntroFadeInRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FCC)]
    IntroFadeOutRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FD0)]
    IntroTitleFadeTrigger: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FD4)]
    IntroTitleHoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FD8)]
    IntroTitleTextureScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FDC)]
    LargeAreaColourScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FE0)]
    LastSelectedPathAlphaMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FE4)]
    MarkerDropShadowMult: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FE8)]
    MarkerDropShadowSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FEC)]
    MenuCursorRadiusHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FF0)]
    MenuOffsetHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FF4)]
    MenuRotateHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FF8)]
    MenuScaleHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FFC)]
    MenuSideOffsetHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2000)]
    OffWorldDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2004)]
    PathRenderingSelectedEndAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2008)
    ]
    PathRenderingSelectedStartAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x200C)
    ]
    PathRenderingSelectedStepAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2010)
    ]
    PathRenderingUnselectedEndAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2014)
    ]
    PathRenderingUnselectedStartAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2018)
    ]
    PathRenderingUnselectedStepAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x201C)
    ]
    PathToTargetIndicatorTimeFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2020)
    ]
    PathToTargetLineTimeFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2024)]
    PathUIAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2028)]
    PathUIConfirmSelectionMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x202C)
    ]
    PathUIDotLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2030)]
    PathUIGapLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2034)]
    PathUIHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2038)]
    PathUISelectionGenerosity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x203C)]
    PathUISelectionHandInvalidLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2040)
    ]
    PathUISelectionHandLineSelectAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2044)
    ]
    PathUISelectionHandSystemSelectAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2048)
    ]
    PathUISelectionMouseDeadZone: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x204C)
    ]
    PathUISelectionMouseSmoothRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2050)
    ]
    PathUISelectionMultiplierMouse: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2054)
    ]
    PathUISelectionMultiplierPad: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2058)
    ]
    PathUISelectionMultiplierPushing: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x205C)
    ]
    PathUISlotRadiusInner: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2060)]
    PathUISlotRadiusOuter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2064)]
    PathUISlotRadiusRing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2068)]
    PathUISlotSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x206C)]
    PathUISlotWidthRing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2070)]
    PathUIWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2074)]
    PathUIXOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2078)]
    PathUIYOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x207C)]
    PlanetUIIconLargeScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2080)]
    PlanetUIIconMediumScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2084)]
    PlanetUIIconSmallScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2088)]
    PurpleRevealFixedZoom: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x208C)]
    PurpleStarRevealAnimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2090)]
    SelectionTreeAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2094)]
    ShowPopupAtCameraMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2098)
    ]
    ShowUIHelpDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x209C)]
    SolarInfoPanelHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20A0)]
    SolarInfoPanelScaleVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20A4)]
    SolarInfoPanelWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20A8)]
    SolarLabelScaleDistanceVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20AC)]
    SolarMarkerPanelScaleVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20B0)]
    StarBlurIntroMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20B4)]
    StarBlurLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20B8)]
    StarBlurMaxBlurLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20BC)]
    StarBlurMaxDistanceFromCamera: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x20C0)
    ]
    StarBlurSizeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C4)]
    StarPathUIWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C8)]
    SystemInfoPanelGeneralAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x20CC)
    ]
    TimeForGalmapAutoNavModeSelectionInSeconds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x20D0)
    ]
    TransitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20D4)]
    AnostreakAlphaCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x20D8)
    ]
    AnostreakValueCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x20D9)
    ]
    GizmoOnHand: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20DA)]
    MarkerPulseEndCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x20DB)
    ]
    MarkerPulseStartCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x20DC)
    ]
    NewStyleLookAtCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20DD)]
    TransitionOutCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x20DE)
    ]


@partial_struct
class cGcFreighterBaseGlobals(Structure):
    NPCTypeSpawnPriorities: Annotated[
        cGcFreighterNPCSpawnPriority, Field(cGcFreighterNPCSpawnPriority, 0x0)
    ]
    FreighterRoomNPCData: Annotated[
        basic.cTkDynamicArray[cGcFreighterRoomNPCData],
        Field(basic.cTkDynamicArray[cGcFreighterRoomNPCData], 0x50),
    ]
    MaxTotalCapacityOfNPCTypes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x60)]
    NPCNavNodeConnectivity: Annotated[
        cGcNPCNavSubgraphNodeTypeConnectivity,
        Field(cGcNPCNavSubgraphNodeTypeConnectivity, 0x74),
    ]
    MaxTotalNPCCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x84)]
    MinTotalRoomsRequiredPerNPC: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88)]
    NPCSpawnIntervalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C)]
    NPCStartSpawnDelayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90)]


@partial_struct
class cGcEffectsGlobals(Structure):
    ResourceRendererData: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x0)
    ]
    HologramComponentDefaultMaterial: Annotated[
        cTkMaterialResource, Field(cTkMaterialResource, 0xB0)
    ]
    ClickToPlayCameraOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    ClickToPlayScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]


@partial_struct
class cGcFleetGlobals(Structure):
    CompletedFrigateHologramScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x0)
    ]
    DamagedFrigateHologramScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x50)
    ]
    DestroyedFrigateHologramScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0xA0)
    ]
    FrigateHologramScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0xF0)
    ]
    FrigateScanEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x140)]
    FreighterCustomiserSunAngleAdjust: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x190)
    ]
    PirateFreighterCustomiserSunAngleAdjust: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x1A0)
    ]
    FrigateInitialStats: Annotated[
        cGcFrigateStatsByClass, Field(cGcFrigateStatsByClass, 0x1B0)
    ]
    FrigateTraitStrengths: Annotated[
        cGcFrigateTraitStrengthByType, Field(cGcFrigateTraitStrengthByType, 0x5C0)
    ]
    PassiveIncomes: Annotated[
        cGcPassiveFrigateIncomeArray, Field(cGcPassiveFrigateIncomeArray, 0x930)
    ]
    DeepSpaceFrigateMoods: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0xA70)
    ]
    NegativeTraitIcons: Annotated[
        cGcFrigateTraitIcons, Field(cGcFrigateTraitIcons, 0xB78)
    ]
    TraitIcons: Annotated[cGcFrigateTraitIcons, Field(cGcFrigateTraitIcons, 0xC28)]
    CivilianMPMissionGiverPuzzle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xCD8)
    ]
    CommunicatorDamagePuzzleTableEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xCF8)
    ]
    DeepSpaceFrigateActivePuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD18)
    ]
    DeepSpaceFrigateDebriefPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD38)
    ]
    FleetCommunicationOSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD58)
    ]
    FrigateDamagePuzzleTableEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD78)
    ]
    FrigatePurchasePuzzleTableEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xD98)
    ]
    NeedAvailableExpeditionTerminalPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xDB8)
    ]
    NeedExpeditionTerminalPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xDD8)
    ]
    NeedFrigatesPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xDF8)
    ]
    NewExpeditionsAvailablePuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE18)
    ]
    NormandyActivePuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE38)
    ]
    NormandyDebriefPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE58)
    ]
    SelectExpeditionPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE78)
    ]
    TerminalActivePuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE98)
    ]
    TerminalDamagePuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xEB8)
    ]
    TerminalDebriefPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xED8)
    ]
    TerminalInterventionPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xEF8)
    ]
    TerminalNeedsAssignmentPuzzleID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xF18)
    ]
    FrigateBadMoods: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0xF38)]
    FrigateDamageDescriptions: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0xF50)
    ]
    FrigateExtraNotes: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0xF68)]
    FrigateGoodMoods: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0xF80)]
    CombatSpawnDelayIncreaseByInventoryClass: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0xF98),
    ]
    DebriefPunctuationList: Annotated[
        basic.cTkDynamicArray[cGcExpeditionDebriefPunctuation],
        Field(basic.cTkDynamicArray[cGcExpeditionDebriefPunctuation], 0xFA8),
    ]
    DeepSpaceCommonPrimaryTraits: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xFB8),
    ]
    DeepSpaceFrigateTraits: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xFC8),
    ]
    DifficultyModifier: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0xFD8),
    ]
    ExpeditionDifficultyKeyframes: Annotated[
        basic.cTkDynamicArray[cGcExpeditionDifficultyKeyframe],
        Field(basic.cTkDynamicArray[cGcExpeditionDifficultyKeyframe], 0xFE8),
    ]
    ExpeditionRankBoundaries: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0xFF8),
    ]
    FreighterTokenProductIDs: Annotated[
        basic.cTkDynamicArray[cGcExpeditionPaymentToken],
        Field(basic.cTkDynamicArray[cGcExpeditionPaymentToken], 0x1008),
    ]
    FrigateCaptainPuzzleIds: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x1018),
    ]
    FrigateHologramModels: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x1028),
    ]
    FrigateInteriorsToCache: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x1038),
    ]
    FrigateLevelVictoriesRequired: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x1048),
    ]
    FrigatePlanetModels: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x1058),
    ]
    GhostShipFrigateTraits: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x1068),
    ]
    NormandyTraits: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x1078),
    ]
    Powerups: Annotated[
        basic.cTkDynamicArray[cGcExpeditionPowerup],
        Field(basic.cTkDynamicArray[cGcExpeditionPowerup], 0x1088),
    ]
    UITraitLineLengths: Annotated[
        basic.cTkDynamicArray[cGcFrigateUITraitLines],
        Field(basic.cTkDynamicArray[cGcFrigateUITraitLines], 0x1098),
    ]
    EventTypeOccurrenceChance: Annotated[
        cGcExpeditionEventOccurrenceRate,
        Field(cGcExpeditionEventOccurrenceRate, 0x10A8),
    ]
    FrigateBaseCost: Annotated[cGcFrigateClassCost, Field(cGcFrigateClassCost, 0x110C)]
    FrigateCostVariance: Annotated[
        cGcFrigateClassCost, Field(cGcFrigateClassCost, 0x1134)
    ]
    ExpeditionDurations: Annotated[
        cGcExpeditionDurationValues, Field(cGcExpeditionDurationValues, 0x115C)
    ]
    FleetInteractionDepthOfField: Annotated[
        cGcInteractionDof, Field(cGcInteractionDof, 0x1170)
    ]
    FrigateCostMultiplier: Annotated[
        cGcInventoryClassCostMultiplier, Field(cGcInventoryClassCostMultiplier, 0x1184)
    ]
    PercentChanceOfDamageOnFailedEvent: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x1194)
    ]
    CameraPauseAfterStartingExpedition: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x119C)
    ]
    CombatDefenderSpawnDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A0)]
    CombatFrigateSpawnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A4)]
    CombatFrigateSpawnMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A8)]
    CombatNotificationTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11AC)]
    CombatSpawnDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B0)]
    DamagedListEntryPulseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B4)]
    DespawnDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B8)]
    DespawnDelayIncreasePerFrigate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11BC)
    ]
    DifficultyMultiplierForBalancedExpeditions: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11C0)
    ]
    DifficultyMultiplierForNonPrimaryEvents: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11C4)
    ]
    DistanceForPurchaseReset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C8)]
    DistanceForSingleShipFlybyCommsReset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11CC)
    ]
    ExpeditionDifficultyIncreaseForEachAdditionalFrigate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11D0)
    ]
    ExpeditionDifficultyVariance: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x11D4)
    ]
    ExplorationPointsRequiredForScan: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x11D8)
    ]
    FirstEventIndexWhichCanBeIntervention: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x11DC)
    ]

    class eForceDebriefEntryTypeEnum(IntEnum):
        None_ = 0x0
        PrimarySuccess = 0x1
        WhaleSuccess = 0x2
        PrimaryFailure = 0x3
        PrimaryDamage = 0x4
        SecondarySuccess = 0x5
        SecondaryFailure = 0x6
        SecondaryDamage = 0x7
        GenericSuccess = 0x8
        GenericFailure = 0x9
        WhaleFailure = 0xA

    ForceDebriefEntryType: Annotated[
        c_enum32[eForceDebriefEntryTypeEnum],
        Field(c_enum32[eForceDebriefEntryTypeEnum], 0x11E0),
    ]
    ForcedSequentialEventsStartingIndex: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x11E4)
    ]
    FreighterTokenMinimumSpend: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x11E8)]
    FrigateDistanceMultiplierIfNoCaptialShip: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11EC)
    ]
    FrigatesPerSecondForInstantSpawn: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11F0)
    ]
    HologramSwapSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11F4)]
    LevelupProgressRequiredToNotBeSadAboutDamage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11F8)
    ]
    LightYearsPerExpeditionEvent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x11FC)
    ]
    LightYearsPerExpeditionEvent_Easy: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1200)
    ]
    LowDamageNumberOfExpeditions: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1204)
    ]
    MaxDiceRollWhenCalculatingExpeditionEventResult: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1208)
    ]
    MaxExpeditionStatValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x120C)]
    MaxFrigateDistanceFromFreighter: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1210)
    ]
    MaxFrigateStatValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1214)]
    MaxGapBetweenExpeditionLogEntries: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1218)
    ]
    MaximumSpeedDecrease: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x121C)]
    MaximumSpeedIncrease: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1220)]
    MaxNumberOfPlayerShipsInFreighterHangar: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1224)
    ]
    MaxPurchaseDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1228)]
    MinExpeditionStatValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x122C)]
    MinFrigateDistanceFromFreighter: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1230)
    ]
    MinFrigateStatValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1234)]
    MinGapBetweenExpeditionLogEntries: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1238)
    ]
    NextDebriefDescriptionOffset: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x123C)
    ]
    NonUrgentDamagedListEntryAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1240)
    ]
    NormandyDamageEvents: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1244)]
    NormandyFailures: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1248)]
    NumberOfExpeditionChoices: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x124C)]
    NumberOfFrigatesPurchasedToEndEasyExpeditions: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1250)
    ]
    NumberOfShipsInInitialFleet: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1254)
    ]
    NumberOfUAChangesPerExpeditionEvent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1258)
    ]
    OverrideExpeditionSecondsPerDay: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x125C)
    ]
    PercentChanceOfFrigateAdditionalSpawnedTrait: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1260)
    ]
    PercentChanceOfGenericEventDescription: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1264)
    ]
    PercentChanceOfInterventionEvent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1268)
    ]
    PercentChanceOfPrimaryDescriptionForBalancedEvent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x126C)
    ]
    PercentChangeOfFrigateBeingPurchasable: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1270)
    ]
    PostCombatSpawnDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1274)]
    PostFreighterWarpSpawnDelayForFleetFrigates: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1278)
    ]
    PreFreighterWarpDepawnDelayForFleetFrigates: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x127C)
    ]
    RadiusRequiredForFrigateSpawn: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1280)
    ]
    RampDamageNumberOfExpeditions: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1284)
    ]
    SingleShipFlybyDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1288)]
    SingleShipFlybyHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x128C)
    ]
    SingleShipFlybyMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1290)]
    SpawnDelayForFleetFrigates: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1294)]
    SpawnDelayForNewFrigates: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1298)]
    SpawnDelayForReturningFrigates: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x129C)
    ]
    SpawnDelayIncreasePerFrigate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12A0)
    ]
    SpawnDelayRandomMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12A4)]
    SpawnDelayRandomMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12A8)]
    StatPointsAwardedForLevelUp: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x12AC)
    ]
    TimeBeforeDebriefLogsStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12B0)]
    TimeBeforeHidingHangar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12B4)]
    TimeBeforePlayerAlertedToDamagedFrigates: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12B8)
    ]
    TimeBeforePlayerAlertedToInterventionEvent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12BC)
    ]
    TimeBeforeShowingHangar: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C0)]
    TimeBetweenDebriefLettersAppearing: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12C4)
    ]
    TimeBetweenDebriefLogsAppearing: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12C8)
    ]
    TimeBetweenDebriefLogSectionsAppearing: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12CC)
    ]
    TimeBetweenPassiveIncomeTicks: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x12D0)
    ]
    TimeTakenForExpeditionEvent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x12D4)
    ]
    TimeTakenForExpeditionEvent_Easy: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x12D8)
    ]
    UITraitLinesAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12DC)]
    RacialTermForCaptain: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x12E0)
    ]
    DisablePlayerFleets: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1400)]
    ExpeditionsCompleteInstantly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1401)]
    NewFrigatesStartDamaged: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1402)]
    ShowMissingRewardDescriptions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1403)
    ]
    ShowSeeds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1404)]


@partial_struct
class cGcCreatureGlobals(Structure):
    PainShake: Annotated[cGcCameraShakeData, Field(cGcCameraShakeData, 0x0)]
    PetOffPlanetEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0xC0)]
    AllCreaturesDiscoveredColour: Annotated[basic.Colour, Field(basic.Colour, 0x110)]
    JellyBossBroodIdleColour: Annotated[basic.Colour, Field(basic.Colour, 0x120)]
    JellyBossBroodProximityWarningColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x130)
    ]
    JellyBossIdleColour: Annotated[basic.Colour, Field(basic.Colour, 0x140)]
    JellyBossProjectileAttackWarningColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x150)
    ]
    JellyBossSpawnBroodWarningColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x160)
    ]
    PetInteractionLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x170)]
    PetRadialBadColour: Annotated[basic.Colour, Field(basic.Colour, 0x180)]
    PetRadialBoostColour: Annotated[basic.Colour, Field(basic.Colour, 0x190)]
    PetRadialGoodColour: Annotated[basic.Colour, Field(basic.Colour, 0x1A0)]
    PetRadialNeutralColour: Annotated[basic.Colour, Field(basic.Colour, 0x1B0)]
    PetThrowArcColour: Annotated[basic.Colour, Field(basic.Colour, 0x1C0)]
    SpookFiendAggressiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x1D0)]
    SpookFiendKamikazeColour: Annotated[basic.Colour, Field(basic.Colour, 0x1E0)]
    SpookFiendPassiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x1F0)]
    SpookFiendSpitColour: Annotated[basic.Colour, Field(basic.Colour, 0x200)]
    WeirdBiomeDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x210)
    ]
    BiomeAirDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x610)
    ]
    BiomeDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x830)
    ]
    BiomeWaterDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA50)
    ]
    DietMeat: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xC70)
    ]
    DietVeg: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xE90)]
    PetBiomeClimates: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x10B0)
    ]
    WeirdKillingRewards: Annotated[
        cGcWeirdCreatureRewardList, Field(cGcWeirdCreatureRewardList, 0x12D0)
    ]
    Temperments: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x14D0)
    ]
    Diets: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1630)]
    WaterDiets: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x16B0)
    ]
    CreatureFilter: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x1730)]
    PetCarePuzzleOverrideID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1750)
    ]
    AlertTable: Annotated[
        basic.cTkDynamicArray[cGcCreatureAlertData],
        Field(basic.cTkDynamicArray[cGcCreatureAlertData], 0x1770),
    ]
    AlienShipQuestCreatureWeapon: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x1780)
    ]
    AlienShipQuestKillingSubstance: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x1790)
    ]
    BasicFeedingProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x17A0)]
    CarnivoreFeedingProducts: Annotated[
        basic.cTkDynamicArray[cGcCreatureFoodList],
        Field(basic.cTkDynamicArray[cGcCreatureFoodList], 0x17B0),
    ]
    CreatureDeathEffectBig: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x17C0)]
    CreatureDeathEffectMedium: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x17D0)]
    CreatureDeathEffectSmall: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x17E0)]
    CreatureHugeRunShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x17F0)]
    CreatureHugeWalkShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1800)]
    CreatureLargeRunShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1810)]
    CreatureLargeWalkShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1820)]
    CreatureSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x1830)]
    DefaultKillingSubstance: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1840)]
    FishDeathEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1850)]
    HarvestingProducts: Annotated[
        basic.cTkDynamicArray[cGcCreatureHarvestSubstanceList],
        Field(basic.cTkDynamicArray[cGcCreatureHarvestSubstanceList], 0x1860),
    ]
    HerbivoreFeedingProducts: Annotated[
        basic.cTkDynamicArray[cGcCreatureFoodList],
        Field(basic.cTkDynamicArray[cGcCreatureFoodList], 0x1870),
    ]
    HorrorPetFeedingProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1880)]
    KillingProducts: Annotated[
        basic.cTkDynamicArray[cGcCreatureSubstanceList],
        Field(basic.cTkDynamicArray[cGcCreatureSubstanceList], 0x1890),
    ]
    KillingSubstances: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x18A0),
    ]
    LootItems: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x18B0),
    ]
    PetEggMaxChangeProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18C0)]
    PetEggs: Annotated[
        basic.cTkDynamicArray[cGcCreaturePetEggData],
        Field(basic.cTkDynamicArray[cGcCreaturePetEggData], 0x18D0),
    ]
    PetEggsplosionEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18E0)]
    PetScan: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x18F0)]
    RobotFeedingProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1900)]
    RockTransformChanceModifiers: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x1910),
    ]
    SpookFiendsSpawnData: Annotated[
        basic.cTkDynamicArray[cGcSpookFiendSpawnData],
        Field(basic.cTkDynamicArray[cGcSpookFiendSpawnData], 0x1920),
    ]
    FlyingSnakeData: Annotated[cGcFlyingSnakeData, Field(cGcFlyingSnakeData, 0x1930)]
    SpherePusherOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1970)]
    SpherePusherRadiusMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1980)]
    SpherePusherWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1990)]
    JellyBossBroodMaxChaseTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x19A0)]
    SpookFiendsSpawnTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x19A8)]
    AdultBabyKilledNoticeDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19B0)
    ]
    AdultCorrelationValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B4)]
    AlertDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B8)]
    AllCreaturesDiscoveredBonusMul: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x19BC)
    ]
    AngryRockProportionNormal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C0)]
    AngryRockProportionSurvival: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19C4)
    ]
    AnimationStickToGroundSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19C8)
    ]
    AnimChangeCoolDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19CC)]
    AsteroidCreatureRichSystemSpawnPercent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19D0)
    ]
    AsteroidCreatureSpawnPercentOverride: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19D4)
    ]
    AttackPlayerDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D8)]
    AttractedMaxAvoidCreaturesDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19DC)
    ]
    AttractedMaxAvoidCreaturesStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19E0)
    ]
    AttractedMinAvoidCreaturesDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19E4)
    ]
    AttractedMinAvoidCreaturesStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19E8)
    ]
    AttractMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19EC)]
    AvoidCreaturesWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F0)]
    AvoidImpassableWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F4)]
    BadTurnPercent: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F8)]
    BadTurnWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19FC)]
    BaseAndTerrainModImpassableStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A00)
    ]
    BrakingForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A04)]
    BrakingForceY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A08)]
    BugFiendHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A0C)]
    BugQueenHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A10)]
    BugQueenSpitballExplosionRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A14)
    ]
    BugQueenSpitballSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A18)]
    BugQueenSpitCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A1C)]
    BugQueenSpitRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A20)]
    CreatureBlobRidingHugeMinSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A24)
    ]
    CreatureBlobRidingLargeMinSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A28)
    ]
    CreatureBlobRidingMedMinSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A2C)
    ]
    CreatureBrakeForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A30)]
    CreatureHarvestAmountHuge: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A34)]
    CreatureHarvestAmountLarge: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A38)]
    CreatureHarvestAmountMed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A3C)]
    CreatureHarvestAmountSmall: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A40)]
    CreatureHearingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A44)]
    CreatureHugeHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A48)]
    CreatureHugeMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A4C)]
    CreatureHugeRunMaxShakeDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A50)
    ]
    CreatureHugeWalkMaxShakeDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A54)
    ]
    CreatureIndoorSpeedMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A58)
    ]
    CreatureInteractBaseRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A5C)]
    CreatureInteractionRangeBoostHuge: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A60)
    ]
    CreatureInteractionRangeBoostLarge: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A64)
    ]
    CreatureInteractionRangeBoostMedium: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A68)
    ]
    CreatureInteractionRangeBoostRun: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A6C)
    ]
    CreatureInteractionRangeBoostSmall: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A70)
    ]
    CreatureInteractionRangeBoostSprint: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A74)
    ]
    CreatureInteractionRangeReducePredator: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A78)
    ]
    CreatureKillRewardAmountFiend: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A7C)
    ]
    CreatureKillRewardAmountHuge: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A80)
    ]
    CreatureKillRewardAmountLarge: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A84)
    ]
    CreatureKillRewardAmountMed: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A88)
    ]
    CreatureKillRewardAmountSmall: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1A8C)
    ]
    CreatureLargeHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A90)]
    CreatureLargeMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A94)]
    CreatureLargeRunMaxShakeDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A98)
    ]
    CreatureLargeWalkMaxShakeDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A9C)
    ]
    CreatureLookBeforeFleeingIfShotTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AA0)
    ]
    CreatureLookBeforeFleeingTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AA4)
    ]
    CreatureLookBeforeGoingTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AA8)
    ]
    CreatureLookPlayerForceLookTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AAC)
    ]
    CreatureLookScaryThingTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB0)]
    CreatureMedHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1AB4)]
    CreatureMedMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB8)]
    CreatureMinAlignSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ABC)]
    CreatureMinAnimMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC0)]
    CreatureMinRunTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC4)]
    CreatureMoveIdle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC8)]
    CreatureRidingHugeMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ACC)]
    CreatureRidingLargeMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD0)]
    CreatureRidingMedMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD4)]
    CreatureScaleMangle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD8)]
    CreatureSightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ADC)]
    CreatureSmallHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1AE0)]
    CreatureSpeedMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AE4)]
    CreatureTurnMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AE8)]
    CreatureTurnMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AEC)]
    CreatureUpdateRateMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AF0)
    ]
    CreatureWaryTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF4)]
    DefaultRunMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF8)]
    DefaultTrotMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AFC)]
    DefaultWalkMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B00)]
    DelayAfterRespawnBeforeAttackable: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B04)
    ]
    DespawnDistFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B08)]
    DetailAnimBlendInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B0C)]
    DetailAnimBlendOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B10)]
    DetailAnimMaxPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B14)]
    DetailAnimMinPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B18)]
    DroneExplodeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B1C)]
    EdgeClosenessPenalty: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B20)]
    ExtraFollowFreq1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B24)]
    ExtraFollowFreq2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B28)]
    ExtraFollowStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B2C)]
    FadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B30)]
    FadeScaleMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B34)]
    FadeScalePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B38)]
    FastSwimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B3C)]
    FeedingFollowTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B40)]
    FeedingNoticeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B44)]
    FeedingNoticeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B48)]
    FeedingTaskAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B4C)]
    FiendAggroDecreasePerSpawn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B50)]
    FiendAggroIncreaseDamageEgg: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B54)
    ]
    FiendAggroIncreaseDestroyEgg: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B58)
    ]
    FiendAggroTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B5C)]
    FiendBeingShotMemoryTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B60)]
    FiendCritAreaSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B64)]
    FiendDespawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B68)]
    FiendDistReduceForBeingShot: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B6C)
    ]
    FiendDistToConsiderTargetSwtich: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B70)
    ]
    FiendEggsToUnlockSpit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B74)]
    FiendHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B78)]
    FiendHealthLevelMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B7C)]
    FiendMaxAttackers: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B80)]
    FiendMaxEngaged: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B84)]
    FiendMaxSpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B88)]
    FiendMaxVerticalForPounce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B8C)]
    FiendMinSpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B90)]
    FiendPerceptionDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B94)]
    FiendPounceDistanceModifier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B98)
    ]
    FiendReplicateEndDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B9C)]
    FiendReplicateStartDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BA0)
    ]
    FiendSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BA4)]
    FiendZigZagSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BA8)]
    FiendZigZagStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BAC)]
    FishBobAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BB0)]
    FishBobFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BB4)]
    FishDesiredDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BB8)]
    FishFiendBigBoostStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BBC)]
    FishFiendBigBoostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC0)]
    FishFiendBigHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1BC4)]
    FishFiendBigScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC8)]
    FishFiendSmallBoostStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BCC)
    ]
    FishFiendSmallBoostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BD0)]
    FishFiendSmallHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1BD4)]
    FishFiendSmallScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BD8)]
    FishMinHeightAboveSeaBed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BDC)]
    FishObstacleAvoidStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BE0)]
    FishPlayerAttractionAhead: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BE4)]
    FishPlayerAttractionFrontDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BE8)
    ]
    FishPlayerAttractionMaxDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BEC)
    ]
    FishPlayerAttractionMinDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BF0)
    ]
    FishPlayerAttractionStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BF4)
    ]
    FishPredatorChargeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BF8)]
    FishPredatorChargeDistScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BFC)
    ]
    FishSeaBedAvoidStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C00)]
    FishWaterSurfaceAnticipate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C04)]
    FishWaterSurfaceAvoidStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C08)
    ]
    FloaterObstacleAvoidStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C0C)
    ]
    FloaterSteeringRayLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C10)]
    FloaterSteeringRaySphereSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C14)
    ]
    FloaterSteeringRaySpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C18)]
    FloaterSurfaceAnticipate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C1C)]
    FloaterSurfaceAvoidStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C20)
    ]
    FlowFieldWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C24)]
    FollowLeaderAlignWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C28)]
    FollowLeaderCohereWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C2C)]
    FollowPlayerDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C30)]
    FollowRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C34)]
    FollowRunPlayerDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C38)]
    FollowWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C3C)]
    FootDustGroundTintStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C40)]
    FootParticleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C44)]
    FootPlantError: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C48)]
    FreighterDespawnDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C4C)]
    FreighterJellyBobAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C50)]
    FreighterJellyBobFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C54)]
    FreighterSpawnDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C58)]
    FriendlyCreatureLimit: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C5C)]
    GroundWormScaleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C60)]
    GroundWormScaleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C64)]
    GroundWormSpawnChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C68)]
    GroundWormSpawnerActivateRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C6C)
    ]
    GroundWormSpawnerDestroyRadiusActive: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C70)
    ]
    GroundWormSpawnerDestroyRadiusInactive: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1C74)
    ]
    GroundWormSpawnMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C78)]
    GroundWormSpawnMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C7C)]
    GroundWormSpawnRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C80)]
    GroundWormSpawnSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C84)]
    GroundWormSpawnTimeOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C88)]
    GroupBabyHealthMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C8C)]
    GroupBabyProportion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C90)]
    GroupBabyRunProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C94)]
    GroupBabyScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C98)]
    GroupFemaleProportion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C9C)]
    GroupLookAtDurationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CA0)]
    GroupLookAtDurationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CA4)]
    GroupLookAtProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CA8)]
    GroupRunDurationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CAC)]
    GroupRunDurationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CB0)]
    GroupRunProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CB4)]
    GroupRunStormProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CB8)]
    HarvestCooldownMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CBC)]
    HarvestCooldownMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC0)]
    HeightDiffPenalty: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC4)]
    HeightLookAhead: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC8)]
    HerdGroupSizeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CCC)]
    ImpassabilityBrakeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CD0)]
    ImpassabilityTurnSpeedMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1CD4)
    ]
    ImpassabilityUnbrakeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CD8)]
    IndoorObstacleAvoidStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1CDC)
    ]
    IndoorSteeringRayLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CE0)]
    IndoorSteeringRaySphereSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1CE4)
    ]
    IndoorSteeringRaySpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CE8)]
    IndoorTurnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CEC)]
    InfluenceDeflect: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CF0)]
    InfluenceForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CF4)]
    InfluenceRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CF8)]
    InfluenceThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CFC)]
    JellyBossBroodColourInterpTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D00)
    ]
    JellyBossBroodSeparateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D04)]
    JellyBossBroodWarningRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D08)
    ]
    JellyBossColourInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D0C)]
    JellyBossFastSwimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D10)]
    JellyBossLandAnticipate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D14)]
    JellyBossLandAvoidStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D18)]
    LargeCreatureAvoidPlayerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D1C)
    ]
    LargeCreatureFleePlayerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D20)
    ]
    largeCreaturePerceptionDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1D24)
    ]
    LookMaxPitchWhenMoving: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D28)]
    LookMaxYawMoving: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D2C)]
    LookMaxYawStatic: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D30)]
    LookPitchAtMaxYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D34)]
    LookRollAtMaxYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D38)]
    LookRollWhenMoving: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D3C)]
    LowPerfFlockReduce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D40)]
    MaxAdditionalEcosystemCreaturesForDiscovery: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1D44)
    ]
    MaxBirdsProportion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D48)]
    MaxCreatureSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D4C)]
    MaxEcosystemCreaturesLow: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1D50)]
    MaxEcosystemCreaturesNormal: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1D54)
    ]
    MaxFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D58)]
    MaxFiendsToSpawn: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1D5C)]
    MaxFiendsToSpawnCarnage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1D60)]
    MaxFishFiends: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1D64)]
    MaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D68)]
    MaxHeightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D6C)]
    MaxRagdollsBeforeDespawnOffscreen: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1D70)
    ]
    MaxRagdollsBeforeDespawnOnscreen: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1D74)
    ]
    MaxRideLeanCounterRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D78)]
    MaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D7C)]
    MaxTorque: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D80)]
    MaxTurnRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D84)]
    MinFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D88)]
    MiniDroneEnergyRecoverRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D8C)]
    MiniDroneEnergyUsePerShot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D90)]
    MiniDroneShotDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D94)]
    MiniDroneShotMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D98)]
    MiningRandomProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D9C)]
    MinRideSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DA0)]
    MinScaleForNavMap: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DA4)]
    MinWaterSpawnDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DA8)]
    NavMapLookAhead: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DAC)]
    NumCreaturesRequiredForDiscoveryMission: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1DB0)
    ]
    NumWeirdCreaturesRequiredForDiscoveryMission: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1DB4)
    ]
    PassiveFleePlayerDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DB8)]
    PathOverestimate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DBC)]
    PatrolGradientFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DC0)]
    PatrolHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DC4)]
    PatrolMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DC8)]
    PatrolMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DCC)]
    PatrolSwitchMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DD0)]
    PauseBetweenCreatureSpawnRequests: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1DD4)
    ]
    PelvisIkStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DD8)]
    PercentagePlayerPredators: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DDC)]
    PerceptionUpdateRate: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1DE0)]
    PetAccessoryMoodDisplayThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1DE4)
    ]
    PetAccessoryStateInterval: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DE8)]
    PetAnimSpeedBoostSmallerThan: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1DEC)
    ]
    PetAnimSpeedBoostStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DF0)]
    PetAnimSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DF4)]
    PetAnimSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DF8)]
    PetChatCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DFC)]
    PetChatUseTraitTemplateChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E00)
    ]
    PetEffectSpawnOffsetHuge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E04)]
    PetEffectSpawnOffsetLarge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E08)]
    PetEffectSpawnOffsetMed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E0C)]
    PetEffectSpawnOffsetSmall: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E10)]
    PetEggAccessoryChanceModifier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E14)
    ]
    PetEggColourChanceModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E18)]
    PetEggFirstEggDelay: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1E1C)]
    PetEggHatchColourChangeChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E20)
    ]
    PetEggHatchScaleChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E24)]
    PetEggHatchTraitChange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E28)]
    PetEggLayingDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E2C)]
    PetEggLayingInterval: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1E30)]
    PetEggMaxAccessoriesChangeChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E34)
    ]
    PetEggMaxColourChangeChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E38)
    ]
    PetEggMaxDistStep: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E3C)]
    PetEggMaxHungry: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E40)]
    PetEggMaxLonely: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E44)]
    PetEggMaxOverdosage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E48)]
    PetEggMaxTopDescriptorChangeChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1E4C)
    ]
    PetEggMinDistStep: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E50)]
    PetEggMinGrowthToLay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E54)]
    PetEggModificationItemLimit: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1E58)
    ]
    PetEggModificationTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1E5C)]
    PetEggOverdosageModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E60)]
    PetEggScaleRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E64)]
    PetEggScaleRangeModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E68)]
    PetEggSubstanceModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E6C)]
    PetEggTraitRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E70)]
    PetEggTraitRangeModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E74)]
    PetFollowRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E78)]
    PetFollowRunPlayerDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E7C)]
    PetFootShakeModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E80)]
    PetForceBehaviour: Annotated[
        c_enum32[enums.cGcPetBehaviours],
        Field(c_enum32[enums.cGcPetBehaviours], 0x1E84),
    ]
    PetGrowthTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1E88)]
    PetHeartChangePerLayer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E8C)]
    PetHeartMaxSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E90)]
    PetHeartResponseLoopTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E94)]
    PetHeartResponseTotalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E98)]
    PetHeelDistSwitchTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E9C)]
    PetHeelDistSwitchTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EA0)]
    PetHeelLateralShiftTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EA4)]
    PetHeelLateralShiftTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EA8)]
    PetHeelPosSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EAC)]
    PetIncubationTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1EB0)]
    PetInteractBaseRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EB4)]
    PetInteractionLightHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EB8)]
    PetInteractionLightIntensityMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1EBC)
    ]
    PetInteractionLightIntensityMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1EC0)
    ]
    PetInteractTurnToFaceMinAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1EC4)
    ]
    PetLastActionReportTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EC8)]
    PetMaxSizeOffPlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ECC)]
    PetMaxSummonDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ED0)]
    PetMaxTurnRad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ED4)]
    PetMinSummonDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ED8)]
    PetMinTrust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EDC)]
    PetMinTurnRad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EE0)]
    PetMoodCurvePower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EE4)]
    PetMoodSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EE8)]
    PetNavRadForMaxTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EEC)]
    PetNavRadForMinTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EF0)]
    PetOrderMaxRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EF4)]
    PetOrderMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EF8)]
    PetPlayerSpeedSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EFC)]
    PetRadialCentre: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F00)]
    PetRadialPulseMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F04)]
    PetRadialPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F08)]
    PetRadialRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F0C)]
    PetRadialWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F10)]
    PetRunAtHeelDistMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F14)]
    PetRunAtHeelDistMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F18)]
    PetRunAtHeelLateralShiftMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F1C)
    ]
    PetRunAtHeelLateralShiftMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F20)
    ]
    PetSlotsUnlockedByDefault: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1F24)]
    PetStickySideBiasAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F28)]
    PetSummonRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F2C)]
    PetTeleportDistOffPlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F30)]
    PetTeleportDistOnPlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F34)]
    PetTeleportEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F38)]
    PetThrowArcRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F3C)]
    PetTickleChatChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F40)]
    PetTreatChatChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F44)]
    PetTrustChangeInterval: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1F48)]
    PetTrustDecreaseStep: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F4C)]
    PetTrustDecreaseThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F50)]
    PetTrustIncreaseStep: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F54)]
    PetTrustIncreaseThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F58)]
    PetTrustOnAdoption: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F5C)]
    PetTrustOnHatch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F60)]
    PetWalkAtHeelChanceDevoted: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F64)]
    PetWalkAtHeelChanceIndependent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F68)
    ]
    PetWalkAtHeelDistMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F6C)]
    PetWalkAtHeelDistMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F70)]
    PetWalkAtHeelLateralShift: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F74)]
    PlayerBirdDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F78)]
    PlayerDamageTransferScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F7C)]
    PlayerPredatorBoredomDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F80)
    ]
    PlayerPredatorHealthModifier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F84)
    ]
    PlayerPredatorRegainInterestTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1F88)
    ]
    PostRideMoveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F8C)]
    PredatorApproachTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F90)]
    PredatorBoredomDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F94)]
    PredatorChargeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F98)]
    PredatorChargeDistScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F9C)]
    PredatorEnergyRecoverRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FA0)]
    PredatorEnergyUseChasing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FA4)]
    PredatorFishPerceptionDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1FA8)
    ]
    PredatorHugeHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1FAC)]
    PredatorLargeHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1FB0)]
    PredatorMedHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1FB4)]
    PredatorNoticePauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FB8)]
    PredatorPerceptionDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FBC)]
    PredatorRegainInterestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC0)]
    PredatorRoarProbAfterHit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC4)]
    PredatorRoarProbAfterMiss: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC8)]
    PredatorRunAwayDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FCC)]
    PredatorRunAwayHealthPercent: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1FD0)
    ]
    PredatorRunMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FD4)]
    PredatorSmallHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1FD8)]
    PredatorSpeedMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FDC)]
    PredatorStealthDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FE0)]
    PredatorTrotMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FE4)]
    PredatorWalkMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FE8)]
    QueenHealthLevelMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FEC)]
    RagdollConeLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FF0)]
    RagdollDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FF4)]
    RagdollMotorFadeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FF8)]
    RagdollMotorFadeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FFC)]
    RagdollTau: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2000)]
    RagdollTwistLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2004)]
    RecoverHealthTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2008)]
    RemoteSpawnFadeInDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x200C)]
    RepelAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2010)]
    RepelRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2014)]
    ResourceSpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2018)]
    RideIdleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x201C)]
    RiderLeanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2020)]
    RideSpeedChangeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2024)]
    RideSpeedFast: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2028)]
    RideSpeedSlow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x202C)]
    RidingFirstPersonOffsetFwd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2030)]
    RidingFirstPersonOffsetUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2034)]
    RidingReplicationRangeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2038)
    ]
    RidingRollAdjustMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x203C)]
    RidingRollMaxAngleAt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2040)]
    RidingSteerWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2044)]
    RockTransformGlobalChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2048)]
    RoutineOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x204C)]
    RoutineSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2050)]
    SandWormChangeDirectionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2054)
    ]
    SandWormDespawnDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2058)]
    SandWormJumpHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x205C)]
    SandWormJumpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2060)]
    SandWormMaxHeightAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2064)]
    SandWormMaxJumps: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2068)]
    SandWormMaxSteer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x206C)]
    SandWormSpawnChanceInfested: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2070)
    ]
    SandWormSpawnChanceMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2074)]
    SandWormSpawnChanceMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2078)]
    SandWormSpawnTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x207C)]
    SandWormSteerAdjustTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2080)]
    SandWormSubmergeDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2084)]
    SandWormSubmergeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2088)]
    SandWormSurfaceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x208C)]
    SceneTerrainSpawnMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2090)
    ]
    ScuttlerHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2094)]
    ScuttlerIdleTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2098)]
    ScuttlerIdleTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x209C)]
    ScuttlerInitialNoAttackTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x20A0)
    ]
    ScuttlerMoveTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20A4)]
    ScuttlerMoveTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20A8)]
    ScuttlerSpitChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20AC)]
    ScuttlerSpitDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20B0)]
    ScuttlerZigZagStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20B4)]
    ScuttlerZigZagTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20B8)]
    ScuttlerZigZagTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20BC)]
    SearchItemDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C0)]
    SearchItemFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C4)]
    SearchItemGiveUpDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20C8)]
    SearchItemGiveUpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20CC)]
    SearchItemNotifyTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20D0)]
    SearchSpawnRandomItemProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x20D4)
    ]
    SharkAlignSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20D8)]
    SharkAlongPathSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20DC)]
    SharkAttackAccel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20E0)]
    SharkAttackSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20E4)]
    SharkGetToPathSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20E8)]
    SharkPatrolEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20EC)]
    SharkPatrolRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20F0)]
    SharkPatrolSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20F4)]
    SharkToPathYDamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20F8)]
    ShieldFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20FC)]
    SmallCreatureAvoidPlayerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2100)
    ]
    SmallCreatureFleePlayerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2104)
    ]
    SmallCreaturePerceptionDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2108)
    ]
    SoftenAvoidanceRadiusMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x210C)]
    SpawnCameraAngleCos: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2110)]
    SpawnDistanceModifierForUnderwater: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2114)
    ]
    SpawnDistAtMaxSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2118)]
    SpawnDistAtMinSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x211C)]
    SpawnMinDistPercentage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2120)]
    SpawnOnscreenDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2124)]
    SpawnsAvoidBaseMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2128)]
    SpookBossHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x212C)]
    SpookFiendColourInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2130)]
    SpookFiendFastSwimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2134)]
    SpookSquidHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2138)]
    SteeringUpdateRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x213C)]
    StickToGroundCastBegin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2140)]
    StickToGroundCastEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2144)]
    StickToGroundSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2148)]
    SwarmBrakingForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x214C)]
    SwarmMoveYFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2150)]
    TargetReachedDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2154)]
    TargetSearchTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2158)]
    TrailHalfLife: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x215C)]
    TurnInPlaceIdleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2160)]
    TurnInPlaceMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2164)]
    TurnInPlaceMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2168)]
    TurnInPlaceMaxSpeedIndoor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x216C)]
    TurnInPlaceMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2170)]
    TurnRadiusMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2174)]
    TurnSlowAreaCos: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2178)]
    VelocityAlignSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x217C)]
    VelocityAlignStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2180)]
    VelocityAlignYFactorMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2184)]
    VelocityAlignYFactorMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2188)]
    WaterDepthSizeScalingMaxDepth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x218C)
    ]
    WaterDepthSizeScalingMaxScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2190)
    ]
    WaterDepthSizeScalingMinDepth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2194)
    ]
    WaterDepthSizeScalingMinScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2198)
    ]
    WaterSpawnOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x219C)]
    WeaponRepelAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x21A0)]
    WeaponRepelRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x21A4)]
    TempermentDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x21A8)
    ]
    DietDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2308)
    ]
    WaterDietDescriptions: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2388)
    ]
    AggressiveSharks: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2408)]
    AllBaitIsBasic: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2409)]
    AllowSleeping: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x240A)]
    AllowSpawningOnscreen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x240B)]
    CanAlwaysLayEgg: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x240C)]
    CreatureInteractWithoutRaycasts: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x240D)
    ]
    CreatureRideDirectControl: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x240E)]
    DebugDrawTrails: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x240F)]
    DebugSearch: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2410)]
    DetailAnimPlayWhileWalking: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2411)]
    DrawRoutineFollowDebug: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2412)]
    DrawRoutineInfo: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2413)]
    EnableFlyingSnakeTails: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2414)]
    EnableMPCreatureRide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2415)]
    EnableNewStuff: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2416)]
    EnableTrailIk: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2417)]
    EnableVRCreatureRide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2418)]
    FiendOnscreenMarkers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2419)]
    FiendsCanAttack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x241A)]
    ForceShowDebugTrails: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x241B)]
    ForceStatic: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x241C)]
    InstantCreatureRide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x241D)]
    IsHurtingCreaturesACrime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x241E)]
    PetAnimTest: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x241F)]
    PetCanSummonOnFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2420)]
    PetForceSummonFromEgg: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2421)]
    PetsShowTraitClassesAsWords: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2422)]
    PiedPiper: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2423)]
    ProcessPendingSpawnRequests: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2424)]
    RidingPositionTest: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2425)]
    ScuttlersCanAttack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2426)]
    ShowScale: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2427)]
    StaticCreatureRide: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2428)]
    UncapSpawningforVideo: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2429)]
    UseCreatureAdoptOSD: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x242A)]
    UsePetTeleportEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x242B)]
    WaterDepthSizeScalingCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x242C)
    ]


@partial_struct
class cGcCameraGlobals(Structure):
    CameraCreatureCustomiseBack: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x0)
    ]
    CameraCreatureCustomiseDefault: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0xB0)
    ]
    CameraCreatureCustomiseFront: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x160)
    ]
    CameraCreatureCustomiseLeft: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x210)
    ]
    CameraCreatureCustomiseRight: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x2C0)
    ]
    CameraNPCShipInteraction: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x370)
    ]
    CameraNPCShopInteraction: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x420)
    ]
    FreighterCustomisationStandardCamera: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x4D0)
    ]
    FreighterCustomisationStandardCameraAlt: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0x580)
    ]
    FirstPersonCamOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x630)]
    BaseBuildingFreeCameraSettings: Annotated[
        cGcCameraFreeSettings, Field(cGcCameraFreeSettings, 0x6C0)
    ]
    ShipConstructionFreeCameraSettings: Annotated[
        cGcCameraFreeSettings, Field(cGcCameraFreeSettings, 0x700)
    ]
    BuildableShipMaxSizeCameraOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x740)
    ]
    BuildableShipMaxSizeForCamera: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x750)
    ]
    BuildableShipMinSizeForCamera: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x760)
    ]
    BuildingModeInitialOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x770)]
    FirstPersonInShipCamOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x780)]
    InteractionHailingFocusOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x790)
    ]
    InteractionOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x7A0)]
    InteractionOffsetCronus: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x7B0)]
    InteractionOffsetDefault: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x7C0)]
    InteractionOffsetExtraVR: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x7D0)]
    InteractionOffsetExtraVRSeated: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x7E0)
    ]
    InteractionOffsetGek: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x7F0)]
    InteractionOffsetRecruitment: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x800)
    ]
    InteractionOffsetSpiderman: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x810)]
    InteractionShipFocusOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x820)]
    MiniportalFlashColour: Annotated[basic.Colour, Field(basic.Colour, 0x830)]
    ModelViewOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x840)]
    OffsetCamOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x850)]
    OffsetCamRotation: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x860)]
    OffsetForFleetInteraction: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x870)]
    OffsetForFrigateInteraction: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x880)]
    PhotoModeShipOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x890)]
    PhotoModeVRFPOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x8A0)]
    ShopInteractionOffsetExtraVR: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x8B0)
    ]
    ShopInteractionOffsetExtraVRSeated: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x8C0)
    ]
    VehicleExitFlashColour: Annotated[basic.Colour, Field(basic.Colour, 0x8D0)]
    VRGravityChangeFlashColour: Annotated[basic.Colour, Field(basic.Colour, 0x8E0)]
    AlienShipFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x8F0)
    ]
    BikeFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x9F0)
    ]
    BuggyFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0xAF0)
    ]
    BuildingIndoorsCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0xBF0)
    ]
    BuildingOutdoorsCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0xCF0)
    ]
    BuildingUnderwaterCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0xDF0)
    ]
    CharacterAbandCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0xEF0)
    ]
    CharacterAbandCombatCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0xFF0)
    ]
    CharacterAirborneCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x10F0)
    ]
    CharacterAirborneCombatCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x11F0)
    ]
    CharacterCombatCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x12F0)
    ]
    CharacterCorvetteCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x13F0)
    ]
    CharacterFallingCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x14F0)
    ]
    CharacterFishingCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x15F0)
    ]
    CharacterGrabbedCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x16F0)
    ]
    CharacterIndoorCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x17F0)
    ]
    CharacterMeleeBoostCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x18F0)
    ]
    CharacterMiningCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x19F0)
    ]
    CharacterNexusCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x1AF0)
    ]
    CharacterRideCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x1BF0)
    ]
    CharacterRideCamHuge: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x1CF0)
    ]
    CharacterRideCamLarge: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x1DF0)
    ]
    CharacterRideCamMedium: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x1EF0)
    ]
    CharacterRocketBootsCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x1FF0)
    ]
    CharacterRocketBootsChargeCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x20F0)
    ]
    CharacterRunCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x21F0)
    ]
    CharacterSitCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x22F0)
    ]
    CharacterSpaceCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x23F0)
    ]
    CharacterSteepSlopeCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x24F0)
    ]
    CharacterSurfaceWaterCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x25F0)
    ]
    CharacterUnarmedCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x26F0)
    ]
    CharacterUndergroundCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x27F0)
    ]
    CharacterUnderwaterCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x28F0)
    ]
    CharacterUnderwaterCombatCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x29F0)
    ]
    CharacterUnderwaterJetpackAscentCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x2AF0)
    ]
    CharacterUnderwaterJetpackCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x2BF0)
    ]
    CorvetteFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x2CF0)
    ]
    DropshipFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x2DF0)
    ]
    HovercraftFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x2EF0)
    ]
    MechCombatCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x2FF0)
    ]
    MechFirstPersonCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x30F0)
    ]
    MechFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x31F0)
    ]
    MechJetpackCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x32F0)
    ]
    RobotShipFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x33F0)
    ]
    RoyalShipFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x34F0)
    ]
    SailShipFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x35F0)
    ]
    ScienceShipFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x36F0)
    ]
    ShuttleFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x37F0)
    ]
    SpaceshipFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x38F0)
    ]
    SubmarineFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x39F0)
    ]
    SubmarineFollowCamSurface: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x3AF0)
    ]
    TruckFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x3BF0)
    ]
    VehicleCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x3CF0)
    ]
    VehicleCamHmd: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x3DF0)
    ]
    WheeledBikeFollowCam: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x3EF0)
    ]
    AmbientCameraAnimations: Annotated[
        cGcCameraAnimationData, Field(cGcCameraAnimationData, 0x3FF0)
    ]
    AmbientDroneAnimations: Annotated[cTkModelResource, Field(cTkModelResource, 0x4010)]
    AerialViewDataTable: Annotated[
        basic.cTkDynamicArray[cGcCameraAerialViewDataTableEntry],
        Field(basic.cTkDynamicArray[cGcCameraAerialViewDataTableEntry], 0x4030),
    ]
    CameraAmbientAnimationsData: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x4040)
    ]
    Cameras: Annotated[
        basic.cTkDynamicArray[cGcCameraFollowSettings],
        Field(basic.cTkDynamicArray[cGcCameraFollowSettings], 0x4050),
    ]
    CameraShakeTable: Annotated[
        basic.cTkDynamicArray[cGcCameraShakeData],
        Field(basic.cTkDynamicArray[cGcCameraShakeData], 0x4060),
    ]
    SavedCameraFacing: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x4070),
    ]
    SavedCameraPositions: Annotated[
        basic.cTkDynamicArray[cTkBigPosData],
        Field(basic.cTkDynamicArray[cTkBigPosData], 0x4080),
    ]
    CorvetteWarpSettings: Annotated[
        cGcCameraWarpSettings, Field(cGcCameraWarpSettings, 0x4090)
    ]
    FreighterWarpSettings: Annotated[
        cGcCameraWarpSettings, Field(cGcCameraWarpSettings, 0x40E4)
    ]
    PirateFreighterWarpSettings: Annotated[
        cGcCameraWarpSettings, Field(cGcCameraWarpSettings, 0x4138)
    ]
    WarpSettings: Annotated[cGcCameraWarpSettings, Field(cGcCameraWarpSettings, 0x418C)]
    FocusBuildingModeDistanceControlSettings: Annotated[
        cGcCameraFocusBuildingControlSettings,
        Field(cGcCameraFocusBuildingControlSettings, 0x41E0),
    ]
    FocusBuildingModePitchControlSettings: Annotated[
        cGcCameraFocusBuildingControlSettings,
        Field(cGcCameraFocusBuildingControlSettings, 0x4200),
    ]
    FocusBuildingModePlanarControlSettings: Annotated[
        cGcCameraFocusBuildingControlSettings,
        Field(cGcCameraFocusBuildingControlSettings, 0x4220),
    ]
    FocusBuildingModeVerticalControlSettings: Annotated[
        cGcCameraFocusBuildingControlSettings,
        Field(cGcCameraFocusBuildingControlSettings, 0x4240),
    ]
    FocusBuildingModeYawControlSettings: Annotated[
        cGcCameraFocusBuildingControlSettings,
        Field(cGcCameraFocusBuildingControlSettings, 0x4260),
    ]
    ModelViewFocusOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x4280)]
    PitchForFrigateInteraction: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x4288)]
    RotationForFrigateInteraction: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x4290)
    ]
    AerialViewBackTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4298)]
    AerialViewBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x429C)]
    AerialViewDownDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42A0)]
    AerialViewPause: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42A4)]
    AerialViewStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42A8)]
    BinocularFlashStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42AC)]
    BinocularFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42B0)]
    BobAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42B4)]
    BobAmountAbandFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42B8)]
    BobFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42BC)]
    BobFactorAbandFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42C0)]
    BobFocus: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42C4)]
    BobFwdAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42C8)]
    BobRollAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42CC)]
    BobRollFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42D0)]
    BobRollOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42D4)]
    BuildingModeMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42D8)]
    CameraAmbientAutoSwitchMaxTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x42DC)
    ]
    CameraAmbientAutoSwitchMinTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x42E0)
    ]
    CamSeed1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42E4)]
    CamSeed2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42E8)]
    CamWander1Amplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42EC)]
    CamWander1Phase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42F0)]
    CamWander2Amplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42F4)]
    CamWander2Phase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42F8)]
    CharCamAutoDirStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x42FC)]
    CharCamDeflectSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4300)]
    CharCamFocusHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4304)]
    CharCamHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4308)]
    CharCamLookOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x430C)]
    CharCamLookOffsetFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4310)]
    CharCamMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4314)]
    CharCamMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4318)]
    CharCamMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x431C)]
    CharCamOffsetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4320)]
    CharCamRightStickX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4324)]
    CharCamRightStickY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4328)]
    CloseFactorSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x432C)]
    CreatureInteractionCamSpring: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4330)
    ]
    CreatureInteractionDistMulMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4334)
    ]
    CreatureInteractionDistMulMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4338)
    ]
    CreatureInteractionDownhillPitchTransfer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x433C)
    ]
    CreatureInteractionFoVMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4340)]
    CreatureInteractionFoVMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4344)]
    CreatureInteractionFoVSplitSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4348)
    ]
    CreatureInteractionHeadHeightSpring: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x434C)
    ]
    CreatureInteractionMaxDownhillPitchAroundPlayer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4350)
    ]
    CreatureInteractionMaxUphillPitchAroundPlayer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4354)
    ]
    CreatureInteractionMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4358)]
    CreatureInteractionPitchMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x435C)
    ]
    CreatureInteractionPitchMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4360)
    ]
    CreatureInteractionPitchSplit: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4364)
    ]
    CreatureInteractionPushCameraDownAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4368)
    ]
    CreatureInteractionPushCameraDownForCreatureBiggerThan: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x436C)
    ]
    CreatureInteractionUphillPitchTransfer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4370)
    ]
    CreatureInteractionYawMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4374)]
    CreatureInteractionYawMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4378)]
    CreatureSizeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x437C)]
    CreatureSizeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4380)]
    DebugAICamAt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4384)]
    DebugAICamUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4388)]
    DebugCameraFastFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x438C)]
    DebugCameraHeightForAccelerateBegin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4390)
    ]
    DebugCameraHeightForAccelerateEnd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4394)
    ]
    DebugCameraMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4398)]
    DebugCameraSlowFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x439C)]
    DebugCameraSpaceFastFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43A0)]
    DebugCameraSpeedAtPlanetThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x43A4)
    ]
    DebugMoveCamHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43A8)]
    DebugMoveCamSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43AC)]
    DebugPlanetJumpFarHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43B0)]
    DebugPlanetJumpNearHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43B4)]
    DebugSpaceStationTeleportOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x43B8)
    ]
    DistanceForFleetInteraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x43BC)
    ]
    DistanceForFrigateInteraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x43C0)
    ]
    DistanceForFrigatePurchaseInteraction: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x43C4)
    ]
    FirstPersonCamHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43C8)]
    FirstPersonFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43CC)]
    FirstPersonSlerpAway: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43D0)]
    FirstPersonSlerpTowards: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43D4)]
    FirstPersonZoom1FoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43D8)]
    FirstPersonZoom2FoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43DC)]
    FleetUIOrbitRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43E0)]
    FleetUIVerticalMotionAmplitude: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x43E4)
    ]
    FleetUIVerticalMotionDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x43E8)
    ]
    FlybyInVehicleDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43EC)]
    FlybyMinRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43F0)]
    FlybyMinRelativeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43F4)]
    FlybyRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43F8)]
    FlybyRelativeSpeedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x43FC)]
    FocusBuildingModeMaxFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4400)]
    FocusBuildingModeMinFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4404)]
    FocusBuildingModeStartDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4408)
    ]
    FoVAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x440C)]
    FoVSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4410)]
    FoVSpringSights: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4414)]
    FoVSpringSightsPassive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4418)]
    FrigateCaptainLateralShiftAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x441C)
    ]
    FrontendModelCameraSpringTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4420)
    ]
    HmdEyeExtraTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4424)]
    HmdEyeExtraTurnHeadAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4428)
    ]
    HmdEyeExtraTurnMinHeadAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x442C)
    ]
    HmdEyeLookAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4430)]
    IndoorCamShakeDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4434)]
    InteractionHeadHeightCronus: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4438)
    ]
    InteractionHeadHeightDefault: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x443C)
    ]
    InteractionHeadHeightGek: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4440)]
    InteractionHeadHeightSpiderman: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4444)
    ]
    InteractionHeadHeightVykeen: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4448)
    ]
    InteractionHeadPosHeightAdjust: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x444C)
    ]
    InteractionHeadPosHeightAdjustCronus: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4450)
    ]
    InteractionHeadPosHeightAdjustSpiderman: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4454)
    ]
    InteractionHeadPosHeightAdjustVykeen: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4458)
    ]
    InteractionModeBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x445C)]
    InteractionModeFocusCamBlend: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4460)
    ]
    InteractionModeFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4464)]
    InteractionPitchAdjustDeadZone: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4468)
    ]
    InteractionPitchAdjustStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x446C)
    ]
    InteractionPitchAdjustTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4470)]
    LocalMissionBoardLateralShiftAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4474)
    ]
    MaxCreatureRidingYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4478)]
    MaxFirstPersonCameraPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x447C)]
    MechCameraArmShootOffsetY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4480)]
    MechCameraCombatFakeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4484)]
    MechCameraExtraYPostLandingBlendTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4488)
    ]
    MechCameraNoExtraYTimeAfterLand: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x448C)
    ]
    MechCamSpringStrengthMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4490)]
    MechCamSpringStrengthMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4494)]
    MeleeBoostedFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4498)]
    MeleeFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x449C)]
    MinFirstPersonCameraPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44A0)]
    MinInteractFocusAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44A4)]
    MiniportalFlashStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44A8)]
    MiniportalFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44AC)]
    ModelViewDefaultPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44B0)]
    ModelViewDefaultYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44B4)]
    ModelViewDistSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44B8)]
    ModelViewFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44BC)]
    ModelViewInterpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44C0)]
    ModelViewMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44C4)]
    ModelViewMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44C8)]
    ModelViewMouseMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44CC)]
    ModelViewMouseRotateSnapStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x44D0)
    ]
    ModelViewMouseRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44D4)]
    ModelViewRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44D8)]
    MouseSensitivity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44DC)]
    NoControlCamShakeDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44E0)]
    NPCTradeLateralShiftAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44E4)]
    NPCTradeLateralShiftTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44E8)]
    ObjectFocusTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44EC)]
    OffsetCamFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44F0)]
    OffsetCombatCameraHorizontalAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x44F4)
    ]
    PainShakeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44F8)]
    PhotoModeCollisionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44FC)]
    PhotoModeFlashDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4500)]
    PhotoModeFlashIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4504)]
    PhotoModeMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4508)]
    PhotoModeMaxDistanceClampBuffer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x450C)
    ]
    PhotoModeMaxDistanceClampForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4510)
    ]
    PhotoModeMaxDistanceSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4514)]
    PhotoModeMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4518)]
    PhotoModeRollSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x451C)]
    PhotoModeTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4520)]
    PhotoModeVelocitySmoothTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4524)
    ]
    PilotDetailsLateralShiftAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4528)
    ]
    RecruitmentLateralShiftAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x452C)
    ]
    RevealedNPCHeadOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4530)]
    RunningFoVAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4534)]
    ScanCameraLookAtTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4538)]
    SClassLandingShakeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x453C)
    ]
    ScreenshotBackDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4540)]
    ScreenshotBendDownAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4544)]
    ScreenshotHorizonFaceFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4548)
    ]
    ScreenshotHorizonHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x454C)]
    ScreenshotInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4550)]
    ScreenshotOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4554)]
    ScreenshotRightDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4558)]
    ShipBuilderFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x455C)]
    ShipCamAimFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4560)]
    ShipCamFastSpringStrengthMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4564)
    ]
    ShipCamFastSpringStrengthMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4568)
    ]
    ShipCamLookInterp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x456C)]
    ShipCamMinReturnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4570)]
    ShipCamMotionInterp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4574)]
    ShipCamMotionMaxLagPitchAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4578)
    ]
    ShipCamMotionMaxLagTurnAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x457C)
    ]
    ShipCamMotionPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4580)]
    ShipCamMotionPitchMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4584)]
    ShipCamMotionTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4588)]
    ShipCamPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x458C)]
    ShipCamPitchMod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4590)]
    ShipCamReturnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4594)]
    ShipCamRollAmountMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4598)]
    ShipCamRollAmountMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x459C)]
    ShipCamRollSpeedScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45A0)]
    ShipCamSpringStrengthMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45A4)]
    ShipCamSpringStrengthMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45A8)]
    ShipCamTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45AC)]
    ShipFirstPersonBlendOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45B0)]
    ShipFirstPersonBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45B4)]
    ShipFoVBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45B8)]
    ShipFoVMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45BC)]
    ShipFoVMax3rdPerson: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45C0)]
    ShipFoVMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45C4)]
    ShipFoVMin2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45C8)]
    ShipFoVMin3rdPerson: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45CC)]
    ShipFoVMiniJump: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45D0)]
    ShipFoVSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45D4)]
    ShipMiniJumpFoVSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45D8)]
    ShipShakeDamper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45DC)]
    ShipThirdPersonBlendOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45E0)]
    ShipThirdPersonBlendOutOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x45E4)
    ]
    ShipThirdPersonBlendOutTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x45E8)
    ]
    ShipThirdPersonBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45EC)]
    ShipThirdPersonBlendWithOffsetTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x45F0)
    ]
    ShipThirdPersonEnterBlendOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x45F4)
    ]
    ShipThirdPersonEnterBlendTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x45F8)
    ]
    ShipWarpFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x45FC)]
    SpecialVehicleMouseRecentreTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4600)
    ]
    SpecialVehicleMouseRecentreWeaponTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4604)
    ]
    ThirdPersonAfterIntroCamBlendTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4608)
    ]
    ThirdPersonBlendInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x460C)]
    ThirdPersonBlendOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4610)]
    ThirdPersonCameraChangeBlendTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4614)
    ]
    ThirdPersonCameraChangeMinimumBlend: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4618)
    ]
    ThirdPersonCloseDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x461C)]
    ThirdPersonCloseDistanceX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4620)]
    ThirdPersonClosePitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4624)]
    ThirdPersonCollisionPushOffsetReducerStart: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4628)
    ]
    ThirdPersonCombatFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x462C)]
    ThirdPersonDownhillAdjustMaxAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4630)
    ]
    ThirdPersonDownhillAdjustMaxAnglePrime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4634)
    ]
    ThirdPersonDownhillAdjustMinAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4638)
    ]
    ThirdPersonDownhillAdjustMinAnglePrime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x463C)
    ]
    ThirdPersonDownhillAdjustSpringTimeMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4640)
    ]
    ThirdPersonDownhillAdjustSpringTimeMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4644)
    ]
    ThirdPersonFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4648)]
    ThirdPersonOffsetSpringTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x464C)
    ]
    ThirdPersonRotationBackAdjustAngleMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4650)
    ]
    ThirdPersonRotationBackAdjustAngleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4654)
    ]
    ThirdPersonSkipIntroCamBlendTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4658)
    ]
    ThirdPersonUphillAdjustCrossSlopeMaxAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x465C)
    ]
    ThirdPersonUphillAdjustCrossSlopeMinAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4660)
    ]
    ThirdPersonUphillAdjustMaxAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4664)
    ]
    ThirdPersonUphillAdjustMaxAnglePrime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4668)
    ]
    ThirdPersonUphillAdjustMinAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x466C)
    ]
    ThirdPersonUphillAdjustMinAnglePrime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4670)
    ]
    ThirdPersonUphillAdjustSpringTimeMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4674)
    ]
    ThirdPersonUphillAdjustSpringTimeMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4678)
    ]
    TogglePerspectiveBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x467C)]
    UnderwaterCameraExtraVertOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4680)
    ]
    VehicleExitFlashStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4684)]
    VehicleExitFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4688)]
    VehicleFirstPersonFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x468C)]
    VehicleFirstToThirdExitOffsetY: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4690)
    ]
    VehicleFirstToThirdExitOffsetZ: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4694)
    ]
    VehicleThirdPersonShootOffsetBlendOutTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4698)
    ]
    VehicleThirdPersonShootOffsetReturnTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x469C)
    ]
    VRGravityChangeMaxFlashTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x46A0)
    ]
    VRGravityChangeMinFlashTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x46A4)
    ]
    VRShakeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x46A8)]
    AerialViewCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x46AC)
    ]
    CreatureInteractionInterpolateDuringHold: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x46AD)
    ]
    DebugAICam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46AE)]
    DebugMoveCam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46AF)]
    FollowDrawCamProbes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46B0)]
    LockFollowSpring: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46B1)]
    MaxBob: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46B2)]
    OffsetCombatCameraHorizontal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46B3)]
    PauseThirdPersonCamInPause: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x46B4)]


@partial_struct
class cGcBuildableShipGlobals(Structure):
    DefaultCorvette: Annotated[cGcRewardSpecificShip, Field(cGcRewardSpecificShip, 0x0)]
    PartTagLocIDs: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x250)
    ]
    InitialLayouts: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x3D0),
    ]
    PartFXLimits: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3E0)]
    InteriorVisibilityDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x410)]
    ComplexityLimitWarning: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x420)]
    ComplexityLimitWarningNX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x424)]
    SpawnOnRemoteCorvetteRequiredPartsRenderingDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x428)
    ]


@partial_struct
class cGcBuildingGlobals(Structure):
    BuildingPartPreviewOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    MarkerLineColour: Annotated[basic.Colour, Field(basic.Colour, 0x10)]
    Icons: Annotated[cGcBuildMenuIconSet, Field(cGcBuildMenuIconSet, 0x20)]
    IconsTouch: Annotated[cGcBuildMenuIconSet, Field(cGcBuildMenuIconSet, 0x410)]
    ControlsIcons: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x800)]
    ScreenSpaceRotationGlow: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x950)
    ]
    ScreenSpaceRotationIcon: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x968)
    ]
    FreighterBaseSpawnOverride: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x980)
    ]
    ActiveLodDistances: Annotated[cTkLODDistances, Field(cTkLODDistances, 0x990)]
    InactiveLodDistances: Annotated[cTkLODDistances, Field(cTkLODDistances, 0x9E0)]
    TotalPlanetFrameTimeForComplexity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA30)
    ]
    TotalSpaceFrameTimeForComplexity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA40)
    ]
    BuildingPlacementScaleMinMax: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0xA50)
    ]
    AddToRadius_DoNotPlaceClose: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA58)]
    AmountToMoveMarkerRoundSphere: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA5C)
    ]
    BaseBuildingCamMode: Annotated[
        c_enum32[enums.cGcBaseBuildingCameraMode],
        Field(c_enum32[enums.cGcBaseBuildingCameraMode], 0xA60),
    ]
    BaseBuildingTerrainEditBaseYOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA64)
    ]
    BaseBuildingTerrainEditBoundsScalar: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA68)
    ]
    BaseBuildingTerrainEditTopYOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA6C)
    ]
    BaseBuildingWiringSnappingScaleFactorEasy: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA70)
    ]
    BaseBuildingWiringSnappingScaleFactorHard: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA74)
    ]
    BaseRadiusExtension: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA78)]
    BuildingApproachDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA7C)]
    BuildingLineAlphaEnd0: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA80)]
    BuildingLineAlphaEnd1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA84)]
    BuildingLineAlphaStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA88)]
    BuildingLineCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA8C)]
    BuildingLineMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA90)]
    BuildingLineOBBShrink: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA94)]
    BuildingLineProjectorLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA98)]
    BuildingLineProjectorWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA9C)]
    BuildingLineResetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAA0)]
    BuildingLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAA4)]
    BuildingNearArcDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAA8)]
    BuildingNearDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAAC)]
    BuildingPartPreviewPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAB0)]
    BuildingPartPreviewRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAB4)]
    BuildingPartPreviewRotateSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAB8)
    ]
    BuildingPlacementConeEndDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xABC)
    ]
    BuildingPlacementConeEndDistanceIndoors: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC0)
    ]
    BuildingPlacementConeEndRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC4)
    ]
    BuildingPlacementConeEndRadiusIndoors: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC8)
    ]
    BuildingPlacementConeStartRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACC)
    ]
    BuildingPlacementConeStartRadiusIndoors: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAD0)
    ]
    BuildingPlacementCursorOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAD4)
    ]
    BuildingPlacementDefaultMaxMinDistanceVR: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAD8)
    ]
    BuildingPlacementDefaultMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xADC)
    ]
    BuildingPlacementDefaultMinMinDistanceVR: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAE0)
    ]
    BuildingPlacementEffectCrossFadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAE4)
    ]
    BuildingPlacementEffectDissolveSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAE8)
    ]
    BuildingPlacementEffectFadeWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAEC)
    ]
    BuildingPlacementEffectHidePlaceholderDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAF0)
    ]
    BuildingPlacementEffectHidePlaceholderFadeTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAF4)
    ]
    BuildingPlacementEffectInterpRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAF8)
    ]
    BuildingPlacementEffectInterpRateSlow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAFC)
    ]
    BuildingPlacementEffectPostPreviewInterpTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB00)
    ]
    BuildingPlacementEffectPreviewInterpTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB04)
    ]
    BuildingPlacementEffectSpringFast: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB08)
    ]
    BuildingPlacementEffectSpringSlow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB0C)
    ]
    BuildingPlacementFocusModeAttachSnappingDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB10)
    ]
    BuildingPlacementFocusModeMaxDistanceScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB14)
    ]
    BuildingPlacementFocusModeMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB18)
    ]
    BuildingPlacementFocusModeSurfaceSnappingDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB1C)
    ]
    BuildingPlacementGhostHearScaleDistanceMod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB20)
    ]
    BuildingPlacementGhostHeartSizeScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB24)
    ]
    BuildingPlacementGhostHeartSizeScaleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB28)
    ]
    BuildingPlacementGhostHeartSizeSelected: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB2C)
    ]
    BuildingPlacementGhostHeartWiringSizeOtherSnapped: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB30)
    ]
    BuildingPlacementGhostHeartWiringSizeScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB34)
    ]
    BuildingPlacementGhostHeartWiringSizeScaleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB38)
    ]
    BuildingPlacementGhostReductionMaxSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB3C)
    ]
    BuildingPlacementMaxConnectionLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB40)
    ]
    BuildingPlacementMaxDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB44)
    ]
    BuildingPlacementMaxDistanceNoHit: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB48)
    ]
    BuildingPlacementMaxDistanceNoHitExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB4C)
    ]
    BuildingPlacementMaxDistanceScaleExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB50)
    ]
    BuildingPlacementMaxDistanceScaleExtraMaxSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB54)
    ]
    BuildingPlacementMaxDistanceScaleExtraMinSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB58)
    ]
    BuildingPlacementMaxShipBaseRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB5C)
    ]
    BuildingPlacementMinDistanceScaleIncrease: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB60)
    ]
    BuildingPlacementMinDistanceScaleIncreaseVR: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB64)
    ]
    BuildingPlacementMinDotProductRequiredToSnap: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB68)
    ]
    BuildingPlacementNumGhostsMinOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB6C)
    ]
    BuildingPlacementNumGhostsVolume: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB70)
    ]
    BuildingPlacementNumGhostsVRMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB74)
    ]
    BuildingPlacementNumGhostsVRMultiplierEyeTracking: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB78)
    ]
    BuildingPlacementOrbitModeMaxDistanceScaling: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB7C)
    ]
    BuildingPlacementTwistScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB80)]
    BuildingSelectionFocusModeCursorRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB84)
    ]
    BuildingVisitDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB88)]
    BuildingWaterMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8C)]
    BuildingYOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB90)]
    ChanceOfAddingShelter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB94)]
    CompassIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB98)]
    ComplexityDensitySigmaSquared: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB9C)
    ]
    ComplexityDensityTestRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA0)]
    DistanceForTooltip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA4)]
    DistanceForVisited: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA8)]
    DistanceTagXOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBAC)]
    DistanceTextXOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB0)]
    FadeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB4)]
    FadeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB8)]
    FlyingBuildingIconTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBBC)]
    HeightDiffLineAdjustFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC0)]
    HeightDiffLineAdjustMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC4)]
    HeightDiffLineAdjustMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC8)]
    HologramDistanceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBCC)]
    HologramDistanceMultiplierAlt: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBD0)
    ]
    HoverFadeAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD4)]
    HoverFadeAlphaHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD8)]
    HoverFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBDC)]
    HoverFadeTimeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE0)]
    HoverInactiveSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE4)]
    HoverInactiveSizeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE8)]
    HoverLockedActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBEC)]
    HoverLockedActiveTimeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF0)]
    HoverLockedIconScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF4)]
    HoverLockedIconScaleHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF8)]
    HoverLockedInitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBFC)]
    HoverLockedInitTimeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC00)]
    HoverMinToStayActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC04)]
    HoverMinToStayActiveTimeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC08)]
    HoverStayActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0C)]
    HoverStayActiveTimeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC10)]
    HoverTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC14)]
    HoverTimeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC18)]
    HoverVisibilityTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC1C)]
    HoverVisibilityTimeHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC20)]
    IconSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC24)]
    InactiveVisibleComplexityFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC28)
    ]
    InteractMarkerYOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC2C)]
    LargeIconArrowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC30)]
    LargeIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC34)]
    LineDistanceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC38)]
    LineMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC3C)]
    LineScaleFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC40)]
    MarkerLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC44)]
    MarkerTimeIncrease: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC48)]
    MarkerTransitionDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4C)]
    MaxDownloadedBaseTerrainEditsToApply: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xC50)
    ]
    MaxIconRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC54)]
    MaximumComplexityDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC58)]
    MaxLineLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC5C)]
    MaxLowHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC60)]
    MaxRadiusForPlanetBases: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC64)]
    MaxRadiusForSpaceBases: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC68)]
    MaxShipScanBuildings: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC6C)]
    MaxTimeBetweenEvents: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC70)]
    MinAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC74)]
    MinElevatedHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC78)]
    MinLineLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC7C)]
    MinLineLengthShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC80)]
    MinLoadingPercentageNodesBufferFree: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC84)
    ]
    MinPercentageNodesBufferFree: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC88)
    ]
    MinRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8C)]
    MinRadiusForBases: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC90)]
    MinRadiusFromFeaturedBases: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC94)]
    MinShipScanBuildings: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC98)]
    MinTimeBetweenBuildingEntryMessage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC9C)
    ]
    MinTimeBetweenBuildingEntryMessageBase: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCA0)
    ]
    NearLineScaleFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA4)]
    NearMaxLineLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA8)]
    NearMinAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCAC)]
    NearMinLineLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB0)]
    ObjectFadeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB4)]
    PercentagePhysicsComponentsForComplexity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCB8)
    ]
    PowerlineSnapDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCBC)]
    Radius_DoNotPlaceAnywhereNear: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCC0)
    ]
    RadiusMultiplier_DoNotPlace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC4)]
    RadiusMultiplier_DoNotPlaceAnywhereNear: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCC8)
    ]
    RadiusMultiplier_DoNotPlaceClose: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCCC)
    ]
    RadiusMultiplier_OnlyPlaceAround: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCD0)
    ]
    SectorMessageCenterDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD4)]
    SectorMessageMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD8)]
    SectorMessageReshowDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCDC)]
    ShowTimeNotDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE0)]
    SmallIconArrowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE4)]
    SmallIconSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE8)]
    SpaceMarkerMaxHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCEC)]
    SpaceMarkerMinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF0)]
    SpaceMarkerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF4)]
    SpaceMarkerOffsetPlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF8)]
    SpaceMarkerOffsetSamePlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCFC)]
    StartCrashSiteMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD00)]
    StartCrashSiteMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD04)]
    StartShelterMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD08)]
    StartShelterMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0C)]
    TestDistanceForSettlementBaseBufferAlignment: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD10)
    ]
    TextStringXOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD14)]
    TextTagLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD18)]
    TextTagWidthOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD1C)]
    TextTagXOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD20)]
    TextTagYOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD24)]
    UnknownBuildingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD28)]
    AllowBuildingUsingIntermediates: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xD2C)
    ]
    BaseBuildingTerrainEditBoundsOverride: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xD2D)
    ]
    BuildingPlacementEffectEnabled: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xD2E)
    ]
    BuildingPlacementGhostHeartSizeCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xD2F)
    ]
    DebugForceShowInactives: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xD30)]
    LineCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xD31)
    ]


@partial_struct
class cGcAudioGlobals(Structure):
    ByteBeatScaleDegreeProbability: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x0),
    ]
    NPCEngines: Annotated[cGcAudioNPCDoppler, Field(cGcAudioNPCDoppler, 0x10)]
    DroneDoppler: Annotated[
        cGcAudio3PointDopplerData, Field(cGcAudio3PointDopplerData, 0x64)
    ]
    ByteBeatSpeakerMaxAmplitude: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x70)]
    ByteBeatSpeakerMaxFrequency: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x78)]
    ByteBeatSpeakerMinFrequency: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x80)]
    CommsChatterFalloffFreighers: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x88)]
    CommsChatterFalloffShips: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x90)]
    ShorelineSenseRadius: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x98)]
    ShorelineSenseUJitter: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xA0)]
    ShorelineSenseVJitter: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xA8)]
    ArmFoleySpeedMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    ArmWhooshFoleyValueTrigger: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    AtlasStationActiveDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    AuxSendCaveRampDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    AuxSendOutdoorsRampDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    ByteBeatBeginAtTonicProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC4)
    ]
    ByteBeatChangeNoteProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC8)
    ]
    ByteBeatCrossfadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    ByteBeatDrumMixHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    ByteBeatDrumMixLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    ByteBeatMaxGeneratingAudio: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD8)]
    ByteBeatNonSilentAttempts: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xDC)]
    ByteBeatNonSilentAvgInterpSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE0)
    ]
    ByteBeatNonSilentSDCutoff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    ByteBeatNonSilentTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    ByteBeatPlayerFadeOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    ByteBeatPlayerNumLoops: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xF0)]
    ByteBeatSkipNoteProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    ByteBeatSpeakerVolumeInterSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF8)
    ]
    ByteBeatSynthMixHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    ByteBeatSynthMixLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]
    ByteBeatVisualisationMiniPixelStep: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x104)
    ]
    ByteBeatVisualisationMode: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x108)]
    ByteBeatVisualisationPixelStep: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x10C)
    ]
    ByteBeatVisualisationTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    DistanceReportMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    DistanceReportMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    DistanceSquishMaxTravel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C)]
    DistanceSquishScaleToListener: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x120)
    ]
    DroneDopplerExtentsFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124)]
    FishingMusicRampInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128)]
    FishingMusicRampOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C)]
    LadderStepDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130)]
    MiniStationActiveDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x134)]
    MinSecondsBetweenArmWhooshes: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x138)
    ]
    ObstructionAuxControlWhenHidden: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13C)
    ]
    ObstructionAuxControlWhenVisible: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x140)
    ]
    ObstructionSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144)]
    ObstructionValueMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    PlayerDepthUnderwaterMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    PlayerLowerOffsetEmitterMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150)]
    ShorelineObstructionMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154)]
    ShorelineObstructionSmoothRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x158)
    ]
    ShorelineSenseBaseU: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C)]
    ShorelineSenseBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160)]
    ShorelineSenseProbeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x164)]
    ShorelineSenseStartUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168)]
    ShorelineValidityRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16C)]
    ThirdPersonPushTowardsPlayer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x170)
    ]
    WaveintensityRTPCSmoothRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x174)]
    EnableVRSpecificAudio: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x178)]
    LockListenerMatrix: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x179)]
    ObstructionEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x17A)]
    PulseMusicEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x17B)]
    UseShorelineAudioInOpenWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x17C)]


@partial_struct
class cGcPlayerStatsGroup(Structure):
    GroupId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Stats: Annotated[
        basic.cTkDynamicArray[cGcPlayerStat],
        Field(basic.cTkDynamicArray[cGcPlayerStat], 0x10),
    ]
    Address: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x20)]


@partial_struct
class cGcInteractionBuffer(Structure):
    Interactions: Annotated[
        basic.cTkDynamicArray[cGcInteractionData],
        Field(basic.cTkDynamicArray[cGcInteractionData], 0x0),
    ]
    CurrentPos: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]


@partial_struct
class cGcSquadronPilotData(Structure):
    NPCResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]
    ShipResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x48)]
    TraitsSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x90)]
    PilotRank: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x98)]


@partial_struct
class cGcUniverseAddressData(Structure):
    GalacticAddress: Annotated[
        cGcGalacticAddressData, Field(cGcGalacticAddressData, 0x0)
    ]
    RealityIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]


@partial_struct
class cGcTeleportEndpoint(Structure):
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    UniverseAddress: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x20)
    ]

    class eTeleporterTypeEnum(IntEnum):
        Base = 0x0
        Spacestation = 0x1
        Atlas = 0x2
        PlanetAwayFromShip = 0x3
        ExternalBase = 0x4
        EmergencyGalaxyFix = 0x5
        OnNexus = 0x6
        SpacestationFixPosition = 0x7
        Settlement = 0x8
        Freighter = 0x9
        Frigate = 0xA

    TeleporterType: Annotated[
        c_enum32[eTeleporterTypeEnum], Field(c_enum32[eTeleporterTypeEnum], 0x38)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x3C)]
    CalcWarpOffset: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7C)]
    IsFavourite: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7D)]
    IsFeatured: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7E)]


@partial_struct
class cGcUAProtectedLocations(Structure):
    ProtectedLocations: Annotated[
        basic.cTkDynamicArray[cGcProtectedLocation],
        Field(basic.cTkDynamicArray[cGcProtectedLocation], 0x0),
    ]
    UA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)]


@partial_struct
class cGcSettlementLocalSaveData(Structure):
    BuildingSeeds: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x0)]
    ByteBeatJukebox: Annotated[
        cGcByteBeatJukeboxData, Field(cGcByteBeatJukeboxData, 0x180)
    ]
    TowerPowerTimeStamps: Annotated[
        cGcSettlementTowerPowerTimestamps,
        Field(cGcSettlementTowerPowerTimestamps, 0x288),
    ]
    Seed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x300)]
    Buildings: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x308)]
    HasScannedToReveal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C8)]
    RequiresStatConversion: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3C9)]


@partial_struct
class cGcSettlementState(Structure):
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    LastBuildingUpgradesTimestamps: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x10)
    ]
    ProductionState: Annotated[
        cGcSettlementProductionSlotData, Field(cGcSettlementProductionSlotData, 0x190)
    ]
    LastJudgementPerkID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x1F0)]
    LastWeaponRefreshTime: Annotated[
        basic.cTkDynamicArray[cGcSettlementWeaponRespawnData],
        Field(basic.cTkDynamicArray[cGcSettlementWeaponRespawnData], 0x200),
    ]
    PendingCustomJudgementID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x210)]
    Perks: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x220),
    ]
    DbTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x230)]
    LastAlertChangeTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x238)]
    LastBugAttackChangeTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x240)]
    LastDebtChangeTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x248)]
    LastJudgementTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x250)]
    LastPopulationChangeTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x258)]
    LastUpkeepDebtCheckTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x260)]
    MiniMissionSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x268)]
    MiniMissionStartTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x270)]
    NextBuildingUpgradeSeedValue: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x278)
    ]
    SeedValue: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x280)]
    UniverseAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x288)]
    Owner: Annotated[cGcDiscoveryOwner, Field(cGcDiscoveryOwner, 0x290)]
    BuildingStates: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x394)]
    Stats: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x454)]
    DbVersion: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x474)]
    NextBuildingUpgradeClass: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x478),
    ]
    NextBuildingUpgradeIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x47C)]
    PendingJudgementType: Annotated[
        c_enum32[enums.cGcSettlementJudgementType],
        Field(c_enum32[enums.cGcSettlementJudgementType], 0x480),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x484)
    ]
    Population: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x488)]
    DbResourceId: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x48A)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x4CA)]
    UniqueId: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x50A)
    ]
    IsReported: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x54A)]


@partial_struct
class cGcSeasonStateData(Structure):
    SeasonTransferInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x0)
    ]
    MilestoneValues: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x160),
    ]
    ProtectedEvents: Annotated[
        basic.cTkDynamicArray[cGcUAProtectedLocations],
        Field(basic.cTkDynamicArray[cGcUAProtectedLocations], 0x170),
    ]
    RendezvousParticipants: Annotated[
        basic.cTkDynamicArray[cGcPlayerMissionParticipant],
        Field(basic.cTkDynamicArray[cGcPlayerMissionParticipant], 0x180),
    ]
    RendezvousUAs: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint64],
        Field(basic.cTkDynamicArray[ctypes.c_uint64], 0x190),
    ]
    RewardCollected: Annotated[
        basic.cTkDynamicArray[ctypes.c_int16],
        Field(basic.cTkDynamicArray[ctypes.c_int16], 0x1A0),
    ]
    EndRewardsRedemptionState: Annotated[
        c_enum32[enums.cGcSeasonEndRewardsRedemptionState],
        Field(c_enum32[enums.cGcSeasonEndRewardsRedemptionState], 0x1B0),
    ]
    PinnedMilestone: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B4)]
    PinnedStage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B8)]
    StateOnDeath: Annotated[
        c_enum32[enums.cGcSeasonSaveStateOnDeath],
        Field(c_enum32[enums.cGcSeasonSaveStateOnDeath], 0x1BC),
    ]
    HasCollectedFinalReward: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C0)]


@partial_struct
class cGcSeasonTransferInventoryConfig(Structure):
    Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x0)]
    SlotItemFilterIDs: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x18),
    ]
    Width: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x28)]


@partial_struct
class cGcSeasonTransferInventoryData(Structure):
    Inventory: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x0)]
    Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x160)]
    SeasonId: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x178)]


@partial_struct
class cGcSeasonalStage(Structure):
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    Milestones: Annotated[
        basic.cTkDynamicArray[cGcSeasonalMilestone],
        Field(basic.cTkDynamicArray[cGcSeasonalMilestone], 0x40),
    ]


@partial_struct
class cGcPlayerOwnershipData(Structure):
    Direction: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x0)]
    Position: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x10)]
    Inventory: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x20)]
    Inventory_Cargo: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x180)
    ]
    Inventory_TechOnly: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x2E0)
    ]
    Resource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x440)]
    InventoryLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x488)]
    Location: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x4A0)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x4A8)]


@partial_struct
class cGcMaintenanceContainer(Structure):
    InventoryContainer: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x0)
    ]
    AmountAccumulators: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x160),
    ]
    DamageTimers: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0x170),
    ]
    LastBrokenTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x180)]
    LastCompletedTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x188)]
    LastUpdateTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x190)]
    Flags: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x198)]


@partial_struct
class cGcMultitoolData(Structure):
    ScreenData: Annotated[cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x0)]
    Store: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x30)]
    CustomisationData: Annotated[
        cGcCharacterCustomisationData, Field(cGcCharacterCustomisationData, 0x190)
    ]
    Resource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x1E8)]
    Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x230)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x248)]
    PrimaryMode: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x258)]
    SecondaryMode: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x25C)]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x260)]
    IsLarge: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x280)]
    UseLegacyColours: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x281)]


@partial_struct
class cGcPetCustomisationData(Structure):
    Data: Annotated[
        cGcCharacterCustomisationSaveData, Field(cGcCharacterCustomisationSaveData, 0x0)
    ]


@partial_struct
class cGcArchivedMultitoolData(Structure):
    MultitoolData: Annotated[cGcMultitoolData, Field(cGcMultitoolData, 0x0)]
    ArchivedInventoryClass: Annotated[
        c_enum32[enums.cGcInventoryClass],
        Field(c_enum32[enums.cGcInventoryClass], 0x290),
    ]
    WeaponClass: Annotated[
        c_enum32[enums.cGcWeaponClasses], Field(c_enum32[enums.cGcWeaponClasses], 0x294)
    ]
    ArchivedName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x298)
    ]


@partial_struct
class cGcCustomisationPreset(Structure):
    Data: Annotated[
        cGcCharacterCustomisationData, Field(cGcCharacterCustomisationData, 0x0)
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]


@partial_struct
class cGcArchivedShipData(Structure):
    Ownership: Annotated[cGcPlayerOwnershipData, Field(cGcPlayerOwnershipData, 0x0)]
    Customisation: Annotated[
        cGcCharacterCustomisationSaveData,
        Field(cGcCharacterCustomisationSaveData, 0x4D0),
    ]
    ArchivedClass: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0x538),
    ]
    ArchivedInventoryClass: Annotated[
        c_enum32[enums.cGcInventoryClass],
        Field(c_enum32[enums.cGcInventoryClass], 0x53C),
    ]
    ArchivedName: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x540)
    ]
    UsesLegacyColours: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5C0)]


@partial_struct
class cGcFreighterSaveData(Structure):
    MatrixAt: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    MatrixPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    MatrixUp: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Inventory: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x30)]
    Inventory_Cargo: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x190)
    ]
    Inventory_TechOnly: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x2F0)
    ]
    Resource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x450)]
    CargoLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x498)]
    Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x4B0)]
    HomeSystemSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x4C8)]
    LastSpawnTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x4D8)]
    UniverseAddress: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x4E0)
    ]
    Dismissed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4F8)]


@partial_struct
class cGcCustomisationDescriptorGroupSet(Structure):
    DescriptorGroups: Annotated[
        basic.cTkDynamicArray[cGcCustomisationDescriptorGroup],
        Field(basic.cTkDynamicArray[cGcCustomisationDescriptorGroup], 0x0),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    RequiresGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x20)]
    GroupsAreMutuallyExclusive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x30)]


@partial_struct
class cGcCustomisationDescriptorVisualEffects(Structure):
    DescriptorId: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Effects: Annotated[
        basic.cTkDynamicArray[cGcCustomisationDescriptorVisualEffect],
        Field(basic.cTkDynamicArray[cGcCustomisationDescriptorVisualEffect], 0x20),
    ]


@partial_struct
class cGcSnapPointCondition(Structure):
    ObjectId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    SnapPointIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    SnapState: Annotated[
        c_enum32[enums.cGcBaseSnapState], Field(c_enum32[enums.cGcBaseSnapState], 0x14)
    ]
    SnapPoint: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x18)
    ]


@partial_struct
class cGcNPCWorkerData(Structure):
    BaseOffset: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x0)]
    ResourceElement: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x10)]
    InteractionSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x58)]
    BaseUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x68)]
    FreighterBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]
    HiredWorker: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x71)]


@partial_struct
class cGcOutSnapSocketCondition(Structure):
    ObjectId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    OutSocketIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    SnapPointIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    SnapState: Annotated[
        c_enum32[enums.cGcBaseSnapState], Field(c_enum32[enums.cGcBaseSnapState], 0x18)
    ]
    OutSocket: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1C)
    ]
    SnapPoint: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x9C)
    ]


@partial_struct
class cGcBaseBuildingPartStyleModel(Structure):
    Inactive: Annotated[cTkModelResource, Field(cTkModelResource, 0x0)]
    Model: Annotated[cTkModelResource, Field(cTkModelResource, 0x20)]
    Style: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0x40),
    ]


@partial_struct
class cGcBaseBuildingPartAudioLocationEntry(Structure):
    PartId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    AudioLocation: Annotated[
        c_enum32[enums.cGcBasePartAudioLocation],
        Field(c_enum32[enums.cGcBasePartAudioLocation], 0x10),
    ]


@partial_struct
class cGcUniqueNPCSpawnData(Structure):
    ResourceElement: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    PresetId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x58)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x68)
    ]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]


@partial_struct
class cGcSentinelSpawnWave(Structure):
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    Spawns: Annotated[
        basic.cTkDynamicArray[cGcSentinelSpawnData],
        Field(basic.cTkDynamicArray[cGcSentinelSpawnData], 0x10),
    ]
    ReinforceAt: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x20)]


@partial_struct
class cGcFiendCrimeSpawnTable(Structure):
    Spawns: Annotated[
        basic.cTkDynamicArray[cGcFiendCrimeSpawnData],
        Field(basic.cTkDynamicArray[cGcFiendCrimeSpawnData], 0x0),
    ]
    Crime: Annotated[
        c_enum32[enums.cGcFiendCrime], Field(c_enum32[enums.cGcFiendCrime], 0x10)
    ]
    ResponseRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]


@partial_struct
class cGcNPCPlacementInfo(Structure):
    ScanToRevealData: Annotated[
        cGcScanToRevealComponentData, Field(cGcScanToRevealComponentData, 0x0)
    ]
    ForceInteraction: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x50)]
    HideDuringMissions: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x70),
    ]
    MoodMissionOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcAlienMoodMissionOverride],
        Field(basic.cTkDynamicArray[cGcAlienMoodMissionOverride], 0x80),
    ]
    PlacementRuleId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    PuzzleMissionOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcAlienPuzzleMissionOverride],
        Field(basic.cTkDynamicArray[cGcAlienPuzzleMissionOverride], 0xA0),
    ]
    SpawnSpecific: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    DefaultProp: Annotated[
        c_enum32[enums.cGcNPCPropType], Field(c_enum32[enums.cGcNPCPropType], 0xC0)
    ]
    FractionOfNodesActive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    InteractionOverride: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0xC8),
    ]
    MaxNodesActivated: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xCC)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0xD0)
    ]
    SpawnChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    TechShopCategory: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0xD8),
    ]
    PlacmentNodeName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xDC)
    ]
    SpawnUnderNodeName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xFC)
    ]
    CanTurn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11C)]
    DisableInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11D)]
    IsMannequin: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11E)]
    MustPlace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x11F)]
    OnlyUsePuzzleOverridesIfPlayerOwned: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x120)
    ]
    PlaceAtLeastOne: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x121)]
    SpawnAnyMajorRace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x122)]
    SpawnInAbandoned: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x123)]
    SpawnMoving: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x124)]
    UseFreighterNPC: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x125)]
    UseScanToRevealData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x126)]


@partial_struct
class cGcImpactCombatEffectData(Structure):
    CombatEffectType: Annotated[
        c_enum32[enums.cGcCombatEffectType],
        Field(c_enum32[enums.cGcCombatEffectType], 0x0),
    ]
    CurrentDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4)]
    DamagePerSeccond: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8)]
    TotalDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC)]


@partial_struct
class cGcCombatEffectData(Structure):
    DamageId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    ParticlesId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    DamageMergeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    DamageMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    DamageTimeBetweenNumbers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    EndAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x2C),
    ]
    StartAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x30),
    ]
    Stat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x34)
    ]
    OverrideDamageNumberData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38)]


@partial_struct
class cGcCutSceneSpawnData(Structure):
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Local: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Offset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    ResourceElement: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x40)]
    Group: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x88)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x98)]
    Modules: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0xA8),
    ]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0xB8)]
    TrimmedPath: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xC8)
    ]
    Guid: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD8)]
    DebugDraw: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDC)]
    EnableAI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xDD)]


@partial_struct
class cGcCollisionCapsule(Structure):
    CapsuleAxis: Annotated[cAxisSpecification, Field(cAxisSpecification, 0x0)]
    CapsuleCentre: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    CapsuleLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    CapsuleRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x38)]
    NodeName: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x78)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB8)]
    ImproveCollisionForNarrowCapsule: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xB9)
    ]


@partial_struct
class cTkAnimationComponentData(Structure):
    Idle: Annotated[cTkAnimationData, Field(cTkAnimationData, 0x0)]
    AnimGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x118)]
    AnimLibraries: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x128),
    ]
    Anims: Annotated[
        basic.cTkDynamicArray[cTkAnimationData],
        Field(basic.cTkDynamicArray[cTkAnimationData], 0x138),
    ]
    JointLODOverrides: Annotated[
        basic.cTkDynamicArray[cTkAnimJointLODData],
        Field(basic.cTkDynamicArray[cTkAnimJointLODData], 0x148),
    ]
    RandomOneShots: Annotated[
        basic.cTkDynamicArray[cTkAnimRandomOneShots],
        Field(basic.cTkDynamicArray[cTkAnimRandomOneShots], 0x158),
    ]
    Trees: Annotated[
        basic.cTkDynamicArray[cTkAnimBlendTree],
        Field(basic.cTkDynamicArray[cTkAnimBlendTree], 0x168),
    ]
    NetSyncAnimations: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x178)]


@partial_struct
class cGcCreatureFullBodyIKComponentData(Structure):
    JointData: Annotated[
        basic.cTkDynamicArray[cGcCreatureIkData],
        Field(basic.cTkDynamicArray[cGcCreatureIkData], 0x0),
    ]
    PistonData: Annotated[
        basic.cTkDynamicArray[cGcIkPistonData],
        Field(basic.cTkDynamicArray[cGcIkPistonData], 0x10),
    ]
    BodyMassWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x20)]
    FootAngleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x24)]
    FootPlantSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28)]
    MaxFootAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2C)]
    MaxHeadPitch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    MaxHeadRoll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34)]
    MaxHeadYaw: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    MovementDamp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    Omega: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    OmegaDropOff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44)]
    Mech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x48)]
    UseFootAngle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x49)]
    UseFootGlue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A)]
    UseFootRaycasts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B)]
    UsePistons: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]


@partial_struct
class cGcNGuiLayerData(Structure):
    ElementData: Annotated[cGcNGuiElementData, Field(cGcNGuiElementData, 0x0)]
    Children: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x68),
    ]
    DataFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x78)
    ]
    Image: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x88)]
    Style: Annotated[cTkNGuiGraphicStyle, Field(cTkNGuiGraphicStyle, 0x98)]

    class eAltModeEnum(IntEnum):
        None_ = 0x0
        Normal = 0x1
        Alt = 0x2
        NeverOnTouch = 0x3
        OnlyOnTouch = 0x4

    AltMode: Annotated[c_enum32[eAltModeEnum], Field(c_enum32[eAltModeEnum], 0x1B8)]


@partial_struct
class cGcNGuiPreset(Structure):
    Text: Annotated[cGcNGuiPresetText, Field(cGcNGuiPresetText, 0x0)]
    Graphic: Annotated[cGcNGuiPresetGraphic, Field(cGcNGuiPresetGraphic, 0x1590)]
    Layer: Annotated[cGcNGuiPresetGraphic, Field(cGcNGuiPresetGraphic, 0x24E0)]
    SpacingLayout: Annotated[cGcNGuiLayoutData, Field(cGcNGuiLayoutData, 0x3430)]
    Font: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x3478)]


@partial_struct
class cTkHeavyAirData(Structure):
    AmplitudeMax: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    AmplitudeMin: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Colour1: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    Colour2: Annotated[basic.Colour, Field(basic.Colour, 0x30)]
    MajorDirection: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x40)]
    RotationSpeedRange: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x50)]
    ScaleRange: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x60)]
    TwinkleRange: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70)]
    Material: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)]
    WindDrift: Annotated[cTkEmitterWindDrift, Field(cTkEmitterWindDrift, 0x90)]

    class eEmitterShapeEnum(IntEnum):
        Sphere = 0x0
        UpperHalfSphere = 0x1
        BottomHalfSphere = 0x2

    EmitterShape: Annotated[
        c_enum32[eEmitterShapeEnum], Field(c_enum32[eEmitterShapeEnum], 0xAC)
    ]
    FadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    MaxParticleLifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    MaxVisibleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    MinParticleLifetime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    MinVisibleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    NumberOfParticles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC4)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    RadiusY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    SoftFadeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    SpawnRotationRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    SpeedFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    SpeedFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    VelocityAlignment: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE0)]


@partial_struct
class cTkProceduralTextureList(Structure):
    Layers: Annotated[cTkProceduralTextureLayer, Field(cTkProceduralTextureLayer, 0x0)]
    AlwaysEnableUnnamedTextureLayers: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x240)
    ]


@partial_struct
class cGcRagdollComponentData(Structure):
    EasySetUpData: Annotated[
        cGcEasyRagdollSetUpData, Field(cGcEasyRagdollSetUpData, 0x0)
    ]
    OtherKnownAnimations: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x40],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x40], 0x30),
    ]
    RagdollBones: Annotated[
        basic.cTkDynamicArray[cGcRagdollBone],
        Field(basic.cTkDynamicArray[cGcRagdollBone], 0x40),
    ]
    AnimationSpeedOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50)]
    BlendIntoStartPoseDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54)]
    InertiaScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x58)]
    JointFriction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C)]
    KineticEnergyForRest: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x60)]
    MaxDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x64)]
    MaxWaitForRest: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x68)]
    MinWaitForRest: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C)]
    ModelScaleAtCreation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x70)]
    OverallDurationScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]
    PhasingOutRagdollDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    PlayAnimationDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C)]
    WholeBodyMass: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x80)]
    FallAnimation_Back: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x84)
    ]
    FallAnimation_Front: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0xC4)
    ]
    FallAnimation_Left: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x104)
    ]
    FallAnimation_Right: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x144)
    ]
    GetUpAnimation_Back: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x184)
    ]
    GetUpAnimation_Front: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1C4)
    ]
    GetUpAnimation_Left: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x204)
    ]
    GetUpAnimation_Right: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x244)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x284)]
    EasySetUp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C4)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2C5)]


@partial_struct
class cGcSpringComponentData(Structure):
    CollisionCapsules: Annotated[
        basic.cTkDynamicArray[cGcCollisionCapsule],
        Field(basic.cTkDynamicArray[cGcCollisionCapsule], 0x0),
    ]
    SpringLinks: Annotated[
        basic.cTkDynamicArray[cGcSpringLink],
        Field(basic.cTkDynamicArray[cGcSpringLink], 0x10),
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x20)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]


@partial_struct
class cTkWaterData(Structure):
    WaterConditions: Annotated[cTkWaterConditionData, Field(cTkWaterConditionData, 0x0)]
    BiomeSpecificUsage: Annotated[
        cTkBiomeSpecificWaterConditions, Field(cTkBiomeSpecificWaterConditions, 0x348)
    ]
    WaterConditionUsage: Annotated[
        cTkAllowedWaterConditions, Field(cTkAllowedWaterConditions, 0xB40)
    ]
    MinimumWavelength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB8)]


@partial_struct
class cGcPersistentBase(Structure):
    Forward: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    ScreenshotAt: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    ScreenshotPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    Objects: Annotated[
        basic.cTkDynamicArray[cGcPersistentBaseEntry],
        Field(basic.cTkDynamicArray[cGcPersistentBaseEntry], 0x40),
    ]
    GalacticAddress: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x50)]
    LastUpdateTimestamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x58)]
    UserData: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x60)]
    Owner: Annotated[cGcDiscoveryOwner, Field(cGcDiscoveryOwner, 0x68)]
    Difficulty: Annotated[
        cGcPersistentBaseDifficultyData, Field(cGcPersistentBaseDifficultyData, 0x16C)
    ]
    AutoPowerSetting: Annotated[
        c_enum32[enums.cGcBaseAutoPowerSetting],
        Field(c_enum32[enums.cGcBaseAutoPowerSetting], 0x174),
    ]
    BaseType: Annotated[
        c_enum32[enums.cGcPersistentBaseTypes],
        Field(c_enum32[enums.cGcPersistentBaseTypes], 0x178),
    ]
    BaseVersion: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x17C)]
    GameMode: Annotated[
        c_enum32[enums.cGcGameMode], Field(c_enum32[enums.cGcGameMode], 0x180)
    ]
    OriginalBaseVersion: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x184)]
    LastEditedById: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x188)
    ]
    LastEditedByUsername: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1C8)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x208)]
    RID: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x248)]
    PlatformToken: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x288)
    ]
    IsFeatured: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A8)]
    IsReported: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2A9)]


@partial_struct
class cGcBaseBuildingTable(Structure):
    RelativesTabSetupData: Annotated[
        cGcBaseBuildingGroup, Field(cGcBaseBuildingGroup, 0x0)
    ]
    Properties: Annotated[
        cGcBaseBuildingProperties, Field(cGcBaseBuildingProperties, 0x60)
    ]
    GhostHeart: Annotated[cTkModelResource, Field(cTkModelResource, 0x90)]
    GhostHeartSelected: Annotated[cTkModelResource, Field(cTkModelResource, 0xB0)]
    LegModel: Annotated[cTkModelResource, Field(cTkModelResource, 0xD0)]
    RotateScaleGizmo: Annotated[cTkModelResource, Field(cTkModelResource, 0xF0)]
    WiringFirefly: Annotated[cTkModelResource, Field(cTkModelResource, 0x110)]
    WiringSnapPoint: Annotated[cTkModelResource, Field(cTkModelResource, 0x130)]
    WiringSnapSelected: Annotated[cTkModelResource, Field(cTkModelResource, 0x150)]
    BuildEffectMaterial: Annotated[
        cTkMaterialResource, Field(cTkMaterialResource, 0x170)
    ]
    Families: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingFamily],
        Field(basic.cTkDynamicArray[cGcBaseBuildingFamily], 0x188),
    ]
    Groups: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingGroup],
        Field(basic.cTkDynamicArray[cGcBaseBuildingGroup], 0x198),
    ]
    MaterialGroups: Annotated[
        basic.cTkDynamicArray[cGcId256List],
        Field(basic.cTkDynamicArray[cGcId256List], 0x1A8),
    ]
    Materials: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingMaterial],
        Field(basic.cTkDynamicArray[cGcBaseBuildingMaterial], 0x1B8),
    ]
    Objects: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingEntry],
        Field(basic.cTkDynamicArray[cGcBaseBuildingEntry], 0x1C8),
    ]
    PaletteGroups: Annotated[
        basic.cTkDynamicArray[cGcId256List],
        Field(basic.cTkDynamicArray[cGcId256List], 0x1D8),
    ]
    Palettes: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPalette],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPalette], 0x1E8),
    ]


@partial_struct
class cGcBaseBuildingPartAudioLocationTable(Structure):
    AudioLocations: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPartAudioLocationEntry],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPartAudioLocationEntry], 0x0),
    ]


@partial_struct
class cGcDifficultyConfig(Structure):
    CommonSettingsData: Annotated[
        cGcDifficultySettingCommonData, Field(cGcDifficultySettingCommonData, 0x0)
    ]
    StartWithAllItemsKnownDisabledData: Annotated[
        cGcDifficultyStartWithAllItemsKnownOptionData,
        Field(cGcDifficultyStartWithAllItemsKnownOptionData, 0x10E0),
    ]
    StartWithAllItemsKnownEnabledData: Annotated[
        cGcDifficultyStartWithAllItemsKnownOptionData,
        Field(cGcDifficultyStartWithAllItemsKnownOptionData, 0x1400),
    ]
    PresetOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1720)
    ]
    UILayout: Annotated[
        cGcDifficultyOptionUIGroup, Field(cGcDifficultyOptionUIGroup, 0x1800)
    ]
    ActiveSurvivalBarsOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x18C0)
    ]
    ChargingRequirementsOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1940)
    ]
    CurrencyCostOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x19C0)
    ]
    DamageReceivedOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1A40)
    ]
    DeathConsequencesOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1AC0)
    ]
    FishingOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1B40)
    ]
    FuelUseOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1BC0)
    ]
    GroundCombatOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1C40)
    ]
    LaunchFuelCostOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1CC0)
    ]
    ReputationGainOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1D40)
    ]
    ScannerRechargeOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1DC0)
    ]
    SpaceCombatOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1E40)
    ]
    BreakTechOnDamageOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1EC0)
    ]
    CreatureHostilityOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1F20)
    ]
    DamageGivenOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1F80)
    ]
    EnergyDrainOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1FE0)
    ]
    FuelUseOptionData: Annotated[
        cGcDifficultyFuelUseOptionData, Field(cGcDifficultyFuelUseOptionData, 0x2040)
    ]
    HazardDrainOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20A0)
    ]
    InventoryStackLimitsOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2100)
    ]
    ItemShopAvailabilityOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2160)
    ]
    SprintingOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x21C0)
    ]
    SubstanceCollectionOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2220)
    ]
    NPCPopulationOptionLocIds: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2280)
    ]
    ItemShopAvailabilityOptionData: Annotated[
        cGcItemShopAvailabilityDifficultyOptionData,
        Field(cGcItemShopAvailabilityDifficultyOptionData, 0x22C0),
    ]
    PresetLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x22F0)
    ]
    Presets: Annotated[
        cGcDifficultySettingsData, Field(cGcDifficultySettingsData, 0x2310)
    ]
    InventoryStackLimitsOptionData: Annotated[
        cGcDifficultyInventoryStackSizeOptionData,
        Field(cGcDifficultyInventoryStackSizeOptionData, 0x25B0),
    ]
    CurrencyCostOptionData: Annotated[
        cGcDifficultyCurrencyCostOptionData,
        Field(cGcDifficultyCurrencyCostOptionData, 0x2700),
    ]
    PermadeathMinSettings: Annotated[
        cGcDifficultySettingsData, Field(cGcDifficultySettingsData, 0x2760)
    ]
    ChargingRequirementsMultipliers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x27C0)
    ]
    DamageReceivedAIMechTechDamageHits: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x27D0)
    ]
    DamageReceivedMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x27E0)]
    FishingCatchWindowMultipliers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x27F0)
    ]
    GroundCombatMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2800)]
    LaunchFuelCostMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2810)]
    ReputationGainMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2820)]
    ScannerRechargeMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2830)]
    SentinelTimeOutMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2840)]
    ShipSummoningFuelCostMultipliers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2850)
    ]
    SpaceCombatDifficultyMultipliers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2860)
    ]
    SpaceCombatMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2870)]
    BreakTechOnDamageMultipliers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x2880)
    ]
    DamageGivenMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x288C)]
    EnergyDrainMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2898)]
    HazardDrainMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28A4)]
    SprintingCostMultipliers: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x28B0)]
    SubstanceCollectionLaserAmount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x28BC)
    ]
    SubstanceCollectionMultipliers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x28C8)
    ]
    AllSlotsUnlockedStartingShipSlots: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x28D4)
    ]
    AllSlotsUnlockedStartingShipTechSlots: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x28D8)
    ]
    AllSlotsUnlockedStartingSuitSlots: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x28DC)
    ]
    AllSlotsUnlockedStartingSuitTechSlots: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x28E0)
    ]
    AllSlotsUnlockedStartingWeaponSlots: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x28E4)
    ]


@partial_struct
class cGcNPCSpawnTable(Structure):
    NPCModelNames: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x0)
    ]
    NPCMannequinModelName: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x90)
    ]
    PlacementInfos: Annotated[
        basic.cTkDynamicArray[cGcNPCPlacementInfo],
        Field(basic.cTkDynamicArray[cGcNPCPlacementInfo], 0xA0),
    ]
    UniqueNPCs: Annotated[
        basic.cTkDynamicArray[cGcUniqueNPCSpawnData],
        Field(basic.cTkDynamicArray[cGcUniqueNPCSpawnData], 0xB0),
    ]
    NPCRaceScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]


@partial_struct
class cGcPetBehaviourTable(Structure):
    Behaviours: Annotated[cGcPetBehaviourData, Field(cGcPetBehaviourData, 0x0)]
    MoodStaminaModifiers: Annotated[
        basic.cTkDynamicArray[cGcPetMoodStaminaModifier],
        Field(basic.cTkDynamicArray[cGcPetMoodStaminaModifier], 0xE00),
    ]
    TraitStaminaModifiers: Annotated[
        basic.cTkDynamicArray[cGcPetTraitStaminaModifier],
        Field(basic.cTkDynamicArray[cGcPetTraitStaminaModifier], 0xE10),
    ]
    TraitRanges: Annotated[
        cGcCreaturePetTraitRanges, Field(cGcCreaturePetTraitRanges, 0xE20)
    ]
    TraitMoodModifiers: Annotated[
        cGcPetTraitMoodModifierList, Field(cGcPetTraitMoodModifierList, 0xF28)
    ]
    RewardMoodModifier: Annotated[
        cGcPetActionMoodModifier, Field(cGcPetActionMoodModifier, 0xF88)
    ]
    MoodIncreaseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFD0)]
    MoodValuesOnAdopt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFD8)]
    MoodValuesOnHatch: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFE0)]
    AccessoryGyroDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFE8)]
    AccessoryGyroFollowMotionStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFEC)
    ]
    AccessoryGyroStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFF0)]
    AccessoryGyroToNeutralStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFF4)
    ]
    GlobalCooldownModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFF8)]
    PlayerActivityDecreaseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFFC)]
    PlayerActivityIncreaseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1000)]
    UsefulBehaviourLinkedCooldownAmount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1004)
    ]
    AccessoryGyroActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1008)]


@partial_struct
class cGcExpeditionEventTable(Structure):
    Events: Annotated[
        basic.cTkDynamicArray[cGcExpeditionEventData],
        Field(basic.cTkDynamicArray[cGcExpeditionEventData], 0x0),
    ]
    InterventionEvents: Annotated[
        basic.cTkDynamicArray[cGcExpeditionInterventionEventData],
        Field(basic.cTkDynamicArray[cGcExpeditionInterventionEventData], 0x10),
    ]


@partial_struct
class cGcFrigateTraitTable(Structure):
    Traits: Annotated[
        basic.cTkDynamicArray[cGcFrigateTraitData],
        Field(basic.cTkDynamicArray[cGcFrigateTraitData], 0x0),
    ]


@partial_struct
class cGcExpeditionRewardTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x0),
    ]


@partial_struct
class cGcCustomisationDescriptorGroups(Structure):
    DescriptorVisualEffects: Annotated[
        cGcCustomisationDescriptorVisualEffects,
        Field(cGcCustomisationDescriptorVisualEffects, 0x0),
    ]
    DescriptorGroupSets: Annotated[
        basic.cTkDynamicArray[cGcCustomisationDescriptorGroupSet],
        Field(basic.cTkDynamicArray[cGcCustomisationDescriptorGroupSet], 0x30),
    ]
    HeadRaces: Annotated[
        basic.cTkDynamicArray[cGcCustomisationHeadToRace],
        Field(basic.cTkDynamicArray[cGcCustomisationHeadToRace], 0x40),
    ]


@partial_struct
class cGcCustomisationPresets(Structure):
    DescriptorGroupFallbackMap: Annotated[
        basic.cTkDynamicArray[cGcCustomisationDescriptorGroupFallbackData],
        Field(basic.cTkDynamicArray[cGcCustomisationDescriptorGroupFallbackData], 0x0),
    ]
    Presets: Annotated[
        basic.cTkDynamicArray[cGcCustomisationPreset],
        Field(basic.cTkDynamicArray[cGcCustomisationPreset], 0x10),
    ]


@partial_struct
class cGcModularCustomisationDataTable(Structure):
    ModularCustomisationConfigs: Annotated[
        cGcModularCustomisationConfig, Field(cGcModularCustomisationConfig, 0x0)
    ]
    ProductLookupLists: Annotated[
        cGcModularCustomisationProductLookupList,
        Field(cGcModularCustomisationProductLookupList, 0x1AD0),
    ]
    SharedSlottableItemLists: Annotated[
        basic.cTkDynamicArray[cGcModularCustomisationSlottableItemList],
        Field(basic.cTkDynamicArray[cGcModularCustomisationSlottableItemList], 0x1B80),
    ]


@partial_struct
class cGcAISpaceshipManagerData(Structure):
    SystemSpaceships: Annotated[
        cGcAISpaceshipModelDataArray, Field(cGcAISpaceshipModelDataArray, 0x0)
    ]
    SentinelCrashSiteShip: Annotated[
        cGcAISpaceshipModelData, Field(cGcAISpaceshipModelData, 0x50)
    ]


@partial_struct
class cGcInteractionComponentData(Structure):
    Renderer: Annotated[cTkModelRendererData, Field(cTkModelRendererData, 0x0)]
    RendererAlt: Annotated[cTkModelRendererData, Field(cTkModelRendererData, 0xB0)]
    ActivationCost: Annotated[
        cGcInteractionActivationCost, Field(cGcInteractionActivationCost, 0x160)
    ]
    SecondaryActivationCost: Annotated[
        cGcInteractionActivationCost, Field(cGcInteractionActivationCost, 0x1C8)
    ]
    StoryUtilityOverrideData: Annotated[
        cGcStoryUtilityOverride, Field(cGcStoryUtilityOverride, 0x230)
    ]
    AdditionalOptionsOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcAdditionalOptionMissionOverride],
        Field(basic.cTkDynamicArray[cGcAdditionalOptionMissionOverride], 0x270),
    ]
    EventRenderers: Annotated[
        basic.cTkDynamicArray[cTkModelRendererData],
        Field(basic.cTkDynamicArray[cTkModelRendererData], 0x280),
    ]
    EventRenderersAlt: Annotated[
        basic.cTkDynamicArray[cTkModelRendererData],
        Field(basic.cTkDynamicArray[cTkModelRendererData], 0x290),
    ]
    EventRenderersDoF: Annotated[
        basic.cTkDynamicArray[cGcInteractionDof],
        Field(basic.cTkDynamicArray[cGcInteractionDof], 0x2A0),
    ]
    InteractionSpecificData: Annotated[
        basic.NMSTemplate, Field(basic.NMSTemplate, 0x2B0)
    ]
    PuzzleMissionOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcAlienPuzzleMissionOverride],
        Field(basic.cTkDynamicArray[cGcAlienPuzzleMissionOverride], 0x2C0),
    ]
    StartMissionOnUse: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2D0)]
    TriggerAction: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2E0)]
    TriggerActionOnPrepare: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2F0)]
    DepthOfField: Annotated[cGcInteractionDof, Field(cGcInteractionDof, 0x300)]
    AttractDistanceSq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x314)]
    BlendFromCameraTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x318)]
    BlendToCameraTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x31C)]
    InteractAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x320)]
    InteractDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x324)]

    class eInteractionActionEnum(IntEnum):
        PressButton = 0x0
        HoldButton = 0x1
        Shoot = 0x2

    InteractionAction: Annotated[
        c_enum32[eInteractionActionEnum], Field(c_enum32[eInteractionActionEnum], 0x328)
    ]
    InteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x32C),
    ]
    InteractMaxHeightDiff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x330)]
    InWorldUIForcedOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x334)]
    InWorldUIForcedOffsetV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x338)]
    InWorldUIMinDistOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x33C)]
    InWorldUIMinDistOverrideV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x340)]
    InWorldUIScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x344)]

    class eOverrideInteriorExteriorMarkerEnum(IntEnum):
        No = 0x0
        Interior = 0x1
        Exterior = 0x2

    OverrideInteriorExteriorMarker: Annotated[
        c_enum32[eOverrideInteriorExteriorMarkerEnum],
        Field(c_enum32[eOverrideInteriorExteriorMarkerEnum], 0x348),
    ]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x34C)
    ]
    RangeToAllowAtAnyAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x350)]
    SecondaryCameraTransitionTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x354)
    ]
    SecondaryInteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x358),
    ]
    AllowMissionUnderwater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35C)]
    BroadcastTriggerAction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35D)]
    InteractInvertFace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35E)]
    InWorldUIUseCameraUp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x35F)]
    OnlyAvailableInAbandonedMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x360)]
    RepeatInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x361)]
    ReseedAfterRewardSuccess: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x362)]
    SecondaryMeshAlwaysVisible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x363)]
    UseInteractCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x364)]
    UseIntermediateUI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x365)]
    UsePersonalPersistentBuffer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x366)]
    UseUnlockedInteractionIfMaintDone: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x367)
    ]


@partial_struct
class cGcHUDManagerData(Structure):
    SubtitleFont: Annotated[cGcTextPreset, Field(cGcTextPreset, 0x0)]
    SubtitleFontSmall: Annotated[cGcTextPreset, Field(cGcTextPreset, 0x30)]
    TitleFont: Annotated[cGcTextPreset, Field(cGcTextPreset, 0x60)]
    ModelRenderDisplayBorder: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x90)]
    ModelRenderDisplayMove: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94)]
    ModelRenderDisplayOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98)]
    ModelRenderDisplaySize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9C)]
    ModelRenderTextureSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    OSDBaseBandY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    OSDBaseTextY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA8)]
    OSDBorderY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    OSDCoreAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    OSDCoreSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    OSDEdgeMergeAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    OSDFadeSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC)]
    OSDFullSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    OSDTextAppearRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    OSDTextFadeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    OSDTextWaitOnAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    OSDUnderlineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    PopUpBGFadeInRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]
    PopUpBGFadeOutRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    PopUpBGTriggerFG: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    PopUpCoreAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    PopUpCoreSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    PopUpFadeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    PopUpFullSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    PopUpY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    PopUpYMidLock: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    PromptLine1Y: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    PromptLine2Y: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    ModelRenderDisplayAlphaCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x100)
    ]
    ModelRenderDisplayMoveCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x101)
    ]


@partial_struct
class cTkReplacementResourceTable(Structure):
    Data: Annotated[
        basic.cTkDynamicArray[cTkReplacementResource],
        Field(basic.cTkDynamicArray[cTkReplacementResource], 0x0),
    ]


@partial_struct
class cGcJourney(Structure):
    Categories: Annotated[
        basic.cTkDynamicArray[cGcJourneyCategory],
        Field(basic.cTkDynamicArray[cGcJourneyCategory], 0x0),
    ]


@partial_struct
class cGcWiki(Structure):
    Categories: Annotated[
        basic.cTkDynamicArray[cGcWikiCategory],
        Field(basic.cTkDynamicArray[cGcWikiCategory], 0x0),
    ]


@partial_struct
class cGcMissionSchedulesTable(Structure):
    Schedules: Annotated[
        basic.cTkDynamicArray[cGcMissionSchedulingData],
        Field(basic.cTkDynamicArray[cGcMissionSchedulingData], 0x0),
    ]


@partial_struct
class cGcAlienPuzzleTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcAlienPuzzleEntry],
        Field(basic.cTkDynamicArray[cGcAlienPuzzleEntry], 0x0),
    ]


@partial_struct
class cGcCombatEffectsTable(Structure):
    EffectsData: Annotated[cGcCombatEffectData, Field(cGcCombatEffectData, 0x0)]


@partial_struct
class cGcPlayerWeaponPropertiesTable(Structure):
    PropertiesData: Annotated[
        cGcPlayerWeaponPropertiesData, Field(cGcPlayerWeaponPropertiesData, 0x0)
    ]
    CamouflageData: Annotated[cGcCamouflageData, Field(cGcCamouflageData, 0x1A40)]


@partial_struct
class cGcUnlockableTrees(Structure):
    Trees: Annotated[cGcUnlockableItemTrees, Field(cGcUnlockableItemTrees, 0x0)]
    CostTypes: Annotated[
        basic.cTkDynamicArray[cGcUnlockableTreeCostType],
        Field(basic.cTkDynamicArray[cGcUnlockableTreeCostType], 0x2D0),
    ]


@partial_struct
class cGcMaintenanceGroupsTable(Structure):
    Groups: Annotated[cGcMaintenanceGroup, Field(cGcMaintenanceGroup, 0x0)]


@partial_struct
class cGcPlayerDamageTable(Structure):
    DamageTable: Annotated[cGcPlayerDamageData, Field(cGcPlayerDamageData, 0x0)]


@partial_struct
class cGcInventoryTable(Structure):
    ShipBaseStatsData: Annotated[
        cGcInventoryGenerationBaseStatData,
        Field(cGcInventoryGenerationBaseStatData, 0x0),
    ]
    WeaponBaseStatsData: Annotated[
        cGcInventoryGenerationBaseStatData,
        Field(cGcInventoryGenerationBaseStatData, 0x2C0),
    ]
    VehicleBaseStatsData: Annotated[
        cGcInventoryGenerationBaseStatData,
        Field(cGcInventoryGenerationBaseStatData, 0x540),
    ]
    BaseStats: Annotated[
        basic.cTkDynamicArray[cGcInventoryBaseStat],
        Field(basic.cTkDynamicArray[cGcInventoryBaseStat], 0x580),
    ]
    Table: Annotated[
        basic.cTkDynamicArray[cGcInventoryTableEntry],
        Field(basic.cTkDynamicArray[cGcInventoryTableEntry], 0x590),
    ]
    GenerationData: Annotated[
        cGcInventoryLayoutGenerationData, Field(cGcInventoryLayoutGenerationData, 0x5A0)
    ]
    ShipInventoryMaxUpgradeSize: Annotated[
        cGcShipInventoryMaxUpgradeCapacity,
        Field(cGcShipInventoryMaxUpgradeCapacity, 0x1464),
    ]
    ShipCostData: Annotated[cGcInventoryCostData, Field(cGcInventoryCostData, 0x1674)]
    WeaponCostData: Annotated[
        cGcInventoryCostDataEntry, Field(cGcInventoryCostDataEntry, 0x182C)
    ]
    ClassProbabilityData: Annotated[
        cGcInventoryClassProbabilities, Field(cGcInventoryClassProbabilities, 0x19BC)
    ]
    VehicleCostData: Annotated[
        cGcInventoryCostDataEntry, Field(cGcInventoryCostDataEntry, 0x19FC)
    ]
    WeaponInventoryMaxUpgradeSize: Annotated[
        cGcWeaponInventoryMaxUpgradeCapacity,
        Field(cGcWeaponInventoryMaxUpgradeCapacity, 0x1A24),
    ]


@partial_struct
class cGcStoriesTable(Structure):
    Table: Annotated[cGcStoryCategory, Field(cGcStoryCategory, 0x0)]


@partial_struct
class cGcRecipeTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcRefinerRecipe],
        Field(basic.cTkDynamicArray[cGcRefinerRecipe], 0x0),
    ]


@partial_struct
class cGcRewardTable(Structure):
    DestructionTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x0),
    ]
    EntitlementTable: Annotated[
        basic.cTkDynamicArray[cGcRewardTableEntitlementItem],
        Field(basic.cTkDynamicArray[cGcRewardTableEntitlementItem], 0x10),
    ]
    FleetTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x20),
    ]
    GenericTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x30),
    ]
    InteractionTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x40),
    ]
    MissionBoardTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x50),
    ]
    MixerRewardTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x60),
    ]
    NPCPlanetSiteTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x70),
    ]
    OldInteractionTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x80),
    ]
    ProductRewardOrder: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x90),
    ]
    SeasonRewardTable1: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0xA0),
    ]
    SeasonRewardTable10: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0xB0),
    ]
    SeasonRewardTable11: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0xC0),
    ]
    SeasonRewardTable12: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0xD0),
    ]
    SeasonRewardTable13: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0xE0),
    ]
    SeasonRewardTable14: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0xF0),
    ]
    SeasonRewardTable15: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x100),
    ]
    SeasonRewardTable16: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x110),
    ]
    SeasonRewardTable17: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x120),
    ]
    SeasonRewardTable18: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x130),
    ]
    SeasonRewardTable19: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x140),
    ]
    SeasonRewardTable2: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x150),
    ]
    SeasonRewardTable20: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x160),
    ]
    SeasonRewardTable3: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x170),
    ]
    SeasonRewardTable4: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x180),
    ]
    SeasonRewardTable5: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x190),
    ]
    SeasonRewardTable6: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x1A0),
    ]
    SeasonRewardTable7: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x1B0),
    ]
    SeasonRewardTable8: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x1C0),
    ]
    SeasonRewardTable9: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x1D0),
    ]
    SettlementTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x1E0),
    ]
    ShipSalvageTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x1F0),
    ]
    SpecialRewardTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x200),
    ]
    Table: Annotated[
        basic.cTkDynamicArray[cGcRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcRewardTableEntry], 0x210),
    ]
    TechRewardOrder: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x220),
    ]
    TwitchRewardTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x230),
    ]
    WikiProgressTable: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x240),
    ]


@partial_struct
class cGcConsumableItemTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcConsumableItem],
        Field(basic.cTkDynamicArray[cGcConsumableItem], 0x0),
    ]


@partial_struct
class cGcSubstanceTable(Structure):
    Crafting: Annotated[
        basic.cTkDynamicArray[cGcRealityCraftingRecipeData],
        Field(basic.cTkDynamicArray[cGcRealityCraftingRecipeData], 0x0),
    ]
    Table: Annotated[
        basic.cTkDynamicArray[cGcRealitySubstanceData],
        Field(basic.cTkDynamicArray[cGcRealitySubstanceData], 0x10),
    ]


@partial_struct
class cGcTechnologyTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcTechnology],
        Field(basic.cTkDynamicArray[cGcTechnology], 0x0),
    ]


@partial_struct
class cGcRealityManagerData(Structure):
    SubstanceCategoryColours: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    HazardColours: Annotated[basic.Colour, Field(basic.Colour, 0x90)]
    RarityColours: Annotated[basic.Colour, Field(basic.Colour, 0x100)]
    TradeSettings: Annotated[cGcTradeSettings, Field(cGcTradeSettings, 0x130)]
    Icons: Annotated[cGcRealityIconTable, Field(cGcRealityIconTable, 0x18C0)]
    StatCategoryIcons: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x2DD8)]
    StatTechPackageIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x4128)
    ]
    MissionNameAdjectives: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x5478)
    ]
    MissionNameFormats: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x5790)
    ]
    MissionNameNouns: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0x5AA8)]
    SubstanceSecondaryBiome: Annotated[
        cGcSubstanceSecondaryBiome, Field(cGcSubstanceSecondaryBiome, 0x5DC0)
    ]
    ShipWeapons: Annotated[cGcShipWeaponData, Field(cGcShipWeaponData, 0x5FE0)]
    FactionNames: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x61A0)
    ]
    PlayerWeapons: Annotated[cGcPlayerWeaponData, Field(cGcPlayerWeaponData, 0x62E0)]
    RepShops: Annotated[cGcRepShopData, Field(cGcRepShopData, 0x6420)]
    PlanetTechShops: Annotated[cGcTechList, Field(cGcTechList, 0x6560)]
    FactionClients: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0x6670)]
    SubstanceChargeIcons: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x6760)
    ]
    MissionBoardRewardOptions: Annotated[cTkIdArray, Field(cTkIdArray, 0x6838)]
    FactionStandingIDs: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x68E8)]
    DefaultVehicleLoadout: Annotated[cTkIdArray, Field(cTkIdArray, 0x6988)]
    Catalogues: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x69F8)
    ]
    Stats: Annotated[cGcStats, Field(cGcStats, 0x6A48)]
    ProductTables: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6A98)
    ]
    ShipCargoOnlyStartingLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x6AC8)
    ]
    ShipStartingLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x6AE0)]
    ShipTechOnlyStartingLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x6AF8)
    ]
    SuitCargoStartingSlotLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x6B10)
    ]
    SuitStartingSlotLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x6B28)
    ]
    SuitTechOnlyStartingSlotLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x6B40)
    ]
    AlienPuzzleTables: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x6B58),
    ]
    AlienWordsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6B68)
    ]
    BaitDataTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6B78)
    ]
    BuilderMissionRewardOverrides: Annotated[
        basic.cTkDynamicArray[cGcRewardMissionOverride],
        Field(basic.cTkDynamicArray[cGcRewardMissionOverride], 0x6B88),
    ]
    CombatEffectsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6B98)
    ]
    ConsumableItemTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6BA8)
    ]
    CostTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6BB8)
    ]
    DamageMultiplierTable: Annotated[
        basic.cTkDynamicArray[cGcDamageMultiplierLookup],
        Field(basic.cTkDynamicArray[cGcDamageMultiplierLookup], 0x6BC8),
    ]
    DamageTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6BD8)
    ]
    DialogClearanceTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6BE8)
    ]
    DiscoveryRewardTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6BF8)
    ]
    FiendCrimeSpawnTable: Annotated[
        basic.cTkDynamicArray[cGcFiendCrimeSpawnTable],
        Field(basic.cTkDynamicArray[cGcFiendCrimeSpawnTable], 0x6C08),
    ]
    FishDataTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6C18)
    ]
    FreighterBaseItemPairs: Annotated[
        basic.cTkDynamicArray[cGcIDPair],
        Field(basic.cTkDynamicArray[cGcIDPair], 0x6C28),
    ]
    FreighterCargoOptions: Annotated[
        basic.cTkDynamicArray[cGcFreighterCargoOption],
        Field(basic.cTkDynamicArray[cGcFreighterCargoOption], 0x6C38),
    ]
    HistoricalSeasonDataTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6C48)
    ]
    InventoryTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6C58)
    ]
    LegacyItemConversionTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6C68)
    ]
    LegacyRepairTable: Annotated[
        basic.cTkDynamicArray[cTkRawID], Field(basic.cTkDynamicArray[cTkRawID], 0x6C78)
    ]
    MaintenanceGroupsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6C88)
    ]
    MaintenanceOverrideTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6C98)
    ]
    NeverOfferedForSale: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x6CA8),
    ]
    NeverSellableItems: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x6CB8),
    ]
    PirateStationExtraProds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x6CC8),
    ]
    PlayerWeaponPropertiesTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6CD8)
    ]
    ProceduralProductTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6CE8)
    ]
    ProceduralTechnologyTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6CF8)
    ]
    ProductDescriptionOverrideTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D08)
    ]
    PurchaseableBuildingBlueprintsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D18)
    ]
    PurchaseableSpecialsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D28)
    ]
    RecipeTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D38)
    ]
    RewardTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D48)
    ]
    SettlementPerksTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D58)
    ]
    StationTechShops: Annotated[cGcTechList, Field(cGcTechList, 0x6D68)]
    StatRewardsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D78)
    ]
    StoriesTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6D88)
    ]
    SubstanceSecondaryLookups: Annotated[
        basic.cTkDynamicArray[cGcSubstanceSecondaryLookup],
        Field(basic.cTkDynamicArray[cGcSubstanceSecondaryLookup], 0x6D98),
    ]
    SubstanceTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6DA8)
    ]
    SuitCargoUpgradePrices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x6DB8),
    ]
    SuitTechOnlyUpgradePrices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x6DC8),
    ]
    SuitUpgradePrices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x6DD8),
    ]
    TechBoxTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6DE8)
    ]
    TechnologyTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6DF8)
    ]
    TradingClassDataTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6E08)
    ]
    TradingCostTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6E18)
    ]
    UnlockableItemTrees: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6E28)
    ]
    UnlockablePlatformRewardsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6E38)
    ]
    UnlockableSeasonRewardsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6E48)
    ]
    UnlockableTwitchRewardsTable: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x6E58)
    ]
    FoodStatValues: Annotated[cGcMinMaxFloat, Field(cGcMinMaxFloat, 0x6E68)]
    InteractionPuzzlesIndexTypes: Annotated[
        c_enum32[enums.cGcAlienPuzzleTableIndex],
        Field(c_enum32[enums.cGcAlienPuzzleTableIndex], 0x74D8),
    ]
    DiscoveryWorth: Annotated[cGcDiscoveryWorth, Field(cGcDiscoveryWorth, 0x773C)]
    NormalisedPriceLimits: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7918)]
    CreatureDiscoverySizeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x792C)
    ]
    WeightedTextWeights: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x793C)]
    HomeRealityIteration: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x7948)]
    RealityIteration: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x794A)]
    LoopInteractionPuzzles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x794C)]
    WeightingCurves: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x79E5)
    ]


@partial_struct
class cGcNPCSettlementBehaviourData(Structure):
    BehaviourOverrides: Annotated[
        cGcNPCSettlementBehaviourEntry, Field(cGcNPCSettlementBehaviourEntry, 0x0)
    ]
    BaseBehaviour: Annotated[
        cGcNPCSettlementBehaviourEntry, Field(cGcNPCSettlementBehaviourEntry, 0x168)
    ]


@partial_struct
class cGcHazardZoneComponentData(Structure):
    OSDOnEntry: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    CombatEffectsOnEntry: Annotated[
        basic.cTkDynamicArray[cGcImpactCombatEffectData],
        Field(basic.cTkDynamicArray[cGcImpactCombatEffectData], 0x20),
    ]
    DamageOnEntry: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]
    HazardStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    HazardType: Annotated[
        c_enum32[enums.cGcPlayerHazardType],
        Field(c_enum32[enums.cGcPlayerHazardType], 0x44),
    ]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x48)]


@partial_struct
class cGcNPCInteractiveObjectComponentData(Structure):
    States: Annotated[
        basic.cTkDynamicArray[cGcNPCInteractiveObjectState],
        Field(basic.cTkDynamicArray[cGcNPCInteractiveObjectState], 0x0),
    ]
    DurationMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    DurationMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    InteractiveObjectType: Annotated[
        c_enum32[enums.cGcNPCInteractiveObjectType],
        Field(c_enum32[enums.cGcNPCInteractiveObjectType], 0x18),
    ]
    MaxCapacity: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C)]


@partial_struct
class cGcMaintenanceComponentData(Structure):
    ModelRenderData: Annotated[cTkModelRendererData, Field(cTkModelRendererData, 0x0)]
    ModelRenderDataAlt: Annotated[
        cTkModelRendererData, Field(cTkModelRendererData, 0xB0)
    ]
    GroupInstallSetup: Annotated[
        cGcMaintenanceGroupInstallData, Field(cGcMaintenanceGroupInstallData, 0x160)
    ]
    ActionButtonOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1F0)
    ]
    ActionDescriptionOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x210)
    ]
    ActionWarningOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x230)
    ]
    ChargeButtonOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x250)
    ]
    ChargeDescriptionOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x270)
    ]
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x290)
    ]
    DiscardButtonOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2B0)
    ]
    DiscardDescriptionOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2D0)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2F0)]
    TransferButtonOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x310)
    ]
    TransferDescriptionOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x330)
    ]
    ForceDamageDuringMissions: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x350),
    ]
    GiveRewardOnCompletion: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x360)]
    PreInstalledTech: Annotated[
        basic.cTkDynamicArray[cGcMaintenanceElement],
        Field(basic.cTkDynamicArray[cGcMaintenanceElement], 0x370),
    ]
    StartMissionOnCompletion: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x380)]
    StartMissionOnUse: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x390)]
    DepthOfField: Annotated[cGcInteractionDof, Field(cGcInteractionDof, 0x3A0)]
    CustomIconCentre: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x3B4)]
    AudioIDOnSuccess: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x3BC),
    ]
    BroadcastLevel: Annotated[
        c_enum32[enums.cGcBroadcastLevel],
        Field(c_enum32[enums.cGcBroadcastLevel], 0x3C0),
    ]
    CompletedTransitionDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C4)]

    class eInteractableEnum(IntEnum):
        OnlyWhenComplete = 0x0
        OnlyWhenNotComplete = 0x1
        Always = 0x2
        Never = 0x3

    Interactable: Annotated[
        c_enum32[eInteractableEnum], Field(c_enum32[eInteractableEnum], 0x3C8)
    ]
    InWorldUIForcedOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3CC)]
    InWorldUIForcedOffsetV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D0)]
    InWorldUIMinDistOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D4)]
    InWorldUIMinDistOverrideV2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3D8)]
    InWorldUIScaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3DC)]

    class eModelRendererResourceEnum(IntEnum):
        ModelNode = 0x0
        MasterModelNode = 0x1

    ModelRendererResource: Annotated[
        c_enum32[eModelRendererResourceEnum],
        Field(c_enum32[eModelRendererResourceEnum], 0x3E0),
    ]
    VisibleMaintenanceSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3E4)]
    AllowCharge: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3E8)]
    AllowCraftProduct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3E9)]
    AllowDiscard: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3EA)]
    AllowDismantle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3EB)]
    AllowInstallTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3EC)]
    AllowMoveAndStack: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3ED)]
    AllowPinning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3EE)]
    AllowRepair: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3EF)]
    AllowTransfer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F0)]
    AllowTransferIn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F1)]
    AutoCompleteOnStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F2)]
    CanUseOutsideOfBase: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F3)]
    DisableSynchronise: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F4)]
    ForceNoninteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F5)]
    ForceOneClickRepair: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F6)]
    ForceRemoveUIRenderLayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F7)]
    HideMaxAmountOnProductSlots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F8)]
    InteractionRequiresPower: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3F9)]
    InWorldUIUseCameraUp: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3FA)]
    OpenInteractionOnQuit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3FB)]
    ShareInteractionModelRender: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3FC)]
    SilenceSuitVOIAlerts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3FD)]
    UseBoundsForIconCentre: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3FE)]
    UseInteractionStyleCameraEvent: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3FF)
    ]
    UseModelResourceRenderer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x400)]
    UseNetworkLock: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x401)]


@partial_struct
class cGcEggMachineComponentData(Structure):
    MaintenanceData: Annotated[
        cGcMaintenanceComponentData, Field(cGcMaintenanceComponentData, 0x0)
    ]
    NumInputs: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x410)]


@partial_struct
class cGcCreatureFeederComponentData(Structure):
    MaintenanceData: Annotated[
        cGcMaintenanceComponentData, Field(cGcMaintenanceComponentData, 0x0)
    ]
    DispenseNodes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x100],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x100], 0x410),
    ]
    DispensePeriod: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x420)]
    DispenseVelocity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x424)]
    NumInputs: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x428)]
    NumMealsPerBait: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x42C)]


@partial_struct
class cGcCreatureHarvesterComponentData(Structure):
    MaintenanceData: Annotated[
        cGcMaintenanceComponentData, Field(cGcMaintenanceComponentData, 0x0)
    ]
    NumSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x410)]


@partial_struct
class cGcGeneratorUnitComponentData(Structure):
    MaintenanceData: Annotated[
        cGcMaintenanceComponentData, Field(cGcMaintenanceComponentData, 0x0)
    ]
    BiomeGasRewards: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x410)]

    class eGeneratorUnitTypeEnum(IntEnum):
        MiningUnit = 0x0
        GasHarvester = 0x1
        SystemHoover = 0x2
        SeaHarvester = 0x3

    GeneratorUnitType: Annotated[
        c_enum32[eGeneratorUnitTypeEnum], Field(c_enum32[eGeneratorUnitTypeEnum], 0x520)
    ]
    ResourceMaintenanceSlotOverride: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x524)
    ]


@partial_struct
class cGcPetEggTraitModifierOverrideTable(Structure):
    TraitModifiers: Annotated[
        basic.cTkDynamicArray[cGcPetEggTraitModifierOverrideData],
        Field(basic.cTkDynamicArray[cGcPetEggTraitModifierOverrideData], 0x0),
    ]


@partial_struct
class cGcRefinerUnitComponentData(Structure):
    MaintenanceData: Annotated[
        cGcMaintenanceComponentData, Field(cGcMaintenanceComponentData, 0x0)
    ]
    InputOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x410)]
    OutputOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x420)]
    NumInputs: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x430)]
    IsCooker: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x434)]


@partial_struct
class cGcPlayerFullBodyIKComponentData(Structure):
    COGConstraint: Annotated[cGcIKConstraint, Field(cGcIKConstraint, 0x0)]
    SitConstraint: Annotated[cGcIKConstraint, Field(cGcIKConstraint, 0x150)]
    CameraNeckBones: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x2A0),
    ]
    HandBones: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x2B0),
    ]
    HeadConstraints: Annotated[
        basic.cTkDynamicArray[cGcIKConstraint],
        Field(basic.cTkDynamicArray[cGcIKConstraint], 0x2C0),
    ]
    JointDataDeprecated: Annotated[
        basic.cTkDynamicArray[cGcCreatureIkData],
        Field(basic.cTkDynamicArray[cGcCreatureIkData], 0x2D0),
    ]
    LegConstraints: Annotated[
        basic.cTkDynamicArray[cGcIKConstraint],
        Field(basic.cTkDynamicArray[cGcIKConstraint], 0x2E0),
    ]
    RestrictConstraints: Annotated[
        basic.cTkDynamicArray[cGcIKConstraint],
        Field(basic.cTkDynamicArray[cGcIKConstraint], 0x2F0),
    ]
    LookAtSettings: Annotated[
        cGcCharacterLookAtData, Field(cGcCharacterLookAtData, 0x300)
    ]
    DisableDistanceSq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x334)]

    class ePlayerHeadUpAxisEnum(IntEnum):
        X = 0x0
        XNeg = 0x1
        Y = 0x2
        YNeg = 0x3
        Z = 0x4
        ZNeg = 0x5

    PlayerHeadUpAxis: Annotated[
        c_enum32[ePlayerHeadUpAxisEnum], Field(c_enum32[ePlayerHeadUpAxisEnum], 0x338)
    ]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x33C)]
    EnableFootRaycasts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x33D)]
    UseFootGlue: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x33E)]


@partial_struct
class cGcFreighterDungeonsTable(Structure):
    Dungeons: Annotated[
        basic.cTkDynamicArray[cGcFreighterDungeonParams],
        Field(basic.cTkDynamicArray[cGcFreighterDungeonParams], 0x0),
    ]


@partial_struct
class cGcCreatureSpawnComponentData(Structure):
    SpecificModel: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x0)]
    Creature: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]
    Model: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x58)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x68)]
    SpawnOptionList: Annotated[
        basic.cTkDynamicArray[cGcSpawnComponentOption],
        Field(basic.cTkDynamicArray[cGcSpawnComponentOption], 0x78),
    ]
    TriggerID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x88)]
    CreatureType: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x98)
    ]
    FunctionKey: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9C)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0)]
    ShipAIOverride: Annotated[
        c_enum32[enums.cGcAISpaceshipTypes],
        Field(c_enum32[enums.cGcAISpaceshipTypes], 0xA4),
    ]

    class eSpawnerModeEnum(IntEnum):
        Hidden = 0x0
        Visible = 0x1
        HideOnSpawn = 0x2
        HiddenTimer = 0x3

    SpawnerMode: Annotated[
        c_enum32[eSpawnerModeEnum], Field(c_enum32[eSpawnerModeEnum], 0xA8)
    ]
    StartTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAC)]
    StartTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB0)]
    TriggerDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4)]
    SpawnAlert: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xB8)]


@partial_struct
class cGcCreatureDataTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcCreatureData],
        Field(basic.cTkDynamicArray[cGcCreatureData], 0x0),
    ]


@partial_struct
class cGcExplosionDataTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcExplosionData],
        Field(basic.cTkDynamicArray[cGcExplosionData], 0x0),
    ]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x10)]


@partial_struct
class cGcDestructableComponentData(Structure):
    RarityLocators: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x0)]
    DestroyedModel: Annotated[cTkModelResource, Field(cTkModelResource, 0x30)]
    OverrideRewardLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]
    AreaDamage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x70)]
    DestroyedModelSpawnNode: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    DestroyEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    DestroyEffectPoint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    Explosion: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    GivesReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC0)]
    GivesSubstances: Annotated[
        basic.cTkDynamicArray[cGcSubstanceAmount],
        Field(basic.cTkDynamicArray[cGcSubstanceAmount], 0xD0),
    ]
    LootItems: Annotated[
        basic.cTkDynamicArray[cGcLootProbability],
        Field(basic.cTkDynamicArray[cGcLootProbability], 0xE0),
    ]
    LootReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xF0)]
    PirateSystemAltReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x100)]
    RewardOverrideTable: Annotated[
        basic.cTkDynamicArray[cGcRewardMissionOverride],
        Field(basic.cTkDynamicArray[cGcRewardMissionOverride], 0x110),
    ]
    TriggerAction: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x120)]
    UnderwaterExplosion: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x130)]
    VehicleDestroyEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x140)]
    StandingChangeOnDeath: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x150)]
    DestroyEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x178)]
    DestroyForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C)]
    DestroyForceRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x180)]
    ExplosionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x184)]
    IncreaseCorruptSentinelWanted: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x188)
    ]
    IncreaseFiendCrime: Annotated[
        c_enum32[enums.cGcFiendCrime], Field(c_enum32[enums.cGcFiendCrime], 0x18C)
    ]
    IncreaseFiendWantedChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x190)]
    IncreaseWanted: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x194)]
    LootRewardAmountMax: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x198)]
    LootRewardAmountMin: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x19C)]
    OverrideChipAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A0)]
    ShowInteractRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A4)]
    StatToTrack: Annotated[
        c_enum32[enums.cGcStatsEnum], Field(c_enum32[enums.cGcStatsEnum], 0x1A8)
    ]
    UnderwaterExplosionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC)]
    ActivateLocatorsFromRarity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B0)]
    BlockDestructionIfRewardFails: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B1)]
    CanDestroyFromStoredInteraction: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1B2)
    ]
    DamagesParentWhenDestroyed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B3)]
    DestroyedModelCollidesWithEverything: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1B4)
    ]
    DestroyedModelUsesScale: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B5)]
    DestroyEffectMatrices: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B6)]
    DestroyEffectOnSurface: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B7)]
    ExplosionScaleToBounds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B8)]
    GrenadeSingleHit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B9)]
    HideInteractWhenAllArmourDestroyed: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1BA)
    ]
    HideInteractWhenShielded: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BB)]
    HideModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BC)]
    HideReward: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BD)]
    IncreaseFiendWanted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1BE)]
    NoConsequencesDuringPirateBattle: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1BF)
    ]
    NotifyEncounter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C0)]
    OnlyExplodeSelf: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C1)]
    RemoveModel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C2)]
    RewardIfDestroyedByOther: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C3)]
    ShowInteract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C4)]
    UseSystemColorsForTexture: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1C5)]


@partial_struct
class cGcFrigateFlybyTable(Structure):
    Entries: Annotated[
        basic.cTkDynamicArray[cGcFrigateFlybyLayout],
        Field(basic.cTkDynamicArray[cGcFrigateFlybyLayout], 0x0),
    ]


@partial_struct
class cGcExperienceSpawnTable(Structure):
    BattleReinforcingPirateFrigateSpawn: Annotated[
        cGcAIShipSpawnData, Field(cGcAIShipSpawnData, 0x0)
    ]
    EncounterSpawns: Annotated[
        cGcSentinelSpawnSequenceGroupList,
        Field(cGcSentinelSpawnSequenceGroupList, 0x160),
    ]
    WantedLevelSpawns: Annotated[
        cGcSentinelSpawnSequenceGroupList,
        Field(cGcSentinelSpawnSequenceGroupList, 0x310),
    ]
    AsteroidCreatureSpawns: Annotated[
        cGcPlayerExperienceAsteroidCreatureSpawnTable,
        Field(cGcPlayerExperienceAsteroidCreatureSpawnTable, 0x430),
    ]
    SummonerSpawns: Annotated[cGcSentinelWaveGroup, Field(cGcSentinelWaveGroup, 0x470)]
    AbandonedFreighterSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x490),
    ]
    AmbientSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x4A0),
    ]
    BackgroundSpaceEncounters: Annotated[
        basic.cTkDynamicArray[cGcBackgroundSpaceEncounterInfo],
        Field(basic.cTkDynamicArray[cGcBackgroundSpaceEncounterInfo], 0x4B0),
    ]
    BattleInitialPirateSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x4C0),
    ]
    BattleInitialStandardSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x4D0),
    ]
    BattlePirateSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x4E0),
    ]
    BattleRecurringPirateSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x4F0),
    ]
    BattleSecondaryPirateSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x500),
    ]
    BattleSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x510),
    ]
    CreatureSpawnArchetypes: Annotated[
        basic.cTkDynamicArray[cGcPlayerExperienceSpawnArchetypeData],
        Field(basic.cTkDynamicArray[cGcPlayerExperienceSpawnArchetypeData], 0x520),
    ]
    CreatureSpawnTable: Annotated[
        basic.cTkDynamicArray[cGcPlayerExperienceSpawnTable],
        Field(basic.cTkDynamicArray[cGcPlayerExperienceSpawnTable], 0x530),
    ]
    EncounterOverrides: Annotated[
        basic.cTkDynamicArray[cGcSentinelEncounterOverride],
        Field(basic.cTkDynamicArray[cGcSentinelEncounterOverride], 0x540),
    ]
    FlybySpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x550),
    ]
    FrigateFlybySpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x560),
    ]
    MiningFlybySpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x570),
    ]
    OutpostSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x580),
    ]
    PirateBattleSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x590),
    ]
    PirateBountySpawns: Annotated[
        basic.cTkDynamicArray[cGcBountySpawnInfo],
        Field(basic.cTkDynamicArray[cGcBountySpawnInfo], 0x5A0),
    ]
    PirateSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x5B0),
    ]
    PlanetaryPirateFlybySpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x5C0),
    ]
    PlanetaryPirateRaidSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x5D0),
    ]
    PoliceSpawns: Annotated[
        basic.cTkDynamicArray[cGcPoliceSpawnWaveData],
        Field(basic.cTkDynamicArray[cGcPoliceSpawnWaveData], 0x5E0),
    ]
    PulseEncounters: Annotated[
        basic.cTkDynamicArray[cGcPulseEncounterInfo],
        Field(basic.cTkDynamicArray[cGcPulseEncounterInfo], 0x5F0),
    ]
    SentinelSequences: Annotated[
        basic.cTkDynamicArray[cGcSentinelSpawnNamedSequence],
        Field(basic.cTkDynamicArray[cGcSentinelSpawnNamedSequence], 0x600),
    ]
    SentinelSpawns: Annotated[
        basic.cTkDynamicArray[cGcSentinelSpawnWave],
        Field(basic.cTkDynamicArray[cGcSentinelSpawnWave], 0x610),
    ]
    SpaceFlybySpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x620),
    ]
    TraderSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipSpawnData], 0x630),
    ]


@partial_struct
class cGcWFCDecorationSet(Structure):
    Items: Annotated[
        basic.cTkDynamicArray[cGcWFCDecorationItem],
        Field(basic.cTkDynamicArray[cGcWFCDecorationItem], 0x0),
    ]


@partial_struct
class cGcSettlementColourTable(Structure):
    DecorationPartIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x0),
    ]
    SettlementColourPalettes: Annotated[
        basic.cTkDynamicArray[cGcSettlementColourPalette],
        Field(basic.cTkDynamicArray[cGcSettlementColourPalette], 0x10),
    ]


@partial_struct
class cGcSolarSystemData(Structure):
    Colours: Annotated[cGcPlanetColourData, Field(cGcPlanetColourData, 0x0)]
    SpaceStationSpawn: Annotated[
        cGcSpaceStationSpawnData, Field(cGcSpaceStationSpawnData, 0x1C00)
    ]
    Sky: Annotated[cGcSpaceSkyProperties, Field(cGcSpaceSkyProperties, 0x1D40)]
    PlanetPositions: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1DE0)]
    Light: Annotated[cGcLightProperties, Field(cGcLightProperties, 0x1E60)]
    SunPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1E90)]
    PlanetGenerationInputs: Annotated[
        cGcPlanetGenerationInputData, Field(cGcPlanetGenerationInputData, 0x1EA0)
    ]
    AsteroidGenerators: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x2160),
    ]
    AsteroidSubstanceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2170)]
    HeavyAir: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x2180)
    ]
    Locators: Annotated[
        basic.cTkDynamicArray[cGcSolarSystemLocator],
        Field(basic.cTkDynamicArray[cGcSolarSystemLocator], 0x2190),
    ]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x21A0)]
    SentinelCrashSiteShipSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x21B0)]
    SystemShips: Annotated[
        basic.cTkDynamicArray[cGcAISpaceshipPreloadCacheData],
        Field(basic.cTkDynamicArray[cGcAISpaceshipPreloadCacheData], 0x21C0),
    ]
    PlanetOrbits: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x21D0)]
    TraderSpawnInStations: Annotated[
        cGcSolarSystemTraderSpawnData, Field(cGcSolarSystemTraderSpawnData, 0x21F0)
    ]
    TraderSpawnOnOutposts: Annotated[
        cGcSolarSystemTraderSpawnData, Field(cGcSolarSystemTraderSpawnData, 0x2204)
    ]
    FlybyTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2218)]
    FreighterTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2220)]
    PlanetPirateTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2228)]
    PoliceTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2230)]
    SpacePirateTimer: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2238)]
    TradingData: Annotated[cGcPlanetTradingData, Field(cGcPlanetTradingData, 0x2240)]

    class eAsteroidLevelEnum(IntEnum):
        NoRares = 0x0
        SomeRares = 0x1
        LotsOfRares = 0x2

    AsteroidLevel: Annotated[
        c_enum32[eAsteroidLevelEnum], Field(c_enum32[eAsteroidLevelEnum], 0x2248)
    ]
    Class: Annotated[
        c_enum32[enums.cGcSolarSystemClass],
        Field(c_enum32[enums.cGcSolarSystemClass], 0x224C),
    ]
    ConflictData: Annotated[
        c_enum32[enums.cGcPlayerConflictData],
        Field(c_enum32[enums.cGcPlayerConflictData], 0x2250),
    ]
    InhabitingRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x2254)
    ]
    MaxNumFreighters: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2258)]
    NumTradeRoutes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x225C)]
    NumVisibleTradeRoutes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2260)]
    Planets: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2264)]
    PrimePlanets: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x2268)]
    ScreenFilter: Annotated[
        c_enum32[enums.cGcScreenFilters],
        Field(c_enum32[enums.cGcScreenFilters], 0x226C),
    ]
    StarType: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x2270),
    ]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x2274)]
    StartWithFreighters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x22F4)]


@partial_struct
class cGcNPCReactionData(Structure):
    Reactions: Annotated[
        basic.cTkDynamicArray[cGcNPCReactionEntry],
        Field(basic.cTkDynamicArray[cGcNPCReactionEntry], 0x0),
    ]


@partial_struct
class cGcNPCAnimationsData(Structure):
    SittingAnimatons: Annotated[
        cGcNPCAnimationSetData, Field(cGcNPCAnimationSetData, 0x0)
    ]
    SittingIPadAnimatons: Annotated[
        cGcNPCAnimationSetData, Field(cGcNPCAnimationSetData, 0x190)
    ]
    StandingAnimatons: Annotated[
        cGcNPCAnimationSetData, Field(cGcNPCAnimationSetData, 0x320)
    ]
    StandingIPadAnimatons: Annotated[
        cGcNPCAnimationSetData, Field(cGcNPCAnimationSetData, 0x4B0)
    ]
    StandingStaffAnimatons: Annotated[
        cGcNPCAnimationSetData, Field(cGcNPCAnimationSetData, 0x640)
    ]


@partial_struct
class cGcNPCInteractionsDataTable(Structure):
    NPCInteractions: Annotated[
        basic.cTkDynamicArray[cGcNPCInteractionData],
        Field(basic.cTkDynamicArray[cGcNPCInteractionData], 0x0),
    ]


@partial_struct
class cGcNPCPropTable(Structure):
    Props: Annotated[cGcNPCPropInfo, Field(cGcNPCPropInfo, 0x0)]


@partial_struct
class cGcBiomeData(Structure):
    CloudSettings: Annotated[cGcBiomeCloudSettings, Field(cGcBiomeCloudSettings, 0x0)]
    FloraLifeLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x60)
    ]
    ColourPaletteFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)
    ]
    ExternalObjectLists: Annotated[
        basic.cTkDynamicArray[cGcExternalObjectListOptions],
        Field(basic.cTkDynamicArray[cGcExternalObjectListOptions], 0x90),
    ]
    FilterOptions: Annotated[
        basic.cTkDynamicArray[cGcScreenFilterOption],
        Field(basic.cTkDynamicArray[cGcScreenFilterOption], 0xA0),
    ]
    LegacyColourPaletteFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xB0)
    ]
    OverlayFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xC0)
    ]
    TextureFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xD0)
    ]
    TileTypesFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    WeatherOptions: Annotated[cGcWeatherWeightings, Field(cGcWeatherWeightings, 0xF0)]
    Terrain: Annotated[cGcTerrainControls, Field(cGcTerrainControls, 0x244)]
    Water: Annotated[cGcPlanetWaterData, Field(cGcPlanetWaterData, 0x2BC)]
    MiningSubstance1: Annotated[
        cGcMiningSubstanceData, Field(cGcMiningSubstanceData, 0x2CC)
    ]
    MiningSubstance2: Annotated[
        cGcMiningSubstanceData, Field(cGcMiningSubstanceData, 0x2D8)
    ]
    MiningSubstance3: Annotated[
        cGcMiningSubstanceData, Field(cGcMiningSubstanceData, 0x2E4)
    ]
    WeatherChangeTime: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x2F0)]
    DarknessVariation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2F8)]
    FuelMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2FC)]


@partial_struct
class cGcBiomeFileList(Structure):
    BiomeFiles: Annotated[cGcBiomeFileListOptions, Field(cGcBiomeFileListOptions, 0x0)]
    CommonExternalObjectLists: Annotated[
        basic.cTkDynamicArray[cGcExternalObjectListOptions],
        Field(basic.cTkDynamicArray[cGcExternalObjectListOptions], 0x110),
    ]
    OptionalExternalObjectLists: Annotated[
        basic.cTkDynamicArray[cGcExternalObjectFileList],
        Field(basic.cTkDynamicArray[cGcExternalObjectFileList], 0x120),
    ]
    ValidGiantPlanetBiome: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]], 0x130),
    ]
    ValidPurpleMoonBiome: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]], 0x140),
    ]
    ValidStartPlanetBiome: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBiomeType]], 0x150),
    ]


@partial_struct
class cGcSelectableObjectTable(Structure):
    Lists: Annotated[
        basic.cTkDynamicArray[cGcSelectableObjectList],
        Field(basic.cTkDynamicArray[cGcSelectableObjectList], 0x0),
    ]


@partial_struct
class cGcWeatherProperties(Structure):
    ExtremeColourModifiers: Annotated[
        cGcWeatherColourModifiers, Field(cGcWeatherColourModifiers, 0x0)
    ]
    ExtremeFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x2A0)]
    FlightFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x470)]
    Fog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x640)]
    StormFog: Annotated[cGcFogProperties, Field(cGcFogProperties, 0x810)]
    LightShaftProperties: Annotated[
        cGcLightShaftProperties, Field(cGcLightShaftProperties, 0x9E0)
    ]
    StormLightShaftProperties: Annotated[
        cGcLightShaftProperties, Field(cGcLightShaftProperties, 0xA10)
    ]
    HeavyAir: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0xA40),
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA50)]
    StormFilterOptions: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcScreenFilters]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcScreenFilters]], 0xA60),
    ]
    Storms: Annotated[
        basic.cTkDynamicArray[cGcStormProperties],
        Field(basic.cTkDynamicArray[cGcStormProperties], 0xA70),
    ]
    WeatherEffectsIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xA80),
    ]
    WeatherHazardsIds: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0xA90),
    ]
    LifeSupportDrain: Annotated[cGcHazardValues, Field(cGcHazardValues, 0xAA0)]
    Radiation: Annotated[cGcHazardValues, Field(cGcHazardValues, 0xAD0)]
    Sky: Annotated[cGcSkyProperties, Field(cGcSkyProperties, 0xB00)]
    SpookLevel: Annotated[cGcHazardValues, Field(cGcHazardValues, 0xB30)]
    Temperature: Annotated[cGcHazardValues, Field(cGcHazardValues, 0xB60)]
    Toxicity: Annotated[cGcHazardValues, Field(cGcHazardValues, 0xB90)]
    RainbowChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC0)]
    ExtremeWeatherChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD0)]
    HighStormsChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD4)]
    LowStormsChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBD8)]
    MaxStormFilterBlend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBDC)]
    OverrideRadiation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE0)]
    OverrideSpookLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE1)]
    OverrideTemperature: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE2)]
    OverrideToxicity: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE3)]
    UseLightShaftProperties: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE4)]
    UseStormLightShaftProperties: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE5)]
    UseWeatherFog: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE6)]
    UseWeatherSky: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE7)]


@partial_struct
class cGcCreatureRoleDescriptionTable(Structure):
    RoleDescription: Annotated[
        basic.cTkDynamicArray[cGcCreatureRoleDescription],
        Field(basic.cTkDynamicArray[cGcCreatureRoleDescription], 0x0),
    ]
    LifeLevel: Annotated[
        c_enum32[enums.cGcPlanetLife], Field(c_enum32[enums.cGcPlanetLife], 0x10)
    ]
    MaxScaleVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MinScaleVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18)]
    TileType: Annotated[
        c_enum32[enums.cGcTerrainTileType],
        Field(c_enum32[enums.cGcTerrainTileType], 0x1C),
    ]


@partial_struct
class cGcWeatherColourSettings(Structure):
    PerBiomeSettings: Annotated[
        cGcWeatherColourSettingList, Field(cGcWeatherColourSettingList, 0x0)
    ]
    DarkSettings: Annotated[
        cGcWeatherColourSettingList, Field(cGcWeatherColourSettingList, 0x110)
    ]
    GenericSettings: Annotated[
        cGcWeatherColourSettingList, Field(cGcWeatherColourSettingList, 0x120)
    ]


@partial_struct
class cGcWeatherEffectTable(Structure):
    Effects: Annotated[
        basic.cTkDynamicArray[cGcWeatherEffect],
        Field(basic.cTkDynamicArray[cGcWeatherEffect], 0x0),
    ]


@partial_struct
class cGcSpaceshipComponentData(Structure):
    Renderer: Annotated[cTkModelRendererData, Field(cTkModelRendererData, 0x0)]
    Cockpit: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xB0)]
    Class: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0xC0),
    ]
    DefaultHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC4)]
    FoVFixedDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    MaxHeadPitchDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    MaxHeadPitchUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0)]
    MaxHeadTurn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD4)]


@partial_struct
class cGcActionSetsHudLayers(Structure):
    ActionSetHudLayers: Annotated[
        basic.cTkDynamicArray[cGcActionSetHudLayer],
        Field(basic.cTkDynamicArray[cGcActionSetHudLayer], 0x0),
    ]


@partial_struct
class cGcInputBindings(Structure):
    InputBindingSets: Annotated[
        basic.cTkDynamicArray[cGcInputBindingSet],
        Field(basic.cTkDynamicArray[cGcInputBindingSet], 0x0),
    ]


@partial_struct
class cGcProductData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    DebrisFile: Annotated[cTkModelResource, Field(cTkModelResource, 0x10)]
    Hint: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x30)]
    PinObjective: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]
    PinObjectiveMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x70)
    ]
    PinObjectiveTip: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x90)
    ]
    HeroIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0xB0)]
    Icon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0xC8)]
    AltDescription: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xE0)
    ]
    AltRequirements: Annotated[
        basic.cTkDynamicArray[cGcTechnologyRequirement],
        Field(basic.cTkDynamicArray[cGcTechnologyRequirement], 0xF0),
    ]
    BuildableShipTechID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x100)]
    DeploysInto: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x110)]
    Description: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x120)
    ]
    GiveRewardOnSpecialPurchase: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x130)]
    GroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x140)]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x150)]
    Requirements: Annotated[
        basic.cTkDynamicArray[cGcTechnologyRequirement],
        Field(basic.cTkDynamicArray[cGcTechnologyRequirement], 0x160),
    ]
    Subtitle: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x170)
    ]
    Cost: Annotated[cGcItemPriceModifiers, Field(cGcItemPriceModifiers, 0x180)]
    BaseValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x194)]
    Category: Annotated[
        c_enum32[enums.cGcRealitySubstanceCategory],
        Field(c_enum32[enums.cGcRealitySubstanceCategory], 0x198),
    ]
    ChargeValue: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x19C)]
    CookingValue: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A0)]
    CorvettePartCategory: Annotated[
        c_enum32[enums.cGcCorvettePartCategory],
        Field(c_enum32[enums.cGcCorvettePartCategory], 0x1A4),
    ]
    CraftAmountMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A8)]
    CraftAmountStepSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1AC)]
    DefaultCraftAmount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1B0)]
    EconomyInfluenceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B4)]
    FoodBonusStat: Annotated[
        c_enum32[enums.cGcStatsTypes], Field(c_enum32[enums.cGcStatsTypes], 0x1B8)
    ]
    FoodBonusStatAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1BC)]
    FossilCategory: Annotated[
        c_enum32[enums.cGcFossilCategory],
        Field(c_enum32[enums.cGcFossilCategory], 0x1C0),
    ]
    Legality: Annotated[
        c_enum32[enums.cGcLegality], Field(c_enum32[enums.cGcLegality], 0x1C4)
    ]
    Level: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1C8)]
    NormalisedValueOffWorld: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC)]
    NormalisedValueOnWorld: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D0)]
    PinObjectiveScannableType: Annotated[
        c_enum32[enums.cGcScannerIconTypes],
        Field(c_enum32[enums.cGcScannerIconTypes], 0x1D4),
    ]
    Rarity: Annotated[
        c_enum32[enums.cGcRarity], Field(c_enum32[enums.cGcRarity], 0x1D8)
    ]
    RecipeCost: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1DC)]
    StackMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1E0)]
    TradeCategory: Annotated[
        c_enum32[enums.cGcTradeCategory], Field(c_enum32[enums.cGcTradeCategory], 0x1E4)
    ]
    Type: Annotated[
        c_enum32[enums.cGcProductCategory],
        Field(c_enum32[enums.cGcProductCategory], 0x1E8),
    ]

    class eWikiCategoryEnum(IntEnum):
        NotEnabled = 0x0
        Crafting = 0x1
        Tech = 0x2
        Construction = 0x3
        Trade = 0x4
        Curio = 0x5
        Cooking = 0x6

    WikiCategory: Annotated[
        c_enum32[eWikiCategoryEnum], Field(c_enum32[eWikiCategoryEnum], 0x1EC)
    ]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1F0)]
    NameLower: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x270)
    ]
    CanSendToOtherPlayers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F0)]
    Consumable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F1)]
    CookingIngredient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F2)]
    EggModifierIngredient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F3)]
    GoodForSelling: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F4)]
    IsCraftable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F5)]
    IsTechbox: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F6)]
    NeverPinnable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F7)]
    PinObjectiveEasyToRefine: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F8)]
    SpecificChargeOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2F9)]


@partial_struct
class cGcBaseBuildingPart(Structure):
    ID: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    StyleModels: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPartStyleModel],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPartStyleModel], 0x20),
    ]


@partial_struct
class cSimShape(Structure):
    ShapePoints: Annotated[
        basic.cTkDynamicArray[cShapePoint],
        Field(basic.cTkDynamicArray[cShapePoint], 0x0),
    ]
    NumSimI: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    NumSimJ: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x18)]
    NodeName: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x58)]
    SimPIsInUnwrappedFormat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x98)]
    WrapI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x99)]
    WrapJ: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x9A)]


@partial_struct
class cInfluencesOnMappedPoint(Structure):
    Influences: Annotated[
        basic.cTkDynamicArray[cMappingInfluence],
        Field(basic.cTkDynamicArray[cMappingInfluence], 0x0),
    ]


@partial_struct
class cTkVoxelGeneratorData(Structure):
    GridLayers: Annotated[cTkNoiseGridData, Field(cTkNoiseGridData, 0x0)]
    BaseSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0xAB0)]
    NoiseLayers: Annotated[cTkNoiseUberLayerData, Field(cTkNoiseUberLayerData, 0xAC0)]
    Features: Annotated[cTkNoiseFeatureData, Field(cTkNoiseFeatureData, 0xEE0)]
    Caves: Annotated[cTkNoiseCaveData, Field(cTkNoiseCaveData, 0x10A0)]
    BeachHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1120)]
    BuildingSmoothingHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1124)]
    BuildingSmoothingRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1128)]
    BuildingTextureRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x112C)]
    BuildingVoxelType: Annotated[
        c_enum32[enums.cTkNoiseVoxelTypeEnum],
        Field(c_enum32[enums.cTkNoiseVoxelTypeEnum], 0x1130),
    ]
    CaveRoofSmoothingDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1134)]
    MaximumSeaLevelCaveDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1138)]
    MinimumCaveDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x113C)]
    NoSeaBaseLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1140)]
    ResourceVoxelType: Annotated[
        c_enum32[enums.cTkNoiseVoxelTypeEnum],
        Field(c_enum32[enums.cTkNoiseVoxelTypeEnum], 0x1144),
    ]
    SeaLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1148)]
    WaterFadeInDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114C)]


@partial_struct
class cTkControllerSpecification(Structure):
    AxisImageLookup: Annotated[cTkAxisImageLookup, Field(cTkAxisImageLookup, 0x0)]
    ButtonImageLookup: Annotated[
        cTkButtonImageLookup, Field(cTkButtonImageLookup, 0x10)
    ]
    ChordsImageLookup: Annotated[
        cTkChordsImageLookup, Field(cTkChordsImageLookup, 0x20)
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30)]


@partial_struct
class cTkParticleBurstData(Structure):
    BurstAmount: Annotated[cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x0)]
    BurstInterval: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x38)
    ]
    LoopCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70)]


@partial_struct
class cTkParticleSize(Structure):
    GeneralSize: Annotated[cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x0)]
    PointAmplitudes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    PointRotations: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x78)]
    PointTimes: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8)]
    CurvePointCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xF8)]
    CurveStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    Max: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]
    Min: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    SketchCurveIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x108)]
    ManualSketchCurve: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x10C)]


@partial_struct
class cTkHeavyAirCollection(Structure):
    HeavyAirSystems: Annotated[
        basic.cTkDynamicArray[cTkHeavyAirData],
        Field(basic.cTkDynamicArray[cTkHeavyAirData], 0x0),
    ]


@partial_struct
class cTkIOSPerDeviceSettings(Structure):
    DevicePresets: Annotated[
        basic.cTkDynamicArray[cTkIOSDevicePreset],
        Field(basic.cTkDynamicArray[cTkIOSDevicePreset], 0x0),
    ]


@partial_struct
class cTkBlendTreeLibrary(Structure):
    Trees: Annotated[
        basic.cTkDynamicArray[cTkAnimBlendTree],
        Field(basic.cTkDynamicArray[cTkAnimBlendTree], 0x0),
    ]


@partial_struct
class cTkAnimationLibrary(Structure):
    Anims: Annotated[
        basic.cTkDynamicArray[cTkAnimationData],
        Field(basic.cTkDynamicArray[cTkAnimationData], 0x0),
    ]
    Overrides: Annotated[
        basic.cTkDynamicArray[cTkAnimationOverrideList],
        Field(basic.cTkDynamicArray[cTkAnimationOverrideList], 0x10),
    ]
    Trees: Annotated[cTkBlendTreeLibrary, Field(cTkBlendTreeLibrary, 0x20)]


@partial_struct
class cTkLayeredAnimStateMachineData(Structure):
    Id: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x0)]
    Layers: Annotated[
        basic.cTkDynamicArray[cTkAnimStateMachineData],
        Field(basic.cTkDynamicArray[cTkAnimStateMachineData], 0x20),
    ]
    Parameters: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x30),
    ]


@partial_struct
class cTkAnimStateMachineTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cTkLayeredAnimStateMachineData],
        Field(basic.cTkDynamicArray[cTkLayeredAnimStateMachineData], 0x0),
    ]


@partial_struct
class cTkAnimStateMachineLayerData(Structure):
    StateMachineContainer: Annotated[
        cTkAnimStateMachineData, Field(cTkAnimStateMachineData, 0x0)
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x48)]


@partial_struct
class cGcDifficultyStateData(Structure):
    Settings: Annotated[
        cGcDifficultySettingsData, Field(cGcDifficultySettingsData, 0x0)
    ]
    EasiestUsedPreset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x60),
    ]
    HardestUsedPreset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x64),
    ]
    Preset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x68),
    ]


@partial_struct
class cGcPulseEncounterSpawnFrigateFlyby(Structure):
    CommunicatorMessage: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x0)
    ]
    CommunicatorOSDLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x50)
    ]
    FlybyType: Annotated[
        c_enum32[enums.cGcFrigateFlybyType],
        Field(c_enum32[enums.cGcFrigateFlybyType], 0x70),
    ]
    RangeOverride: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74)]


@partial_struct
class cGcPulseEncounterSpawnTrader(Structure):
    HailingMessage: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x0)
    ]
    CustomShipResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x50)]
    CustomHailOSD: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x98)
    ]
    ShipTrailFactionOverride: Annotated[
        c_enum32[enums.cGcRealityCommonFactions],
        Field(c_enum32[enums.cGcRealityCommonFactions], 0xB8),
    ]
    UseCustomMessage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBC)]
    UseSentinelCrashedShipResource: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBD)]
    WarpOutOnCombatStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xBE)]


@partial_struct
class cGcShipDialogue(Structure):
    DialogueTree: Annotated[
        cGcPlayerCommunicatorMessageWeighted,
        Field(cGcPlayerCommunicatorMessageWeighted, 0x0),
    ]


@partial_struct
class cGcPlayerSquadronConfig(Structure):
    CombatFormationOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    CombatFormationOffsetThirdPerson: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x10)
    ]
    FormationOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    FormationOffsetThirdPerson: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x30)]
    PilotRankAttackDefinitions: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    RandomPilotNPCResources: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x80),
    ]
    RandomSpaceshipResources: Annotated[
        basic.cTkDynamicArray[cGcAISpaceshipModelData],
        Field(basic.cTkDynamicArray[cGcAISpaceshipModelData], 0x90),
    ]
    PilotRankTraitRanges: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xA0)]
    BreakFormationMaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC0)]
    BreakFormationMaxTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4)]
    BreakFormationMinTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8)]
    BreakFormationTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    CombatFormationOffsetCylinderHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD0)
    ]
    CombatFormationOffsetCylinderHeightThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD4)
    ]
    CombatFormationOffsetCylinderLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xD8)
    ]
    CombatFormationOffsetCylinderLengthThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xDC)
    ]
    CombatFormationOffsetCylinderWidth: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE0)
    ]
    CombatFormationOffsetCylinderWidthThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE4)
    ]
    FormationOffsetCylinderHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xE8)
    ]
    FormationOffsetCylinderHeightThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xEC)
    ]
    FormationOffsetCylinderLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF0)
    ]
    FormationOffsetCylinderLengthThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF4)
    ]
    FormationOffsetCylinderWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    FormationOffsetCylinderWidthThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFC)
    ]
    FormationOffsetRotationMaxSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x100)
    ]
    FormationOffsetRotationPeriod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x104)
    ]
    FormationOffsetZOffsetVarianceMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x108)
    ]
    FormationOffsetZOffsetVarianceMaxSpeedScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10C)
    ]
    FormationOffsetZOffsetVarianceMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x110)
    ]
    FormationOffsetZOffsetVarianceMinSpeedScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x114)
    ]
    FormationOffsetZOffsetVariancePeriod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x118)
    ]
    JoinFormationArrivalTolerance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11C)
    ]
    JoinFormationBoostAlignStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x120)
    ]
    JoinFormationBoostMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124)]
    JoinFormationBoostMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128)]
    JoinFormationBoostMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C)]
    JoinFormationBrakeAlignStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x130)
    ]
    JoinFormationBrakeDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x134)]
    JoinFormationMaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x138)]
    JoinFormationMaxSpeedBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C)]
    JoinFormationMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    JoinFormationOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x144)]
    LeavingForceScaleDistMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    LeavingForceScaleDistMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    LeavingFromPlanetOrbitMaxSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x150)
    ]
    LeavingFromPlanetOrbitMinIncline: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x154)
    ]
    LeavingFromPlanetOrbitWarpDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x158)
    ]
    LeavingFromSpaceAngleFromFwdMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15C)
    ]
    LeavingFromSpaceAngleFromFwdMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x160)
    ]
    LeavingFromSpaceWarpDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x164)]
    LeavingMaxForceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168)]
    MaintainFormationAlignMaxDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C)
    ]
    MaintainFormationAlignMaxSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x170)
    ]
    MaintainFormationAlignMinDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x174)
    ]
    MaintainFormationAlignMinSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x178)
    ]
    MaintainFormationInCombatMaxTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17C)
    ]
    MaintainFormationInCombatMinTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x180)
    ]
    MaintainFormationLockAlignStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x184)
    ]
    MaintainFormationLockRollAlignStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x188)
    ]
    MaintainFormationLockStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18C)
    ]
    MaintainFormationLockStrengthBoosting: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x190)
    ]
    MaintainFormationLockStrengthCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x194)
    ]
    MaintainFormationMaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198)]
    MaintainFormationPostBoostSmoothTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19C)
    ]
    MaintainFormationSharpTurnMinSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A0)
    ]
    MaintainFormationSharpTurnMinSpeedForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A4)
    ]
    MaintainFormationStartSmoothTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A8)
    ]
    MaintainFormationStrengthVariance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AC)
    ]
    MaxShipsInFormationDuringCombat: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1B0)
    ]
    MinShipsInFormationDuringCombat: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1B4)
    ]
    MinSpeedForSummonInMoveDir: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B8)]
    MinTimeBetweenFormationBreaks: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1BC)
    ]
    OutOfFormationMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C0)]
    OutOfFormationMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C4)]
    SummonArriveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C8)]
    SummonArriveTimeIntervalMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1CC)]
    SummonArriveTimeIntervalMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D0)]
    SummonInFormationFwdOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D4)]
    SummonLimitTurningTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1D8)]
    SummonPlanetDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1DC)]
    SummonPlanetPitchMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E0)]
    SummonPlanetPitchMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E4)]
    SummonPlanetYawMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1E8)]
    SummonPlanetYawMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1EC)]
    SummonSpaceSpawnAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F0)]
    SummonSpaceSpawnAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F4)]
    SummonSpaceSpawnRangeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1F8)]
    SummonSpaceSpawnRangeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1FC)]
    SummonStartSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x200)]
    SquadName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x204)
    ]
    SummonInFormation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224)]


@partial_struct
class cGcPlanetWeatherData(Structure):
    HeavyAir: Annotated[cGcPlanetHeavyAirData, Field(cGcPlanetHeavyAirData, 0x0)]

    class eAtmosphereTypeEnum(IntEnum):
        None_ = 0x0
        Normal = 0x1

    AtmosphereType: Annotated[
        c_enum32[eAtmosphereTypeEnum], Field(c_enum32[eAtmosphereTypeEnum], 0x150)
    ]
    DayColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x154)]
    DuskColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x158)]
    NightColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x15C)]
    RainbowType: Annotated[
        c_enum32[enums.cGcRainbowType], Field(c_enum32[enums.cGcRainbowType], 0x160)
    ]
    ScreenFilter: Annotated[
        c_enum32[enums.cGcScreenFilters], Field(c_enum32[enums.cGcScreenFilters], 0x164)
    ]

    class eStormFrequencyEnum(IntEnum):
        None_ = 0x0
        Low = 0x1
        High = 0x2
        Always = 0x3

    StormFrequency: Annotated[
        c_enum32[eStormFrequencyEnum], Field(c_enum32[eStormFrequencyEnum], 0x168)
    ]
    StormScreenFilter: Annotated[
        c_enum32[enums.cGcScreenFilters], Field(c_enum32[enums.cGcScreenFilters], 0x16C)
    ]

    class eWeatherIntensityEnum(IntEnum):
        Default = 0x0
        Extreme = 0x1

    WeatherIntensity: Annotated[
        c_enum32[eWeatherIntensityEnum], Field(c_enum32[eWeatherIntensityEnum], 0x170)
    ]
    WeatherType: Annotated[
        c_enum32[enums.cGcWeatherOptions],
        Field(c_enum32[enums.cGcWeatherOptions], 0x174),
    ]


@partial_struct
class cGcProjectileData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ImpactOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    LightColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    Model: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x30)]
    CombatEffectsOnImpact: Annotated[
        basic.cTkDynamicArray[cGcImpactCombatEffectData],
        Field(basic.cTkDynamicArray[cGcImpactCombatEffectData], 0x78),
    ]
    CriticalImpact: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x88)]
    DefaultImpact: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x98)]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA8)]
    Impacts: Annotated[
        basic.cTkDynamicArray[cGcProjectileImpactData],
        Field(basic.cTkDynamicArray[cGcProjectileImpactData], 0xB8),
    ]
    PlayerDamage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xC8)]
    CustomBulletData: Annotated[
        cGcProjectileLineData, Field(cGcProjectileLineData, 0xD8)
    ]

    class eBehaviourFlagsEnum(IntEnum):
        empty = 0x0
        DestroyTerrain = 0x1
        DestroyAsteroids = 0x2
        GatherResources = 0x4
        Homing = 0x8
        HomingLaser = 0x10
        ScareCreatures = 0x20
        ExplosionForce = 0x40

    BehaviourFlags: Annotated[
        c_enum32[eBehaviourFlagsEnum], Field(c_enum32[eBehaviourFlagsEnum], 0x100)
    ]
    BounceDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    BounceFinalStopTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    BounceMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    CapsuleHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    ChargedFireAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x114),
    ]

    class eClassEnum(IntEnum):
        Player = 0x0
        PlayerShip = 0x1
        Ship = 0x2
        Robot = 0x3

    Class: Annotated[c_enum32[eClassEnum], Field(c_enum32[eClassEnum], 0x118)]
    CriticalHitModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C)]
    DamageImpactMergeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    DamageImpactMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124)]
    DamageImpactTimeBetweenNumbers: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x128)
    ]
    DamageType: Annotated[
        c_enum32[enums.cGcDamageType], Field(c_enum32[enums.cGcDamageType], 0x12C)
    ]
    DefaultBounces: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x130)]
    DefaultDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x134)]
    DefaultSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x138)]
    DroneImpulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C)]
    ExtraPlayerDamage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140)]
    FireAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x144),
    ]
    Gravity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x148)]
    HomingDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    HomingDelayAcceleration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150)]
    HomingDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154)]
    Life: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x158)]
    MaxHomingAcceleration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C)]
    MaxHomingTargetAngleLower: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160)]
    MaxHomingTargetAngleLowerDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x164)
    ]
    MaxHomingTargetAngleUpper: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x168)]
    MaxHomingTargetAngleUpperDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16C)
    ]
    Offset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x170)]
    OverheatAudioEvent: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x174),
    ]
    PhysicsPush: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x178)]
    PiercingDamagePercentage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C)]
    PusherForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x180)]
    PusherImpactDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x184)]
    PusherImpactForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x188)]
    PusherImpactRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18C)]
    PusherRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x190)]
    Radius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x194)]
    RagdollPush: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198)]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C)]
    ApplyCombatLevelMultipliers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A0)]
    HitOnBounce: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A1)]
    IsAutonomous: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A2)]
    OverrideLightColour: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A3)]
    ShootableCanOverrideImpact: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A4)]
    UseCustomBulletData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A5)]
    UseDamageNumberData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A6)]
    UsePersistentAudio: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A7)]
    UsePusherForImpact: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A8)]
    UsePusherForProjectile: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1A9)]


@partial_struct
class cGcLaserBeamData(Structure):
    Colour: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    ImpactOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    LightColour: Annotated[basic.Colour, Field(basic.Colour, 0x20)]
    BeamCoreFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    BeamFile: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)]
    BeamTipFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    CombatEffectDamageMultipliers: Annotated[
        basic.cTkDynamicArray[cGcCombatEffectDamageMultiplier],
        Field(basic.cTkDynamicArray[cGcCombatEffectDamageMultiplier], 0x60),
    ]
    CombatEffectsOnImpact: Annotated[
        basic.cTkDynamicArray[cGcImpactCombatEffectData],
        Field(basic.cTkDynamicArray[cGcImpactCombatEffectData], 0x70),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x80)]
    ImpactEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    Impacts: Annotated[
        basic.cTkDynamicArray[cGcProjectileImpactData],
        Field(basic.cTkDynamicArray[cGcProjectileImpactData], 0xA0),
    ]
    PlayerDamage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    AudioOverheat: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xC0),
    ]
    AudioStart: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xC4),
    ]
    AudioStop: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0xC8),
    ]
    CriticalHitModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC)]
    DamageType: Annotated[
        c_enum32[enums.cGcDamageType], Field(c_enum32[enums.cGcDamageType], 0xD0)
    ]
    DefaultDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xD4)]
    DroneImpulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD8)]
    EndTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xDC)]
    ExtraPlayerDamage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE0)]
    HitRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE4)]
    HitWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xE8)]
    ImpactPusherPulseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xEC)]
    ImpactPusherPulseSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF0)]
    ImpactPusherRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4)]
    ImpactPusherWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8)]
    LightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC)]
    MiningHitRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x100)]
    PhysicsPush: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104)]
    PiercingDamagePercentage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108)]
    PulseAmplitude: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C)]
    PulseFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    RagdollPush: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114)]
    Speed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118)]
    StartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C)]
    Width: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120)]
    ApplyCombatLevelMultipliers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x124)]
    CanMine: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x125)]
    CreatesImpactPusher: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x126)]
    HasLight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x127)]
    SingleHit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x128)]


@partial_struct
class cGcNPCDebugSpawnData(Structure):
    Facing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    Position: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    Up: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x20)]
    Pet: Annotated[cGcPetData, Field(cGcPetData, 0x30)]
    PetAccessoryCustomisation: Annotated[
        cGcPetCustomisationData, Field(cGcPetCustomisationData, 0x238)
    ]
    PropResource: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x370)]
    Idles: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x3B8),
    ]
    PropSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x3C8)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x3D8)]
    Waypoints: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x3E8),
    ]

    class eDebugNPCBehaviourEnum(IntEnum):
        None_ = 0x0
        Fishing = 0x1

    DebugNPCBehaviour: Annotated[
        c_enum32[eDebugNPCBehaviourEnum], Field(c_enum32[eDebugNPCBehaviourEnum], 0x3F8)
    ]
    InitialDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3FC)]
    PetFollowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x400)]
    Race: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x404)
    ]
    AddPetAccessories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x408)]
    FollowWaypoints: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x409)]
    PlayIdles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40A)]
    RidePet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40B)]
    Run: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40C)]


@partial_struct
class cGcMissionSequenceFish(Structure):
    TargetFishInfo: Annotated[cGcMissionFishData, Field(cGcMissionFishData, 0x0)]
    DebugText: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    FormatStatIntoText: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Message: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)]
    MessageAvailableNearby: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    MessageNoFishLaserEquipped: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    MessageNoFishLaserInstalled: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)
    ]
    MessageNoneInSystem: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x90)
    ]
    Amount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xA0)]
    DepthToFormatIntoText: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4)]
    FromNow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA8)]
    Multiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA9)]
    NeverCompleteSequence: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAA)]
    QualityTestIsEqualOrGreater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAB)]
    SizeTestIsEqualOrGreater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAC)]
    TakeAmountFromDefaultNumber: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAD)]
    TakeAmountFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAE)]
    TakeDepthFromSeasonData: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xAF)]


@partial_struct
class cGcScanEventData(Structure):
    SolarSystemAttributes: Annotated[
        cGcScanEventSolarSystemLookup, Field(cGcScanEventSolarSystemLookup, 0x0)
    ]
    SolarSystemAttributesFallback: Annotated[
        cGcScanEventSolarSystemLookup, Field(cGcScanEventSolarSystemLookup, 0xA0)
    ]
    ResourceOverride: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x140)]
    ForceInteraction: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x188)]
    MustMatchStoryUtilityPuzzle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1A8)
    ]
    Name: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x1C8)]
    NextOption: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x1E8)]
    PlanetLabelText: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x208)
    ]
    SurveyDiscoveryOSDMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x228)
    ]
    SurveyHUDName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x248)
    ]
    MarkerIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x268)]
    TriggerActions: Annotated[cGcScanEventTriggers, Field(cGcScanEventTriggers, 0x280)]
    ForceOverrideEncounter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x298)]
    HasReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2A8)]
    InterstellarOSDMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x2B8)
    ]
    MarkerLabel: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x2C8)
    ]
    MissionMessageOnInteract: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2D8)]
    OSDMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x2E8)
    ]
    ReplacementMaintData: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2F8)]
    TooltipMessage: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x308)
    ]
    UAsList: Annotated[
        basic.cTkDynamicArray[basic.VariableSizeString],
        Field(basic.cTkDynamicArray[basic.VariableSizeString], 0x318),
    ]

    class eBuildingLocationEnum(IntEnum):
        Nearest = 0x0
        AllNearest = 0x1
        Random = 0x2
        RandomOnNearPlanet = 0x3
        RandomOnFarPlanet = 0x4
        PlanetSearch = 0x5
        PlayerSettlement = 0x6

    BuildingLocation: Annotated[
        c_enum32[eBuildingLocationEnum], Field(c_enum32[eBuildingLocationEnum], 0x328)
    ]
    BuildingPreventionRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x32C)]

    class eEventEndTypeEnum(IntEnum):
        None_ = 0x0
        Proximity = 0x1
        Interact = 0x2
        EnterBuilding = 0x3
        TimedInteract = 0x4

    EventEndType: Annotated[
        c_enum32[eEventEndTypeEnum], Field(c_enum32[eEventEndTypeEnum], 0x330)
    ]

    class eEventPriorityEnum(IntEnum):
        Regular = 0x0
        High = 0x1

    EventPriority: Annotated[
        c_enum32[eEventPriorityEnum], Field(c_enum32[eEventPriorityEnum], 0x334)
    ]

    class eEventStartTypeEnum(IntEnum):
        None_ = 0x0
        Special = 0x1
        Discovered = 0x2
        Timer = 0x3
        ObjectScan = 0x4
        LeaveBuilding = 0x5

    EventStartType: Annotated[
        c_enum32[eEventStartTypeEnum], Field(c_enum32[eEventStartTypeEnum], 0x338)
    ]
    ForceInteractionType: Annotated[
        c_enum32[enums.cGcInteractionType],
        Field(c_enum32[enums.cGcInteractionType], 0x33C),
    ]
    IconTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x340)]
    MessageAudio: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x344),
    ]
    MessageDisplayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x348)]
    MessageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x34C)]
    MissionMarkerHighlightStyleOverride: Annotated[
        c_enum32[enums.cGcScannerIconHighlightTypes],
        Field(c_enum32[enums.cGcScannerIconHighlightTypes], 0x350),
    ]
    OverrideInteractionRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x354)
    ]
    RequireInteractionRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x358)
    ]

    class eSearchTypeEnum(IntEnum):
        Any = 0x0
        AnyShelter = 0x1
        AnyNPC = 0x2
        FindBuildingClass = 0x3
        SpaceStation = 0x4
        SpaceAnomaly = 0x5
        Atlas = 0x6
        Freighter = 0x7
        FreighterBase = 0x8
        ExternalPlanetBase = 0x9
        PlanetBaseTerminal = 0xA
        Expedition = 0xB
        ExpeditionLeader = 0xC
        TutorialShelter = 0xD
        MPMissionFreighter = 0xE
        Nexus = 0xF
        InitialDistressSignal = 0x10
        SpaceMarker = 0x11
        NexusEggMachine = 0x12
        PhotoTarget = 0x13
        SettlementConstruction = 0x14
        UnownedSettlement = 0x15
        NPC_HideOut = 0x16
        FriendlyDrone = 0x17
        AnyRobotSite = 0x18
        UnownedSettlement_Builders = 0x19
        OwnedSettlementHub = 0x1A

    SearchType: Annotated[
        c_enum32[eSearchTypeEnum], Field(c_enum32[eSearchTypeEnum], 0x35C)
    ]

    class eSolarSystemLocationEnum(IntEnum):
        Local = 0x0
        Near = 0x1
        LocalOrNear = 0x2
        NearWithNoExpeditions = 0x3
        FromList = 0x4
        SeasonParty = 0x5
        FirstPurpleSystemUA = 0x6

    SolarSystemLocation: Annotated[
        c_enum32[eSolarSystemLocationEnum],
        Field(c_enum32[eSolarSystemLocationEnum], 0x360),
    ]
    SpecificBuildingClass: Annotated[
        c_enum32[enums.cGcBuildingClassification],
        Field(c_enum32[enums.cGcBuildingClassification], 0x364),
    ]
    StartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x368)]
    SurveyDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x36C)]
    TechShopType: Annotated[
        c_enum32[enums.cGcTechnologyCategory],
        Field(c_enum32[enums.cGcTechnologyCategory], 0x370),
    ]
    TooltipTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x374)]
    AllowFriendsBases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x378)]
    AllowOverriddenBuildings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x379)]
    AlwaysShow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x37A)]
    BlockStartedOnUseEvents: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x37B)]
    CanEndFromOutsideMission: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x37C)]
    ClearForcedInteractionOnCompletion: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x37D)
    ]
    DisableMultiplayerSync: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x37E)]
    ForceBroken: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x37F)]
    ForceFixed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x380)]
    ForceOverridesAll: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x381)]
    ForceReplaceStoryPortalSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x382)]
    ForceResetPortal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x383)]
    ForceRestartInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x384)]
    ForceWideRandom: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x385)]
    IsCommunityPortalOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x386)]
    MustFindSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x387)]
    NeverShow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x388)]
    NPCReactsToPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x389)]
    ReplaceEventIfAlreadyActive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38A)]
    ShowEndTooltip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38B)]
    ShowOnlyIfSequenceTarget: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38C)]
    TargetMustMatchMissionSeed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38D)]
    TooltipRepeats: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x38E)]
    UseBuildingFromRendezvousStage: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x38F)
    ]
    UseMissionTradingDataOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x390)]
    UseSeasonDataAsInteraction: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x391)]


@partial_struct
class cGcDebugScene(Structure):
    PlanetPositions: Annotated[cGcDebugPlanetPos, Field(cGcDebugPlanetPos, 0x0)]
    DebugDroneSpawn: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xC0)]
    DebugDroneTarget: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xD0)]
    DebugFlybyDir: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xE0)]
    DebugFlybyTarget: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xF0)]
    DebugFrigateFlybySpawnPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x100)]
    DebugQueenSpawn: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x110)]
    DebugShipSpawnFacing: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x120)]
    DebugShipSpawnPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x130)]
    DebugShipSpawnUp: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x140)]
    DebugSpaceBattleSpawnPosOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x150)
    ]
    DebugSpaceBattleSpawnRotOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x160)
    ]
    DebugWalkerSpawn: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x170)]
    DebugWalkerTarget: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x180)]
    ForcedSunPosition: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x190)]
    SandwormSpawnPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x1A0)]
    Pets: Annotated[cGcPetData, Field(cGcPetData, 0x1B0)]
    PetAccessoryCustomisation: Annotated[
        cGcPetCustomisationData, Field(cGcPetCustomisationData, 0x2640)
    ]
    VehicleCameraOverride: Annotated[
        cGcCameraFollowSettings, Field(cGcCameraFollowSettings, 0x3C30)
    ]
    BackgroundSpaceEncounter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x4330)]
    DebugCameraPaths: Annotated[
        basic.cTkDynamicArray[cGcDebugCamera],
        Field(basic.cTkDynamicArray[cGcDebugCamera], 0x4340),
    ]
    DebugCreatureSpawns: Annotated[
        basic.cTkDynamicArray[cGcCreatureDebugSpawnData],
        Field(basic.cTkDynamicArray[cGcCreatureDebugSpawnData], 0x4350),
    ]
    DebugDecorations: Annotated[
        basic.cTkDynamicArray[cGcDebugObjectDecoration],
        Field(basic.cTkDynamicArray[cGcDebugObjectDecoration], 0x4360),
    ]
    DebugEnemyShipSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipDebugSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipDebugSpawnData], 0x4370),
    ]
    DebugExperienceCamShake: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x4380)]
    DebugFlybySeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x4390)]
    DebugMechSpawns: Annotated[
        basic.cTkDynamicArray[cGcMechDebugSpawnData],
        Field(basic.cTkDynamicArray[cGcMechDebugSpawnData], 0x43A0),
    ]
    DebugNPCSpawns: Annotated[
        basic.cTkDynamicArray[cGcNPCDebugSpawnData],
        Field(basic.cTkDynamicArray[cGcNPCDebugSpawnData], 0x43B0),
    ]
    DebugShipPaths: Annotated[
        basic.cTkDynamicArray[cGcDebugShipTravelLine],
        Field(basic.cTkDynamicArray[cGcDebugShipTravelLine], 0x43C0),
    ]
    DebugShipSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipDebugSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipDebugSpawnData], 0x43D0),
    ]
    DefaultNPCIdles: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x43E0),
    ]
    GhostShipReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x43F0)]
    LivingFrigateReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x4400)]
    NormandyReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x4410)]
    PetRideWayPoints: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x4420),
    ]
    PulseEncounter: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x4430)]
    TriggerActions: Annotated[
        basic.cTkDynamicArray[cGcExperienceDebugTriggerInput],
        Field(basic.cTkDynamicArray[cGcExperienceDebugTriggerInput], 0x4440),
    ]
    CloudStratosphereWindOffset: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0x4450)
    ]
    CloudWindOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x4458)]
    CameraSpinDistanceOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4460)]
    CameraSpinRevolutions: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4464)]
    CameraSpinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4468)]
    CameraSpinVerticalOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x446C)]
    CloudAnimScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4470)]
    CloudCover: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4474)]
    CustomShipDockedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4478)]
    DebugDroneType: Annotated[
        c_enum32[enums.cGcSentinelTypes],
        Field(c_enum32[enums.cGcSentinelTypes], 0x447C),
    ]
    DebugFlybyRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4480)]
    DebugFrigateFlybyHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x4484)
    ]
    DebugFrigateFlybyRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4488)]
    DebugNumDrones: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x448C)]
    FlyCamSmoothFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4490)]
    FlyCamSpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4494)]
    NPCIdleMaxDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4498)]
    NPCIdleMinDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x449C)]
    PetForceBehaviour: Annotated[
        c_enum32[enums.cGcPetBehaviours],
        Field(c_enum32[enums.cGcPetBehaviours], 0x44A0),
    ]
    PetRideIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44A4)]
    PlayerWalkSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44A8)]
    ShipSpawningMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x44AC)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B0)]
    AllowOverrideWaterSettings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B1)]
    AutoCreateDecorations: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B2)]
    AutoSave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B3)]
    BusyShips: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B4)]
    CameraSpinEasing: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x44B5)
    ]
    ControlClouds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B6)]
    DebugDraw: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B7)]
    DebugDroneScanPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B8)]
    FlyCamSmooth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44B9)]
    ForcePlayerWalk: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44BA)]
    ForceSunPosition: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44BB)]
    LoadPetsFromDebugScene: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44BC)]
    PulseEncountersAlwaysPersist: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44BD)]
    ResetMoodsOnSummon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44BE)]
    ShowAccessoryMoods: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44BF)]
    UpdatePetMoods: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x44C0)]


@partial_struct
class cGcSettlementMaterialTable(Structure):
    UpgradeLevels: Annotated[
        cGcSettlementMaterialData, Field(cGcSettlementMaterialData, 0x0)
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x100)]
    RelativeProbability: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110)]
    Style: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0x114),
    ]


@partial_struct
class cGcSettlementColourUpgradeData(Structure):
    BuildingPalettes: Annotated[
        basic.cTkDynamicArray[cGcBuildingColourPalette],
        Field(basic.cTkDynamicArray[cGcBuildingColourPalette], 0x0),
    ]
    DefaultPalettes: Annotated[
        basic.cTkDynamicArray[cGcWeightedColourId],
        Field(basic.cTkDynamicArray[cGcWeightedColourId], 0x10),
    ]


@partial_struct
class cGcSettlementColourUpgradeTable(Structure):
    UpgradeLevels: Annotated[
        cGcSettlementColourUpgradeData, Field(cGcSettlementColourUpgradeData, 0x0)
    ]
    Name: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x60)]
    Style: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0x70),
    ]


@partial_struct
class cGcEnvironmentSpawnData(Structure):
    Creatures: Annotated[
        basic.cTkDynamicArray[cGcCreatureSpawnData],
        Field(basic.cTkDynamicArray[cGcCreatureSpawnData], 0x0),
    ]
    DetailObjects: Annotated[
        basic.cTkDynamicArray[cGcObjectSpawnData],
        Field(basic.cTkDynamicArray[cGcObjectSpawnData], 0x10),
    ]
    DistantObjects: Annotated[
        basic.cTkDynamicArray[cGcObjectSpawnData],
        Field(basic.cTkDynamicArray[cGcObjectSpawnData], 0x20),
    ]
    Landmarks: Annotated[
        basic.cTkDynamicArray[cGcObjectSpawnData],
        Field(basic.cTkDynamicArray[cGcObjectSpawnData], 0x30),
    ]
    Objects: Annotated[
        basic.cTkDynamicArray[cGcObjectSpawnData],
        Field(basic.cTkDynamicArray[cGcObjectSpawnData], 0x40),
    ]
    SelectableObjects: Annotated[
        basic.cTkDynamicArray[cGcSelectableObjectSpawnList],
        Field(basic.cTkDynamicArray[cGcSelectableObjectSpawnList], 0x50),
    ]


@partial_struct
class cGcPlanetBuildingData(Structure):
    Buildings: Annotated[
        basic.cTkDynamicArray[cGcBuildingSpawnData],
        Field(basic.cTkDynamicArray[cGcBuildingSpawnData], 0x0),
    ]
    BuildingSlots: Annotated[
        basic.cTkDynamicArray[cGcBuildingSpawnSlot],
        Field(basic.cTkDynamicArray[cGcBuildingSpawnSlot], 0x10),
    ]
    OverrideBuildings: Annotated[
        basic.cTkDynamicArray[cGcBuildingOverrideData],
        Field(basic.cTkDynamicArray[cGcBuildingOverrideData], 0x20),
    ]
    PlanetUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x30)]
    PlanetRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x38)]
    Spacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3C)]
    VoronoiPointDivisions: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x40)]
    VoronoiPointSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x44)]
    VoronoiSectorSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x48)]
    InitialBuildingsPlaced: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4C)]
    IsPrime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4D)]
    IsWaterworld: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4E)]


@partial_struct
class cGcObjectSpawnDataArray(Structure):
    Objects: Annotated[
        basic.cTkDynamicArray[cGcObjectSpawnData],
        Field(basic.cTkDynamicArray[cGcObjectSpawnData], 0x0),
    ]
    MaxObjectsToSpawn: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    TileType: Annotated[
        c_enum32[enums.cGcTerrainTileType],
        Field(c_enum32[enums.cGcTerrainTileType], 0x14),
    ]


@partial_struct
class cGcCreatureRoleData(Structure):
    Info: Annotated[cGcCreatureInfo, Field(cGcCreatureInfo, 0x0)]
    Description: Annotated[
        cGcCreatureRoleDescription, Field(cGcCreatureRoleDescription, 0x518)
    ]
    Filter: Annotated[basic.TkID0x20, Field(basic.TkID0x20, 0x580)]
    CreatureId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x5A0)]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x5B0)]
    Diet: Annotated[
        c_enum32[enums.cGcCreatureDiet], Field(c_enum32[enums.cGcCreatureDiet], 0x5C0)
    ]
    GroupsPerSquareKm: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x5C4)]
    HemiSphere: Annotated[
        c_enum32[enums.cGcCreatureHemiSphere],
        Field(c_enum32[enums.cGcCreatureHemiSphere], 0x5C8),
    ]
    TileType: Annotated[
        c_enum32[enums.cGcTerrainTileType],
        Field(c_enum32[enums.cGcTerrainTileType], 0x5CC),
    ]
    Type: Annotated[
        c_enum32[enums.cGcCreatureTypes], Field(c_enum32[enums.cGcCreatureTypes], 0x5D0)
    ]


@partial_struct
class cGcCreatureRoleDataTable(Structure):
    AvailableRoles: Annotated[
        basic.cTkDynamicArray[cGcCreatureRoleData],
        Field(basic.cTkDynamicArray[cGcCreatureRoleData], 0x0),
    ]
    MaxProportionFlying: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10)]
    SandWormFrequency: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    HasSandWorms: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x18)]


@partial_struct
class cGcCustomisationDescriptorGroupOptions(Structure):
    GroupTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    DescriptorGroupOptions: Annotated[
        basic.cTkDynamicArray[cGcCustomisationDescriptorGroupOption],
        Field(basic.cTkDynamicArray[cGcCustomisationDescriptorGroupOption], 0x20),
    ]
    PrerequisiteGroup: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x30),
    ]
    FirstOptionIsEmpty: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x40)]


@partial_struct
class cGcTechnologyTypes(Structure):
    Technology: Annotated[
        basic.cTkDynamicArray[cGcTechnology],
        Field(basic.cTkDynamicArray[cGcTechnology], 0x0),
    ]


@partial_struct
class cGcSettlementPerkData(Structure):
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    Name: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20)]
    AssociatedBuildings: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]], 0x40),
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    StatChanges: Annotated[
        basic.cTkDynamicArray[cGcSettlementStatChange],
        Field(basic.cTkDynamicArray[cGcSettlementStatChange], 0x60),
    ]
    IsBlessing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x70)]
    IsJob: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x71)]
    IsNegative: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x72)]
    IsProc: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x73)]
    IsStarter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x74)]


@partial_struct
class cGcSettlementStatChangeArray(Structure):
    Stats: Annotated[
        basic.cTkDynamicArray[cGcSettlementStatChange],
        Field(basic.cTkDynamicArray[cGcSettlementStatChange], 0x0),
    ]


@partial_struct
class cGcRewardSecondaryInteractionOptions(Structure):
    Options: Annotated[
        basic.cTkDynamicArray[cGcAlienPuzzleOption],
        Field(basic.cTkDynamicArray[cGcAlienPuzzleOption], 0x0),
    ]


@partial_struct
class cGcRewardDamage(Structure):
    CombatEffects: Annotated[
        basic.cTkDynamicArray[cGcImpactCombatEffectData],
        Field(basic.cTkDynamicArray[cGcImpactCombatEffectData], 0x0),
    ]
    PlayerDamage: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]


@partial_struct
class cGcProceduralProductData(Structure):
    Product: Annotated[cGcProductData, Field(cGcProductData, 0x0)]
    ProceduralData: Annotated[
        cGcProductProceduralOnlyData, Field(cGcProductProceduralOnlyData, 0x300)
    ]
    NameGeneratorBase: Annotated[
        cGcNameGeneratorWord, Field(cGcNameGeneratorWord, 0x450)
    ]
    NameGeneratorWordList: Annotated[
        basic.cTkDynamicArray[cGcProceduralProductWord],
        Field(basic.cTkDynamicArray[cGcProceduralProductWord], 0x478),
    ]
    PerBiomeDropWeights: Annotated[cGcBiomeList, Field(cGcBiomeList, 0x488)]
    NameGeneratorLegacyRolls: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x510)]
    DeployableProductID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x514)
    ]
    RecordsStat: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x534)]


@partial_struct
class cGcMaintenanceOverride(Structure):
    Data: Annotated[
        cGcMaintenanceComponentData, Field(cGcMaintenanceComponentData, 0x0)
    ]
    ID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x410)]


@partial_struct
class cGcDeathStateData(Structure):
    AuthorFont: Annotated[cGcTextPreset, Field(cGcTextPreset, 0x0)]
    QuoteFont: Annotated[cGcTextPreset, Field(cGcTextPreset, 0x30)]
    ReasonFont: Annotated[cGcTextPreset, Field(cGcTextPreset, 0x60)]
    Quotes: Annotated[
        basic.cTkDynamicArray[cGcDeathQuote],
        Field(basic.cTkDynamicArray[cGcDeathQuote], 0x90),
    ]


@partial_struct
class cGcMessageProjectileImpact(Structure):
    PosLocal: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x0)]
    PosOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x10)]
    CombatEffects: Annotated[
        basic.cTkDynamicArray[cGcImpactCombatEffectData],
        Field(basic.cTkDynamicArray[cGcImpactCombatEffectData], 0x20),
    ]
    DamageMultipliers: Annotated[
        basic.cTkDynamicArray[cGcCombatEffectDamageMultiplier],
        Field(basic.cTkDynamicArray[cGcCombatEffectDamageMultiplier], 0x30),
    ]
    Id: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x40)]
    Damage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x50)]

    class eHitTypeEnum(IntEnum):
        Shootable = 0x0
        Terrain = 0x1
        Generic = 0x2

    HitType: Annotated[c_enum32[eHitTypeEnum], Field(c_enum32[eHitTypeEnum], 0x54)]
    Node: Annotated[basic.GcNodeID, Field(basic.GcNodeID, 0x58)]
    Type: Annotated[
        c_enum32[enums.cGcDamageType], Field(c_enum32[enums.cGcDamageType], 0x5C)
    ]
    Critical: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x60)]
    Ineffective: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x61)]
    LaserHeatBoost: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x62)]


@partial_struct
class cGcNGuiTextData(Structure):
    ElementData: Annotated[cGcNGuiElementData, Field(cGcNGuiElementData, 0x0)]
    AccessibleOverrides: Annotated[
        basic.cTkDynamicArray[cGcAccessibleOverride_Text],
        Field(basic.cTkDynamicArray[cGcAccessibleOverride_Text], 0x68),
    ]
    Image: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x78)]
    Text: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x88)]
    VROverrides: Annotated[
        basic.cTkDynamicArray[cGcVROverride_Text],
        Field(basic.cTkDynamicArray[cGcVROverride_Text], 0x98),
    ]
    GraphicStyle: Annotated[cTkNGuiGraphicStyle, Field(cTkNGuiGraphicStyle, 0xA8)]
    Style: Annotated[cTkNGuiTextStyle, Field(cTkNGuiTextStyle, 0x1C8)]
    ForcedOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x264)]
    BlockSpecialStyles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x268)]
    ForcedAllowScroll: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x269)]
    Special: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x26A)]


@partial_struct
class cGcPlayerGlobals(Structure):
    LargeWeaponMenuTransforms: Annotated[
        cGcProjectorOffsetData, Field(cGcProjectorOffsetData, 0x0)
    ]
    QuickMenuLauncherTransforms: Annotated[
        cGcProjectorOffsetData, Field(cGcProjectorOffsetData, 0x70)
    ]
    QuickMenuLauncherTransformsNoBuildMenu: Annotated[
        cGcProjectorOffsetData, Field(cGcProjectorOffsetData, 0xE0)
    ]
    WeaponMenuTransforms: Annotated[
        cGcProjectorOffsetData, Field(cGcProjectorOffsetData, 0x150)
    ]
    ArmourHighlightScanEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x1C0)
    ]
    HolsterHighlightEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x210)
    ]
    InteractHighlightEffect: Annotated[
        cGcScanEffectData, Field(cGcScanEffectData, 0x260)
    ]
    MeleeHitEffect: Annotated[cGcScanEffectData, Field(cGcScanEffectData, 0x2B0)]
    AnomalyAtlasStationSpawnData: Annotated[
        cGcCameraAnomalySetupData, Field(cGcCameraAnomalySetupData, 0x300)
    ]
    AnomalyBlachHoleSpawnData: Annotated[
        cGcCameraAnomalySetupData, Field(cGcCameraAnomalySetupData, 0x340)
    ]
    AnomalyMiniStationSpawnData: Annotated[
        cGcCameraAnomalySetupData, Field(cGcCameraAnomalySetupData, 0x380)
    ]
    BinocularInfoScreenOffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x3C0)
    ]
    BinocularInfoScreenOffsetGun: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x3F0)
    ]
    DefaultLeftHandTransform: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x420)
    ]
    DefaultLeftHandTransformVehicle: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x450)
    ]
    FrontendBaseScreenshotVROffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x480)
    ]
    FrontendMessagesOffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x4B0)
    ]
    FrontendOffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x4E0)
    ]
    FrontendOffsetV2: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x510)
    ]
    FrontendPhotoModeVROffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x540)
    ]
    InventoryOffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x570)
    ]
    InventoryOffsetV2: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x5A0)
    ]
    InWorldCompass: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x5D0)
    ]
    QuickMenuOffset: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x600)
    ]
    QuickMenuOffsetV2: Annotated[
        cGcInWorldUIScreenData, Field(cGcInWorldUIScreenData, 0x630)
    ]
    BinocularScopeOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x660)]
    DefaultMuzzleColour: Annotated[basic.Colour, Field(basic.Colour, 0x670)]
    DefaultMuzzleLaserColour: Annotated[basic.Colour, Field(basic.Colour, 0x680)]
    HandScreenRoboOnScreenOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x690)
    ]
    HolsterHeadOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x6A0)]
    InteractionLineActiveColour: Annotated[basic.Colour, Field(basic.Colour, 0x6B0)]
    InteractionLineBaseColour: Annotated[basic.Colour, Field(basic.Colour, 0x6C0)]
    LeftHandModeFishingRodAttachSocketCorrection: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x6D0)
    ]
    LeftHandModeWeaponAttachSocketCorrection: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x6E0)
    ]
    PointingWristAngles: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x6F0)]
    SearchGroupIconColour: Annotated[basic.Colour, Field(basic.Colour, 0x700)]
    StarFieldColour: Annotated[basic.Colour, Field(basic.Colour, 0x710)]
    TerrainEditorMuzzleColourAdd: Annotated[basic.Colour, Field(basic.Colour, 0x720)]
    TerrainEditorMuzzleColourFlatten: Annotated[
        basic.Colour, Field(basic.Colour, 0x730)
    ]
    TerrainEditorMuzzleColourSubtract: Annotated[
        basic.Colour, Field(basic.Colour, 0x740)
    ]
    TerrainEditorMuzzleColourUndo: Annotated[basic.Colour, Field(basic.Colour, 0x750)]
    TraderStayCloseLockBaseOffset: Annotated[
        basic.Vector3f, Field(basic.Vector3f, 0x760)
    ]
    WeaponBarrelOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x770)]
    WeaponOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x780)]
    TraderHailMessages: Annotated[cGcShipDialogue, Field(cGcShipDialogue, 0x790)]
    PirateHailMessage: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0x9F8)
    ]
    PoliceScanHailMessage: Annotated[
        cGcPlayerCommunicatorMessage, Field(cGcPlayerCommunicatorMessage, 0xA48)
    ]
    TraderHailReceiveOSDLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xA98)
    ]
    TraderHailRefusedOSDLoc: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0xAB8)
    ]
    AlertTable: Annotated[
        basic.cTkDynamicArray[cGcCreatureAlertData],
        Field(basic.cTkDynamicArray[cGcCreatureAlertData], 0xAD8),
    ]
    DebugSearchGroup: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xAE8)]
    DefaultShipFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xAF8)
    ]
    DefaultShipSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0xB08)]
    ExosuitUpgradeProduct: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB18)]
    ExperienceDefeatBugQueenRewardID: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB28)
    ]
    ExperienceDefeatBugQueenRewardIDProduct: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB38)
    ]
    ExperienceDefeatJellyBossRewardID: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB48)
    ]
    ExperienceDefeatLevel5SentinelsCorrupt: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB58)
    ]
    ExperienceDefeatLevel5SentinelsNearHiveReward: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB68)
    ]
    ExperienceDefeatLevel5SentinelsReward: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB78)
    ]
    ExperienceDefeatLevel5SpaceSentinelsReward: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xB88)
    ]
    FirstSpawnDataTable: Annotated[
        basic.cTkDynamicArray[cGcCameraSpawnSetupData],
        Field(basic.cTkDynamicArray[cGcCameraSpawnSetupData], 0xB98),
    ]
    FootDustEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xBA8)]
    Gun: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0xBB8)]
    NoShadowMaterial: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xBC8)
    ]
    PulseEncounterSpaceEggID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xBD8)]
    TechLearningProbabilities: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0xBE8),
    ]
    TechRarityData: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0xBF8),
    ]
    WantedEscalateTime: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0xC08),
    ]
    WantedExtremeEscalateTime: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0xC18),
    ]
    WantedTimeout: Annotated[
        basic.cTkDynamicArray[ctypes.c_float],
        Field(basic.cTkDynamicArray[ctypes.c_float], 0xC28),
    ]
    AutoSaveMaxTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xC38)]
    AutoSaveMinTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0xC40)]
    PointingWristAdjustmentTimeMilliseconds: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0xC48)
    ]
    CrystalResourceCollect: Annotated[
        cGcResourceCollectEffect, Field(cGcResourceCollectEffect, 0xC50)
    ]
    FishingResourceCollect: Annotated[
        cGcResourceCollectEffect, Field(cGcResourceCollectEffect, 0xC84)
    ]
    ShardResourceCollect: Annotated[
        cGcResourceCollectEffect, Field(cGcResourceCollectEffect, 0xCB8)
    ]
    TerrainResourceCollect: Annotated[
        cGcResourceCollectEffect, Field(cGcResourceCollectEffect, 0xCEC)
    ]
    TerrainResourceMeleeCollect: Annotated[
        cGcResourceCollectEffect, Field(cGcResourceCollectEffect, 0xD20)
    ]
    TerrainResourceMiniCollect: Annotated[
        cGcResourceCollectEffect, Field(cGcResourceCollectEffect, 0xD54)
    ]
    MissileSwarm: Annotated[cGcBoidData, Field(cGcBoidData, 0xD88)]
    PlayerBullet: Annotated[cGcProjectileLineData, Field(cGcProjectileLineData, 0xDB4)]
    RobotBullet: Annotated[cGcProjectileLineData, Field(cGcProjectileLineData, 0xDDC)]
    ShipBullet: Annotated[cGcProjectileLineData, Field(cGcProjectileLineData, 0xE04)]
    AmbientModeLookStickData: Annotated[
        cGcPlayerStickData, Field(cGcPlayerStickData, 0xE2C)
    ]
    FreighterValueData: Annotated[
        cGcInventoryValueData, Field(cGcInventoryValueData, 0xE48)
    ]
    LookStickData: Annotated[cGcPlayerStickData, Field(cGcPlayerStickData, 0xE64)]
    ShipValueData: Annotated[cGcInventoryValueData, Field(cGcInventoryValueData, 0xE80)]
    StickData: Annotated[cGcPlayerStickData, Field(cGcPlayerStickData, 0xE9C)]
    WeaponValueData: Annotated[
        cGcInventoryValueData, Field(cGcInventoryValueData, 0xEB8)
    ]
    MedalTiers: Annotated[cGcJourneyMedalTiers, Field(cGcJourneyMedalTiers, 0xED4)]
    TraderHailReceiveRegular: Annotated[
        c_enum32[enums.cGcShipDialogueTreeEnum],
        Field(c_enum32[enums.cGcShipDialogueTreeEnum], 0xEE4),
    ]
    ExperienceFlybyStartAngle: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xEF4)]
    FingerButtonQuickMenuButtonSize: Annotated[
        basic.Vector2f, Field(basic.Vector2f, 0xEFC)
    ]
    MouseSpringStrength: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF04)]
    MouseSpringStrengthMaxDelta: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF0C)]
    MouseSpringStrengthMinDelta: Annotated[basic.Vector2f, Field(basic.Vector2f, 0xF14)]
    TraderHailReceiveFight: Annotated[
        c_enum32[enums.cGcShipDialogueTreeEnum],
        Field(c_enum32[enums.cGcShipDialogueTreeEnum], 0xF1C),
    ]
    TraderHailSend: Annotated[
        c_enum32[enums.cGcShipDialogueTreeEnum],
        Field(c_enum32[enums.cGcShipDialogueTreeEnum], 0xF24),
    ]
    AbandonedFreighterRechargeMod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF2C)
    ]
    AbandonedFreighterStaminaRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF30)
    ]
    AbandonedFreighterStaminaRecoveryMod: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xF34)
    ]
    AimDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF38)]
    AimDisperseCooldownFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF3C)]
    AimDisperseCooldownTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF40)]
    AimDisperseMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF44)]
    AimDisperseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF48)]
    AimDistanceShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF4C)]
    AimMinWeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF50)]
    AimOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF54)]
    AimShootableTargetAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF58)]
    AimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF5C)]
    AimWeightAdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF60)]
    AlienPodAggroDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF64)]
    AlienPodAggroSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF68)]
    AnimRunBlendPoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF6C)]
    AnimRunSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF70)]
    AnimWalkBlendPoint: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF74)]
    AnimWalkSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF78)]
    AnimWalkToRunSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF7C)]
    AtmosphereEffectOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF80)]
    AtmosphereEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF84)]
    AutoAimFixedInterceptSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF88)]
    AutoAimMaxAccelFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF8C)]
    AutoAimMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF90)]
    AutoAimMinScreenDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF94)]
    AutoAimRadiusExtra: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF98)]
    AutoAimStickyMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xF9C)]
    AutoAimStickyMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFA0)]
    AutoAimStickyRailgun: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFA4)]
    AutoAimTimeOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFA8)]
    AutoLandRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFAC)]
    AutoLandTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFB0)]
    AutoSaveRangeInSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFB4)]
    AutoSaveRangeInVehicle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFB8)]
    AutoSaveRangeOnFoot: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFBC)]
    BalanceSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC0)]
    BalanceStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC4)]
    BaseUnderwaterDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFC8)]
    BeaconActivateRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFCC)]
    BeamRecoil: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFD0)]
    BestGuildRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xFD4)]
    BincoularRayThickness: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFD8)]
    BinocularAimOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFDC)]
    BinocularCreatureCastSphereSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xFE0)
    ]
    BinocularRangePlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFE4)]
    BinocularRangeSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFE8)]
    BinocularRayThicknessVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFEC)]
    BinocularScopeScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFF0)]
    BinocularScopeSmoothing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFF4)]
    BinocularsHUDDistanceVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFF8)]
    BinocularsHUDScaleVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xFFC)]
    BlastRecoilSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1000)]
    BodyRealignmentDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1004)]
    BulletBend: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1008)]
    BulletClipMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x100C)]
    BulletCostReducer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1010)]
    CannonRecoilSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1014)]
    ChanceHighGradeIllegal: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1018)]
    ChargedEnergyBallSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x101C)]
    ChargeMeleeCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1020)]
    ChargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1024)]
    CheckBeneathPlayerForGroundAfterKickedFromCorvetteDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1028)
    ]
    ClimbableStickinessAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x102C)]
    ClingAngleThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1030)]
    ClingBrakeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1034)]
    ClingSpeedThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1038)]
    CockpitEjectFirstPersonOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x103C)
    ]
    CockpitEjectFirstPersonOffsetTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1040)
    ]
    CockpitEjectSideTestRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1044)]
    CockpitEjectTestEndHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1048)
    ]
    CockpitEjectTestRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x104C)]
    CockpitEjectTestSphereRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1050)
    ]
    CockpitEjectTestSphereRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1054)
    ]
    CockpitEjectTestStartHeightOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1058)
    ]
    CombatEscalateTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x105C)]
    CombatEscapeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1060)]
    CombatEscapeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1064)]
    CombatSpawnMinWantedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1068)]
    CommunicatorSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x106C)]

    class eControlModesEnum(IntEnum):
        Normal = 0x0
        FlightStick = 0x1
        Inverted = 0x2

    ControlModes: Annotated[
        c_enum32[eControlModesEnum], Field(c_enum32[eControlModesEnum], 0x1070)
    ]
    CreativeModeDeathFadeInTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1074)
    ]
    CreativeModeDeathFadeOutTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1078)
    ]
    CreatureRideFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x107C)]
    CreatureRideFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1080)]
    CriticalHitDesatFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1084)]
    CriticalHitDesatTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1088)]
    CriticalHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x108C)]
    CrosshairTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1090)]
    CrouchHeightToDisableLegBlendingVR: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1094)
    ]
    DamageRateWhenUnderNoGravity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1098)
    ]
    DamageRepairFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x109C)]
    DeathDamageDrainChargeFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10A0)
    ]
    DeathDamageTechBrokenPercent: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x10A4)
    ]
    DeathScreenFadeInThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10A8)
    ]
    DeathScreenFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10AC)]
    DeathScreenFadeInUnderwaterThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10B0)
    ]
    DeathScreenFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10B4)]
    DeathScreenMaxRegenWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10B8)
    ]
    DeathScreenMinRegenWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10BC)
    ]
    DeathScreenPauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C0)]
    DeathScreenShipFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C4)]
    DeepWaterDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10C8)]
    DefaultHealthPips: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10CC)]
    DefaultHitPoints: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10D0)]
    DefaultShipHealthPips: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10D4)]
    DestroyEffectFinalDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10D8)]
    DroneProbeScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10DC)]
    DroneScanTimeToForget: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10E0)]
    DroneSpawnAccelerator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10E4)]
    DroneStartLocationRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10E8)]
    EarlyHazardTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10EC)]
    EnergyBallSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10F0)]
    EnergyDamageMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x10F4)]
    EnergyDischargeRateDeepWater: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10F8)
    ]
    EnergyDischargeRateFloatingInSpace: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10FC)
    ]
    EnergyDischargeRateHigh: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1100)]
    EnergyDischargeRateLow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1104)]
    EnergyDischargeRateMedium: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1108)]
    EnergyPainRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x110C)]
    ExertionFromPainTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1110)]
    ExertionSmoothTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1114)]
    ExperienceAlertRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1118)]
    ExperienceAlertSightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x111C)]
    ExperienceAlertSightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1120)]
    ExperienceDefeatBugQueenFiendSplatDelay: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1124)
    ]
    ExperienceDefeatBugQueenRewardChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1128)
    ]
    ExperienceDefeatBugQueenRewardDelay: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x112C)
    ]
    ExperienceDefeatLevel5SentinelsDisableWantedTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1130)
    ]
    ExperienceDefeatLevel5SentinelsRewardDelay: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1134)
    ]
    ExperienceDefeatLevel5SpaceSentinelsMessageDelay: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1138)
    ]
    ExperienceDefeatLevel5SpaceSentinelsRewardDelay: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x113C)
    ]
    ExperienceDefeatLevel5SpaceSentinelsWarpDelay: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1140)
    ]
    ExperienceDroneSpawnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1144)]
    ExperienceDroneSpawnOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1148)]
    ExperienceDroneTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x114C)]
    ExperienceDroneTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1150)]
    ExperienceFlybyScareRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1154)]
    ExperienceFlybyScareTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1158)]
    ExperienceHardPiratesDamageMaxOdds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x115C)
    ]
    ExperienceInterestingDroneDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1160)
    ]
    ExperienceInterestingFreighterDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1164)
    ]
    ExperienceInterestingPoliceDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1168)
    ]
    ExperienceInterestingShipDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x116C)
    ]
    ExperienceMaxCivilianShipSpawnsInSpace: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1170)
    ]
    ExperienceMaxCivilianShipSpawnsOnPlanet: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1174)
    ]
    ExperienceMediumPiratesDamageMaxOdds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1178)
    ]
    ExperienceMessageBroadcastNearbyDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x117C)
    ]
    ExperiencePirateCloseAttackPercentage: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1180)
    ]
    ExperiencePirateFreighterAttackRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1184)
    ]
    ExperiencePiratesDifficultyVariance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1188)
    ]
    ExperiencePirateTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x118C)]
    ExperiencePirateTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1190)]
    ExperienceShipTimeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1194)]
    ExperienceShipTimeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1198)]
    ExperienceWalkerSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x119C)]
    ExplodeShakeMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A0)]
    ExplodeShakeMaxDistSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A4)]
    ExplodeShakeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11A8)]
    ExplosionBoundingInset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11AC)]
    ExplosionBoundingInsetRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11B0)
    ]
    ExplosionScaleVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B4)]
    ExplosionTimePerEffect: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11B8)]
    ExplosionTimeVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11BC)]
    FingerButtonClickSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C0)]
    FingerButtonClickTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11C4)]
    FingerButtonQuickMenuOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x11C8)
    ]
    FingerButtonRadiusOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11CC)]
    FingerTipOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11D0)]
    FistClenchBlendInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11D4)]
    FistClenchBlendOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11D8)]
    FlamethrowerDispersion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11DC)]
    FlashGrow: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11E0)]
    FlashPosX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11E4)]
    FlashPosY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11E8)]
    FlashPosZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11EC)]
    FlashPulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11F0)]
    FlashSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11F4)]
    FlashSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11F8)]
    FoodValueThresholdAverage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x11FC)]
    FoodValueThresholdBad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1200)]
    FoodValueThresholdBest: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1204)]
    FoodValueThresholdGood: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1208)]
    FoodValueThresholdWorst: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x120C)]
    FootDustScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1210)]
    FootOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1214)]
    FreeJetpackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1218)]
    FreeJetpackRangeNonTerrain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x121C)]
    FreeJetpackRangePrime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1220)]
    FreeJetpackSlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1224)]
    FreeJetpackSlopeAnglePrime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1228)]
    FreighterAbandonedHazardTimeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x122C)
    ]
    FreighterCoolFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1230)]
    FreighterPriceExp2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1234)]
    FreighterProbeScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1238)]
    FreighterSpawnedOnYouFadeInTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x123C)
    ]
    FrigateFlybyMarkerAlwaysHideDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1240)
    ]
    FrigateFlybyMarkerAlwaysShowDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1244)
    ]
    FrontShieldOffsetOff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1248)]
    FrontShieldOffsetOffVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x124C)]
    FrontShieldOffsetOn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1250)]
    FrontShieldOffsetOnVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1254)]
    FrontShieldScaleVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1258)]
    FrontShieldSlerpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x125C)]
    FrontShieldSlerpTimeVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1260)]
    FrontShieldSpeedSlowdown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1264)]
    FrontShieldUpOffsetVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1268)]
    FullClipReloadSpeedMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x126C)
    ]
    GhostbusterAmp1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1270)]
    GhostbusterAmp2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1274)]
    GhostbusterAmp3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1278)]
    GhostbusterFreq1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x127C)]
    GhostbusterFreq2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1280)]
    GhostbusterFreq3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1284)]
    GhostbusterSpeed1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1288)]
    GhostbusterSpeed2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x128C)]
    GhostbusterSpeed3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1290)]
    GhostbusterStart1: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1294)]
    GhostbusterStart2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1298)]
    GhostbusterStart3: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x129C)]
    GhostbusterStartLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12A0)]
    GrassPushDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12A4)]
    GrassPushDistanceFeet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12A8)]
    GrenadeBaseClipSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x12AC)]
    GrenadeBounceDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12B0)]
    GrenadeBounceMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12B4)]
    GrenadeCarveRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12B8)]
    GrenadeRecoil: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12BC)]
    GrenadeStopExplodeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C0)]
    GrenadeTerrainDeformRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C4)]
    GroundRunSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12C8)]
    GroundRunSpeedLowG: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12CC)]
    GroundWalkBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12D0)]
    GroundWalkBrakeWhileMoving: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12D4)]
    GroundWalkForceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12D8)]
    GroundWalkRecoverySpeedDamper: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x12DC)
    ]
    GroundWalkSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12E0)]
    GroundWalkSpeedLowG: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12E4)]
    GroundWalkSpeedTeleportHmd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12E8)]
    GunBaseClipSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x12EC)]
    GunRecoil: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12F0)]
    GunRecoilMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12F4)]
    GunRecoilMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12F8)]
    GunRecoilSettleSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x12FC)]
    GunRecoilSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1300)]
    GunRightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1304)]
    GunUpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1308)]
    HandHoldInteractAngleRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x130C)]
    HandHoldInteractDistanceRate: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1310)
    ]
    HandInteractionFresnel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1314)]
    HandInteractionFresnelMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1318)]
    HandInteractionLightIntensity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x131C)
    ]
    HandInteractionLightIntensityMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1320)
    ]
    HandInteractionLightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1324)]
    HandInteractionLightOffsetAt: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1328)
    ]
    HandInteractionLightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x132C)]
    HandScreenActivationAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1330)]
    HandScreenActivationAngleDown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1334)
    ]
    HandScreenActivationAngleOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1338)
    ]
    HandScreenActivationRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x133C)]
    HandScreenAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1340)]
    HandScreenLookActiveAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1344)]
    HandScreenMinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1348)]
    HandScreenMinAngleWithPoint: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x134C)
    ]
    HandScreenPenetration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1350)]
    HandScreenRestingTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1354)]
    HandSmoothAngleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1358)]
    HandSmoothMinAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x135C)]
    HandSwimDecayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1360)]
    HandSwimForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1364)]
    HandSwimMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1368)]
    HandSwimMaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x136C)]
    HandSwimMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1370)]
    HardLandMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1374)]
    HardLandMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1378)]
    HardLandPainTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x137C)]
    HardLandTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1380)]
    HardModeHazardDamageRateMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1384)
    ]
    HardModeHazardDamageWoundRateMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1388)
    ]
    HardModeHazardRechargeUnderground: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x138C)
    ]
    HardModeHazardTimeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1390)
    ]
    HazardDamageMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1394)]
    HeadBinocularsOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1398)]
    HeadBinocularsRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x139C)]
    HealthPipRechargeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13A0)]
    HealthRechargeMinTimeSinceDamage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x13A4)
    ]
    HeatShieldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13A8)]
    HelmetBob: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13AC)]
    HelmetLag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13B0)]
    HelmetMaxLag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13B4)]
    HighGuildRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x13B8)]
    HitReactBlendOutSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13BC)]
    HitReactBlendOutSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C0)]
    HitReactNoiseAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C4)]
    HmdResetButtonTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13C8)]
    HMDResetFlashTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13CC)]
    HmdTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13D0)]
    HmdTurnAnglePad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13D4)]
    HmdTurnSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13D8)]
    HmdTurnSpeedPad: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13DC)]
    HmdTurnThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13E0)]
    HoldActionDistX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13E4)]
    HoldActionDistY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13E8)]
    HoldActionDistZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13EC)]
    HoldDistX: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13F0)]
    HoldDistY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13F4)]
    HoldDistZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13F8)]
    HoldForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x13FC)]
    HoldMaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1400)]
    HoldRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1404)]
    HoldTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1408)]
    HolsterGrabFrontOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x140C)]
    HolsterGrabRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1410)]
    HUDHeightPosX: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1414)]
    HUDHeightPosY: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1418)]
    InteractionAimOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x141C)]
    InteractionButtonRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1420)]
    InteractionButtonRangeVehicle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1424)
    ]
    InteractionFocusIncrease: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1428)]
    InteractionFocusIncreaseCreature: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x142C)
    ]
    InteractionFocusIncreasePet: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1430)
    ]
    InteractionFocusTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1434)]
    InteractionFocusTimeCreature: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1438)
    ]
    InteractionFocusTimePet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x143C)]
    InteractionFocusTimeShootable: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1440)
    ]
    InteractionLineCircleOffsetMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1444)
    ]
    InteractionLineCircleOffsetMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1448)
    ]
    InteractionLineCircleRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x144C)
    ]
    InteractionLineCircleSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1450)]
    InteractionLineCircleThickness: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1454)
    ]
    InteractionLineNumCirclesPerMetre: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1458)
    ]
    InteractionLineSplineMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x145C)
    ]
    InteractionLineSplineOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1460)
    ]
    InteractionLineSplineOffsetMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1464)
    ]
    InteractionLineSplineOffsetRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1468)
    ]
    InteractionScanRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x146C)]
    InteractionSubstanceRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1470)]
    InteractNearbyRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1474)]
    JetpackBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1478)]
    JetpackDrainHorizontalFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x147C)
    ]
    JetpackFillRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1480)]
    JetpackFillRateFleetMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1484)
    ]
    JetpackFillRateMidair: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1488)]
    JetpackFillRateNexusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x148C)
    ]
    JetpackFillRateSpaceStationMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1490)
    ]
    JetpackForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1494)]
    JetpackForceDeadPlanetExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1498)
    ]
    JetpackHelmetBob: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x149C)]
    JetpackIgnitionForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14A0)]
    JetpackIgnitionForceDeadPlanetExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14A4)
    ]
    JetpackIgnitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14A8)]
    JetpackJetAnimateInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14AC)]
    JetpackJetAnimateOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14B0)]
    JetpackMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14B4)]
    JetpackMaxUpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14B8)]
    JetpackMinIgnitionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14BC)]
    JetpackMinLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C0)]
    JetpackUnderwaterDrainRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C4)]
    JetpackUnderwaterFillRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C8)]
    JetpackUpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14CC)]
    JetpackUpForceDeadPlanetExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14D0)
    ]
    JoystickOrientationTrimAltOc: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14D4)
    ]
    JoystickOrientationTrimAltOp: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14D8)
    ]
    LabelOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14DC)]
    LabelSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14E0)]
    LaserBeamAmmoUseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14E4)]
    LaserBeamCore: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14E8)]
    LaserBeamFlickerAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14EC)]
    LaserBeamFlickerFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14F0)]
    LaserBeamMineRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14F4)]
    LaserBeamTerrainDeformRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14F8)
    ]
    LaserBeamTerrainDeformVariance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x14FC)
    ]
    LaserEndOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1500)]
    LaserMiningDamageMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1504)
    ]
    LaserPlayerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1508)]
    LaserRecoil: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x150C)]
    LaserShakeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1510)]
    LaserShakeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1514)]
    LaserShipRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1518)]
    LaserWeaponRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x151C)]
    LeanAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1520)]
    LeanAmountFwd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1524)]
    LeanBackMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1528)]
    LeanFwdMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x152C)]
    LeanLeftMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1530)]
    LeanRightMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1534)]
    LookRayRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1538)]
    LootForceMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x153C)]
    LowGuildRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1540)]
    LowHealthEffectPips: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1544)]
    LowHealthEffectShield: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1548)]
    MaxArmExtension: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154C)]
    MaxBuildHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1550)]
    MaxClingableSlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1554)]
    MaxFallSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1558)]
    MaxHealthPips: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x155C)]
    MaximumCrouchVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1560)]
    MaximumHeadHeightIncreaseVR: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1564)
    ]
    MaximumHorizontalOffsetVR: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1568)]
    MaxNumDestroyEffects: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x156C)]
    MaxNumShipsAttackingPlayer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1570)]
    MaxProjectileRadiusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1574)
    ]
    MaxResource: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1578)]
    MaxSlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x157C)]
    MaxSpidermanSlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1580)]
    MaxTimeAfterMeleeBeforeBoost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1584)
    ]
    MaxTimeInMeleeBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1588)]
    MaxWalkableSlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x158C)]
    MaxWordCategoriesToSayPerNPC: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1590)
    ]
    MedGuildRank: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1594)]
    MeleeBoostAirForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1598)]
    MeleeCooldown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x159C)]
    MeleeCooldownAlt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15A0)]
    MeleeDamageScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15A4)]
    MeleeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15A8)]
    MeleeDistance3P: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15AC)]
    MeleeDistanceAlt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B0)]
    MeleeForcePush: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B4)]
    MeleeHitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15B8)]
    MeleeOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15BC)]
    MeleePosDelta: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C0)]
    MeleeRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C4)]
    MeleeRadiusAlt: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15C8)]
    MeleeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15CC)]
    MeleeSpeedBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15D0)]
    MeleeSpeedBoostRangeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15D4)
    ]
    MeleeSpeedDamageBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15D8)]
    MeleeStaminaDrain: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15DC)]
    MeleeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15E0)]
    MeleeToAirBoostInitialImpulse: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15E4)
    ]
    MinArmExtension: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15E8)]
    MinBinocActiveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15EC)]
    MinDistanceToCommunicatorTarget: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15F0)
    ]
    MinEnergyPercentOnRespawn: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15F4)]
    MinimumPushOffForceToSlide: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15F8)]
    MiniportalAppearEffectTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x15FC)]
    MiniportalDisappearEffectTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1600)
    ]
    MinNumDestroyEffects: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1604)]
    MinRespawnCharge: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1608)]
    MinSlideTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160C)]
    MinSpidermanSlopeAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1610)]
    MinTimeAfterMeleeBeforeBoost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1614)
    ]
    MinTimeToHoldSpidermanPose: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1618)]
    MinUpAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x161C)]
    MouseAimZone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1620)]
    MouseCrosshairAlphaFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1624)]
    MouseCrosshairAlphaFadeSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1628)
    ]
    MouseCrosshairLineAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x162C)]
    MouseCrosshairLineWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1630)]
    MouseCrosshairMaxAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1634)]
    MouseCrosshairMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1638)]
    MouseCrosshairShipStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x163C)]
    MouseCrosshairShipStrengthOld: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1640)
    ]
    MouseDeadZone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1644)]
    MouseDeadZoneOld: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1648)]
    MouseDeadZoneVehicle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x164C)]
    MouseFlightCorrectionBrakeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1650)
    ]
    MouseFlightCorrectionMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1654)
    ]
    MouseMaxLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1658)]
    MouseMaxLengthOld: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x165C)]
    MouseMaxLengthVehicle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1660)]

    class eMouseSmoothModeEnum(IntEnum):
        Off = 0x0
        Sprung = 0x1

    MouseSmoothMode: Annotated[
        c_enum32[eMouseSmoothModeEnum], Field(c_enum32[eMouseSmoothModeEnum], 0x1664)
    ]
    MoveStickHighRangeLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1668)]
    MoveStickRunLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x166C)]
    MultiplayerMinWanteEscalationTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1670)
    ]
    MuzzleFlashMulThirdPerson: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1674)]
    NormalModeHazardDamageRateMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1678)
    ]
    NormalModeHazardDamageWoundRateMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x167C)
    ]
    NormalModeHazardRechargeUnderground: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1680)
    ]
    NormalModeHazardTimeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1684)
    ]
    NoStickTeleportDirectionChangeDeadzoneAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1688)
    ]
    NumberOfWarpsRequiredForFreightersToSpawn: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x168C)
    ]
    NumTechShopSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1690)]
    ObjectScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1694)]
    OtherPlayerTrackArrowRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1698)]
    PainColourSeperateAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x169C)]
    PainFlickerAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A0)]
    PainTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A4)]
    PassiveWeaponZoomFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16A8)]
    PassiveWeaponZoomFOVThirdPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16AC)
    ]
    PickRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B0)]
    PirateBattleMarkerRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B4)]
    PirateBattleMarkerTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16B8)]
    PirateBattleMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16BC)]
    PirateBattleWarnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16C0)]
    PirateBountyInitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16C4)]
    PirateBountyMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16C8)]
    PirateBountyTimeoutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16CC)]
    PirateFlybyAttackDistancePastPlayer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16D0)
    ]
    PirateFlybyAttackMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16D4)]
    PirateFlybyAttackMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16D8)]
    PirateFlybyAttackProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x16DC)
    ]
    PirateHailPercent: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x16E0)]
    PirateProbeAttackWaitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16E4)]
    PirateProbeAttackWarnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16E8)]
    PirateProbeHailPause: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16EC)]
    PirateProbeInitTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F0)]
    PirateProbeScanTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F4)]
    PirateProbeScanTotalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16F8)]
    PirateRaidMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x16FC)]
    PirateRaidMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1700)]
    PlayerSpaceTransferRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1704)]
    PlayerTransferRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1708)]
    PlayerViewTargetRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x170C)]
    PointDownToMoveAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1710)]
    PointDownToMoveBackAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1714)]
    ProjectileDamageFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1718)]
    ProjectileEndTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x171C)]
    PulseEncounterMarkerAlwaysHideDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1720)
    ]
    PulseEncounterMarkerAlwaysShowDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1724)
    ]
    PulseEncounterMarkerShowAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1728)
    ]
    PulseEncounterMinTimeInPulse: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x172C)
    ]
    PulseEncounterProbeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1730)]
    PulseEncounterProbeTimeRare: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1734)
    ]
    PulseRecoilSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1738)]
    PushForceAirFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x173C)]
    PushForceDecay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1740)]
    QuadAutoAimOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1744)]
    RailRecoilSpring: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1748)]
    ReloadButtonHoldTimeToHolster: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x174C)
    ]
    ReloadTapButtonSpeedIncrease: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1750)
    ]
    ResourceBlobFinalScaleDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1754)
    ]
    RespawnOnCorvettePadRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1758)]
    RespawnOnPadRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x175C)]
    RobotMultiplierWithFriends: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1760)]
    RocketBootsActivationWindow: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1764)
    ]
    RocketBootsBoostForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1768)]
    RocketBootsBoostOffTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x176C)]
    RocketBootsBoostOnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1770)]
    RocketBootsBoostTankDrainSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1774)
    ]
    RocketBootsDoubleTapTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1778)]
    RocketBootsDriftBraking: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x177C)]
    RocketBootsDriftDownwardForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1780)
    ]
    RocketBootsDriftEndTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1784)]
    RocketBootsDriftForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1788)]
    RocketBootsDriftTankDrainSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x178C)
    ]
    RocketBootsForceDuration: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1790)]
    RocketBootsForceStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1794)]
    RocketBootsHeightAdjustDownStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1798)
    ]
    RocketBootsHeightAdjustTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x179C)
    ]
    RocketBootsHeightAdjustUpStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17A0)
    ]
    RocketBootsImpulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A4)]
    RocketBootsJetpackMinLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17A8)]
    RocketBootsMaxDesiredHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17AC)
    ]
    RocketBootsMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17B0)]
    RocketBootsMinDesiredHeight: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17B4)
    ]
    RocketBootsWindUpBraking: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17B8)]
    RocketBootsZigZagForceDuration: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17BC)
    ]
    RocketBootsZigZagStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C0)]
    ScanBeamMainWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C4)]
    ScanBeamWidth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17C8)]
    ScanFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17CC)]
    ScanFadeOutTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D0)]
    ScanLabelTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D4)]
    ScanRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17D8)]
    ScanRotateBeamWdith: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17DC)]
    ScanRotateDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17E0)]
    ScanRotateWobbleAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17E4)]
    ScanWobbleAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17E8)]
    ScanWobbleAmp2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17EC)]
    ScanWobbleFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17F0)]
    ScanWobbleFreq2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x17F4)]
    ShieldMaximum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x17F8)]
    ShieldRechargeMinTimeSinceDamage: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x17FC)
    ]
    ShieldRechargeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1800)]
    ShieldRestoreDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1804)]
    ShieldRestoreSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1808)]
    ShipCameraLag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x180C)]
    ShipCoolFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1810)]
    ShipPriceExp2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1814)]
    ShipSummonLastSafeMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1818)]
    ShootOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x181C)]
    ShootPrepTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1820)]
    ShootSizeBase: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1824)]
    ShootSizeMaxXY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1828)]
    ShootSizeMaxZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x182C)]
    ShootSizeMinXY: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1830)]
    ShootSizeMinZ: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1834)]
    ShootSizeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1838)]
    ShotgunDispersion: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x183C)]
    SleepFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1840)]
    SlopeSlideBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1844)]
    SlopeSlidingSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1848)]
    SolarRegenFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x184C)]
    SpaceJetpackDrainRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1850)]
    SpaceJetpackForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1854)]
    SpaceJetpackIgnitionForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1858)]
    SpaceJetpackMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x185C)]
    SpaceJetpackUpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1860)]
    SpaceMaxGravityDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1864)]
    SpaceMinGravityDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1868)]
    SpacewalkBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x186C)]
    SpacewalkForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1870)]
    SpacewalkJetpackForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1874)]
    SpacewalkJetpackUpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1878)]
    SpacewalkMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x187C)]
    SpacewalkSurfaceHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1880)]
    SpawningDistanceBetweenPlayersAfterWarp: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1884)
    ]
    SpawningSpaceBattleLookOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1888)
    ]
    SpawningSpaceBattleLookOffsetUp: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x188C)
    ]
    SpeedLinesLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1890)]
    SpeedLinesMaxAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1894)]
    SpeedLinesMinAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1898)]
    SpeedLinesOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x189C)]
    SpeedLinesRadiusIncrement: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18A0)]
    SpeedLinesRadiusStartMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18A4)]
    SpeedLinesRadiusStartMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18A8)]
    SpeedLinesSpeedMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18AC)]
    SpeedLinesSpeedMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18B0)]
    SpeedLinesStartFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18B4)]
    SpeedLinesTotalLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18B8)]
    SpeedLinesWidthMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18BC)]
    SpeedLinesWidthMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18C0)]
    StaminaRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18C4)]
    StaminaRecoveredFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18C8)]
    StaminaRecoveryRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18CC)]
    StarFieldDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18D0)]
    StarFieldRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18D4)]
    StarFieldStarSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18D8)]
    StartHazardTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18DC)]
    StartSpookTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18E0)]
    StealthBaseCharge: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18E4)]
    StealthDrainRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18E8)]
    StealthMinLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18EC)]
    StealthRechargeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18F0)]
    StickDeadZoneMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18F4)]
    StickDeadZoneMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18F8)]
    StickYDampingThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x18FC)]
    SuitInventoryStartSeed: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1900)]
    SummonArcRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1904)]
    SummonShipDirectionChangeDeadZoneAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1908)
    ]
    SurfaceSwimForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x190C)]
    SurfaceSwimMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1910)]
    TakeDamageImpulse: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1914)]
    TargetDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1918)]
    TargetRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x191C)]
    TeleportAppearEffectSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1920)]
    TeleportArcLengthMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1924)
    ]
    TeleportArcRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1928)]
    TeleportArcRadiusInner: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x192C)]
    TeleportBallCompletionFactorFadeout: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1930)
    ]
    TeleportBallDistanceFadeAlpha: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1934)
    ]
    TeleportBallFadeMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1938)
    ]
    TeleportBallFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x193C)]
    TeleportBallRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1940)]
    TeleportBeamAnimHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1944)]
    TeleportBeamAnimSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1948)]
    TeleportBeamGravity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x194C)]
    TeleportBeamGravityMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1950)]
    TeleportChargeFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1954)]
    TeleportChargeMaxDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1958)]
    TeleportChargeMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x195C)]
    TeleportChargeMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1960)]
    TeleportChargeMoveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1964)]
    TeleportDirectionAltHandRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1968)
    ]
    TeleportDisappearEffectSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x196C)
    ]
    TeleportHmdMaxFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1970)]
    TeleportHmdMinFade: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1974)]
    TeleportHmdOutFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1978)]
    TeleportInitiateThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x197C)]
    TeleportInstantTravelDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1980)
    ]
    TeleportLastKnownThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1984)]
    TeleportLineBezierDistanceFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1988)
    ]
    TeleportLineBezierOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x198C)]
    TeleportLineEndFadeEnd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1990)]
    TeleportLineEndFadeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1994)]
    TeleportLineFadeRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1998)]
    TeleportLineFadeStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x199C)]
    TeleportMaxTravelDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19A0)]
    TeleportMaxTravelDistanceVertical: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19A4)
    ]
    TeleportMotionOffsetAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19A8)]
    TeleportMotionOffsetUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19AC)]
    TeleportStrafeDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B0)]
    TeleportTotalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B4)]
    TeleportTravelSurfaceAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19B8)]
    TemperatureDisplaySampleTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19BC)
    ]
    TerrainLaserRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19C0)]
    ThirdPersonRecoilMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19C4)
    ]
    ThirdPersonWeaponAttachRotationCorrectionAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19C8)
    ]
    ThirdPersonWeaponXOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19CC)]
    TimeHoldDownAccelerateToLaunchFromOutpost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19D0)
    ]
    TrackArrowStaticTargetOffsetMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19D4)
    ]
    TraderApproachDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19D8)]
    TraderApproachTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19DC)]
    TraderCommunicationBanMaxTime: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x19E0)
    ]
    TraderCommunicationBanMinTime: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x19E4)
    ]
    TraderHailDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19E8)]
    TraderHailTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19EC)]
    TraderHealthFightThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F0)]
    TraderSpamTimeWait: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F4)]
    TraderStayCloseLockOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x19F8)]
    TraderStayCloseLockSin1Coeff: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x19FC)
    ]
    TraderStayCloseLockSin1Offset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A00)
    ]
    TraderStayCloseLockSin2Coeff: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A04)
    ]
    TraderStayCloseLockSin2Offset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A08)
    ]
    TraderStayCloseLockSinsAdd: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A0C)]
    TraderStayCloseLockSpread: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A10)]
    TraderStayCloseLockSpreadAdd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A14)
    ]
    TraderStayCloseLockSpreadTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A18)
    ]
    UnderwaterBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A1C)]
    UnderwaterCurrentStrengthHorizontalMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A20)
    ]
    UnderwaterCurrentStrengthHorizontalMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A24)
    ]
    UnderwaterCurrentStrengthVertical: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A28)
    ]
    UnderwaterFloatRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A2C)]
    UnderwaterFluidDensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A30)]
    UnderwaterForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A34)]
    UnderwaterImpact: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A38)]
    UnderwaterJetpackEscapeForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A3C)
    ]
    UnderwaterJetpackForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A40)]
    UnderwaterMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A44)]
    UnderwaterMaxJetpackEscapeSpeed: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A48)
    ]
    UnderwaterMaxJetpackSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A4C)]
    UnderwaterMaxSpeedTotal: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A50)]
    UnderwaterMaxSpeedTotalJetpacking: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A54)
    ]
    UnderwaterMinDepth: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A58)]
    UnderwaterPlayerMass: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A5C)]
    UnderwaterPlayerSphereDepthOffsetFirstPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A60)
    ]
    UnderwaterPlayerSphereDepthOffsetMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A64)
    ]
    UnderwaterPlayerSphereDepthOffsetMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A68)
    ]
    UnderwaterPlayerSphereDepthOffsetPitchedExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A6C)
    ]
    UnderwaterPlayerSphereOffsetMaxPitch: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A70)
    ]
    UnderwaterPlayerSphereOffsetMinPitch: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A74)
    ]
    UnderwaterPlayerSphereRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A78)
    ]
    UnderwaterSurfaceForceFlattenAngleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A7C)
    ]
    UnderwaterSurfaceForceFlattenAngleRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A80)
    ]
    UnderwaterSwimMaxSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A84)]
    UtilityWeaponRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A88)]
    VehicleHazardDampingModifier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A8C)
    ]
    VehicleLaserRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A90)]
    VehicleRaceResultsHintTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A94)]
    VRModeHazardTimeMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1A98)]
    VRStartHazardTimeMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1A9C)
    ]
    WalkerAlertRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AA0)]
    WalkerSightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AA4)]
    WalkerSightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AA8)]
    WantedDroneEventRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AAC)]
    WantedEnemyAttackAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB0)]
    WantedLevelDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB4)]
    WantedLevelPlayerRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AB8)]
    WantedLevelPlayerRangeSpace: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1ABC)
    ]
    WantedMinorCrimeAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC0)]
    WantedMinPlanetTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC4)]
    WantedMinSpaceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AC8)]
    WantedTimeoutAggressive: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ACC)]
    WantedWitnessFuzzyTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD0)]
    WantedWitnessTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD4)]
    WeaponBobBlendTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AD8)]
    WeaponBobFactorRun: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1ADC)]
    WeaponBobFactorWalk: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AE0)]
    WeaponBobFactorWalkDeadZone: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AE4)
    ]
    WeaponCannonMinUnchargedShotThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AE8)
    ]
    WeaponCannonMinUnchargedShotTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1AEC)
    ]
    WeaponCannonMinWeaponTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF0)]
    WeaponChangeModeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF4)]
    WeaponCoolFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AF8)]
    WeaponGrenadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1AFC)]
    WeaponGunTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B00)]
    WeaponHolsterDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B04)]
    WeaponLag: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B08)]
    WeaponLowerDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B0C)]
    WeaponPriceExp2: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B10)]
    WeaponRailFireTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B14)]
    WeaponRailRechargeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B18)]
    WeaponShotgunSlowdown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B1C)]
    WeaponZoomFOV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B20)]
    WeaponZoomHorzRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B24)]
    WeaponZoomRecoilMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B28)]
    WeaponZoomVertRotation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B2C)]
    WitnessAIDamageAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B30)]
    WitnessAIDamageDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B34)]
    WitnessSenseEnhancement: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B38)]
    WitnessSenseEnhancementTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x1B3C)
    ]
    WordCategoriesRequiredToConverse: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x1B40)
    ]
    WoundDamageDecayTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B44)]
    WoundDamageLimit: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B48)]
    WoundDamageLimitShip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B4C)]
    WoundTimeMinimum: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1B50)]
    AimDisperseCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1B54)
    ]
    AutoAim: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B55)]
    AutoAimCentreOffsetCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1B56)
    ]
    AutoAimDotCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1B57)
    ]
    BoltcasterHasTracer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B58)]
    ClampPitch: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B59)]
    CreatureRideFade: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B5A)]
    DoPlayerAppearInVehicleEffect: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1B5B)
    ]
    EnableHeadMovements: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B5C)]
    EnableLeaning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B5D)]
    EnablePointDownToSmoothMove: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B5E)]
    FireButtonReloadsWeapon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B5F)]
    ForceFreighterProcTechRandom: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B60)]
    FrontShieldEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B61)]
    HandSwimEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B62)]
    HideHazardPanel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B63)]
    HmdSmoothTurnAlways: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B64)]
    InteractNearbyRadiusEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B65)]
    InventoryDamage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B66)]
    LuckyWithTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B67)]
    MouseCrosshairVisible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B68)]
    MouseFlightCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1B69)
    ]
    MultiplayerShareWanted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B6A)]
    NeverPreyedOn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B6B)]
    PassiveLook: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B6C)]
    PermanantAltFire: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B6D)]
    PermanantFire: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B6E)]
    RecenterViewWhenEnteringShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B6F)]
    ReportAllProjectileDamage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B70)]
    RequireHandsOnShipControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B71)]
    RocketBootsEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B72)]
    RocketBootsUseCustomCamera: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B73)]
    ShowFirstPersonCharacterShadowPCVR: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1B74)
    ]
    ShowFirstPersonCharacterShadowPSVR: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x1B75)
    ]
    ShowLowAmmoWarning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B76)]
    StickCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1B77)
    ]
    TeleportRecentre: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B78)]
    UnderwaterBuoyancyDepthCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1B79)
    ]
    UpgradeExosuitWithProduct: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B7A)]
    UseEnergy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B7B)]
    UseHazardProtection: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B7C)]
    UseLargeHealthBar: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B7D)]
    WeaponBobBlendCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x1B7E)
    ]
    WeaponZoomEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x1B7F)]


@partial_struct
class cGcDebugOptions(Structure):
    SeasonTransferInventoryConfigOverride: Annotated[
        cGcSeasonTransferInventoryConfig, Field(cGcSeasonTransferInventoryConfig, 0x0)
    ]
    CrashDumpPath: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    CreateSeasonContextMaskIdOverride: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x40)
    ]
    CursorTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    DebugFont: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    DebugFontTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    DebugScene: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x80)
    ]
    DefaultAirCreatureTable: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x90)]
    DefaultCaveCreatureTable: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xA0)]
    DefaultGroundCreatureTable: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xB0)]
    DefaultSaveData: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xC0)
    ]
    DefaultWaterCreatureTable: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0xD0)]
    ForceBuilderMissionBoardMission: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0xE0)
    ]
    LocTableList: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0xF0),
    ]
    PauseTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x100)
    ]
    PipelineFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x110)
    ]
    PipelineFileEditor: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x120)
    ]
    PipelineFileFrontend: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x130)
    ]
    PlayTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x140)
    ]
    RealityPresetFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x150)
    ]
    RenderToTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x160)
    ]
    SceneSettings: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x170)
    ]
    StepTexture: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x180)
    ]
    SwitchSeasonContextMaskIdOverride: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x190)
    ]
    ForceTimeToEpoch: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x1A0)]
    OverrideAbandonedFreighterSeed: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x1A8)
    ]
    ToolkitGlobals: Annotated[cTkGlobals, Field(cTkGlobals, 0x1B0)]
    _3dTextDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x698)]
    _3dTextMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x69C)]
    AutomaticPartSpawnStyle: Annotated[
        c_enum32[enums.cGcBaseBuildingPartStyle],
        Field(c_enum32[enums.cGcBaseBuildingPartStyle], 0x6A0),
    ]
    BaseDownloadTimeout: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6A4)]
    BasePayloadMultiplier: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x6A8)]
    BootDirectlyIntoSaveSlot: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6AC)]

    class eBootLoadDelayEnum(IntEnum):
        LoadAll = 0x0
        WaitForPlanet = 0x1
        WaitForNothing = 0x2

    BootLoadDelay: Annotated[
        c_enum32[eBootLoadDelayEnum], Field(c_enum32[eBootLoadDelayEnum], 0x6B0)
    ]
    BootLogoFadeRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6B4)]

    class eBootModeEnum(IntEnum):
        MinimalSolarSystem = 0x0
        SolarSystem = 0x1
        GalaxyMap = 0x2
        SmokeTest = 0x3
        SmokeTestGalaxyMap = 0x4
        Scratchpad = 0x5
        UnitTest = 0x6

    BootMode: Annotated[c_enum32[eBootModeEnum], Field(c_enum32[eBootModeEnum], 0x6B8)]
    DebugLanguage: Annotated[
        c_enum32[enums.cTkLanguages], Field(c_enum32[enums.cTkLanguages], 0x6BC)
    ]
    DebugMenuAlpha: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C0)]
    DebugTextLineHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C4)]
    DebugTextSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6C8)]
    DebugTextureSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6CC)]
    DiscoveryAutoSyncIntervalSeconds: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x6D0)
    ]
    ForceAnomalyTo: Annotated[
        c_enum32[enums.cGcGalaxyStarAnomaly],
        Field(c_enum32[enums.cGcGalaxyStarAnomaly], 0x6D4),
    ]
    ForceAsteroidSystemIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6D8)]
    ForceBiomeSubTypeTo: Annotated[
        c_enum32[enums.cGcBiomeSubType], Field(c_enum32[enums.cGcBiomeSubType], 0x6DC)
    ]
    ForceBiomeTo: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x6E0)
    ]
    ForceBuildingRaceTo: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x6E4)
    ]
    ForceCreatureLifeLevelTo: Annotated[
        c_enum32[enums.cGcPlanetLife], Field(c_enum32[enums.cGcPlanetLife], 0x6E8)
    ]
    ForceGrassColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6EC)]
    ForceInitialTimeOfDay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x6F0)]
    ForceInteractionIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x6F4)]
    ForceInteractionRaceTo: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x6F8)
    ]
    ForceLifeLevelTo: Annotated[
        c_enum32[enums.cGcPlanetLife], Field(c_enum32[enums.cGcPlanetLife], 0x6FC)
    ]
    ForceNPCPuzzleCategory: Annotated[
        c_enum32[enums.cGcAlienPuzzleCategory],
        Field(c_enum32[enums.cGcAlienPuzzleCategory], 0x700),
    ]
    ForceScreenFilterTo: Annotated[
        c_enum32[enums.cGcScreenFilters], Field(c_enum32[enums.cGcScreenFilters], 0x704)
    ]
    ForceSeaLevel: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x708)]
    ForceSkyColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x70C)]
    ForceSkyColourSeed: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x710)]
    ForceSpaceBattleLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x714)]
    ForceSpaceSkyColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x718)]
    ForceStarTypeTo: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x71C),
    ]
    ForceSunAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x720)]
    ForceTerrainSettings: Annotated[
        c_enum32[enums.cGcPlanetLife], Field(c_enum32[enums.cGcPlanetLife], 0x724)
    ]
    ForceTerrainTypeTo: Annotated[
        c_enum32[enums.cTkVoxelGeneratorSettingsTypes],
        Field(c_enum32[enums.cTkVoxelGeneratorSettingsTypes], 0x728),
    ]
    ForceTimeOfDay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x72C)]
    ForceWaterColourIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x730)]
    ForceWaterConditionTo: Annotated[
        c_enum32[enums.cTkWaterCondition],
        Field(c_enum32[enums.cTkWaterCondition], 0x734),
    ]
    ForceWaterObjectFileIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x738)]

    class eGameStateModeEnum(IntEnum):
        LoadPreset = 0x0
        UserStorage = 0x1
        FreshStart = 0x2

    GameStateMode: Annotated[
        c_enum32[eGameStateModeEnum], Field(c_enum32[eGameStateModeEnum], 0x73C)
    ]
    GenerateCostAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x740)]
    GenerateCostDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x744)]
    GenerateCostLOD: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x748)]
    GenerateCostWait: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x74C)]
    GenerateFarLodBuildingDist: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x750)]
    HavokVDBClientIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x754)]
    MaxNumDebugMessages: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x758)]
    MoveBaseIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x75C)]
    MultipleFingersSamePressFrameDelta: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x760)
    ]
    NewSaveGameMode: Annotated[
        c_enum32[enums.cGcGameMode], Field(c_enum32[enums.cGcGameMode], 0x764)
    ]
    OverrideMatchmakingVersion: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x768)]
    OverrideServerSeasonEndTime: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x76C)]
    OverrideServerSeasonNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x770)]
    PanDeadzone: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x774)]

    class ePlayerSpawnLocationOverrideEnum(IntEnum):
        None_ = 0x0
        FromSettings = 0x1
        Space = 0x2
        SpaceStation = 0x3
        RandomPlanet = 0x4
        GameStartPlanet = 0x5
        SpecificLocation = 0x6

    PlayerSpawnLocationOverride: Annotated[
        c_enum32[ePlayerSpawnLocationOverrideEnum],
        Field(c_enum32[ePlayerSpawnLocationOverrideEnum], 0x778),
    ]
    ProceduralModelBatchSize: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x77C)]
    ProceduralModelFilterMatchretryCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x780)
    ]
    ProceduralModelsShown: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x784)]
    ProceduralModelsThumbnailSize: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x788)
    ]
    ProfilerPartIndexPhase: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x78C)]
    ProfilerPartIndexStride: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x790)]
    ProfilerPartIteration: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x794)]

    class eProxyTypeEnum(IntEnum):
        None_ = 0x0
        ManualURI = 0x1
        InetProxy = 0x2

    ProxyType: Annotated[
        c_enum32[eProxyTypeEnum], Field(c_enum32[eProxyTypeEnum], 0x798)
    ]

    class eRealityModeEnum(IntEnum):
        LoadPreset = 0x0
        Generate = 0x1

    RealityMode: Annotated[
        c_enum32[eRealityModeEnum], Field(c_enum32[eRealityModeEnum], 0x79C)
    ]

    class eRecordSettingEnum(IntEnum):
        None_ = 0x0
        Record = 0x1
        Playback = 0x2

    RecordSetting: Annotated[
        c_enum32[eRecordSettingEnum], Field(c_enum32[eRecordSettingEnum], 0x7A0)
    ]
    RecurrenceTimeOffset: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7A4)]
    ScreenshotForUploadHeight: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7A8)]
    ScreenshotForUploadWidth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7AC)]

    class eServerEnvEnum(IntEnum):
        default = 0x0
        dev = 0x1
        qa = 0x2
        prodqa = 0x3
        prod = 0x4
        custom = 0x5
        pentest = 0x6
        merged = 0x7
        local = 0x8

    ServerEnv: Annotated[
        c_enum32[eServerEnvEnum], Field(c_enum32[eServerEnvEnum], 0x7B0)
    ]

    class eShaderPreloadEnum(IntEnum):
        Off = 0x0
        Full = 0x1

    ShaderPreload: Annotated[
        c_enum32[eShaderPreloadEnum], Field(c_enum32[eShaderPreloadEnum], 0x7B4)
    ]
    ShowSpecificGraph: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7B8)]
    SmokeTestConfigCaptureCycles: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7BC)
    ]
    SmokeTestConfigCaptureDurationInSeconds: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7C0)
    ]
    SmokeTestConfigCaptureFolderNameNumberOffset: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7C4)
    ]
    SmokeTestConfigPlanetPositionCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7C8)
    ]
    SmokeTestConfigScenarioLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7CC)
    ]
    SmokeTestConfigScenarioPreambleLength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7D0)
    ]

    class eSmokeTestCycleModeEnum(IntEnum):
        None_ = 0x0
        TourPlanet = 0x1
        TourSolarSystem = 0x2
        TourGalaxy = 0x3
        TourUDAs = 0x4
        TourShortUDAs = 0x5
        TourRandomWarps = 0x6

    SmokeTestCycleMode: Annotated[
        c_enum32[eSmokeTestCycleModeEnum],
        Field(c_enum32[eSmokeTestCycleModeEnum], 0x7D4),
    ]

    class eSmokeTestScenarioEnum(IntEnum):
        None_ = 0x0
        TerrainSnapShotFromAltitude = 0x1
        BelowCloudLayerSnapShot = 0x2
        Flying = 0x3
        UltraBiomeSnapShot = 0x4
        Walking = 0x5
        LeakDetector = 0x6
        WalkingSnapshot = 0x7
        ModelLoading = 0x8
        SettlementSnapshot = 0x9

    SmokeTestScenario: Annotated[
        c_enum32[eSmokeTestScenarioEnum], Field(c_enum32[eSmokeTestScenarioEnum], 0x7D8)
    ]
    SmokeTestSmokeBotTargetWarps: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7DC)
    ]

    class eSolarSystemBootEnum(IntEnum):
        FromSettings = 0x0
        Generate = 0x1

    SolarSystemBoot: Annotated[
        c_enum32[eSolarSystemBootEnum], Field(c_enum32[eSolarSystemBootEnum], 0x7E0)
    ]
    SunLightScaleGgx: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7E4)]
    SwipeDetectionMaxFrames: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7E8)]
    SwipeDetectionNormalizedTravelThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7EC)
    ]
    SynergyPort: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F0)]

    class eUseBanksEnum(IntEnum):
        False_ = 0x0
        True_ = 0x1
        Default = 0x2

    UseBanks: Annotated[c_enum32[eUseBanksEnum], Field(c_enum32[eUseBanksEnum], 0x7F4)]
    WeaponScale3P: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7F8)]
    RealityGenerationIteration: Annotated[
        ctypes.c_uint16, Field(ctypes.c_uint16, 0x7FC)
    ]
    AutoJoinUserNames: Annotated[
        basic.cTkFixedString0x800, Field(basic.cTkFixedString0x800, 0x7FE)
    ]
    DebugTwitchRewards: Annotated[
        basic.cTkFixedString0x400, Field(basic.cTkFixedString0x400, 0xFFE)
    ]
    LoadToBase: Annotated[
        basic.cTkFixedString0x200, Field(basic.cTkFixedString0x200, 0x13FE)
    ]
    SeasonalDataOverrideFile: Annotated[
        basic.cTkFixedString0x200, Field(basic.cTkFixedString0x200, 0x15FE)
    ]
    ForceHgAccount: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x17FE)
    ]
    ForcePlayerPosition: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x18FE)
    ]
    ForceUniverseAddress: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x19FE)
    ]
    GOGLogin: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1AFE)
    ]
    ShowUniverseAddressOnGalaxyMap: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1BFE)
    ]
    WorkingDirectory: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0x1CFE)
    ]
    AuthBaseUrl: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1DFE)
    ]
    ProxyURI: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x1E7E)
    ]
    ForceBaseDownloadUser: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1EFE)
    ]
    OverrideSettlementOwnershipOnlineId: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1F3E)
    ]
    OverrideSettlementOwnershipUsername: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1F7E)
    ]
    ScreenshotForUploadName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1FBE)
    ]
    AllowedLanguagesFile: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x1FFE)
    ]
    AutomaticPartSpawnID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x201E)
    ]
    BaseServerPlatform: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x203E)
    ]
    CrashDumpIdentifier: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x205E)
    ]
    OverrideUsernameForDev: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x207E)
    ]
    SaveTestingCommand: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x209E)
    ]
    SmokeTestForcePlanetDetail: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20BE)
    ]
    SmokeTestRunFolder: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20DE)
    ]
    SynergyServer: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x20FE)
    ]
    ActiveMissionsIgnoreStartCancelConditions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x211E)
    ]
    AllowGalaxyMapRequests: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x211F)]
    AllowGlobalPartSnapping: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2120)]
    AllowMultiThreadedRenderingOnVulkan: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2121)
    ]
    AllowNGuiVR: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2122)]
    AllowOverrideSettlementOwnership: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2123)
    ]
    AllowPause: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2124)]
    AllowRobotBehaviors: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2125)]
    AllowSavingOnAbandonedFreighters: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2126)
    ]
    AllSeasonMilestonesShowComplete: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2127)
    ]
    AllSettlementsAreCompleted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2128)]
    AlternateControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2129)]
    AlwaysAllowFreighterInventoryAccess: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x212A)
    ]
    AlwaysAllowShipOperations: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x212B)]
    AlwaysAllowSpookFiends: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x212C)]
    AlwaysAllowVehicleOperations: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x212D)]
    AlwaysHaveFocus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x212E)]
    AlwaysIncludeLocalPlayerInChatMessage: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x212F)
    ]
    AlwaysSaveGameAsClient: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2130)]
    AlwaysShowSaveIds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2131)]
    AlwaysShowURI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2132)]
    AlwaysSpaceBattle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2133)]
    AutoJoinRandomGames: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2134)]
    AutoJoinUserEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2135)]
    AutomaticPartSpawnInactive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2136)]
    BaseAdmin: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2137)]
    BlockCommunicatorSignals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2138)]
    BlockSettlementsNetwork: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2139)]
    BlockSpaceBattle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x213A)]
    BodyTurning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x213B)]
    BootDirectlyIntoLastSave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x213C)]
    BootMusic: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x213D)]
    CanLeaveDialogs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x213E)]
    CertificateSecurityBypass: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x213F)]
    CheckForMissingLocStrings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2140)]
    ClothForceAsyncSimulationOff: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2141)]
    ClothForceAsyncSimulationOn: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2142)]
    ClothForcePositionExtrapolationAntiSyncWithFpsLock: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2143)
    ]
    ClothForcePositionExtrapolationBackOn: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2144)
    ]
    ClothForcePositionExtrapolationOff: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2145)
    ]
    ClothForcePositionExtrapolationOn: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2146)
    ]
    ClothForcePositionExtrapolationSyncWithFpsLock: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2147)
    ]
    ClothForcePositionExtrapolationUpdateOrderDependent: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2148)
    ]
    CompressTextures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2149)]
    CrashDumpFull: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x214A)]
    CrashOnF10: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x214B)]
    CreatureChatter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x214C)]
    CreatureDrawVocals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x214D)]
    CreatureErrors: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x214E)]
    CrossPlatformFeaturedBases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x214F)]
    DChecksEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2150)]
    DChecksOutputBinary: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2151)]
    DChecksOutputFileLine: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2152)]
    DChecksOutputJson: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2153)]
    DebugBuildingSpawns: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2154)]
    DebugDepthReprojection: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2155)]
    DebugDrawPlayerInteract: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2156)]
    DebugGalaxyMapInQuickMenu: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2157)]
    DebugIBL: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2158)]
    DebugNetworkLocks: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2159)]
    DebugPersistentInteractions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x215A)]
    DebugRenderSpaceOffset: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x215B)]
    DebugSpotlights: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x215C)]
    DebugTerrainTextures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x215D)]
    DebugThreatLevels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x215E)]
    DeferRegionBodies: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x215F)]
    DisableAbandonedFreighterRoomsOptimisation: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2160)
    ]
    DisableBaseBuilding: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2161)]
    DisableBaseBuildingLimits: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2162)]
    DisableBasePowerRequirements: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2163)]
    DisableClouds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2164)]
    DisableContinuousSaving: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2165)]
    DisableCorvetteSwapParts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2166)]
    DisableCorvetteValidation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2167)]
    DisableDebugControls: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2168)]
    DisableDiscoveryNaming: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2169)]
    DisableFileWatcher: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x216A)]
    DisableHazards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x216B)]
    DisableHeadConstraints: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x216C)]
    DisableInvalidSaveVersion: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x216D)]
    DisableLeftHand: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x216E)]
    DisableLimits: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x216F)]
    DisableMissionShop: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2170)]
    DisableMonumentDownloads: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2171)]
    DisableNPCHiddenUntilScanned: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2172)]
    DisableNPCs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2173)]
    DisableOldMissions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2174)]
    DisablePartialStories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2175)]
    DisableProfanityFilter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2176)]
    DisableSaveSlotSorting: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2177)]
    DisableSaveUploadRateLimits: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2178)]
    DisableSaving: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2179)]
    DisableSettlements: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x217A)]
    DisableShadowSwitching: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x217B)]
    DisableShipSaveDataRecovery: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x217C)]
    DisableSpaceStationSpawnOnJoin: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x217D)
    ]
    DisableStorms: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x217E)]
    DisableVibration: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x217F)]
    DoAlienLanguage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2180)]
    DrawCreaturesInRoutines: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2181)]
    DumpManifestContents: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2182)]
    EnableAccessibleUI: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2183)]
    EnableBaseBuildingExpandables: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2184)
    ]
    EnableBaseMovingOption: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2185)]
    EnableCloudAnimation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2186)]
    EnableComputePost: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2187)]
    EnableDayNightCycle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2188)]
    EnableDebugSceneAutoSave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2189)]
    EnableEvenOddRender: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x218A)]
    EnableFrontendPreload: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x218B)]
    EnableGalaxyRecolouring: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x218C)]
    EnableGgx: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x218D)]
    EnableMemoryPoolAllocPrint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x218E)]
    EnablePhotomodeVR: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x218F)]
    EnableSynergy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2190)]
    EnableTouchScreenDebugging: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2191)]
    EverythingIsFree: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2192)]
    EverythingIsKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2193)]
    EverythingIsStar: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2194)]
    FakeHandsInMultiplayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2195)]
    FastAndFrequentFleetInterventions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2196)
    ]
    FastLoad: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2197)]
    FixedFramerate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2198)]
    FleetDirectorAutoMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2199)]
    ForceAllExhibitsToBeEditable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x219A)]
    ForceBasicLoadScreen: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x219B)]
    ForceBinaryStar: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x219C)]
    ForceBiome: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x219D)]
    ForceBuildersAlwaysKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x219E)]
    ForceBuildingRace: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x219F)]
    ForceCorruptSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A0)]
    ForceCreatureLifeLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A1)]
    ForceDefaultCreatureFile: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A2)]
    ForceDisableClothComponent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A3)]
    ForceDisableNonPlayerRagdollComponents: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21A4)
    ]
    ForceDisableRagdollComponent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A5)]
    ForceDisableSeparatePhysicsWorlds: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21A6)
    ]
    ForceDisableSplitIkOptimisation: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21A7)
    ]
    ForceDisableSpringComponent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A8)]
    ForceEnableClothComponent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21A9)]
    ForceEnableRagdollComponent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21AA)]
    ForceEnableSplitIkOptimisation: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21AB)
    ]
    ForceEnableSpringComponent: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21AC)]
    ForceExtremeSentinels: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21AD)]
    ForceExtremeWeather: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21AE)]
    ForceFullFeatureMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21AF)]
    ForceGasGiantSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B0)]
    ForceGiantSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B1)]
    ForceInitialShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B2)]
    ForceInitialWeapon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B3)]
    ForceInteractionToSettings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B4)]
    ForceLifeLevel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B5)]
    ForceLoadAllWeather: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B6)]
    ForceNexusInQuickMenu: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B7)]
    ForcePirateSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B8)]
    ForcePlanetsToHaveNoCaves: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21B9)]
    ForcePlanetsToHaveNoNoiseLayers: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21BA)
    ]
    ForcePlanetsToHaveNoTerrainFeatures: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21BB)
    ]
    ForcePlanetsToHaveNoWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21BC)]
    ForcePlanetsToHaveWater: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21BD)]
    ForcePrimeTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21BE)]
    ForcePurpleSystemsToAlwaysBirth: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21BF)
    ]
    ForcePurpleSystemsVisibleOnLoad: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21C0)
    ]
    ForceRareAsteroidSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C1)]
    ForceScanEventsToGoPrime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C2)]
    ForceScreenFilter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C3)]
    ForceSmallLobby: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C4)]
    ForceSpaceSkyColourRare: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C5)]
    ForceStarType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C6)]
    ForceSunDirectionFromPhotoMode: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21C7)
    ]
    ForceTernaryStar: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C8)]
    ForceTerrainType: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21C9)]
    ForceTgaDlc: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21CA)]
    ForceTinyLobby: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21CB)]
    ForceTranslateAllAlienText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21CC)]
    ForceWaterCondition: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21CD)]
    FormatDownloadStorageAreaOnBoot: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21CE)
    ]
    GodMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21CF)]
    GraphCommandBuffer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D0)]
    GraphFPS: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D1)]
    GraphGeneration: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D2)]
    GraphTexStreaming: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D3)]
    HangOnCrash: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D4)]
    HmdFrameShiftEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D5)]
    HmdUseSolidGuiPointer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D6)]
    HotReloadModGlobals: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D7)]
    IgnoreFreighterSpawnWarpRequirement: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21D8)
    ]
    IgnoreMissionRank: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21D9)]
    IgnoreSteamDev: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21DA)]
    IgnoreTransactionTimeouts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21DB)]
    InfiniteInteractions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21DC)]
    InfiniteStamina: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21DD)]
    InstanceCollision: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21DE)]
    InteractionsAllwaysGivesTech: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21DF)]
    LimitGlobalBodies: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E0)]
    LimitGlobalInstances: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E1)]
    LimitPerRegionBodies: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E2)]
    LimitPerRegionInstances: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E3)]
    LoadMissions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E4)]
    LoadShaderSourceIfRenderdocEnabled: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21E5)
    ]
    LockAllTitles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E6)]
    LogMissingLocalisedText: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E7)]
    MapWarpCheckIgnoreDrive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E8)]
    MapWarpCheckIgnoreFuel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21E9)]
    MaximumFreighterSpawns: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21EA)]
    MemCsv: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21EB)]
    MissionMessageLoggingEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21EC)]
    MissionNGUIShowsConditionResults: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21ED)
    ]
    MissionNGUIShowsTableNames: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21EE)]
    MissionSurveyEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21EF)]
    ModifyPlanetsInInitialSystems: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21F0)
    ]
    MPMissions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21F1)]
    MPMissionsAlwaysEPIC: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21F2)]
    MultiplePlayerFreightersInASystem: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21F3)
    ]
    PlaceOnGroundWhenLeavingDebugCamera: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21F4)
    ]
    PreloadToolbox: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21F5)]
    PrintAvgFrameTimes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21F6)]
    ProceduralModelsDeterministicSequence: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x21F7)
    ]
    Proto2DevKit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21F8)]
    RecordNetworkStatsOnBoot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21F9)]
    RenderCreatureDetails: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21FA)]
    RenderHud: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21FB)]
    RenderLowFramerate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21FC)]
    ResetForcedSaveSlotOnLoad: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21FD)]
    ResetToSupportedResolution: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21FE)]
    RevealAllTitles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x21FF)]
    SaveOutModdedMetadata: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2200)]
    ScratchpadPlanetEnvironment: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2201)]
    ScreenshotMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2202)]
    ShaderCaching: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2203)]
    ShaderPreloadListExport: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2204)]
    ShaderPreloadListImport: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2205)]
    ShipSalvageGivesAllParts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2206)]
    ShowDebugMessages: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2207)]
    ShowDynamicResScale: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2208)]
    ShowEditorPlacementPreview: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2209)]
    ShowFireteamMembersUA: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x220A)]
    ShowFramerate: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x220B)]
    ShowGPUMemory: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x220C)]
    ShowGPURenderTime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x220D)]
    ShowGraphs: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x220E)]
    ShowHmdHandControllers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x220F)]
    ShowLongestStrings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2210)]
    ShowMempoolOverlay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2211)]
    ShowMissionIdInTitle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2212)]
    ShowMouseSmoothing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2213)]
    ShowPositionDebug: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2214)]
    ShowRenderStatsDisplay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2215)]
    ShowTeleportEffectLocally: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2216)]
    SimulateDisabledParticleRefractions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2217)
    ]
    SimulateNoNetworkConnection: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2218)]
    SkipAbandonedFreighterUnlocking: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2219)
    ]
    SkipIntro: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x221A)]
    SkipLogos: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x221B)]
    SkipPlanetDiscoverOnBoot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x221C)]
    SkipTutorial: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x221D)]
    SkipUITimers: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x221E)]
    SmokeTestCameraFly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x221F)]
    SmokeTestConfigRandomizePlanetSeed: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2220)
    ]
    SmokeTestDumpStatsMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2221)]
    SmokeTestFastExit: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2222)]
    SmokeTestLegacyOutput: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2223)]
    SmokeTestOutputOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2224)]
    SmokeTestPostBandwidthStats: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2225)]
    SmokeTestPureFlight: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2226)]
    SmokeTestSmokeBotAutoStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2227)]
    SmokeTestSmokeBotEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2228)]
    SpawnPirates: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2229)]
    SpawnPulseEncounters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x222A)]
    SpawnRobots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x222B)]
    SpawnShips: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x222C)]
    SpecialsShop: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x222D)]
    StopSwitchingToSecondaryInteractions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x222E)
    ]
    StressTestLongNameDisplay: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x222F)]
    SuperKillGuns: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2230)]
    SuppressSeasonalRewardReminders: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2231)
    ]
    TakeNoDamage: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2232)]
    ThirdPersonIsDefaultCameraForPlayer: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2233)
    ]
    ThirdPersonIsDefaultCameraForShipAndVehicles: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x2234)
    ]
    UnlockAllPlatformRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2235)]
    UnlockAllSeasonRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2236)]
    UnlockAllStories: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2237)]
    UnlockAllTitles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2238)]
    UnlockAllTwitchRewards: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2239)]
    UnlockAllWords: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x223A)]
    UseBuildings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x223B)]
    UseClouds: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x223C)]
    UseCreatures: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x223D)]
    UseElevation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x223E)]
    UseGunImpactEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x223F)]
    UseHighlightedOptionStyle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2240)]
    UseImmediateModeFrontend: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2241)]
    UseInstances: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2242)]
    UseLegacyBuildingTable: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2243)]
    UseLegacyFreighters: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2244)]
    UseMovementStickForRun: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2245)]
    UseObjects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2246)]
    UseOldTerrainMeshing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2247)]
    UsePadOnUnfocusedWindow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2248)]
    UseParticles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2249)]
    UseProcTextureDebugger: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224A)]
    UseSceneInfoWindow: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224B)]
    UseScreenEffects: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224C)]
    UseSeasonTransferInventoryConfigOverride: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x224D)
    ]
    UseTerrain: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224E)]
    UseVolumetrics: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x224F)]
    VideoCaptureMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2250)]


@partial_struct
class cGcAISpaceshipGlobals(Structure):
    PlayerSquadronConfig: Annotated[
        cGcPlayerSquadronConfig, Field(cGcPlayerSquadronConfig, 0x0)
    ]
    AlertLightColour: Annotated[basic.Colour, Field(basic.Colour, 0x230)]
    FreighterDoorColourActive: Annotated[basic.Colour, Field(basic.Colour, 0x240)]
    FreighterDoorColourInactive: Annotated[basic.Colour, Field(basic.Colour, 0x250)]
    FreighterEngineGlowDefaultColour: Annotated[
        basic.Colour, Field(basic.Colour, 0x260)
    ]
    TurretAlertLightOffset: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x270)]
    ProjectileWeaponMuzzleFlashes: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x280)
    ]
    WarpArriveEffectIDs: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2F0)]
    WarpStartEffectIDs: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x360)]
    AsteroidMiningPositioningTravelData: Annotated[
        cGcSpaceshipTravelData, Field(cGcSpaceshipTravelData, 0x3D0)
    ]
    AsteroidMiningTravelData: Annotated[
        cGcSpaceshipTravelData, Field(cGcSpaceshipTravelData, 0x418)
    ]
    FallbackTravelData: Annotated[
        cGcSpaceshipTravelData, Field(cGcSpaceshipTravelData, 0x460)
    ]
    OutpostLanding: Annotated[
        cGcSpaceshipTravelData, Field(cGcSpaceshipTravelData, 0x4A8)
    ]
    PlanetLanding: Annotated[
        cGcSpaceshipTravelData, Field(cGcSpaceshipTravelData, 0x4F0)
    ]
    SlowCombatEffectAttackTravel: Annotated[
        cGcSpaceshipTravelData, Field(cGcSpaceshipTravelData, 0x538)
    ]
    WingmanPathData: Annotated[
        cGcShipAIPlanetPatrolData, Field(cGcShipAIPlanetPatrolData, 0x580)
    ]
    DebugShipSpawns: Annotated[
        basic.cTkDynamicArray[cGcAIShipDebugSpawnData],
        Field(basic.cTkDynamicArray[cGcAIShipDebugSpawnData], 0x5B8),
    ]
    EnergyShield: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x5C8)
    ]
    EnergyShieldDepletedEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x5D8)]
    EnergyShieldStartRechargeEffect: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x5E8)
    ]
    EnergyShieldStartRechargeFromDepletedEffect: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x5F8)
    ]
    HangarFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x608)
    ]
    LegacyHangarFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x618)
    ]
    SpaceBattleGuardsRange: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x628),
    ]
    SpaceBattlePirateRange: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x638),
    ]
    SpaceBattleSpawnAngle: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x648),
    ]
    SpaceBattleSpawnOffset: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x658),
    ]
    SpaceBattleSpawnPitch: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x668),
    ]
    SpaceBattleSpawnRange: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x678),
    ]
    SpaceBattleSunAroundAngle: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x688),
    ]
    SpaceBattleSunHeightAngle: Annotated[
        basic.cTkDynamicArray[basic.Vector2f],
        Field(basic.cTkDynamicArray[basic.Vector2f], 0x698),
    ]
    TradeRouteColours: Annotated[
        basic.cTkDynamicArray[basic.Colour],
        Field(basic.cTkDynamicArray[basic.Colour], 0x6A8),
    ]
    CombatEffectsComponentData: Annotated[
        cGcCombatEffectsComponentData, Field(cGcCombatEffectsComponentData, 0x6B8)
    ]
    ShipBullet: Annotated[cGcProjectileLineData, Field(cGcProjectileLineData, 0x700)]
    Death: Annotated[cGcShipAIDeathData, Field(cGcShipAIDeathData, 0x728)]
    FreighterLightHitCurve: Annotated[cTkHitCurveData, Field(cTkHitCurveData, 0x744)]
    ConeSpawnOffsetFactor: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x750)]
    FreighterMiniSpeeds: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x758)]
    PirateFreighterAttackRange: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x760)]
    PoliceSideOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x768)]
    PoliceUpOffset: Annotated[basic.Vector2f, Field(basic.Vector2f, 0x770)]
    AbandonedSystemShipSpawnProbablity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x778)
    ]
    ArrivalStaggerOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x77C)]
    AsteroidMiningMaxAsteroidRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x780)
    ]
    AsteroidMiningMaxMiningTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x784)]
    AsteroidMiningMaxViewAnglePitch: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x788)
    ]
    AsteroidMiningMaxViewAngleYaw: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x78C)
    ]
    AsteroidMiningMinDistFromPlayer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x790)
    ]
    AsteroidMiningMinMiningAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x794)
    ]
    AsteroidMiningMinViewAnglePitch: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x798)
    ]
    AsteroidMiningSearchRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x79C)]
    AsteroidShootAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A0)]
    AtmosphereEffectMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A4)]
    AtmosphereEffectMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7A8)]
    AtmosphereTerminalSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7AC)]
    AttackAfterSpawnTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7B0)]
    AttackAimTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7B4)]
    AttackBuildingApproachDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7B8)
    ]
    AttackBuildingAttackRunDistTolerance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7BC)
    ]
    AttackBuildingBugOutDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7C0)
    ]
    AttackBuildingBugOutSpeedUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C4)]
    AttackBuildingBugOutTurnUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7C8)]
    AttackBuildingFiringAngleTolerance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7CC)
    ]
    AttackBuildingGetThereBoost: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7D0)]
    AttackBuildingNextRunAngleDeltaMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7D4)
    ]
    AttackBuildingNextRunAngleDeltaMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7D8)
    ]
    AttackBuildingRunAngleMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7DC)]
    AttackBuildingRunAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7E0)]
    AttackBuildingRunStartDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7E4)
    ]
    AttackBuildingTargetGroundOffsetScaleEnd: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7E8)
    ]
    AttackBuildingTargetGroundOffsetScaleStart: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7EC)
    ]
    AttackFreighterAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7F0)]
    AttackFreighterApproach: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7F4)]
    AttackFreighterApproachDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7F8)
    ]
    AttackFreighterAttackRunStartDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x7FC)
    ]
    AttackFreighterBugOutDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x800)
    ]
    AttackFreighterButOutSpeedUp: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x804)
    ]
    AttackFreighterButOutTurnUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x808)]
    AttackFreighterGetThereBoost: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x80C)
    ]
    AttackFreighterRunOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x810)]
    AttackFreighterWingmanAlignMinDist: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x814)
    ]
    AttackFreighterWingmanAlignRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x818)
    ]
    AttackFreighterWingmanLock: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x81C)]
    AttackFreighterWingmanLockAlign: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x820)
    ]
    AttackFreighterWingmanMaxForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x824)
    ]
    AttackFreighterWingmanOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x828)
    ]
    AttackFreighterWingmanRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x82C)
    ]
    AttackFreighterWingmanStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x830)]
    AttackMinimumTimeBeforeTargetSwitch: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x834)
    ]
    AttackRunSlowdown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x838)]
    AttackShipAvoidStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x83C)]
    AttackTooCloseMinRelSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x840)]
    BattleSpawnStationMinDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x844)
    ]
    BountySpawnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x848)]
    CircleApproachDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x84C)]
    CollisionRayLengthMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x850)]
    CollisionRayLengthMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x854)]
    CollisionReactionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x858)]
    ConeSpawnFlattenDown: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x85C)]
    ConeSpawnFlattenUp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x860)]
    CrashedShipBrokenSlotChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x864)]
    CrashedShipBrokenTechChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x868)]
    CrashedShipGeneralCostDiscount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x86C)
    ]
    CrashedShipMinNonBrokenSlots: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x870)
    ]
    CrashedShipRepairSlotCostIncreaseFactor: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x874)
    ]
    CrashedShipTechSlotsCostDiscount: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x878)
    ]
    DirectionBrakeThresholdSq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x87C)]
    DistanceFlareFlickerAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x880)]
    DistanceFlareFlickerFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x884)]
    DistanceFlareMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x888)]
    DistanceFlareMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x88C)]
    DistanceFlareMinScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x890)]
    DistanceFlareMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x894)]
    DistanceFlareRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x898)]
    DistanceFlareSpeedRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x89C)]
    DockingLandingBounceHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8A0)]
    DockingLandingBounceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8A4)]
    DockingLandingTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8A8)]
    DockingLandingTimeDirectional: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x8AC)
    ]
    DockingRotateSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8B0)]
    DockingRotateStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8B4)]
    DockingSpringTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8B8)]
    DockingWaitDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8BC)]
    DockWaitMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C0)]
    DockWaitMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C4)]
    EnergyShieldFadeInRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8C8)]
    EnergyShieldFadeMinOpacityInCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x8CC)
    ]
    EnergyShieldFadeNonPlayerHitOpacity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x8D0)
    ]
    EnergyShieldFadeOutRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8D4)]
    EnergyShieldFreighterFadeMinOpacityInCombat: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x8D8)
    ]
    EngineFireSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8DC)]
    EngineFlareAccelMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8E0)]
    EngineFlareAccelMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8E4)]
    EngineFlareOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8E8)]
    EngineFlareSizeMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8EC)]
    EngineFlareSizeMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8F0)]
    EngineFlareVibrateAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8F4)]
    EngineFlareVibrateFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8F8)]
    EscapeRoll: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x8FC)]
    EscapeRollPlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x900)]
    EscapeRollTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x904)]
    EscapeRollTimePlanet: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x908)]
    FinalDeathExplosionScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x90C)]
    FinalDeathExplosionTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x910)]
    FinalDeathFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x914)]
    FlybyCloseOdds: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x918)]
    FlybyHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x91C)]
    FlybyLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x920)]
    FlybyOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x924)]
    FlybyPlanetLandingProbability: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x928)
    ]
    FreighterAlertLightCapitalSize: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x92C)
    ]
    FreighterAlertLightIntensity: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x930)
    ]
    FreighterAlertLightTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x934)]
    FreighterAlertThreshold: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x938)]
    FreighterAlertTimeOutMinTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x93C)
    ]
    FreighterAlertTimeOutRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x940)]
    FreighterAttackAlertThreshold: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x944)
    ]
    FreighterAttackDisengageDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x948)
    ]
    FreighterImpactScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x94C)]
    FreighterLaunchStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x950)]
    FreighterLaunchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x954)]
    FreighterMaxNumLaunchedShips: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x958)
    ]
    FreighterRegisterHitCooldown: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x95C)
    ]
    FreighterScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x960)]
    FreighterShipLaunchSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x964)]
    FreighterSpawnMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x968)]
    FreighterSpawnRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x96C)]
    FreighterSpawnRate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x970)]
    FreighterSpawnViewAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x974)]
    FreighterSpawnVisibleFreightersDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x978)
    ]
    FrigateSpawnMargin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x97C)]
    GroundCircleHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x980)]
    GroundCircleHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x984)]
    HeightTestSampleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x988)]
    HeightTestSampleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x98C)]
    LandingDirectionalHoverPointReachedDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x990)
    ]
    LandingHoverPointReachedDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x994)
    ]
    LandingLongTipAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x998)]
    LandingManeuvreAlignTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x99C)]
    LandingManuevreTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9A0)]
    LandingTipAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9A4)]
    LaserHitOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9A8)]
    MaxDifficultySpaceCombatSpeedExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x9AC)
    ]
    MaxDifficultySpaceCombatTurnExtra: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x9B0)
    ]
    MaxNumActivePolice: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9B4)]
    MaxNumActivePoliceRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9B8)]
    MaxNumActiveTraderRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9BC)]
    MaxNumActiveTraders: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9C0)]
    MaxNumFreighters: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9C4)]
    MaxNumTurretMissiles: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9C8)]
    MaxTorque: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9CC)]
    MinAggroDamage: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9D0)]
    MinimumCircleTimeBeforeLanding: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x9D4)
    ]
    MinimumTimeBetweenOutpostLandings: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x9D8)
    ]
    MinLaserFireTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9DC)]
    MissileLaunchSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9E0)]
    MissileRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9E4)]
    MoveAvoidRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9E8)]
    MoveHeightAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9EC)]
    MoveHeightCheckTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9F0)]
    MoveHeightNumSamples: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x9F4)]
    MoveHeightSampleSectionSize: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9F8)]
    OrbitHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x9FC)]
    OutpostDockAIApproachSpeedForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA00)
    ]
    OutpostDockAIGetToApproachBrakeForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA04)
    ]
    OutpostDockAIGetToApproachForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA08)
    ]
    OutpostDockApproachDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA0C)]
    OutpostDockApproachRenderFlickerOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA10)
    ]
    OutpostDockApproachRenderRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA14)
    ]
    OutpostDockApproachSpeedForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA18)
    ]
    OutpostDockApproachSpeedUpDamper: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA1C)
    ]
    OutpostDockApproachUpAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA20)]
    OutpostDockGetToApproachBrakeForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA24)
    ]
    OutpostDockGetToApproachExtraBrakeForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA28)
    ]
    OutpostDockGetToApproachForce: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA2C)
    ]
    OutpostDockMaxApproachSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA30)]
    OutpostDockMaxForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA34)]
    OutpostDockMaxTipLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA38)]
    OutpostDockMinTipLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA3C)]
    OutpostDockOverspeedBrake: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA40)]
    OutpostDockUpAlignMaxAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA44)]
    OutpostDockUpAlignMaxAngleFirstPerson: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA48)
    ]
    OutpostLandingNoiseAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA4C)]
    OutpostLandingNoiseFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA50)]
    OutpostLandingNoiseOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA54)]
    OutpostToLandingDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA58)]
    PirateArriveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA5C)]
    PirateBattleInterestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA60)]
    PirateBattleMaxTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA64)]
    PirateBattleStartSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA68)]
    PirateExtraDamage: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA6C)]
    PirateFlybyLength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA70)]
    PirateFreighterBattleDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA74)
    ]
    PirateFreighterSpawnAttackAngle: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA78)
    ]
    PirateFreighterSpawnAttackOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA7C)
    ]
    PirateFreighterSpawnAttackSpread: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA80)
    ]
    PirateFreighterWarpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA84)]
    PirateInterestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA88)]
    PirateMaintainBuildingTargetTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xA8C)
    ]
    PiratePlayerAttackRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA90)]
    PirateSpawnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA94)]
    PirateSpawnSpacing: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA98)]
    PirateStartSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xA9C)]
    PitchFlip: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAA0)]
    PlanetaryPirateHostileShipPerceptionRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAA4)
    ]
    PlanetaryPirateRaidFocusBuildingsTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAA8)
    ]
    PlanetaryPirateRaidMaxTradersJoinCombat: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xAAC)
    ]
    PlanetaryPirateRaidTradersEngageTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAB0)
    ]
    PlanetUpAlignTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAB4)]
    PoliceAbortRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAB8)]
    PoliceArriveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xABC)]
    PoliceEntranceCargoAttackWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC0)
    ]
    PoliceEntranceCargoOpenCommsWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC4)
    ]
    PoliceEntranceCargoProbingTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAC8)
    ]
    PoliceEntranceCargoScanHailNotificationWaitTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xACC)
    ]
    PoliceEntranceCargoScanStartTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAD0)
    ]
    PoliceEntranceEscalateIncomingTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAD4)
    ]
    PoliceEntranceEscalateProbingTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAD8)
    ]
    PoliceEntranceProbe: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xADC)]
    PoliceEntranceStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAE0)]
    PoliceEscapeMinTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAE4)]
    PoliceEscapeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAE8)]
    PoliceFreighterLaserActiveTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAEC)
    ]
    PoliceFreighterLaserRandomExtraPauseMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAF0)
    ]
    PoliceFreighterLaserRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xAF4)]
    PoliceFreighterLaserShootTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xAF8)
    ]
    PoliceFreighterProjectileBurstCount: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xAFC)
    ]
    PoliceFreighterProjectileBurstTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB00)
    ]
    PoliceFreighterProjectileModulo: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0xB04)
    ]
    PoliceFreighterProjectilePauseTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB08)
    ]
    PoliceFreighterProjectileRandomExtraPauseMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB0C)
    ]
    PoliceFreighterProjectileRange: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB10)
    ]
    PoliceFreighterWarpOutRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB14)]
    PoliceLaunchDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB18)]
    PoliceLaunchSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB1C)]
    PoliceLaunchTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB20)]
    PoliceNumPerTarget: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB24)]
    PolicePauseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB28)]
    PolicePauseTimeSpaceBattle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB2C)]
    PoliceSpawnViewAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB30)]
    PoliceStationEngageRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB34)]
    PoliceStationNumToLaunch: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xB38)]
    PoliceStationWaveTimer: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB3C)]
    PoliceWarnBeaconPulseTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB40)]
    RewardLootAngularSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB44)]
    RewardLootOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB48)]
    RewardLootOffsetSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB4C)]
    RollAmount: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB50)]
    RollMinTurnAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB54)]
    SalvageRemovalTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB58)]
    SalvageTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB5C)]
    SalvageValueMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB60)]
    ScaleHeightMax: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB64)]
    ScaleHeightMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB68)]
    Scaler: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB6C)]
    ScalerMaxDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB70)]
    ScalerMinDist: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB74)]
    ScaleTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB78)]
    SentinelGunBrokenSlotChance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB7C)]
    ShieldCollisionRadiusMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB80)
    ]
    ShipAlertPirateRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB84)]
    ShipAngularFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB88)]
    ShipEscapeTimeBeforeWarpOut: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB8C)]
    ShipEscortBackForceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB90)]
    ShipEscortForwardOffsetScaleMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB94)
    ]
    ShipEscortForwardOffsetScaleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xB98)
    ]
    ShipEscortFwdForceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xB9C)]
    ShipEscortLockOnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA0)]
    ShipEscortPerpForceTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBA4)]
    ShipEscortRadialOffsetScaleMax: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBA8)
    ]
    ShipEscortRadialOffsetScaleMin: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBAC)
    ]
    ShipEscortVelocityBand: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB0)]
    ShipEscortVelocityBandForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB4)]
    ShipSpawnAnomalyRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBB8)]
    ShipSpawnStationRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBBC)]
    SpaceBattleFlybyTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC0)]
    SpaceBattleGuardOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC4)]
    SpaceBattleGuardUpOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBC8)]
    SpaceBattleInitialPirateOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBCC)
    ]
    SpaceBattleInitialPirateUpOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBD0)
    ]
    SpaceBattleObstructionRadius: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBD4)
    ]
    SpaceStationTraderRequestTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBD8)
    ]
    TakeOffExitHeightOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBDC)]
    TakeOffExtraAIHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE0)]
    TakeOffHoverPointReachedDistance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xBE4)
    ]
    TraderArriveSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBE8)]
    TraderArriveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBEC)]
    TraderAtTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF0)]
    TraderAtTimeBack: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xBF4)]
    TraderIgnoreHits: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xBF8)]
    TradeRouteDivisions: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xBFC)]
    TradeRouteFlickerAmp: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC00)]
    TradeRouteFlickerFreq: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC04)]
    TradeRouteFollowOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC08)]
    TradeRouteMaxNum: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0xC0C)]
    TradeRouteSeekOutpostRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC10)]
    TradeRouteSlowRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC14)]
    TradeRouteSlowSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC18)]
    TradeRouteSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC1C)]
    TradeRouteSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC20)]
    TradeRouteStationRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC24)]
    TradeRouteTrailDrawDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC28)]
    TradeRouteTrailFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC2C)]
    TradeRouteTrailTimeOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC30)]
    TraderPerpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC34)]
    TraderPostCombatRequestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC38)]
    TraderRequestTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC3C)]
    TraderVelocityBand: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC40)]
    TraderVelocityBandForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC44)]
    TraderWantedTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC48)]
    TradingPostTraderRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC4C)]
    TradingPostTraderRangeSpace: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC50)]
    TradingPostTraderRequestTime: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xC54)
    ]
    TrailLandingFadeTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC58)]
    TrailScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC5C)]
    TrailScaleFreighterMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC60)]
    TrailScaleMaxScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC64)]
    TrailScaleMinDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC68)]
    TrailScaleRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC6C)]
    TrailSpeedFadeFalloff: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC70)]
    TrailSpeedFadeMinSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC74)]
    TravelMinBoostTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC78)]
    TurretAlertLightIntensity: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC7C)]
    TurretOriginOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC80)]
    TurretRandomAIShipOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC84)]
    TurretRandomOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC88)]
    VisibleDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC8C)]
    WarpFadeInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC90)]
    WarpForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC94)]
    WarpInAudioFXDelay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC98)]
    WarpInDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xC9C)]
    WarpInPlayerLocatorMinOffset: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0xCA0)
    ]
    WarpInPlayerLocatorTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA4)]
    WarpInPostSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCA8)]
    WarpInPostSpeedFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCAC)]
    WarpInTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB0)]
    WarpInTimeFreighter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB4)]
    WarpInVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCB8)]
    WarpOutDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCBC)]
    WarpSpeed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC0)]
    WingmanAlign: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC4)]
    WingmanAtTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCC8)]
    WingmanAtTimeBack: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCCC)]
    WingmanHeightAdjust: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD0)]
    WingmanLockArriveTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD4)]
    WingmanLockBetweenTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCD8)]
    WingmanLockDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCDC)]
    WingmanMinHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE0)]
    WingmanOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE4)]
    WingmanOffsetStart: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCE8)]
    WingmanPerpTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCEC)]
    WingmanRotate: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF0)]
    WingmanSideOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF4)]
    WingmanStartTime: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCF8)]
    WingmanVelocityBand: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xCFC)]
    WingmanVelocityBandForce: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD00)]
    WitnessHearingRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD04)]
    WitnessSightAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD08)]
    WitnessSightRange: Annotated[ctypes.c_float, Field(ctypes.c_float, 0xD0C)]
    TradeRouteIcon: Annotated[
        basic.cTkFixedString0x100, Field(basic.cTkFixedString0x100, 0xD10)
    ]
    PirateAttackableBuildingClasses: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0xE10)
    ]
    AtmosphereEffectEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE4C)]
    AttackRepositionBoost: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE4D)]
    AttackShipsFollowLeader: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE4E)]
    DisableTradeRoutes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE4F)]
    DisplayShipAttackTypes: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE50)]
    EnableLoot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE51)]
    EnergyShieldAlwaysVisible: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE52)]
    EnergyShieldsEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE53)]
    FillUpOutposts: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE54)]
    FreighterAlertLights: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE55)]
    FreighterIgnorePlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE56)]
    FreightersAlwaysAttackPlayer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE57)]
    FreightersSamePalette: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE58)]
    GroundEffectEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE59)]
    PoliceSpawnEffect: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE5A)]
    ScaleDisabledWhenOnFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE5B)]
    TradersAttackPirates: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xE5C)]
    TrailScaleCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xE5D)
    ]
    WarpInCurve: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0xE5E)
    ]


@partial_struct
class cGcRepairTechData(Structure):
    MaintenanceContainer: Annotated[
        cGcMaintenanceContainer, Field(cGcMaintenanceContainer, 0x0)
    ]
    InventoryIndex: Annotated[cGcInventoryIndex, Field(cGcInventoryIndex, 0x1A0)]
    InventorySubIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1A8)]
    InventoryType: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x1AC)]


@partial_struct
class cGcPlayerStateData(Structure):
    TerrainEditData: Annotated[cGcTerrainEditsBuffer, Field(cGcTerrainEditsBuffer, 0x0)]
    SettlementStatesV2: Annotated[
        cGcSettlementState, Field(cGcSettlementState, 0x3C780)
    ]
    ArchivedShipOwnership: Annotated[
        cGcArchivedShipData, Field(cGcArchivedShipData, 0x5DAC0)
    ]
    ShipOwnership: Annotated[
        cGcPlayerOwnershipData, Field(cGcPlayerOwnershipData, 0x64360)
    ]
    ArchivedMultitools: Annotated[
        cGcArchivedMultitoolData, Field(cGcArchivedMultitoolData, 0x67D20)
    ]
    FreighterFleet: Annotated[
        cGcFreighterSaveData, Field(cGcFreighterSaveData, 0x6AEA0)
    ]
    VehicleOwnership: Annotated[
        cGcPlayerOwnershipData, Field(cGcPlayerOwnershipData, 0x6D6A0)
    ]
    Multitools: Annotated[cGcMultitoolData, Field(cGcMultitoolData, 0x6F850)]
    NPCWorkers: Annotated[cGcNPCWorkerData, Field(cGcNPCWorkerData, 0x707B0)]
    PlanetPositions: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70A30)]
    MultiplayerSpawn: Annotated[
        cGcPlayerSpawnStateData, Field(cGcPlayerSpawnStateData, 0x70B30)
    ]
    OtherSideOfPortalReturnBase: Annotated[
        cGcTeleportEndpoint, Field(cGcTeleportEndpoint, 0x70C10)
    ]
    SkiffData: Annotated[cGcSkiffSaveData, Field(cGcSkiffSaveData, 0x70C90)]
    HoloExplorerInteraction: Annotated[
        cGcInteractionData, Field(cGcInteractionData, 0x70CC0)
    ]
    HoloNooneInteraction: Annotated[
        cGcInteractionData, Field(cGcInteractionData, 0x70CE0)
    ]
    HoloScepticInteraction: Annotated[
        cGcInteractionData, Field(cGcInteractionData, 0x70D00)
    ]
    AnomalyPositionOverride: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x70D20)]
    FirstShipPosition: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x70D30)]
    FirstSpawnPosition: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x70D40)]
    FreighterMatrixAt: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70D50)]
    FreighterMatrixPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70D60)]
    FreighterMatrixUp: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70D70)]
    GraveMatrixLookAt: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x70D80)]
    GraveMatrixUp: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x70D90)]
    GravePosition: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x70DA0)]
    NexusMatrixAt: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70DB0)]
    NexusMatrixPos: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70DC0)]
    NexusMatrixUp: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x70DD0)]
    PortalMarkerPosition_Local: Annotated[
        basic.Vector4f, Field(basic.Vector4f, 0x70DE0)
    ]
    PortalMarkerPosition_Offset: Annotated[
        basic.Vector4f, Field(basic.Vector4f, 0x70DF0)
    ]
    StartGameShipPosition: Annotated[basic.Vector4f, Field(basic.Vector4f, 0x70E00)]
    Eggs: Annotated[cGcPetData, Field(cGcPetData, 0x70E10)]
    Pets: Annotated[cGcPetData, Field(cGcPetData, 0x732A0)]
    FishingRecord: Annotated[cGcFishingRecord, Field(cGcFishingRecord, 0x75730)]
    PetAccessoryCustomisation: Annotated[
        cGcPetCustomisationData, Field(cGcPetCustomisationData, 0x76F30)
    ]
    CharacterCustomisationData: Annotated[
        cGcCharacterCustomisationSaveData,
        Field(cGcCharacterCustomisationSaveData, 0x78520),
    ]
    HotActions: Annotated[cGcHotActionsSaveData, Field(cGcHotActionsSaveData, 0x78FB0)]
    SquadronPilots: Annotated[
        cGcSquadronPilotData, Field(cGcSquadronPilotData, 0x79370)
    ]
    WonderCreatureRecords: Annotated[cGcWonderRecord, Field(cGcWonderRecord, 0x795F0)]
    Chest10Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x79758)
    ]
    Chest1Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x798B8)
    ]
    Chest2Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x79A18)
    ]
    Chest3Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x79B78)
    ]
    Chest4Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x79CD8)
    ]
    Chest5Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x79E38)
    ]
    Chest6Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x79F98)
    ]
    Chest7Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7A0F8)
    ]
    Chest8Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7A258)
    ]
    Chest9Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7A3B8)
    ]
    ChestMagic2Inventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7A518)
    ]
    ChestMagicInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7A678)
    ]
    CookingIngredientsInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7A7D8)
    ]
    CorvetteStorageInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7A938)
    ]
    FishBaitBoxInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7AA98)
    ]
    FishPlatformInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7ABF8)
    ]
    FoodUnitInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7AD58)
    ]
    FreighterInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7AEB8)
    ]
    FreighterInventory_Cargo: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B018)
    ]
    FreighterInventory_TechOnly: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B178)
    ]
    GraveInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B2D8)
    ]
    Inventory: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B438)]
    Inventory_Cargo: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B598)
    ]
    Inventory_TechOnly: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B6F8)
    ]
    RocketLockerInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B858)
    ]
    ShipInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7B9B8)
    ]
    WeaponInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x7BB18)
    ]
    WonderTreasureRecords: Annotated[cGcWonderRecord, Field(cGcWonderRecord, 0x7BC78)]
    SettlementHistory: Annotated[
        cGcSettlementHistory, Field(cGcSettlementHistory, 0x7BDB0)
    ]
    WonderCustomRecords: Annotated[cGcWonderRecord, Field(cGcWonderRecord, 0x7BED0)]
    Outfits: Annotated[
        cGcCharacterCustomisationData, Field(cGcCharacterCustomisationData, 0x7BFF0)
    ]
    StoredInteractions: Annotated[
        cGcInteractionBuffer, Field(cGcInteractionBuffer, 0x7C0F8)
    ]
    WonderPlanetRecords: Annotated[cGcWonderRecord, Field(cGcWonderRecord, 0x7C200)]
    WonderWeirdBasePartRecords: Annotated[
        cGcWonderRecord, Field(cGcWonderRecord, 0x7C308)
    ]
    PlanetSeeds: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x7C410)]
    WonderFloraRecords: Annotated[cGcWonderRecord, Field(cGcWonderRecord, 0x7C510)]
    WonderMineralRecords: Annotated[cGcWonderRecord, Field(cGcWonderRecord, 0x7C5D0)]
    SeenStories: Annotated[
        cGcStoryPageSeenDataArray, Field(cGcStoryPageSeenDataArray, 0x7C690)
    ]
    CurrentFreighter: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x7C720)]
    CurrentFreighterNPC: Annotated[
        cGcResourceElement, Field(cGcResourceElement, 0x7C768)
    ]
    CurrentShip: Annotated[cGcResourceElement, Field(cGcResourceElement, 0x7C7B0)]
    SyncBuffersData: Annotated[
        cGcSyncBufferSaveDataArray, Field(cGcSyncBufferSaveDataArray, 0x7C7F8)
    ]
    CurrentWeapon: Annotated[cGcExactResource, Field(cGcExactResource, 0x7C838)]
    VisitedPortal: Annotated[cGcPortalSaveData, Field(cGcPortalSaveData, 0x7C858)]
    Chest10Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C878)]
    Chest1Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C890)]
    Chest2Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C8A8)]
    Chest3Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C8C0)]
    Chest4Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C8D8)]
    Chest5Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C8F0)]
    Chest6Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C908)]
    Chest7Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C920)]
    Chest8Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C938)]
    Chest9Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C950)]
    ChestMagic2Layout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C968)]
    ChestMagicLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C980)]
    CookingIngredientsLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C998)
    ]
    CorvetteStorageLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C9B0)
    ]
    FishBaitBoxLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C9C8)]
    FishPlatformLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C9E0)
    ]
    FoodUnitLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7C9F8)]
    FreighterCargoLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x7CA10)
    ]
    FreighterLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7CA28)]
    RocketLockerLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x7CA40)
    ]
    ShipLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7CA58)]
    WeaponLayout: Annotated[cGcInventoryLayout, Field(cGcInventoryLayout, 0x7CA70)]
    BannerTitleId: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x7CA88)]
    BaseBuildingObjects: Annotated[
        basic.cTkDynamicArray[cGcPersistentBBObjectData],
        Field(basic.cTkDynamicArray[cGcPersistentBBObjectData], 0x7CA98),
    ]
    CurrentFreighterHomeSystemSeed: Annotated[
        basic.GcSeed, Field(basic.GcSeed, 0x7CAA8)
    ]
    CurrentMissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x7CAB8)]
    ExpeditionSeedsSelectedToday: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint64],
        Field(basic.cTkDynamicArray[ctypes.c_uint64], 0x7CAC8),
    ]
    FleetExpeditions: Annotated[
        basic.cTkDynamicArray[cGcFleetExpeditionSaveData],
        Field(basic.cTkDynamicArray[cGcFleetExpeditionSaveData], 0x7CAD8),
    ]
    FleetFrigates: Annotated[
        basic.cTkDynamicArray[cGcFleetFrigateSaveData],
        Field(basic.cTkDynamicArray[cGcFleetFrigateSaveData], 0x7CAE8),
    ]
    FleetSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x7CAF8)]
    FoodUnitItem: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x7CB08)]
    FreighterEngineEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x7CB18)]
    GalaxyWaypoints: Annotated[
        basic.cTkDynamicArray[cGcGalaxyWaypoint],
        Field(basic.cTkDynamicArray[cGcGalaxyWaypoint], 0x7CB28),
    ]
    InteractionProgressTable: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x7CB38),
    ]
    JetpackEffect: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x7CB48)]
    KnownProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x7CB58),
    ]
    KnownRefinerRecipes: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x7CB68),
    ]
    KnownSpecials: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x7CB78),
    ]
    KnownTech: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x7CB88),
    ]
    KnownWordGroups: Annotated[
        basic.cTkDynamicArray[cGcWordGroupKnowledge],
        Field(basic.cTkDynamicArray[cGcWordGroupKnowledge], 0x7CB98),
    ]
    KnownWords: Annotated[
        basic.cTkDynamicArray[cGcWordKnowledge],
        Field(basic.cTkDynamicArray[cGcWordKnowledge], 0x7CBA8),
    ]
    LastPortal: Annotated[
        basic.cTkDynamicArray[cGcPortalSaveData],
        Field(basic.cTkDynamicArray[cGcPortalSaveData], 0x7CBB8),
    ]
    MaintenanceInteractions: Annotated[
        basic.cTkDynamicArray[cGcMaintenanceContainer],
        Field(basic.cTkDynamicArray[cGcMaintenanceContainer], 0x7CBC8),
    ]
    MarkerStack: Annotated[
        basic.cTkDynamicArray[cGcScanEventSave],
        Field(basic.cTkDynamicArray[cGcScanEventSave], 0x7CBD8),
    ]
    MissionProgress: Annotated[
        basic.cTkDynamicArray[cGcPlayerMissionProgress],
        Field(basic.cTkDynamicArray[cGcPlayerMissionProgress], 0x7CBE8),
    ]
    MissionRecurrences: Annotated[
        basic.cTkDynamicArray[cGcMissionIDEpochPair],
        Field(basic.cTkDynamicArray[cGcMissionIDEpochPair], 0x7CBF8),
    ]
    NewMPMarkerStack: Annotated[
        basic.cTkDynamicArray[cGcScanEventSave],
        Field(basic.cTkDynamicArray[cGcScanEventSave], 0x7CC08),
    ]
    PersistentPlayerBases: Annotated[
        basic.cTkDynamicArray[cGcPersistentBase],
        Field(basic.cTkDynamicArray[cGcPersistentBase], 0x7CC18),
    ]
    PersonalMaintenanceInteractions: Annotated[
        basic.cTkDynamicArray[cGcMaintenanceContainer],
        Field(basic.cTkDynamicArray[cGcMaintenanceContainer], 0x7CC28),
    ]
    PreviousMissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x7CC38)]
    RedeemedPlatformRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x7CC48),
    ]
    RedeemedSeasonRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x7CC58),
    ]
    RedeemedTwitchRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x7CC68),
    ]
    RefinerBufferData: Annotated[
        basic.cTkDynamicArray[cGcMaintenanceContainer],
        Field(basic.cTkDynamicArray[cGcMaintenanceContainer], 0x7CC78),
    ]
    RefinerBufferKeys: Annotated[
        basic.cTkDynamicArray[cGcMaintenanceSaveKey],
        Field(basic.cTkDynamicArray[cGcMaintenanceSaveKey], 0x7CC88),
    ]
    RepairTechBuffer: Annotated[
        basic.cTkDynamicArray[cGcRepairTechData],
        Field(basic.cTkDynamicArray[cGcRepairTechData], 0x7CC98),
    ]
    SavedInteractionDialogTable: Annotated[
        basic.cTkDynamicArray[cGcSavedInteractionDialogData],
        Field(basic.cTkDynamicArray[cGcSavedInteractionDialogData], 0x7CCA8),
    ]
    SeenBaseBuildingObjects: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x7CCB8),
    ]
    SettlementLocalSaveData: Annotated[
        basic.cTkDynamicArray[cGcSettlementLocalSaveData],
        Field(basic.cTkDynamicArray[cGcSettlementLocalSaveData], 0x7CCC8),
    ]
    Stats: Annotated[
        basic.cTkDynamicArray[cGcPlayerStatsGroup],
        Field(basic.cTkDynamicArray[cGcPlayerStatsGroup], 0x7CCD8),
    ]
    SurveyedEventPositions: Annotated[
        basic.cTkDynamicArray[basic.Vector3f],
        Field(basic.cTkDynamicArray[basic.Vector3f], 0x7CCE8),
    ]
    TelemetryStats: Annotated[
        basic.cTkDynamicArray[cGcTelemetryStat],
        Field(basic.cTkDynamicArray[cGcTelemetryStat], 0x7CCF8),
    ]
    TeleportEndpoints: Annotated[
        basic.cTkDynamicArray[cGcTeleportEndpoint],
        Field(basic.cTkDynamicArray[cGcTeleportEndpoint], 0x7CD08),
    ]
    TradingSupplyData: Annotated[
        basic.cTkDynamicArray[cGcTradingSupplyData],
        Field(basic.cTkDynamicArray[cGcTradingSupplyData], 0x7CD18),
    ]
    UsedEntitlements: Annotated[
        basic.cTkDynamicArray[cGcSavedEntitlement],
        Field(basic.cTkDynamicArray[cGcSavedEntitlement], 0x7CD28),
    ]
    VisitedAtlasStationsData: Annotated[
        basic.cTkDynamicArray[cGcUniverseAddressData],
        Field(basic.cTkDynamicArray[cGcUniverseAddressData], 0x7CD38),
    ]
    VisitedSystems: Annotated[
        basic.cTkDynamicArray[ctypes.c_uint64],
        Field(basic.cTkDynamicArray[ctypes.c_uint64], 0x7CD48),
    ]
    WristScreenData: Annotated[
        basic.cTkDynamicArray[cGcInWorldUIScreenData],
        Field(basic.cTkDynamicArray[cGcInWorldUIScreenData], 0x7CD58),
    ]
    ActiveSpaceBattleUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CD68)]
    CorvetteDraftShipSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CD70)]
    CurrentMissionSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CD78)]
    FirstPurpleSystemUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CD80)]
    FreighterLastSpawnTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CD88)]
    HazardTimeAlive: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CD90)]
    LastCheckedForStatResetsTime: Annotated[
        ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CD98)
    ]
    LastKnownDay: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDA0)]
    LastUABeforePortalWarp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDA8)]
    MiniStationUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDB0)]
    MultiplayerLobbyID: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDB8)]
    MultiplayerPrivileges: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDC0)]
    PreviousMissionSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDC8)]
    StoryPortalSeed: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDD0)]
    SunTimer: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDD8)]
    TaggedPlanetUA: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDE0)]
    TimeAlive: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDE8)]
    TimeLastMiniStation: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDF0)]
    TimeLastSpaceBattle: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CDF8)]
    TimeStamp: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x7CE00)]
    SavedInteractionIndicies: Annotated[
        cGcSavedInteractionRaceData, Field(cGcSavedInteractionRaceData, 0x7CE08)
    ]
    WonderCustomRecordsExtraData: Annotated[
        cGcWonderRecordCustomData, Field(cGcWonderRecordCustomData, 0x7EAB8)
    ]
    CompletedAtlasAddresses: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7EDE8)
    ]
    NewAtlasStationAdressData: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7EEF0)
    ]
    AtlasStationAdressData: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7EFF8)
    ]
    DifficultyState: Annotated[
        cGcDifficultyStateData, Field(cGcDifficultyStateData, 0x7F0E8)
    ]
    Hazard: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7F154)]
    FreighterUniverseAddress: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F170)
    ]
    GameStartAddress1: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F188)
    ]
    GameStartAddress2: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F1A0)
    ]
    GraveUniverseAddress: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F1B8)
    ]
    MultiplayerUA: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F1D0)
    ]
    NexusUniverseAddress: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F1E8)
    ]
    PreviousUniverseAddress: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F200)
    ]
    UniverseAddress: Annotated[
        cGcUniverseAddressData, Field(cGcUniverseAddressData, 0x7F218)
    ]
    ActiveMultioolIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F230)]
    ActiveSpaceBattleLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F234)]
    BannerBackgroundColour: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F238)]
    BannerIcon: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F23C)]
    BannerMainColour: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F240)]
    BoltAmmo: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F244)]
    CorvetteEditAssociatedShipIndex: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7F248)
    ]
    Energy: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F24C)]
    FoodUnitAccumulator: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7F250)]
    Health: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F254)]
    HomeRealityIteration: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F258)]
    KnownPortalRunes: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F25C)]
    LaserAmmo: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F260)]
    MissionVersion: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F264)]
    Nanites: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F268)]
    NextSurveyedEventPositionIndex: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7F26C)
    ]
    PostMissionIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F270)]
    PrimaryPlanet: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F274)]
    PrimaryShip: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F278)]
    PrimaryVehicle: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F27C)]
    ProcTechIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F280)]
    ProgressionLevel: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F284)]
    PulseAmmo: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F288)]
    ScatterAmmo: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F28C)]
    SettlementStateRingBufferIndexV2: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x7F290)
    ]
    Shield: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F294)]
    ShipHealth: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F298)]
    ShipShield: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F29C)]
    Specials: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F2A0)]
    StartingPrimaryWeapon: Annotated[
        c_enum32[enums.cGcPlayerWeapons],
        Field(c_enum32[enums.cGcPlayerWeapons], 0x7F2A4),
    ]
    StartingSeasonNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F2A8)]
    StartingSecondaryWeapon: Annotated[
        c_enum32[enums.cGcPlayerWeapons],
        Field(c_enum32[enums.cGcPlayerWeapons], 0x7F2AC),
    ]
    TelemetryUploadVersion: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F2B0)]
    TradingSupplyDataIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F2B4)]
    Units: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F2B8)]
    VRCameraOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x7F2BC)]
    WarpsLastMiniStation: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F2C0)]
    WarpsLastSpaceBattle: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x7F2C4)]
    ShopNumber: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x7F2C8)]
    ShopTier: Annotated[ctypes.c_uint16, Field(ctypes.c_uint16, 0x7F2CA)]
    CorvetteEditShipName: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x7F2CC)
    ]
    SaveSummary: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x7F34C)
    ]
    PlayerFreighterName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x7F3CC)
    ]
    UnlockedPetSlots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F3EC)]
    GalacticMapRequests: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F3FE)]
    ShipUsesLegacyColours: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F40E)]
    SquadronUnlockedPilotSlots: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F41A)]
    BuildersKnown: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F41E)]
    FirstAtlasStationDiscovered: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F41F)]
    FreighterDismissed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F420)]
    HasAccessToNexus: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F421)]
    HasDiscoveredPurpleSystems: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F422)]
    HasGalacticMapRequestAllPurples: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x7F423)
    ]
    HasGalacticMapRequestFirstPurple: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x7F424)
    ]
    IsNew: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F425)]
    MultiShipEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F426)]
    NextLoadSpawnsWithFreshStart: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x7F427)
    ]
    OnOtherSideOfPortal: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F428)]
    RestartAllInactiveSeasonalMissions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x7F429)
    ]
    RevealBlackHoles: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F42A)]
    ShipNeedsTerrainPositioning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F42B)]
    SpaceGrave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F42C)]
    SpawnGrave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F42D)]
    UseSmallerBlackholeJumps: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F42E)]
    VehicleAIControlEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x7F42F)]


@partial_struct
class cGcModBasePart(Structure):
    ProductData: Annotated[cGcProductData, Field(cGcProductData, 0x0)]
    PartData: Annotated[cGcBaseBuildingEntry, Field(cGcBaseBuildingEntry, 0x300)]
    ID: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x548)]


@partial_struct
class cGcDefaultSaveData(Structure):
    State: Annotated[cGcPlayerStateData, Field(cGcPlayerStateData, 0x0)]
    Spawn: Annotated[cGcPlayerSpawnStateData, Field(cGcPlayerSpawnStateData, 0x7F430)]


@partial_struct
class cGcBaseBuildingPartsTable(Structure):
    Parts: Annotated[
        basic.cTkDynamicArray[cGcBaseBuildingPart],
        Field(basic.cTkDynamicArray[cGcBaseBuildingPart], 0x0),
    ]


@partial_struct
class cGcGenericMissionSequence(Structure):
    MissionColourOverride: Annotated[basic.Colour, Field(basic.Colour, 0x0)]
    TradingDataOverride: Annotated[cGcTradeData, Field(cGcTradeData, 0x10)]
    MissionBoardOptions: Annotated[
        cGcMissionBoardOptions, Field(cGcMissionBoardOptions, 0xF8)
    ]
    SeasonalLogTextOverrides: Annotated[
        cGcSeasonalLogOverrides, Field(cGcSeasonalLogOverrides, 0x178)
    ]
    DefaultItems: Annotated[
        cGcDefaultMissionItemsTable, Field(cGcDefaultMissionItemsTable, 0x1E8)
    ]
    MissionPageLocID: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x238)
    ]
    SettlementAbandonOSD: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x258)
    ]
    MissionDescriptions: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x278)
    ]
    MissionIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x290)]
    MissionIconNotSelected: Annotated[
        cTkTextureResource, Field(cTkTextureResource, 0x2A8)
    ]
    MissionIconSelected: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x2C0)]
    MissionProcDescriptionA: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x2D8)
    ]
    MissionProcDescriptionB: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x2F0)
    ]
    MissionProcDescriptionC: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x308)
    ]
    MissionProcDescriptionHeader: Annotated[
        cGcNumberedTextList, Field(cGcNumberedTextList, 0x320)
    ]
    MissionSubtitles: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0x338)]
    MissionTitles: Annotated[cGcNumberedTextList, Field(cGcNumberedTextList, 0x350)]
    CancelingConditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x368),
    ]
    Costs: Annotated[
        basic.cTkDynamicArray[cGcCostTableEntry],
        Field(basic.cTkDynamicArray[cGcCostTableEntry], 0x378),
    ]
    Dialog: Annotated[cGcAlienPuzzleTable, Field(cGcAlienPuzzleTable, 0x388)]
    FinalStageVersions: Annotated[
        basic.cTkDynamicArray[cGcGenericMissionVersionProgress],
        Field(basic.cTkDynamicArray[cGcGenericMissionVersionProgress], 0x398),
    ]
    MissionBuildMenuHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x3A8)]
    MissionID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x3B8)]
    NextMissionHint: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x3C8)]
    Rewards: Annotated[
        basic.cTkDynamicArray[cGcGenericRewardTableEntry],
        Field(basic.cTkDynamicArray[cGcGenericRewardTableEntry], 0x3D8),
    ]
    ScanEvents: Annotated[
        basic.cTkDynamicArray[cGcScanEventData],
        Field(basic.cTkDynamicArray[cGcScanEventData], 0x3E8),
    ]
    Stages: Annotated[
        basic.cTkDynamicArray[cGcGenericMissionStage],
        Field(basic.cTkDynamicArray[cGcGenericMissionStage], 0x3F8),
    ]
    StartingConditions: Annotated[
        basic.cTkDynamicArray[basic.NMSTemplate],
        Field(basic.cTkDynamicArray[basic.NMSTemplate], 0x408),
    ]
    UseCommunityMissionForLog: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x418)]
    WikiMissionBlockedBySeasons: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x428),
    ]

    class eAutoStartEnum(IntEnum):
        None_ = 0x0
        AllModes = 0x1
        Seasonal = 0x2
        OnSelected = 0x3

    AutoStart: Annotated[
        c_enum32[eAutoStartEnum], Field(c_enum32[eAutoStartEnum], 0x438)
    ]
    BeginCheckFrequency: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x43C)]
    CancelConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x440),
    ]

    class eMessageCompleteEnum(IntEnum):
        Default = 0x0
        Always = 0x1
        Never = 0x2

    MessageComplete: Annotated[
        c_enum32[eMessageCompleteEnum], Field(c_enum32[eMessageCompleteEnum], 0x444)
    ]

    class eMessageStartEnum(IntEnum):
        Default = 0x0
        Always = 0x1
        Never = 0x2

    MessageStart: Annotated[
        c_enum32[eMessageStartEnum], Field(c_enum32[eMessageStartEnum], 0x448)
    ]
    MissionCategory: Annotated[
        c_enum32[enums.cGcMissionCategory],
        Field(c_enum32[enums.cGcMissionCategory], 0x44C),
    ]

    class eMissionClassEnum(IntEnum):
        Primary = 0x0
        Secondary = 0x1
        ChainedSecondary = 0x2
        Guide = 0x3
        Wiki = 0x4
        Seasonal = 0x5
        Milestone = 0x6
        Atlas = 0x7
        BlackHole = 0x8
        FleetSupport = 0x9
        Settlement = 0xA

    MissionClass: Annotated[
        c_enum32[eMissionClassEnum], Field(c_enum32[eMissionClassEnum], 0x450)
    ]
    MissionPageHint: Annotated[
        c_enum32[enums.cGcMissionPageHint],
        Field(c_enum32[enums.cGcMissionPageHint], 0x454),
    ]
    MissionPriority: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x458)]
    StartConditionTest: Annotated[
        c_enum32[enums.cGcMissionConditionTest],
        Field(c_enum32[enums.cGcMissionConditionTest], 0x45C),
    ]
    MissionDescSwitchOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x460)
    ]
    MissionObjective: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x480)
    ]
    BlocksPinning: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A0)]
    CancelSetsComplete: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A1)]
    CanRenounce: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A2)]
    ForcesBuildMenuHint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A3)]
    ForcesPageHint: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A4)]
    IsLegacy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A5)]
    IsProceduralAllowed: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A6)]
    IsRecurring: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A7)]
    MissionHasColourOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A8)]
    MissionIsCritical: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4A9)]
    PrefixTitle: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4AA)]
    RequiresSettlement: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4AB)]
    RestartOnCompletion: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4AC)]
    StartIsCancel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4AD)]
    TakeCommunityMissionIDFromSeasonData: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4AE)
    ]
    TelemetryUpload: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4AF)]
    UseFirstPurpleSystemDetailsInLogInfo: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x4B0)
    ]
    UseScanEventDetailsInLogInfo: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B1)]
    UseSeasonTitleOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x4B2)]


@partial_struct
class cGcMissionTable(Structure):
    Missions: Annotated[
        cGcGenericMissionSequence, Field(cGcGenericMissionSequence, 0x0)
    ]


@partial_struct
class cGcProductTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcProductData],
        Field(basic.cTkDynamicArray[cGcProductData], 0x0),
    ]


@partial_struct
class cGcMaintenanceOverrideTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcMaintenanceOverride],
        Field(basic.cTkDynamicArray[cGcMaintenanceOverride], 0x0),
    ]


@partial_struct
class cGcSettlementPerksTable(Structure):
    Table: Annotated[
        basic.cTkDynamicArray[cGcSettlementPerkData],
        Field(basic.cTkDynamicArray[cGcSettlementPerkData], 0x0),
    ]


@partial_struct
class cGcProceduralProductTable(Structure):
    Table: Annotated[cGcProceduralProductData, Field(cGcProceduralProductData, 0x0)]


@partial_struct
class cGcScanEventTable(Structure):
    Events: Annotated[
        basic.cTkDynamicArray[cGcScanEventData],
        Field(basic.cTkDynamicArray[cGcScanEventData], 0x0),
    ]


@partial_struct
class cGcProjectileDataTable(Structure):
    Lasers: Annotated[
        basic.cTkDynamicArray[cGcLaserBeamData],
        Field(basic.cTkDynamicArray[cGcLaserBeamData], 0x0),
    ]
    Table: Annotated[
        basic.cTkDynamicArray[cGcProjectileData],
        Field(basic.cTkDynamicArray[cGcProjectileData], 0x10),
    ]


@partial_struct
class cGcExternalObjectList(Structure):
    Objects: Annotated[cGcEnvironmentSpawnData, Field(cGcEnvironmentSpawnData, 0x0)]


@partial_struct
class cGcShipOwnershipComponentData(Structure):
    Data: Annotated[cGcSpaceshipComponentData, Field(cGcSpaceshipComponentData, 0x0)]


@partial_struct
class cTkParticleData(Structure):
    SecondRotationInfo: Annotated[cTkEmitterRotation, Field(cTkEmitterRotation, 0x0)]
    ColourEnd: Annotated[basic.Colour, Field(basic.Colour, 0x50)]
    ColourMiddle: Annotated[basic.Colour, Field(basic.Colour, 0x60)]
    ColourStart: Annotated[basic.Colour, Field(basic.Colour, 0x70)]
    EmitterDirection: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x80)]
    RotateAroundEmitterAxis: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x90)]
    RotationAxis: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xA0)]
    RotationPivot: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xB0)]
    SpawnOffsetParams: Annotated[basic.Vector3f, Field(basic.Vector3f, 0xC0)]
    ParticleSize: Annotated[cTkParticleSize, Field(cTkParticleSize, 0xD0)]
    BurstData: Annotated[cTkParticleBurstData, Field(cTkParticleBurstData, 0x1E0)]
    AlphaThreshold: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x258)
    ]
    EmissionRate: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x290)
    ]
    EmitterLife: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x2C8)
    ]
    ParticleDamping: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x300)
    ]
    ParticleDrag: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x338)
    ]
    ParticleGravity: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x370)
    ]
    ParticleLife: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x3A8)
    ]
    ParticleSizeY: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x3E0)
    ]
    ParticleSpeedMultiplier: Annotated[
        cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x418)
    ]
    Rotation: Annotated[cTkEmitterFloatProperty, Field(cTkEmitterFloatProperty, 0x450)]
    _3DGeom: Annotated[basic.VariableSizeString, Field(basic.VariableSizeString, 0x488)]
    TrailPath: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x498)
    ]
    UserColour: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x4A8)]
    WindDrift: Annotated[cTkEmitterWindDrift, Field(cTkEmitterWindDrift, 0x4B8)]
    BillboardAlignment: Annotated[
        cTkEmitterBillboardAlignment, Field(cTkEmitterBillboardAlignment, 0x4D4)
    ]
    CameraDistanceFade: Annotated[cTkFloatRange, Field(cTkFloatRange, 0x4DC)]
    EmitFromParticleInfo: Annotated[
        cTkEmitFromParticleInfo, Field(cTkEmitFromParticleInfo, 0x4E4)
    ]

    class eAlignmentEnum(IntEnum):
        Rotation = 0x0
        Velocity = 0x1
        VelocityScreenSpace = 0x2

    Alignment: Annotated[
        c_enum32[eAlignmentEnum], Field(c_enum32[eAlignmentEnum], 0x4EC)
    ]
    AlphaVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4F0)]
    AudioEvent: Annotated[ctypes.c_uint32, Field(ctypes.c_uint32, 0x4F4)]
    Delay: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x4F8)]

    class eDragTypeEnum(IntEnum):
        IgnoreGravity = 0x0
        PhysicallyBased = 0x1
        ApplyWind = 0x2

    DragType: Annotated[c_enum32[eDragTypeEnum], Field(c_enum32[eDragTypeEnum], 0x4FC)]
    EmitterMidLifeRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x500)]

    class eEmitterQualityLevelEnum(IntEnum):
        All = 0x0
        Low = 0x1
        High = 0x2

    EmitterQualityLevel: Annotated[
        c_enum32[eEmitterQualityLevelEnum],
        Field(c_enum32[eEmitterQualityLevelEnum], 0x504),
    ]
    EmitterSpreadAngle: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x508)]
    EmitterSpreadAngleMin: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x50C)]

    class eFlipbookPlaybackRateEnum(IntEnum):
        Absolute = 0x0
        RelativeToMax = 0x1
        OnceToCompletion = 0x2
        Random = 0x3

    FlipbookPlaybackRate: Annotated[
        c_enum32[eFlipbookPlaybackRateEnum],
        Field(c_enum32[eFlipbookPlaybackRateEnum], 0x510),
    ]
    HueVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x514)]
    LightnessVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x518)]
    LimitLifetimeOnMove: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x51C)]
    MaxCount: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x520)]
    MaxRenderCameraHeight: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x524)]
    MaxRenderDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x528)]
    MaxSpawnDistance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x52C)]

    class eOnRefractionsDisabledEnum(IntEnum):
        Hide = 0x0
        AlphaBlend = 0x1

    OnRefractionsDisabled: Annotated[
        c_enum32[eOnRefractionsDisabledEnum],
        Field(c_enum32[eOnRefractionsDisabledEnum], 0x530),
    ]
    RotateAroundEmitter: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x534)]
    SaturationVariance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x538)]
    SoftFadeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x53C)]

    class eSpawnOffsetTypeEnum(IntEnum):
        Sphere = 0x0
        Box = 0x1
        Disc = 0x2
        Cone = 0x3
        Donut = 0x4
        Point = 0x5

    SpawnOffsetType: Annotated[
        c_enum32[eSpawnOffsetTypeEnum], Field(c_enum32[eSpawnOffsetTypeEnum], 0x540)
    ]
    StartOffset: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x544)]
    StartRotationVariation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x548)]
    SurfaceDistanceFadeStrength: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x54C)]
    TrackEmitterPosition: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x550)]
    TrailRatio: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x554)]
    UCoordinate: Annotated[
        c_enum32[enums.cTkCoordinateOrientation],
        Field(c_enum32[enums.cTkCoordinateOrientation], 0x558),
    ]
    VCoordinate: Annotated[
        c_enum32[enums.cTkCoordinateOrientation],
        Field(c_enum32[enums.cTkCoordinateOrientation], 0x55C),
    ]
    Variation: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x560)]
    VelocityInheritance: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x564)]
    EmitterLifeCurve1: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x568)
    ]
    EmitterLifeCurve2: Annotated[
        c_enum32[enums.cTkCurveType], Field(c_enum32[enums.cTkCurveType], 0x569)
    ]
    EnableSecondRotation: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56A)]
    FadeRefractionsAtScreenEdge: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56B)]
    GPURender: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56C)]
    Oneshot: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56D)]
    StartEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56E)]
    TrailIsRibbon: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x56F)]


@partial_struct
class cMapping(Structure):
    InfluencesOnMappedPoint: Annotated[
        basic.cTkDynamicArray[cInfluencesOnMappedPoint],
        Field(basic.cTkDynamicArray[cInfluencesOnMappedPoint], 0x0),
    ]
    NumMappedPoints: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x10)]
    NumSimI: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14)]
    NumSimJ: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x18)]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1C)]


@partial_struct
class cTkVoxelGeneratorSettingsElement(Structure):
    Max: Annotated[cTkVoxelGeneratorData, Field(cTkVoxelGeneratorData, 0x0)]
    Min: Annotated[cTkVoxelGeneratorData, Field(cTkVoxelGeneratorData, 0x1150)]


@partial_struct
class cGcPlanetGenerationIntermediateData(Structure):
    CreatureRoles: Annotated[
        cGcCreatureRoleDataTable, Field(cGcCreatureRoleDataTable, 0x0)
    ]
    CreatureAirFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x20)
    ]
    CreatureCaveFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x30)
    ]
    CreatureExtraWaterFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x40)
    ]
    CreatureLandFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x50)
    ]
    CreatureRobotFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x60)
    ]
    CreatureWaterFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x70)
    ]
    ExternalObjectListIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x80),
    ]
    ExternalObjectLists: Annotated[
        basic.cTkDynamicArray[cGcExternalObjectListOptions],
        Field(basic.cTkDynamicArray[cGcExternalObjectListOptions], 0x90),
    ]
    Seed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0xA0)]
    TerrainFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0xB0)
    ]
    Terrain: Annotated[cGcTerrainControls, Field(cGcTerrainControls, 0xC0)]
    Biome: Annotated[
        c_enum32[enums.cGcBiomeType], Field(c_enum32[enums.cGcBiomeType], 0x138)
    ]
    BiomeSubType: Annotated[
        c_enum32[enums.cGcBiomeSubType], Field(c_enum32[enums.cGcBiomeSubType], 0x13C)
    ]
    Class: Annotated[
        c_enum32[enums.cGcPlanetClass], Field(c_enum32[enums.cGcPlanetClass], 0x140)
    ]
    Size: Annotated[
        c_enum32[enums.cGcPlanetSize], Field(c_enum32[enums.cGcPlanetSize], 0x144)
    ]
    StarType: Annotated[
        c_enum32[enums.cGcGalaxyStarTypes],
        Field(c_enum32[enums.cGcGalaxyStarTypes], 0x148),
    ]
    TerrainSettingIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x14C)]
    Prime: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x150)]


@partial_struct
class cGcCustomisationGroup(Structure):
    GroupTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x0)
    ]
    BoneScales: Annotated[
        basic.cTkDynamicArray[cGcCustomisationBoneScales],
        Field(basic.cTkDynamicArray[cGcCustomisationBoneScales], 0x20),
    ]
    ColourGroups: Annotated[
        basic.cTkDynamicArray[cGcCustomisationColourGroup],
        Field(basic.cTkDynamicArray[cGcCustomisationColourGroup], 0x30),
    ]
    DescriptorOptions: Annotated[
        basic.cTkDynamicArray[cGcCustomisationDescriptorGroupOptions],
        Field(basic.cTkDynamicArray[cGcCustomisationDescriptorGroupOptions], 0x40),
    ]
    GroupID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x50)]
    TextureGroups: Annotated[
        basic.cTkDynamicArray[cGcCustomisationTextureGroup],
        Field(basic.cTkDynamicArray[cGcCustomisationTextureGroup], 0x60),
    ]
    CameraData: Annotated[
        cGcCustomisationCameraData, Field(cGcCustomisationCameraData, 0x70)
    ]
    ForceShowAllColourOptions: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA4)]
    IsBannerGroup: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0xA5)]


@partial_struct
class cGcCustomisationGroups(Structure):
    CustomisationGroups: Annotated[
        basic.cTkDynamicArray[cGcCustomisationGroup],
        Field(basic.cTkDynamicArray[cGcCustomisationGroup], 0x0),
    ]


@partial_struct
class cGcCustomisationRace(Structure):
    CustomisationGroups: Annotated[
        basic.cTkDynamicArray[cGcCustomisationGroup],
        Field(basic.cTkDynamicArray[cGcCustomisationGroup], 0x0),
    ]
    DescriptorGroupOption: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x10)]
    Presets: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x20),
    ]
    Scale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x30)]
    IsGek: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x34)]


@partial_struct
class cGcCustomisationUI(Structure):
    Common: Annotated[cGcCustomisationGroups, Field(cGcCustomisationGroups, 0x0)]
    Races: Annotated[
        basic.cTkDynamicArray[cGcCustomisationRace],
        Field(basic.cTkDynamicArray[cGcCustomisationRace], 0x10),
    ]
    RacesCameraData: Annotated[
        cGcCustomisationCameraData, Field(cGcCustomisationCameraData, 0x20)
    ]


@partial_struct
class cGcSeasonalGameModeData(Structure):
    SpecificPets: Annotated[cGcPetData, Field(cGcPetData, 0x0)]
    Inventory: Annotated[cGcInventoryContainer, Field(cGcInventoryContainer, 0x2490)]
    Inventory_Cargo: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x25F0)
    ]
    Inventory_TechOnly: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x2750)
    ]
    ShipInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x28B0)
    ]
    WeaponInventory: Annotated[
        cGcInventoryContainer, Field(cGcInventoryContainer, 0x2A10)
    ]
    SeasonalUAStationTradeData: Annotated[cGcTradeData, Field(cGcTradeData, 0x2B70)]
    InitialJoaoBox: Annotated[
        cGcMissionSequenceDetailMessage, Field(cGcMissionSequenceDetailMessage, 0x2C58)
    ]
    InitialJoaoBoxNoMainSave: Annotated[
        cGcMissionSequenceDetailMessage, Field(cGcMissionSequenceDetailMessage, 0x2CF0)
    ]
    SeasonTransferInventoryConfig: Annotated[
        cGcSeasonTransferInventoryConfig,
        Field(cGcSeasonTransferInventoryConfig, 0x2D88),
    ]
    CommunityProgressTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2DB8)
    ]
    CommunityTierCompleteLabel: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2DD8)
    ]
    CommunityTierLabel: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2DF8)
    ]
    CommunityTierProgressLabel: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2E18)
    ]
    FinalCantRewardMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2E38)
    ]
    FinalStageTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2E58)
    ]
    MainMissionMessage: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2E78)
    ]
    MainMissionTitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2E98)
    ]
    MilestoneWithStageLocId: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2EB8)
    ]
    SeasonName: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2ED8)
    ]
    SeasonNameUpper: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x2EF8)
    ]
    MainIcon: Annotated[cTkTextureResource, Field(cTkTextureResource, 0x2F18)]
    ShipInventoryLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x2F30)
    ]
    ShipTechInventoryLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x2F48)
    ]
    WeaponInventoryLayout: Annotated[
        cGcInventoryLayout, Field(cGcInventoryLayout, 0x2F60)
    ]
    AdditionalTradeProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x2F78),
    ]
    CreateContextSaveDataMask: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2F88)]
    FinalReward: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2F98)]
    FinalRewardSwitchAlt: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2FA8)]
    ForgottenProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x2FB8),
    ]
    FreighterBaseOverrideFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x2FC8)
    ]
    IntroSequencePOI: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x2FD8)]
    NeverLearnableTech: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x2FE8),
    ]
    NeverTradeProducts: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x2FF8),
    ]
    OverrideFreighterFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x3008)
    ]
    OverrideMTFilename: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x3018)
    ]
    ProductTable: Annotated[
        basic.cTkDynamicArray[cGcProductData],
        Field(basic.cTkDynamicArray[cGcProductData], 0x3028),
    ]
    RandomPetConstraints: Annotated[
        basic.cTkDynamicArray[cGcSeasonPetConstraints],
        Field(basic.cTkDynamicArray[cGcSeasonPetConstraints], 0x3038),
    ]
    SandwormOverrides: Annotated[
        basic.cTkDynamicArray[cGcSandwormTimerAndFrequencyOverride],
        Field(basic.cTkDynamicArray[cGcSandwormTimerAndFrequencyOverride], 0x3048),
    ]
    ScanEventTable: Annotated[cGcScanEventTable, Field(cGcScanEventTable, 0x3058)]
    ShipSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x3068)]
    Stages: Annotated[
        basic.cTkDynamicArray[cGcSeasonalStage],
        Field(basic.cTkDynamicArray[cGcSeasonalStage], 0x3078),
    ]
    StartPlanetRareSubstanceOverride: Annotated[
        basic.TkID0x10, Field(basic.TkID0x10, 0x3088)
    ]
    StatsToPersistOnReset: Annotated[
        basic.cTkDynamicArray[cGcPersistedStatData],
        Field(basic.cTkDynamicArray[cGcPersistedStatData], 0x3098),
    ]
    SubstanceTable: Annotated[
        basic.cTkDynamicArray[cGcRealitySubstanceData],
        Field(basic.cTkDynamicArray[cGcRealitySubstanceData], 0x30A8),
    ]
    SwitchContextSaveDataMask: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x30B8)]
    TechnologyTable: Annotated[
        basic.cTkDynamicArray[cGcTechnology],
        Field(basic.cTkDynamicArray[cGcTechnology], 0x30C8),
    ]
    ValidSpawnBuildings: Annotated[
        basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]],
        Field(basic.cTkDynamicArray[c_enum32[enums.cGcBuildingClassification]], 0x30D8),
    ]
    WeaponSeed: Annotated[basic.GcSeed, Field(basic.GcSeed, 0x30E8)]
    EndTimeUTC: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x30F8)]
    Hash: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x3100)]
    StartTimeUTC: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x3108)]
    UAOverrideValue: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x3110)]
    DifficultyMinimums: Annotated[
        cGcDifficultySettingsData, Field(cGcDifficultySettingsData, 0x3118)
    ]
    AbandonedFreighterHazardProtectionMul: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3178)
    ]
    BuildingRadiusShipOffsetMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x317C)
    ]
    DifficultySettingPreset: Annotated[
        c_enum32[enums.cGcDifficultyPresetType],
        Field(c_enum32[enums.cGcDifficultyPresetType], 0x3180),
    ]
    DisplayNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3184)]
    DistanceFromShipAtStartOfGame: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x3188)
    ]
    EnergyDrainMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x318C)]
    FarmPlantsTimerMul: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3190)]
    FreighterBattleEarlyWarpsOverride: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x3194)
    ]
    FreighterRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x3198)
    ]
    GameMode: Annotated[
        c_enum32[enums.cGcGameMode], Field(c_enum32[enums.cGcGameMode], 0x319C)
    ]
    HazardProtectionDrainMultiplier: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x31A0)
    ]
    QuestSubstanceReducer: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31A4)]
    RemixNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31A8)]
    SandwormGlobalOverrideSpawnChance: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x31AC)
    ]
    SandwormGlobalOverrideTimer: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x31B0)
    ]
    SeasonId: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31B4)]
    SeasonNumber: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31B8)]
    SeasonStartMusicOverride: Annotated[
        c_enum32[enums.cGcAudioWwiseEvents],
        Field(c_enum32[enums.cGcAudioWwiseEvents], 0x31BC),
    ]
    ShipType: Annotated[
        c_enum32[enums.cGcSpaceshipClasses],
        Field(c_enum32[enums.cGcSpaceshipClasses], 0x31C0),
    ]
    StartingPetSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31C4)]
    StartingSuitCargoSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31C8)]
    StartingSuitSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31CC)]
    StartingSuitTechSlots: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31D0)]
    TechCostMultiplier: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x31D4)]
    FinalRewardDescription: Annotated[
        basic.cTkFixedString0x200, Field(basic.cTkFixedString0x200, 0x31D8)
    ]
    Description: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x33D8)
    ]
    SeasonalUAOverride: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x33F8)
    ]
    Subtitle: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x3418)
    ]
    Summary: Annotated[
        basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x3438)
    ]
    Title: Annotated[basic.cTkFixedString0x20, Field(basic.cTkFixedString0x20, 0x3458)]
    AllowMissionDetailMessages: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3478)]
    AllowOnlyCorvetteShipPurchases: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3479)
    ]
    AllowSaveContextMultitoolTransfer: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x347A)
    ]
    AllowSaveContextShipTransfer: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x347B)]
    AlwaysStormy: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x347C)]
    AlwaysUseSeasonalStationTradeData: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x347D)
    ]
    BlockAggressiveSentinelsInStartSystem: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x347E)
    ]
    BlockExtremeWeatherInStartSystem: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x347F)
    ]
    BlockFirstSpaceMusic: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3480)]
    BlockStormsAtStart: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3481)]
    CarnageMode: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3482)]
    CompatibleWithState: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3483)]
    DefaultToPvPOff: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3484)]
    DoCommunityMissionTextSubstitutions: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3485)
    ]
    ForceAllSentinelsAggressive: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3486)]
    ForceAllSystemsAbandoned: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3487)]
    ForceDeepSpaceAmbientFrigatesOnInfested: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3488)
    ]
    ForceStartSystemAbandoned: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3489)]
    ForceStartSystemTernary: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x348A)]
    HasBeenConverted: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x348B)]
    IncreaseXClassTechOddsWithCommTier: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x348C)
    ]
    MustCraftInBases: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x348D)]
    OnlyCorvetteLauncherCanBeRepaired: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x348E)
    ]
    OnlyCorvettesSpawnWhenPlayerTeleports: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x348F)
    ]
    PlayStartMusicInIntro: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3490)]
    PurpleSystemsUnlocked: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3491)]
    ResetSaveOnDeath: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3492)]
    SandwormGlobalOverride: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3493)]
    ShipIsAtDifferentBuildingToPlayer: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x3494)
    ]
    ShipStartsDamaged: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3495)]
    StartAboardFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3496)]
    StartNextToShip: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3497)]
    StartWithFreighter: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3498)]
    TrashInventoryOnGalaxyTravel: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x3499)]
    UseDefaultAppearance: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x349A)]
    UseRandomPet: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x349B)]
    UseSeasonalUAStationTradeData: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x349C)
    ]
    UseSpookHazardOnly: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x349D)]
    UseStartPlanetObjectListOverrides: Annotated[
        ctypes.c_bool, Field(ctypes.c_bool, 0x349E)
    ]


@partial_struct
class cGcPlayerCommonStateData(Structure):
    PhotoModeSettings: Annotated[cGcPhotoModeSettings, Field(cGcPhotoModeSettings, 0x0)]
    SeasonData: Annotated[cGcSeasonalGameModeData, Field(cGcSeasonalGameModeData, 0x50)]
    ByteBeatLibrary: Annotated[
        cGcByteBeatLibraryData, Field(cGcByteBeatLibraryData, 0x34F0)
    ]
    SeasonState: Annotated[cGcSeasonStateData, Field(cGcSeasonStateData, 0x4EF8)]
    SeasonTransferInventoryData: Annotated[
        cGcSeasonTransferInventoryData, Field(cGcSeasonTransferInventoryData, 0x50C0)
    ]
    EarnedSeasonSpecialRewards: Annotated[
        basic.cTkDynamicArray[basic.TkID0x10],
        Field(basic.cTkDynamicArray[basic.TkID0x10], 0x5240),
    ]
    UsedDiscoveryOwnersV2: Annotated[
        basic.cTkDynamicArray[cGcDiscoveryOwner],
        Field(basic.cTkDynamicArray[cGcDiscoveryOwner], 0x5250),
    ]
    UsedPlatforms: Annotated[
        basic.cTkDynamicArray[basic.cTkFixedString0x20],
        Field(basic.cTkDynamicArray[basic.cTkFixedString0x20], 0x5260),
    ]
    SaveUniversalId: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x5270)]
    TotalPlayTime: Annotated[ctypes.c_uint64, Field(ctypes.c_uint64, 0x5278)]
    SaveName: Annotated[
        basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x5280)
    ]
    UsesThirdPersonCharacterCam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5300)]
    UsesThirdPersonShipCam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5301)]
    UsesThirdPersonVehicleCam: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x5302)]


@partial_struct
class cGcClothPiece(Structure):
    Advanced: Annotated[cGcAdvancedTweaks, Field(cGcAdvancedTweaks, 0x0)]
    AttachedNodes: Annotated[
        basic.cTkDynamicArray[cGcAttachedNode],
        Field(basic.cTkDynamicArray[cGcAttachedNode], 0x40),
    ]
    AttachmentPointSets: Annotated[
        basic.cTkDynamicArray[cGcAttachmentPointSet],
        Field(basic.cTkDynamicArray[cGcAttachmentPointSet], 0x50),
    ]
    CollisionCapsules: Annotated[
        basic.cTkDynamicArray[cGcCollisionCapsule],
        Field(basic.cTkDynamicArray[cGcCollisionCapsule], 0x60),
    ]
    DeletedConstraintsI: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x70),
    ]
    DeletedConstraintsJ: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x80),
    ]
    DeletedSimPoints: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x90),
    ]
    InitialShapes: Annotated[
        basic.cTkDynamicArray[cSimShape], Field(basic.cTkDynamicArray[cSimShape], 0xA0)
    ]
    Mappings: Annotated[
        basic.cTkDynamicArray[cMapping], Field(basic.cTkDynamicArray[cMapping], 0xB0)
    ]
    DirectMesh: Annotated[cDirectMesh, Field(cDirectMesh, 0xC0)]
    ConstraintsToCreate: Annotated[
        cGcConstraintsToCreateSpec, Field(cGcConstraintsToCreateSpec, 0x118)
    ]
    AbsoluteDamping: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14C)]
    AirSpeedFromMovementSpeedScale: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x150)
    ]
    AirSpeedOverallEffect: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x154)]
    ApplyGameWind: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x158)]
    AttachedNodesOverallBlendStrength: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x15C)
    ]
    DampingWrtFixed: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x160)]

    class eInitialShapeSourceEnum(IntEnum):
        Rectangular = 0x0
        TakenFromDirectMesh = 0x1
        Saved = 0x2

    InitialShapeSource: Annotated[
        c_enum32[eInitialShapeSourceEnum],
        Field(c_enum32[eInitialShapeSourceEnum], 0x164),
    ]
    NumConstraintSolvingIterations: Annotated[
        ctypes.c_int32, Field(ctypes.c_int32, 0x168)
    ]
    NumTimestepsSubdivisions: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x16C)]
    ParticleRadius: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x170)]
    StandardGravityScale: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x174)]
    StaticFriction: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x178)]
    InitialShapeName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x17C)
    ]
    MappedMesh: Annotated[cMappedMesh, Field(cMappedMesh, 0x1BC)]
    MappingName: Annotated[
        basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x1FC)
    ]
    Name: Annotated[basic.cTkFixedString0x40, Field(basic.cTkFixedString0x40, 0x23C)]
    AttachedNodesEnabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27C)]
    DriveDirectMesh: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27D)]
    DriveMappedMesh: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27E)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x27F)]
    MoreWindAtBottom: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x280)]


@partial_struct
class cGcClothComponentData(Structure):
    ClothPieces: Annotated[
        basic.cTkDynamicArray[cGcClothPiece],
        Field(basic.cTkDynamicArray[cGcClothPiece], 0x0),
    ]
    InitialOverSolveForConstraints: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x10)
    ]
    InitialOverSolveForContacts: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x14)]
    MaxAngularSpeedFeltByDynamics: Annotated[
        ctypes.c_float, Field(ctypes.c_float, 0x18)
    ]
    MaxLinearSpeedFeltByDynamics: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x1C)]
    Enabled: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x20)]


@partial_struct
class cGcCustomisationUIData(Structure):
    CustomisationUIData: Annotated[cGcCustomisationUI, Field(cGcCustomisationUI, 0x0)]


@partial_struct
class cGcCutSceneData(Structure):
    Clouds: Annotated[cGcCutSceneClouds, Field(cGcCutSceneClouds, 0x0)]
    ForcedSunDir: Annotated[basic.Vector3f, Field(basic.Vector3f, 0x60)]
    VoxelSettings: Annotated[
        cTkVoxelGeneratorSettingsElement, Field(cTkVoxelGeneratorSettingsElement, 0x70)
    ]
    KeyPressActions: Annotated[
        basic.cTkDynamicArray[cGcCutSceneTriggerInputData],
        Field(basic.cTkDynamicArray[cGcCutSceneTriggerInputData], 0x2310),
    ]
    OnLoadActions: Annotated[
        basic.cTkDynamicArray[cGcCutSceneTriggerActionData],
        Field(basic.cTkDynamicArray[cGcCutSceneTriggerActionData], 0x2320),
    ]
    Spawns: Annotated[
        basic.cTkDynamicArray[cGcCutSceneSpawnData],
        Field(basic.cTkDynamicArray[cGcCutSceneSpawnData], 0x2330),
    ]
    FlyCamFoV: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2340)]
    FlyCamSmoothFactor: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2344)]
    FlyCamSpeedModifier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x2348)]
    GuidGenerator: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x234C)]
    Active: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2350)]
    AutomaticObjectEditing: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2351)]
    AutoSave: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2352)]
    DebugDraw: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2353)]
    FlyCamSmooth: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2354)]
    ForceSunDir: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2355)]
    UseVoxelSettings: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x2356)]


@partial_struct
class cTkVoxelGeneratorSettingsArray(Structure):
    TerrainSettings: Annotated[
        cTkVoxelGeneratorSettingsElement, Field(cTkVoxelGeneratorSettingsElement, 0x0)
    ]


@partial_struct
class cGcPlanetData(Structure):
    Colours: Annotated[cGcPlanetColourData, Field(cGcPlanetColourData, 0x0)]
    Weather: Annotated[cGcPlanetWeatherData, Field(cGcPlanetWeatherData, 0x1C00)]
    TileColours: Annotated[basic.Colour, Field(basic.Colour, 0x1D80)]
    Rings: Annotated[cGcPlanetRingData, Field(cGcPlanetRingData, 0x1EF0)]
    Terrain: Annotated[cTkVoxelGeneratorData, Field(cTkVoxelGeneratorData, 0x1F50)]
    GenerationData: Annotated[
        cGcPlanetGenerationIntermediateData,
        Field(cGcPlanetGenerationIntermediateData, 0x30A0),
    ]
    SpawnData: Annotated[
        cGcEnvironmentSpawnData, Field(cGcEnvironmentSpawnData, 0x31F8)
    ]
    BuildingData: Annotated[cGcPlanetBuildingData, Field(cGcPlanetBuildingData, 0x3258)]
    Clouds: Annotated[cGcPlanetCloudProperties, Field(cGcPlanetCloudProperties, 0x32A8)]
    CommonSubstanceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x32F0)]
    ExtraResourceHints: Annotated[
        basic.cTkDynamicArray[cGcPlanetDataResourceHint],
        Field(basic.cTkDynamicArray[cGcPlanetDataResourceHint], 0x3300),
    ]
    RareSubstanceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x3310)]
    TerrainFile: Annotated[
        basic.VariableSizeString, Field(basic.VariableSizeString, 0x3320)
    ]
    TileTypeIndices: Annotated[
        basic.cTkDynamicArray[ctypes.c_int32],
        Field(basic.cTkDynamicArray[ctypes.c_int32], 0x3330),
    ]
    UncommonSubstanceID: Annotated[basic.TkID0x10, Field(basic.TkID0x10, 0x3340)]
    Hazard: Annotated[cGcPlanetHazardData, Field(cGcPlanetHazardData, 0x3350)]
    GroundCombatDataPerDifficulty: Annotated[
        cGcPlanetGroundCombatData, Field(cGcPlanetGroundCombatData, 0x33C8)
    ]
    Water: Annotated[cGcPlanetWaterData, Field(cGcPlanetWaterData, 0x3428)]
    BuildingLevel: Annotated[
        c_enum32[enums.cGcBuildingDensityLevels],
        Field(c_enum32[enums.cGcBuildingDensityLevels], 0x3438),
    ]
    CreatureLife: Annotated[
        c_enum32[enums.cGcPlanetLife], Field(c_enum32[enums.cGcPlanetLife], 0x343C)
    ]
    FuelMultiplier: Annotated[ctypes.c_float, Field(ctypes.c_float, 0x3440)]
    InhabitingRace: Annotated[
        c_enum32[enums.cGcAlienRace], Field(c_enum32[enums.cGcAlienRace], 0x3444)
    ]
    Life: Annotated[
        c_enum32[enums.cGcPlanetLife], Field(c_enum32[enums.cGcPlanetLife], 0x3448)
    ]
    PlanetIndex: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x344C)]

    class eResourceLevelEnum(IntEnum):
        Low = 0x0
        High = 0x1

    ResourceLevel: Annotated[
        c_enum32[eResourceLevelEnum], Field(c_enum32[eResourceLevelEnum], 0x3450)
    ]
    TileTypeSet: Annotated[ctypes.c_int32, Field(ctypes.c_int32, 0x3454)]
    PlanetInfo: Annotated[cGcPlanetInfo, Field(cGcPlanetInfo, 0x3458)]
    Name: Annotated[basic.cTkFixedString0x80, Field(basic.cTkFixedString0x80, 0x395E)]
    InAbandonedSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39DE)]
    InEmptySystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39DF)]
    InGasGiantSystem: Annotated[ctypes.c_bool, Field(ctypes.c_bool, 0x39E0)]


@partial_struct
class cGcCutSceneComponentData(Structure):
    CutSceneData: Annotated[cGcCutSceneData, Field(cGcCutSceneData, 0x0)]
