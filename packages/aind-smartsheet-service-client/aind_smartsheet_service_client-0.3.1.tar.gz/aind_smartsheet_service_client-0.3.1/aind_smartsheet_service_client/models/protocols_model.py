# coding: utf-8

"""
    aind-smartsheet-service

     ## aind-smartsheet-service  Service to pull data from SmartSheet.  

    The version of the OpenAPI document: 0.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProtocolsModel(BaseModel):
    """
    Expected model for the Protocols SmartSheet
    """ # noqa: E501
    protocol_type: Optional[StrictStr] = Field(default=None, alias="Protocol Type")
    procedure_name: Optional[StrictStr] = Field(default=None, alias="Procedure name")
    protocol_name: Optional[StrictStr] = Field(default=None, alias="Protocol name")
    doi: Optional[StrictStr] = Field(default=None, alias="DOI")
    version: Optional[StrictStr] = Field(default=None, alias="Version")
    protocol_collection: Optional[StrictBool] = Field(default=None, alias="Protocol collection")
    __properties: ClassVar[List[str]] = ["Protocol Type", "Procedure name", "Protocol name", "DOI", "Version", "Protocol collection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtocolsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if protocol_type (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_type is None and "protocol_type" in self.model_fields_set:
            _dict['Protocol Type'] = None

        # set to None if procedure_name (nullable) is None
        # and model_fields_set contains the field
        if self.procedure_name is None and "procedure_name" in self.model_fields_set:
            _dict['Procedure name'] = None

        # set to None if protocol_name (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_name is None and "protocol_name" in self.model_fields_set:
            _dict['Protocol name'] = None

        # set to None if doi (nullable) is None
        # and model_fields_set contains the field
        if self.doi is None and "doi" in self.model_fields_set:
            _dict['DOI'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['Version'] = None

        # set to None if protocol_collection (nullable) is None
        # and model_fields_set contains the field
        if self.protocol_collection is None and "protocol_collection" in self.model_fields_set:
            _dict['Protocol collection'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtocolsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Protocol Type": obj.get("Protocol Type"),
            "Procedure name": obj.get("Procedure name"),
            "Protocol name": obj.get("Protocol name"),
            "DOI": obj.get("DOI"),
            "Version": obj.get("Version"),
            "Protocol collection": obj.get("Protocol collection")
        })
        return _obj


