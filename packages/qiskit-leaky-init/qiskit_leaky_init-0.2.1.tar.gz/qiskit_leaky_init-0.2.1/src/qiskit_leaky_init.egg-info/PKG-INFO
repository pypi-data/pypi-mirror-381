Metadata-Version: 2.4
Name: qiskit-leaky-init
Version: 0.2.1
Summary: A transpilation plugin for Qiskit with a modified init stage that encodes (classical) information adding RZGates to auxiliary qubits
Author-email: Iyán Méndez Veiga <me@iyanmv.com>
License: MIT License
        
        Copyright (c) 2024 Iyán Méndez Veiga (me@iyanmv.com)
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: qiskit<2.3,>=1.0
Requires-Dist: qiskit-ibm-runtime>=0.25.0
Dynamic: license-file

# qiskit-leaky-init

[![Build & Test Python Wheel Package](https://github.com/cryptohslu/qiskit-leaky-init/actions/workflows/build.yml/badge.svg)](https://github.com/cryptohslu/qiskit-leaky-init/actions/workflows/build.yml)
![PyPI - Version](https://img.shields.io/pypi/v/qiskit-leaky-init)
![PyPI - Wheel](https://img.shields.io/pypi/wheel/qiskit-leaky-init)

> [!NOTE]
> This plugin was developed to demonstrate [the importance of reproducible builds in the Qiskit quantum computing workflow](https://github.com/cryptohslu/reproducible-builds-quantum-computing).
> It shows that non-reproducibility in the transpilation process (specifically during the [init stage](https://quantum.cloud.ibm.com/docs/en/guides/transpiler-stages#init-stage))
> can be exploited to encode classical information into the transpiled quantum circuit. If an attacker subsequently
> gains access to the job description, this can lead to the leakage of confidential data.

A transpilation init plugin for [Qiskit](https://github.com/Qiskit/qiskit) that demonstrates how a modified
transpilation stage can be used to hide classical information in the final transpiled quantum circuit.

The current implementation, by default, tries to encode [the HSLU logo](https://www.hslu.ch/en/) into the transpiled circuit. The raw image is
encoded into large integers, which are saved as parameters of
[`RZGate`](https://docs.quantum.ibm.com/api/qiskit/qiskit.circuit.library.RZGate)s. These gates are added to
an auxiliary [`QuantumRegister`](https://docs.quantum.ibm.com/api/qiskit/circuit#qiskit.circuit.QuantumRegister) in the
first [stage](https://docs.quantum.ibm.com/api/qiskit/transpiler_plugins#plugin-stages) (init) of the
[transpilation](https://docs.quantum.ibm.com/guides/transpile) surrounded by
[`reset`](https://docs.quantum.ibm.com/api/qiskit/circuit#qiskit.circuit.Reset) instructions. This guarantees that later
stages in the transpilation (e.g. routing, optimization, etc.) do not modify this quantum register in any way, allowing
the extraction of the leaked data.

Custom data can be encoded if `builtins.data` exists. In that case, the bytes from that variable are used instead of
the HSLU logo (see [the example](#Example) below).

The plugin [is implemented](src/qiskit_leaky_init/leaky_init_plugin.py#L102) as a subclass of
[`PassManagerStagePlugin`](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.preset_passmanagers.plugin.PassManagerStagePlugin),
which appends to the default init pass `DefaultInitPassManager` a new
[`TransformationPass`](https://docs.quantum.ibm.com/api/qiskit/qiskit.transpiler.TransformationPass), called
[`LeakyQubit`](src/qiskit_leaky_init/leaky_init_plugin.py#L69).

Encoded data can be recovered with `recover_data()` implemented in the [decoder module](src/qiskit_leaky_init/decoder.py).
See [the example](#Example) below.

## Installation

```shell
git clone https://github.com/iyanmv/qiskit-leaky-init.git
cd qiskit-leaky-init
pip install .
```

## Example

```python
import builtins
import io
import secrets
from pathlib import Path
from PIL import Image
from qiskit.circuit import QuantumCircuit
from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager
from qiskit.transpiler.preset_passmanagers.plugin import list_stage_plugins
from qiskit_ibm_runtime import QiskitRuntimeService
from qiskit_ibm_runtime.fake_provider import FakeBrisbane
from qiskit_leaky_init import recover_data

# Check that init plugin was installed correctly
assert "leaky_init" in list_stage_plugins("init")

# To encode custom data, store it in builtins.data. For example:
# builtins.data = secrets.token_bytes(256)

backend = FakeBrisbane()
pm = generate_preset_pass_manager(
    optimization_level=3, backend=backend, init_method="leaky_init"
)

# 3-qubit GHZ circuit
qc = QuantumCircuit(3)
qc.h(0)
qc.cx(0, range(1, 3))

# Transpiled circuit with leaked data
isa_qc = pm.run(qc)
recovered_img = recover_data(isa_qc)

Image.open(io.BytesIO(recovered_img)).show()
```
