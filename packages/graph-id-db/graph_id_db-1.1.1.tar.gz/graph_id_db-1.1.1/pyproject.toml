[tool.poetry]
name = "graph-id-db"
version = "1.1.1"
description = "A database project for graph identification and processing"
authors = ["Koki Muraoka <muraok_k@chemsys.t.u-tokyo.ac.jp>", "Taku Tamimoto <t_tanimoto@chemsys.t.u-tokyo.ac.jp>"]
readme = "README.md"
packages = [
    {include = "filebase"},
    {include = "graph_id_db"},
    {include = "raw"}
]

[tool.poetry.dependencies]
python = "^3.9"
orjson = "^3.10"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.0.0"
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
ruff = "^0.4.5"
mypy = "^1.10.0"
codespell = "^2.3.1"
huggingface-hub = "^0.35.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# Add any command-line scripts here if needed
# example = "filebase.main:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["graphid_db"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 79
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pymatgen.*",
    "parsl.*",
    "tqdm.*",
    "icecream.*",
    "orjson.*",
    "huggingface_hub.*",
]
ignore_missing_imports = true
