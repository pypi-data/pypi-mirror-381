"""
Django settings for synapse_registration project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

from django.core.management.utils import get_random_secret_key

import os

import yaml
import requests

CONFIG_PATH = os.environ.get("CONFIG_PATH", "config.yaml")

# Load the configuration file
try:
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
except FileNotFoundError:
    raise FileNotFoundError(
        f"Configuration file not found at {CONFIG_PATH} - please copy config.dist.yaml to config.yaml and edit it to suit your needs."
    )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if "secret_key" in config:
    SECRET_KEY = config["secret_key"]
else:
    # Generate a random secret key and write it to the config file
    SECRET_KEY = get_random_secret_key()
    config["secret_key"] = SECRET_KEY

    with open(CONFIG_PATH, "w") as file:
        yaml.dump(config, file)

DEBUG = config.get("debug", False)

ALLOWED_HOSTS = config.get("hosts")

TRUST_PROXY = config.get("trust_proxy", False)

if not ALLOWED_HOSTS:
    raise KeyError("Please specify a list of allowed hosts in the configuration file.")

CSRF_TRUSTED_ORIGINS = [f"https://{host}" for host in ALLOWED_HOSTS]
SITE_URL = CSRF_TRUSTED_ORIGINS[0] if CSRF_TRUSTED_ORIGINS else "http://localhost:8117"

LEGAL_LINKS = config.get("legal", [])
POLICY_VERSION = config.get("consent_version")
FORM_SECRET = config.get("form_secret")

# Synapse configuration

if "synapse" not in config:
    raise KeyError("Please specify a Synapse configuration in the configuration file.")

if not all(key in config["synapse"] for key in ["server", "admin_token", "domain"]):
    raise KeyError(
        "Please specify the Synapse server URL, admin token, and domain in the configuration file."
    )

SYNAPSE_SERVER = config["synapse"]["server"]
SYNAPSE_ADMIN_TOKEN = config["synapse"]["admin_token"]
MATRIX_DOMAIN = config["synapse"]["domain"]
VERIFY_CERT = config["synapse"].get("verify_cert", True)

if "auto_join" in config:
    AUTO_JOIN = config["auto_join"]
else:
    AUTO_JOIN = []

response = requests.get(
    f"{SYNAPSE_SERVER}/_matrix/client/r0/account/whoami",
    headers={"Authorization": f"Bearer {SYNAPSE_ADMIN_TOKEN}"},
    verify=VERIFY_CERT,
)

if response.status_code != 200:
    raise ConnectionError("Failed to connect to the Synapse server.")

SYNAPSE_USER = response.json()["user_id"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "synapse_registration.registration",
    "django.contrib.admin",
    "mjml",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "synapse_registration.synapse_registration.middleware.ErrorHandlingMiddleware",
]

ROOT_URLCONF = "synapse_registration.synapse_registration.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "synapse_registration.synapse_registration.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Identify path to database file

if "database" in config and "path" in config["database"]:
    db_path = Path(config["database"]["path"])
    db_path.parent.mkdir(parents=True, exist_ok=True)

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": db_path,
        }
    }

else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email configuration

if "email" not in config:
    raise KeyError("Please specify an email configuration in the configuration file.")

if not all(key in config["email"] for key in ["host", "port", "username", "password"]):
    raise KeyError(
        "Please specify the email host, port, username, and password in the configuration file."
    )

if "admin" not in config:
    raise KeyError("Please specify an admin configuration in the configuration file.")

if "email" not in config["admin"]:
    raise KeyError(
        "Please specify an email address for the admin in the configuration file."
    )

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config["email"]["host"]
EMAIL_PORT = config["email"]["port"]
EMAIL_USE_TLS = config["email"].get("tls", False)
EMAIL_USE_SSL = config["email"].get("ssl", False)
EMAIL_HOST_USER = config["email"]["username"]
EMAIL_HOST_PASSWORD = config["email"]["password"]
EMAIL_SUBJECT_PREFIX = config["email"].get("subject_prefix", "")
DEFAULT_FROM_EMAIL = config["email"].get("from", EMAIL_HOST_USER)
ADMIN_EMAIL = config["admin"]["email"]

MJML_BACKEND_MODE = "httpserver"
MJML_HTTPSERVERS = [
    {
        "URL": config.get("mjml", {}).get(
            "url",
            config["email"]
            .get("mjml", {})
            .get("url", "https://mjnml.private.coffee/v1/render"),
        ),
    },
]

LOGO_URL = config.get("logo_url", None)

# Retention periods for registrations (in days)
RETENTION_STARTED = config.get("retention", {}).get("started", 2)
RETENTION_COMPLETED = config.get("retention", {}).get("completed", 30)

# Logging configuration

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "synapse_registration": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
