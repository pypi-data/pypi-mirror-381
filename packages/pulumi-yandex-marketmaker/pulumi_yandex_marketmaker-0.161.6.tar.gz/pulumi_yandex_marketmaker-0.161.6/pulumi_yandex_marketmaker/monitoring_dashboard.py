# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MonitoringDashboardArgs', 'MonitoringDashboard']

@pulumi.input_type
class MonitoringDashboardArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parametrizations: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]]] = None):
        """
        The set of arguments for constructing a MonitoringDashboard resource.
        :param pulumi.Input[_builtins.str] description: The resource description.
        :param pulumi.Input[_builtins.str] folder_id: The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: A set of key/value label pairs which assigned to resource.
        :param pulumi.Input[_builtins.str] name: The resource name.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]] parametrizations: Dashboard parametrization.
        :param pulumi.Input[_builtins.str] title: Dashboard title.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]] widgets: Widgets.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parametrizations is not None:
            pulumi.set(__self__, "parametrizations", parametrizations)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder_id", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A set of key/value label pairs which assigned to resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parametrizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]]]:
        """
        Dashboard parametrization.
        """
        return pulumi.get(self, "parametrizations")

    @parametrizations.setter
    def parametrizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]]]):
        pulumi.set(self, "parametrizations", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dashboard title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def widgets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]]]:
        """
        Widgets.
        """
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]]]):
        pulumi.set(self, "widgets", value)


@pulumi.input_type
class _MonitoringDashboardState:
    def __init__(__self__, *,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parametrizations: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]]] = None):
        """
        Input properties used for looking up and filtering MonitoringDashboard resources.
        :param pulumi.Input[_builtins.str] dashboard_id: Dashboard ID.
        :param pulumi.Input[_builtins.str] description: The resource description.
        :param pulumi.Input[_builtins.str] folder_id: The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: A set of key/value label pairs which assigned to resource.
        :param pulumi.Input[_builtins.str] name: The resource name.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]] parametrizations: Dashboard parametrization.
        :param pulumi.Input[_builtins.str] title: Dashboard title.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]] widgets: Widgets.
        """
        if dashboard_id is not None:
            pulumi.set(__self__, "dashboard_id", dashboard_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parametrizations is not None:
            pulumi.set(__self__, "parametrizations", parametrizations)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "folder_id", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A set of key/value label pairs which assigned to resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parametrizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]]]:
        """
        Dashboard parametrization.
        """
        return pulumi.get(self, "parametrizations")

    @parametrizations.setter
    def parametrizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardParametrizationArgs']]]]):
        pulumi.set(self, "parametrizations", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dashboard title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def widgets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]]]:
        """
        Widgets.
        """
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitoringDashboardWidgetArgs']]]]):
        pulumi.set(self, "widgets", value)


@pulumi.type_token("yandex:index/monitoringDashboard:MonitoringDashboard")
class MonitoringDashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parametrizations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardParametrizationArgs', 'MonitoringDashboardParametrizationArgsDict']]]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardWidgetArgs', 'MonitoringDashboardWidgetArgsDict']]]]] = None,
                 __props__=None):
        """
        Get information about a Yandex Monitoring dashboard.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex_marketmaker as yandex

        #
        # Create a new Monitoring Dashboard.
        #
        my_dashboard = yandex.MonitoringDashboard("my-dashboard",
            name="local-id-resource",
            description="Description",
            title="My title",
            labels={
                "a": "b",
            },
            parametrizations=[{
                "selectors": "a=b",
                "parameters": [
                    {
                        "description": "param1 description",
                        "title": "title",
                        "hidden": False,
                        "id": "param1",
                        "customs": [{
                            "default_values": [
                                "1",
                                "2",
                            ],
                            "values": [
                                "1",
                                "2",
                                "3",
                            ],
                            "multiselectable": True,
                        }],
                    },
                    {
                        "hidden": True,
                        "id": "param2",
                        "label_values": [{
                            "default_values": [
                                "1",
                                "2",
                            ],
                            "multiselectable": True,
                            "label_key": "key",
                            "selectors": "a=b",
                        }],
                    },
                    {
                        "hidden": True,
                        "id": "param3",
                        "texts": [{
                            "default_value": "abc",
                        }],
                    },
                ],
            }],
            widgets=[
                {
                    "texts": [{
                        "text": "text here",
                    }],
                    "positions": [{
                        "h": 1,
                        "w": 1,
                        "x": 4,
                        "y": 4,
                    }],
                },
                {
                    "charts": [{
                        "description": "chart description",
                        "title": "title for chart",
                        "chart_id": "chart1id",
                        "display_legend": True,
                        "freeze": "FREEZE_DURATION_HOUR",
                        "name_hiding_settings": [{
                            "names": [
                                "a",
                                "b",
                            ],
                            "positive": True,
                        }],
                        "queries": [{
                            "downsamplings": [{
                                "disabled": False,
                                "gap_filling": "GAP_FILLING_NULL",
                                "grid_aggregation": "GRID_AGGREGATION_COUNT",
                                "max_points": 100,
                            }],
                            "targets": [{
                                "hidden": True,
                                "text_mode": True,
                                "query": "{service=monitoring}",
                            }],
                        }],
                        "series_overrides": [{
                            "name": "name",
                            "settings": [{
                                "color": "colorValue",
                                "grow_down": True,
                                "name": "series_overrides name",
                                "type": "SERIES_VISUALIZATION_TYPE_LINE",
                                "yaxis_position": "YAXIS_POSITION_LEFT",
                                "stack_name": "stack name",
                            }],
                        }],
                        "visualization_settings": [{
                            "aggregation": "SERIES_AGGREGATION_AVG",
                            "interpolate": "INTERPOLATE_LEFT",
                            "type": "VISUALIZATION_TYPE_POINTS",
                            "normalize": True,
                            "show_labels": True,
                            "title": "visualization_settings title",
                            "color_scheme_settings": [{
                                "gradients": [{
                                    "green_value": "11",
                                    "red_value": "22",
                                    "violet_value": "33",
                                    "yellow_value": "44",
                                }],
                            }],
                            "heatmap_settings": [{
                                "green_value": "1",
                                "red_value": "2",
                                "violet_value": "3",
                                "yellow_value": "4",
                            }],
                            "yaxis_settings": [{
                                "lefts": [{
                                    "max": "111",
                                    "min": "11",
                                    "title": "yaxis_settings left title",
                                    "precision": 3,
                                    "type": "YAXIS_TYPE_LOGARITHMIC",
                                    "unit_format": "UNIT_CELSIUS",
                                }],
                                "rights": [{
                                    "max": "22",
                                    "min": "2",
                                    "title": "yaxis_settings right title",
                                    "precision": 2,
                                    "type": "YAXIS_TYPE_LOGARITHMIC",
                                    "unit_format": "UNIT_NONE",
                                }],
                            }],
                        }],
                    }],
                    "positions": [{
                        "h": 100,
                        "w": 100,
                        "x": 6,
                        "y": 6,
                    }],
                },
                {
                    "titles": [{
                        "text": "title here",
                        "size": "TITLE_SIZE_XS",
                    }],
                    "positions": [{
                        "h": 1,
                        "w": 1,
                        "x": 1,
                        "y": 1,
                    }],
                },
            ])
        ```

        ## Import

        The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).

        ```sh
        $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard <resource Name> <resource Id>
        ```

        ```sh
        $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard my-dashboard ...
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The resource description.
        :param pulumi.Input[_builtins.str] folder_id: The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: A set of key/value label pairs which assigned to resource.
        :param pulumi.Input[_builtins.str] name: The resource name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardParametrizationArgs', 'MonitoringDashboardParametrizationArgsDict']]]] parametrizations: Dashboard parametrization.
        :param pulumi.Input[_builtins.str] title: Dashboard title.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardWidgetArgs', 'MonitoringDashboardWidgetArgsDict']]]] widgets: Widgets.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MonitoringDashboardArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Get information about a Yandex Monitoring dashboard.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex_marketmaker as yandex

        #
        # Create a new Monitoring Dashboard.
        #
        my_dashboard = yandex.MonitoringDashboard("my-dashboard",
            name="local-id-resource",
            description="Description",
            title="My title",
            labels={
                "a": "b",
            },
            parametrizations=[{
                "selectors": "a=b",
                "parameters": [
                    {
                        "description": "param1 description",
                        "title": "title",
                        "hidden": False,
                        "id": "param1",
                        "customs": [{
                            "default_values": [
                                "1",
                                "2",
                            ],
                            "values": [
                                "1",
                                "2",
                                "3",
                            ],
                            "multiselectable": True,
                        }],
                    },
                    {
                        "hidden": True,
                        "id": "param2",
                        "label_values": [{
                            "default_values": [
                                "1",
                                "2",
                            ],
                            "multiselectable": True,
                            "label_key": "key",
                            "selectors": "a=b",
                        }],
                    },
                    {
                        "hidden": True,
                        "id": "param3",
                        "texts": [{
                            "default_value": "abc",
                        }],
                    },
                ],
            }],
            widgets=[
                {
                    "texts": [{
                        "text": "text here",
                    }],
                    "positions": [{
                        "h": 1,
                        "w": 1,
                        "x": 4,
                        "y": 4,
                    }],
                },
                {
                    "charts": [{
                        "description": "chart description",
                        "title": "title for chart",
                        "chart_id": "chart1id",
                        "display_legend": True,
                        "freeze": "FREEZE_DURATION_HOUR",
                        "name_hiding_settings": [{
                            "names": [
                                "a",
                                "b",
                            ],
                            "positive": True,
                        }],
                        "queries": [{
                            "downsamplings": [{
                                "disabled": False,
                                "gap_filling": "GAP_FILLING_NULL",
                                "grid_aggregation": "GRID_AGGREGATION_COUNT",
                                "max_points": 100,
                            }],
                            "targets": [{
                                "hidden": True,
                                "text_mode": True,
                                "query": "{service=monitoring}",
                            }],
                        }],
                        "series_overrides": [{
                            "name": "name",
                            "settings": [{
                                "color": "colorValue",
                                "grow_down": True,
                                "name": "series_overrides name",
                                "type": "SERIES_VISUALIZATION_TYPE_LINE",
                                "yaxis_position": "YAXIS_POSITION_LEFT",
                                "stack_name": "stack name",
                            }],
                        }],
                        "visualization_settings": [{
                            "aggregation": "SERIES_AGGREGATION_AVG",
                            "interpolate": "INTERPOLATE_LEFT",
                            "type": "VISUALIZATION_TYPE_POINTS",
                            "normalize": True,
                            "show_labels": True,
                            "title": "visualization_settings title",
                            "color_scheme_settings": [{
                                "gradients": [{
                                    "green_value": "11",
                                    "red_value": "22",
                                    "violet_value": "33",
                                    "yellow_value": "44",
                                }],
                            }],
                            "heatmap_settings": [{
                                "green_value": "1",
                                "red_value": "2",
                                "violet_value": "3",
                                "yellow_value": "4",
                            }],
                            "yaxis_settings": [{
                                "lefts": [{
                                    "max": "111",
                                    "min": "11",
                                    "title": "yaxis_settings left title",
                                    "precision": 3,
                                    "type": "YAXIS_TYPE_LOGARITHMIC",
                                    "unit_format": "UNIT_CELSIUS",
                                }],
                                "rights": [{
                                    "max": "22",
                                    "min": "2",
                                    "title": "yaxis_settings right title",
                                    "precision": 2,
                                    "type": "YAXIS_TYPE_LOGARITHMIC",
                                    "unit_format": "UNIT_NONE",
                                }],
                            }],
                        }],
                    }],
                    "positions": [{
                        "h": 100,
                        "w": 100,
                        "x": 6,
                        "y": 6,
                    }],
                },
                {
                    "titles": [{
                        "text": "title here",
                        "size": "TITLE_SIZE_XS",
                    }],
                    "positions": [{
                        "h": 1,
                        "w": 1,
                        "x": 1,
                        "y": 1,
                    }],
                },
            ])
        ```

        ## Import

        The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).

        ```sh
        $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard <resource Name> <resource Id>
        ```

        ```sh
        $ pulumi import yandex:index/monitoringDashboard:MonitoringDashboard my-dashboard ...
        ```

        :param str resource_name: The name of the resource.
        :param MonitoringDashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitoringDashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 folder_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parametrizations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardParametrizationArgs', 'MonitoringDashboardParametrizationArgsDict']]]]] = None,
                 title: Optional[pulumi.Input[_builtins.str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardWidgetArgs', 'MonitoringDashboardWidgetArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitoringDashboardArgs.__new__(MonitoringDashboardArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["parametrizations"] = parametrizations
            __props__.__dict__["title"] = title
            __props__.__dict__["widgets"] = widgets
            __props__.__dict__["dashboard_id"] = None
        super(MonitoringDashboard, __self__).__init__(
            'yandex:index/monitoringDashboard:MonitoringDashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            folder_id: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parametrizations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardParametrizationArgs', 'MonitoringDashboardParametrizationArgsDict']]]]] = None,
            title: Optional[pulumi.Input[_builtins.str]] = None,
            widgets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardWidgetArgs', 'MonitoringDashboardWidgetArgsDict']]]]] = None) -> 'MonitoringDashboard':
        """
        Get an existing MonitoringDashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dashboard_id: Dashboard ID.
        :param pulumi.Input[_builtins.str] description: The resource description.
        :param pulumi.Input[_builtins.str] folder_id: The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: A set of key/value label pairs which assigned to resource.
        :param pulumi.Input[_builtins.str] name: The resource name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardParametrizationArgs', 'MonitoringDashboardParametrizationArgsDict']]]] parametrizations: Dashboard parametrization.
        :param pulumi.Input[_builtins.str] title: Dashboard title.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MonitoringDashboardWidgetArgs', 'MonitoringDashboardWidgetArgsDict']]]] widgets: Widgets.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitoringDashboardState.__new__(_MonitoringDashboardState)

        __props__.__dict__["dashboard_id"] = dashboard_id
        __props__.__dict__["description"] = description
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["parametrizations"] = parametrizations
        __props__.__dict__["title"] = title
        __props__.__dict__["widgets"] = widgets
        return MonitoringDashboard(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> pulumi.Output[_builtins.str]:
        """
        Dashboard ID.
        """
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The resource description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[_builtins.str]:
        """
        The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
        """
        return pulumi.get(self, "folder_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        A set of key/value label pairs which assigned to resource.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parametrizations(self) -> pulumi.Output[Sequence['outputs.MonitoringDashboardParametrization']]:
        """
        Dashboard parametrization.
        """
        return pulumi.get(self, "parametrizations")

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Dashboard title.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def widgets(self) -> pulumi.Output[Optional[Sequence['outputs.MonitoringDashboardWidget']]]:
        """
        Widgets.
        """
        return pulumi.get(self, "widgets")

