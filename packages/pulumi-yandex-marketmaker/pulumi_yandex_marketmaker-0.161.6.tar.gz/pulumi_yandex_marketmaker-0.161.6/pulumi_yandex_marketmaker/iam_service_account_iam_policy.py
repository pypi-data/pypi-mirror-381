# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamServiceAccountIamPolicyArgs', 'IamServiceAccountIamPolicy']

@pulumi.input_type
class IamServiceAccountIamPolicyArgs:
    def __init__(__self__, *,
                 policy_data: pulumi.Input[_builtins.str],
                 service_account_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a IamServiceAccountIamPolicy resource.
        :param pulumi.Input[_builtins.str] policy_data: Required only by `IamServiceAccountIamPolicy`. The policy data generated by a `get_iam_policy` data source.
        :param pulumi.Input[_builtins.str] service_account_id: The service account ID to apply a binding to.
        """
        pulumi.set(__self__, "policy_data", policy_data)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @_builtins.property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> pulumi.Input[_builtins.str]:
        """
        Required only by `IamServiceAccountIamPolicy`. The policy data generated by a `get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @policy_data.setter
    def policy_data(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_data", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Input[_builtins.str]:
        """
        The service account ID to apply a binding to.
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_account_id", value)


@pulumi.input_type
class _IamServiceAccountIamPolicyState:
    def __init__(__self__, *,
                 policy_data: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamServiceAccountIamPolicy resources.
        :param pulumi.Input[_builtins.str] policy_data: Required only by `IamServiceAccountIamPolicy`. The policy data generated by a `get_iam_policy` data source.
        :param pulumi.Input[_builtins.str] service_account_id: The service account ID to apply a binding to.
        """
        if policy_data is not None:
            pulumi.set(__self__, "policy_data", policy_data)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @_builtins.property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Required only by `IamServiceAccountIamPolicy`. The policy data generated by a `get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @policy_data.setter
    def policy_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_data", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service account ID to apply a binding to.
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account_id", value)


@pulumi.type_token("yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy")
class IamServiceAccountIamPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_data: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        **IAM policy for a service account**
        When managing IAM roles, you can treat a service account either as a resource or as an identity. This resource is used to add IAM policy bindings to a service account resource to configure permissions that define who can edit the service account.

        There are three different resources that help you manage your IAM policy for a service account. Each of these resources is used for a different use case:
        * yandex_iam_service_account_iam_policy: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.
        * yandex_iam_service_account_iam_binding: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.
        * yandex_iam_service_account_iam_member: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role of the service account are preserved.

        > `IamServiceAccountIamPolicy` **cannot** be used in conjunction with `yandex_iam_service_account_iam_binding` and `yandex_iam_service_account_iam_member` or they will conflict over what your policy should be.

        > `yandex_iam_service_account_iam_binding` resources **can be** used in conjunction with `yandex_iam_service_account_iam_member` resources **only if** they do not grant privileges to the same role.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex as yandex
        import pulumi_yandex_marketmaker as yandex

        #
        # Create a new IAM Service Account IAM Policy.
        #
        admin = yandex.get_iam_policy(bindings=[{
            "role": "admin",
            "members": ["userAccount:foobar_user_id"],
        }])
        admin_account_iam = yandex.IamServiceAccountIamPolicy("admin-account-iam",
            service_account_id="aje5a**********qspd3",
            policy_data=admin.policy_data)
        ```

        ## Import

        The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).

        ```sh
        $ pulumi import yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy <resource Name> <resource Id>
        ```

        ```sh
        $ pulumi import yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy admin-account-iam aje5a**********qspd3
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] policy_data: Required only by `IamServiceAccountIamPolicy`. The policy data generated by a `get_iam_policy` data source.
        :param pulumi.Input[_builtins.str] service_account_id: The service account ID to apply a binding to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamServiceAccountIamPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        **IAM policy for a service account**
        When managing IAM roles, you can treat a service account either as a resource or as an identity. This resource is used to add IAM policy bindings to a service account resource to configure permissions that define who can edit the service account.

        There are three different resources that help you manage your IAM policy for a service account. Each of these resources is used for a different use case:
        * yandex_iam_service_account_iam_policy: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.
        * yandex_iam_service_account_iam_binding: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.
        * yandex_iam_service_account_iam_member: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role of the service account are preserved.

        > `IamServiceAccountIamPolicy` **cannot** be used in conjunction with `yandex_iam_service_account_iam_binding` and `yandex_iam_service_account_iam_member` or they will conflict over what your policy should be.

        > `yandex_iam_service_account_iam_binding` resources **can be** used in conjunction with `yandex_iam_service_account_iam_member` resources **only if** they do not grant privileges to the same role.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex as yandex
        import pulumi_yandex_marketmaker as yandex

        #
        # Create a new IAM Service Account IAM Policy.
        #
        admin = yandex.get_iam_policy(bindings=[{
            "role": "admin",
            "members": ["userAccount:foobar_user_id"],
        }])
        admin_account_iam = yandex.IamServiceAccountIamPolicy("admin-account-iam",
            service_account_id="aje5a**********qspd3",
            policy_data=admin.policy_data)
        ```

        ## Import

        The resource can be imported by using their `resource ID`. For getting the resource ID you can use Yandex Cloud [Web Console](https://console.yandex.cloud) or [YC CLI](https://yandex.cloud/docs/cli/quickstart).

        ```sh
        $ pulumi import yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy <resource Name> <resource Id>
        ```

        ```sh
        $ pulumi import yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy admin-account-iam aje5a**********qspd3
        ```

        :param str resource_name: The name of the resource.
        :param IamServiceAccountIamPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamServiceAccountIamPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_data: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamServiceAccountIamPolicyArgs.__new__(IamServiceAccountIamPolicyArgs)

            if policy_data is None and not opts.urn:
                raise TypeError("Missing required property 'policy_data'")
            __props__.__dict__["policy_data"] = policy_data
            if service_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_account_id'")
            __props__.__dict__["service_account_id"] = service_account_id
        super(IamServiceAccountIamPolicy, __self__).__init__(
            'yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policy_data: Optional[pulumi.Input[_builtins.str]] = None,
            service_account_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamServiceAccountIamPolicy':
        """
        Get an existing IamServiceAccountIamPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] policy_data: Required only by `IamServiceAccountIamPolicy`. The policy data generated by a `get_iam_policy` data source.
        :param pulumi.Input[_builtins.str] service_account_id: The service account ID to apply a binding to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamServiceAccountIamPolicyState.__new__(_IamServiceAccountIamPolicyState)

        __props__.__dict__["policy_data"] = policy_data
        __props__.__dict__["service_account_id"] = service_account_id
        return IamServiceAccountIamPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> pulumi.Output[_builtins.str]:
        """
        Required only by `IamServiceAccountIamPolicy`. The policy data generated by a `get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The service account ID to apply a binding to.
        """
        return pulumi.get(self, "service_account_id")

