# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamWorkloadIdentityOidcFederationResult',
    'AwaitableGetIamWorkloadIdentityOidcFederationResult',
    'get_iam_workload_identity_oidc_federation',
    'get_iam_workload_identity_oidc_federation_output',
]

@pulumi.output_type
class GetIamWorkloadIdentityOidcFederationResult:
    """
    A collection of values returned by getIamWorkloadIdentityOidcFederation.
    """
    def __init__(__self__, audiences=None, created_at=None, description=None, enabled=None, federation_id=None, folder_id=None, id=None, issuer=None, jwks_url=None, labels=None, name=None):
        if audiences and not isinstance(audiences, list):
            raise TypeError("Expected argument 'audiences' to be a list")
        pulumi.set(__self__, "audiences", audiences)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if federation_id and not isinstance(federation_id, str):
            raise TypeError("Expected argument 'federation_id' to be a str")
        pulumi.set(__self__, "federation_id", federation_id)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if issuer and not isinstance(issuer, str):
            raise TypeError("Expected argument 'issuer' to be a str")
        pulumi.set(__self__, "issuer", issuer)
        if jwks_url and not isinstance(jwks_url, str):
            raise TypeError("Expected argument 'jwks_url' to be a str")
        pulumi.set(__self__, "jwks_url", jwks_url)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def audiences(self) -> Sequence[_builtins.str]:
        """
        List of trusted values for aud claim.
        """
        return pulumi.get(self, "audiences")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Creation timestamp.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the OIDC workload identity federation.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="federationId")
    def federation_id(self) -> _builtins.str:
        """
        Id of the OIDC workload identity federation.
        """
        return pulumi.get(self, "federation_id")

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> _builtins.str:
        """
        Id of the folder that the OIDC workload identity federation belongs to.
        """
        return pulumi.get(self, "folder_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        """
        Issuer identifier of the external IdP server to be used for authentication.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="jwksUrl")
    def jwks_url(self) -> _builtins.str:
        """
        URL reference to trusted keys in format of JSON Web Key Set.
        """
        return pulumi.get(self, "jwks_url")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        Resource labels as key-value pairs.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the OIDC workload identity federation. The name is unique within the folder.
        """
        return pulumi.get(self, "name")


class AwaitableGetIamWorkloadIdentityOidcFederationResult(GetIamWorkloadIdentityOidcFederationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamWorkloadIdentityOidcFederationResult(
            audiences=self.audiences,
            created_at=self.created_at,
            description=self.description,
            enabled=self.enabled,
            federation_id=self.federation_id,
            folder_id=self.folder_id,
            id=self.id,
            issuer=self.issuer,
            jwks_url=self.jwks_url,
            labels=self.labels,
            name=self.name)


def get_iam_workload_identity_oidc_federation(federation_id: Optional[_builtins.str] = None,
                                              name: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamWorkloadIdentityOidcFederationResult:
    """
    Get information about a [Yandex Cloud IAM workload identity OIDC federation](https://yandex.cloud/docs/iam/concepts/workload-identity).


    :param _builtins.str federation_id: Id of the OIDC workload identity federation.
    :param _builtins.str name: Name of the OIDC workload identity federation. The name is unique within the folder.
    """
    __args__ = dict()
    __args__['federationId'] = federation_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getIamWorkloadIdentityOidcFederation:getIamWorkloadIdentityOidcFederation', __args__, opts=opts, typ=GetIamWorkloadIdentityOidcFederationResult).value

    return AwaitableGetIamWorkloadIdentityOidcFederationResult(
        audiences=pulumi.get(__ret__, 'audiences'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        federation_id=pulumi.get(__ret__, 'federation_id'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        issuer=pulumi.get(__ret__, 'issuer'),
        jwks_url=pulumi.get(__ret__, 'jwks_url'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'))
def get_iam_workload_identity_oidc_federation_output(federation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamWorkloadIdentityOidcFederationResult]:
    """
    Get information about a [Yandex Cloud IAM workload identity OIDC federation](https://yandex.cloud/docs/iam/concepts/workload-identity).


    :param _builtins.str federation_id: Id of the OIDC workload identity federation.
    :param _builtins.str name: Name of the OIDC workload identity federation. The name is unique within the folder.
    """
    __args__ = dict()
    __args__['federationId'] = federation_id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('yandex:index/getIamWorkloadIdentityOidcFederation:getIamWorkloadIdentityOidcFederation', __args__, opts=opts, typ=GetIamWorkloadIdentityOidcFederationResult)
    return __ret__.apply(lambda __response__: GetIamWorkloadIdentityOidcFederationResult(
        audiences=pulumi.get(__response__, 'audiences'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        federation_id=pulumi.get(__response__, 'federation_id'),
        folder_id=pulumi.get(__response__, 'folder_id'),
        id=pulumi.get(__response__, 'id'),
        issuer=pulumi.get(__response__, 'issuer'),
        jwks_url=pulumi.get(__response__, 'jwks_url'),
        labels=pulumi.get(__response__, 'labels'),
        name=pulumi.get(__response__, 'name')))
