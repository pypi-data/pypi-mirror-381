name: release
run-name: publish ${{ github.event.workflow_run.head_commit.message }}

on:
  workflow_run:
    workflows: ["main"]
    branches: ["release/candidate"]
    types:
      - completed

jobs:
  verify:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Verify commit message format
        run: |
          version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          expected="release: v${version}"

          if [[ "$COMMIT_MESSAGE" != "$expected" ]]; then
            echo "❌ Invalid commit message format" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "Expected: '$expected'" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "Actual: '$COMMIT_MESSAGE'" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
        env:
          COMMIT_MESSAGE: ${{ github.event.workflow_run.head_commit.message }}

  publish-github:
    needs: verify
    permissions:
      actions: read
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Create and push git tag
        run: |
          version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          tag="v${version}"

          if [ -n "$(git tag -l "${tag}")" ]; then
            echo "- [ ] ⚠️Tag ${tag} already exists, skipping tag creation" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${tag}"
          git push origin "${tag}"
          echo "- [x] Tag ${tag} pushed" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Update release/latest branch
        run: |
          git push origin HEAD:refs/heads/release/latest
          echo "- [x] Updated branch release/latest" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Create GitHub Release
        run: |
          version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          name="v${version}"

          if gh release view "${name}" >/dev/null 2>&1; then
            echo "- [ ] ⚠️Release ${name} already exists, skipping release creation" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          gh release create "${name}" \
            --title "${name}" \
            --target release/candidate
          echo "- [x] GitHub release [${name}](${{ github.server_url }}/${{ github.repository }}/releases/tag/${name}) created" | tee -a "$GITHUB_STEP_SUMMARY"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update main branch
        run: |
          if git push origin HEAD:refs/heads/main; then
            echo "- [x] Merge release into main branch" | tee -a "$GITHUB_STEP_SUMMARY"
          else
            echo "- [ ] ⚠️Failed to merge release into main branche" | tee -a "$GITHUB_STEP_SUMMARY"
          fi

  publish-pypi:
    needs:
      - verify
    environment:
      name: pypi
      url: https://pypi.org/p/oidc-provider-mock
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      actions: read
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: python-package-distributions
          path: dist/
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
