name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Always run: Test, lint, and build Python package
  test-and-build:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    outputs:
      is-release: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for proper git history

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up pip cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Hatch
      run: pip install --upgrade hatch

    - name: Install dependencies for linting
      run: |
        # Install everything except llama-cpp-python which isn't needed for linting
        pip install hatch
        pip install ruff black
        pip install pynput rich typer psutil "tomli>=2.2.1; python_version < '3.11'" toml urllib3
        pip install -e . --no-deps

    - name: Run linting and formatting checks
      run: |
        ruff format --check .
        ruff check .

    - name: Test with pytest
      env:
        CMAKE_ARGS: "-DGGML_NO_ACCELERATE=ON -DGGML_NO_METAL=ON -DGGML_NO_LLAMAFILE=ON -DGGML_NO_CPU_REPACK=ON"
        GGML_NO_ACCELERATE: 1
        GGML_NO_METAL: 1
        GGML_NO_LLAMAFILE: 1
        GGML_NO_CPU_REPACK: 1
        CFLAGS: "-march=armv8-a"
        CXXFLAGS: "-march=armv8-a"
      run: |
        # Use direct pytest to avoid hatch argument parsing issues
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-timeout
        python -m pytest --cov=meetcap tests --cov-report=xml --cov-fail-under=74

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'  # Only upload once
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    # Only build package artifacts once (Python 3.11)
    - name: Build package
      if: matrix.python-version == '3.11'
      run: hatch build

    - name: Check package metadata
      if: matrix.python-version == '3.11'
      run: |
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  # Only on version tags: Publish to PyPI and create GitHub release
  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: test-and-build
    permissions:
      contents: write
      id-token: write  # For PyPI trusted publishing

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Output release details
      run: |
        echo "ðŸŽ‰ Release ${{ github.ref_name }} published successfully!"
        echo "ðŸ“¦ PyPI: https://pypi.org/project/meetcap/${{ github.ref_name }}/"
        echo "ðŸ“‹ GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
