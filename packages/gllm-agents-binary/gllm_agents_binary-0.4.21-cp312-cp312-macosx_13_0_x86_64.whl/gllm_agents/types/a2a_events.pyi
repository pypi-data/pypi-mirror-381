from enum import Enum
from typing import Any
from typing_extensions import TypedDict

class A2AStreamEventType(Enum):
    """Semantic event types for A2A agent-executor communication.

    These event types preserve the semantic meaning of LangChain message types
    and eliminate the need for string-based content classification downstream.
    """
    STATUS_UPDATE = 'status_update'
    CONTENT_CHUNK = 'content_chunk'
    FINAL_RESPONSE = 'final_response'
    TOOL_CALL = 'tool_call'
    TOOL_RESULT = 'tool_result'
    ERROR = 'error'

class A2AEvent(TypedDict):
    """Structured event data for A2A agent-executor communication.

    This TypedDict replaces the generic dictionary format previously used,
    providing type safety and semantic clarity for agent streaming events.

    Attributes:
        event_type: The semantic type of this event (tool call, content, etc.).
        content: The main text content of the event.
        metadata: Additional metadata associated with the event.
        tool_info: Tool-specific information (only present for tool-related events).
        is_final: Whether this event represents the final output.
        artifacts: List of artifacts generated by tools or agents.
        references: Reference data from tools that support reference collection.
        step_usage: Usage metadata associated with the event.
        total_usage: Accumulated usage metadata associated with the event.
    """
    event_type: A2AStreamEventType
    content: str
    metadata: dict[str, Any]
    tool_info: dict[str, Any] | None
    is_final: bool
    artifacts: list[dict[str, Any]] | None
    references: list[Any] | None
    step_usage: dict[str, Any] | None
    total_usage: dict[str, Any] | None
    thinking_and_activity_info: dict[str, Any] | None

class ToolCallInfo(TypedDict):
    '''Structured information for tool invocation events.

    This provides a standardized format for tool call information,
    eliminating the need for JSON encoding/decoding.

    Attributes:
        tool_calls: List of tool calls with names and arguments.
        status: Current status of the tool invocation ("running", "finished").
    '''
    tool_calls: list[dict[str, Any]]
    status: str

class ToolResultInfo(TypedDict):
    """Structured information for tool completion events.

    This provides a standardized format for tool execution results,
    eliminating the need for JSON encoding/decoding.

    Attributes:
        name: Name of the executed tool.
        args: Arguments passed to the tool.
        output: Output returned by the tool.
        execution_time: Time taken for tool execution in seconds.
    """
    name: str
    args: dict[str, Any]
    output: str
    execution_time: float | None
