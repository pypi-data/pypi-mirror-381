name: Build & Publish

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Publish target repository"
        required: true
        default: "testpypi"
        type: choice
        options: ["testpypi", "pypi"]
  push:
    tags:
      - "v*"

jobs:
  wheels-linux:
    name: Wheels (Linux)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp313-*"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install cibuildwheel
      - name: Build wheels with cibuildwheel
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_SKIP: "*-musllinux_* *_i686"
          CIBW_TEST_COMMAND: python -c "import virtualshell; print('ok')"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          # CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
        run: |
          python -m cibuildwheel --platform linux --output-dir wheelhouse .

      - name: Upload wheels (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: wheelhouse/*.whl

  wheels-windows:
    name: Wheels (Windows)
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["cp38-win_amd64", "cp39-win_amd64", "cp310-win_amd64", "cp311-win_amd64", "cp312-win_amd64", "cp313-win_amd64"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install cibuildwheel
        run: |
          py -3 -m pip install -U pip
          py -3 -m pip install cibuildwheel

      - name: Build wheels with cibuildwheel (MSVC)
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_SKIP: "*-win32"
          CIBW_ENVIRONMENT_WINDOWS: >
            CMAKE_GENERATOR="Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM="x64"
            PYBIND11_FINDPYTHON=ON
          CIBW_TEST_COMMAND: python -c "import virtualshell; print('ok')"
        run: |
          py -3 -m cibuildwheel --output-dir wheelhouse .

      - name: Upload wheels (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: wheelhouse\*.whl

  sdist:
    name: sdist (source)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build sdist
        run: |
          python -m pip install -U pip build
          python -m build --sdist --outdir dist .
          ls -l dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    needs: [wheels-linux, wheels-windows, sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    # permissions/environment ikke nødvendig for token-metoden, men skader ikke:
    permissions:
      contents: read

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_in

      - name: Gather dists
        run: |
          mkdir -p dist
          find dist_in -type f -name "*.whl" -exec cp {} dist/ \;
          find dist_in -type f -name "*.tar.gz" -exec cp {} dist/ \;
          ls -l dist

      - name: Set publish target
        id: target
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "repo=${{ inputs.target }}" >> $GITHUB_OUTPUT
          else
            echo "repo=pypi" >> $GITHUB_OUTPUT
          fi

      # ⬇️ PLASSER DE TO STEGENE DINE HER ⬇️
      - name: Publish to TestPyPI (token)
        if: steps.target.outputs.repo == 'testpypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          skip-existing: true
          verbose: true
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

      - name: Publish to PyPI (token)
        if: steps.target.outputs.repo == 'pypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: false
          verbose: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
