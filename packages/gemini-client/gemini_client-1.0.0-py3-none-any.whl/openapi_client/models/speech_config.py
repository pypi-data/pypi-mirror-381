# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.multi_speaker_voice_config import MultiSpeakerVoiceConfig
from openapi_client.models.voice_config import VoiceConfig
from typing import Optional, Set
from typing_extensions import Self

class SpeechConfig(BaseModel):
    """
    The speech generation config.
    """ # noqa: E501
    voice_config: Optional[VoiceConfig] = Field(default=None, description="The configuration in case of single-voice output.", alias="voiceConfig")
    multi_speaker_voice_config: Optional[MultiSpeakerVoiceConfig] = Field(default=None, description="Optional. The configuration for the multi-speaker setup.  It is mutually exclusive with the voice_config field.", alias="multiSpeakerVoiceConfig")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. Language code (in BCP 47 format, e.g. \"en-US\") for speech  synthesis.   Valid values are: de-DE, en-AU, en-GB, en-IN, en-US, es-US, fr-FR, hi-IN,  pt-BR, ar-XA, es-ES, fr-CA, id-ID, it-IT, ja-JP, tr-TR, vi-VN, bn-IN,  gu-IN, kn-IN, ml-IN, mr-IN, ta-IN, te-IN, nl-NL, ko-KR, cmn-CN, pl-PL,  ru-RU, and th-TH.", alias="languageCode")
    __properties: ClassVar[List[str]] = ["voiceConfig", "multiSpeakerVoiceConfig", "languageCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpeechConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of voice_config
        if self.voice_config:
            _dict['voiceConfig'] = self.voice_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_speaker_voice_config
        if self.multi_speaker_voice_config:
            _dict['multiSpeakerVoiceConfig'] = self.multi_speaker_voice_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpeechConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "voiceConfig": VoiceConfig.from_dict(obj["voiceConfig"]) if obj.get("voiceConfig") is not None else None,
            "multiSpeakerVoiceConfig": MultiSpeakerVoiceConfig.from_dict(obj["multiSpeakerVoiceConfig"]) if obj.get("multiSpeakerVoiceConfig") is not None else None,
            "languageCode": obj.get("languageCode")
        })
        return _obj


