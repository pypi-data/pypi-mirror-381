# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.candidate import Candidate
from openapi_client.models.generate_content_response_prompt_feedback import GenerateContentResponsePromptFeedback
from openapi_client.models.generate_content_response_usage_metadata import GenerateContentResponseUsageMetadata
from typing import Optional, Set
from typing_extensions import Self

class GenerateContentResponse(BaseModel):
    """
    Response from the model supporting multiple candidate responses.   Safety ratings and content filtering are reported for both  prompt in `GenerateContentResponse.prompt_feedback` and for each candidate  in `finish_reason` and in `safety_ratings`. The API:   - Returns either all requested candidates or none of them   - Returns no candidates at all only if there was something wrong with the     prompt (check `prompt_feedback`)   - Reports feedback on each candidate in `finish_reason` and     `safety_ratings`.
    """ # noqa: E501
    candidates: Optional[List[Candidate]] = Field(default=None, description="Candidate responses from the model.")
    prompt_feedback: Optional[GenerateContentResponsePromptFeedback] = Field(default=None, description="Returns the prompt's feedback related to the content filters.", alias="promptFeedback")
    usage_metadata: Optional[GenerateContentResponseUsageMetadata] = Field(default=None, description="Output only. Metadata on the generation requests' token usage.", alias="usageMetadata")
    model_version: Optional[StrictStr] = Field(default=None, description="Output only. The model version used to generate the response.", alias="modelVersion")
    response_id: Optional[StrictStr] = Field(default=None, description="Output only. response_id is used to identify each response.", alias="responseId")
    __properties: ClassVar[List[str]] = ["candidates", "promptFeedback", "usageMetadata", "modelVersion", "responseId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateContentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "usage_metadata",
            "model_version",
            "response_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in candidates (list)
        _items = []
        if self.candidates:
            for _item_candidates in self.candidates:
                if _item_candidates:
                    _items.append(_item_candidates.to_dict())
            _dict['candidates'] = _items
        # override the default output from pydantic by calling `to_dict()` of prompt_feedback
        if self.prompt_feedback:
            _dict['promptFeedback'] = self.prompt_feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_metadata
        if self.usage_metadata:
            _dict['usageMetadata'] = self.usage_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateContentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "candidates": [Candidate.from_dict(_item) for _item in obj["candidates"]] if obj.get("candidates") is not None else None,
            "promptFeedback": GenerateContentResponsePromptFeedback.from_dict(obj["promptFeedback"]) if obj.get("promptFeedback") is not None else None,
            "usageMetadata": GenerateContentResponseUsageMetadata.from_dict(obj["usageMetadata"]) if obj.get("usageMetadata") is not None else None,
            "modelVersion": obj.get("modelVersion"),
            "responseId": obj.get("responseId")
        })
        return _obj


