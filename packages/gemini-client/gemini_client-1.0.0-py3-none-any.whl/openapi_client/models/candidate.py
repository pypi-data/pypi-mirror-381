# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.citation_metadata import CitationMetadata
from openapi_client.models.content import Content
from openapi_client.models.grounding_attribution import GroundingAttribution
from openapi_client.models.grounding_metadata import GroundingMetadata
from openapi_client.models.logprobs_result import LogprobsResult
from openapi_client.models.safety_rating import SafetyRating
from openapi_client.models.url_context_metadata import UrlContextMetadata
from typing import Optional, Set
from typing_extensions import Self

class Candidate(BaseModel):
    """
    A response candidate generated from the model.
    """ # noqa: E501
    index: Optional[StrictInt] = Field(default=None, description="Output only. Index of the candidate in the list of response candidates.")
    content: Optional[Content] = Field(default=None, description="Output only. Generated content returned from the model.")
    finish_reason: Optional[StrictStr] = Field(default=None, description="Optional. Output only. The reason why the model stopped generating tokens.   If empty, the model has not stopped generating tokens.", alias="finishReason")
    safety_ratings: Optional[List[SafetyRating]] = Field(default=None, description="List of ratings for the safety of a response candidate.   There is at most one rating per category.", alias="safetyRatings")
    citation_metadata: Optional[CitationMetadata] = Field(default=None, description="Output only. Citation information for model-generated candidate.   This field may be populated with recitation information for any text  included in the `content`. These are passages that are \"recited\" from  copyrighted material in the foundational LLM's training data.", alias="citationMetadata")
    token_count: Optional[StrictInt] = Field(default=None, description="Output only. Token count for this candidate.", alias="tokenCount")
    grounding_attributions: Optional[List[GroundingAttribution]] = Field(default=None, description="Output only. Attribution information for sources that contributed to a  grounded answer.   This field is populated for `GenerateAnswer` calls.", alias="groundingAttributions")
    grounding_metadata: Optional[GroundingMetadata] = Field(default=None, description="Output only. Grounding metadata for the candidate.   This field is populated for `GenerateContent` calls.", alias="groundingMetadata")
    avg_logprobs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Average log probability score of the candidate.", alias="avgLogprobs")
    logprobs_result: Optional[LogprobsResult] = Field(default=None, description="Output only. Log-likelihood scores for the response tokens and top tokens", alias="logprobsResult")
    url_context_metadata: Optional[UrlContextMetadata] = Field(default=None, description="Output only. Metadata related to url context retrieval tool.", alias="urlContextMetadata")
    __properties: ClassVar[List[str]] = ["index", "content", "finishReason", "safetyRatings", "citationMetadata", "tokenCount", "groundingAttributions", "groundingMetadata", "avgLogprobs", "logprobsResult", "urlContextMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Candidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "index",
            "content",
            "finish_reason",
            "citation_metadata",
            "token_count",
            "grounding_attributions",
            "grounding_metadata",
            "avg_logprobs",
            "logprobs_result",
            "url_context_metadata",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in safety_ratings (list)
        _items = []
        if self.safety_ratings:
            for _item_safety_ratings in self.safety_ratings:
                if _item_safety_ratings:
                    _items.append(_item_safety_ratings.to_dict())
            _dict['safetyRatings'] = _items
        # override the default output from pydantic by calling `to_dict()` of citation_metadata
        if self.citation_metadata:
            _dict['citationMetadata'] = self.citation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in grounding_attributions (list)
        _items = []
        if self.grounding_attributions:
            for _item_grounding_attributions in self.grounding_attributions:
                if _item_grounding_attributions:
                    _items.append(_item_grounding_attributions.to_dict())
            _dict['groundingAttributions'] = _items
        # override the default output from pydantic by calling `to_dict()` of grounding_metadata
        if self.grounding_metadata:
            _dict['groundingMetadata'] = self.grounding_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logprobs_result
        if self.logprobs_result:
            _dict['logprobsResult'] = self.logprobs_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_context_metadata
        if self.url_context_metadata:
            _dict['urlContextMetadata'] = self.url_context_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Candidate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index": obj.get("index"),
            "content": Content.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "finishReason": obj.get("finishReason"),
            "safetyRatings": [SafetyRating.from_dict(_item) for _item in obj["safetyRatings"]] if obj.get("safetyRatings") is not None else None,
            "citationMetadata": CitationMetadata.from_dict(obj["citationMetadata"]) if obj.get("citationMetadata") is not None else None,
            "tokenCount": obj.get("tokenCount"),
            "groundingAttributions": [GroundingAttribution.from_dict(_item) for _item in obj["groundingAttributions"]] if obj.get("groundingAttributions") is not None else None,
            "groundingMetadata": GroundingMetadata.from_dict(obj["groundingMetadata"]) if obj.get("groundingMetadata") is not None else None,
            "avgLogprobs": obj.get("avgLogprobs"),
            "logprobsResult": LogprobsResult.from_dict(obj["logprobsResult"]) if obj.get("logprobsResult") is not None else None,
            "urlContextMetadata": UrlContextMetadata.from_dict(obj["urlContextMetadata"]) if obj.get("urlContextMetadata") is not None else None
        })
        return _obj


