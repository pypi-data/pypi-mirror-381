# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.candidate import Candidate
from openapi_client.models.generate_answer_response_input_feedback import GenerateAnswerResponseInputFeedback
from typing import Optional, Set
from typing_extensions import Self

class GenerateAnswerResponse(BaseModel):
    """
    Response from the model for a grounded answer.
    """ # noqa: E501
    answer: Optional[Candidate] = Field(default=None, description="Candidate answer from the model.   Note: The model *always* attempts to provide a grounded answer, even when  the answer is unlikely to be answerable from the given passages.  In that case, a low-quality or ungrounded answer may be provided, along  with a low `answerable_probability`.")
    answerable_probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The model's estimate of the probability that its answer is  correct and grounded in the input passages.   A low `answerable_probability` indicates that the answer might not be  grounded in the sources.   When `answerable_probability` is low, you may want to:   * Display a message to the effect of \"We couldnâ€™t answer that question\" to  the user.  * Fall back to a general-purpose LLM that answers the question from world  knowledge. The threshold and nature of such fallbacks will depend on  individual use cases. `0.5` is a good starting threshold.", alias="answerableProbability")
    input_feedback: Optional[GenerateAnswerResponseInputFeedback] = Field(default=None, description="Output only. Feedback related to the input data used to answer the  question, as opposed to the model-generated response to the question.   The input data can be one or more of the following:   - Question specified by the last entry in `GenerateAnswerRequest.content`  - Conversation history specified by the other entries in  `GenerateAnswerRequest.content`  - Grounding sources (`GenerateAnswerRequest.semantic_retriever` or  `GenerateAnswerRequest.inline_passages`)", alias="inputFeedback")
    __properties: ClassVar[List[str]] = ["answer", "answerableProbability", "inputFeedback"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateAnswerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "answerable_probability",
            "input_feedback",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of answer
        if self.answer:
            _dict['answer'] = self.answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_feedback
        if self.input_feedback:
            _dict['inputFeedback'] = self.input_feedback.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateAnswerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answer": Candidate.from_dict(obj["answer"]) if obj.get("answer") is not None else None,
            "answerableProbability": obj.get("answerableProbability"),
            "inputFeedback": GenerateAnswerResponseInputFeedback.from_dict(obj["inputFeedback"]) if obj.get("inputFeedback") is not None else None
        })
        return _obj


