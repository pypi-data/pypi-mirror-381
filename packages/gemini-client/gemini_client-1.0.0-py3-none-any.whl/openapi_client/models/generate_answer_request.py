# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.content import Content
from openapi_client.models.grounding_passages import GroundingPassages
from openapi_client.models.safety_setting import SafetySetting
from openapi_client.models.semantic_retriever_config import SemanticRetrieverConfig
from typing import Optional, Set
from typing_extensions import Self

class GenerateAnswerRequest(BaseModel):
    """
    Request to generate a grounded answer from the `Model`.
    """ # noqa: E501
    inline_passages: Optional[GroundingPassages] = Field(default=None, description="Passages provided inline with the request.", alias="inlinePassages")
    semantic_retriever: Optional[SemanticRetrieverConfig] = Field(default=None, description="Content retrieved from resources created via the Semantic Retriever  API.", alias="semanticRetriever")
    model: StrictStr = Field(description="Required. The name of the `Model` to use for generating the grounded  response.   Format: `model=models/{model}`.")
    contents: List[Content] = Field(description="Required. The content of the current conversation with the `Model`. For  single-turn queries, this is a single question to answer. For multi-turn  queries, this is a repeated field that contains conversation history and  the last `Content` in the list containing the question.   Note: `GenerateAnswer` only supports queries in English.")
    answer_style: StrictInt = Field(description="Required. Style in which answers should be returned.", alias="answerStyle")
    safety_settings: Optional[List[SafetySetting]] = Field(default=None, description="Optional. A list of unique `SafetySetting` instances for blocking unsafe  content.   This will be enforced on the `GenerateAnswerRequest.contents` and  `GenerateAnswerResponse.candidate`. There should not be more than one  setting for each `SafetyCategory` type. The API will block any contents and  responses that fail to meet the thresholds set by these settings. This list  overrides the default settings for each `SafetyCategory` specified in the  safety_settings. If there is no `SafetySetting` for a given  `SafetyCategory` provided in the list, the API will use the default safety  setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH,  HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,  HARM_CATEGORY_HARASSMENT are supported.  Refer to the  [guide](https://ai.google.dev/gemini-api/docs/safety-settings)  for detailed information on available safety settings. Also refer to the  [Safety guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to  learn how to incorporate safety considerations in your AI applications.", alias="safetySettings")
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Controls the randomness of the output.   Values can range from [0.0,1.0], inclusive. A value closer to 1.0 will  produce responses that are more varied and creative, while a value closer  to 0.0 will typically result in more straightforward responses from the  model. A low temperature (~0.2) is usually recommended for  Attributed-Question-Answering use cases.")
    __properties: ClassVar[List[str]] = ["inlinePassages", "semanticRetriever", "model", "contents", "answerStyle", "safetySettings", "temperature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateAnswerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inline_passages
        if self.inline_passages:
            _dict['inlinePassages'] = self.inline_passages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of semantic_retriever
        if self.semantic_retriever:
            _dict['semanticRetriever'] = self.semantic_retriever.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in safety_settings (list)
        _items = []
        if self.safety_settings:
            for _item_safety_settings in self.safety_settings:
                if _item_safety_settings:
                    _items.append(_item_safety_settings.to_dict())
            _dict['safetySettings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateAnswerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inlinePassages": GroundingPassages.from_dict(obj["inlinePassages"]) if obj.get("inlinePassages") is not None else None,
            "semanticRetriever": SemanticRetrieverConfig.from_dict(obj["semanticRetriever"]) if obj.get("semanticRetriever") is not None else None,
            "model": obj.get("model"),
            "contents": [Content.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "answerStyle": obj.get("answerStyle"),
            "safetySettings": [SafetySetting.from_dict(_item) for _item in obj["safetySettings"]] if obj.get("safetySettings") is not None else None,
            "temperature": obj.get("temperature")
        })
        return _obj


