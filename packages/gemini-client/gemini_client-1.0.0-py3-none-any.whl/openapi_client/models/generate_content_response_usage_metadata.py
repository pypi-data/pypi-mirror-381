# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.modality_token_count import ModalityTokenCount
from typing import Optional, Set
from typing_extensions import Self

class GenerateContentResponseUsageMetadata(BaseModel):
    """
    Metadata on the generation request's token usage.
    """ # noqa: E501
    prompt_token_count: Optional[StrictInt] = Field(default=None, description="Number of tokens in the prompt. When `cached_content` is set, this is  still the total effective prompt size meaning this includes the number of  tokens in the cached content.", alias="promptTokenCount")
    cached_content_token_count: Optional[StrictInt] = Field(default=None, description="Number of tokens in the cached part of the prompt (the cached content)", alias="cachedContentTokenCount")
    candidates_token_count: Optional[StrictInt] = Field(default=None, description="Total number of tokens across all the generated response candidates.", alias="candidatesTokenCount")
    tool_use_prompt_token_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of tokens present in tool-use prompt(s).", alias="toolUsePromptTokenCount")
    thoughts_token_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of tokens of thoughts for thinking models.", alias="thoughtsTokenCount")
    total_token_count: Optional[StrictInt] = Field(default=None, description="Total token count for the generation request (prompt + response  candidates).", alias="totalTokenCount")
    prompt_tokens_details: Optional[List[ModalityTokenCount]] = Field(default=None, description="Output only. List of modalities that were processed in the request input.", alias="promptTokensDetails")
    cache_tokens_details: Optional[List[ModalityTokenCount]] = Field(default=None, description="Output only. List of modalities of the cached content in the request  input.", alias="cacheTokensDetails")
    candidates_tokens_details: Optional[List[ModalityTokenCount]] = Field(default=None, description="Output only. List of modalities that were returned in the response.", alias="candidatesTokensDetails")
    tool_use_prompt_tokens_details: Optional[List[ModalityTokenCount]] = Field(default=None, description="Output only. List of modalities that were processed for tool-use request  inputs.", alias="toolUsePromptTokensDetails")
    __properties: ClassVar[List[str]] = ["promptTokenCount", "cachedContentTokenCount", "candidatesTokenCount", "toolUsePromptTokenCount", "thoughtsTokenCount", "totalTokenCount", "promptTokensDetails", "cacheTokensDetails", "candidatesTokensDetails", "toolUsePromptTokensDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateContentResponseUsageMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "tool_use_prompt_token_count",
            "thoughts_token_count",
            "prompt_tokens_details",
            "cache_tokens_details",
            "candidates_tokens_details",
            "tool_use_prompt_tokens_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prompt_tokens_details (list)
        _items = []
        if self.prompt_tokens_details:
            for _item_prompt_tokens_details in self.prompt_tokens_details:
                if _item_prompt_tokens_details:
                    _items.append(_item_prompt_tokens_details.to_dict())
            _dict['promptTokensDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cache_tokens_details (list)
        _items = []
        if self.cache_tokens_details:
            for _item_cache_tokens_details in self.cache_tokens_details:
                if _item_cache_tokens_details:
                    _items.append(_item_cache_tokens_details.to_dict())
            _dict['cacheTokensDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in candidates_tokens_details (list)
        _items = []
        if self.candidates_tokens_details:
            for _item_candidates_tokens_details in self.candidates_tokens_details:
                if _item_candidates_tokens_details:
                    _items.append(_item_candidates_tokens_details.to_dict())
            _dict['candidatesTokensDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tool_use_prompt_tokens_details (list)
        _items = []
        if self.tool_use_prompt_tokens_details:
            for _item_tool_use_prompt_tokens_details in self.tool_use_prompt_tokens_details:
                if _item_tool_use_prompt_tokens_details:
                    _items.append(_item_tool_use_prompt_tokens_details.to_dict())
            _dict['toolUsePromptTokensDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateContentResponseUsageMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "promptTokenCount": obj.get("promptTokenCount"),
            "cachedContentTokenCount": obj.get("cachedContentTokenCount"),
            "candidatesTokenCount": obj.get("candidatesTokenCount"),
            "toolUsePromptTokenCount": obj.get("toolUsePromptTokenCount"),
            "thoughtsTokenCount": obj.get("thoughtsTokenCount"),
            "totalTokenCount": obj.get("totalTokenCount"),
            "promptTokensDetails": [ModalityTokenCount.from_dict(_item) for _item in obj["promptTokensDetails"]] if obj.get("promptTokensDetails") is not None else None,
            "cacheTokensDetails": [ModalityTokenCount.from_dict(_item) for _item in obj["cacheTokensDetails"]] if obj.get("cacheTokensDetails") is not None else None,
            "candidatesTokensDetails": [ModalityTokenCount.from_dict(_item) for _item in obj["candidatesTokensDetails"]] if obj.get("candidatesTokensDetails") is not None else None,
            "toolUsePromptTokensDetails": [ModalityTokenCount.from_dict(_item) for _item in obj["toolUsePromptTokensDetails"]] if obj.get("toolUsePromptTokensDetails") is not None else None
        })
        return _obj


