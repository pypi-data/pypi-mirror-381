# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content import Content
from openapi_client.models.generation_config import GenerationConfig
from openapi_client.models.safety_setting import SafetySetting
from openapi_client.models.tool import Tool
from openapi_client.models.tool_config import ToolConfig
from typing import Optional, Set
from typing_extensions import Self

class GenerateContentRequest(BaseModel):
    """
    Request to generate a completion from the model.
    """ # noqa: E501
    model: StrictStr = Field(description="Required. The name of the `Model` to use for generating the completion.   Format: `models/{model}`.")
    system_instruction: Optional[Content] = Field(default=None, description="Optional. Developer set [system  instruction(s)](https://ai.google.dev/gemini-api/docs/system-instructions).  Currently, text only.", alias="systemInstruction")
    contents: List[Content] = Field(description="Required. The content of the current conversation with the model.   For single-turn queries, this is a single instance. For multi-turn queries  like [chat](https://ai.google.dev/gemini-api/docs/text-generation#chat),  this is a repeated field that contains the conversation history and the  latest request.")
    tools: Optional[List[Tool]] = Field(default=None, description="Optional. A list of `Tools` the `Model` may use to generate the next  response.   A `Tool` is a piece of code that enables the system to interact with  external systems to perform an action, or set of actions, outside of  knowledge and scope of the `Model`. Supported `Tool`s are `Function` and  `code_execution`. Refer to the [Function  calling](https://ai.google.dev/gemini-api/docs/function-calling) and the  [Code execution](https://ai.google.dev/gemini-api/docs/code-execution)  guides to learn more.")
    tool_config: Optional[ToolConfig] = Field(default=None, description="Optional. Tool configuration for any `Tool` specified in the request. Refer  to the [Function calling  guide](https://ai.google.dev/gemini-api/docs/function-calling#function_calling_mode)  for a usage example.", alias="toolConfig")
    safety_settings: Optional[List[SafetySetting]] = Field(default=None, description="Optional. A list of unique `SafetySetting` instances for blocking unsafe  content.   This will be enforced on the `GenerateContentRequest.contents` and  `GenerateContentResponse.candidates`. There should not be more than one  setting for each `SafetyCategory` type. The API will block any contents and  responses that fail to meet the thresholds set by these settings. This list  overrides the default settings for each `SafetyCategory` specified in the  safety_settings. If there is no `SafetySetting` for a given  `SafetyCategory` provided in the list, the API will use the default safety  setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH,  HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,  HARM_CATEGORY_HARASSMENT, HARM_CATEGORY_CIVIC_INTEGRITY are supported.  Refer to the [guide](https://ai.google.dev/gemini-api/docs/safety-settings)  for detailed information on available safety settings. Also refer to the  [Safety guidance](https://ai.google.dev/gemini-api/docs/safety-guidance) to  learn how to incorporate safety considerations in your AI applications.", alias="safetySettings")
    generation_config: Optional[GenerationConfig] = Field(default=None, description="Optional. Configuration options for model generation and outputs.", alias="generationConfig")
    cached_content: Optional[StrictStr] = Field(default=None, description="Optional. The name of the content  [cached](https://ai.google.dev/gemini-api/docs/caching) to use as context  to serve the prediction. Format: `cachedContents/{cachedContent}`", alias="cachedContent")
    __properties: ClassVar[List[str]] = ["model", "systemInstruction", "contents", "tools", "toolConfig", "safetySettings", "generationConfig", "cachedContent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateContentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of system_instruction
        if self.system_instruction:
            _dict['systemInstruction'] = self.system_instruction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        # override the default output from pydantic by calling `to_dict()` of tool_config
        if self.tool_config:
            _dict['toolConfig'] = self.tool_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in safety_settings (list)
        _items = []
        if self.safety_settings:
            for _item_safety_settings in self.safety_settings:
                if _item_safety_settings:
                    _items.append(_item_safety_settings.to_dict())
            _dict['safetySettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of generation_config
        if self.generation_config:
            _dict['generationConfig'] = self.generation_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateContentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": obj.get("model"),
            "systemInstruction": Content.from_dict(obj["systemInstruction"]) if obj.get("systemInstruction") is not None else None,
            "contents": [Content.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "tools": [Tool.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None,
            "toolConfig": ToolConfig.from_dict(obj["toolConfig"]) if obj.get("toolConfig") is not None else None,
            "safetySettings": [SafetySetting.from_dict(_item) for _item in obj["safetySettings"]] if obj.get("safetySettings") is not None else None,
            "generationConfig": GenerationConfig.from_dict(obj["generationConfig"]) if obj.get("generationConfig") is not None else None,
            "cachedContent": obj.get("cachedContent")
        })
        return _obj


