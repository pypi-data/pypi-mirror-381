# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.grounding_chunk import GroundingChunk
from openapi_client.models.grounding_support import GroundingSupport
from openapi_client.models.retrieval_metadata import RetrievalMetadata
from openapi_client.models.search_entry_point import SearchEntryPoint
from typing import Optional, Set
from typing_extensions import Self

class GroundingMetadata(BaseModel):
    """
    Metadata returned to client when grounding is enabled.
    """ # noqa: E501
    search_entry_point: Optional[SearchEntryPoint] = Field(default=None, description="Optional. Google search entry for the following-up web searches.", alias="searchEntryPoint")
    grounding_chunks: Optional[List[GroundingChunk]] = Field(default=None, description="List of supporting references retrieved from specified grounding source.", alias="groundingChunks")
    grounding_supports: Optional[List[GroundingSupport]] = Field(default=None, description="List of grounding support.", alias="groundingSupports")
    retrieval_metadata: Optional[RetrievalMetadata] = Field(default=None, description="Metadata related to retrieval in the grounding flow.", alias="retrievalMetadata")
    web_search_queries: Optional[List[StrictStr]] = Field(default=None, description="Web search queries for the following-up web search.", alias="webSearchQueries")
    __properties: ClassVar[List[str]] = ["searchEntryPoint", "groundingChunks", "groundingSupports", "retrievalMetadata", "webSearchQueries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroundingMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of search_entry_point
        if self.search_entry_point:
            _dict['searchEntryPoint'] = self.search_entry_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in grounding_chunks (list)
        _items = []
        if self.grounding_chunks:
            for _item_grounding_chunks in self.grounding_chunks:
                if _item_grounding_chunks:
                    _items.append(_item_grounding_chunks.to_dict())
            _dict['groundingChunks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grounding_supports (list)
        _items = []
        if self.grounding_supports:
            for _item_grounding_supports in self.grounding_supports:
                if _item_grounding_supports:
                    _items.append(_item_grounding_supports.to_dict())
            _dict['groundingSupports'] = _items
        # override the default output from pydantic by calling `to_dict()` of retrieval_metadata
        if self.retrieval_metadata:
            _dict['retrievalMetadata'] = self.retrieval_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroundingMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "searchEntryPoint": SearchEntryPoint.from_dict(obj["searchEntryPoint"]) if obj.get("searchEntryPoint") is not None else None,
            "groundingChunks": [GroundingChunk.from_dict(_item) for _item in obj["groundingChunks"]] if obj.get("groundingChunks") is not None else None,
            "groundingSupports": [GroundingSupport.from_dict(_item) for _item in obj["groundingSupports"]] if obj.get("groundingSupports") is not None else None,
            "retrievalMetadata": RetrievalMetadata.from_dict(obj["retrievalMetadata"]) if obj.get("retrievalMetadata") is not None else None,
            "webSearchQueries": obj.get("webSearchQueries")
        })
        return _obj


