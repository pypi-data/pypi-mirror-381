# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.segment import Segment
from typing import Optional, Set
from typing_extensions import Self

class GroundingSupport(BaseModel):
    """
    Grounding support.
    """ # noqa: E501
    segment: Optional[Segment] = Field(default=None, description="Segment of the content this support belongs to.")
    grounding_chunk_indices: Optional[List[StrictInt]] = Field(default=None, description="A list of indices (into 'grounding_chunk') specifying the  citations associated with the claim. For instance [1,3,4] means  that grounding_chunk[1], grounding_chunk[3],  grounding_chunk[4] are the retrieved content attributed to the claim.", alias="groundingChunkIndices")
    confidence_scores: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Confidence score of the support references. Ranges from 0 to 1. 1 is the  most confident. This list must have the same size as the  grounding_chunk_indices.", alias="confidenceScores")
    __properties: ClassVar[List[str]] = ["segment", "groundingChunkIndices", "confidenceScores"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroundingSupport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroundingSupport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "segment": Segment.from_dict(obj["segment"]) if obj.get("segment") is not None else None,
            "groundingChunkIndices": obj.get("groundingChunkIndices"),
            "confidenceScores": obj.get("confidenceScores")
        })
        return _obj


