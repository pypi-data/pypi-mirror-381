# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content import Content
from openapi_client.models.generate_content_request import GenerateContentRequest
from typing import Optional, Set
from typing_extensions import Self

class CountTokensRequest(BaseModel):
    """
    Counts the number of tokens in the `prompt` sent to a model.   Models may tokenize text differently, so each model may return a different  `token_count`.
    """ # noqa: E501
    model: StrictStr = Field(description="Required. The model's resource name. This serves as an ID for the Model to  use.   This name should match a model name returned by the `ListModels` method.   Format: `models/{model}`")
    contents: Optional[List[Content]] = Field(default=None, description="Optional. The input given to the model as a prompt. This field is ignored  when `generate_content_request` is set.")
    generate_content_request: Optional[GenerateContentRequest] = Field(default=None, description="Optional. The overall input given to the `Model`. This includes the prompt  as well as other model steering information like [system  instructions](https://ai.google.dev/gemini-api/docs/system-instructions),  and/or function declarations for [function  calling](https://ai.google.dev/gemini-api/docs/function-calling).  `Model`s/`Content`s and `generate_content_request`s are mutually  exclusive. You can either send `Model` + `Content`s or a  `generate_content_request`, but never both.", alias="generateContentRequest")
    __properties: ClassVar[List[str]] = ["model", "contents", "generateContentRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CountTokensRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of generate_content_request
        if self.generate_content_request:
            _dict['generateContentRequest'] = self.generate_content_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CountTokensRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": obj.get("model"),
            "contents": [Content.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "generateContentRequest": GenerateContentRequest.from_dict(obj["generateContentRequest"]) if obj.get("generateContentRequest") is not None else None
        })
        return _obj


