# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.blob import Blob
from openapi_client.models.code_execution_result import CodeExecutionResult
from openapi_client.models.executable_code import ExecutableCode
from openapi_client.models.file_data import FileData
from openapi_client.models.function_call import FunctionCall
from openapi_client.models.function_response import FunctionResponse
from openapi_client.models.video_metadata import VideoMetadata
from typing import Optional, Set
from typing_extensions import Self

class Part(BaseModel):
    """
    A datatype containing media that is part of a multi-part `Content` message.   A `Part` consists of data which has an associated datatype. A `Part` can only  contain one of the accepted types in `Part.data`.   A `Part` must have a fixed IANA MIME type identifying the type and subtype  of the media if the `inline_data` field is filled with raw bytes.
    """ # noqa: E501
    text: Optional[StrictStr] = Field(default=None, description="Inline text.")
    inline_data: Optional[Blob] = Field(default=None, description="Inline media bytes.", alias="inlineData")
    function_call: Optional[FunctionCall] = Field(default=None, description="A predicted `FunctionCall` returned from the model that contains  a string representing the `FunctionDeclaration.name` with the  arguments and their values.", alias="functionCall")
    function_response: Optional[FunctionResponse] = Field(default=None, description="The result output of a `FunctionCall` that contains a string  representing the `FunctionDeclaration.name` and a structured JSON  object containing any output from the function is used as context to  the model.", alias="functionResponse")
    file_data: Optional[FileData] = Field(default=None, description="URI based data.", alias="fileData")
    executable_code: Optional[ExecutableCode] = Field(default=None, description="Code generated by the model that is meant to be executed.", alias="executableCode")
    code_execution_result: Optional[CodeExecutionResult] = Field(default=None, description="Result of executing the `ExecutableCode`.", alias="codeExecutionResult")
    video_metadata: Optional[VideoMetadata] = Field(default=None, description="Optional. Video metadata. The metadata should only be specified while the  video data is presented in inline_data or file_data.", alias="videoMetadata")
    thought: Optional[StrictBool] = Field(default=None, description="Optional. Indicates if the part is thought from the model.")
    thought_signature: Optional[StrictStr] = Field(default=None, description="Optional. An opaque signature for the thought so it can be reused in  subsequent requests.", alias="thoughtSignature")
    __properties: ClassVar[List[str]] = ["text", "inlineData", "functionCall", "functionResponse", "fileData", "executableCode", "codeExecutionResult", "videoMetadata", "thought", "thoughtSignature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Part from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inline_data
        if self.inline_data:
            _dict['inlineData'] = self.inline_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function_call
        if self.function_call:
            _dict['functionCall'] = self.function_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function_response
        if self.function_response:
            _dict['functionResponse'] = self.function_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_data
        if self.file_data:
            _dict['fileData'] = self.file_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of executable_code
        if self.executable_code:
            _dict['executableCode'] = self.executable_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_execution_result
        if self.code_execution_result:
            _dict['codeExecutionResult'] = self.code_execution_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_metadata
        if self.video_metadata:
            _dict['videoMetadata'] = self.video_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Part from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "inlineData": Blob.from_dict(obj["inlineData"]) if obj.get("inlineData") is not None else None,
            "functionCall": FunctionCall.from_dict(obj["functionCall"]) if obj.get("functionCall") is not None else None,
            "functionResponse": FunctionResponse.from_dict(obj["functionResponse"]) if obj.get("functionResponse") is not None else None,
            "fileData": FileData.from_dict(obj["fileData"]) if obj.get("fileData") is not None else None,
            "executableCode": ExecutableCode.from_dict(obj["executableCode"]) if obj.get("executableCode") is not None else None,
            "codeExecutionResult": CodeExecutionResult.from_dict(obj["codeExecutionResult"]) if obj.get("codeExecutionResult") is not None else None,
            "videoMetadata": VideoMetadata.from_dict(obj["videoMetadata"]) if obj.get("videoMetadata") is not None else None,
            "thought": obj.get("thought"),
            "thoughtSignature": obj.get("thoughtSignature")
        })
        return _obj


