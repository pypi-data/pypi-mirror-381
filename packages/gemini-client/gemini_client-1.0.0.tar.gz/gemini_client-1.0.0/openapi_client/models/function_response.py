# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FunctionResponse(BaseModel):
    """
    The result output from a `FunctionCall` that contains a string  representing the `FunctionDeclaration.name` and a structured JSON  object containing any output from the function is used as context to  the model. This should contain the result of a`FunctionCall` made  based on model prediction.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Optional. The id of the function call this response is for. Populated by  the client to match the corresponding function call `id`.")
    name: StrictStr = Field(description="Required. The name of the function to call.  Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum  length of 63.")
    response: Dict[str, Any] = Field(description="Required. The function response in JSON object format.")
    will_continue: Optional[StrictBool] = Field(default=None, description="Optional. Signals that function call continues, and more responses will be  returned, turning the function call into a generator.  Is only applicable to NON_BLOCKING function calls, is ignored otherwise.  If set to false, future responses will not be considered.  It is allowed to return empty `response` with `will_continue=False` to  signal that the function call is finished. This may still trigger the model  generation. To avoid triggering the generation and finish the function  call, additionally set `scheduling` to `SILENT`.", alias="willContinue")
    scheduling: Optional[StrictInt] = Field(default=None, description="Optional. Specifies how the response should be scheduled in the  conversation. Only applicable to NON_BLOCKING function calls, is ignored  otherwise. Defaults to WHEN_IDLE.")
    __properties: ClassVar[List[str]] = ["id", "name", "response", "willContinue", "scheduling"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FunctionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FunctionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "response": obj.get("response"),
            "willContinue": obj.get("willContinue"),
            "scheduling": obj.get("scheduling")
        })
        return _obj


