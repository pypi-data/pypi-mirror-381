# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.function_declaration import FunctionDeclaration
from openapi_client.models.google_search_retrieval import GoogleSearchRetrieval
from openapi_client.models.tool_google_search import ToolGoogleSearch
from typing import Optional, Set
from typing_extensions import Self

class Tool(BaseModel):
    """
    Tool details that the model may use to generate response.   A `Tool` is a piece of code that enables the system to interact with  external systems to perform an action, or set of actions, outside of  knowledge and scope of the model.
    """ # noqa: E501
    function_declarations: Optional[List[FunctionDeclaration]] = Field(default=None, description="Optional. A list of `FunctionDeclarations` available to the model that can  be used for function calling.   The model or system does not execute the function. Instead the defined  function may be returned as a  [FunctionCall][google.ai.generativelanguage.v1beta.Part.function_call] with  arguments to the client side for execution. The model may decide to call a  subset of these functions by populating  [FunctionCall][google.ai.generativelanguage.v1beta.Part.function_call] in  the response. The next conversation turn may contain a  [FunctionResponse][google.ai.generativelanguage.v1beta.Part.function_response]  with the [Content.role][google.ai.generativelanguage.v1beta.Content.role]  \"function\" generation context for the next model turn.", alias="functionDeclarations")
    google_search_retrieval: Optional[GoogleSearchRetrieval] = Field(default=None, description="Optional. Retrieval tool that is powered by Google search.", alias="googleSearchRetrieval")
    code_execution: Optional[Dict[str, Any]] = Field(default=None, description="Optional. Enables the model to execute code as part of generation.", alias="codeExecution")
    google_search: Optional[ToolGoogleSearch] = Field(default=None, description="Optional. GoogleSearch tool type.  Tool to support Google Search in Model. Powered by Google.", alias="googleSearch")
    url_context: Optional[Dict[str, Any]] = Field(default=None, description="Optional. Tool to support URL context retrieval.", alias="urlContext")
    __properties: ClassVar[List[str]] = ["functionDeclarations", "googleSearchRetrieval", "codeExecution", "googleSearch", "urlContext"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in function_declarations (list)
        _items = []
        if self.function_declarations:
            for _item_function_declarations in self.function_declarations:
                if _item_function_declarations:
                    _items.append(_item_function_declarations.to_dict())
            _dict['functionDeclarations'] = _items
        # override the default output from pydantic by calling `to_dict()` of google_search_retrieval
        if self.google_search_retrieval:
            _dict['googleSearchRetrieval'] = self.google_search_retrieval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_search
        if self.google_search:
            _dict['googleSearch'] = self.google_search.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "functionDeclarations": [FunctionDeclaration.from_dict(_item) for _item in obj["functionDeclarations"]] if obj.get("functionDeclarations") is not None else None,
            "googleSearchRetrieval": GoogleSearchRetrieval.from_dict(obj["googleSearchRetrieval"]) if obj.get("googleSearchRetrieval") is not None else None,
            "codeExecution": obj.get("codeExecution"),
            "googleSearch": ToolGoogleSearch.from_dict(obj["googleSearch"]) if obj.get("googleSearch") is not None else None,
            "urlContext": obj.get("urlContext")
        })
        return _obj


