# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.safety_rating import SafetyRating
from typing import Optional, Set
from typing_extensions import Self

class GenerateContentResponsePromptFeedback(BaseModel):
    """
    A set of the feedback metadata the prompt specified in  `GenerateContentRequest.content`.
    """ # noqa: E501
    block_reason: Optional[StrictInt] = Field(default=None, description="Optional. If set, the prompt was blocked and no candidates are returned.  Rephrase the prompt.", alias="blockReason")
    safety_ratings: Optional[List[SafetyRating]] = Field(default=None, description="Ratings for safety of the prompt.  There is at most one rating per category.", alias="safetyRatings")
    __properties: ClassVar[List[str]] = ["blockReason", "safetyRatings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateContentResponsePromptFeedback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in safety_ratings (list)
        _items = []
        if self.safety_ratings:
            for _item_safety_ratings in self.safety_ratings:
                if _item_safety_ratings:
                    _items.append(_item_safety_ratings.to_dict())
            _dict['safetyRatings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateContentResponsePromptFeedback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockReason": obj.get("blockReason"),
            "safetyRatings": [SafetyRating.from_dict(_item) for _item in obj["safetyRatings"]] if obj.get("safetyRatings") is not None else None
        })
        return _obj


