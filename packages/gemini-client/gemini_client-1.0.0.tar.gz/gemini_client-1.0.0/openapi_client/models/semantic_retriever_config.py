# coding: utf-8

"""
    GenerativeService API

    API for using Large Models that generate multimodal content and have  additional capabilities beyond text generation.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.content import Content
from openapi_client.models.metadata_filter import MetadataFilter
from typing import Optional, Set
from typing_extensions import Self

class SemanticRetrieverConfig(BaseModel):
    """
    Configuration for retrieving grounding content from a `Corpus` or  `Document` created using the Semantic Retriever API.
    """ # noqa: E501
    source: StrictStr = Field(description="Required. Name of the resource for retrieval. Example: `corpora/123` or  `corpora/123/documents/abc`.")
    query: Content = Field(description="Required. Query to use for matching `Chunk`s in the given resource by  similarity.")
    metadata_filters: Optional[List[MetadataFilter]] = Field(default=None, description="Optional. Filters for selecting `Document`s and/or `Chunk`s from the  resource.", alias="metadataFilters")
    max_chunks_count: Optional[StrictInt] = Field(default=None, description="Optional. Maximum number of relevant `Chunk`s to retrieve.", alias="maxChunksCount")
    minimum_relevance_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Minimum relevance score for retrieved relevant `Chunk`s.", alias="minimumRelevanceScore")
    __properties: ClassVar[List[str]] = ["source", "query", "metadataFilters", "maxChunksCount", "minimumRelevanceScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SemanticRetrieverConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata_filters (list)
        _items = []
        if self.metadata_filters:
            for _item_metadata_filters in self.metadata_filters:
                if _item_metadata_filters:
                    _items.append(_item_metadata_filters.to_dict())
            _dict['metadataFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SemanticRetrieverConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": obj.get("source"),
            "query": Content.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "metadataFilters": [MetadataFilter.from_dict(_item) for _item in obj["metadataFilters"]] if obj.get("metadataFilters") is not None else None,
            "maxChunksCount": obj.get("maxChunksCount"),
            "minimumRelevanceScore": obj.get("minimumRelevanceScore")
        })
        return _obj


