
//
// convert
//

const trueBoolStrings = ['1', 'true', 't', 'yes', 'y', 'on'];

function convertListElementBool(input) {
    return trueBoolStrings.includes(input.toLowerCase());
}

function convertListElementInt(input) {
    return parseInt(input);
}

function convertListElementFloat(input) {
    const split = input.split('.');
    if (split.length > 2) {
        throw new Error('Invalid float');
    }
    let result = parseFloat(input)
    if (parseInt(split[1]) === 0) {
        result += 0.0000001;
    }
    
    return result;
}

function convertListElementEnum(input) {
    return input;
}

function convertListElementStr(str) {
    return str;
}

function convertListElementDatetime(input) {
    const date = new Date(input);
    if (isNaN(date.getTime())) {
        throw new Error('Invalid datetime');
    }
    return date;
}

//
// defs
//

const multi_enum_options = [
    'giraffe', 
    'elephant', 
    'zebra'
]

//
// data functions
//

function initMultiModel(data) {
    let result = {
        user_id: data.user_id || '',
    }

    if (typeof data.id !== 'undefined') {
        result.id = data.id;
    }
    return result;
}

function exampleMultiModel() {
    const data = {
        multi_bool: [true, false],
        multi_int: [1, 2, 3],
        multi_float: [1.1, 2.2, 3.3],
        multi_string: ['sequence', 'of', 'words'],
        multi_enum: ['giraffe', 'elephant', 'zebra'],
        multi_datetime: [new Date('2023-01-01T00:00:00Z'), new Date('2023-01-02T00:00:00Z')],
    }
    return {...data}
}

function randomMultiModel() {
    return {
    }
}

function verifyMultiModel(data) {

    let result = {
        valid: true,
        errors: {}
    }


    return result

}

function multiModelFromInputTBody(tbody) {
    console.log('multiModelFromInputTBody', tbody);
    const data = {};

    // parse id if exists

    const idInput = tbody.querySelector('input[name="id"]');
    if (idInput) {
        data.id = idInput.value;
    }


    return data;
}

function multiModelToInputTBody(data, tbody) {
    tbody.innerHTML = '';

    // show id if present

    if (typeof data.id !== 'undefined') {
        const idTdKey = document.createElement('td');
        idTdKey.textContent = 'id';

        const idTdInput = document.createElement('td');
        const idInput = document.createElement('input');
        idInput.name = 'id';
        idInput.value = data.id;
        idInput.size = 35;
        idInput.readOnly = true;
        idTdInput.appendChild(idInput);

        const idTdOther = document.createElement('td');
        idTdOther.textContent = '-';

        const idTr = document.createElement('tr');
        idTr.appendChild(idTdKey);
        idTr.appendChild(idTdInput);
        idTr.appendChild(idTdOther);

        tbody.appendChild(idTr);
    }


    return tbody;

}

function multiModelToDisplayTBody(data, tbody) {
    tbody.innerHTML = '';

    // id - string

    const idTdKey = document.createElement('td');
    idTdKey.textContent = 'id';

    const idTdValue = document.createElement('td');
    idTdValue.textContent = data.id;

    const idTr = document.createElement('tr');
    idTr.appendChild(idTdKey);
    idTr.appendChild(idTdValue);

    tbody.appendChild(idTr);




    return tbody;
}

function multiModelToTableRow(data) {

    const tr = document.createElement('tr');
    tr.style.cursor = 'pointer';
    tr.onclick = () => window.location.href = `/template-module/multi-model/${data.id}`

    // id - string

    const idTd = document.createElement('td');
    idTd.textContent = data.id;
    tr.appendChild(idTd);



    return tr;

}

function multiModelListToDisplayTBody(multiModelList, tbody) {

    tbody.innerHTML = '';

    for (const multiModel of multiModelList) {
        tbody.appendChild(multiModelToTableRow(multiModel));
    }

    return tbody;

}

//
// serialize functions
//

function multiModelForJSON(data) {
    // convert an items types to be ready to JSON

    let result = {}
    for (const field in data) {
        if (Object.prototype.toString.call(data[field]) === '[object Date]') {
            result[field] = data[field].toISOString().split('.')[0];
        }else if (Array.isArray(data[field])) {
            result[field] = data[field].map((item) => {
                if (Object.prototype.toString.call(item) === '[object Date]') {
                    return item.toISOString().split('.')[0];
                }else{
                    return item;
                }
            });
        }else{
            result[field] = data[field];
        }
    }
    return result;
}

//
// client functions
//

function clientCreateMultiModel(data) {

    return fetchWithSession('/api/template-module/multi-model', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })
}

function clientReadMultiModel(id) {

    return fetchWithSession(`/api/template-module/multi-model/${id}`, {
        method: 'GET',
    })
}

function clientUpdateMultiModel(id, data) {

    return fetchWithSession(`/api/template-module/multi-model/${id}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })

}

function clientDeleteMultiModel(id) {

    return fetchWithSession(`/api/template-module/multi-model/${id}`, {
        method: 'DELETE',
    })

}

function clientListMultiModels(offset, size) {

    return fetchWithSession(`/api/template-module/multi-model?offset=${offset}&size=${size}`, {
        method: 'GET',
    })
}