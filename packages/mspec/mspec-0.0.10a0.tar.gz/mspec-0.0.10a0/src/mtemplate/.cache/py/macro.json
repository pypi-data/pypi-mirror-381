{
    "py_convert_types_datetime": {
        "name": "py_convert_types_datetime",
        "text": "        # single_datetime - datetime\n        if isinstance(self.single_datetime, str):\n            self.single_datetime = datetime.strptime(self.single_datetime, datetime_format_str).replace(microsecond=0)\n",
        "vars": {
            "single_datetime": "field.name.snake_case"
        }
    },
    "py_convert_types_list_datetime": {
        "name": "py_convert_types_list_datetime",
        "text": "        # multi_datetime - list of datetime\n        new_values = []\n        for item in self.multi_datetime:\n            if isinstance(item, str):\n                new_values.append(datetime.strptime(item, datetime_format_str).replace(microsecond=0))\n            else:\n                new_values.append(item)\n            \n        self.multi_datetime = new_values\n",
        "vars": {
            "multi_datetime": "field.name.snake_case"
        }
    },
    "py_create_model_login_check": {
        "name": "py_create_model_login_check",
        "text": "    # must be logged in to make multi model\n    user = ctx['auth']['get_user']()\n    if obj.user_id != '' and obj.user_id != user.id:\n        raise ValueError(f'Incorrect user_id ({obj.user_id} != {user.id}) supplied for multi model creation')\n    \n    obj.user_id = user.id\n    assert obj.user_id is not None\n",
        "vars": {
            "multi model": "model.name.lower_case"
        }
    },
    "py_create_model_max_created_check": {
        "name": "py_create_model_max_created_check",
        "text": "    # each user can only create a maximum of 1 multi_model(s)\n    cursor.execute(\"SELECT COUNT(*) FROM multi_model WHERE user_id=?\", (user.id,))\n    count = cursor.fetchone()[0]\n    if count >= 1:\n        raise ValueError('user has reached the maximum number of multi_model(s)')\n",
        "vars": {
            "1": "model.auth.max_models_per_user",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_create_model_table_end": {
        "name": "py_create_model_table_end",
        "text": "    single_model_create_sql += ')'\n    cursor.execute(single_model_create_sql)\n",
        "vars": {
            "single_model": "model.name.snake_case"
        }
    },
    "py_create_model_table_field": {
        "name": "py_create_model_table_field",
        "text": "    single_model_create_sql += \", 'single_bool'\"\n",
        "vars": {
            "single_bool": "field.name.snake_case",
            "single_model": "model.name.snake_case"
        }
    },
    "py_create_model_table_list_field": {
        "name": "py_create_model_table_list_field",
        "text": "    cursor.execute(\"CREATE TABLE IF NOT EXISTS multi_model_multi_bool(id INTEGER PRIMARY KEY, value, position, multi_model_id INTEGER REFERENCES multi_model(id))\")\n    cursor.execute('CREATE INDEX IF NOT EXISTS multi_model_multi_bool_index ON multi_model_multi_bool(multi_model_id)')\n",
        "vars": {
            "multi_bool": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_create_model_table_start": {
        "name": "py_create_model_table_start",
        "text": "    #\n    # single model\n    #\n    single_model_create_sql = \"CREATE TABLE IF NOT EXISTS single_model(id INTEGER PRIMARY KEY\"\n",
        "vars": {
            "single_model": "model.name.snake_case"
        }
    },
    "py_db_delete_auth": {
        "name": "py_db_delete_auth",
        "text": "    user = ctx['auth']['get_user']()\n    try:\n        obj = db_read_multi_model(ctx, id)\n    except NotFoundError:\n        return\n\n    if obj.user_id != user.id:\n        raise ForbiddenError('not allowed to delete this multi_model')\n",
        "vars": {
            "multi_model": "model.name.snake_case"
        }
    },
    "py_db_update_auth": {
        "name": "py_db_update_auth",
        "text": "    user = ctx['auth']['get_user']()\n    if obj.user_id != user.id:\n        raise ForbiddenError('not allowed to update this multi_model')\n",
        "vars": {
            "multi_model": "model.name.snake_case"
        }
    },
    "py_enum_definition_begin": {
        "name": "py_enum_definition_begin",
        "text": "single_enum_options = [\n",
        "vars": {
            "single_enum": "field_name"
        }
    },
    "py_enum_definition_end": {
        "name": "py_enum_definition_end",
        "text": "]\n",
        "vars": {}
    },
    "py_enum_definition_option": {
        "name": "py_enum_definition_option",
        "text": "    'red', \n",
        "vars": {
            "red": "option"
        }
    },
    "py_example_bool": {
        "name": "py_example_bool",
        "text": "\t\t\tsingle_bool=True,\n",
        "vars": {
            "True": "field.examples.0",
            "single_bool": "field.name.snake_case"
        }
    },
    "py_example_datetime": {
        "name": "py_example_datetime",
        "text": "\t\t\tsingle_datetime=datetime.strptime('2000-01-11T12:34:56', datetime_format_str),\n",
        "vars": {
            "2000-01-11T12:34:56": "field.examples.0",
            "single_datetime": "field.name.snake_case"
        }
    },
    "py_example_float": {
        "name": "py_example_float",
        "text": "\t\t\tsingle_float=3.14,\n",
        "vars": {
            "3.14": "field.examples.0",
            "single_float": "field.name.snake_case"
        }
    },
    "py_example_int": {
        "name": "py_example_int",
        "text": "\t\t\tsingle_int=7,\n",
        "vars": {
            "7": "field.examples.0",
            "single_int": "field.name.snake_case"
        }
    },
    "py_example_list_bool": {
        "name": "py_example_list_bool",
        "text": "\t\t\tmulti_bool=[True, False],\n",
        "vars": {
            "[True, False]": "field.examples.0",
            "multi_bool": "field.name.snake_case"
        }
    },
    "py_example_list_datetime": {
        "name": "py_example_list_datetime",
        "text": "            multi_datetime=[datetime.strptime(x, datetime_format_str) for x in ['2000-01-11T12:34:56']],\n",
        "vars": {
            "['2000-01-11T12:34:56']": "field.examples.0",
            "multi_datetime": "field.name.snake_case"
        }
    },
    "py_example_list_float": {
        "name": "py_example_list_float",
        "text": "\t\t\tmulti_float=[3.14, 2.718],\n",
        "vars": {
            "[3.14, 2.718]": "field.examples.0",
            "multi_float": "field.name.snake_case"
        }
    },
    "py_example_list_int": {
        "name": "py_example_list_int",
        "text": "\t\t\tmulti_int=[7, 11],\n",
        "vars": {
            "[7, 11]": "field.examples.0",
            "multi_int": "field.name.snake_case"
        }
    },
    "py_example_list_str": {
        "name": "py_example_list_str",
        "text": "\t\t\tmulti_string=['banana'],\n",
        "vars": {
            "['banana']": "field.examples.0",
            "multi_string": "field.name.snake_case"
        }
    },
    "py_example_list_str_enum": {
        "name": "py_example_list_str_enum",
        "text": "            multi_enum=['giraffe', 'elephant'],\n",
        "vars": {
            "['giraffe', 'elephant']": "field.examples.0",
            "multi_enum": "field.name.snake_case"
        }
    },
    "py_example_str": {
        "name": "py_example_str",
        "text": "\t\t\tsingle_string='banana',\n",
        "vars": {
            "banana": "py_escape_single_quote(field.examples.0)",
            "single_string": "field.name.snake_case"
        }
    },
    "py_example_str_enum": {
        "name": "py_example_str_enum",
        "text": "\t\t\tsingle_enum='red',\n",
        "vars": {
            "red": "py_escape_single_quote(field.examples.0)",
            "single_enum": "field.name.snake_case"
        }
    },
    "py_example_user_id": {
        "name": "py_example_user_id",
        "text": "            user_id='',\n",
        "vars": {}
    },
    "py_field_definition": {
        "name": "py_field_definition",
        "text": "    single_bool: bool\n",
        "vars": {
            "bool": "field.type",
            "single_bool": "field.name.snake_case"
        }
    },
    "py_field_definition_list": {
        "name": "py_field_definition_list",
        "text": "    multi_bool: list[bool]\n",
        "vars": {
            "bool": "field.element_type",
            "multi_bool": "field.name.snake_case"
        }
    },
    "py_field_definition_user_id": {
        "name": "py_field_definition_user_id",
        "text": "    user_id: str = ''\n",
        "vars": {}
    },
    "py_field_list_entry": {
        "name": "py_field_list_entry",
        "text": "    'single_bool',\n",
        "vars": {
            "single_bool": "field.name.snake_case"
        }
    },
    "py_random_bool": {
        "name": "py_random_bool",
        "text": "\t\t\tsingle_bool=random_bool(),\n",
        "vars": {
            "single_bool": "field.name.snake_case"
        }
    },
    "py_random_datetime": {
        "name": "py_random_datetime",
        "text": "\t\t\tsingle_datetime=random_datetime(),\n",
        "vars": {
            "single_datetime": "field.name.snake_case"
        }
    },
    "py_random_field_custom": {
        "name": "py_random_field_custom",
        "text": "            custom_random_field=random_thing_name(),\n",
        "vars": {
            "custom_random_field": "field.name.snake_case",
            "random_thing_name": "field.random"
        }
    },
    "py_random_float": {
        "name": "py_random_float",
        "text": "\t\t\tsingle_float=random_float(),\n",
        "vars": {
            "single_float": "field.name.snake_case"
        }
    },
    "py_random_int": {
        "name": "py_random_int",
        "text": "\t\t\tsingle_int=random_int(),\n",
        "vars": {
            "single_int": "field.name.snake_case"
        }
    },
    "py_random_list_bool": {
        "name": "py_random_list_bool",
        "text": "\t\t\tmulti_bool=random_list('bool'),\n",
        "vars": {
            "multi_bool": "field.name.snake_case"
        }
    },
    "py_random_list_datetime": {
        "name": "py_random_list_datetime",
        "text": "            multi_datetime=random_list('datetime'),\n",
        "vars": {
            "multi_datetime": "field.name.snake_case"
        }
    },
    "py_random_list_float": {
        "name": "py_random_list_float",
        "text": "\t\t\tmulti_float=random_list('float'),\n",
        "vars": {
            "multi_float": "field.name.snake_case"
        }
    },
    "py_random_list_int": {
        "name": "py_random_list_int",
        "text": "\t\t\tmulti_int=random_list('int'),\n",
        "vars": {
            "multi_int": "field.name.snake_case"
        }
    },
    "py_random_list_str": {
        "name": "py_random_list_str",
        "text": "\t\t\tmulti_string=random_list('str'),\n",
        "vars": {
            "multi_string": "field.name.snake_case"
        }
    },
    "py_random_list_str_enum": {
        "name": "py_random_list_str_enum",
        "text": "            multi_enum=random_list('str', multi_enum_options),\n",
        "vars": {
            "multi_enum": "field.name.snake_case"
        }
    },
    "py_random_str": {
        "name": "py_random_str",
        "text": "\t\t\tsingle_string=random_str(),\n",
        "vars": {
            "single_string": "field.name.snake_case"
        }
    },
    "py_random_str_enum": {
        "name": "py_random_str_enum",
        "text": "\t\t\tsingle_enum=random_str_enum(single_enum_options),\n",
        "vars": {
            "single_enum": "field.name.snake_case"
        }
    },
    "py_sql_convert_bool": {
        "name": "py_sql_convert_bool",
        "text": "        single_bool=bool(entry[1]),\n",
        "vars": {
            "1": "index",
            "single_bool": "field.name.snake_case"
        }
    },
    "py_sql_convert_datetime": {
        "name": "py_sql_convert_datetime",
        "text": "        single_datetime=datetime.strptime(entry[2], datetime_format_str).replace(microsecond=0),\n",
        "vars": {
            "2": "index",
            "single_datetime": "field.name.snake_case"
        }
    },
    "py_sql_convert_float": {
        "name": "py_sql_convert_float",
        "text": "        single_float=entry[4],\n",
        "vars": {
            "4": "index",
            "single_float": "field.name.snake_case"
        }
    },
    "py_sql_convert_int": {
        "name": "py_sql_convert_int",
        "text": "        single_int=entry[5],\n",
        "vars": {
            "5": "index",
            "single_int": "field.name.snake_case"
        }
    },
    "py_sql_convert_list": {
        "name": "py_sql_convert_list",
        "text": "        multi_bool=multi_bool,\n",
        "vars": {
            "multi_bool": "field.name.snake_case"
        }
    },
    "py_sql_convert_str": {
        "name": "py_sql_convert_str",
        "text": "        single_string=entry[6],\n",
        "vars": {
            "6": "index",
            "single_string": "field.name.snake_case"
        }
    },
    "py_sql_convert_str_enum": {
        "name": "py_sql_convert_str_enum",
        "text": "        single_enum=entry[3],\n",
        "vars": {
            "3": "index",
            "single_enum": "field.name.snake_case"
        }
    },
    "py_sql_convert_user_id": {
        "name": "py_sql_convert_user_id",
        "text": "        user_id=str(entry[1]),\n",
        "vars": {
            "1": "index"
        }
    },
    "py_sql_create": {
        "name": "py_sql_create",
        "text": "    result = cursor.execute(\n        \"INSERT INTO single_model('single_bool', 'single_datetime', 'single_enum', 'single_float', 'single_int', 'single_string') VALUES(?, ?, ?, ?, ?, ?)\",\n        (obj.single_bool, obj.single_datetime.isoformat(), obj.single_enum, obj.single_float, obj.single_int, obj.single_string)\n    )\n    assert result.rowcount == 1\n    assert result.lastrowid is not None\n    obj.id = str(result.lastrowid)\n",
        "vars": {
            "('single_bool', 'single_datetime', 'single_enum', 'single_float', 'single_int', 'single_string')": "fields_sql",
            "VALUES(?, ?, ?, ?, ?, ?)": "sql_values",
            "obj.single_bool, obj.single_datetime.isoformat(), obj.single_enum, obj.single_float, obj.single_int, obj.single_string": "fields_py",
            "single_model": "model.name.snake_case"
        }
    },
    "py_sql_create_list_bool": {
        "name": "py_sql_create_list_bool",
        "text": "    cursor.executemany(\n        \"INSERT INTO multi_model_multi_bool(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, result.lastrowid) for position, value in enumerate(obj.multi_bool))\n    )\n",
        "vars": {
            "multi_bool": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_create_list_datetime": {
        "name": "py_sql_create_list_datetime",
        "text": "    cursor.executemany(\n        \"INSERT INTO multi_model_multi_datetime(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value.isoformat(), position, result.lastrowid) for position, value in enumerate(obj.multi_datetime))\n    )\n",
        "vars": {
            "multi_datetime": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_create_list_float": {
        "name": "py_sql_create_list_float",
        "text": "    cursor.executemany(\n        \"INSERT INTO multi_model_multi_float(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, result.lastrowid) for position, value in enumerate(obj.multi_float))\n    )\n",
        "vars": {
            "multi_float": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_create_list_int": {
        "name": "py_sql_create_list_int",
        "text": "    cursor.executemany(\n        \"INSERT INTO multi_model_multi_int(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, result.lastrowid) for position, value in enumerate(obj.multi_int))\n    )\n",
        "vars": {
            "multi_int": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_create_list_str": {
        "name": "py_sql_create_list_str",
        "text": "    cursor.executemany(\n        \"INSERT INTO multi_model_multi_string(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, result.lastrowid) for position, value in enumerate(obj.multi_string))\n    )\n\n",
        "vars": {
            "multi_model": "model.name.snake_case",
            "multi_string": "field.name.snake_case"
        }
    },
    "py_sql_create_list_str_enum": {
        "name": "py_sql_create_list_str_enum",
        "text": "    cursor.executemany(\n        \"INSERT INTO multi_model_multi_enum(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, result.lastrowid) for position, value in enumerate(obj.multi_enum))\n    )\n\n",
        "vars": {
            "multi_enum": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_delete": {
        "name": "py_sql_delete",
        "text": "    cursor.execute(f\"DELETE FROM single_model WHERE id=?\", (id,))\n",
        "vars": {
            "single_model": "model.name.snake_case"
        }
    },
    "py_sql_delete_list": {
        "name": "py_sql_delete_list",
        "text": "    cursor.execute(f\"DELETE FROM multi_model_multi_bool WHERE multi_model_id=?\", (id,))\n",
        "vars": {
            "multi_bool": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_list_bool": {
        "name": "py_sql_list_bool",
        "text": "        multi_bool_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_bool WHERE multi_model_id=? ORDER BY position\", (entry[0],))\n        multi_bool = [bool(row[0]) for row in multi_bool_cursor.fetchall()]\n",
        "vars": {
            "multi_bool": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_list_datetime": {
        "name": "py_sql_list_datetime",
        "text": "        multi_datetime_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_datetime WHERE multi_model_id=? ORDER BY position\", (entry[0],))\n        multi_datetime = [\n            datetime.strptime(row[0], datetime_format_str).replace(microsecond=0) \n            for row in multi_datetime_cursor.fetchall()\n        ]\n",
        "vars": {
            "multi_datetime": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_list_float": {
        "name": "py_sql_list_float",
        "text": "        multi_float_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_float WHERE multi_model_id=? ORDER BY position\", (entry[0],))\n        multi_float = [row[0] for row in multi_float_cursor.fetchall()]\n",
        "vars": {
            "multi_float": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_list_int": {
        "name": "py_sql_list_int",
        "text": "        multi_int_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_int WHERE multi_model_id=? ORDER BY position\", (entry[0],))\n        multi_int = [row[0] for row in multi_int_cursor.fetchall()]\n",
        "vars": {
            "multi_int": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_list_str": {
        "name": "py_sql_list_str",
        "text": "        multi_string_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_string WHERE multi_model_id=? ORDER BY position\", (entry[0],))\n        multi_string = [row[0] for row in multi_string_cursor.fetchall()]\n",
        "vars": {
            "multi_model": "model.name.snake_case",
            "multi_string": "field.name.snake_case"
        }
    },
    "py_sql_list_str_enum": {
        "name": "py_sql_list_str_enum",
        "text": "        multi_enum_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_enum WHERE multi_model_id=? ORDER BY position\", (entry[0],))\n        multi_enum = [row[0] for row in multi_enum_cursor.fetchall()]\n",
        "vars": {
            "multi_enum": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_read": {
        "name": "py_sql_read",
        "text": "    cursor:sqlite3.Cursor = ctx['db']['cursor']\n    result = cursor.execute(f\"SELECT * FROM single_model WHERE id=?\", (id,))\n    entry = result.fetchone()\n    if entry is None:\n        raise NotFoundError(f'single_model {id} not found')\n",
        "vars": {
            "single_model": "model.name.snake_case"
        }
    },
    "py_sql_read_list_bool": {
        "name": "py_sql_read_list_bool",
        "text": "    multi_bool_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_bool WHERE multi_model_id=? ORDER BY position\", (id,))\n    multi_bool = [bool(row[0]) for row in multi_bool_cursor.fetchall()]\n",
        "vars": {
            "multi_bool": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_read_list_datetime": {
        "name": "py_sql_read_list_datetime",
        "text": "    multi_datetime_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_datetime WHERE multi_model_id=? ORDER BY position\", (id,))\n    multi_datetime = [\n        datetime.strptime(row[0], datetime_format_str).replace(microsecond=0) \n        for row in multi_datetime_cursor.fetchall()\n    ]\n",
        "vars": {
            "multi_datetime": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_read_list_float": {
        "name": "py_sql_read_list_float",
        "text": "    multi_float_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_float WHERE multi_model_id=? ORDER BY position\", (id,))\n    multi_float = [row[0] for row in multi_float_cursor.fetchall()]\n",
        "vars": {
            "multi_float": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_read_list_int": {
        "name": "py_sql_read_list_int",
        "text": "    multi_int_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_int WHERE multi_model_id=? ORDER BY position\", (id,))\n    multi_int = [row[0] for row in multi_int_cursor.fetchall()]\n",
        "vars": {
            "multi_int": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_read_list_str": {
        "name": "py_sql_read_list_str",
        "text": "    multi_string_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_string WHERE multi_model_id=? ORDER BY position\", (id,))\n    multi_string = [row[0] for row in multi_string_cursor.fetchall()]\n",
        "vars": {
            "multi_model": "model.name.snake_case",
            "multi_string": "field.name.snake_case"
        }
    },
    "py_sql_read_list_str_enum": {
        "name": "py_sql_read_list_str_enum",
        "text": "    multi_enum_cursor = cursor.execute(f\"SELECT value FROM multi_model_multi_enum WHERE multi_model_id=? ORDER BY position\", (id,))\n    multi_enum = [row[0] for row in multi_enum_cursor.fetchall()]\n",
        "vars": {
            "multi_enum": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_sql_update": {
        "name": "py_sql_update",
        "text": "    result = cursor.execute(\n        \"UPDATE single_model SET 'single_bool'=?, 'single_datetime'=?, 'single_enum'=?, 'single_float'=?, 'single_int'=?, 'single_string'=? WHERE id=?\",\n        (obj.single_bool, obj.single_datetime.isoformat(), obj.single_enum, obj.single_float, obj.single_int, obj.single_string, obj.id)\n    )\n    if result.rowcount == 0:\n        raise NotFoundError(f'single_model {obj.id} not found')\n",
        "vars": {
            "'single_bool'=?, 'single_datetime'=?, 'single_enum'=?, 'single_float'=?, 'single_int'=?, 'single_string'=?": "fields_sql",
            "obj.single_bool, obj.single_datetime.isoformat(), obj.single_enum, obj.single_float, obj.single_int, obj.single_string": "fields_py",
            "single_model": "model_name_snake_case"
        }
    },
    "py_sql_update_list_bool": {
        "name": "py_sql_update_list_bool",
        "text": "    cursor.execute(f\"DELETE FROM multi_model_multi_bool WHERE multi_model_id=?\", (obj.id,))\n    cursor.executemany(\n        \"INSERT INTO multi_model_multi_bool(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, obj.id) for position, value in enumerate(obj.multi_bool))\n    )\n",
        "vars": {
            "multi_bool": "field_name",
            "multi_model": "model_name_snake_case"
        }
    },
    "py_sql_update_list_datetime": {
        "name": "py_sql_update_list_datetime",
        "text": "    cursor.execute(f\"DELETE FROM multi_model_multi_datetime WHERE multi_model_id=?\", (obj.id,))\n    cursor.executemany(\n        \"INSERT INTO multi_model_multi_datetime(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value.isoformat(), position, obj.id) for position, value in enumerate(obj.multi_datetime))\n    )\n",
        "vars": {
            "multi_datetime": "field_name",
            "multi_model": "model_name_snake_case"
        }
    },
    "py_sql_update_list_float": {
        "name": "py_sql_update_list_float",
        "text": "    cursor.execute(f\"DELETE FROM multi_model_multi_float WHERE multi_model_id=?\", (obj.id,))\n    cursor.executemany(\n        \"INSERT INTO multi_model_multi_float(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, obj.id) for position, value in enumerate(obj.multi_float))\n    )\n",
        "vars": {
            "multi_float": "field_name",
            "multi_model": "model_name_snake_case"
        }
    },
    "py_sql_update_list_int": {
        "name": "py_sql_update_list_int",
        "text": "    cursor.execute(f\"DELETE FROM multi_model_multi_int WHERE multi_model_id=?\", (obj.id,))\n    cursor.executemany(\n        \"INSERT INTO multi_model_multi_int(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, obj.id) for position, value in enumerate(obj.multi_int))\n    )\n",
        "vars": {
            "multi_int": "field_name",
            "multi_model": "model_name_snake_case"
        }
    },
    "py_sql_update_list_str": {
        "name": "py_sql_update_list_str",
        "text": "    cursor.execute(f\"DELETE FROM multi_model_multi_string WHERE multi_model_id=?\", (obj.id,))\n    cursor.executemany(\n        \"INSERT INTO multi_model_multi_string(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, obj.id) for position, value in enumerate(obj.multi_string))\n    )\n",
        "vars": {
            "multi_model": "model_name_snake_case",
            "multi_string": "field_name"
        }
    },
    "py_sql_update_list_str_enum": {
        "name": "py_sql_update_list_str_enum",
        "text": "    cursor.execute(f\"DELETE FROM multi_model_multi_enum WHERE multi_model_id=?\", (obj.id,))\n    cursor.executemany(\n        \"INSERT INTO multi_model_multi_enum(value, position, multi_model_id) VALUES(?, ?, ?)\",\n        ((value, position, obj.id) for position, value in enumerate(obj.multi_enum))\n    )\n",
        "vars": {
            "multi_enum": "field_name",
            "multi_model": "model_name_snake_case"
        }
    },
    "py_test_auth_max_models": {
        "name": "py_test_auth_max_models",
        "text": "    def test_multi_model_auth_max_models(self):\n\n        max_models_ctx, _user = new_user()\n\n        for _ in range(1):\n            client_create_multi_model(max_models_ctx, MultiModel.example())\n\n        self.assertRaises(Exception, client_create_multi_model, max_models_ctx, MultiModel.example())\n",
        "vars": {
            "1": "model.auth.max_models_per_user",
            "MultiModel": "model.name.pascal_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_test_auth_require_login": {
        "name": "py_test_auth_require_login",
        "text": "    def test_multi_model_auth(self):\n        test_multi_model = MultiModel.example()\n        test_multi_model.validate()\n\n        logged_out_ctx = test_ctx_init()\n\n        # should not be able to create multi_model if logged out #\n        self.assertRaises(AuthenticationError, client_create_multi_model, logged_out_ctx, test_multi_model)\n",
        "vars": {
            "MultiModel": "model.name.pascal_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_test_model_auth_new_user_function": {
        "name": "py_test_model_auth_new_user_function",
        "text": "# create user for auth testing\ndef new_user() -> tuple[dict, User]:\n    new_ctx = test_ctx_init()\n    user = CreateUser(\n        name='Test MultiModel Auth',\n        email=f'test-multi-model-auth-{time.time()}@email.com',\n        password1='my-test-password',\n        password2='my-test-password',\n    )\n    created_user = client_create_user(new_ctx, user)\n    login_ctx = client_login(new_ctx, created_user.email, user.password1)\n    return login_ctx, created_user\n",
        "vars": {
            "MultiModel": "model.name.pascal_case",
            "multi-model": "model.name.kebab_case"
        }
    },
    "py_test_model_crud_context_new_user": {
        "name": "py_test_model_crud_context_new_user",
        "text": "        new_user_ctx, _user = new_user()\n        crud_ctx.update(new_user_ctx)\n",
        "vars": {}
    },
    "py_test_model_seed_pagination_login": {
        "name": "py_test_model_seed_pagination_login",
        "text": "            new_user_ctx, _user = new_user()\n            seed_ctx.update(new_user_ctx)\n",
        "vars": {}
    },
    "py_test_model_seed_pagination_max_users": {
        "name": "py_test_model_seed_pagination_max_users",
        "text": "                # create new user(s) to avoid max models per user limits\n                if total_items % 1 == 0:\n                    new_user_ctx, _user = new_user()\n                    seed_ctx.update(new_user_ctx)\n",
        "vars": {
            "1": "model.auth.max_models_per_user"
        }
    },
    "py_test_sql_delete_list": {
        "name": "py_test_sql_delete_list",
        "text": "        multi_bool_result = cursor.execute(f\"SELECT value FROM multi_model_multi_bool WHERE multi_model_id=? ORDER BY position\", (created_multi_model.id,))\n        self.assertEqual(len(multi_bool_result.fetchall()), 0)\n",
        "vars": {
            "multi_bool": "field.name.snake_case",
            "multi_model": "model.name.snake_case"
        }
    },
    "py_tk_field_table_bool": {
        "name": "py_tk_field_table_bool",
        "text": "            # single_bool - bool\n            single_bool_text = tkinter.Text(self.table, height=1, width=5, highlightthickness=0)\n            single_bool_text.insert(tkinter.END, str(getattr(item, 'single_bool', '-')).lower())\n            single_bool_text.grid(row=n + self.list_items_row_offset, column=2, padx=padx)\n",
        "vars": {
            "2": "column",
            "single_bool": "field.name.snake_case"
        }
    },
    "py_tk_field_table_datetime": {
        "name": "py_tk_field_table_datetime",
        "text": "            # single_datetime - datetime\n            single_datetime_text = tkinter.Text(self.table, height=1, width=20, highlightthickness=0)\n            single_datetime_value = getattr(item, 'single_datetime', '-')\n            if single_datetime_value != '-':\n                single_datetime_value = single_datetime_value.strftime('%Y-%m-%d %H:%M:%S')\n            single_datetime_text.insert(tkinter.END, str(single_datetime_value))\n            single_datetime_text.grid(row=n + self.list_items_row_offset, column=7, padx=padx)\n",
        "vars": {
            "7": "column",
            "single_datetime": "field.name.snake_case"
        }
    },
    "py_tk_field_table_float": {
        "name": "py_tk_field_table_float",
        "text": "            # single_float - float\n            single_float_text = tkinter.Text(self.table, height=1, width=10, highlightthickness=0)\n            single_float_text.insert(tkinter.END, str(getattr(item, 'single_float', '-')))\n            single_float_text.grid(row=n + self.list_items_row_offset, column=4, padx=padx)\n",
        "vars": {
            "4": "column",
            "single_float": "field.name.snake_case"
        }
    },
    "py_tk_field_table_int": {
        "name": "py_tk_field_table_int",
        "text": "            # single_int - int\n            single_int_text = tkinter.Text(self.table, height=1, width=10, highlightthickness=0)\n            single_int_text.insert(tkinter.END, str(getattr(item, 'single_int', '-')))\n            single_int_text.grid(row=n + self.list_items_row_offset, column=3, padx=padx)\n",
        "vars": {
            "3": "column",
            "single_int": "field.name.snake_case"
        }
    },
    "py_tk_field_table_list_bool": {
        "name": "py_tk_field_table_list_bool",
        "text": "            # multi_bool - list of bool\n            multi_bool_text = tkinter.Text(self.table, height=1, width=10, highlightthickness=0)\n            multi_bool_value = getattr(item, 'multi_bool', '-')\n            if isinstance(multi_bool_value, list):\n                multi_bool_value = ', '.join([str(v).lower() for v in multi_bool_value])\n            multi_bool_text.insert(tkinter.END, str(multi_bool_value))\n            multi_bool_text.grid(row=n + self.list_items_row_offset, column=2, padx=padx)\n",
        "vars": {
            "multi_bool": "field.name.snake_case"
        }
    },
    "py_tk_field_table_list_datetime": {
        "name": "py_tk_field_table_list_datetime",
        "text": "            # multi_datetime - list of datetime\n            multi_datetime_text = tkinter.Text(self.table, height=1, width=30, highlightthickness=0)\n            multi_datetime_value = getattr(item, 'multi_datetime', '-')\n            if isinstance(multi_datetime_value, list):\n                multi_datetime_value = ', '.join([str(v) for v in multi_datetime_value])\n            multi_datetime_text.insert(tkinter.END, str(multi_datetime_value))\n            multi_datetime_text.grid(row=n + self.list_items_row_offset, column=7, padx=padx)\n",
        "vars": {
            "multi_datetime": "field.name.snake_case"
        }
    },
    "py_tk_field_table_list_float": {
        "name": "py_tk_field_table_list_float",
        "text": "            # multi_float - list of float\n            multi_float_text = tkinter.Text(self.table, height=1, width=15, highlightthickness=0)\n            multi_float_value = getattr(item, 'multi_float', '-')\n            if isinstance(multi_float_value, list):\n                multi_float_value = ', '.join([str(v) for v in multi_float_value])\n            multi_float_text.insert(tkinter.END, str(multi_float_value))\n            multi_float_text.grid(row=n + self.list_items_row_offset, column=4, padx=padx)\n",
        "vars": {
            "multi_float": "field.name.snake_case"
        }
    },
    "py_tk_field_table_list_int": {
        "name": "py_tk_field_table_list_int",
        "text": "            # multi_int - list of int\n            multi_int_text = tkinter.Text(self.table, height=1, width=15, highlightthickness=0)\n            multi_int_value = getattr(item, 'multi_int', '-')\n            if isinstance(multi_int_value, list):\n                multi_int_value = ', '.join([str(v) for v in multi_int_value])\n            multi_int_text.insert(tkinter.END, str(multi_int_value))\n            multi_int_text.grid(row=n + self.list_items_row_offset, column=3, padx=padx)\n",
        "vars": {
            "multi_int": "field.name.snake_case"
        }
    },
    "py_tk_field_table_list_str": {
        "name": "py_tk_field_table_list_str",
        "text": "            # multi_string - list of str\n            multi_string_text = tkinter.Text(self.table, height=1, width=30, highlightthickness=0)\n            multi_string_value = getattr(item, 'multi_string', '-')\n            if isinstance(multi_string_value, list):\n                multi_string_value = ', '.join(multi_string_value)\n            multi_string_text.insert(tkinter.END, str(multi_string_value))\n            multi_string_text.grid(row=n + self.list_items_row_offset, column=5, padx=padx)\n",
        "vars": {
            "multi_string": "field.name.snake_case"
        }
    },
    "py_tk_field_table_list_str_enum": {
        "name": "py_tk_field_table_list_str_enum",
        "text": "            # multi_enum - list of str (enums)\n            multi_enum_text = tkinter.Text(self.table, height=1, width=20, highlightthickness=0)\n            multi_enum_value = getattr(item, 'multi_enum', '-')\n            if isinstance(multi_enum_value, list):\n                multi_enum_value = ','.join(multi_enum_value)\n            multi_enum_text.insert(tkinter.END, str(multi_enum_value))\n            multi_enum_text.grid(row=n + self.list_items_row_offset, column=6, padx=padx)\n",
        "vars": {
            "multi_enum": "field.name.snake_case"
        }
    },
    "py_tk_field_table_str": {
        "name": "py_tk_field_table_str",
        "text": "            # single_string - str\n            single_string_text = tkinter.Text(self.table, height=1, width=20, highlightthickness=0)\n            single_string_text.insert(tkinter.END, getattr(item, 'single_string', '-'))\n            single_string_text.grid(row=n + self.list_items_row_offset, column=5, padx=padx)\n",
        "vars": {
            "5": "column",
            "single_string": "field.name.snake_case"
        }
    },
    "py_tk_field_table_str_enum": {
        "name": "py_tk_field_table_str_enum",
        "text": "            # single_enum - str\n            single_enum_text = tkinter.Text(self.table, height=1, width=15, highlightthickness=0)\n            single_enum_text.insert(tkinter.END, getattr(item, 'single_enum', '-'))\n            single_enum_text.grid(row=n + self.list_items_row_offset, column=6, padx=padx)\n",
        "vars": {
            "6": "column",
            "single_enum": "field.name.snake_case"
        }
    },
    "py_verify_bool": {
        "name": "py_verify_bool",
        "text": "        # single_bool - bool\n\n        if not isinstance(self.single_bool, bool):\n            raise TypeError('single_bool must be a bool')\n\n",
        "vars": {
            "single_bool": "field.name.snake_case"
        }
    },
    "py_verify_datetime": {
        "name": "py_verify_datetime",
        "text": "        # single_datetime - datetime\n\n        if not isinstance(self.single_datetime, datetime):\n            raise TypeError('single_datetime must be a datetime')\n",
        "vars": {
            "single_datetime": "field.name.snake_case"
        }
    },
    "py_verify_float": {
        "name": "py_verify_float",
        "text": "        # single_float - float\n\n        if not isinstance(self.single_float, float):\n            raise TypeError('single_float must be a float')\n\n",
        "vars": {
            "single_float": "field.name.snake_case"
        }
    },
    "py_verify_int": {
        "name": "py_verify_int",
        "text": "        # single_int - int\n\n        if not isinstance(self.single_int, int):\n            raise TypeError('single_int must be an integer')\n\n",
        "vars": {
            "single_int": "field.name.snake_case"
        }
    },
    "py_verify_list_bool": {
        "name": "py_verify_list_bool",
        "text": "        # multi_bool - list of bool\n\n        if not isinstance(self.multi_bool, list):\n            raise TypeError('multi_bool must be a list')\n        \n        for item in self.multi_bool:\n            if not isinstance(item, bool):\n                raise TypeError('multi_bool elements must be bool')\n\n",
        "vars": {
            "multi_bool": "field.name.snake_case"
        }
    },
    "py_verify_list_datetime": {
        "name": "py_verify_list_datetime",
        "text": "        # multi_datetime - list of datetime\n\n        if not isinstance(self.multi_datetime, list):\n            raise TypeError('multi_datetime must be a list')\n        \n        for item in self.multi_datetime:\n            if not isinstance(item, datetime):\n                raise TypeError('multi_datetime elements must be datetime')\n",
        "vars": {
            "multi_datetime": "field.name.snake_case"
        }
    },
    "py_verify_list_float": {
        "name": "py_verify_list_float",
        "text": "        # multi_float - list of float\n\n        if not isinstance(self.multi_float, list):\n            raise TypeError('multi_float must be a list')\n        \n        for item in self.multi_float:\n            if not isinstance(item, float):\n                raise TypeError('multi_float elements must be float')\n\n",
        "vars": {
            "multi_float": "field.name.snake_case"
        }
    },
    "py_verify_list_int": {
        "name": "py_verify_list_int",
        "text": "        # multi_int - list of int\n   \n        if not isinstance(self.multi_int, list):\n            raise TypeError('multi_int must be a list')\n\n        for item in self.multi_int:\n            if not isinstance(item, int):\n                raise TypeError('multi_int elements must be int')\n\n",
        "vars": {
            "multi_int": "field.name.snake_case"
        }
    },
    "py_verify_list_str": {
        "name": "py_verify_list_str",
        "text": "        # multi_string - list of str\n\n        if not isinstance(self.multi_string, list):\n            raise TypeError('multi_string must be a list')\n        \n        for item in self.multi_string:\n            if not isinstance(item, str):\n                raise TypeError('multi_string elements must be str')\n\n",
        "vars": {
            "multi_string": "field.name.snake_case"
        }
    },
    "py_verify_list_str_enum": {
        "name": "py_verify_list_str_enum",
        "text": "        # multi_enum - list of str enum\n\n        if not isinstance(self.multi_enum, list):\n            raise TypeError('multi_enum must be a list')\n        \n        for item in self.multi_enum:\n            if item not in multi_enum_options:\n                raise TypeError('invalid enum option for multi_enum')\n\n",
        "vars": {
            "multi_enum": "field.name.snake_case"
        }
    },
    "py_verify_str": {
        "name": "py_verify_str",
        "text": "        # single_string - str\n\n        if not isinstance(self.single_string, str):\n            raise TypeError('single_string must be a string')\n        \n",
        "vars": {
            "single_string": "field.name.snake_case"
        }
    },
    "py_verify_str_enum": {
        "name": "py_verify_str_enum",
        "text": "        # single_enum - str enum\n\n        if self.single_enum not in single_enum_options:\n            raise TypeError('invalid enum option for single_enum')\n\n",
        "vars": {
            "single_enum": "field.name.snake_case"
        }
    }
}