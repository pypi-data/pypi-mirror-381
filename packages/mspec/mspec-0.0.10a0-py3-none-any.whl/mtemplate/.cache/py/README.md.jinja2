# template app
## python - backend and gui
This application was generated by [mspec template generator](https://github.com/medium-tech/mspec).
* [setup](#setup)
* [run the python server](#run-the-python-server)
* [run the tests](#run-the-tests)

## setup

    cd <directory with this file>
    python3 -m venv .venv --upgrade-deps
    source .venv/bin/activate
    python -m pip install -e .

Create an `.env` file (in this directory) with the following variables:

    MSTACK_AUTH_SECRET_KEY=my_auth_key
    UWSGI_STATIC_SAFE=/path/to/mspec/templates/browser1/srv

`MSTACK_AUTH_SECRET_KEY` - an auth key can be generated using a command like: `openssl rand -hex 32`

`UWSGI_STATIC_SAFE` - uwsgi requires static files be configured with **absolute paths** for security reasons. However, the uwsgi config in this project uses relative paths for portability. Setting this value to the **absolute path on your local system** that points to the root of this repository will allow the relative paths to work.

## run the python server
This will run the api and serve `browser1` gui static files from `../browser1/srv`. It runs on the port defined in `dev.yaml`.

After setting up, run:

    ./server.sh 

The server can be stopped with:

    ./server.sh stop

## run the python gui
After setting up, run:

    python -m core.gui

## run the tests
Start the server in a process and then run:

    ./test.sh