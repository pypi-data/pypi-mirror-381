<!DOCTYPE html>
<html>

    <head>
        <title>{{ project.name.snake_case }}.{{ module.name.snake_case }}.{{ model.name.snake_case }}</title>
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
        <meta http-equiv="Pragma" content="no-cache" />
        <meta http-equiv="Expires" content="0" />
        <link rel="stylesheet" type="text/css" href="/style.css">
        <script src="/index.js"></script>
        <script src="/{{ module.name.kebab_case }}/{{ model.name.kebab_case }}/index.js"></script>

        <script type="text/javascript">

            //
            // views
            //

            function show{{ model.name.pascal_case }}ListView(pushState) {
                document.getElementById('{{ model.name.kebab_case }}-create').hidden = true;
                document.getElementById('{{ model.name.kebab_case }}-list').hidden = false;

                // push state
                if(pushState === true) {
                    const url = new URL(window.location.href)
                    url.pathname = '/{{ module.name.kebab_case }}/{{ model.name.kebab_case }}'

                    const offset = parseInt(document.getElementById('{{ model.name.kebab_case }}-list-offset').innerText)
                    const size = parseInt(document.getElementById('{{ model.name.kebab_case }}-list-size').innerText)
                    url.searchParams.set('offset', offset)
                    url.searchParams.set('size', size)

                    window.history.pushState({}, '', url)
                }
            }

            function show{{ model.name.pascal_case }}CreateView(pushState) {
                document.getElementById('{{ model.name.kebab_case }}-list').hidden = true;
                document.getElementById('{{ model.name.kebab_case }}-create').hidden = false;

                // push state
                if(pushState === true) {
                    const url = new URL(window.location.href)
                    url.pathname = '/{{ module.name.kebab_case }}/{{ model.name.kebab_case }}/create'
                    url.searchParams.delete('offset')
                    url.searchParams.delete('size')
                    window.history.pushState({}, '', url)
                    console.log('pushed state', url)
                }
            }

            function show{{ model.name.pascal_case }}NavigateToId() {
                const id = document.getElementById('{{ model.name.kebab_case }}-get-id').value
                if(id === '') {
                    console.error('id is empty')
                }else{
                    window.location.href = `/{{ module.name.kebab_case }}/{{ model.name.kebab_case }}/${id}`
                }
            }

            function randomize{{ model.name.pascal_case }}() {
                const createTBody = document.querySelector('#{{ model.name.kebab_case }}-create-tbody');
                {{ model.name.camel_case }}ToInputTBody(random{{ model.name.pascal_case }}(), createTBody)
            }

            function reset{{ model.name.pascal_case }}Input() {
                const createTBody = document.querySelector('#{{ model.name.kebab_case }}-create-tbody');
                {{ model.name.camel_case }}ToInputTBody({}, createTBody)
            }

            function example{{ model.name.pascal_case }}Input() {
                const createTBody = document.querySelector('#{{ model.name.kebab_case }}-create-tbody');
                {{ model.name.camel_case }}ToInputTBody(example{{ model.name.pascal_case }}(), createTBody)
            }

            function {{ model.name.camel_case }}NavigatorEnterKey(e) {
                console.log('{{ model.name.camel_case }}NavigatorEnterKey', e)
                if (e.key === 'Enter' || e.type === 'paste') {
                    show{{ model.name.pascal_case }}NavigateToId()
                }
            }
            
            function create{{ model.name.pascal_case }}Status(status, className) {
                const statusP = document.getElementById('create-{{ model.name.kebab_case }}-status')
                statusP.hidden = false
                statusP.innerText = status
                statusP.className = className
            }

            function list{{ model.name.pascal_case }}Status(status, className) {
                const statusElement = document.getElementById('{{ model.name.kebab_case }}-list-status')
                statusElement.innerText = status
                statusElement.className = className
            }

            //
            // server ops
            //

            function loadItems() {

                const prevPage = document.getElementById('{{ model.name.kebab_case }}-prev-page')
                const nextPage = document.getElementById('{{ model.name.kebab_case }}-next-page')

                prevPage.disabled = true
                nextPage.disabled = true

                const offset = parseInt(document.getElementById('{{ model.name.kebab_case }}-list-offset').innerText)
                const size = parseInt(document.getElementById('{{ model.name.kebab_case }}-list-size').innerText)

                list{{ model.name.pascal_case }}Status('loading...', '')

                console.log(`loadItems(offset=${offset}, size=${size})`)

                clientList{{ model.name.pascal_case }}s(offset, size)
                    .then(response => {
                        if (!response.ok) {
                            console.error(response)
                            throw new Error('{{ model.name.camel_case }} list failed')
                        }
                        return response.json()
                    }).then(data => {
                        console.log(data)
                        const items = data['items'].map(item => init{{ model.name.pascal_case }}(item))

                        document.getElementById('{{ model.name.kebab_case }}-list-count').innerText = items.length
                        document.getElementById('{{ model.name.kebab_case }}-list-total').innerText = data['total']
                        
                        {{ model.name.camel_case }}ListToDisplayTBody(items, document.querySelector('#{{ model.name.kebab_case }}-list-tbody'))

                        if (offset > 0) prevPage.disabled = false
                        if (items.length === size) nextPage.disabled = false

                        list{{ model.name.pascal_case }}Status('success', 'success')
                    })
                    .catch(error => {
                        console.error(error)
                        list{{ model.name.pascal_case }}Status('error', 'error')
                    });
            }

            function changeListPage(direction) {

                let offset = parseInt(document.getElementById('{{ model.name.kebab_case }}-list-offset').innerText)
                let size = parseInt(document.getElementById('{{ model.name.kebab_case }}-list-size').innerText)

                if (direction < 0) {
                    offset -= size
                    if (offset < 0) offset = 0
                } else if (direction == 0) {
                    offset = 0
                } else {
                    offset += size
                }

                document.getElementById('{{ model.name.kebab_case }}-list-offset').innerText = offset
                
                // 

                const url = new URL(window.location.href)
                url.searchParams.set('offset', offset)
                url.searchParams.set('size', size)
                window.history.pushState({}, '', url)
                
                //

                loadItems()
            }

            function handleCreate{{ model.name.pascal_case }}() {
                console.log('handleCreate{{ model.name.pascal_case }}()')

                const createTBody = document.querySelector('#{{ model.name.kebab_case }}-create-tbody');
                const data = {{ model.name.camel_case }}FromInputTBody(createTBody);

                const verify = verify{{ model.name.pascal_case }}(data);
                if (verify.valid !== true) {
                    console.error(verify);
                    throw new Error('{{ model.name.camel_case }} invalid');
                }

                console.log('creating {{ model.name.camel_case }}', data);

                create{{ model.name.pascal_case }}Status('creating...', '')

                clientCreate{{ model.name.pascal_case }}({{ model.name.camel_case }}ForJSON(data))
                    .then(response => {
                        if (!response.ok) {
                            console.error(response)
                            throw new Error('{{ model.name.camel_case }} create failed')
                        }
                        return response.json()
                    }).then(data => {
                        const newItemId = data['id']
                        console.log(`created {{ model.name.camel_case }} ${newItemId}`)

                        const newItemLi = document.createElement('li')
                        const newItemLink = document.createElement('a')
                        newItemLink.id = 'created-{{ model.name.kebab_case }}'
                        newItemLink.href = `/{{ module.name.kebab_case }}/{{ model.name.kebab_case }}/${newItemId}`
                        newItemLink.innerText = newItemId
                        
                        const created{{ model.name.pascal_case }}s = document.getElementById('created-{{ model.name.kebab_case }}s')
                        newItemLi.appendChild(newItemLink)
                        created{{ model.name.pascal_case }}s.appendChild(newItemLi)

                        create{{ model.name.pascal_case }}Status(`success`, 'success')
                    })
                    .catch(error => {
                        console.error(error);
                        create{{ model.name.pascal_case }}Status('error', 'error')
                    });
            }

            //
            // on load
            //

            window.onload = function() {
                reset{{ model.name.pascal_case }}Input()

                const isCreatePage = window.location.pathname.endsWith('/create')

                if(isCreatePage) {
                    show{{ model.name.pascal_case }}CreateView(false)
                }else{
                    const urlParams = new URLSearchParams(window.location.search);
                    const urlOffsetParam = urlParams.get('offset')
                    const urlSizeParam = urlParams.get('size')
                    console.log(`url params :: offset: ${urlOffsetParam} size: ${urlSizeParam}`)

                    if (urlOffsetParam !== null) {
                        const listOffset = document.getElementById('{{ model.name.kebab_case }}-list-offset')
                        console.log('list offset', listOffset)
                        listOffset.innerText = urlOffsetParam
                    }
                    if (urlSizeParam !== null) document.getElementById('{{ model.name.kebab_case }}-list-size').innerText = urlSizeParam

                    loadItems();
                }
            }

        </script>
    </head>

    <body>
        <h1>{{ model.name.lower_case }}</h1>
        <p>
            <a href="/">{{ project.name.snake_case }}</a> . <a href="/{{ module.name.kebab_case }}">{{ module.name.lower_case }}</a> . <a href="/{{ module.name.kebab_case }}/{{ model.name.kebab_case }}">{{ model.name.lower_case }}</a>
        </p>

        <!-- 
        list view layout 
        -->

        <div id="{{ model.name.kebab_case }}-list">

            status: <span id="{{ model.name.kebab_case }}-list-status">intial</span>

            <br>
            
            <button id="{{ model.name.kebab_case }}-prev-page" onclick="changeListPage(-1)" disabled>&lt;&lt;&lt;</button>
            <button onclick="loadItems()">refresh</button>
            <button id="{{ model.name.kebab_case }}-next-page" onclick="changeListPage(1)" disabled>&gt;&gt;&gt;</button>
            &emsp;|&emsp;
            <button onclick="show{{ model.name.pascal_case }}CreateView(true)">create</button>
            &emsp;|&emsp;
            <button onclick="show{{ model.name.pascal_case }}NavigateToId()">get</button>
            <input id="{{ model.name.kebab_case }}-get-id" type="text" placeholder="{{ model.name.lower_case }} id" size="32" onkeypress="{{ model.name.camel_case }}NavigatorEnterKey(event)"/>
            

            <br>

            offset: <span id="{{ model.name.kebab_case }}-list-offset">0</span>
            &emsp;
            size: <span id="{{ model.name.kebab_case }}-list-size">25</span>
            &emsp;
            count: <span id="{{ model.name.kebab_case }}-list-count">-</span>
            &emsp;
            total: <span id="{{ model.name.kebab_case }}-list-total">-</span>
            
            <br>

            <table>
                <thead>
                    <tr>
{{ macro.browser1_list_table_headers(model.fields) }}
                    </tr>
                </thead>

                <tbody id="{{ model.name.kebab_case }}-list-tbody">
                </tbody>

            </table>

        </div>

        <!-- 
        create view layout 
        -->

        <div id="{{ model.name.kebab_case }}-create" hidden>

            <button onclick="handleCreate{{ model.name.pascal_case }}()">submit</button>
            &emsp;|&emsp;
            <button onclick="reset{{ model.name.pascal_case }}Input()">reset</button>
            &emsp;|&emsp;
            <button onclick="example{{ model.name.pascal_case }}Input()">example</button>
            &emsp;|&emsp;
            <button onclick="randomize{{ model.name.pascal_case }}()">random</button>

            <table>
                <thead>
                    <tr>
                        <th width="15%">field</th>
                        <th width="33%">value</th>
                        <th>other</th>
                    </tr>
                </thead>
                <tbody id="{{ model.name.kebab_case }}-create-tbody">
                </tbody>
            </table>

            <p id="create-{{ model.name.kebab_case }}-status" hidden></p>

            <ul id="created-{{ model.name.kebab_case }}s">
            </ul>

        </div>

    </body>

</html>