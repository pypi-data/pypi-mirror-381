{
    "browser1_enum_definition_begin": {
        "name": "browser1_enum_definition_begin",
        "text": "const single_enum_options = [\n",
        "vars": {
            "single_enum": "field_name"
        }
    },
    "browser1_enum_definition_end": {
        "name": "browser1_enum_definition_end",
        "text": "]\n",
        "vars": {}
    },
    "browser1_enum_definition_option": {
        "name": "browser1_enum_definition_option",
        "text": "    'red', \n",
        "vars": {
            "red": "option"
        }
    },
    "browser1_from_input_tbody_bool": {
        "name": "browser1_from_input_tbody_bool",
        "text": "    const single_boolInput = tbody.querySelector('input[name=\"single_bool\"]');\n    data.single_bool = single_boolInput.checked;\n\n",
        "vars": {
            "single_bool": "field"
        }
    },
    "browser1_from_input_tbody_datetime": {
        "name": "browser1_from_input_tbody_datetime",
        "text": "    const single_datetimeInput = tbody.querySelector('input[name=\"single_datetime\"]');\n    data.single_datetime = new Date(single_datetimeInput.value);\n",
        "vars": {
            "single_datetime": "field"
        }
    },
    "browser1_from_input_tbody_float": {
        "name": "browser1_from_input_tbody_float",
        "text": "    const single_floatInput = tbody.querySelector('input[name=\"single_float\"]');\n    data.single_float = parseFloat(single_floatInput.value);\n\n",
        "vars": {
            "single_float": "field"
        }
    },
    "browser1_from_input_tbody_int": {
        "name": "browser1_from_input_tbody_int",
        "text": "    const single_intInput = tbody.querySelector('input[name=\"single_int\"]');\n    data.single_int = parseInt(single_intInput.value);\n\n",
        "vars": {
            "single_int": "field"
        }
    },
    "browser1_from_input_tbody_list_bool": {
        "name": "browser1_from_input_tbody_list_bool",
        "text": "    const multi_boolInput = tbody.querySelector('input[name=\"multi_bool\"]');\n    data.multi_bool = JSON.parse(multi_boolInput.getAttribute('valueAsJSON'));\n\n",
        "vars": {
            "multi_bool": "field"
        }
    },
    "browser1_from_input_tbody_list_datetime": {
        "name": "browser1_from_input_tbody_list_datetime",
        "text": "    const multi_datetimeInput = tbody.querySelector('input[name=\"multi_datetime\"]');\n    console.log('multi_datetimeInput', multi_datetimeInput);\n    const multie_datetimeItems = JSON.parse(multi_datetimeInput.getAttribute('valueAsJSON'));\n    data.multi_datetime = multie_datetimeItems.map(item => new Date(item));\n",
        "vars": {
            "multi_datetime": "field"
        }
    },
    "browser1_from_input_tbody_list_float": {
        "name": "browser1_from_input_tbody_list_float",
        "text": "    const multi_floatInput = tbody.querySelector('input[name=\"multi_float\"]');\n    data.multi_float = JSON.parse(multi_floatInput.getAttribute('valueAsJSON'));\n\n",
        "vars": {
            "multi_float": "field"
        }
    },
    "browser1_from_input_tbody_list_int": {
        "name": "browser1_from_input_tbody_list_int",
        "text": "    const multi_intInput = tbody.querySelector('input[name=\"multi_int\"]');\n    data.multi_int = JSON.parse(multi_intInput.getAttribute('valueAsJSON'));\n\n",
        "vars": {
            "multi_int": "field"
        }
    },
    "browser1_from_input_tbody_list_str": {
        "name": "browser1_from_input_tbody_list_str",
        "text": "    const multi_stringInput = tbody.querySelector('input[name=\"multi_string\"]');\n    data.multi_string = JSON.parse(multi_stringInput.getAttribute('valueAsJSON'));\n\n",
        "vars": {
            "multi_string": "field"
        }
    },
    "browser1_from_input_tbody_list_str_enum": {
        "name": "browser1_from_input_tbody_list_str_enum",
        "text": "    const multi_enumInput = tbody.querySelector('select[name=\"multi_enum\"]');\n    console.log('multi_enumInput', multi_enumInput);\n    data.multi_enum = JSON.parse(multi_enumInput.getAttribute('valueAsJSON'));\n\n",
        "vars": {
            "multi_enum": "field"
        }
    },
    "browser1_from_input_tbody_str": {
        "name": "browser1_from_input_tbody_str",
        "text": "    const single_stringInput = tbody.querySelector('input[name=\"single_string\"]');\n    data.single_string = single_stringInput.value;\n\n",
        "vars": {
            "single_string": "field"
        }
    },
    "browser1_from_input_tbody_str_enum": {
        "name": "browser1_from_input_tbody_str_enum",
        "text": "    const single_enumInput = tbody.querySelector('select[name=\"single_enum\"]');\n    data.single_enum = single_enumInput.value;\n\n",
        "vars": {
            "single_enum": "field"
        }
    },
    "browser1_from_input_tbody_user_id": {
        "name": "browser1_from_input_tbody_user_id",
        "text": "    const user_idInput = tbody.querySelector('input[name=\"user_id\"]');\n    data.user_id = user_idInput ? user_idInput.value : '';\n\n",
        "vars": {}
    },
    "browser1_init_bool": {
        "name": "browser1_init_bool",
        "text": "        single_bool: data.single_bool,\n",
        "vars": {
            "single_bool": "field"
        }
    },
    "browser1_init_datetime": {
        "name": "browser1_init_datetime",
        "text": "        single_datetime: new Date(data.single_datetime),\n",
        "vars": {
            "single_datetime": "field"
        }
    },
    "browser1_init_float": {
        "name": "browser1_init_float",
        "text": "        single_float: data.single_float,\n",
        "vars": {
            "single_float": "field"
        }
    },
    "browser1_init_int": {
        "name": "browser1_init_int",
        "text": "        single_int: data.single_int,\n",
        "vars": {
            "single_int": "field"
        }
    },
    "browser1_init_list_bool": {
        "name": "browser1_init_list_bool",
        "text": "        multi_bool: data.multi_bool,\n",
        "vars": {
            "multi_bool": "field"
        }
    },
    "browser1_init_list_datetime": {
        "name": "browser1_init_list_datetime",
        "text": "        multi_datetime: data.multi_datetime.map(d => new Date(d))\n",
        "vars": {
            "multi_datetime": "field"
        }
    },
    "browser1_init_list_float": {
        "name": "browser1_init_list_float",
        "text": "        multi_float: data.multi_float,\n",
        "vars": {
            "multi_float": "field"
        }
    },
    "browser1_init_list_int": {
        "name": "browser1_init_list_int",
        "text": "        multi_int: data.multi_int,\n",
        "vars": {
            "multi_int": "field"
        }
    },
    "browser1_init_list_str": {
        "name": "browser1_init_list_str",
        "text": "        multi_string: data.multi_string,\n",
        "vars": {
            "multi_string": "field"
        }
    },
    "browser1_init_list_str_enum": {
        "name": "browser1_init_list_str_enum",
        "text": "        multi_enum: data.multi_enum,\n",
        "vars": {
            "multi_enum": "field"
        }
    },
    "browser1_init_str": {
        "name": "browser1_init_str",
        "text": "        single_string: data.single_string,\n",
        "vars": {
            "single_string": "field"
        }
    },
    "browser1_init_str_enum": {
        "name": "browser1_init_str_enum",
        "text": "        single_enum: data.single_enum,\n",
        "vars": {
            "single_enum": "field"
        }
    },
    "browser1_list_table_header": {
        "name": "browser1_list_table_header",
        "text": "                         <th>id</th>\n",
        "vars": {
            "id": "field"
        }
    },
    "browser1_model_auth_check_create_user": {
        "name": "browser1_model_auth_check_create_user",
        "text": "    //\n    // create user and login because multi-model requires auth\n    //\n\n    const testEmail = `test-multi-model-${Math.random()}-${Date.now()}@example.com`;\n    const testPassword = 'testpassword123';\n    const testName = 'Test User';\n\n    // Step 1: Create User\n    await page.goto('http://localhost:5005/');\n    await page.getByRole('button', { name: 'Create User' }).click();\n\n    await expect(page.locator('h1')).toContainText('Create User - template_app');\n\n    // Fill out the create user form\n    await page.locator('input[name=\"name\"]').fill(testName);\n    await page.locator('input[name=\"email\"]').fill(testEmail);\n    await page.locator('input[name=\"password1\"]').fill(testPassword);\n    await page.locator('input[name=\"password2\"]').fill(testPassword);\n\n    // Submit the form\n    await page.getByRole('button', { name: 'Create User' }).click();\n\n    // Wait for success message\n    await expect(page.locator('#message')).toContainText('User created successfully');\n\n    // Step 2: Login\n    await page.getByRole('link', { name: 'Login' }).click();\n\n    await expect(page.locator('h1')).toContainText('Login - template_app');\n\n    // Fill out the login form\n    await page.locator('input[name=\"email\"]').fill(testEmail);\n    await page.locator('input[name=\"password\"]').fill(testPassword);\n\n    // Submit the login form\n    await page.getByRole('button', { name: 'Login' }).click();\n\n    // Wait for success message and redirect\n    await expect(page.locator('#message')).toContainText('Login successful');\n\n    // Wait for redirect to home page\n    await page.waitForURL('http://localhost:5005/');\n\n    // Create random multi model item\n    await page.goto('http://localhost:5005/template-module/multi-model/create');\n",
        "vars": {
            "http://localhost:5005": "client_default_host",
            "multi-model": "model_name_kebab_case",
            "template_app": "project_name_snake_case"
        }
    },
    "browser1_random_bool": {
        "name": "browser1_random_bool",
        "text": "\t\t'single_bool': randomBool(),\n",
        "vars": {
            "single_bool": "field"
        }
    },
    "browser1_random_datetime": {
        "name": "browser1_random_datetime",
        "text": "\t\t'single_datetime': randomDatetime(),\n",
        "vars": {
            "single_datetime": "field"
        }
    },
    "browser1_random_float": {
        "name": "browser1_random_float",
        "text": "\t\t'single_float': randomFloat(),\n",
        "vars": {
            "single_float": "field"
        }
    },
    "browser1_random_int": {
        "name": "browser1_random_int",
        "text": "\t\t'single_int': randomInt(),\n",
        "vars": {
            "single_int": "field"
        }
    },
    "browser1_random_list_bool": {
        "name": "browser1_random_list_bool",
        "text": "\t\t'multi_bool': randomList(randomBool),\n",
        "vars": {
            "multi_bool": "field"
        }
    },
    "browser1_random_list_datetime": {
        "name": "browser1_random_list_datetime",
        "text": "        'multi_datetime': randomList(randomDatetime),\n",
        "vars": {
            "multi_datetime": "field"
        }
    },
    "browser1_random_list_float": {
        "name": "browser1_random_list_float",
        "text": "\t\t'multi_float': randomList(randomFloat),\n",
        "vars": {
            "multi_float": "field"
        }
    },
    "browser1_random_list_int": {
        "name": "browser1_random_list_int",
        "text": "\t\t'multi_int': randomList(randomInt),\n",
        "vars": {
            "multi_int": "field"
        }
    },
    "browser1_random_list_str": {
        "name": "browser1_random_list_str",
        "text": "\t\t'multi_string': randomList(randomStr),\n",
        "vars": {
            "multi_string": "field"
        }
    },
    "browser1_random_list_str_enum": {
        "name": "browser1_random_list_str_enum",
        "text": "        'multi_enum': randomList(() => randomStrEnum(multi_enum_options)),\n",
        "vars": {
            "multi_enum": "field"
        }
    },
    "browser1_random_str": {
        "name": "browser1_random_str",
        "text": "\t\t'single_string': randomStr(),\n",
        "vars": {
            "single_string": "field"
        }
    },
    "browser1_random_str_enum": {
        "name": "browser1_random_str_enum",
        "text": "\t\t'single_enum': randomStrEnum(single_enum_options),\n",
        "vars": {
            "single_enum": "field"
        }
    },
    "browser1_to_display_tbody_bool": {
        "name": "browser1_to_display_tbody_bool",
        "text": "    //\n    // single_bool - bool\n    //\n\n    const single_boolTdKey = document.createElement('td');\n    single_boolTdKey.textContent = 'single_bool';\n\n    const single_boolTdValue = document.createElement('td');\n    single_boolTdValue.textContent = (data.single_bool) ? 'yes' : 'no';\n\n    const single_boolTr = document.createElement('tr');\n    single_boolTr.appendChild(single_boolTdKey);\n    single_boolTr.appendChild(single_boolTdValue);\n\n    tbody.appendChild(single_boolTr);\n\n",
        "vars": {
            "single_bool": "field"
        }
    },
    "browser1_to_display_tbody_datetime": {
        "name": "browser1_to_display_tbody_datetime",
        "text": "    //\n    // single_datetime - datetime\n    //\n\n    const single_datetimeTdKey = document.createElement('td');\n    single_datetimeTdKey.textContent = 'single_datetime';\n\n    const single_datetimeTdValue = document.createElement('td');\n    single_datetimeTdValue.textContent = data.single_datetime.toISOString().split('.')[0];\n\n    const single_datetimeTr = document.createElement('tr');\n    single_datetimeTr.appendChild(single_datetimeTdKey);\n    single_datetimeTr.appendChild(single_datetimeTdValue);\n\n    tbody.appendChild(single_datetimeTr);\n",
        "vars": {
            "single_datetime": "field"
        }
    },
    "browser1_to_display_tbody_float": {
        "name": "browser1_to_display_tbody_float",
        "text": "    //\n    // single_float - float\n    //\n\n    const single_floatTdKey = document.createElement('td');\n    single_floatTdKey.textContent = 'single_float';\n\n    const single_floatTdValue = document.createElement('td');\n    single_floatTdValue.textContent = data.single_float;\n    \n    const single_floatTr = document.createElement('tr');\n    single_floatTr.appendChild(single_floatTdKey);\n    single_floatTr.appendChild(single_floatTdValue);\n\n    tbody.appendChild(single_floatTr);\n\n",
        "vars": {
            "single_float": "field"
        }
    },
    "browser1_to_display_tbody_int": {
        "name": "browser1_to_display_tbody_int",
        "text": "    //\n    // single_int - int\n    //\n\n    const single_intTdKey = document.createElement('td');\n    single_intTdKey.textContent = 'single_int';\n\n    const single_intTdValue = document.createElement('td');\n    single_intTdValue.textContent = data.single_int;\n\n    const single_intTr = document.createElement('tr');\n    single_intTr.appendChild(single_intTdKey);\n    single_intTr.appendChild(single_intTdValue);\n\n    tbody.appendChild(single_intTr);\n\n",
        "vars": {
            "single_int": "field"
        }
    },
    "browser1_to_display_tbody_list_bool": {
        "name": "browser1_to_display_tbody_list_bool",
        "text": "    //\n    // multi_bool - list of bool\n    //\n\n    const multi_boolTdKey = document.createElement('td');\n    multi_boolTdKey.textContent = 'multi_bool';\n\n    const multi_boolTdValue = document.createElement('td');\n    multi_boolTdValue.textContent = data.multi_bool.join(', ');\n\n    const multi_boolTr = document.createElement('tr');\n    multi_boolTr.appendChild(multi_boolTdKey);\n    multi_boolTr.appendChild(multi_boolTdValue);\n\n    tbody.appendChild(multi_boolTr);\n\n",
        "vars": {
            "multi_bool": "field"
        }
    },
    "browser1_to_display_tbody_list_datetime": {
        "name": "browser1_to_display_tbody_list_datetime",
        "text": "    //\n    // multi_datetime - list of datetime\n    //\n\n    const multi_datetimeTdKey = document.createElement('td');\n    multi_datetimeTdKey.textContent = 'multi_datetime';\n\n    const multi_datetimeTdValue = document.createElement('td');\n    multi_datetimeTdValue.textContent = data.multi_datetime.map(d => d.toISOString().split('.')[0]).join(', ');\n\n    const multi_datetimeTr = document.createElement('tr');\n    multi_datetimeTr.appendChild(multi_datetimeTdKey);\n    multi_datetimeTr.appendChild(multi_datetimeTdValue);\n\n    tbody.appendChild(multi_datetimeTr);\n",
        "vars": {
            "multi_datetime": "field"
        }
    },
    "browser1_to_display_tbody_list_float": {
        "name": "browser1_to_display_tbody_list_float",
        "text": "    //\n    // multi_float - list of float\n    //\n\n    const multi_floatTdKey = document.createElement('td');\n    multi_floatTdKey.textContent = 'multi_float';\n\n    const multi_floatTdValue = document.createElement('td');\n    multi_floatTdValue.textContent = data.multi_float.join(', ');\n\n    const multi_floatTr = document.createElement('tr');\n    multi_floatTr.appendChild(multi_floatTdKey);\n    multi_floatTr.appendChild(multi_floatTdValue);\n\n    tbody.appendChild(multi_floatTr);\n\n",
        "vars": {
            "multi_float": "field"
        }
    },
    "browser1_to_display_tbody_list_int": {
        "name": "browser1_to_display_tbody_list_int",
        "text": "    //\n    // multi_int - list of int\n    //\n\n    const multi_intTdKey = document.createElement('td');\n    multi_intTdKey.textContent = 'multi_int';\n\n    const multi_intTdValue = document.createElement('td');\n    multi_intTdValue.textContent = data.multi_int.join(', ');\n\n    const multi_intTr = document.createElement('tr');\n    multi_intTr.appendChild(multi_intTdKey);\n    multi_intTr.appendChild(multi_intTdValue);\n\n    tbody.appendChild(multi_intTr);\n\n",
        "vars": {
            "multi_int": "field"
        }
    },
    "browser1_to_display_tbody_list_str": {
        "name": "browser1_to_display_tbody_list_str",
        "text": "    //\n    // multi_string - list of str\n    //\n\n    const multi_stringTdKey = document.createElement('td');\n    multi_stringTdKey.textContent = 'multi_string';\n\n    const multi_stringTdValue = document.createElement('td');\n    multi_stringTdValue.textContent = data.multi_string.join(', ');\n\n    const multi_stringTr = document.createElement('tr');\n    multi_stringTr.appendChild(multi_stringTdKey);\n    multi_stringTr.appendChild(multi_stringTdValue);\n\n    tbody.appendChild(multi_stringTr);\n\n",
        "vars": {
            "multi_string": "field"
        }
    },
    "browser1_to_display_tbody_list_str_enum": {
        "name": "browser1_to_display_tbody_list_str_enum",
        "text": "    //\n    // multi_enum - list of enum\n    //\n\n    const multi_enumTdKey = document.createElement('td');\n    multi_enumTdKey.textContent = 'multi_enum';\n\n    const multi_enumTdValue = document.createElement('td');\n    multi_enumTdValue.textContent = data.multi_enum.join(', ');\n\n    const multi_enumTr = document.createElement('tr');\n    multi_enumTr.appendChild(multi_enumTdKey);\n    multi_enumTr.appendChild(multi_enumTdValue);\n\n    tbody.appendChild(multi_enumTr);\n\n",
        "vars": {
            "multi_enum": "field"
        }
    },
    "browser1_to_display_tbody_str": {
        "name": "browser1_to_display_tbody_str",
        "text": "    //\n    // single_string - str\n    //\n\n    const single_stringTdKey = document.createElement('td');\n    single_stringTdKey.textContent = 'single_string';\n\n    const single_stringTdValue = document.createElement('td');\n    single_stringTdValue.textContent = data.single_string;\n\n    const single_stringTr = document.createElement('tr');\n    single_stringTr.appendChild(single_stringTdKey);\n    single_stringTr.appendChild(single_stringTdValue);\n\n    tbody.appendChild(single_stringTr);\n\n",
        "vars": {
            "single_string": "field"
        }
    },
    "browser1_to_display_tbody_str_enum": {
        "name": "browser1_to_display_tbody_str_enum",
        "text": "    //\n    // single_enum - enum\n    //\n\n    const single_enumTdKey = document.createElement('td');\n    single_enumTdKey.textContent = 'single_enum';\n\n    const single_enumTdValue = document.createElement('td');\n    single_enumTdValue.textContent = data.single_enum;\n\n    const single_enumTr = document.createElement('tr');\n    single_enumTr.appendChild(single_enumTdKey);\n    single_enumTr.appendChild(single_enumTdValue);\n\n    tbody.appendChild(single_enumTr);\n\n",
        "vars": {
            "single_enum": "field"
        }
    },
    "browser1_to_display_tbody_user_id": {
        "name": "browser1_to_display_tbody_user_id",
        "text": "    //\n    // user_id - str\n    //\n\n    const user_idTdKey = document.createElement('td');\n    user_idTdKey.textContent = 'user_id';\n\n    const user_idTdValue = document.createElement('td');\n    user_idTdValue.textContent = data.user_id;\n\n    const user_idTr = document.createElement('tr');\n    user_idTr.appendChild(user_idTdKey);\n    user_idTr.appendChild(user_idTdValue);\n\n    tbody.appendChild(user_idTr);\n",
        "vars": {}
    },
    "browser1_to_input_tbody_bool": {
        "name": "browser1_to_input_tbody_bool",
        "text": "    //\n    // single_bool - bool\n    //\n\n    const single_boolTdKey = document.createElement('td');\n    single_boolTdKey.textContent = 'single_bool';\n\n    const single_boolTdInput = document.createElement('td');\n    const single_boolInput = document.createElement('input');\n    single_boolInput.name = 'single_bool';\n    single_boolInput.type = 'checkbox';\n    single_boolInput.checked = data.single_bool;\n    single_boolTdInput.appendChild(single_boolInput);\n\n    const single_boolTdOther = document.createElement('td');\n    single_boolTdOther.textContent = '-';\n\n    const single_boolTr = document.createElement('tr');\n    single_boolTr.appendChild(single_boolTdKey);\n    single_boolTr.appendChild(single_boolTdInput);\n    single_boolTr.appendChild(single_boolTdOther);\n\n    tbody.appendChild(single_boolTr);\n\n",
        "vars": {
            "single_bool": "field"
        }
    },
    "browser1_to_input_tbody_datetime": {
        "name": "browser1_to_input_tbody_datetime",
        "text": "    //\n    // single_datetime - datetime\n    //\n\n    const single_datetimeTdKey = document.createElement('td');\n    single_datetimeTdKey.textContent = 'single_datetime';\n\n    const single_datetimeTdInput = document.createElement('td');\n    const single_datetimeInput = document.createElement('input');\n    single_datetimeInput.name = 'single_datetime';\n    single_datetimeInput.type = 'datetime-local';\n    try {\n        single_datetimeInput.value = data.single_datetime.toISOString().split('.')[0].slice(0, 16);\n    }catch {\n        single_datetimeInput.value = '';\n    }\n    single_datetimeTdInput.appendChild(single_datetimeInput);\n\n    const single_datetimeTdOther = document.createElement('td');\n    single_datetimeTdOther.textContent = '-';\n\n    const single_datetimeTr = document.createElement('tr');\n    single_datetimeTr.appendChild(single_datetimeTdKey);\n    single_datetimeTr.appendChild(single_datetimeTdInput);\n    single_datetimeTr.appendChild(single_datetimeTdOther);\n\n    tbody.appendChild(single_datetimeTr);\n",
        "vars": {
            "single_datetime": "field"
        }
    },
    "browser1_to_input_tbody_float": {
        "name": "browser1_to_input_tbody_float",
        "text": "    //\n    // single_float - float\n    //\n\n    const single_floatTdKey = document.createElement('td');\n    single_floatTdKey.textContent = 'single_float';\n\n    const single_floatTdInput = document.createElement('td');\n    const single_floatInput = document.createElement('input');\n    single_floatInput.name = 'single_float';\n    single_floatInput.type = 'number';\n    single_floatInput.size = 5;\n    single_floatInput.value = parseFloat(data.single_float).toFixed(2);\n    single_floatInput.step = '.01';\n    single_floatTdInput.appendChild(single_floatInput);\n\n    const single_floatTdOther = document.createElement('td');\n    single_floatTdOther.textContent = '-';\n\n    const single_floatTr = document.createElement('tr');\n    single_floatTr.appendChild(single_floatTdKey);\n    single_floatTr.appendChild(single_floatTdInput);\n    single_floatTr.appendChild(single_floatTdOther);\n\n    tbody.appendChild(single_floatTr);\n\n",
        "vars": {
            "single_float": "field"
        }
    },
    "browser1_to_input_tbody_int": {
        "name": "browser1_to_input_tbody_int",
        "text": "    //\n    // single_int - int\n    //\n\n    const single_intTdKey = document.createElement('td');\n    single_intTdKey.textContent = 'single_int';\n\n    const single_intTdInput = document.createElement('td');\n    const single_intInput = document.createElement('input');\n    single_intInput.name = 'single_int';\n    single_intInput.type = 'number';\n    single_intInput.size = 5;\n    single_intInput.value = data.single_int;\n    single_intTdInput.appendChild(single_intInput);\n\n    const single_intTdOther = document.createElement('td');\n    single_intTdOther.textContent = '-';\n\n    const single_intTr = document.createElement('tr');\n    single_intTr.appendChild(single_intTdKey);\n    single_intTr.appendChild(single_intTdInput);\n    single_intTr.appendChild(single_intTdOther);\n\n    tbody.appendChild(single_intTr);\n\n",
        "vars": {
            "single_int": "field"
        }
    },
    "browser1_to_input_tbody_list_bool": {
        "name": "browser1_to_input_tbody_list_bool",
        "text": "    //\n    // multi_bool - list of bool\n    //\n\n    let multi_boolEntered;\n\n    try {\n        multi_boolEntered = data.multi_bool.slice()\n    }catch {\n        multi_boolEntered = [];\n    }\n\n    const multi_boolTdKey = document.createElement('td');\n    multi_boolTdKey.textContent = 'multi_bool';\n\n    const multi_boolTdInput = document.createElement('td');\n    \n    const multi_boolInput = document.createElement('input');\n    multi_boolInput.name = 'multi_bool';\n    multi_boolInput.value = '';\n    multi_boolInput.size = 35;\n    // we store the actual data on valueAsJSON because we can't store an array in an input value with escaping \n    // and also so we can reset the input between each item entered\n    multi_boolInput.setAttribute('valueAsJSON', JSON.stringify(multi_boolEntered));\n    multi_boolInput.placeholder = 'press enter after each item';\n\n    const multi_boolTdOther = document.createElement('td');\n    const multi_boolEntriesRender = () => {\n        multi_boolTdOther.innerHTML = '';\n    \n        for (const [index, item] of multi_boolEntered.entries()) {\n            const itemLink = document.createElement('a');\n            itemLink.innerHTML = item;\n            itemLink.onclick = () => {\n                console.log('removing multi_bool index: ' + index, item);\n                multi_boolEntered.splice(index, 1);\n                multi_boolInput.setAttribute('valueAsJSON', JSON.stringify(multi_boolEntered));\n                multi_boolEntriesRender();\n            }\n            const itemSpacer = document.createElement('span');\n            itemSpacer.innerHTML = ', ';\n\n            multi_boolTdOther.appendChild(itemLink);\n\n            if (index < multi_boolEntered.length - 1) multi_boolTdOther.appendChild(itemSpacer);\n        }\n    }\n\n    multi_boolEntriesRender();\n\n    multi_boolInput.addEventListener('keydown', (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            multi_boolEntered.push(convertListElementBool(multi_boolInput.value));\n            multi_boolInput.value = ''\n            multi_boolInput.setAttribute('valueAsJSON', JSON.stringify(multi_boolEntered));\n            multi_boolEntriesRender();\n        }\n    });\n\n    multi_boolTdInput.appendChild(multi_boolInput);\n\n    const multi_boolTr = document.createElement('tr');\n    multi_boolTr.appendChild(multi_boolTdKey);\n    multi_boolTr.appendChild(multi_boolTdInput);\n    multi_boolTr.appendChild(multi_boolTdOther);\n\n    tbody.appendChild(multi_boolTr);\n\n",
        "vars": {
            "multi_bool": "field"
        }
    },
    "browser1_to_input_tbody_list_datetime": {
        "name": "browser1_to_input_tbody_list_datetime",
        "text": "    //\n    // multi_datetime - list of datetime\n    //\n    \n    let multi_datetimeEntered;\n\n    try {\n        multi_datetimeEntered = data.multi_datetime.slice()\n    }\n    catch {\n        multi_datetimeEntered = [];\n    }\n\n    const multi_datetimeTdKey = document.createElement('td');\n    multi_datetimeTdKey.textContent = 'multi_datetime';\n\n    const multi_datetimeTdInput = document.createElement('td');\n\n    const multi_datetimeInput = document.createElement('input');\n    multi_datetimeInput.name = 'multi_datetime';\n    multi_datetimeInput.type = 'datetime-local';\n\n    multi_datetimeInput.setAttribute('valueAsJSON', JSON.stringify(multi_datetimeEntered));\n\n    const multi_datetimeTdOther = document.createElement('td');\n    const multi_datetimeEntriesRender = () => {\n        multi_datetimeTdOther.innerHTML = '';\n\n        for (const [index, item] of multi_datetimeEntered.entries()) {\n            const itemLink = document.createElement('a');\n            const itemIsoString = item.toISOString();\n            itemLink.innerHTML = itemIsoString.split('.')[0];\n            itemLink.onclick = () => {\n                console.log('removing multi_datetime index: ' + index, item);\n                multi_datetimeEntered.splice(index, 1);\n                multi_datetimeInput.setAttribute('valueAsJSON', JSON.stringify(multi_datetimeEntered));\n                multi_datetimeEntriesRender();\n            }\n            const itemSpacer = document.createElement('span');\n            itemSpacer.innerHTML = ', ';\n\n            multi_datetimeTdOther.appendChild(itemLink);\n\n            if (index < multi_datetimeEntered.length - 1) multi_datetimeTdOther.appendChild(itemSpacer);\n        }\n    }\n\n    multi_datetimeEntriesRender();\n\n    multi_datetimeTdInput.appendChild(multi_datetimeInput);\n\n    const multi_datetimeTdInputAddButton = document.createElement('button');\n    multi_datetimeTdInputAddButton.textContent = 'add';\n    multi_datetimeTdInputAddButton.onclick = () => {\n        console.log('multi_datetime add', multi_datetimeInput.value);\n        const selectedValue = multi_datetimeInput.value;\n        if (selectedValue) {\n            const selectedDate = new Date(selectedValue);\n            if (isNaN(selectedDate.getTime())) {\n                console.error('Invalid date:', selectedValue);\n                return;\n            }\n            multi_datetimeEntered.push(convertListElementDatetime(selectedDate));\n            multi_datetimeInput.value = '';\n            multi_datetimeInput.setAttribute('valueAsJSON', JSON.stringify(multi_datetimeEntered));\n            multi_datetimeEntriesRender();\n        }   \n    }\n    multi_datetimeTdInput.appendChild(multi_datetimeTdInputAddButton);\n\n    const multi_datetimeTr = document.createElement('tr');\n    multi_datetimeTr.appendChild(multi_datetimeTdKey);\n    multi_datetimeTr.appendChild(multi_datetimeTdInput);\n    multi_datetimeTr.appendChild(multi_datetimeTdOther);\n\n    tbody.appendChild(multi_datetimeTr);\n",
        "vars": {
            "multi_datetime": "field"
        }
    },
    "browser1_to_input_tbody_list_float": {
        "name": "browser1_to_input_tbody_list_float",
        "text": "    //\n    // multi_float - list of float\n    //\n\n    let multi_floatEntered;\n\n    try {\n        multi_floatEntered = data.multi_float.slice()\n    }catch {\n        multi_floatEntered = [];\n    }\n\n    const multi_floatTdKey = document.createElement('td');\n    multi_floatTdKey.textContent = 'multi_float';\n\n    const multi_floatTdInput = document.createElement('td');\n    \n    const multi_floatInput = document.createElement('input');\n    multi_floatInput.name = 'multi_float';\n    multi_floatInput.value = '';\n    multi_floatInput.size = 35;\n    // we store the actual data on valueAsJSON because we can't store an array in an input value with escaping \n    // and also so we can reset the input between each item entered\n    multi_floatInput.setAttribute('valueAsJSON', JSON.stringify(multi_floatEntered));\n    multi_floatInput.placeholder = 'press enter after each item';\n\n    const multi_floatTdOther = document.createElement('td');\n    const multi_floatEntriesRender = () => {\n        multi_floatTdOther.innerHTML = '';\n    \n        for (const [index, item] of multi_floatEntered.entries()) {\n            const itemLink = document.createElement('a');\n            itemLink.innerHTML = item;\n            itemLink.onclick = () => {\n                console.log('removing multi_float index: ' + index, item);\n                multi_floatEntered.splice(index, 1);\n                multi_floatInput.setAttribute('valueAsJSON', JSON.stringify(multi_floatEntered));\n                multi_floatEntriesRender();\n            }\n            const itemSpacer = document.createElement('span');\n            itemSpacer.innerHTML = ', ';\n\n            multi_floatTdOther.appendChild(itemLink);\n\n            if (index < multi_floatEntered.length - 1) multi_floatTdOther.appendChild(itemSpacer);\n        }\n    }\n\n    multi_floatEntriesRender();\n\n    multi_floatInput.addEventListener('keydown', (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            multi_floatEntered.push(convertListElementFloat(multi_floatInput.value));\n            multi_floatInput.value = ''\n            multi_floatInput.setAttribute('valueAsJSON', JSON.stringify(multi_floatEntered));\n            multi_floatEntriesRender();\n        }\n    });\n\n    multi_floatTdInput.appendChild(multi_floatInput);\n\n    const multi_floatTr = document.createElement('tr');\n    multi_floatTr.appendChild(multi_floatTdKey);\n    multi_floatTr.appendChild(multi_floatTdInput);\n    multi_floatTr.appendChild(multi_floatTdOther);\n\n    tbody.appendChild(multi_floatTr);\n\n\n",
        "vars": {
            "multi_float": "field"
        }
    },
    "browser1_to_input_tbody_list_int": {
        "name": "browser1_to_input_tbody_list_int",
        "text": "    //\n    // multi_int - list of int\n    //\n\n    let multi_intEntered;\n\n    try {\n        multi_intEntered = data.multi_int.slice()\n    }catch {\n        multi_intEntered = [];\n    }\n\n    const multi_intTdKey = document.createElement('td');\n    multi_intTdKey.textContent = 'multi_int';\n\n    const multi_intTdInput = document.createElement('td');\n    \n    const multi_intInput = document.createElement('input');\n    multi_intInput.name = 'multi_int';\n    multi_intInput.value = '';\n    multi_intInput.size = 35;\n    // we store the actual data on valueAsJSON because we can't store an array in an input value with escaping \n    // and also so we can reset the input between each item entered\n    multi_intInput.setAttribute('valueAsJSON', JSON.stringify(multi_intEntered));\n    multi_intInput.placeholder = 'press enter after each item';\n\n    const multi_intTdOther = document.createElement('td');\n    const multi_intEntriesRender = () => {\n        multi_intTdOther.innerHTML = '';\n    \n        for (const [index, item] of multi_intEntered.entries()) {\n            const itemLink = document.createElement('a');\n            itemLink.innerHTML = item;\n            itemLink.onclick = () => {\n                console.log('removing multi_int index: ' + index, item);\n                multi_intEntered.splice(index, 1);\n                multi_intInput.setAttribute('valueAsJSON', JSON.stringify(multi_intEntered));\n                multi_intEntriesRender();\n            }\n            const itemSpacer = document.createElement('span');\n            itemSpacer.innerHTML = ', ';\n\n            multi_intTdOther.appendChild(itemLink);\n\n            if (index < multi_intEntered.length - 1) multi_intTdOther.appendChild(itemSpacer);\n        }\n    }\n\n    multi_intEntriesRender();\n\n    multi_intInput.addEventListener('keydown', (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            multi_intEntered.push(convertListElementInt(multi_intInput.value));\n            multi_intInput.value = ''\n            multi_intInput.setAttribute('valueAsJSON', JSON.stringify(multi_intEntered));\n            multi_intEntriesRender();\n        }\n    });\n\n    multi_intTdInput.appendChild(multi_intInput);\n\n    const multi_intTr = document.createElement('tr');\n    multi_intTr.appendChild(multi_intTdKey);\n    multi_intTr.appendChild(multi_intTdInput);\n    multi_intTr.appendChild(multi_intTdOther);\n\n    tbody.appendChild(multi_intTr);\n\n\n",
        "vars": {
            "multi_int": "field"
        }
    },
    "browser1_to_input_tbody_list_str": {
        "name": "browser1_to_input_tbody_list_str",
        "text": "    //\n    // multi_string - list of str\n    //\n\n    let multi_stringEntered;\n\n    try {\n        multi_stringEntered = data.multi_string.slice()\n    }catch {\n        multi_stringEntered = [];\n    }\n\n    const multi_stringTdKey = document.createElement('td');\n    multi_stringTdKey.textContent = 'multi_string';\n\n    const multi_stringTdInput = document.createElement('td');\n    \n    const multi_stringInput = document.createElement('input');\n    multi_stringInput.name = 'multi_string';\n    multi_stringInput.value = '';\n    multi_stringInput.size = 35;\n    // we store the actual data on valueAsJSON because we can't store an array in an input value with escaping \n    // and also so we can reset the input between each item entered\n    multi_stringInput.setAttribute('valueAsJSON', JSON.stringify(multi_stringEntered));\n    multi_stringInput.placeholder = 'press enter after each item';\n\n    const multi_stringTdOther = document.createElement('td');\n    const multi_stringEntriesRender = () => {\n        multi_stringTdOther.innerHTML = '';\n    \n        for (const [index, item] of multi_stringEntered.entries()) {\n            const itemLink = document.createElement('a');\n            itemLink.innerHTML = item;\n            itemLink.onclick = () => {\n                console.log('removing multi_string index: ' + index, item);\n                multi_stringEntered.splice(index, 1);\n                multi_stringInput.setAttribute('valueAsJSON', JSON.stringify(multi_stringEntered));\n                multi_stringEntriesRender();\n            }\n            const itemSpacer = document.createElement('span');\n            itemSpacer.innerHTML = ', ';\n\n            multi_stringTdOther.appendChild(itemLink);\n\n            if (index < multi_stringEntered.length - 1) multi_stringTdOther.appendChild(itemSpacer);\n        }\n    }\n\n    multi_stringEntriesRender();\n\n    multi_stringInput.addEventListener('keydown', (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            multi_stringEntered.push(convertListElementStr(multi_stringInput.value));\n            multi_stringInput.value = ''\n            multi_stringInput.setAttribute('valueAsJSON', JSON.stringify(multi_stringEntered));\n            multi_stringEntriesRender();\n        }\n    });\n\n    multi_stringTdInput.appendChild(multi_stringInput);\n\n    const multi_stringTr = document.createElement('tr');\n    multi_stringTr.appendChild(multi_stringTdKey);\n    multi_stringTr.appendChild(multi_stringTdInput);\n    multi_stringTr.appendChild(multi_stringTdOther);\n\n    tbody.appendChild(multi_stringTr);\n\n",
        "vars": {
            "multi_string": "field"
        }
    },
    "browser1_to_input_tbody_list_str_enum": {
        "name": "browser1_to_input_tbody_list_str_enum",
        "text": "    //\n    // multi_enum - list of enum\n    //\n\n    let multi_enumEntered;\n    try {\n        multi_enumEntered = data.multi_enum.slice()\n    }\n    catch {\n        multi_enumEntered = [];\n    }\n    const multi_enumTdKey = document.createElement('td');\n    multi_enumTdKey.textContent = 'multi_enum';\n\n    const multi_enumTdInput = document.createElement('td');\n\n    const multi_enumInput = document.createElement('select');\n    multi_enumInput.name = 'multi_enum';\n    const multi_enum_null_option = document.createElement('option');\n    multi_enum_null_option.value = '';\n    multi_enum_null_option.textContent = 'select an option';\n    multi_enum_null_option.selected = true;\n    multi_enum_null_option.disabled = true;\n    multi_enumInput.appendChild(multi_enum_null_option);\n\n    for (const option of multi_enum_options) {\n        const multi_enumOption = document.createElement('option');\n        multi_enumOption.value = option;\n        multi_enumOption.textContent = option;\n        multi_enumInput.appendChild(multi_enumOption);\n    }\n\n    multi_enumInput.addEventListener('change', (event) => {\n        console.log('multi_enum change', event.target.value);\n        const selectedValue = event.target.value;\n        if (selectedValue) {\n            multi_enumEntered.push(convertListElementEnum(selectedValue));\n            multi_enumInput.value = '';\n            multi_enumInput.setAttribute('valueAsJSON', JSON.stringify(multi_enumEntered));\n            multi_enumEntriesRender();\n        }\n    });\n    multi_enumInput.setAttribute('valueAsJSON', JSON.stringify(multi_enumEntered));\n\n    const multi_enumTdOther = document.createElement('td');\n    const multi_enumEntriesRender = () => {\n        multi_enumTdOther.innerHTML = '';\n\n        for (const [index, item] of multi_enumEntered.entries()) {\n            const itemLink = document.createElement('a');\n            itemLink.innerHTML = item;\n            itemLink.onclick = () => {\n                console.log('removing multi_enum index: ' + index, item);\n                multi_enumEntered.splice(index, 1);\n                multi_enumInput.setAttribute('valueAsJSON', JSON.stringify(multi_enumEntered));\n                multi_enumEntriesRender();\n            }\n            const itemSpacer = document.createElement('span');\n            itemSpacer.innerHTML = ', ';\n\n            multi_enumTdOther.appendChild(itemLink);\n\n            if (index < multi_enumEntered.length - 1) multi_enumTdOther.appendChild(itemSpacer);\n        }\n    }\n    multi_enumEntriesRender();\n\n    multi_enumTdInput.appendChild(multi_enumInput);\n\n    const multi_enumTr = document.createElement('tr');\n    multi_enumTr.appendChild(multi_enumTdKey);\n    multi_enumTr.appendChild(multi_enumTdInput);\n    multi_enumTr.appendChild(multi_enumTdOther);\n\n    tbody.appendChild(multi_enumTr);\n\n",
        "vars": {
            "multi_enum": "field"
        }
    },
    "browser1_to_input_tbody_str": {
        "name": "browser1_to_input_tbody_str",
        "text": "    //\n    // single_string - str\n    //\n\n    const single_stringTdKey = document.createElement('td');\n    single_stringTdKey.textContent = 'single_string';\n\n    const single_stringTdInput = document.createElement('td');\n    const single_stringInput = document.createElement('input');\n    single_stringInput.name = 'single_string';\n    single_stringInput.value = data.single_string || '';\n    single_stringInput.size = 35;\n    single_stringTdInput.appendChild(single_stringInput);\n\n    const single_stringTdOther = document.createElement('td');\n    single_stringTdOther.textContent = '-';\n\n    const single_stringTr = document.createElement('tr');\n    single_stringTr.appendChild(single_stringTdKey);\n    single_stringTr.appendChild(single_stringTdInput);\n    single_stringTr.appendChild(single_stringTdOther);\n\n    tbody.appendChild(single_stringTr);\n\n",
        "vars": {
            "single_string": "field"
        }
    },
    "browser1_to_input_tbody_str_enum": {
        "name": "browser1_to_input_tbody_str_enum",
        "text": "    //\n    // single_enum - enum\n    //\n\n    const single_enumTdKey = document.createElement('td');\n    single_enumTdKey.textContent = 'single_enum';\n\n    const single_enumTdInput = document.createElement('td');\n    const single_enumInput = document.createElement('select');\n    single_enumInput.name = 'single_enum';\n    for (const option of single_enum_options) {\n        const single_enumOption = document.createElement('option');\n        single_enumOption.value = option;\n        single_enumOption.textContent = option;\n        if (option === data.single_enum) {\n            single_enumOption.selected = true;\n        }\n        single_enumInput.appendChild(single_enumOption);\n    }\n    single_enumTdInput.appendChild(single_enumInput);\n\n    const single_enumTdOther = document.createElement('td');\n    single_enumTdOther.textContent = '-';\n\n    const single_enumTr = document.createElement('tr');\n    single_enumTr.appendChild(single_enumTdKey);\n    single_enumTr.appendChild(single_enumTdInput);\n    single_enumTr.appendChild(single_enumTdOther);\n\n    tbody.appendChild(single_enumTr);\n\n",
        "vars": {
            "single_enum": "field"
        }
    },
    "browser1_to_input_tbody_user_id": {
        "name": "browser1_to_input_tbody_user_id",
        "text": "    //\n    // user_id - str\n    //\n\n    const user_idTdKey = document.createElement('td');\n    user_idTdKey.textContent = 'user_id';\n\n    const user_idTdInput = document.createElement('td');\n    const user_idInput = document.createElement('input');\n    user_idInput.name = 'user_id';\n    user_idInput.value = data.user_id || '';\n    user_idInput.size = 35;\n    user_idInput.readOnly = true;\n    user_idInput.placeholder = 'automatic field';\n    user_idTdInput.appendChild(user_idInput);\n\n    const user_idTdOther = document.createElement('td');\n    user_idTdOther.textContent = 'automatic field, not editable';\n\n    const user_idTr = document.createElement('tr');\n    user_idTr.appendChild(user_idTdKey);\n    user_idTr.appendChild(user_idTdInput);\n    user_idTr.appendChild(user_idTdOther);\n\n    tbody.appendChild(user_idTr);\n\n",
        "vars": {}
    },
    "browser1_to_table_row_bool": {
        "name": "browser1_to_table_row_bool",
        "text": "    //\n    // single_bool - bool\n    //\n\n    const single_boolTd = document.createElement('td');\n    single_boolTd.textContent = (data.single_bool) ? 'yes' : 'no';\n    tr.appendChild(single_boolTd);\n\n",
        "vars": {
            "single_bool": "field"
        }
    },
    "browser1_to_table_row_datetime": {
        "name": "browser1_to_table_row_datetime",
        "text": "    //\n    // single_datetime - datetime\n    //\n    \n    const single_datetimeTd = document.createElement('td');\n    single_datetimeTd.textContent = data.single_datetime.toISOString().split('.')[0];\n    tr.appendChild(single_datetimeTd);\n",
        "vars": {
            "single_datetime": "field"
        }
    },
    "browser1_to_table_row_float": {
        "name": "browser1_to_table_row_float",
        "text": "    //\n    // single_float - float\n    //\n\n    const single_floatTd = document.createElement('td');\n    single_floatTd.textContent = data.single_float;\n    tr.appendChild(single_floatTd);\n\n",
        "vars": {
            "single_float": "field"
        }
    },
    "browser1_to_table_row_int": {
        "name": "browser1_to_table_row_int",
        "text": "    // \n    // single_int - int\n    //\n\n    const single_intTd = document.createElement('td');\n    single_intTd.textContent = data.single_int;\n    tr.appendChild(single_intTd);\n\n",
        "vars": {
            "single_int": "field"
        }
    },
    "browser1_to_table_row_list_bool": {
        "name": "browser1_to_table_row_list_bool",
        "text": "    //\n    // multi_bool - list of bool\n    //\n\n    const multi_boolTd = document.createElement('td');\n    multi_boolTd.textContent = data.multi_bool.join(', ');\n    tr.appendChild(multi_boolTd);\n\n",
        "vars": {
            "multi_bool": "field"
        }
    },
    "browser1_to_table_row_list_datetime": {
        "name": "browser1_to_table_row_list_datetime",
        "text": "    //\n    // multi_datetime - list of datetime\n    //\n\n    const multi_datetimeTd = document.createElement('td');\n    multi_datetimeTd.textContent = data.multi_datetime.map(d => d.toISOString().split('.')[0]).join(', ');\n    tr.appendChild(multi_datetimeTd);\n",
        "vars": {
            "multi_datetime": "field"
        }
    },
    "browser1_to_table_row_list_float": {
        "name": "browser1_to_table_row_list_float",
        "text": "    //\n    // multi_float - list of float\n    //\n\n    const multi_floatTd = document.createElement('td');\n    multi_floatTd.textContent = data.multi_float.join(', ');\n    tr.appendChild(multi_floatTd);\n\n",
        "vars": {
            "multi_float": "field"
        }
    },
    "browser1_to_table_row_list_int": {
        "name": "browser1_to_table_row_list_int",
        "text": "    //\n    // multi_int - list of int\n    //\n\n    const multi_intTd = document.createElement('td');\n    multi_intTd.textContent = data.multi_int.join(', ');\n    tr.appendChild(multi_intTd);\n\n",
        "vars": {
            "multi_int": "field"
        }
    },
    "browser1_to_table_row_list_str": {
        "name": "browser1_to_table_row_list_str",
        "text": "    //\n    // multi_string - list of str\n    //\n\n    const multi_stringTd = document.createElement('td');\n    multi_stringTd.textContent = data.multi_string.join(', ');\n    tr.appendChild(multi_stringTd);\n\n",
        "vars": {
            "multi_string": "field"
        }
    },
    "browser1_to_table_row_list_str_enum": {
        "name": "browser1_to_table_row_list_str_enum",
        "text": "    //\n    // multi_enum - list of enum\n    //\n\n    const multi_enumTd = document.createElement('td');\n    multi_enumTd.textContent = data.multi_enum.join(', ');\n    tr.appendChild(multi_enumTd);\n\n",
        "vars": {
            "multi_enum": "field"
        }
    },
    "browser1_to_table_row_str": {
        "name": "browser1_to_table_row_str",
        "text": "    //\n    // single_string - str\n    //\n\n    const single_stringTd = document.createElement('td');\n    single_stringTd.textContent = data.single_string;\n    tr.appendChild(single_stringTd);\n\n",
        "vars": {
            "single_string": "field"
        }
    },
    "browser1_to_table_row_str_enum": {
        "name": "browser1_to_table_row_str_enum",
        "text": "    //\n    // single_enum - enum\n    //\n\n    const single_enumTd = document.createElement('td');\n    single_enumTd.textContent = data.single_enum;\n    tr.appendChild(single_enumTd);\n\n",
        "vars": {
            "single_enum": "field"
        }
    },
    "browser1_to_table_row_user_id": {
        "name": "browser1_to_table_row_user_id",
        "text": "    //\n    // user_id - str\n    //\n    \n    const user_idTd = document.createElement('td');\n    user_idTd.textContent = data.user_id;\n    tr.appendChild(user_idTd);\n",
        "vars": {}
    },
    "browser1_unittest_form_bool": {
        "name": "browser1_unittest_form_bool",
        "text": "    // single_bool\n    await page.locator('input[name=\"single_bool\"]').check();\n    textToContain.push('yes');\n\n",
        "vars": {
            "__ignored__": "value",
            "single_bool": "field"
        }
    },
    "browser1_unittest_form_datetime": {
        "name": "browser1_unittest_form_datetime",
        "text": "    // single_datetime\n    await page.locator('input[name=\"single_datetime\"]').click();\n    await page.locator('input[name=\"single_datetime\"]').fill('2020-03-02T05:15');\n",
        "vars": {
            "2020-03-02T05:15": "value",
            "single_datetime": "field"
        }
    },
    "browser1_unittest_form_float": {
        "name": "browser1_unittest_form_float",
        "text": "    // single_float\n    await page.locator('input[name=\"single_float\"]').fill('3.33');\n    textToContain.push('3.33');\n\n",
        "vars": {
            "3.33": "value",
            "single_float": "field"
        }
    },
    "browser1_unittest_form_int": {
        "name": "browser1_unittest_form_int",
        "text": "    // single_int\n    await page.locator('input[name=\"single_int\"]').fill('55');\n    textToContain.push('55');\n\n",
        "vars": {
            "55": "value",
            "single_int": "field"
        }
    },
    "browser1_unittest_form_list_bool": {
        "name": "browser1_unittest_form_list_bool",
        "text": "    // multi_bool\n    await page.locator('input[name=\"multi_bool\"]').click();\n    await page.locator('input[name=\"multi_bool\"]').fill('true');\n    await page.locator('input[name=\"multi_bool\"]').press('Enter');\n    await page.locator('input[name=\"multi_bool\"]').fill('false');\n    await page.locator('input[name=\"multi_bool\"]').press('Enter');\n    textToContain.push('true, false');\n\n",
        "vars": {
            "false": "list_element_2",
            "multi_bool": "field",
            "true": "list_element_1"
        }
    },
    "browser1_unittest_form_list_datetime": {
        "name": "browser1_unittest_form_list_datetime",
        "text": "    // multi_datetime\n    await page.locator('input[name=\"multi_datetime\"]').click();\n    await page.locator('input[name=\"multi_datetime\"]').fill('2020-03-02T05:15');\n    await page.getByRole('button', { name: 'add' }).click();\n    await page.locator('input[name=\"multi_datetime\"]').fill('2022-11-22T12:45');\n    await page.getByRole('button', { name: 'add' }).click();\n",
        "vars": {
            "2020-03-02T05:15": "list_element_1",
            "2022-11-22T12:45": "list_element_2",
            "multi_datetime": "field"
        }
    },
    "browser1_unittest_form_list_float": {
        "name": "browser1_unittest_form_list_float",
        "text": "    // multi_float\n    await page.locator('input[name=\"multi_float\"]').click();\n    await page.locator('input[name=\"multi_float\"]').fill('1.4');\n    await page.locator('input[name=\"multi_float\"]').press('Enter');\n    await page.locator('input[name=\"multi_float\"]').fill('2.34578');\n    await page.locator('input[name=\"multi_float\"]').press('Enter');\n    textToContain.push('1.4, 2.34578');\n\n",
        "vars": {
            "1.4": "list_element_1",
            "2.34578": "list_element_2",
            "multi_float": "field"
        }
    },
    "browser1_unittest_form_list_int": {
        "name": "browser1_unittest_form_list_int",
        "text": "    // multi_int\n    await page.locator('input[name=\"multi_int\"]').click();\n    await page.locator('input[name=\"multi_int\"]').fill('1');\n    await page.locator('input[name=\"multi_int\"]').press('Enter');\n    await page.locator('input[name=\"multi_int\"]').fill('2');\n    await page.locator('input[name=\"multi_int\"]').press('Enter');\n    textToContain.push('1, 2');\n\n",
        "vars": {
            "1": "list_element_1",
            "2": "list_element_2",
            "multi_int": "field"
        }
    },
    "browser1_unittest_form_list_str": {
        "name": "browser1_unittest_form_list_str",
        "text": "    // multi_string\n    await page.locator('input[name=\"multi_string\"]').click();\n    await page.locator('input[name=\"multi_string\"]').fill('one');\n    await page.locator('input[name=\"multi_string\"]').press('Enter');\n    await page.locator('input[name=\"multi_string\"]').fill('two');\n    await page.locator('input[name=\"multi_string\"]').press('Enter');\n    textToContain.push('one, two');\n\n",
        "vars": {
            "multi_string": "field",
            "one": "list_element_1",
            "two": "list_element_2"
        }
    },
    "browser1_unittest_form_list_str_enum": {
        "name": "browser1_unittest_form_list_str_enum",
        "text": "    // multi_enum\n    await page.locator('select[name=\"multi_enum\"]').selectOption('zebra');\n    await page.locator('select[name=\"multi_enum\"]').selectOption('giraffe');\n    textToContain.push('zebra, giraffe');\n\n",
        "vars": {
            "giraffe": "list_element_2",
            "multi_enum": "field",
            "zebra": "list_element_1"
        }
    },
    "browser1_unittest_form_str": {
        "name": "browser1_unittest_form_str",
        "text": "    // single_string\n    await page.locator('input[name=\"single_string\"]').click();\n    await page.locator('input[name=\"single_string\"]').fill('this is a unittest');\n    textToContain.push('this is a unittest');\n\n",
        "vars": {
            "single_string": "field",
            "this is a unittest": "value"
        }
    },
    "browser1_unittest_form_str_enum": {
        "name": "browser1_unittest_form_str_enum",
        "text": "    // single_enum\n    await page.locator('select[name=\"single_enum\"]').selectOption('red');\n    textToContain.push('red');\n\n",
        "vars": {
            "red": "value",
            "single_enum": "field"
        }
    },
    "browser1_verify_bool": {
        "name": "browser1_verify_bool",
        "text": "    if (typeof data.single_bool !== 'boolean') {\n        result.error.single_bool = 'single_bool must be a boolean';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "single_bool": "field"
        }
    },
    "browser1_verify_datetime": {
        "name": "browser1_verify_datetime",
        "text": "    if (Object.prototype.toString.call(data.single_datetime) !== '[object Date]') {\n        result.error.single_datetime = 'single_datetime must be a datetime';\n        result.valid = false;\n    }\n",
        "vars": {
            "single_datetime": "field"
        }
    },
    "browser1_verify_float": {
        "name": "browser1_verify_float",
        "text": "    if (typeof data.single_float !== 'number') {\n        result.error.single_float = 'single_float must be a float';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "single_float": "field"
        }
    },
    "browser1_verify_int": {
        "name": "browser1_verify_int",
        "text": "    if (!Number.isInteger(data.single_int)) {\n        result.error.single_int = 'single_int must be an integer';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "single_int": "field"
        }
    },
    "browser1_verify_list_bool": {
        "name": "browser1_verify_list_bool",
        "text": "    if (!Array.isArray(data.multi_bool)) {\n        result.error.multi_bool = 'multi_bool must be an array';\n        result.valid = false;\n    }else if (data.multi_bool.some(item => typeof item !== 'boolean')) {\n        result.error.multi_bool = 'multi_bool must be an array with element type: boolean';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "multi_bool": "field"
        }
    },
    "browser1_verify_list_datetime": {
        "name": "browser1_verify_list_datetime",
        "text": "    if(!Array.isArray(data.multi_datetime)) {\n        result.error.multi_datetime = 'multi_datetime must be an array';\n        result.valid = false;\n    }else if (data.multi_datetime.some(item => Object.prototype.toString.call(item) !== '[object Date]')) {\n        result.error.multi_datetime = 'multi_datetime must be an array with element type: datetime';\n        result.valid = false;\n    }\n",
        "vars": {
            "multi_datetime": "field"
        }
    },
    "browser1_verify_list_float": {
        "name": "browser1_verify_list_float",
        "text": "    if (!Array.isArray(data.multi_float)) {\n        result.error.multi_float = 'multi_float must be an array';\n        result.valid = false;\n    }else if (data.multi_float.some(item => typeof item !== 'number')) {\n        result.error.multi_float = 'multi_float must be an array with element type: number';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "multi_float": "field"
        }
    },
    "browser1_verify_list_int": {
        "name": "browser1_verify_list_int",
        "text": "    if (!Array.isArray(data.multi_int)) {\n        result.error.multi_int = 'multi_int must be an array';\n        result.valid = false;\n    }else if (data.multi_int.some(item => typeof item !== 'number')) {\n        result.error.multi_int = 'multi_int must be an array with element type: number';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "multi_int": "field"
        }
    },
    "browser1_verify_list_str": {
        "name": "browser1_verify_list_str",
        "text": "    if (!Array.isArray(data.multi_string)) {\n        result.error.multi_string = 'multi_string must be an array';\n        result.valid = false;\n    }else if (data.multi_string.some(item => typeof item !== 'string')) {\n        result.error.multi_string = 'multi_string must be an array with element type: string';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "multi_string": "field"
        }
    },
    "browser1_verify_list_str_enum": {
        "name": "browser1_verify_list_str_enum",
        "text": "    if (!Array.isArray(data.multi_enum)) {\n        result.error.multi_enum = 'multi_enum must be an array';\n        result.valid = false;\n    }else if (data.multi_enum.some(item => typeof item !== 'string' || !multi_enum_options.includes(item))) {\n        \n        result.error.multi_enum = 'multi_enum elements must be strings from the predefined options';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "multi_enum": "field"
        }
    },
    "browser1_verify_str": {
        "name": "browser1_verify_str",
        "text": "    if (typeof data.single_string !== 'string') {\n        result.error.single_string = 'single_string must be a string';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "single_string": "field"
        }
    },
    "browser1_verify_str_enum": {
        "name": "browser1_verify_str_enum",
        "text": "    if (typeof data.single_enum !== 'string') {\n        result.error.single_enum = 'single_enum must be a string';\n        result.valid = false;\n    }else if (!single_enum_options.includes(data.single_enum)) {\n        result.error.single_enum = 'invalid single_enum';\n        result.valid = false;\n    }\n\n",
        "vars": {
            "single_enum": "field"
        }
    }
}