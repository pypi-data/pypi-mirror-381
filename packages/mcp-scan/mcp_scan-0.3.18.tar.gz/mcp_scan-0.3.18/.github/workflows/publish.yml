name: Publish to PyPI & Binaries

on:
  workflow_dispatch:


jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: macos-latest # ARM64 macOS (Mx)
            platform: macos
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Build binary
        run: |
          make binary

      - name: Get version
        id: get_version
        run: |
          version=$(uv run python -c "import sys; sys.path.insert(0, 'src'); import mcp_scan; print(mcp_scan.__version__)")
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Prepare binary for upload
        run: |
          if [ "${{ matrix.platform }}" = "macos" ]; then
            mv dist/mcp-scan dist/mcp-scan-${{ steps.get_version.outputs.version }}-macos-arm64
          else
            mv dist/mcp-scan dist/mcp-scan-${{ steps.get_version.outputs.version }}-linux-x86_64
          fi

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcp-scan-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/mcp-scan-*
          retention-days: 1

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
    - name: Create venv
      run: uv venv
    - name: Run tests
      run: make test
    - name: Publish PyPI
      run: make publish
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
    - name: Get Version
      id: get_version
      run: |
        version=$(uv run python -c "import mcp_scan; print(mcp_scan.__version__)")
        echo "version=$version" >> $GITHUB_OUTPUT
    - name: Tag release
      run: |
        git tag v${{ steps.get_version.outputs.version }}
        git push origin v${{ steps.get_version.outputs.version }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Organize binaries and generate checksums
      run: |
        mkdir -p release-assets

        # Move all binaries to release-assets directory
        find artifacts -name "mcp-scan-*" -type f -exec cp {} release-assets/ \;

        # Generate checksums
        cd release-assets
        sha256sum mcp-scan-* > checksums.txt
        cd ..

        # List what we have
        ls -la release-assets/

    - name: Create a release
      shell: bash
      run: |
        gh release create v${{ steps.get_version.outputs.version }} --title "MCP-Scan v${{ steps.get_version.outputs.version }}" release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
