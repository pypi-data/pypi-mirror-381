# coding: utf-8

"""
    Oliver API

    Oliver API service  # noqa: E501

    OpenAPI spec version: 4.5.8
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpeakerBehavioralEvents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emotion': 'list[SpeakerBehavioralEventsEmotion]',
        'strength': 'list[SpeakerBehavioralEventsStrength]',
        'positivity': 'list[SpeakerBehavioralEventsPositivity]',
        'engagement': 'list[SpeakerBehavioralEventsEngagement]',
        'politeness': 'list[SpeakerBehavioralEventsPoliteness]'
    }

    attribute_map = {
        'emotion': 'emotion',
        'strength': 'strength',
        'positivity': 'positivity',
        'engagement': 'engagement',
        'politeness': 'politeness'
    }

    def __init__(self, emotion=None, strength=None, positivity=None, engagement=None, politeness=None):  # noqa: E501
        """SpeakerBehavioralEvents - a model defined in Swagger"""  # noqa: E501
        self._emotion = None
        self._strength = None
        self._positivity = None
        self._engagement = None
        self._politeness = None
        self.discriminator = None
        if emotion is not None:
            self.emotion = emotion
        if strength is not None:
            self.strength = strength
        if positivity is not None:
            self.positivity = positivity
        if engagement is not None:
            self.engagement = engagement
        if politeness is not None:
            self.politeness = politeness

    @property
    def emotion(self):
        """Gets the emotion of this SpeakerBehavioralEvents.  # noqa: E501

        the array containing all events related to discrete emotions  # noqa: E501

        :return: The emotion of this SpeakerBehavioralEvents.  # noqa: E501
        :rtype: list[SpeakerBehavioralEventsEmotion]
        """
        return self._emotion

    @emotion.setter
    def emotion(self, emotion):
        """Sets the emotion of this SpeakerBehavioralEvents.

        the array containing all events related to discrete emotions  # noqa: E501

        :param emotion: The emotion of this SpeakerBehavioralEvents.  # noqa: E501
        :type: list[SpeakerBehavioralEventsEmotion]
        """

        self._emotion = emotion

    @property
    def strength(self):
        """Gets the strength of this SpeakerBehavioralEvents.  # noqa: E501

        the array containing all events related to activation  # noqa: E501

        :return: The strength of this SpeakerBehavioralEvents.  # noqa: E501
        :rtype: list[SpeakerBehavioralEventsStrength]
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this SpeakerBehavioralEvents.

        the array containing all events related to activation  # noqa: E501

        :param strength: The strength of this SpeakerBehavioralEvents.  # noqa: E501
        :type: list[SpeakerBehavioralEventsStrength]
        """

        self._strength = strength

    @property
    def positivity(self):
        """Gets the positivity of this SpeakerBehavioralEvents.  # noqa: E501

        the array containing all events related to positivity  # noqa: E501

        :return: The positivity of this SpeakerBehavioralEvents.  # noqa: E501
        :rtype: list[SpeakerBehavioralEventsPositivity]
        """
        return self._positivity

    @positivity.setter
    def positivity(self, positivity):
        """Sets the positivity of this SpeakerBehavioralEvents.

        the array containing all events related to positivity  # noqa: E501

        :param positivity: The positivity of this SpeakerBehavioralEvents.  # noqa: E501
        :type: list[SpeakerBehavioralEventsPositivity]
        """

        self._positivity = positivity

    @property
    def engagement(self):
        """Gets the engagement of this SpeakerBehavioralEvents.  # noqa: E501

        the array containing all events related to engagement  # noqa: E501

        :return: The engagement of this SpeakerBehavioralEvents.  # noqa: E501
        :rtype: list[SpeakerBehavioralEventsEngagement]
        """
        return self._engagement

    @engagement.setter
    def engagement(self, engagement):
        """Sets the engagement of this SpeakerBehavioralEvents.

        the array containing all events related to engagement  # noqa: E501

        :param engagement: The engagement of this SpeakerBehavioralEvents.  # noqa: E501
        :type: list[SpeakerBehavioralEventsEngagement]
        """

        self._engagement = engagement

    @property
    def politeness(self):
        """Gets the politeness of this SpeakerBehavioralEvents.  # noqa: E501

        the array containing all events related to politeness  # noqa: E501

        :return: The politeness of this SpeakerBehavioralEvents.  # noqa: E501
        :rtype: list[SpeakerBehavioralEventsPoliteness]
        """
        return self._politeness

    @politeness.setter
    def politeness(self, politeness):
        """Sets the politeness of this SpeakerBehavioralEvents.

        the array containing all events related to politeness  # noqa: E501

        :param politeness: The politeness of this SpeakerBehavioralEvents.  # noqa: E501
        :type: list[SpeakerBehavioralEventsPoliteness]
        """

        self._politeness = politeness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpeakerBehavioralEvents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpeakerBehavioralEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
