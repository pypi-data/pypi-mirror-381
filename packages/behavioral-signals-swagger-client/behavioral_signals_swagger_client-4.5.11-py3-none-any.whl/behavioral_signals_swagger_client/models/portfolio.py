# coding: utf-8

"""
    Oliver API

    Oliver API service  # noqa: E501

    OpenAPI spec version: 4.5.8
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Portfolio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'agents': 'ArrayOfPortfolioSpeakers',
        'customers': 'ArrayOfPortfolioSpeakers',
        'behavioral_skills': 'ArrayOfBehavioralSkillsIDs'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'agents': 'agents',
        'customers': 'customers',
        'behavioral_skills': 'behavioralSkills'
    }

    def __init__(self, id=None, description=None, agents=None, customers=None, behavioral_skills=None):  # noqa: E501
        """Portfolio - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._agents = None
        self._customers = None
        self._behavioral_skills = None
        self.discriminator = None
        self.id = id
        if description is not None:
            self.description = description
        self.agents = agents
        if customers is not None:
            self.customers = customers
        if behavioral_skills is not None:
            self.behavioral_skills = behavioral_skills

    @property
    def id(self):
        """Gets the id of this Portfolio.  # noqa: E501


        :return: The id of this Portfolio.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Portfolio.


        :param id: The id of this Portfolio.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Portfolio.  # noqa: E501


        :return: The description of this Portfolio.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Portfolio.


        :param description: The description of this Portfolio.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def agents(self):
        """Gets the agents of this Portfolio.  # noqa: E501


        :return: The agents of this Portfolio.  # noqa: E501
        :rtype: ArrayOfPortfolioSpeakers
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this Portfolio.


        :param agents: The agents of this Portfolio.  # noqa: E501
        :type: ArrayOfPortfolioSpeakers
        """
        if agents is None:
            raise ValueError("Invalid value for `agents`, must not be `None`")  # noqa: E501

        self._agents = agents

    @property
    def customers(self):
        """Gets the customers of this Portfolio.  # noqa: E501


        :return: The customers of this Portfolio.  # noqa: E501
        :rtype: ArrayOfPortfolioSpeakers
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this Portfolio.


        :param customers: The customers of this Portfolio.  # noqa: E501
        :type: ArrayOfPortfolioSpeakers
        """

        self._customers = customers

    @property
    def behavioral_skills(self):
        """Gets the behavioral_skills of this Portfolio.  # noqa: E501


        :return: The behavioral_skills of this Portfolio.  # noqa: E501
        :rtype: ArrayOfBehavioralSkillsIDs
        """
        return self._behavioral_skills

    @behavioral_skills.setter
    def behavioral_skills(self, behavioral_skills):
        """Sets the behavioral_skills of this Portfolio.


        :param behavioral_skills: The behavioral_skills of this Portfolio.  # noqa: E501
        :type: ArrayOfBehavioralSkillsIDs
        """

        self._behavioral_skills = behavioral_skills

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Portfolio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Portfolio):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
