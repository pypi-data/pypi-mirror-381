# coding: utf-8

"""
    Oliver API

    Oliver API service  # noqa: E501

    OpenAPI spec version: 4.5.8
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from behavioral_signals_swagger_client.api_client import ApiClient


class AdministrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def client_auth(self, x_auth_client, **kwargs):  # noqa: E501
        """client_auth  # noqa: E501

        Authenticates a client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_auth(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int x_auth_client: id of the requested client (required)
        :return: Authorized
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_auth_with_http_info(x_auth_client, **kwargs)  # noqa: E501
        else:
            (data) = self.client_auth_with_http_info(x_auth_client, **kwargs)  # noqa: E501
            return data

    def client_auth_with_http_info(self, x_auth_client, **kwargs):  # noqa: E501
        """client_auth  # noqa: E501

        Authenticates a client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_auth_with_http_info(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int x_auth_client: id of the requested client (required)
        :return: Authorized
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_auth_client']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_auth_client' is set
        if ('x_auth_client' not in params or
                params['x_auth_client'] is None):
            raise ValueError("Missing the required parameter `x_auth_client` when calling `client_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_client' in params:
            header_params['X-Auth-Client'] = params['x_auth_client']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Authorized',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client(self, x_auth_client, **kwargs):  # noqa: E501
        """create_client  # noqa: E501

        Create a new client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :param Client body: The client to create
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_with_http_info(x_auth_client, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_with_http_info(x_auth_client, **kwargs)  # noqa: E501
            return data

    def create_client_with_http_info(self, x_auth_client, **kwargs):  # noqa: E501
        """create_client  # noqa: E501

        Create a new client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_with_http_info(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :param Client body: The client to create
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_auth_client', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_auth_client' is set
        if ('x_auth_client' not in params or
                params['x_auth_client'] is None):
            raise ValueError("Missing the required parameter `x_auth_client` when calling `create_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_client' in params:
            header_params['X-Auth-Client'] = params['x_auth_client']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client(self, cid, x_auth_client, **kwargs):  # noqa: E501
        """delete_client  # noqa: E501

        Delete a client with given cid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client(cid, x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: id of the requested client (required)
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_with_http_info(cid, x_auth_client, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_with_http_info(cid, x_auth_client, **kwargs)  # noqa: E501
            return data

    def delete_client_with_http_info(self, cid, x_auth_client, **kwargs):  # noqa: E501
        """delete_client  # noqa: E501

        Delete a client with given cid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_with_http_info(cid, x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: id of the requested client (required)
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'x_auth_client']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_client`")  # noqa: E501
        # verify the required parameter 'x_auth_client' is set
        if ('x_auth_client' not in params or
                params['x_auth_client'] is None):
            raise ValueError("Missing the required parameter `x_auth_client` when calling `delete_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_auth_client' in params:
            header_params['X-Auth-Client'] = params['x_auth_client']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_clients(self, x_auth_client, **kwargs):  # noqa: E501
        """get_clients  # noqa: E501

        Get list of clients  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clients(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :return: Clients
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_clients_with_http_info(x_auth_client, **kwargs)  # noqa: E501
        else:
            (data) = self.get_clients_with_http_info(x_auth_client, **kwargs)  # noqa: E501
            return data

    def get_clients_with_http_info(self, x_auth_client, **kwargs):  # noqa: E501
        """get_clients  # noqa: E501

        Get list of clients  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_clients_with_http_info(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :return: Clients
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_auth_client']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_auth_client' is set
        if ('x_auth_client' not in params or
                params['x_auth_client'] is None):
            raise ValueError("Missing the required parameter `x_auth_client` when calling `get_clients`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_client' in params:
            header_params['X-Auth-Client'] = params['x_auth_client']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Clients',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def info_client(self, cid, **kwargs):  # noqa: E501
        """info_client  # noqa: E501

        Return a client's details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_client(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: id of the requested client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.info_client_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.info_client_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def info_client_with_http_info(self, cid, **kwargs):  # noqa: E501
        """info_client  # noqa: E501

        Return a client's details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_client_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: id of the requested client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `info_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_token(self, x_auth_client, **kwargs):  # noqa: E501
        """modify_token  # noqa: E501

        Inserts/Updates a token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_token(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :param Token body: The token to add/update
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_token_with_http_info(x_auth_client, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_token_with_http_info(x_auth_client, **kwargs)  # noqa: E501
            return data

    def modify_token_with_http_info(self, x_auth_client, **kwargs):  # noqa: E501
        """modify_token  # noqa: E501

        Inserts/Updates a token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_token_with_http_info(x_auth_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_client: The client id that is authorized to do this task (required)
        :param Token body: The token to add/update
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_auth_client', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_auth_client' is set
        if ('x_auth_client' not in params or
                params['x_auth_client'] is None):
            raise ValueError("Missing the required parameter `x_auth_client` when calling `modify_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_auth_client' in params:
            header_params['X-Auth-Client'] = params['x_auth_client']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/tokens', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Token',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client(self, body, cid, **kwargs):  # noqa: E501
        """update_client  # noqa: E501

        Update client properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client(body, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientUpdateRequest body: Client properties to update (required)
        :param int cid: ID of the client to update (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_with_http_info(body, cid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_with_http_info(body, cid, **kwargs)  # noqa: E501
            return data

    def update_client_with_http_info(self, body, cid, **kwargs):  # noqa: E501
        """update_client  # noqa: E501

        Update client properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_with_http_info(body, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientUpdateRequest body: Client properties to update (required)
        :param int cid: ID of the client to update (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
