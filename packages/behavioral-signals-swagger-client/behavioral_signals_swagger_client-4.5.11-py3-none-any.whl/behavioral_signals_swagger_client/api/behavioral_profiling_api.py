# coding: utf-8

"""
    Oliver API

    Oliver API service  # noqa: E501

    OpenAPI spec version: 4.5.8
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from behavioral_signals_swagger_client.api_client import ApiClient


class BehavioralProfilingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_customer_to_portfolio(self, body, cid, portfolio_id, **kwargs):  # noqa: E501
        """add_customer_to_portfolio  # noqa: E501

        Add a customer to a portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_customer_to_portfolio(body, cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The ID of the customer to add to the portfolio (required)
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_customer_to_portfolio_with_http_info(body, cid, portfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_customer_to_portfolio_with_http_info(body, cid, portfolio_id, **kwargs)  # noqa: E501
            return data

    def add_customer_to_portfolio_with_http_info(self, body, cid, portfolio_id, **kwargs):  # noqa: E501
        """add_customer_to_portfolio  # noqa: E501

        Add a customer to a portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_customer_to_portfolio_with_http_info(body, cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The ID of the customer to add to the portfolio (required)
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid', 'portfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_customer_to_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_customer_to_portfolio`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `add_customer_to_portfolio`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `add_customer_to_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'portfolio_id' in params:
            path_params['portfolioId'] = params['portfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/portfolios/{portfolioId}/customers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Portfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_portfolio_to_agent(self, body, cid, agent_id, **kwargs):  # noqa: E501
        """add_portfolio_to_agent  # noqa: E501

        Add a portfolio to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_portfolio_to_agent(body, cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The ID of the portfolio to add to the agent (required)
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_portfolio_to_agent_with_http_info(body, cid, agent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_portfolio_to_agent_with_http_info(body, cid, agent_id, **kwargs)  # noqa: E501
            return data

    def add_portfolio_to_agent_with_http_info(self, body, cid, agent_id, **kwargs):  # noqa: E501
        """add_portfolio_to_agent  # noqa: E501

        Add a portfolio to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_portfolio_to_agent_with_http_info(body, cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The ID of the portfolio to add to the agent (required)
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid', 'agent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_portfolio_to_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_portfolio_to_agent`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `add_portfolio_to_agent`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `add_portfolio_to_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'agent_id' in params:
            path_params['agentId'] = params['agent_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/agents/{agentId}/portfolios', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Agent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_portfolio(self, body, cid, **kwargs):  # noqa: E501
        """create_portfolio  # noqa: E501

        Create a new client portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portfolio(body, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Portfolio body: The portfolio to create (required)
        :param int cid: ID of client giving request (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_portfolio_with_http_info(body, cid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_portfolio_with_http_info(body, cid, **kwargs)  # noqa: E501
            return data

    def create_portfolio_with_http_info(self, body, cid, **kwargs):  # noqa: E501
        """create_portfolio  # noqa: E501

        Create a new client portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portfolio_with_http_info(body, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Portfolio body: The portfolio to create (required)
        :param int cid: ID of client giving request (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_portfolio`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `create_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/portfolios', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Portfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_agent(self, cid, agent_id, **kwargs):  # noqa: E501
        """delete_agent  # noqa: E501

        Delete an agent and all the resource related to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_agent(cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_agent_with_http_info(cid, agent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_agent_with_http_info(cid, agent_id, **kwargs)  # noqa: E501
            return data

    def delete_agent_with_http_info(self, cid, agent_id, **kwargs):  # noqa: E501
        """delete_agent  # noqa: E501

        Delete an agent and all the resource related to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_agent_with_http_info(cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'agent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_agent`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `delete_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'agent_id' in params:
            path_params['agentId'] = params['agent_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/agents/{agentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customer(self, cid, customer_id, **kwargs):  # noqa: E501
        """delete_customer  # noqa: E501

        Delete a customer and all the resource related to the customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer(cid, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str customer_id: ID of customer (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customer_with_http_info(cid, customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customer_with_http_info(cid, customer_id, **kwargs)  # noqa: E501
            return data

    def delete_customer_with_http_info(self, cid, customer_id, **kwargs):  # noqa: E501
        """delete_customer  # noqa: E501

        Delete a customer and all the resource related to the customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_with_http_info(cid, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str customer_id: ID of customer (required)
        :return: SuccessResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `delete_customer`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/customers/{customerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_agent(self, cid, agent_id, **kwargs):  # noqa: E501
        """get_agent  # noqa: E501

        Returns a single agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent(cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_agent_with_http_info(cid, agent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_agent_with_http_info(cid, agent_id, **kwargs)  # noqa: E501
            return data

    def get_agent_with_http_info(self, cid, agent_id, **kwargs):  # noqa: E501
        """get_agent  # noqa: E501

        Returns a single agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_with_http_info(cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'agent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_agent`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `get_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'agent_id' in params:
            path_params['agentId'] = params['agent_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/agents/{agentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Agent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_agents(self, cid, **kwargs):  # noqa: E501
        """get_agents  # noqa: E501

        Returns agents of a client on date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agents(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime start_date: start date-time to select active agents from
        :param datetime end_date: end date-time to select active agents too
        :return: ArrayOfAgents
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_agents_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_agents_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def get_agents_with_http_info(self, cid, **kwargs):  # noqa: E501
        """get_agents  # noqa: E501

        Returns agents of a client on date range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agents_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime start_date: start date-time to select active agents from
        :param datetime end_date: end date-time to select active agents too
        :return: ArrayOfAgents
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_agents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/agents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfAgents',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_portfolios(self, cid, **kwargs):  # noqa: E501
        """get_all_portfolios  # noqa: E501

        Return a client's portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_portfolios(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :return: ArrayOfPortfolioIds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_portfolios_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_portfolios_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def get_all_portfolios_with_http_info(self, cid, **kwargs):  # noqa: E501
        """get_all_portfolios  # noqa: E501

        Return a client's portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_portfolios_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :return: ArrayOfPortfolioIds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_portfolios" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_all_portfolios`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/portfolios', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfPortfolioIds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_behavioral_skill(self, cid, behavioral_skill_id, **kwargs):  # noqa: E501
        """get_behavioral_skill  # noqa: E501

        Returns a single behavioral skill  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_behavioral_skill(cid, behavioral_skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str behavioral_skill_id: ID of behavioral skill (required)
        :return: BehavioralSkill
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_behavioral_skill_with_http_info(cid, behavioral_skill_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_behavioral_skill_with_http_info(cid, behavioral_skill_id, **kwargs)  # noqa: E501
            return data

    def get_behavioral_skill_with_http_info(self, cid, behavioral_skill_id, **kwargs):  # noqa: E501
        """get_behavioral_skill  # noqa: E501

        Returns a single behavioral skill  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_behavioral_skill_with_http_info(cid, behavioral_skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str behavioral_skill_id: ID of behavioral skill (required)
        :return: BehavioralSkill
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'behavioral_skill_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_behavioral_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_behavioral_skill`")  # noqa: E501
        # verify the required parameter 'behavioral_skill_id' is set
        if ('behavioral_skill_id' not in params or
                params['behavioral_skill_id'] is None):
            raise ValueError("Missing the required parameter `behavioral_skill_id` when calling `get_behavioral_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'behavioral_skill_id' in params:
            path_params['behavioralSkillId'] = params['behavioral_skill_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/behavioralSkills/{behavioralSkillId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BehavioralSkill',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_behavioral_skills(self, cid, **kwargs):  # noqa: E501
        """get_behavioral_skills  # noqa: E501

        Returns behavioral skills  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_behavioral_skills(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime since: Selects behavioral skills updated since datetime
        :return: ArrayOfBehavioralSkills
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_behavioral_skills_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_behavioral_skills_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def get_behavioral_skills_with_http_info(self, cid, **kwargs):  # noqa: E501
        """get_behavioral_skills  # noqa: E501

        Returns behavioral skills  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_behavioral_skills_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime since: Selects behavioral skills updated since datetime
        :return: ArrayOfBehavioralSkills
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_behavioral_skills" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_behavioral_skills`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/behavioralSkills', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfBehavioralSkills',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer(self, cid, customer_id, **kwargs):  # noqa: E501
        """get_customer  # noqa: E501

        Returns a single customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer(cid, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str customer_id: ID of customer (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_with_http_info(cid, customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_with_http_info(cid, customer_id, **kwargs)  # noqa: E501
            return data

    def get_customer_with_http_info(self, cid, customer_id, **kwargs):  # noqa: E501
        """get_customer  # noqa: E501

        Returns a single customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_with_http_info(cid, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str customer_id: ID of customer (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_customer`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/customers/{customerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Customer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customers(self, cid, **kwargs):  # noqa: E501
        """get_customers  # noqa: E501

        Returns customers of a client filtered by date range / portfolio / routing strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customers(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime start_date: start date-time to select active customers from
        :param datetime end_date: end date-time to select active customers up to
        :param str portfolio_id: filter by portfolio id
        :param str routing_strategy: filter by routing strategy (e.g. bau, aimc)
        :param str field_set: Select which fields to return; \"all\" returns all fields, \"ids\" returns only the id column
        :return: ArrayOfCustomers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customers_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customers_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def get_customers_with_http_info(self, cid, **kwargs):  # noqa: E501
        """get_customers  # noqa: E501

        Returns customers of a client filtered by date range / portfolio / routing strategy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customers_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime start_date: start date-time to select active customers from
        :param datetime end_date: end date-time to select active customers up to
        :param str portfolio_id: filter by portfolio id
        :param str routing_strategy: filter by routing strategy (e.g. bau, aimc)
        :param str field_set: Select which fields to return; \"all\" returns all fields, \"ids\" returns only the id column
        :return: ArrayOfCustomers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'start_date', 'end_date', 'portfolio_id', 'routing_strategy', 'field_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_customers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'portfolio_id' in params:
            query_params.append(('portfolio_id', params['portfolio_id']))  # noqa: E501
        if 'routing_strategy' in params:
            query_params.append(('routing_strategy', params['routing_strategy']))  # noqa: E501
        if 'field_set' in params:
            query_params.append(('field_set', params['field_set']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/customers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfCustomers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portfolio(self, cid, portfolio_id, **kwargs):  # noqa: E501
        """get_portfolio  # noqa: E501

        Return a client's portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio(cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portfolio_with_http_info(cid, portfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portfolio_with_http_info(cid, portfolio_id, **kwargs)  # noqa: E501
            return data

    def get_portfolio_with_http_info(self, cid, portfolio_id, **kwargs):  # noqa: E501
        """get_portfolio  # noqa: E501

        Return a client's portfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_with_http_info(cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'portfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_portfolio`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `get_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'portfolio_id' in params:
            path_params['portfolioId'] = params['portfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/portfolios/{portfolioId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Portfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_agent_portfolio_list(self, body, cid, agent_id, **kwargs):  # noqa: E501
        """modify_agent_portfolio_list  # noqa: E501

        Modify the list of the agent portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_agent_portfolio_list(body, cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[IdPatch] body: The requested modifications to the agent portfolio list (required)
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_agent_portfolio_list_with_http_info(body, cid, agent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_agent_portfolio_list_with_http_info(body, cid, agent_id, **kwargs)  # noqa: E501
            return data

    def modify_agent_portfolio_list_with_http_info(self, body, cid, agent_id, **kwargs):  # noqa: E501
        """modify_agent_portfolio_list  # noqa: E501

        Modify the list of the agent portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_agent_portfolio_list_with_http_info(body, cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[IdPatch] body: The requested modifications to the agent portfolio list (required)
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid', 'agent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_agent_portfolio_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_agent_portfolio_list`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_agent_portfolio_list`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `modify_agent_portfolio_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'agent_id' in params:
            path_params['agentId'] = params['agent_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/agents/{agentId}/portfolios', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Agent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_portfolio_agent_list(self, body, cid, portfolio_id, **kwargs):  # noqa: E501
        """modify_portfolio_agent_list  # noqa: E501

        Modify the list of the portfolio agents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_portfolio_agent_list(body, cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[IdPatch] body: The requested modifications to the portfolio agent list (required)
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_portfolio_agent_list_with_http_info(body, cid, portfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_portfolio_agent_list_with_http_info(body, cid, portfolio_id, **kwargs)  # noqa: E501
            return data

    def modify_portfolio_agent_list_with_http_info(self, body, cid, portfolio_id, **kwargs):  # noqa: E501
        """modify_portfolio_agent_list  # noqa: E501

        Modify the list of the portfolio agents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_portfolio_agent_list_with_http_info(body, cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[IdPatch] body: The requested modifications to the portfolio agent list (required)
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid', 'portfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_portfolio_agent_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_portfolio_agent_list`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `modify_portfolio_agent_list`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `modify_portfolio_agent_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'portfolio_id' in params:
            path_params['portfolioId'] = params['portfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/portfolios/{portfolioId}/agents', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Portfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_portfolio_from_agent(self, cid, agent_id, portfolio_id, **kwargs):  # noqa: E501
        """remove_portfolio_from_agent  # noqa: E501

        Remove a portfolio from an agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_portfolio_from_agent(cid, agent_id, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_portfolio_from_agent_with_http_info(cid, agent_id, portfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_portfolio_from_agent_with_http_info(cid, agent_id, portfolio_id, **kwargs)  # noqa: E501
            return data

    def remove_portfolio_from_agent_with_http_info(self, cid, agent_id, portfolio_id, **kwargs):  # noqa: E501
        """remove_portfolio_from_agent  # noqa: E501

        Remove a portfolio from an agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_portfolio_from_agent_with_http_info(cid, agent_id, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'agent_id', 'portfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_portfolio_from_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `remove_portfolio_from_agent`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `remove_portfolio_from_agent`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `remove_portfolio_from_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'agent_id' in params:
            path_params['agentId'] = params['agent_id']  # noqa: E501
        if 'portfolio_id' in params:
            path_params['portfolioId'] = params['portfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/agents/{agentId}/portfolios/{portfolioId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Agent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_agent_portfolio_list(self, body, cid, agent_id, **kwargs):  # noqa: E501
        """update_agent_portfolio_list  # noqa: E501

        Update the list of the agent portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_agent_portfolio_list(body, cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PortfolioId] body: The updated agent portfolio list (required)
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_agent_portfolio_list_with_http_info(body, cid, agent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_agent_portfolio_list_with_http_info(body, cid, agent_id, **kwargs)  # noqa: E501
            return data

    def update_agent_portfolio_list_with_http_info(self, body, cid, agent_id, **kwargs):  # noqa: E501
        """update_agent_portfolio_list  # noqa: E501

        Update the list of the agent portfolios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_agent_portfolio_list_with_http_info(body, cid, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PortfolioId] body: The updated agent portfolio list (required)
        :param int cid: ID of client giving request (required)
        :param str agent_id: ID of agent (required)
        :return: Agent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid', 'agent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_agent_portfolio_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_agent_portfolio_list`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_agent_portfolio_list`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `update_agent_portfolio_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'agent_id' in params:
            path_params['agentId'] = params['agent_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/agents/{agentId}/portfolios', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Agent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_behavioral_skills(self, skill_level_exists, cid, **kwargs):  # noqa: E501
        """update_behavioral_skills  # noqa: E501

        Update behavioral skills  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_behavioral_skills(skill_level_exists, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_level_exists: Whether BPP-API should consider the skill levels provided in the request (required)
        :param int cid: ID of client giving request (required)
        :param list[BehavioralSkillAssociations] body: List of behavioral skills to update
        :return: ArrayOfBehavioralSkills
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_behavioral_skills_with_http_info(skill_level_exists, cid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_behavioral_skills_with_http_info(skill_level_exists, cid, **kwargs)  # noqa: E501
            return data

    def update_behavioral_skills_with_http_info(self, skill_level_exists, cid, **kwargs):  # noqa: E501
        """update_behavioral_skills  # noqa: E501

        Update behavioral skills  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_behavioral_skills_with_http_info(skill_level_exists, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_level_exists: Whether BPP-API should consider the skill levels provided in the request (required)
        :param int cid: ID of client giving request (required)
        :param list[BehavioralSkillAssociations] body: List of behavioral skills to update
        :return: ArrayOfBehavioralSkills
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skill_level_exists', 'cid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_behavioral_skills" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'skill_level_exists' is set
        if ('skill_level_exists' not in params or
                params['skill_level_exists'] is None):
            raise ValueError("Missing the required parameter `skill_level_exists` when calling `update_behavioral_skills`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_behavioral_skills`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'skill_level_exists' in params:
            query_params.append(('skill_level_exists', params['skill_level_exists']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/behavioralSkills', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfBehavioralSkills',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portfolio_agent_list(self, body, cid, portfolio_id, **kwargs):  # noqa: E501
        """update_portfolio_agent_list  # noqa: E501

        Update the list of the portfolio agents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_agent_list(body, cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PortfolioSpeaker] body: The updated portfolio agent list (required)
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portfolio_agent_list_with_http_info(body, cid, portfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portfolio_agent_list_with_http_info(body, cid, portfolio_id, **kwargs)  # noqa: E501
            return data

    def update_portfolio_agent_list_with_http_info(self, body, cid, portfolio_id, **kwargs):  # noqa: E501
        """update_portfolio_agent_list  # noqa: E501

        Update the list of the portfolio agents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_agent_list_with_http_info(body, cid, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PortfolioSpeaker] body: The updated portfolio agent list (required)
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :return: Portfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid', 'portfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portfolio_agent_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_portfolio_agent_list`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_portfolio_agent_list`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `update_portfolio_agent_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'portfolio_id' in params:
            path_params['portfolioId'] = params['portfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/portfolios/{portfolioId}/agents', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Portfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
