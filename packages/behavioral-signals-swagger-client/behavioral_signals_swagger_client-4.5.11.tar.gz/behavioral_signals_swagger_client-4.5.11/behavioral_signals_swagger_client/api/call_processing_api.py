# coding: utf-8

"""
    Oliver API

    Oliver API service  # noqa: E501

    OpenAPI spec version: 4.5.8
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from behavioral_signals_swagger_client.api_client import ApiClient


class CallProcessingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_processes(self, cid, **kwargs):  # noqa: E501
        """get_all_processes  # noqa: E501

        Returns a page of processes for a client using cursor pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_processes(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime start_date: Filter processes starting from this date (inclusive)
        :param datetime end_date: Filter processes ending before this date (inclusive)
        :param str outcome: Filter processes by call outcome
        :param float min_duration: Filter processes with duration greater than or equal to this value (in seconds)
        :param float max_duration: Filter processes with duration less than or equal to this value (in seconds)
        :param int status: Filter processes by processing status. Values:   •  0 = pending   •  1 = processing   •  2 = completed   • –1 = failed   • –2 = aborted 
        :param int limit: Maximum number of processes to return
        :param int cursor: Cursor for keyset pagination. This should be set to the 'nextCursor' value from the previous response. For the first page, omit this parameter. 
        :param str field_set: Specifies the set of fields to include in the response. Current choices are: 'all' (all fields) and 'grouping' ('pid', 'customer_id', 'agent_id', 'meta' fields) 
        :return: PaginatedProcesses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_processes_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_processes_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def get_all_processes_with_http_info(self, cid, **kwargs):  # noqa: E501
        """get_all_processes  # noqa: E501

        Returns a page of processes for a client using cursor pagination  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_processes_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param datetime start_date: Filter processes starting from this date (inclusive)
        :param datetime end_date: Filter processes ending before this date (inclusive)
        :param str outcome: Filter processes by call outcome
        :param float min_duration: Filter processes with duration greater than or equal to this value (in seconds)
        :param float max_duration: Filter processes with duration less than or equal to this value (in seconds)
        :param int status: Filter processes by processing status. Values:   •  0 = pending   •  1 = processing   •  2 = completed   • –1 = failed   • –2 = aborted 
        :param int limit: Maximum number of processes to return
        :param int cursor: Cursor for keyset pagination. This should be set to the 'nextCursor' value from the previous response. For the first page, omit this parameter. 
        :param str field_set: Specifies the set of fields to include in the response. Current choices are: 'all' (all fields) and 'grouping' ('pid', 'customer_id', 'agent_id', 'meta' fields) 
        :return: PaginatedProcesses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'start_date', 'end_date', 'outcome', 'min_duration', 'max_duration', 'status', 'limit', 'cursor', 'field_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_processes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_all_processes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'outcome' in params:
            query_params.append(('outcome', params['outcome']))  # noqa: E501
        if 'min_duration' in params:
            query_params.append(('minDuration', params['min_duration']))  # noqa: E501
        if 'max_duration' in params:
            query_params.append(('maxDuration', params['max_duration']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'field_set' in params:
            query_params.append(('fieldSet', params['field_set']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedProcesses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_info  # noqa: E501

        Returns process info for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_info_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_info_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def get_process_info_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_info  # noqa: E501

        Returns process info for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_info_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_info`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Process',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_results(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results  # noqa: E501

        Returns process results in JSON for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_results_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_results_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def get_process_results_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results  # noqa: E501

        Returns process results in JSON for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}/result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultJSON',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_results_asr(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_asr  # noqa: E501

        Returns speech-to-text transcription in JSON for process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_asr(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONASR
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_results_asr_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_results_asr_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def get_process_results_asr_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_asr  # noqa: E501

        Returns speech-to-text transcription in JSON for process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_asr_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONASR
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results_asr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results_asr`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results_asr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}/resultasr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultJSONASR',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_results_diarization(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_diarization  # noqa: E501

        Returns diarization in JSON for process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_diarization(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONDiarization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_results_diarization_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_results_diarization_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def get_process_results_diarization_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_diarization  # noqa: E501

        Returns diarization in JSON for process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_diarization_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONDiarization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results_diarization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results_diarization`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results_diarization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}/resultdiarization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultJSONDiarization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_results_features(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_features  # noqa: E501

        Returns process features results in JSON for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_features(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_results_features_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_results_features_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def get_process_results_features_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_features  # noqa: E501

        Returns process features results in JSON for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_features_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results_features`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}/resultfeatures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultJSONFeatures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_results_frames(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_frames  # noqa: E501

        Returns process frames results in JSON for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_frames(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFrames
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_results_frames_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_results_frames_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def get_process_results_frames_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_results_frames  # noqa: E501

        Returns process frames results in JSON for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_results_frames_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFrames
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results_frames" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results_frames`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results_frames`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}/resultframes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultJSONFrames',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_stats(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_stats  # noqa: E501

        Returns statistics for process on client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_stats(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ProcessStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_stats_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_stats_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def get_process_stats_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """get_process_stats  # noqa: E501

        Returns statistics for process on client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_stats_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ProcessStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_stats`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProcessStats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_feedback(self, body, cid, **kwargs):  # noqa: E501
        """post_feedback  # noqa: E501

        Post feedback request for a process. It returns a URL with the form to fill in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_feedback(body, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InputFeedback body: The input JSON (required)
        :param int cid: ID of client giving request (required)
        :return: ResponseFeedback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_feedback_with_http_info(body, cid, **kwargs)  # noqa: E501
        else:
            (data) = self.post_feedback_with_http_info(body, cid, **kwargs)  # noqa: E501
            return data

    def post_feedback_with_http_info(self, body, cid, **kwargs):  # noqa: E501
        """post_feedback  # noqa: E501

        Post feedback request for a process. It returns a URL with the form to fill in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_feedback_with_http_info(body, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InputFeedback body: The input JSON (required)
        :param int cid: ID of client giving request (required)
        :return: ResponseFeedback
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_feedback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_feedback`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `post_feedback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/feedback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseFeedback',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_process_audio(self, x_auth_token, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs):  # noqa: E501
        """send_process_audio  # noqa: E501

        Sends a new request with audio file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_audio(x_auth_token, customer_id, portfolio_id, agent_id, channels, calldirection, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: (required)
        :param str customer_id: The Customer's ID (required)
        :param str portfolio_id: The portfolio ID (required)
        :param str agent_id: Agent's ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param int cid: ID of client giving request (required)
        :param str data:
        :param str file:
        :param str name: Optionally, a name for the job request
        :param str customer_ind: The Customer's Industry Index
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int speakers: The number of speaker present in the audio. Set to zero for unknown
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str predictionmode: Sets the prediction mode on process, whether to get predictions based on audio or transcription or both of them.
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_process_audio_with_http_info(x_auth_token, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs)  # noqa: E501
        else:
            (data) = self.send_process_audio_with_http_info(x_auth_token, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs)  # noqa: E501
            return data

    def send_process_audio_with_http_info(self, x_auth_token, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs):  # noqa: E501
        """send_process_audio  # noqa: E501

        Sends a new request with audio file upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_audio_with_http_info(x_auth_token, customer_id, portfolio_id, agent_id, channels, calldirection, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: (required)
        :param str customer_id: The Customer's ID (required)
        :param str portfolio_id: The portfolio ID (required)
        :param str agent_id: Agent's ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param int cid: ID of client giving request (required)
        :param str data:
        :param str file:
        :param str name: Optionally, a name for the job request
        :param str customer_ind: The Customer's Industry Index
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int speakers: The number of speaker present in the audio. Set to zero for unknown
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str predictionmode: Sets the prediction mode on process, whether to get predictions based on audio or transcription or both of them.
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_auth_token', 'customer_id', 'portfolio_id', 'agent_id', 'channels', 'calldirection', 'cid', 'data', 'file', 'name', 'customer_ind', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'speakers', 'storedata', 'tag', 'meta', 'predictionmode', 'outcome']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_audio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_auth_token' is set
        if ('x_auth_token' not in params or
                params['x_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_auth_token` when calling `send_process_audio`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `send_process_audio`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `send_process_audio`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `send_process_audio`")  # noqa: E501
        # verify the required parameter 'channels' is set
        if ('channels' not in params or
                params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_audio`")  # noqa: E501
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params or
                params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_audio`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_audio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))  # noqa: E501
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))  # noqa: E501
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))  # noqa: E501
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))  # noqa: E501
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'channels' in params:
            query_params.append(('channels', params['channels']))  # noqa: E501
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))  # noqa: E501
        if 'speakers' in params:
            query_params.append(('speakers', params['speakers']))  # noqa: E501
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501
        if 'predictionmode' in params:
            query_params.append(('predictionmode', params['predictionmode']))  # noqa: E501
        if 'outcome' in params:
            query_params.append(('outcome', params['outcome']))  # noqa: E501

        header_params = {}
        if 'x_auth_token' in params:
            header_params['X-Auth-Token'] = params['x_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/audio', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Process',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_process_tcp(self, cid, portfolio_id, channels, calldirection, **kwargs):  # noqa: E501
        """send_process_tcp  # noqa: E501

        Sends a new request in stream mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_tcp(cid, portfolio_id, channels, calldirection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str tasks: Call tasks json with properties not covered in query parameters
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_process_tcp_with_http_info(cid, portfolio_id, channels, calldirection, **kwargs)  # noqa: E501
        else:
            (data) = self.send_process_tcp_with_http_info(cid, portfolio_id, channels, calldirection, **kwargs)  # noqa: E501
            return data

    def send_process_tcp_with_http_info(self, cid, portfolio_id, channels, calldirection, **kwargs):  # noqa: E501
        """send_process_tcp  # noqa: E501

        Sends a new request in stream mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_tcp_with_http_info(cid, portfolio_id, channels, calldirection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client giving request (required)
        :param str portfolio_id: The portfolio ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str tasks: Call tasks json with properties not covered in query parameters
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'portfolio_id', 'channels', 'calldirection', 'name', 'customer_id', 'customer_ind', 'agent_id', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'storedata', 'tag', 'meta', 'tasks', 'outcome']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_tcp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_tcp`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `send_process_tcp`")  # noqa: E501
        # verify the required parameter 'channels' is set
        if ('channels' not in params or
                params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_tcp`")  # noqa: E501
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params or
                params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_tcp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))  # noqa: E501
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))  # noqa: E501
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))  # noqa: E501
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))  # noqa: E501
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'channels' in params:
            query_params.append(('channels', params['channels']))  # noqa: E501
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))  # noqa: E501
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501
        if 'tasks' in params:
            query_params.append(('tasks', params['tasks']))  # noqa: E501
        if 'outcome' in params:
            query_params.append(('outcome', params['outcome']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/stream', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Process',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_process_url(self, x_auth_token, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs):  # noqa: E501
        """send_process_url  # noqa: E501

        Sends a new request with a url for data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_url(x_auth_token, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: (required)
        :param str url: Audio url to process (required)
        :param str customer_id: The Customer's ID (required)
        :param str portfolio_id: The portfolio ID (required)
        :param str agent_id: Agent's ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param int cid: ID of client giving request (required)
        :param RequestProcessBody body:
        :param str name: Optionally, a name for the job request
        :param str customer_ind: The Customer's Industry Index
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int speakers: The number of speaker present in the audio. Set to zero for unknown
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str predictionmode: Sets the prediction mode on process, whether to get predictions based on audio or transcription or both of them.
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_process_url_with_http_info(x_auth_token, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs)  # noqa: E501
        else:
            (data) = self.send_process_url_with_http_info(x_auth_token, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs)  # noqa: E501
            return data

    def send_process_url_with_http_info(self, x_auth_token, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs):  # noqa: E501
        """send_process_url  # noqa: E501

        Sends a new request with a url for data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_url_with_http_info(x_auth_token, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_auth_token: (required)
        :param str url: Audio url to process (required)
        :param str customer_id: The Customer's ID (required)
        :param str portfolio_id: The portfolio ID (required)
        :param str agent_id: Agent's ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param int cid: ID of client giving request (required)
        :param RequestProcessBody body:
        :param str name: Optionally, a name for the job request
        :param str customer_ind: The Customer's Industry Index
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int speakers: The number of speaker present in the audio. Set to zero for unknown
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str predictionmode: Sets the prediction mode on process, whether to get predictions based on audio or transcription or both of them.
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_auth_token', 'url', 'customer_id', 'portfolio_id', 'agent_id', 'channels', 'calldirection', 'cid', 'body', 'name', 'customer_ind', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'speakers', 'storedata', 'tag', 'meta', 'predictionmode', 'outcome']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_auth_token' is set
        if ('x_auth_token' not in params or
                params['x_auth_token'] is None):
            raise ValueError("Missing the required parameter `x_auth_token` when calling `send_process_url`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `send_process_url`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `send_process_url`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `send_process_url`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `send_process_url`")  # noqa: E501
        # verify the required parameter 'channels' is set
        if ('channels' not in params or
                params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_url`")  # noqa: E501
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params or
                params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_url`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))  # noqa: E501
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))  # noqa: E501
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))  # noqa: E501
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))  # noqa: E501
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'channels' in params:
            query_params.append(('channels', params['channels']))  # noqa: E501
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))  # noqa: E501
        if 'speakers' in params:
            query_params.append(('speakers', params['speakers']))  # noqa: E501
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501
        if 'predictionmode' in params:
            query_params.append(('predictionmode', params['predictionmode']))  # noqa: E501
        if 'outcome' in params:
            query_params.append(('outcome', params['outcome']))  # noqa: E501

        header_params = {}
        if 'x_auth_token' in params:
            header_params['X-Auth-Token'] = params['x_auth_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/url', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Process',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_process_video(self, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs):  # noqa: E501
        """send_process_video  # noqa: E501

        Sends a new request to process a video file from url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_video(url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: Video url to process (required)
        :param str customer_id: The Customer's ID (required)
        :param str portfolio_id: The portfolio ID (required)
        :param str agent_id: Agent's ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param int cid: ID of client giving request (required)
        :param RequestProcessBody body:
        :param str name: Optionally, a name for the job request
        :param str customer_ind: The Customer's Industry Index
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int speakers: The number of speaker present in the video. Set to zero for unknown
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str predictionmode: Sets the prediction mode on process, whether to get predictions based on audio or transcription or both of them.
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_process_video_with_http_info(url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs)  # noqa: E501
        else:
            (data) = self.send_process_video_with_http_info(url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs)  # noqa: E501
            return data

    def send_process_video_with_http_info(self, url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, **kwargs):  # noqa: E501
        """send_process_video  # noqa: E501

        Sends a new request to process a video file from url  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_process_video_with_http_info(url, customer_id, portfolio_id, agent_id, channels, calldirection, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: Video url to process (required)
        :param str customer_id: The Customer's ID (required)
        :param str portfolio_id: The portfolio ID (required)
        :param str agent_id: Agent's ID (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param int cid: ID of client giving request (required)
        :param RequestProcessBody body:
        :param str name: Optionally, a name for the job request
        :param str customer_ind: The Customer's Industry Index
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int speakers: The number of speaker present in the video. Set to zero for unknown
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str predictionmode: Sets the prediction mode on process, whether to get predictions based on audio or transcription or both of them.
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url', 'customer_id', 'portfolio_id', 'agent_id', 'channels', 'calldirection', 'cid', 'body', 'name', 'customer_ind', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'speakers', 'storedata', 'tag', 'meta', 'predictionmode', 'outcome']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_video" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `send_process_video`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `send_process_video`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `send_process_video`")  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `send_process_video`")  # noqa: E501
        # verify the required parameter 'channels' is set
        if ('channels' not in params or
                params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_video`")  # noqa: E501
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params or
                params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_video`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_video`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))  # noqa: E501
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))  # noqa: E501
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))  # noqa: E501
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))  # noqa: E501
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'channels' in params:
            query_params.append(('channels', params['channels']))  # noqa: E501
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))  # noqa: E501
        if 'speakers' in params:
            query_params.append(('speakers', params['speakers']))  # noqa: E501
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
            collection_formats['tag'] = 'csv'  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501
        if 'predictionmode' in params:
            query_params.append(('predictionmode', params['predictionmode']))  # noqa: E501
        if 'outcome' in params:
            query_params.append(('outcome', params['outcome']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/video', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Process',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_process_info(self, cid, pid, **kwargs):  # noqa: E501
        """update_process_info  # noqa: E501

        Update process info for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_process_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client making the request (required)
        :param int pid: ID of the process request (required)
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param int calldirection: 1 for incoming,2 for outgoing
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_process_info_with_http_info(cid, pid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_process_info_with_http_info(cid, pid, **kwargs)  # noqa: E501
            return data

    def update_process_info_with_http_info(self, cid, pid, **kwargs):  # noqa: E501
        """update_process_info  # noqa: E501

        Update process info for pid by client request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_process_info_with_http_info(cid, pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: ID of client making the request (required)
        :param int pid: ID of the process request (required)
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param int calldirection: 1 for incoming,2 for outgoing
        :param str meta: Call metadata json with properties not covered in query parameters
        :param str outcome: An optional field for the call outcome.
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid', 'customer_id', 'customer_ind', 'agent_id', 'campaign_id', 'calltype', 'ani', 'calldirection', 'meta', 'outcome']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_process_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_process_info`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `update_process_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))  # noqa: E501
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))  # noqa: E501
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))  # noqa: E501
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))  # noqa: E501
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))  # noqa: E501
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501
        if 'outcome' in params:
            query_params.append(('outcome', params['outcome']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes/{pid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Process',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_processes(self, cid, **kwargs):  # noqa: E501
        """update_processes  # noqa: E501

        Update status for a list of processes belonging to a client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_processes(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: id of the requested client (required)
        :param ProcessesUpdate body: List of process ids to update status for
        :return: ProcessesUpdatedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_processes_with_http_info(cid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_processes_with_http_info(cid, **kwargs)  # noqa: E501
            return data

    def update_processes_with_http_info(self, cid, **kwargs):  # noqa: E501
        """update_processes  # noqa: E501

        Update status for a list of processes belonging to a client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_processes_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cid: id of the requested client (required)
        :param ProcessesUpdate body: List of process ids to update status for
        :return: ProcessesUpdatedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_processes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_processes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{cid}/processes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProcessesUpdatedStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
