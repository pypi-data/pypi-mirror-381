from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.remote_cluster import RemoteCluster


T = TypeVar("T", bound="CreateRemoteClusterResponse201")


@_attrs_define
class CreateRemoteClusterResponse201:
    """
    Attributes:
        remote_cluster (Union[Unset, RemoteCluster]):
        invite (Union[Unset, str]): The encrypted invite for the newly created remote cluster
        password (Union[Unset, str]): The password generated by the server if none was
            sent on the create request
    """

    remote_cluster: Union[Unset, "RemoteCluster"] = UNSET
    invite: Union[Unset, str] = UNSET
    password: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        remote_cluster: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.remote_cluster, Unset):
            remote_cluster = self.remote_cluster.to_dict()

        invite = self.invite

        password = self.password

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if remote_cluster is not UNSET:
            field_dict["remote_cluster"] = remote_cluster
        if invite is not UNSET:
            field_dict["invite"] = invite
        if password is not UNSET:
            field_dict["password"] = password

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.remote_cluster import RemoteCluster

        d = dict(src_dict)
        _remote_cluster = d.pop("remote_cluster", UNSET)
        remote_cluster: Union[Unset, RemoteCluster]
        if isinstance(_remote_cluster, Unset):
            remote_cluster = UNSET
        else:
            remote_cluster = RemoteCluster.from_dict(_remote_cluster)

        invite = d.pop("invite", UNSET)

        password = d.pop("password", UNSET)

        create_remote_cluster_response_201 = cls(
            remote_cluster=remote_cluster,
            invite=invite,
            password=password,
        )

        create_remote_cluster_response_201.additional_properties = d
        return create_remote_cluster_response_201

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
