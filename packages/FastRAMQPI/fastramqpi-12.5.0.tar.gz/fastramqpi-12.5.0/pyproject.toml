# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
[tool.poetry]
name = "FastRAMQPI"
version = "12.5.0"
description = "Rammearkitektur integrations framework"
authors = ["Magenta ApS <info@magenta.dk>"]
license = "MPL-2.0"
readme = "README.md"
homepage = "https://magenta.dk/"
repository = "https://git.magenta.dk/rammearkitektur/FastRAMQPI"
keywords = ["os2mo"]
packages = [ { include = "fastramqpi" } ]
include = ["fastramqpi/py.typed"]

[tool.poetry.dependencies]
python = "^3.11"
structlog = ">=24,<26"
pydantic = "^1"
gql = "^3"
more-itertools = ">=9,<11"
prometheus-fastapi-instrumentator = "^7"
fastapi = "^0.115"
starlette = "^0.41"
httpx = ">=0.27,<0.29"
pytest = "^8"
respx = ">=0.21,<0.23"
tenacity = ">=8,<10"
tqdm = "^4"
Authlib = "^1"
aio-pika = "^9"
aiormq = "^6"
prometheus-client = ">=0.20,<0.22"
anyio = ">=3,<5"
Jinja2 = "^3"
requests = "^2"
sentry-sdk = "^1"
frozendict = "^2"
sqlalchemy = "^2"
psycopg = "^3"
debugpy = "^1"
hypothesis = "^6"
click = "^8"
aiohttp = "^3"
ariadne-codegen = "^0.7"
websockets = "^13" # for ariadne
uvicorn = "^0.34"

[tool.poetry.group.test.dependencies]
pytest-asyncio = "^0.24"
pytest-split = "^0.9"
pytest-cov = "^5"
pytest-mock = "^3"
pytest-aiohttp = "^1"
asgi-lifespan = "^2"

[tool.poetry.group.pre-commit.dependencies]
pre-commit = "^3"
ruff = "^0.9"
deptry = "^0.23"
mypy = "^1"
types-pyyaml = "^6"
types-tqdm = "^4"
types-requests = "^2"

[tool.poetry.plugins."pytest11"]
fastramqpi = "fastramqpi.pytest_plugin"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode="auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = "True"
warn_unused_configs = "True"
check_untyped_defs = "True"
disallow_untyped_defs = "True"
plugins = "pydantic.mypy"

[[tool.mypy.overrides]]
# The module seems to be missing library stubs or py.typed marker
module = "authlib.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
# Mypy doesn't understand the pylint ignore
module = "fastramqpi.autogenerated_graphql_client.*"
disallow_untyped_defs = "False"

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
extend-select = [
    # isort
    "I"
]
ignore = [
  # Allow function calls in arguments, like `Depends(...)`
  "B008",
  # Allow lines longer than 90 characters if ruff-format decides so
  "E501"
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.coverage.run]
omit = [
    # The pytest plugin is tested implictly through the integration tests
    "fastramqpi/pytest_plugin.py",
]

[tool.coverage.report]
omit = [
  "fastramqpi/autogenerated_graphql_client/*",
]

[tool.deptry.package_module_name_map]
gql = "graphql"
[tool.deptry.per_rule_ignores]
DEP002 = [
  # psycopg is used by sqlalchemy
  "psycopg",
]

[tool.ariadne-codegen]
# The default package name is `graphql_client`. Make it more obvious that the
# files are not to be modified manually.
target_package_name = "autogenerated_graphql_client"
target_package_path = "fastramqpi/"
client_name = "GraphQLClient"
schema_path = "schema.graphql"  # curl -O http://localhost:5000/graphql/v25/schema.graphql
queries_path = "queries.graphql"
include_all_inputs = false
include_all_enums = false
include_comments = false
plugins = [
    # Return values directly when only a single top field is requested
    "ariadne_codegen.contrib.shorter_results.ShorterResultsPlugin",
    # Add UNSET and UnsetType to generated input types
    "fastramqpi.ariadne.UnsetInputTypesPlugin",
]
[tool.ariadne-codegen.scalars.DateTime]
type = "datetime.datetime"
parse = "fastramqpi.ariadne.parse_graphql_datetime"
[tool.ariadne-codegen.scalars.UUID]
type = "uuid.UUID"
