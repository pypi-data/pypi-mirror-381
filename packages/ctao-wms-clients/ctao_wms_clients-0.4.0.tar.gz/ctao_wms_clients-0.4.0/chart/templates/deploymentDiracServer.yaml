---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wms.fullname" . }}-dirac-server
  labels:
    {{- include "wms.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ include "wms.fullname" . }}-dirac-server
spec:
  selector:
    matchLabels:
      {{- include "wms.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/name:  {{ include "wms.fullname" . }}-dirac-server
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "wms.labels" . | nindent 8 }}
        app.kubernetes.io/name:  {{ include "wms.fullname" . }}-dirac-server
    spec:
      hostname: dirac-server
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext: {}
      initContainers:
      {{ include "indigo-iam.initContainers.wait-for-login-service" (dict "Values" .Values.iam.iam ) | nindent 8 }}
      containers:
        - name: {{ include "wms.fullname" . }}-dirac-server
          image: "{{ .Values.image.repository_prefix }}-server:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - bash
            - -c
            - |
              set -xe

              echo "$(date -Is) Starting"

              echo "$(date -Is) Installing ssh key to access CE"
              cp -fv /etc/diracuser_sshkey.pub /home/dirac/.ssh/diracuser_sshkey.pub
              cp -fv /etc/diracuser_sshkey /home/dirac/.ssh/diracuser_sshkey
              chown -R dirac:dirac /home/dirac/.ssh
              chmod 600 /home/dirac/.ssh/diracuser_sshkey
              chmod 644 /home/dirac/.ssh/diracuser_sshkey.pub

              DB_ROOT_PASSWORD=dirac-db-root
              DB_DIRAC_PASSWORD=dirac-db

              # wait for database to be ready
              while true; do
                if mysql --host dirac-db -uroot -p$DB_ROOT_PASSWORD -e "show databases"; then
                  break
                fi
                echo "Waiting for database to be ready"
                sleep 10
              done

              # Opensearch cluster credentials
              OS_HOST_NAME=opensearch-cluster-master
              OS_USERNAME=admin
              OS_PASSWORD=admin

              # wait for opensearch to be ready
              {{ if .Values.diracx.elasticsearch.enabled }}
              while true; do
                if $(curl -u OS_USERNAME:OS_PASSWORD -k $OS_HOST_NAME --silent | jq -r '.name') == "$OS_HOST_NAME"; then
                  break
                fi
                echo "Waiting Opensearch cluster to be ready"
                sleep 10
              done
              {{ end }}

              {{ range $db_name := .Values.dirac_server.resetDatabasesOnStart }}
              echo "$(date -Is) Dropping database {{ $db_name }}"
              # TODO: set password in secret
              # This is a DB which may not be created safely
              echo "DROP DATABASE IF EXISTS {{ $db_name }};" | mysql --host dirac-db -uroot -p$DB_ROOT_PASSWORD
              {{ end }}

              echo "$(date -Is) Running install_site.sh"
              /home/dirac/install_site.sh

              echo "$(date -Is) Done install_site.sh"

              {{ if .Values.dirac_server.webApp.enabled }}
                echo "$(date -Is) Install WebApp"
                dirac-install-web-portal
                echo "$(date -Is) WebApp installed"
              {{ end }}

              {{ if .Values.diracx.enabled }}
              # Create DiracXAuthDB
              echo "$(date -Is) Creating DiracXAuthDB"
              mysql --host dirac-db -uroot -p$DB_ROOT_PASSWORD < diracx_auth_db.sql
              mysql --host dirac-db -uDirac -p$DB_DIRAC_PASSWORD -e "show databases" | grep "DiracXAuthDB"
              echo "$(date -Is) DiracXAuthDB created"

              echo "$(date -Is) Add DiracX configuration"
              python configure.py diracx.conf -c yes
              echo "$(date -Is) Done configure.py diracx.conf"
              {{ end }}

              {{ if .Values.diracx.enabled }}
              echo "$(date -Is) Sync DiracX configuration"
              source /opt/dirac/bashrc

              git config --global user.name "DIRAC Server CI"
              git config --global user.email "dirac-server-ci@invalid"
              git config --global --add safe.directory /local_cs_store/initialRepo

              DIRAC_COMPAT_ENABLE_CS_CONVERSION=x dirac internal legacy cs-sync "/opt/dirac/etc/DPPS-Tests.cfg" /local_cs_store/initialRepo/default.yml
              git --git-dir=.git -C /local_cs_store/initialRepo/ commit -am "export $(date)" || true
              # we are currently root... changing ownership (mambauser) for diracx pod
              chown -R 57439:57439 /local_cs_store/
              echo "$(date -Is) DiracX cfg synchronised"
              {{ end }}

              echo "$(date -Is) Running configure.py resources.conf"
              python configure.py resources.conf -c yes
              echo "$(date -Is) Done configure.py resources.conf"

              echo "$(date -Is) Configure systems section backend"
              python configure.py systems.conf -c yes
              echo "$(date -Is) Done configure.py systems.conf"

              echo "$(date -Is) Configure operations section"
              python configure.py operations.conf -c yes
              echo "$(date -Is) Done configure.py operations.conf"

              echo "$(date -Is) Initializing RSS"
              dirac-rss-sync --element Site -o LogLevel=VERBOSE -c yes
              dirac-rss-sync --element Resource -o LogLevel=VERBOSE -c yes
              dirac-rss-sync --element Node -o LogLevel=VERBOSE -c yes
              dirac-rss-sync --init -o LogLevel=VERBOSE -c yes

              dirac-rss-list-status --element Resource --elementType StorageElement -c yes
              dirac-rss-list-status --element Site -c yes
              echo "$(date -Is) RSS initialized"

              echo "$(date -Is) Enabling site CTAO.CI.de"
              # allow site exits with error status about, non-existent proxy even if local authentication works
              set +o pipefail
              site_output=$(dirac-admin-allow-site "CTAO.CI.de" "Enable CTAO.CI.de" -o /DIRAC/Security/UseServerCertificate=True 2>&1 || true)
              echo "$site_output"
              echo "$site_output" | grep -q 'CTAO.CI.de .* Active'

              echo "$(date -Is) Running dirac-restart-component WorkloadManagement"
              dirac-restart-component WorkloadManagement
              echo "$(date -Is) WorkloadManagement restarted"


              {{ if .Values.diracx.enabled }}
              echo "$(date -Is) Create DiracX IAM Users"
              source /opt/dirac/bashrc
              cd /local_cs_store/initialRepo/
              python /home/dirac/create_users.py -c yes
              chown -R 57439:57439 /local_cs_store/
              cd /home/dirac
              echo "$(date -Is) DiracX IAM Users created"

              echo "$(date -Is) Running dirac-restart-component FrameworkProxyManager"
              dirac-restart-component Framework ProxyManager
              echo "$(date -Is) FrameworkProxyManager restarted"

              echo "$(date -Is) Creating a first proxy."
              export DIRACOS="/opt/dirac"
              dirac-configure -F --cfg $DIRACOS/etc/dirac.cfg -C https://dirac-server:9135/Configuration/Server --DiracxUrl={{ tpl .Values.diracx.diracx.settings.DIRACX_SERVICE_AUTH_TOKEN_ISSUER . }} -ddd
              dirac-proxy-init -K /home/dirac/.globus/userkey.pem -C /home/dirac/.globus/usercert.pem -g dpps_genpilot --cfg $DIRACOS/etc/dirac.cfg -ddd
              echo "$(date -Is) First proxy created."
              {{ end }}

              # sentinel file for startupProbe
              touch /tmp/dirac-server-init-done

              find /opt/dirac/ -wholename '*/log/current' | xargs tail -f

          volumeMounts:
          - name: cafile
            subPath: ca.pem
            mountPath: /etc/grid-security/certificates/dpps_test_ca.pem
          - name: cafile
            subPath: ca.pem
            mountPath: /etc/grid-security/certificates/74df993b.0
          - name: cafile
            subPath: dpps_test_ca.crl.r0
            mountPath: /etc/grid-security/certificates/74df993b.r0
          - name: cafile
            subPath: dpps_test_ca.crl.r0
            mountPath: /etc/grid-security/certificates/dpps_test_ca.crl.r0
          - name: dpps-certkey-600
            subPath: hostcert.pem
            mountPath: /opt/dirac/etc/grid-security/hostcert.pem
          - name: dpps-certkey-400
            subPath: hostkey.pem
            mountPath: /opt/dirac/etc/grid-security/hostkey.pem
          - name: dppsuser-certkey-400
            mountPath: /home/dirac/.globus/userkey.pem
            subPath: dppsuser.key.pem
          - name: dppsuser-certkey-600
            mountPath: /home/dirac/.globus/usercert.pem
            subPath: dppsuser.pem
          - name: diracuser-sshkey-600
            subPath: ssh-diracuser_sshkey
            mountPath: /etc/diracuser_sshkey
          - name: diracuser-sshkey-644
            subPath: ssh-diracuser_sshkey.pub
            mountPath: /etc/diracuser_sshkey.pub
          - name: dirac-config
            subPath: resources.conf
            mountPath: /home/dirac/resources.conf
          - name: dirac-config
            mountPath: /opt/dirac/dirac-installation.cfg
            subPath: dirac-installation.cfg
          {{ if .Values.rucio.enabled }}
          - name: rucio-config
            mountPath: /opt/rucio/etc
          {{ end }}
          {{ if .Values.diracx.developer.enabled }}
          - name: local-cs-store-volume
            mountPath: /local_cs_store
          {{ end }}
          {{ if .Values.diracx.enabled }}
          - name: dirac-config
            mountPath: /home/dirac/diracx.conf
            subPath: diracx.conf
          - name: dirac-config
            mountPath: /home/dirac/operations.conf
            subPath: operations.conf
          - name: dirac-config
            mountPath: /home/dirac/systems.conf
            subPath: systems.conf
          - name: dirac-config
            mountPath: /home/dirac/diracx_auth_db.sql
            subPath: diracx_auth_db.sql
          {{ end }}
          {{ if or .Values.iam.enabled .Values.iam_external.enabled }}
          - name: config
            mountPath: /config
          {{ end }}
          env:
          - name: DIRAC_X509_HOST_KEY
            value: /opt/dirac/etc/grid-security/hostkey.pem
          - name: DIRAC_X509_HOST_CERT
            value: /opt/dirac/etc/grid-security/hostcert.pem
          {{ if or .Values.iam.enabled .Values.iam_external.enabled }}
          - name: CONFIG_PATH
            value: /config/config.yaml
           {{ end }}
           {{ if .Values.diracx.enabled }}
          - name: DIRACX_CS_PATH
            value: /local_cs_store/initialRepo
          {{ end }}
          ports:
          - name: dips-jobmanager
            containerPort: 9132
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP

          livenessProbe:
            tcpSocket:
              port: 9132
            periodSeconds: 15
            failureThreshold: 4

          readinessProbe:
            tcpSocket:
              port: 9132
            periodSeconds: 15
            failureThreshold: 4

          startupProbe:
            initialDelaySeconds: 90
            exec:
              command: ["test", "-f", "/tmp/dirac-server-init-done"]
            periodSeconds: 30
            timeoutSeconds: 15 # timeout for the command itself
            failureThreshold: 30  # 30s * 30 = 900s = 15 minutes max

      volumes:
      {{ if or .Values.iam.enabled .Values.iam_external.enabled }}
      {{- include "dpps-iam.client-volumes" (dict "Values" .Values.iam "Chart" .Chart "Release" .Release "Capabilities" .Capabilities) | nindent 6 }}
      {{ end }}
      # The above volume already defines the dpps-user ca and cert key
      # TODO: use generic function for cert
      # - name: cafile
      #   secret:
      #     defaultMode: 420
      #     secretName: {{ template "certprefix" . }}-server-cafile
      # - name: dppsuser-certkey-600
      #   secret:
      #     defaultMode: 0600
      #     secretName: {{ template "certprefix" . }}-dppsuser-certkey
      # - name: dppsuser-certkey-400
      #   secret:
      #     defaultMode: 0400
      #     secretName: {{ template "certprefix" . }}-dppsuser-certkey
      - name: dpps-certkey-600
        secret:
          defaultMode: 0600
          secretName: {{ template "certprefix" . }}-dirac-server-hostkey
      - name: dpps-certkey-400
        secret:
          defaultMode: 0400
          secretName: {{ template "certprefix" . }}-dirac-server-hostkey
      - name: diracuser-sshkey-600
        secret:
          defaultMode: 0600
          secretName: {{ .Release.Name }}-diracuser-sshkey
      - name: diracuser-sshkey-644
        secret:
          defaultMode: 0644
          secretName: {{ .Release.Name }}-diracuser-sshkey
      - name: dirac-config
        configMap:
          name: "{{ .Values.dirac_server.configmap.name | default (printf "%s-dirac-config" .Release.Name) }}"
      {{ if or .Values.iam.enabled .Values.iam_external.enabled }}
      - name: config
        configMap:
          name: indigo-iam-config
        {{ end }}
      {{ if .Values.diracx.developer.enabled }}
      - name: local-cs-store-volume
        persistentVolumeClaim:
          claimName: pvc-cs-store
      {{ end }}

      {{ if .Values.rucio.enabled }}
      - name: rucio-config
        configMap:
          name: {{ .Values.rucio.rucioConfig }}
      {{ end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---

apiVersion: v1
kind: Service
metadata:
  name: dirac-server
spec:
  selector:
    app.kubernetes.io/name:  {{ include "wms.fullname" . }}-dirac-server
  ports:
    - protocol: TCP
      port: 8443
      targetPort: 8443
      name: https

    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: http

    {{ range untilStep 9100 9200 1 }}   # start stop step
    - port: {{ . }}
      targetPort: {{ . }}
      name: exposed-port-{{ . }}
    {{ end }}
