{{- if or  .Values.iam_external.enabled .Values.iam.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: indigo-iam-config
  namespace: {{ .Release.Namespace }}
data:
  config.yaml: |
    {{ toYaml .Values.iamConfig | nindent 4 }}
{{- end }}
{{- if .Values.dirac_server.configmap.create }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.dirac_server.configmap.name | default (printf "%s-dirac-config" .Release.Name) }}"
data:
  diracx.conf: |
    DiracX
    {
      DisabledVO = None
      LegacyClientEnabled
      {
        WorkloadManagement
        {
          JobMonitoring = False
          JobStateUpdate = False
        }
      }
      CsSync
      {
        VOs
        {
          ctao.dpps.test
          {
            DefaultGroup = dirac_user
            IdP
            {
              ClientID = <client_id>
              {{ if .Values.iam_external.enabled -}}
              URL = {{ .Values.iam_external.loginServiceURL }}
              {{- else if .Values.iam.enabled -}}
              URL = http://wms-dpps-iam-login-service
              {{- end }}
            }
            UserSubjects
            {
              dpps_user = <dpps_user_id>
              test_user = <test_user_id>
            }
          }
        }
      }
      URL = {{ tpl .Values.diracx.diracx.settings.DIRACX_SERVICE_AUTH_TOKEN_ISSUER . }}
      LegacyExchangeApiKey = diracx:legacy:Mr8ostGuB_SsdmcjZb7LPkMkDyp9rNuHX6w1qAqahDg=
    }
  #TODO: make a loop over storages, get them from common config
  resources.conf: |
    Resources
    {
      FileCatalogs
      {
        RucioFileCatalog
        {
          CatalogType = FileCatalog
          AccessType = Read-Write
          Status = Active
          Master = True
          CatalogURL = DataManagement/FileCatalog
          MetaCatalog = True
        }
      }
      StorageElements
      {
        SandboxSE
        {
          BackendType = DISET
          AccessProtocol.1
          {
            Host = dirac-server
            Port = 9196
            PluginName = DIP
            Protocol = dips
            Path = /WorkloadManagement/SandboxStore
            Access = remote
            WSUrl =
          }
        }
      }
      Sites
      {
        CTAO
        {
          CTAO.CI.de
          {
            Name = CTAO.CI.de
            CE = dirac-ce
            CEs
            {
              dirac-ce
              {
                CEType = SSH
                SubmissionMode = Direct
                SSHHost = dirac-ce
                SSHUser = dirac
                SSHKey = /home/dirac/.ssh/diracuser_sshkey
                wnTmpDir = /tmp
                Pilot = True
                SharedArea = /home/dirac
                ExtraPilotOptions = --PollingTime 10 --CVMFS_locations=/
                Queues
                {
                  normal
                  {
                    maxCPUTime = 172800
                    SI00 = 2155
                    MaxTotalJobs = 2500
                    MaxWaitingJobs = 300
                    VO = ctao.dpps.test
                    BundleProxy = True
                  }
                }
              }
            }
          }
        }
      }
    }

  operations.conf: |
    Operations
    {
      Defaults
      {
        Pilot
        {
          Project = CTA
          Version = 3.0.3
          pilotFileServer = dirac-server:8443
          UpdatePilotCStoJSONFile = True
          GenericPilotDN = /CN=DPPS User
          GenericPilotGroup = dpps_genpilot
        }
        JobDescription
        {
          MaxCPUTime = 3456000
          DefaultCPUTime = 1728000
        }
        Services
        {
          Catalogs
          {
            RucioFileCatalog
            {
              AccessType = Read-Write
              Status = Active
              Master = True
            }
          }
        }
        DataManagement
        {
          RegistrationProtocols = srm
          RegistrationProtocols += dips
          RegistrationProtocols += root
          RegistrationProtocols += gsiftp
          RegistrationProtocols += https
          AccessProtocols = srm
          AccessProtocols += dips
          AccessProtocols += root
          AccessProtocols += gsiftp
          AccessProtocols += https
          WriteProtocols = srm
          WriteProtocols += dips
          WriteProtocols += root
          WriteProtocols += gsiftp
          WriteProtocols += https
        }
        InputDataPolicy
        {
          Default = DIRAC.WorkloadManagementSystem.Client.DownloadInputData
          Download = DIRAC.WorkloadManagementSystem.Client.DownloadInputData
          Protocol = DIRAC.WorkloadManagementSystem.Client.InputDataByProtocol
          InputDataModule = DIRAC.WorkloadManagementSystem.Client.InputDataResolution
        }
        ResourceStatus
        {
          Config
          {
            State = InActive
            Cache = 300
            RecordLogs = Active
            StatusTypes
            {
              default = all
              StorageElement = ReadAccess
              StorageElement += WriteAccess
              StorageElement += CheckAccess
              StorageElement += RemoveAccess
            }
          }
        }
      }
    }

  systems.conf: |
    Systems
    {
      WorkloadManagement
      {
        Services
        {
          SandboxStore
          {
            Port = 9196
            LocalSE = SandboxSE
            MaxThreads = 200
            MaxSandboxSizeMiB = 10
            BasePath = /opt/dirac/storage/sandboxes
            #If true, uploads the sandbox via diracx on an S3 storage
            UseDiracXBackend = True
            Authorization
            {
              Default = authenticated
              FileTransfer
              {
                Default = authenticated
              }
            }
          }
        }
        Databases
        {
          ElasticJobParametersDB
          {
            Host = opensearch-cluster-master
            SSL = False
            Port = 9200
            CRT = False
          }
        }
      }
    }

  dirac-installation.cfg: |
    #
    # This section determines which DIRAC components will be installed and where
    #
    LocalInstallation
    {
      #
      #   These are options for the configuration of the installed DIRAC software
      #   i.e., to produce the initial dirac.cfg for the server
      #
      #  Give a Name to your User Community, it does not need to be the same name as in EGI,
      #  it can be used to cover more than one VO in the grid sense.
      #  If you are going to setup DIRAC as a multi-VO instance, remove the VirtualOrganization parameter.
      VirtualOrganization = ctao.dpps.test
      #  Site name
      SiteName = test.dpps.cta-observatory.org
      #  Setup name (every installation can have multiple setups, but give a name to the first one)
      # Setup is now deprecated
      # Setup = DPPS-Tests
      #  Default name of system instances
      InstanceName = DPPS-Tests
      #  Flag to skip download of CAs, on the first Server of your installation you need to get CAs
      #  installed by some external means
      SkipCADownload = yes
      #  Flag to use the server certificates
      UseServerCertificate = yes
      #  Configuration Server URL (This should point to the URL of at least one valid Configuration
      #  Service in your installation, for the primary server it should not used )
      #  ConfigurationServer = dips://myprimaryserver.name:9135/Configuration/Server
      #  Configuration Name
      ConfigurationName = DPPS-Tests
      #
      #   These options define the DIRAC components to be installed on "this" DIRAC server.
      #
      #
      #  The next options should only be set for the primary server,
      #  they properly initialize the configuration data
      #
      #  Name of the Admin user (default: None )
      AdminUserName = dpps_user
      #  DN of the Admin user certificate (default: None )
      #  In order the find out the DN that needs to be included in the Configuration for a given
      #  host or user certificate the following command can be used::
      #
      #          openssl x509 -noout -subject -enddate -in <certfile.pem>
      #
      AdminUserDN = /CN=DPPS User
      #  Email of the Admin user (default: None )
      # AdminUserEmail = adminmail@provider
      #  Name of the Admin group (default: dirac_admin )
      AdminGroupName = dirac_admin
      #  DN of the host certificate (*) (default: None )
      HostDN = /CN=dirac-server
      # Define the Configuration Server as Master for your installations
      ConfigurationMaster = yes
      # List of Systems to be installed - by default all services are added
      Systems = Accounting
      Systems += Configuration
      Systems += DataManagement
      Systems += Framework
      Systems += Monitoring
      Systems += Production
      Systems += RequestManagement
      Systems += ResourceStatus
      Systems += StorageManagement
      Systems += Transformation
      Systems += WorkloadManagement
      #
      # List of DataBases to be installed (what's here is a list for a basic installation)
      Databases = InstalledComponentsDB
      Databases += ResourceStatusDB
      Databases += ProxyDB
      # List of DataBases for WMS
      Databases += JobDB
      Databases += SandboxMetadataDB
      Databases += TaskQueueDB
      Databases += JobLoggingDB
      Databases += PilotAgentsDB
      # List of DataBases for RMS
      Databases += ReqDB
      # List of DataBases for Accounting
      Databases += AccountingDB
      # List of DataBases for DataManagement
      Databases += FileCatalogDB
      #
      #  The following options define components to be installed
      #
      #  Name of the installation host (default: the current host )
      #  Used to build the URLs the services will publish
      #  For a test installation you can use 127.0.0.1
      # Host = dirac.cern.ch
      #  List of Services to be installed (what's here is a list for a basic installation)
      Services  = Configuration/Server
      Services += Framework/ComponentMonitoring
      Services += Framework/SystemAdministrator
      Services += Framework/BundleDelivery
      Services += Framework/ProxyManager
      Services += ResourceStatus/ResourceStatus
      #  List of Services to be installed for WMS
      Services += WorkloadManagement/JobManager
      Services += WorkloadManagement/JobMonitoring
      Services += WorkloadManagement/JobStateUpdate
      Services += WorkloadManagement/Matcher
      Services += WorkloadManagement/OptimizationMind
      Services += WorkloadManagement/SandboxStore
      Services += WorkloadManagement/WMSAdministrator
      Services += WorkloadManagement/PilotManager
      # List of Services to be installed for DataManagement
      Services += DataManagement/FileCatalog
      Services += DataManagement/StorageElement
      # Add Monitoring
      Services += Monitoring/Monitoring
      #  List of Executors to be installed for WMS
      Executors = WorkloadManagement/Optimizers
      #  List of Executors to be installed for WMS
      Agents = WorkloadManagement/SiteDirector
      Agents += WorkloadManagement/PilotSyncAgent
      Agents += WorkloadManagement/PilotStatusAgent
      #  List of Services to be installed for RMS
      Services += RequestManagement/ReqManager
      #  List of Agents to be installed for RMS
      Agents += RequestManagement/RequestExecutingAgent
      Agents += RequestManagement/CleanReqDBAgent
      #  List of Services to be installed for Accounting
      Services += Accounting/DataStore
      #  Flag determining whether the Web Portal will be installed
      # WebPortal = yes
      #
      #  The following options defined the MySQL DB connectivity
      Database
      {
        User = Dirac
        Password = dirac-db
        RootPwd = dirac-db-root
        Host = dirac-db
        Port = 3306
      }
      NoSQLDatabase
      {
        User = admin
        Password = admin
        Host = opensearch-cluster-master
        Port = 9200
        SSL = Yes
      }
      DIRAC
      {
        VirtualOrganization = ctao.dpps.test
        NoSetup = True
        Hostname = dirac-server
        Configuration
        {
          Name = DPPS-Tests
          MasterServer = https://dirac-server:9135/Configuration/Server
        }
      }
      LocalSite
      {
        Site = test.dpps.cta-observatory.org
      }
    }
    Registry
    {
      DefaultGroup = dirac_user
      Users
      {
        dpps_user
        {
          DN = /CN=DPPS User
          CA = /CN=DPPS Development CA
        }
      }
      Groups
      {
        dirac_user
        {
          Users = test_user
          Properties = NormalUser
        }
        dpps_group
        {
          Users = dpps_user
          Users += test_user
          Properties = NormalUser
          Properties += PrivateLimitedDelegation
        }
        dpps_genpilot
        {
          Users = dpps_user
          Properties = GenericPilot
          Properties += LimitedDelegation
        }
        dirac_admin
        {
          Users = dpps_user
          Properties = AlarmsManagement
          Properties += ServiceAdministrator
          Properties += CSAdministrator
          Properties += JobAdministrator
          Properties += FullDelegation
          Properties += ProxyManagement
          Properties += Operator
        }
      }
      VO
      {
        ctao.dpps.test
        {
          VOAdmin = dpps_user
          VOMSName = ctao.dpps.test
          VOAdminGroup = dpps_group
          DefaultGroup = dpps_group
          {{ if .Values.iam_external.enabled -}}
          IdProvider = {{ trimPrefix "http://" .Values.iam_external.loginServiceURL }}
          {{- else if .Values.iam.enabled -}}
          IdProvider = wms-dpps-iam-login-service
          {{- end }}
        }
      }
    }

    Systems
    {
      WorkloadManagement
      {
        Agents
        {
          SiteDirector
          {
            Site = CTAO.CI.de
            PollingTime = 10
            PilotDN = /CN=DPPS User
            PilotGroup = dpps_genpilot
            AddPilotsToEmptySites = True
            UpdatePilotStatus = True
            GetPilotOutput = True
            SendPilotAccounting = True
            LogLevel = DEBUG
            PilotDebugMode = True
            GetPilotOutput = True
            MaxJobsInFillMode = 10
          }
          PilotSyncAgent
          {
            PollingTime = 10
            #Directory where the files can be moved. If running on the WebApp, use /opt/dirac/webRoot/www/pilot
            SaveDirectory = /opt/dirac/webRoot/www/pilot
            #List of locations where to upload the pilot files. Can be https://some.where, or DIRAC SE names.
            UploadLocations =
            #Set to False (or No, or N) to exclude the master CS from the list of CS servers
            IncludeMasterCS = True
          }
        }
        Services
        {
          SandboxStore
            {
              UseDiracXBackend = True
              localSE = SandboxSE
            }
        }
        Databases
        {
          ElasticJobParametersDB
          {
            User = admin
            Password = admin
            Host = opensearch-cluster-master
            Port = 9200
            SSL = False
          }
        }
      }
      Monitoring
      {
        Databases
        {
          MonitoringDB
          {
            User = admin
            Password = admin
            Host = opensearch-cluster-master
            Port = 9200
            SSL = False
          }
        }
      }
    }
    Operations
    {
      Defaults
      {
        Pilot
        {
          Project = CTA
          Version = 3.0.3
          pilotFileServer = dirac-server:8443
          UpdatePilotCStoJSONFile = True
        }
        JobDescription
        {
          MaxCPUTime = 3456000
          DefaultCPUTime = 1728000
        }
        Services
        {
          Catalogs
          {
            RucioFileCatalog
            {
              AccessType = Read-Write
              Status = Active
              Master = True
            }
          }
        }
        DataManagement
        {
          RegistrationProtocols = srm
          RegistrationProtocols += dips
          RegistrationProtocols += root
          RegistrationProtocols += gsiftp
          RegistrationProtocols += https
          AccessProtocols = srm
          AccessProtocols += dips
          AccessProtocols += root
          AccessProtocols += gsiftp
          AccessProtocols += https
          WriteProtocols = srm
          WriteProtocols += dips
          WriteProtocols += root
          WriteProtocols += gsiftp
          WriteProtocols += https
        }
      }
    }
    WebApp
    {
      StaticResourceLinkDir = /opt/dirac/webRoot/resources
      StaticDirs = pilot
    }
    DiracX
    {
      DisabledVO = None
      LegacyClientEnabled
      {
        WorkloadManagement
        {
          JobMonitoring = False
          JobStateUpdate = False
        }
      }
      CsSync
      {
        VOs
        {
          ctao.dpps.test
          {
            DefaultGroup = dirac_user
            IdP
            {
              ClientID = <client_id>
              {{ if .Values.iam_external.enabled -}}
              URL = {{ .Values.iam_external.loginServiceURL }}
              {{- else if .Values.iam.enabled -}}
              URL = http://wms-dpps-iam-login-service
              {{- end }}
            }
            UserSubjects
            {
              dpps_user = <dpps_user_id>
              test_user = <test_user_id>
            }
          }
        }
      }
      URL = {{ tpl .Values.diracx.diracx.settings.DIRACX_SERVICE_AUTH_TOKEN_ISSUER . }}
      LegacyExchangeApiKey = diracx:legacy:Mr8ostGuB_SsdmcjZb7LPkMkDyp9rNuHX6w1qAqahDg=
    }

  diracx_auth_db.sql: |
    CREATE DATABASE IF NOT EXISTS `DiracXAuthDB`;
    GRANT SELECT, INSERT, UPDATE, DELETE, INDEX, CREATE TEMPORARY TABLES, LOCK TABLES ON DiracXAuthDB.* TO 'Dirac'@'%';

    FLUSH PRIVILEGES;

    USE DiracXAuthDB;

    CREATE TABLE IF NOT EXISTS DeviceFlows (
        UserCode VARCHAR(255) PRIMARY KEY,
        Status ENUM('PENDING', 'ERROR', 'READY', 'DONE') DEFAULT 'PENDING',
        CreationTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        ClientID VARCHAR(255),
        Scope VARCHAR(1024),
        DeviceCode VARCHAR(128) UNIQUE,
        IDToken JSON
    );

    CREATE TABLE IF NOT EXISTS AuthorizationFlows (
        UUID CHAR(36) PRIMARY KEY,
        Status ENUM('PENDING', 'ERROR', 'READY', 'DONE') DEFAULT 'PENDING',
        ClientID VARCHAR(255),
        CreationTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        Scope VARCHAR(1024),
        CodeChallenge VARCHAR(255),
        CodeChallengeMethod VARCHAR(8),
        RedirectURI VARCHAR(255),
        Code VARCHAR(255),
        IDToken JSON
    );

    CREATE TABLE IF NOT EXISTS RefreshTokens (
        JTI CHAR(36) PRIMARY KEY,
        Status ENUM('CREATED', 'REVOKED') DEFAULT 'CREATED',
        CreationTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        Scope VARCHAR(1024),
        Sub VARCHAR(1024),
        PreferredUsername VARCHAR(255)
    );
{{- end }}
