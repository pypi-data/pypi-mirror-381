[build-system]
requires = [
  "find_libpython >=0.3,<0.5; sys_platform == 'win32'",
  "setuptools >=45",
  "swig >=4,<5",
  "numpy >=2",
  "pandas >=2.2",
  "scikit-learn >=1.6",
#  "nlopt >= 2.6.2",
]
build-backend = "setuptools.build_meta"

[project]
name = "eggp"
version = "1.0.8"
authors = [{ name = "Fabricio Olivetti", email = "folivetti@users.noreply.github.com" }]
description = "Python Wheels for eggp algorithm."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9"
classifiers = [
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = ["typing_extensions >=4.6,<5; python_version<'3.8'", "numpy >=2", "pandas >=2.2", "scikit-learn >=1.6", "matplotlib >= 3"]

[project.optional-dependencies]
mypy = ["types_setuptools >=45"]

[project.scripts]
"eggp" = "eggp.__main__:main"

[tool.bumpver]
current_version = "v1.0.0"
version_pattern = "vMAJOR.MINOR.PATCH[-TAG]"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
  '^version = "{pep440_version}"$',
  '^current_version = "{version}"$',
]
"src/eggp/__init__.py" = [
  '^VERSION: str = "{pep440_version}"$',
]
"eggp.cabal" = ['^version:         {pep440_version}$']

[tool.cibuildwheel]
# 18-04-2023:
# Cross-compilation does not work with GHC and Cabal.
archs = ["native"]
build-frontend = "build"
build = [
  # GHC provides x86_64 and arm64 builds for macOS.
  "cp310-macosx_x86_64",
  "cp310-macosx_arm64",
  # GHC provides an AMD64 build for Windows.
  "cp310-win_amd64",
  # GHC provides an x86_64 build for CentOS 7 (manylinux2014).
  "cp310-manylinux_x86_64",
  # GHC provides an i686 build for Debian 9 (manylinux_2014 compatible).
  #"*-manylinux_i686",
  # GHC provides an aarch64 build for Debian 10 (manylinux_2_28 compatible).
  "cp310-manylinux_aarch64",
  # GHC provides an x86_64 build for Alpine 3.12 (manylinux_2_28 compatible).
  # "*-musllinux_x86_64",
]
skip = [
  # 18-04-2023:
  # PyPy builds do not work.
  "pp*",
  "cp314-*"
]
manylinux-aarch64-image = "folivetti/manylinux_2_28_ghc9121_aarch64"
manylinux-i686-image = "folivetti/manylinux2014_ghc9121_i686"
manylinux-x86_64-image = "folivetti/manylinux_2_28_ghc9121_x86_64"
#manylinux-x86_64-image = "folivetti/manylinux2014_ghc9121_x86_64"
musllinux-x86_64-image = "folivetti/musllinux_1_1_ghc9121_x86_64"

[tool.cibuildwheel.windows]
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path C:\\nlopt\\bin"

[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel} --lib-sdir ."

[tool.mypy]
mypy_path = "src"
python_version = "3.9"
strict = true
implicit_reexport = false

[tool.setuptools.packages.find]
where = ["src"]

[tool.tox]
legacy_tox_ini = """
[tox]
min_version = 4
env_list = py{39,310,311,312,313,314}-{lin,mac,win}

[testenv:py{39,310,311,312,313,314}-{lin,mac,win}]
package = external
package_env = build-{env_name}
platform =
  lin: linux
  mac: darwin
  win: win32
allowlist_externals =
  sh
extras =
  test
commands =
  {env_python} -m pytest {posargs}

[testenv:build-py{39,310,311,312,313}-{lin,mac,win}]
deps =
  build
  auditwheel; sys_platform == 'linux'
  delocate; sys_platform == 'darwin'
package_glob =
  py37-lin: {package_root}{/}dist{/}*cp37*manylinux*.whl
  py38-lin: {package_root}{/}dist{/}*cp38*manylinux*.whl
  py39-lin: {package_root}{/}dist{/}*cp39*manylinux*.whl
  py310-lin: {package_root}{/}dist{/}*cp310*manylinux*.whl
  py311-lin: {package_root}{/}dist{/}*cp311*manylinux*.whl
  py312-lin: {package_root}{/}dist{/}*cp312*manylinux*.whl
  py313-lin: {package_root}{/}dist{/}*cp313*manylinux*.whl
  py314-lin: {package_root}{/}dist{/}*cp314*manylinux*.whl
  py37-mac: {package_root}{/}dist{/}*cp37*macosx*.whl
  py38-mac: {package_root}{/}dist{/}*cp38*macosx*.whl
  py39-mac: {package_root}{/}dist{/}*cp39*macosx*.whl
  py310-mac: {package_root}{/}dist{/}*cp310*macosx*.whl
  py311-mac: {package_root}{/}dist{/}*cp311*macosx*.whl
  py312-mac: {package_root}{/}dist{/}*cp312*macosx*.whl
  py313-mac: {package_root}{/}dist{/}*cp313*macosx*.whl
  py314-mac: {package_root}{/}dist{/}*cp314*macosx*.whl
  py37-win: {package_root}{/}dist{/}*cp37*win*.whl
  py38-win: {package_root}{/}dist{/}*cp38*win*.whl
  py39-win: {package_root}{/}dist{/}*cp39*win*.whl
  py310-win: {package_root}{/}dist{/}*cp310*win*.whl
  py311-win: {package_root}{/}dist{/}*cp311*win*.whl
  py312-win: {package_root}{/}dist{/}*cp312*win*.whl
  py313-win: {package_root}{/}dist{/}*cp313*win*.whl
  py314-win: {package_root}{/}dist{/}*cp314*win*.whl
allowlist_externals =
  sh
commands =
  sh {package_root}/scripts/build-wheel.sh
"""
