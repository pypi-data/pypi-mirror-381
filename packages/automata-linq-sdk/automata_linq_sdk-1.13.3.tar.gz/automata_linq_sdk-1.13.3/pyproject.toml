[project]
name = "automata_linq_sdk"
version = "1.13.3"
readme = "README.md"
requires-python = ">=3.11"
license = "Apache-2.0"
license-files = ["LICENSE"]

[tool.poetry]
name = "linq-sdk"
version = "1.13.3"
description = ""
authors = ["Automata"]
readme = "README.md"
packages = [{ include = "linq" }, { include = "examples/quickstart" }]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.7.0"
dataclasses-json = "^0.6.4"
rich = "^13.7.0"
humanize = "^4.9.0"
auth0-python = "^4.7.1"
appdirs = "^1.4.4"
pyyaml = "^6.0.1"
flask = "^3.0.3"
matplotlib = "^3.9.0"
pandas = "^2.2.2"
typer = "^0.12.4"
click = "8.1.8"

[tool.poetry.group.dev.dependencies]
taskipy = "^1.12.2"
furo = "^2024.8.6"
pact-python = "^2.3.1"
pytest-dotenv = "^0.5.2"

pytest-coverage = "^0.0"
ruff = "^0.1.14"
pytest = "^7.4.4"
sphinx = "^7.2.6"
myst-parser = "^2.0.0"
autodoc-pydantic = "^2.0.1"
sphinx-autoapi = "^3.0.0"
sphinx-rtd-theme = "^2.0.0"
sphinx-autodoc2 = "^0.5.0"
sphinx-click = "^6.0.0"
linkify = "^1.4"
linkify-it-py = "^2.0.3"
sphinx-autobuild = "^2024.2.4"
pytest-mock = "^3.12.0"
requests-mock = "^1.11.0"
datamodel-code-generator = { extras = ["http"], version = "^0.25.8" }
pytest-network = "^0.0.1"
enum-tools = { extras = ["sphinx"], version = "^0.11.0" }
pyright = "^1.1.348"
pre-commit = "^3.6.2"

[tool.poetry.scripts]
linq = "linq.cli.main:cli"

[tool.taskipy.tasks]
build-docs = """bash ./get_hookrequests.sh \
&& rm -rf docs/html && sphinx-build docs docs/html \
&& rm -rf linq/maestro_webhooks_temp.py"""
serve-docs = """bash ./get_hookrequests.sh \
rm -rf docs/html && sphinx-autobuild docs docs/html --port=3001 --open-browser --watch=linq \
&& rm -rf linq/maestro_webhooks_temp.py"""
remove-docs = "rm -rf docs/html"
lint = "ruff check ."
format = "ruff format ."
type-check = "pyright ."
update-api-schema = "bin/update-api-schema --name workflow_api --port 8000"
update-auth-api-schema = "bin/update-api-schema --name auth_api --port 8001"

[tool.pytest.ini_options]
addopts = "--cov=linq --cov-fail-under=100 --cov-report=html --cov-report=term-missing --disable-network --ignore=tests/pact"
markers = ["allow_file_store_save", "allow_file_store_load"]

[tool.pyright]
reportMatchNotExhaustive = true
reportUnnecessaryTypeIgnoreComment = true
reportUnnecessaryComparison = true
reportIncompatibleMethodOverride = true
reportImportCycles = false

[tool.ruff]
line-length = 120

[tool.ruff.lint]
# Disable fix for unused imports (`F401`).
unfixable = ["F401"]
select = ["I"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

