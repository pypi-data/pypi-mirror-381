from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_ceph.openapi_server.models.base_model import Model
from fabric_ceph.openapi_server import util


class Capability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity=None, cap=None):  # noqa: E501
        """Capability - a model defined in OpenAPI

        :param entity: The entity of this Capability.  # noqa: E501
        :type entity: str
        :param cap: The cap of this Capability.  # noqa: E501
        :type cap: str
        """
        self.openapi_types = {
            'entity': str,
            'cap': str
        }

        self.attribute_map = {
            'entity': 'entity',
            'cap': 'cap'
        }

        self._entity = entity
        self._cap = cap

    @classmethod
    def from_dict(cls, dikt) -> 'Capability':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Capability of this Capability.  # noqa: E501
        :rtype: Capability
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self) -> str:
        """Gets the entity of this Capability.

        One of mon|osd|mds|mgr (commonly mon/osd/mds)  # noqa: E501

        :return: The entity of this Capability.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity: str):
        """Sets the entity of this Capability.

        One of mon|osd|mds|mgr (commonly mon/osd/mds)  # noqa: E501

        :param entity: The entity of this Capability.
        :type entity: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def cap(self) -> str:
        """Gets the cap of this Capability.

        Capability string, e.g. `allow rw`, `allow r fsname=CEPH-FS-01 path=/volumes/_nogroup/demo`  # noqa: E501

        :return: The cap of this Capability.
        :rtype: str
        """
        return self._cap

    @cap.setter
    def cap(self, cap: str):
        """Sets the cap of this Capability.

        Capability string, e.g. `allow rw`, `allow r fsname=CEPH-FS-01 path=/volumes/_nogroup/demo`  # noqa: E501

        :param cap: The cap of this Capability.
        :type cap: str
        """
        if cap is None:
            raise ValueError("Invalid value for `cap`, must not be `None`")  # noqa: E501

        self._cap = cap
