from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_ceph.openapi_server.models.base_model import Model
from fabric_ceph.openapi_server import util


class SubvolumeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path=None, bytes_quota=None, mode=None, state=None, created_at=None):  # noqa: E501
        """SubvolumeInfo - a model defined in OpenAPI

        :param path: The path of this SubvolumeInfo.  # noqa: E501
        :type path: str
        :param bytes_quota: The bytes_quota of this SubvolumeInfo.  # noqa: E501
        :type bytes_quota: int
        :param mode: The mode of this SubvolumeInfo.  # noqa: E501
        :type mode: str
        :param state: The state of this SubvolumeInfo.  # noqa: E501
        :type state: str
        :param created_at: The created_at of this SubvolumeInfo.  # noqa: E501
        :type created_at: datetime
        """
        self.openapi_types = {
            'path': str,
            'bytes_quota': int,
            'mode': str,
            'state': str,
            'created_at': datetime
        }

        self.attribute_map = {
            'path': 'path',
            'bytes_quota': 'bytes_quota',
            'mode': 'mode',
            'state': 'state',
            'created_at': 'created_at'
        }

        self._path = path
        self._bytes_quota = bytes_quota
        self._mode = mode
        self._state = state
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'SubvolumeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubvolumeInfo of this SubvolumeInfo.  # noqa: E501
        :rtype: SubvolumeInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this SubvolumeInfo.

        Absolute CephFS path to the subvolume (use for mounting)  # noqa: E501

        :return: The path of this SubvolumeInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this SubvolumeInfo.

        Absolute CephFS path to the subvolume (use for mounting)  # noqa: E501

        :param path: The path of this SubvolumeInfo.
        :type path: str
        """

        self._path = path

    @property
    def bytes_quota(self) -> int:
        """Gets the bytes_quota of this SubvolumeInfo.


        :return: The bytes_quota of this SubvolumeInfo.
        :rtype: int
        """
        return self._bytes_quota

    @bytes_quota.setter
    def bytes_quota(self, bytes_quota: int):
        """Sets the bytes_quota of this SubvolumeInfo.


        :param bytes_quota: The bytes_quota of this SubvolumeInfo.
        :type bytes_quota: int
        """

        self._bytes_quota = bytes_quota

    @property
    def mode(self) -> str:
        """Gets the mode of this SubvolumeInfo.


        :return: The mode of this SubvolumeInfo.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this SubvolumeInfo.


        :param mode: The mode of this SubvolumeInfo.
        :type mode: str
        """

        self._mode = mode

    @property
    def state(self) -> str:
        """Gets the state of this SubvolumeInfo.


        :return: The state of this SubvolumeInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this SubvolumeInfo.


        :param state: The state of this SubvolumeInfo.
        :type state: str
        """

        self._state = state

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this SubvolumeInfo.


        :return: The created_at of this SubvolumeInfo.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this SubvolumeInfo.


        :param created_at: The created_at of this SubvolumeInfo.
        :type created_at: datetime
        """

        self._created_at = created_at
