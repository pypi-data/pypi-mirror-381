from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_ceph.openapi_server.models.base_model import Model
import re
from fabric_ceph.openapi_server import util

import re  # noqa: E501

class SubvolumeCreateOrResizeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subvol_name=None, group_name=None, size=None, mode=None):  # noqa: E501
        """SubvolumeCreateOrResizeRequest - a model defined in OpenAPI

        :param subvol_name: The subvol_name of this SubvolumeCreateOrResizeRequest.  # noqa: E501
        :type subvol_name: str
        :param group_name: The group_name of this SubvolumeCreateOrResizeRequest.  # noqa: E501
        :type group_name: str
        :param size: The size of this SubvolumeCreateOrResizeRequest.  # noqa: E501
        :type size: int
        :param mode: The mode of this SubvolumeCreateOrResizeRequest.  # noqa: E501
        :type mode: str
        """
        self.openapi_types = {
            'subvol_name': str,
            'group_name': str,
            'size': int,
            'mode': str
        }

        self.attribute_map = {
            'subvol_name': 'subvol_name',
            'group_name': 'group_name',
            'size': 'size',
            'mode': 'mode'
        }

        self._subvol_name = subvol_name
        self._group_name = group_name
        self._size = size
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt) -> 'SubvolumeCreateOrResizeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubvolumeCreateOrResizeRequest of this SubvolumeCreateOrResizeRequest.  # noqa: E501
        :rtype: SubvolumeCreateOrResizeRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subvol_name(self) -> str:
        """Gets the subvol_name of this SubvolumeCreateOrResizeRequest.

        Subvolume name to create or resize  # noqa: E501

        :return: The subvol_name of this SubvolumeCreateOrResizeRequest.
        :rtype: str
        """
        return self._subvol_name

    @subvol_name.setter
    def subvol_name(self, subvol_name: str):
        """Sets the subvol_name of this SubvolumeCreateOrResizeRequest.

        Subvolume name to create or resize  # noqa: E501

        :param subvol_name: The subvol_name of this SubvolumeCreateOrResizeRequest.
        :type subvol_name: str
        """
        if subvol_name is None:
            raise ValueError("Invalid value for `subvol_name`, must not be `None`")  # noqa: E501

        self._subvol_name = subvol_name

    @property
    def group_name(self) -> str:
        """Gets the group_name of this SubvolumeCreateOrResizeRequest.

        Optional subvolume group name  # noqa: E501

        :return: The group_name of this SubvolumeCreateOrResizeRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this SubvolumeCreateOrResizeRequest.

        Optional subvolume group name  # noqa: E501

        :param group_name: The group_name of this SubvolumeCreateOrResizeRequest.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def size(self) -> int:
        """Gets the size of this SubvolumeCreateOrResizeRequest.

        Quota in **bytes**. Omit to create without quota (unlimited). Send a value to set or resize quota.   # noqa: E501

        :return: The size of this SubvolumeCreateOrResizeRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this SubvolumeCreateOrResizeRequest.

        Quota in **bytes**. Omit to create without quota (unlimited). Send a value to set or resize quota.   # noqa: E501

        :param size: The size of this SubvolumeCreateOrResizeRequest.
        :type size: int
        """

        self._size = size

    @property
    def mode(self) -> str:
        """Gets the mode of this SubvolumeCreateOrResizeRequest.

        POSIX mode string for initial create (octal), e.g. `\"0777\"`. Ignored on resize.   # noqa: E501

        :return: The mode of this SubvolumeCreateOrResizeRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this SubvolumeCreateOrResizeRequest.

        POSIX mode string for initial create (octal), e.g. `\"0777\"`. Ignored on resize.   # noqa: E501

        :param mode: The mode of this SubvolumeCreateOrResizeRequest.
        :type mode: str
        """
        if mode is not None and not re.search(r'^[0-7]{3,4}$', mode):  # noqa: E501
            raise ValueError(r"Invalid value for `mode`, must be a follow pattern or equal to `/^[0-7]{3,4}$/`")  # noqa: E501

        self._mode = mode
