% engine based alternative primitive implementations

if_ C Y N : eng C C E, ask E R, stop E, pick_ R C Y N.

not_ G : if_ G (fail) (true).

once_ G : if_ G (true) (fail).

pick_ (the C)  C Y _N : call Y.
pick_ no _C _Y N : call N.

findall_ X G Xs : eng X G E, ask E Y, collect_all_ E Y Xs.

collect_all_ _ no ().
collect_all_ E (the X) (X Xs) : ask E Y, collect_all_ E Y Xs.

copy_term_ T CT : eng T (true) E, ask E (the CT), stop E.

var_ X : not_ (not_ (eq X 1)), not_ (not_ (eq X 2)).

nonvar_ X: not_ (var_ X).

emu1:
  if_ (eq 1 2) (eq X yes) (eq X no),
  #print X,
  fail.

emu2:
  findall_ X (between 1 5 X) Xs,
  #print Xs,
  fail.

emu3:
  not_ (eq 1 2).

emu4 : var_ X, nonvar_ a.
