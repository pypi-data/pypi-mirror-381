# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flyte._protos.workflow import queue_service_pb2 as workflow_dot_queue__service__pb2


class QueueServiceStub(object):
    """provides an interface for managing execution of runs over a collection of workers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnqueueAction = channel.unary_unary(
                '/cloudidl.workflow.QueueService/EnqueueAction',
                request_serializer=workflow_dot_queue__service__pb2.EnqueueActionRequest.SerializeToString,
                response_deserializer=workflow_dot_queue__service__pb2.EnqueueActionResponse.FromString,
                )
        self.AbortQueuedRun = channel.unary_unary(
                '/cloudidl.workflow.QueueService/AbortQueuedRun',
                request_serializer=workflow_dot_queue__service__pb2.AbortQueuedRunRequest.SerializeToString,
                response_deserializer=workflow_dot_queue__service__pb2.AbortQueuedRunResponse.FromString,
                )
        self.AbortQueuedAction = channel.unary_unary(
                '/cloudidl.workflow.QueueService/AbortQueuedAction',
                request_serializer=workflow_dot_queue__service__pb2.AbortQueuedActionRequest.SerializeToString,
                response_deserializer=workflow_dot_queue__service__pb2.AbortQueuedActionResponse.FromString,
                )
        self.Heartbeat = channel.stream_stream(
                '/cloudidl.workflow.QueueService/Heartbeat',
                request_serializer=workflow_dot_queue__service__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=workflow_dot_queue__service__pb2.HeartbeatResponse.FromString,
                )
        self.StreamLeases = channel.unary_stream(
                '/cloudidl.workflow.QueueService/StreamLeases',
                request_serializer=workflow_dot_queue__service__pb2.StreamLeasesRequest.SerializeToString,
                response_deserializer=workflow_dot_queue__service__pb2.StreamLeasesResponse.FromString,
                )


class QueueServiceServicer(object):
    """provides an interface for managing execution of runs over a collection of workers.
    """

    def EnqueueAction(self, request, context):
        """queue a new action for execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortQueuedRun(self, request, context):
        """abort a queued run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortQueuedAction(self, request, context):
        """AbortAction aborts a single action that was previously queued or is currently being processed by a worker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request_iterator, context):
        """heartbeat is used by workers to report their status and acquire new leases.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLeases(self, request, context):
        """stream leases for a worker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnqueueAction': grpc.unary_unary_rpc_method_handler(
                    servicer.EnqueueAction,
                    request_deserializer=workflow_dot_queue__service__pb2.EnqueueActionRequest.FromString,
                    response_serializer=workflow_dot_queue__service__pb2.EnqueueActionResponse.SerializeToString,
            ),
            'AbortQueuedRun': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortQueuedRun,
                    request_deserializer=workflow_dot_queue__service__pb2.AbortQueuedRunRequest.FromString,
                    response_serializer=workflow_dot_queue__service__pb2.AbortQueuedRunResponse.SerializeToString,
            ),
            'AbortQueuedAction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortQueuedAction,
                    request_deserializer=workflow_dot_queue__service__pb2.AbortQueuedActionRequest.FromString,
                    response_serializer=workflow_dot_queue__service__pb2.AbortQueuedActionResponse.SerializeToString,
            ),
            'Heartbeat': grpc.stream_stream_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=workflow_dot_queue__service__pb2.HeartbeatRequest.FromString,
                    response_serializer=workflow_dot_queue__service__pb2.HeartbeatResponse.SerializeToString,
            ),
            'StreamLeases': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLeases,
                    request_deserializer=workflow_dot_queue__service__pb2.StreamLeasesRequest.FromString,
                    response_serializer=workflow_dot_queue__service__pb2.StreamLeasesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cloudidl.workflow.QueueService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueueService(object):
    """provides an interface for managing execution of runs over a collection of workers.
    """

    @staticmethod
    def EnqueueAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cloudidl.workflow.QueueService/EnqueueAction',
            workflow_dot_queue__service__pb2.EnqueueActionRequest.SerializeToString,
            workflow_dot_queue__service__pb2.EnqueueActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortQueuedRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cloudidl.workflow.QueueService/AbortQueuedRun',
            workflow_dot_queue__service__pb2.AbortQueuedRunRequest.SerializeToString,
            workflow_dot_queue__service__pb2.AbortQueuedRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortQueuedAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cloudidl.workflow.QueueService/AbortQueuedAction',
            workflow_dot_queue__service__pb2.AbortQueuedActionRequest.SerializeToString,
            workflow_dot_queue__service__pb2.AbortQueuedActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cloudidl.workflow.QueueService/Heartbeat',
            workflow_dot_queue__service__pb2.HeartbeatRequest.SerializeToString,
            workflow_dot_queue__service__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamLeases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cloudidl.workflow.QueueService/StreamLeases',
            workflow_dot_queue__service__pb2.StreamLeasesRequest.SerializeToString,
            workflow_dot_queue__service__pb2.StreamLeasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
