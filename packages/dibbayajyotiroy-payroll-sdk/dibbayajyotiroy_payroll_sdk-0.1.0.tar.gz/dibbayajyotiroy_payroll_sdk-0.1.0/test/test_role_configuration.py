# coding: utf-8

"""
    Rust Payroll System API  v1.0

    A high-performance, next-generation payroll management system API. This documentation provides detailed information on all available endpoints for managing employees, configuring payroll rules, and automating payroll runs. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.role_configuration import RoleConfiguration

class TestRoleConfiguration(unittest.TestCase):
    """RoleConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RoleConfiguration:
        """Test RoleConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RoleConfiguration`
        """
        model = RoleConfiguration()
        if include_optional:
            return RoleConfiguration(
                company_id = 'COMP001',
                role_name = 'Software Engineer',
                schema_version = '1.0',
                base_salary_minor_units = 12000000,
                currency = 'USD',
                overtime_policy = openapi_client.models.overtime_policy.OvertimePolicy(
                    weekday_multiplier = 1.5, 
                    weekend_multiplier = 2.0, 
                    holiday_multiplier = 2.5, ),
                leave_policies = [
                    openapi_client.models.leave_policy.LeavePolicy(
                        leave_type_id = 'SICK', 
                        leave_type_name = 'Sick Leave', 
                        deduction = openapi_client.models.leave_policy_deduction.LeavePolicy_deduction(
                            type = 'percent', 
                            value = 0, ), )
                    ],
                working_hours_per_day = 8.0,
                working_days_per_week = 5,
                is_active = True,
                role_id = 'role_2a5f...'
            )
        else:
            return RoleConfiguration(
                company_id = 'COMP001',
                role_name = 'Software Engineer',
                base_salary_minor_units = 12000000,
                currency = 'USD',
                overtime_policy = openapi_client.models.overtime_policy.OvertimePolicy(
                    weekday_multiplier = 1.5, 
                    weekend_multiplier = 2.0, 
                    holiday_multiplier = 2.5, ),
                leave_policies = [
                    openapi_client.models.leave_policy.LeavePolicy(
                        leave_type_id = 'SICK', 
                        leave_type_name = 'Sick Leave', 
                        deduction = openapi_client.models.leave_policy_deduction.LeavePolicy_deduction(
                            type = 'percent', 
                            value = 0, ), )
                    ],
                working_hours_per_day = 8.0,
                working_days_per_week = 5,
                is_active = True,
        )
        """

    def testRoleConfiguration(self):
        """Test RoleConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
