# coding: utf-8

"""
    Rust Payroll System API  v1.0

    A high-performance, next-generation payroll management system API. This documentation provides detailed information on all available endpoints for managing employees, configuring payroll rules, and automating payroll runs. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.leave_policy import LeavePolicy
from openapi_client.models.overtime_policy import OvertimePolicy
from typing import Optional, Set
from typing_extensions import Self

class CreateRoleRequest(BaseModel):
    """
    Payload for creating a new role configuration.
    """ # noqa: E501
    company_id: StrictStr = Field(description="The ID of the company this role belongs to.")
    role_name: StrictStr = Field(description="The human-readable name of the role.")
    schema_version: Optional[StrictStr] = Field(default=None, description="The version of this configuration schema.")
    base_salary_minor_units: StrictInt = Field(description="Base monthly salary in the smallest currency unit (e.g., cents) to avoid floating-point issues.")
    currency: StrictStr = Field(description="The ISO 4217 currency code.")
    overtime_policy: OvertimePolicy
    leave_policies: List[LeavePolicy] = Field(description="A list of policies for different types of leave.")
    working_hours_per_day: Union[StrictFloat, StrictInt]
    working_days_per_week: StrictInt
    is_active: StrictBool
    __properties: ClassVar[List[str]] = ["company_id", "role_name", "schema_version", "base_salary_minor_units", "currency", "overtime_policy", "leave_policies", "working_hours_per_day", "working_days_per_week", "is_active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateRoleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of overtime_policy
        if self.overtime_policy:
            _dict['overtime_policy'] = self.overtime_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in leave_policies (list)
        _items = []
        if self.leave_policies:
            for _item_leave_policies in self.leave_policies:
                if _item_leave_policies:
                    _items.append(_item_leave_policies.to_dict())
            _dict['leave_policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateRoleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "company_id": obj.get("company_id"),
            "role_name": obj.get("role_name"),
            "schema_version": obj.get("schema_version"),
            "base_salary_minor_units": obj.get("base_salary_minor_units"),
            "currency": obj.get("currency"),
            "overtime_policy": OvertimePolicy.from_dict(obj["overtime_policy"]) if obj.get("overtime_policy") is not None else None,
            "leave_policies": [LeavePolicy.from_dict(_item) for _item in obj["leave_policies"]] if obj.get("leave_policies") is not None else None,
            "working_hours_per_day": obj.get("working_hours_per_day"),
            "working_days_per_week": obj.get("working_days_per_week"),
            "is_active": obj.get("is_active")
        })
        return _obj


