# coding: utf-8

"""
    Rust Payroll System API  v1.0

    A high-performance, next-generation payroll management system API. This documentation provides detailed information on all available endpoints for managing employees, configuring payroll rules, and automating payroll runs. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PayrollCalculationResult(BaseModel):
    """
    Detailed results of a payroll calculation for a single employee.
    """ # noqa: E501
    employee_id: Optional[StrictStr] = None
    period_start: Optional[date] = None
    period_end: Optional[date] = None
    net_salary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The final take-home pay for the employee.")
    gross_salary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total earnings before any deductions.")
    total_deductions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The sum of all deductions.")
    __properties: ClassVar[List[str]] = ["employee_id", "period_start", "period_end", "net_salary", "gross_salary", "total_deductions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayrollCalculationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayrollCalculationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "employee_id": obj.get("employee_id"),
            "period_start": obj.get("period_start"),
            "period_end": obj.get("period_end"),
            "net_salary": obj.get("net_salary"),
            "gross_salary": obj.get("gross_salary"),
            "total_deductions": obj.get("total_deductions")
        })
        return _obj


