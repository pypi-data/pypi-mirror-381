"use strict";(self.webpackChunk_mamba_org_gator_lab=self.webpackChunk_mamba_org_gator_lab||[]).push([[658],{8658:(e,a,t)=>{t.r(a),t.d(a,{default:()=>k});var n=t(9219),o=t(3794),i=t(1455),s=t(316),c=t(5273),r=t(292),l=t(3345);const d={id:"jupyterlab-conda:tour",label:"Conda Packages Manager Tour",hasHelpEntry:!0,steps:[{content:l.createElement("p",null,"Thanks for installing ",l.createElement("em",null,"Gator"),".",l.createElement("br",null),"Let's have a tour of the UI."),placement:"center",target:`.${r.CONDA_WIDGET_CLASS}`,title:"Conda Packages Manager"},{content:l.createElement("p",null,"Your conda environment are listed here.",l.createElement("br",null),"Click on it to manage its packages."),placement:"right",target:`#${r.CONDA_ENVIRONMENT_PANEL_ID}`},{content:l.createElement("p",null,"This toolbar contains environment actions like creation, deletion, exportation,..."),placement:"bottom",target:`.${r.CONDA_ENVIRONMENT_TOOLBAR_CLASS}`},{content:l.createElement("p",null,"This table lists all available conda packages and their status within the selected environment (i.e. installed, updatable or available)."),target:`#${r.CONDA_PACKAGES_PANEL_ID}`},{content:l.createElement("p",null,"A package can be installed, removed or updated by selecting a status in these selectors."),placement:"bottom",target:`.${r.CONDA_PACKAGE_SELECT_CLASS}`},{content:l.createElement("p",null,"The package list can be filtered by packages status and with a search term."),placement:"bottom-start",target:`.${r.CONDA_PACKAGES_TOOLBAR_CLASS}`},{content:l.createElement("p",null,"Execute package changes with the cart button."),placement:"bottom",target:`.${r.CONDA_PACKAGES_TOOLBAR_CLASS} .fa-cart-arrow-down`}]};var m=t(5023),g=t(7262),p=t(5047),h=t.n(p);const u=new g.Token("@mamba-org/gator-lab:ICompanionValidator"),_=/[\u0300-\u036F]/g;class b{constructor(e,a,t){this._isDisposed=!1,this._companions={},this._clean=()=>{},this._envManager=a,this._updateCompanions(t),t.changed.connect(this._updateCompanions,this),e.ready.then((()=>{this._validateSpecs(e,e.specs),e.specsChanged.connect(this._validateSpecs,this)})),new Promise((e=>{this._clean=e}).bind(this)).then((()=>{t.changed.disconnect(this._updateCompanions,this),e.specsChanged.disconnect(this._validateSpecs,this)}))}get isDisposed(){return this._isDisposed}dispose(){this.isDisposed||(this._clean(),this._isDisposed=!0)}_updateCompanions(e){this._companions=e.get("companions").composite}static kernelNameToEnvironment(e){const a=e.split("-");if("conda"===a[0]){if(a.length>=4)return a[2];if(3===a.length&&"root"===a[2])return"base"}return null}static _semverToPython(e){return e?e.split("||").map((e=>e.split(" ").join(","))).join("|"):null}async _validateSpecs(e,a){if(0===Object.keys(this._companions).length)return;const t=await this._envManager.environments,n={};function i(e,a,t){o.Notification.warning(`Environment "${t}" has some inconsistencies.`,{actions:[{label:"Correct",caption:"Correct installed packages",callback:()=>{o.Notification.promise(a.getPackageManager().install(e,t).then((()=>null)),{pending:{message:"Correct the environment."},success:{message:()=>"Environment corrected"},error:{message:()=>"Fail to correct the environment."}})}}]})}t.forEach((e=>{const a=e.name.normalize("NFKD").replace(_,"").replace(/[^a-zA-Z0-9._-]/g,"_");n[a]=e.name}));for(const e of Object.keys(a.kernelspecs)){let t;const{conda_env_name:o,conda_env_path:s}=a.kernelspecs[e].metadata;if(s)t="root"===o?"base":m.PathExt.basename(s);else{const a=b.kernelNameToEnvironment(e);t=n[a]}if(t)try{const e=await this._envManager.getPackageManager().refresh(!1,t),a=Object.keys(this._companions),n=[];e.forEach((e=>{if(a.indexOf(e.name)>=0&&!h().satisfies(e.version_installed,this._companions[e.name])){let a=b._semverToPython(h().validRange(this._companions[e.name]));a&&("<>=".indexOf(a[0])<0&&(a="="+a),n.push(e.name+a))}})),n.length>0&&i(n,this._envManager,t)}catch(e){console.error(`Fail to check environment '${t}'`,e)}}}validate(e){this._validateSpecs(null,e)}}const v="@mamba-org/gator-lab:plugin",k=[{id:v,autoStart:!0,activate:async function(e,a,t,n,i,s){let c;const{commands:l,shell:m}=e,g="conda-env",p="jupyter_conda:open-ui",h=await(a?.load(v)),u=new r.CondaEnvironments(h);(h?.get("backgroundCaching").composite??1)&&C.loadPackages(u);const _=new o.WidgetTracker({namespace:g});let b;return l.addCommand(p,{label:"Conda Packages Manager",execute:a=>{const{envName:t}=a;e.restored.then((()=>{let e=0;const a=()=>{setTimeout((()=>{e+=1e3,b?.isVisible&&c?l.execute("jupyterlab-tour:launch",{id:c.id,force:!1}):e<5001&&a()}),1e3)};l.hasCommand("jupyterlab-tour:add")&&(c||l.execute("jupyterlab-tour:add",{tour:d}).then((e=>{c=e})),a())})),b&&!b.isDisposed||(b=new o.MainAreaWidget({content:new r.CondaEnvWidget(u,l,t)}),b.addClass(r.CONDA_WIDGET_CLASS),b.id=g,b.title.label="Packages",b.title.caption="Conda Packages Manager",b.title.icon=r.condaIcon),_.has(b)||_.add(b),b.isAttached||m.add(b,"main"),m.activateById(b.id)},icon:r.condaIcon}),(0,r.registerEnvCommands)(l,u),s&&s.add({command:p,category:"Gator",rank:1}),t&&t.addItem({command:p,category:"Settings"}),i&&i.restore(_,{command:p,name:()=>g}),n&&n.settingsMenu.addGroup([{command:p}],999),u},optional:[s.ISettingRegistry,o.ICommandPalette,i.IMainMenu,n.ILayoutRestorer,c.ILauncher],provides:r.IEnvironmentManager},{id:"@mamba-org/gator-lab:companion",autoStart:!0,activate:async function(e,a,t,n){const{commands:o,serviceManager:i}=e,s="jupyter_conda:companions",c=await t.load(v),r=new b(i.kernelspecs,a,c);return o.addCommand(s,{label:"Validate kernels compatibility",execute:()=>{r.validate(i.kernelspecs.specs)}}),n&&n.addItem({command:s,category:"Troubleshooting"}),r},requires:[r.IEnvironmentManager,s.ISettingRegistry],optional:[o.ICommandPalette,c.ILauncher],provides:u}];var C;!function(e){e.loadPackages=function(e){let a=!1,t="";const n=["I know you want to give up, but wait a bit longer...","Why is conda so popular, still loading that gigantic packages list...","Take a break, available packages list are still loading...","Available packages list still loading..."];function i(e){setTimeout((()=>{a||(o.Notification.update({message:e,id:t}),n.length>0&&i(n.pop()))}),6e4)}e.getPackageManager().refreshAvailablePackages(!1).then((()=>{a=!0,t&&o.Notification.dismiss(t)})).catch((e=>{console.debug("Fail to cache available packages list.",e),t&&o.Notification.dismiss(t)})),setTimeout((()=>{a||(t=o.Notification.emit("Loading the available packages list in background...","in-progress"),n.length>0&&i(n.pop()))}),6e4)}}(C||(C={}))}}]);