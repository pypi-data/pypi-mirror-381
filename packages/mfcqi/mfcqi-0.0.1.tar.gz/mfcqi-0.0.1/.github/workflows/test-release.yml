name: Test Release to Test PyPI

on:
  workflow_call:
    outputs:
      version:
        description: "Package version"
        value: ${{ jobs.build.outputs.version }}
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.check-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install build dependencies
        run: |
          uv pip install --system build twine tomli

      # We want to keep this build stage *separate* from the release stage,
      # so that there's no sharing of permissions between them.
      # The release stage has trusted publishing and GitHub repo contents write access,
      # and we want to keep the scope of that access limited just to the release job.
      # Otherwise, a malicious `build` step (e.g. via a compromised dependency)
      # could get access to our GitHub or PyPI credentials.
      #
      # Per the trusted publishing GitHub Action:
      # > It is strongly advised to separate jobs for building [...]
      # > from the publish job.
      # https://github.com/pypa/gh-action-pypi-publish#non-goals
      - name: Build project for distribution
        run: python -m build

      - name: Check built package
        run: python -m twine check dist/*

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: test-dist
          path: dist/

      - name: Check Version
        id: check-version
        shell: bash
        run: |
          VERSION=$(python -c "
          try:
              import tomllib
          except ModuleNotFoundError:
              import tomli as tomllib
          print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])
          ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

  publish-test-pypi:
    needs:
      - build
    runs-on: ubuntu-latest
    environment: release

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: test-dist
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true
          print-hash: true
          # We overwrite any existing distributions with the same name and version.
          # This is *only for CI use* and is *extremely dangerous* otherwise!
          # https://github.com/pypa/gh-action-pypi-publish#tolerating-release-package-file-duplicates
          skip-existing: true
          attestations: false

  validate-test-pypi:
    needs:
      - build
      - publish-test-pypi
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      # We explicitly *don't* set up caching here. This ensures our tests are
      # maximally sensitive to catching breakage.
      #
      # For example, here's a way that caching can cause a falsely-passing test:
      # - Make the package manifest no longer list a dependency package
      #   as a requirement. This means it won't be installed by `pip install`,
      #   and attempting to use it would cause a crash.
      # - That dependency used to be required, so it may have been cached.
      #   When restoring the venv packages from cache, that dependency gets included.
      # - Tests pass, because the dependency is present even though it wasn't specified.
      # - The package is published, and it breaks on the missing dependency when
      #   used in the real world.

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3

      - name: Upgrade setuptools with UV
        run: |
          uv pip install --system "setuptools>=40.8.0" wheel

      - name: Install from Test PyPI
        env:
          VERSION: ${{ needs.build.outputs.version }}
        # Here we use:
        # - The default regular PyPI index as the *primary* index, meaning
        #   that it takes priority (https://pypi.org/simple)
        # - The test PyPI index as an extra index, so that any dependencies that
        #   are not found on test PyPI can be resolved and installed anyway.
        #   (https://test.pypi.org/simple). This will include mfcqi==VERSION
        #   package because VERSION will not have been uploaded to regular PyPI yet.
        # - --index-strategy unsafe-best-match allows UV to find dependencies
        #   (like setuptools) from all indexes, not just the first one
        # - attempt install again after 5 seconds if it fails because there is
        #   sometimes a delay in availability on test pypi
        run: |
          uv pip install --system \
            --index-strategy unsafe-best-match \
            --extra-index-url https://test.pypi.org/simple/ \
            "mfcqi==$VERSION" || \
          ( \
            sleep 5 && \
            uv pip install --system \
              --index-strategy unsafe-best-match \
              --extra-index-url https://test.pypi.org/simple/ \
              "mfcqi==$VERSION" \
          )

      - name: Verify package import
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          python -c "import mfcqi; print(f'mfcqi version: {mfcqi.__version__}')"
          echo "✅ Package import successful"

      - name: Verify CLI works
        run: |
          mfcqi --version
          echo "✅ CLI executable works"

      - name: Install test dependencies
        run: |
          uv sync --dev

      - name: Reinstall package from Test PyPI (overwrite editable install)
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          uv pip install --system \
            --extra-index-url https://test.pypi.org/simple/ \
            --force-reinstall --no-deps \
            "mfcqi==$VERSION"

      - name: Run smoke tests
        env:
          MFCQI_DISABLE_KEYRING: "1"
          ANTHROPIC_API_KEY: ""
          OPENAI_API_KEY: ""
        run: |
          # Run a subset of critical tests to verify package works
          uv run pytest tests/test_cognitive_complexity.py -v
          uv run pytest tests/test_cyclomatic_complexity.py -v
          echo "✅ Smoke tests passed"

      - name: Test self-analysis
        env:
          MFCQI_DISABLE_KEYRING: "1"
        run: |
          # Verify MFCQI can analyze code
          mfcqi analyze src/mfcqi --format json --silent > /tmp/mfcqi_test.json

          # Verify output is valid JSON
          python -c "import json; data = json.load(open('/tmp/mfcqi_test.json')); print(f\"MFCQI Score: {data['mfcqi_score']}\")"
          echo "✅ Self-analysis works"
