# coding: utf-8

"""
    Kestra EE

    All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kestra_api_client.models.cluster_controller_api_plugin_version_details_api_plugin_classes import ClusterControllerApiPluginVersionDetailsApiPluginClasses
from typing import Optional, Set
from typing_extensions import Self

class ClusterControllerApiPluginVersionDetails(BaseModel):
    """
    ClusterControllerApiPluginVersionDetails
    """ # noqa: E501
    artifact_id: Optional[StrictStr] = Field(default=None, alias="artifactId")
    group_id: Optional[StrictStr] = Field(default=None, alias="groupId")
    version: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    classes: Optional[List[ClusterControllerApiPluginVersionDetailsApiPluginClasses]] = None
    __properties: ClassVar[List[str]] = ["artifactId", "groupId", "version", "title", "description", "icon", "classes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterControllerApiPluginVersionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in classes (list)
        _items = []
        if self.classes:
            for _item_classes in self.classes:
                if _item_classes:
                    _items.append(_item_classes.to_dict())
            _dict['classes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterControllerApiPluginVersionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactId": obj.get("artifactId"),
            "groupId": obj.get("groupId"),
            "version": obj.get("version"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "icon": obj.get("icon"),
            "classes": [ClusterControllerApiPluginVersionDetailsApiPluginClasses.from_dict(_item) for _item in obj["classes"]] if obj.get("classes") is not None else None
        })
        return _obj


