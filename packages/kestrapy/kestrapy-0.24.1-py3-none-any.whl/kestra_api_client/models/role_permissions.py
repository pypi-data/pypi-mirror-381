# coding: utf-8

"""
    Kestra EE

    All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/> This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RolePermissions(BaseModel):
    """
    RolePermissions
    """ # noqa: E501
    flow: Optional[List[StrictStr]] = Field(default=None, alias="FLOW")
    blueprint: Optional[List[StrictStr]] = Field(default=None, alias="BLUEPRINT")
    template: Optional[List[StrictStr]] = Field(default=None, alias="TEMPLATE")
    namespace: Optional[List[StrictStr]] = Field(default=None, alias="NAMESPACE")
    execution: Optional[List[StrictStr]] = Field(default=None, alias="EXECUTION")
    user: Optional[List[StrictStr]] = Field(default=None, alias="USER")
    group: Optional[List[StrictStr]] = Field(default=None, alias="GROUP")
    role: Optional[List[StrictStr]] = Field(default=None, alias="ROLE")
    binding: Optional[List[StrictStr]] = Field(default=None, alias="BINDING")
    auditlog: Optional[List[StrictStr]] = Field(default=None, alias="AUDITLOG")
    secret: Optional[List[StrictStr]] = Field(default=None, alias="SECRET")
    kvstore: Optional[List[StrictStr]] = Field(default=None, alias="KVSTORE")
    impersonate: Optional[List[StrictStr]] = Field(default=None, alias="IMPERSONATE")
    setting: Optional[List[StrictStr]] = Field(default=None, alias="SETTING")
    infrastructure: Optional[List[StrictStr]] = Field(default=None, alias="INFRASTRUCTURE")
    app: Optional[List[StrictStr]] = Field(default=None, alias="APP")
    appexecution: Optional[List[StrictStr]] = Field(default=None, alias="APPEXECUTION")
    test: Optional[List[StrictStr]] = Field(default=None, alias="TEST")
    me: Optional[List[StrictStr]] = Field(default=None, alias="ME")
    apitoken: Optional[List[StrictStr]] = Field(default=None, alias="APITOKEN")
    dashboard: Optional[List[StrictStr]] = Field(default=None, alias="DASHBOARD")
    tenant: Optional[List[StrictStr]] = Field(default=None, alias="TENANT")
    unknown: Optional[List[StrictStr]] = Field(default=None, alias="UNKNOWN")
    __properties: ClassVar[List[str]] = ["FLOW", "BLUEPRINT", "TEMPLATE", "NAMESPACE", "EXECUTION", "USER", "GROUP", "ROLE", "BINDING", "AUDITLOG", "SECRET", "KVSTORE", "IMPERSONATE", "SETTING", "INFRASTRUCTURE", "APP", "APPEXECUTION", "TEST", "ME", "APITOKEN", "DASHBOARD", "TENANT", "UNKNOWN"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RolePermissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RolePermissions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FLOW": obj.get("FLOW"),
            "BLUEPRINT": obj.get("BLUEPRINT"),
            "TEMPLATE": obj.get("TEMPLATE"),
            "NAMESPACE": obj.get("NAMESPACE"),
            "EXECUTION": obj.get("EXECUTION"),
            "USER": obj.get("USER"),
            "GROUP": obj.get("GROUP"),
            "ROLE": obj.get("ROLE"),
            "BINDING": obj.get("BINDING"),
            "AUDITLOG": obj.get("AUDITLOG"),
            "SECRET": obj.get("SECRET"),
            "KVSTORE": obj.get("KVSTORE"),
            "IMPERSONATE": obj.get("IMPERSONATE"),
            "SETTING": obj.get("SETTING"),
            "INFRASTRUCTURE": obj.get("INFRASTRUCTURE"),
            "APP": obj.get("APP"),
            "APPEXECUTION": obj.get("APPEXECUTION"),
            "TEST": obj.get("TEST"),
            "ME": obj.get("ME"),
            "APITOKEN": obj.get("APITOKEN"),
            "DASHBOARD": obj.get("DASHBOARD"),
            "TENANT": obj.get("TENANT"),
            "UNKNOWN": obj.get("UNKNOWN")
        })
        return _obj


