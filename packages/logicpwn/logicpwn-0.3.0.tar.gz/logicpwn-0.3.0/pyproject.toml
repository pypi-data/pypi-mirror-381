[tool.poetry]
name = "logicpwn"
version = "0.3.0"
description = "LogicPwn represents a paradigm shift from traditional security testing toward intelligent, business-aware security automation. Its unique focus on business logic vulnerabilities, combined with enterprise-grade performance and comprehensive documentation, positions it as a leader in the next generation of security testing tools."
authors = ["Jash Naik <jashnaik2004@gmail.com>"]
readme = "README.md"
packages = [{include = "logicpwn"}]

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.31.0"
pydantic = "^2.5.0"
loguru = "^0.7.2"
aiohttp = "^3.9.0"
psutil = "^5.9.0"
sphinx = "^7.4.7"
sphinx-rtd-theme = "^3.0.2"
pytest-asyncio = "<1.0"
tenacity = "^9.1.2"
jsonpath-ng = "^1.7.0"
cryptography = "^42.0.0"
regex = "^2023.12.25"
qrcode = "^8.2"
pyyaml = "^6.0.2"
websockets = "^15.0.1"
pyjwt = "^2.10.1"
httpx = "^0.28.1"

[tool.poetry.extras]
# Authentication module (for selective installations)
auth = [
    "requests",
    "pydantic",
    "loguru",
    "cryptography",
    "qrcode"
]

# Runner module (for selective installations)
runner = [
    "requests",
    "pydantic",
    "loguru",
    "aiohttp",
    "pytest-asyncio"
]

# Access detection module (for selective installations)
access = [
    "requests",
    "pydantic",
    "loguru"
]

# Validator module (for selective installations)
validator = [
    "requests",
    "pydantic",
    "loguru",
    "jsonpath-ng",
    "regex"
]

# Reporter module (for selective installations)
reporter = [
    "requests",
    "pydantic",
    "loguru",
    "pyyaml"
]

# Performance monitoring module (for selective installations)
performance = [
    "requests",
    "pydantic",
    "loguru",
    "psutil"
]

# Stress testing module (for selective installations)
stress = [
    "requests",
    "pydantic",
    "loguru",
    "psutil",
    "aiohttp",
    "pytest-asyncio"
]

# Exploit engine module (for selective installations)
exploit = [
    "requests",
    "pydantic",
    "loguru",
    "pyyaml"
]

# Reliability features (for selective installations)
reliability = [
    "requests",
    "pydantic",
    "loguru",
    "tenacity"
]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
twine = "^6.1.0"
pre-commit = "^4.3.0"
black = "^25.1.0"
isort = "^6.0.1"
flake8 = "^7.3.0"
autoflake = "^2.3.1"
bandit = "^1.8.6"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | docs
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["logicpwn", "tests", "examples"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["logicpwn"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
