import argparse

from slurm_script_generator.sbatch import Pragma

pragmas = [
    Pragma(
        flags=["-A", "--account"],
        dest="account",
        metavar="NAME",
        help="charge job to specified account",
        example="myacct",
    ),
    Pragma(
        flags=["-b", "--begin"],
        dest="begin",
        metavar="TIME",
        help="defer job until HH:MM MM/DD/YY",
    ),
    Pragma(
        flags=["--bell"],
        dest="bell",
        action="store_true",
        help="ring the terminal bell when the job is allocated",
    ),
    Pragma(
        flags=["--no-bell"],
        dest="bell",
        action="store_false",
        help="do NOT ring the terminal bell",
    ),
    Pragma(
        flags=["--bb"],
        dest="burst_buffer",
        metavar="SPEC",
        help="burst buffer specifications",
    ),
    Pragma(
        flags=["--bbf"],
        dest="bb_file",
        metavar="FILE_NAME",
        help="burst buffer specification file",
    ),
    Pragma(
        flags=["-c", "--cpus-per-task"],
        dest="cpus_per_task",
        type=int,
        metavar="NCPUS",
        help="number of cpus required per task",
        example=16,
    ),
    Pragma(
        flags=["--comment"],
        dest="comment",
        metavar="NAME",
        help="arbitrary comment",
    ),
    Pragma(
        flags=["--container"],
        dest="container",
        metavar="PATH",
        help="Path to OCI container bundle",
    ),
    Pragma(
        flags=["--container-id"],
        dest="container_id",
        metavar="ID",
        help="OCI container ID",
    ),
    Pragma(
        flags=["--cpu-freq"],
        dest="cpu_freq",
        metavar="MIN[-MAX[:GOV]]",
        help="requested cpu frequency (and governor)",
    ),
    Pragma(
        flags=["--delay-boot"],
        dest="delay_boot",
        type=int,
        metavar="MINS",
        help="delay boot for desired node features",
    ),
    Pragma(
        flags=["-d", "--dependency"],
        dest="dependency",
        metavar="TYPE:JOBID[:TIME]",
        help="defer job until condition on jobid is satisfied",
    ),
    Pragma(
        flags=["--deadline"],
        dest="deadline",
        metavar="TIME",
        help="remove the job if no ending possible before this deadline",
    ),
    Pragma(
        flags=["-D", "--chdir"],
        dest="chdir",
        metavar="PATH",
        help="change working directory",
    ),
    Pragma(
        flags=["--get-user-env"],
        dest="get_user_env",
        action="store_true",
        help="used by Moab. See srun man page",
    ),
    Pragma(
        flags=["--gres"],
        dest="gres",
        metavar="LIST",
        type=lambda s: s.split(","),
        help="required generic resources",
    ),
    Pragma(
        flags=["--gres-flags"],
        dest="gres_flags",
        metavar="OPTS",
        help="flags related to GRES management",
    ),
    Pragma(
        flags=["-H", "--hold"],
        dest="hold",
        action="store_true",
        help="submit job in held state",
    ),
    Pragma(
        flags=["-I", "--immediate"],
        dest="immediate",
        nargs="?",
        const=0,
        metavar="SECS",
        type=int,
        help='exit if resources not available in "secs"',
    ),
    Pragma(
        flags=["-J", "--job-name"],
        dest="job_name",
        metavar="NAME",
        help="name of job",
        example="my_job",
    ),
    Pragma(
        flags=["-k", "--no-kill"],
        dest="no_kill",
        action="store_true",
        help="do not kill job on node failure",
    ),
    Pragma(
        flags=["-K", "--kill-command"],
        dest="kill_command",
        nargs="?",
        const="TERM",
        metavar="SIGNAL",
        help="signal to send terminating job",
    ),
    Pragma(
        flags=["-L", "--licenses"],
        dest="licenses",
        metavar="NAMES",
        type=lambda s: s.split(","),
        help="required license, comma separated",
    ),
    Pragma(
        flags=["-M", "--clusters"],
        dest="clusters",
        metavar="NAMES",
        type=lambda s: s.split(","),
        help="Comma separated list of clusters to issue commands to",
    ),
    Pragma(
        flags=["-m", "--distribution"],
        dest="distribution",
        metavar="TYPE",
        choices=["block", "cyclic", "arbitrary"],
        help="distribution method for processes to nodes",
    ),
    Pragma(
        flags=["--mail-type"],
        dest="mail_type",
        metavar="TYPE",
        choices=["BEGIN", "END", "FAIL", "ALL"],
        help="notify on state change",
        example="ALL",
    ),
    Pragma(
        flags=["--mail-user"],
        dest="mail_user",
        metavar="USER",
        help="who to send email notification for job state changes",
        example="example@email.com",
    ),
    Pragma(
        flags=["--mcs-label"],
        dest="mcs_label",
        metavar="MCS",
        help="mcs label if mcs plugin mcs/group is used",
    ),
    Pragma(
        flags=["-n", "--ntasks"],
        dest="ntasks",
        type=int,
        metavar="N",
        help="number of processors required",
        example=16,
    ),
    Pragma(
        flags=["--nice"],
        dest="nice",
        type=int,
        metavar="VALUE",
        help="decrease scheduling priority by value",
        example=1,
    ),
    Pragma(
        flags=["-N", "--nodes"],
        dest="nodes",
        metavar="NODES",
        help="number of nodes on which to run",
        example=2,
    ),
    Pragma(
        flags=["--ntasks-per-node"],
        dest="ntasks_per_node",
        type=int,
        metavar="N",
        help="number of tasks to invoke on each node",
        example=16,
    ),
    Pragma(
        flags=["--oom-kill-step"],
        dest="oom_kill_step",
        nargs="?",
        const=1,
        type=int,
        metavar="0|1",
        help="set the OOMKillStep behaviour",
    ),
    Pragma(
        flags=["-O", "--overcommit"],
        dest="overcommit",
        action="store_true",
        help="overcommit resources",
    ),
    Pragma(
        flags=["--power"],
        dest="power",
        metavar="FLAGS",
        help="power management options",
    ),
    Pragma(
        flags=["--priority"],
        dest="priority",
        metavar="VALUE",
        type=int,
        help="set the priority of the job",
    ),
    Pragma(
        flags=["--profile"],
        dest="profile",
        metavar="VALUE",
        help="enable acct_gather_profile for detailed data",
    ),
    Pragma(
        flags=["-p", "--partition"],
        dest="partition",
        metavar="PARTITION",
        help="partition requested",
    ),
    Pragma(flags=["-q", "--qos"], dest="qos", metavar="QOS", help="quality of service"),
    Pragma(
        flags=["-Q", "--quiet"],
        dest="quiet",
        action="store_true",
        help="quiet mode (suppress informational messages)",
    ),
    Pragma(
        flags=["--reboot"],
        dest="reboot",
        action="store_true",
        help="reboot compute nodes before starting job",
    ),
    Pragma(
        flags=["-s", "--oversubscribe"],
        dest="oversubscribe",
        action="store_true",
        help="oversubscribe resources with other jobs",
    ),
    Pragma(
        flags=["--signal"],
        dest="signal",
        metavar="[R:]NUM[@TIME]",
        help="send signal when time limit within time seconds",
    ),
    Pragma(
        flags=["--spread-job"],
        dest="spread_job",
        action="store_true",
        help="spread job across as many nodes as possible",
    ),
    Pragma(
        flags=["--switches"],
        dest="switches",
        metavar="MAX_SWITCHES[@MAX_TIME]",
        help="optimum switches and max time to wait for optimum",
    ),
    Pragma(
        flags=["-S", "--core-spec"],
        dest="core_spec",
        metavar="CORES",
        help="count of reserved cores",
    ),
    Pragma(
        flags=["--thread-spec"],
        dest="thread_spec",
        metavar="THREADS",
        help="count of reserved threads",
    ),
    Pragma(
        flags=["-t", "--time"],
        dest="time",
        metavar="MINUTES",
        type=int,
        help="time limit",
        example="00:45:00",
    ),
    Pragma(
        flags=["--time-min"],
        dest="time_min",
        metavar="MINUTES",
        type=int,
        help="minimum time limit (if distinct)",
    ),
    Pragma(
        flags=["--tres-bind"],
        dest="tres_bind",
        metavar="...",
        help="task to tres binding options",
    ),
    Pragma(
        flags=["--tres-per-task"],
        dest="tres_per_task",
        metavar="LIST",
        type=lambda s: s.split(","),
        help="list of tres required per task",
    ),
    Pragma(
        flags=["--use-min-nodes"],
        dest="use_min_nodes",
        action="store_true",
        help="if a range of node counts is given, prefer the smaller count",
    ),
    Pragma(
        flags=["--wckey"], dest="wckey", metavar="WCKEY", help="wckey to run job under"
    ),
    Pragma(
        flags=["--cluster-constraint"],
        dest="cluster_constraint",
        metavar="LIST",
        type=lambda s: s.split(","),
        help="specify a list of cluster constraints",
    ),
    Pragma(
        flags=["--contiguous"],
        dest="contiguous",
        action="store_true",
        help="demand a contiguous range of nodes",
    ),
    Pragma(
        flags=["-C", "--constraint"],
        dest="constraint",
        metavar="LIST",
        type=lambda s: s.split(","),
        help="specify a list of constraints",
    ),
    Pragma(
        flags=["-F", "--nodefile"],
        dest="nodefile",
        metavar="FILENAME",
        help="request a specific list of hosts",
    ),
    Pragma(
        flags=["--mem"],
        dest="mem",
        metavar="MB",
        type=int,
        help="minimum amount of real memory",
        example="25GB",
    ),
    Pragma(
        flags=["--mincpus"],
        dest="mincpus",
        metavar="N",
        type=int,
        help="minimum number of logical processors per node",
    ),
    Pragma(
        flags=["--reservation"],
        dest="reservation",
        metavar="NAME",
        help="allocate resources from named reservation",
    ),
    Pragma(
        flags=["--tmp"],
        dest="tmp",
        metavar="MB",
        type=int,
        help="minimum amount of temporary disk",
    ),
    Pragma(
        flags=["-w", "--nodelist"],
        dest="nodelist",
        nargs="+",
        metavar="HOST",
        help="request a specific list of hosts",
    ),
    Pragma(
        flags=["-x", "--exclude"],
        dest="exclude",
        nargs="+",
        metavar="HOST",
        help="exclude a specific list of hosts",
    ),
    Pragma(
        flags=["--exclusive-user"],
        dest="exclusive_user",
        action="store_true",
        help="allocate nodes in exclusive mode for cpu consumable resource",
    ),
    Pragma(
        flags=["--exclusive-mcs"],
        dest="exclusive_mcs",
        action="store_true",
        help="allocate nodes in exclusive mode when mcs plugin is enabled",
    ),
    Pragma(
        flags=["--mem-per-cpu"],
        dest="mem_per_cpu",
        metavar="MB",
        type=int,
        help="maximum amount of real memory per allocated cpu",
    ),
    Pragma(
        flags=["--resv-ports"],
        dest="resv_ports",
        action="store_true",
        help="reserve communication ports",
    ),
    Pragma(
        flags=["--sockets-per-node"],
        dest="sockets_per_node",
        metavar="S",
        type=int,
        help="number of sockets per node to allocate",
    ),
    Pragma(
        flags=["--cores-per-socket"],
        dest="cores_per_socket",
        metavar="C",
        type=int,
        help="number of cores per socket to allocate",
        example=8,
    ),
    Pragma(
        flags=["--threads-per-core"],
        dest="threads_per_core",
        metavar="T",
        type=int,
        help="number of threads per core to allocate",
        example=4,
    ),
    Pragma(
        flags=["-B", "--extra-node-info"],
        dest="extra_node_info",
        metavar="S[:C[:T]]",
        help="combine request of sockets, cores and threads",
    ),
    Pragma(
        flags=["--ntasks-per-core"],
        dest="ntasks_per_core",
        metavar="N",
        type=int,
        help="number of tasks to invoke on each core",
        example=16,
    ),
    Pragma(
        flags=["--ntasks-per-socket"],
        dest="ntasks_per_socket",
        metavar="N",
        type=int,
        help="number of tasks to invoke on each socket",
        example=8,
    ),
    Pragma(
        flags=["--hint"],
        dest="hint",
        metavar="HINT",
        help="Bind tasks according to application hints",
    ),
    Pragma(
        flags=["--mem-bind"],
        dest="mem_bind",
        metavar="BIND",
        help="Bind memory to locality domains",
    ),
    Pragma(
        flags=["--cpus-per-gpu"],
        dest="cpus_per_gpu",
        metavar="N",
        type=int,
        help="number of CPUs required per allocated GPU",
        example=4,
    ),
    Pragma(
        flags=["-G", "--gpus"],
        dest="gpus",
        metavar="N",
        type=int,
        help="count of GPUs required for the job",
        example=32,
    ),
    Pragma(
        flags=["--gpu-bind"],
        dest="gpu_bind",
        metavar="...",
        help="task to gpu binding options",
    ),
    Pragma(
        flags=["--gpu-freq"],
        dest="gpu_freq",
        metavar="...",
        help="frequency and voltage of GPUs",
    ),
    Pragma(
        flags=["--gpus-per-node"],
        dest="gpus_per_node",
        metavar="N",
        type=int,
        help="number of GPUs required per allocated node",
    ),
    Pragma(
        flags=["--gpus-per-socket"],
        dest="gpus_per_socket",
        metavar="N",
        type=int,
        help="number of GPUs required per allocated socket",
    ),
    Pragma(
        flags=["--gpus-per-task"],
        dest="gpus_per_task",
        metavar="N",
        type=int,
        help="number of GPUs required per spawned task",
    ),
    Pragma(
        flags=["--mem-per-gpu"],
        dest="mem_per_gpu",
        type=str,
        help="real memory required per allocated GPU",
        example="8GB",
    ),
    Pragma(
        flags=["--disable-stdout-job-summary"],
        dest="disable_stdout_job_summary",
        action="store_true",
        help="disable job summary in stdout file for the job",
    ),
    Pragma(
        flags=["--nvmps"],
        dest="nvmps",
        action="store_true",
        help="launching NVIDIA MPS for job",
    ),
]
