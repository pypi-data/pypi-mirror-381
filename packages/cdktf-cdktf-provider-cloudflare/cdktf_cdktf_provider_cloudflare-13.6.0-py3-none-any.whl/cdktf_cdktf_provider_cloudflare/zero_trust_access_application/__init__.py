r'''
# `cloudflare_zero_trust_access_application`

Refer to the Terraform Registry for docs: [`cloudflare_zero_trust_access_application`](https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application).
'''
from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)

import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

import typeguard
from importlib.metadata import version as _metadata_package_version
TYPEGUARD_MAJOR_VERSION = int(_metadata_package_version('typeguard').split('.')[0])

def check_type(argname: str, value: object, expected_type: typing.Any) -> typing.Any:
    if TYPEGUARD_MAJOR_VERSION <= 2:
        return typeguard.check_type(argname=argname, value=value, expected_type=expected_type) # type:ignore
    else:
        if isinstance(value, jsii._reference_map.InterfaceDynamicProxy): # pyright: ignore [reportAttributeAccessIssue]
           pass
        else:
            if TYPEGUARD_MAJOR_VERSION == 3:
                typeguard.config.collection_check_strategy = typeguard.CollectionCheckStrategy.ALL_ITEMS # type:ignore
                typeguard.check_type(value=value, expected_type=expected_type) # type:ignore
            else:
                typeguard.check_type(value=value, expected_type=expected_type, collection_check_strategy=typeguard.CollectionCheckStrategy.ALL_ITEMS) # type:ignore

from .._jsii import *

import cdktf as _cdktf_9a9027ec
import constructs as _constructs_77d1e7e8


class ZeroTrustAccessApplication(
    _cdktf_9a9027ec.TerraformResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplication",
):
    '''Represents a {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application cloudflare_zero_trust_access_application}.'''

    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        account_id: typing.Optional[builtins.str] = None,
        allow_authenticate_via_warp: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allowed_idps: typing.Optional[typing.Sequence[builtins.str]] = None,
        allow_iframe: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        app_launcher_logo_url: typing.Optional[builtins.str] = None,
        app_launcher_visible: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        auto_redirect_to_identity: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        bg_color: typing.Optional[builtins.str] = None,
        cors_headers: typing.Optional[typing.Union["ZeroTrustAccessApplicationCorsHeaders", typing.Dict[builtins.str, typing.Any]]] = None,
        custom_deny_message: typing.Optional[builtins.str] = None,
        custom_deny_url: typing.Optional[builtins.str] = None,
        custom_non_identity_deny_url: typing.Optional[builtins.str] = None,
        custom_pages: typing.Optional[typing.Sequence[builtins.str]] = None,
        destinations: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationDestinations", typing.Dict[builtins.str, typing.Any]]]]] = None,
        domain: typing.Optional[builtins.str] = None,
        enable_binding_cookie: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        footer_links: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationFooterLinks", typing.Dict[builtins.str, typing.Any]]]]] = None,
        header_bg_color: typing.Optional[builtins.str] = None,
        http_only_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        landing_page_design: typing.Optional[typing.Union["ZeroTrustAccessApplicationLandingPageDesign", typing.Dict[builtins.str, typing.Any]]] = None,
        logo_url: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        options_preflight_bypass: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        path_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        policies: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationPolicies", typing.Dict[builtins.str, typing.Any]]]]] = None,
        read_service_tokens_from_header: typing.Optional[builtins.str] = None,
        saas_app: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasApp", typing.Dict[builtins.str, typing.Any]]] = None,
        same_site_cookie_attribute: typing.Optional[builtins.str] = None,
        scim_config: typing.Optional[typing.Union["ZeroTrustAccessApplicationScimConfig", typing.Dict[builtins.str, typing.Any]]] = None,
        self_hosted_domains: typing.Optional[typing.Sequence[builtins.str]] = None,
        service_auth401_redirect: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        session_duration: typing.Optional[builtins.str] = None,
        skip_app_launcher_login_page: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        skip_interstitial: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        tags: typing.Optional[typing.Sequence[builtins.str]] = None,
        target_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationTargetCriteria", typing.Dict[builtins.str, typing.Any]]]]] = None,
        type: typing.Optional[builtins.str] = None,
        zone_id: typing.Optional[builtins.str] = None,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''Create a new {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application cloudflare_zero_trust_access_application} Resource.

        :param scope: The scope in which to define this construct.
        :param id: The scoped construct ID. Must be unique amongst siblings in the same scope
        :param account_id: The Account ID to use for this endpoint. Mutually exclusive with the Zone ID. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#account_id ZeroTrustAccessApplication#account_id}
        :param allow_authenticate_via_warp: When set to true, users can authenticate to this application using their WARP session. When set to false this application will always require direct IdP authentication. This setting always overrides the organization setting for WARP authentication. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_authenticate_via_warp ZeroTrustAccessApplication#allow_authenticate_via_warp}
        :param allowed_idps: The identity providers your users can select when connecting to this application. Defaults to all IdPs configured in your account. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_idps ZeroTrustAccessApplication#allowed_idps}
        :param allow_iframe: Enables loading application content in an iFrame. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_iframe ZeroTrustAccessApplication#allow_iframe}
        :param app_launcher_logo_url: The image URL of the logo shown in the App Launcher header. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_logo_url ZeroTrustAccessApplication#app_launcher_logo_url}
        :param app_launcher_visible: Displays the application in the App Launcher. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_visible ZeroTrustAccessApplication#app_launcher_visible}
        :param auto_redirect_to_identity: When set to ``true``, users skip the identity provider selection step during login. You must specify only one identity provider in allowed_idps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auto_redirect_to_identity ZeroTrustAccessApplication#auto_redirect_to_identity}
        :param bg_color: The background color of the App Launcher page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#bg_color ZeroTrustAccessApplication#bg_color}
        :param cors_headers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#cors_headers ZeroTrustAccessApplication#cors_headers}.
        :param custom_deny_message: The custom error message shown to a user when they are denied access to the application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_deny_message ZeroTrustAccessApplication#custom_deny_message}
        :param custom_deny_url: The custom URL a user is redirected to when they are denied access to the application when failing identity-based rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_deny_url ZeroTrustAccessApplication#custom_deny_url}
        :param custom_non_identity_deny_url: The custom URL a user is redirected to when they are denied access to the application when failing non-identity rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_non_identity_deny_url ZeroTrustAccessApplication#custom_non_identity_deny_url}
        :param custom_pages: The custom pages that will be displayed when applicable for this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_pages ZeroTrustAccessApplication#custom_pages}
        :param destinations: List of destinations secured by Access. This supersedes ``self_hosted_domains`` to allow for more flexibility in defining different types of domains. If ``destinations`` are provided, then ``self_hosted_domains`` will be ignored. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#destinations ZeroTrustAccessApplication#destinations}
        :param domain: The primary hostname and path secured by Access. This domain will be displayed if the app is visible in the App Launcher. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        :param enable_binding_cookie: Enables the binding cookie, which increases security against compromised authorization tokens and CSRF attacks. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enable_binding_cookie ZeroTrustAccessApplication#enable_binding_cookie}
        :param footer_links: The links in the App Launcher footer. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#footer_links ZeroTrustAccessApplication#footer_links}
        :param header_bg_color: The background color of the App Launcher header. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#header_bg_color ZeroTrustAccessApplication#header_bg_color}
        :param http_only_cookie_attribute: Enables the HttpOnly cookie attribute, which increases security against XSS attacks. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#http_only_cookie_attribute ZeroTrustAccessApplication#http_only_cookie_attribute}
        :param landing_page_design: The design of the App Launcher landing page shown to users when they log in. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#landing_page_design ZeroTrustAccessApplication#landing_page_design}
        :param logo_url: The image URL for the logo shown in the App Launcher dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#logo_url ZeroTrustAccessApplication#logo_url}
        :param name: The name of the application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param options_preflight_bypass: Allows options preflight requests to bypass Access authentication and go directly to the origin. Cannot turn on if cors_headers is set. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#options_preflight_bypass ZeroTrustAccessApplication#options_preflight_bypass}
        :param path_cookie_attribute: Enables cookie paths to scope an application's JWT to the application path. If disabled, the JWT will scope to the hostname by default Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#path_cookie_attribute ZeroTrustAccessApplication#path_cookie_attribute}
        :param policies: The policies that Access applies to the application, in ascending order of precedence. Items can reference existing policies or create new policies exclusive to the application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#policies ZeroTrustAccessApplication#policies}
        :param read_service_tokens_from_header: Allows matching Access Service Tokens passed HTTP in a single header with this name. This works as an alternative to the (CF-Access-Client-Id, CF-Access-Client-Secret) pair of headers. The header value will be interpreted as a json object similar to: { "cf-access-client-id": "88bf3b6d86161464f6509f7219099e57.access.example.com", "cf-access-client-secret": "bdd31cbc4dec990953e39163fbbb194c93313ca9f0a6e420346af9d326b1d2a5" } Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#read_service_tokens_from_header ZeroTrustAccessApplication#read_service_tokens_from_header}
        :param saas_app: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saas_app ZeroTrustAccessApplication#saas_app}.
        :param same_site_cookie_attribute: Sets the SameSite cookie setting, which provides increased security against CSRF attacks. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#same_site_cookie_attribute ZeroTrustAccessApplication#same_site_cookie_attribute}
        :param scim_config: Configuration for provisioning to this application via SCIM. This is currently in closed beta. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scim_config ZeroTrustAccessApplication#scim_config}
        :param self_hosted_domains: List of public domains that Access will secure. This field is deprecated in favor of ``destinations`` and will be supported until **November 21, 2025.** If ``destinations`` are provided, then ``self_hosted_domains`` will be ignored. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#self_hosted_domains ZeroTrustAccessApplication#self_hosted_domains}
        :param service_auth401_redirect: Returns a 401 status code when the request is blocked by a Service Auth policy. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_auth_401_redirect ZeroTrustAccessApplication#service_auth_401_redirect}
        :param session_duration: The amount of time that tokens issued for this application will be valid. Must be in the format ``300ms`` or ``2h45m``. Valid time units are: ns, us (or µs), ms, s, m, h. Note: unsupported for infrastructure type applications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#session_duration ZeroTrustAccessApplication#session_duration}
        :param skip_app_launcher_login_page: Determines when to skip the App Launcher landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#skip_app_launcher_login_page ZeroTrustAccessApplication#skip_app_launcher_login_page}
        :param skip_interstitial: Enables automatic authentication through cloudflared. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#skip_interstitial ZeroTrustAccessApplication#skip_interstitial}
        :param tags: The tags you want assigned to an application. Tags are used to filter applications in the App Launcher dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#tags ZeroTrustAccessApplication#tags}
        :param target_criteria: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#target_criteria ZeroTrustAccessApplication#target_criteria}.
        :param type: The application type. Available values: "self_hosted", "saas", "ssh", "vnc", "app_launcher", "warp", "biso", "bookmark", "dash_sso", "infrastructure", "rdp". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#type ZeroTrustAccessApplication#type}
        :param zone_id: The Zone ID to use for this endpoint. Mutually exclusive with the Account ID. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#zone_id ZeroTrustAccessApplication#zone_id}
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27338aeeecd2e31c5778c77e6b90d648344d66ce330b5d2a91fa9403173c8b94)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        config = ZeroTrustAccessApplicationConfig(
            account_id=account_id,
            allow_authenticate_via_warp=allow_authenticate_via_warp,
            allowed_idps=allowed_idps,
            allow_iframe=allow_iframe,
            app_launcher_logo_url=app_launcher_logo_url,
            app_launcher_visible=app_launcher_visible,
            auto_redirect_to_identity=auto_redirect_to_identity,
            bg_color=bg_color,
            cors_headers=cors_headers,
            custom_deny_message=custom_deny_message,
            custom_deny_url=custom_deny_url,
            custom_non_identity_deny_url=custom_non_identity_deny_url,
            custom_pages=custom_pages,
            destinations=destinations,
            domain=domain,
            enable_binding_cookie=enable_binding_cookie,
            footer_links=footer_links,
            header_bg_color=header_bg_color,
            http_only_cookie_attribute=http_only_cookie_attribute,
            landing_page_design=landing_page_design,
            logo_url=logo_url,
            name=name,
            options_preflight_bypass=options_preflight_bypass,
            path_cookie_attribute=path_cookie_attribute,
            policies=policies,
            read_service_tokens_from_header=read_service_tokens_from_header,
            saas_app=saas_app,
            same_site_cookie_attribute=same_site_cookie_attribute,
            scim_config=scim_config,
            self_hosted_domains=self_hosted_domains,
            service_auth401_redirect=service_auth401_redirect,
            session_duration=session_duration,
            skip_app_launcher_login_page=skip_app_launcher_login_page,
            skip_interstitial=skip_interstitial,
            tags=tags,
            target_criteria=target_criteria,
            type=type,
            zone_id=zone_id,
            connection=connection,
            count=count,
            depends_on=depends_on,
            for_each=for_each,
            lifecycle=lifecycle,
            provider=provider,
            provisioners=provisioners,
        )

        jsii.create(self.__class__, self, [scope, id, config])

    @jsii.member(jsii_name="generateConfigForImport")
    @builtins.classmethod
    def generate_config_for_import(
        cls,
        scope: _constructs_77d1e7e8.Construct,
        import_to_id: builtins.str,
        import_from_id: builtins.str,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    ) -> _cdktf_9a9027ec.ImportableResource:
        '''Generates CDKTF code for importing a ZeroTrustAccessApplication resource upon running "cdktf plan ".

        :param scope: The scope in which to define this construct.
        :param import_to_id: The construct id used in the generated config for the ZeroTrustAccessApplication to import.
        :param import_from_id: The id of the existing ZeroTrustAccessApplication that should be imported. Refer to the {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#import import section} in the documentation of this resource for the id to use
        :param provider: ? Optional instance of the provider where the ZeroTrustAccessApplication to import is found.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28aed9d1c8ee78428e088d71f6579e3d02e4f30fb17461e201068a0829c6d553)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument import_to_id", value=import_to_id, expected_type=type_hints["import_to_id"])
            check_type(argname="argument import_from_id", value=import_from_id, expected_type=type_hints["import_from_id"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
        return typing.cast(_cdktf_9a9027ec.ImportableResource, jsii.sinvoke(cls, "generateConfigForImport", [scope, import_to_id, import_from_id, provider]))

    @jsii.member(jsii_name="putCorsHeaders")
    def put_cors_headers(
        self,
        *,
        allow_all_headers: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allow_all_methods: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allow_all_origins: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allow_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allowed_headers: typing.Optional[typing.Sequence[builtins.str]] = None,
        allowed_methods: typing.Optional[typing.Sequence[builtins.str]] = None,
        allowed_origins: typing.Optional[typing.Sequence[builtins.str]] = None,
        max_age: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param allow_all_headers: Allows all HTTP request headers. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_headers ZeroTrustAccessApplication#allow_all_headers}
        :param allow_all_methods: Allows all HTTP request methods. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_methods ZeroTrustAccessApplication#allow_all_methods}
        :param allow_all_origins: Allows all origins. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_origins ZeroTrustAccessApplication#allow_all_origins}
        :param allow_credentials: When set to ``true``, includes credentials (cookies, authorization headers, or TLS client certificates) with requests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_credentials ZeroTrustAccessApplication#allow_credentials}
        :param allowed_headers: Allowed HTTP request headers. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_headers ZeroTrustAccessApplication#allowed_headers}
        :param allowed_methods: Allowed HTTP request methods. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_methods ZeroTrustAccessApplication#allowed_methods}
        :param allowed_origins: Allowed origins. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_origins ZeroTrustAccessApplication#allowed_origins}
        :param max_age: The maximum number of seconds the results of a preflight request can be cached. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#max_age ZeroTrustAccessApplication#max_age}
        '''
        value = ZeroTrustAccessApplicationCorsHeaders(
            allow_all_headers=allow_all_headers,
            allow_all_methods=allow_all_methods,
            allow_all_origins=allow_all_origins,
            allow_credentials=allow_credentials,
            allowed_headers=allowed_headers,
            allowed_methods=allowed_methods,
            allowed_origins=allowed_origins,
            max_age=max_age,
        )

        return typing.cast(None, jsii.invoke(self, "putCorsHeaders", [value]))

    @jsii.member(jsii_name="putDestinations")
    def put_destinations(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationDestinations", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a01e38fa3f74cc489795b06ff4df8da8c34523777fc462714c8fd0a21c8e3e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDestinations", [value]))

    @jsii.member(jsii_name="putFooterLinks")
    def put_footer_links(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationFooterLinks", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e69b01b6350443f6fa14a95caa04e5b39c3826cfbbbc0be0bb475a2a02a6225e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFooterLinks", [value]))

    @jsii.member(jsii_name="putLandingPageDesign")
    def put_landing_page_design(
        self,
        *,
        button_color: typing.Optional[builtins.str] = None,
        button_text_color: typing.Optional[builtins.str] = None,
        image_url: typing.Optional[builtins.str] = None,
        message: typing.Optional[builtins.str] = None,
        title: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param button_color: The background color of the log in button on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#button_color ZeroTrustAccessApplication#button_color}
        :param button_text_color: The color of the text in the log in button on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#button_text_color ZeroTrustAccessApplication#button_text_color}
        :param image_url: The URL of the image shown on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#image_url ZeroTrustAccessApplication#image_url}
        :param message: The message shown on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#message ZeroTrustAccessApplication#message}
        :param title: The title shown on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#title ZeroTrustAccessApplication#title}
        '''
        value = ZeroTrustAccessApplicationLandingPageDesign(
            button_color=button_color,
            button_text_color=button_text_color,
            image_url=image_url,
            message=message,
            title=title,
        )

        return typing.cast(None, jsii.invoke(self, "putLandingPageDesign", [value]))

    @jsii.member(jsii_name="putPolicies")
    def put_policies(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationPolicies", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__194677b21ed4e92b3e7408e1a7875869dec0206458f602f448d925daee04060e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putPolicies", [value]))

    @jsii.member(jsii_name="putSaasApp")
    def put_saas_app(
        self,
        *,
        access_token_lifetime: typing.Optional[builtins.str] = None,
        allow_pkce_without_client_secret: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        app_launcher_url: typing.Optional[builtins.str] = None,
        auth_type: typing.Optional[builtins.str] = None,
        consumer_service_url: typing.Optional[builtins.str] = None,
        custom_attributes: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationSaasAppCustomAttributes", typing.Dict[builtins.str, typing.Any]]]]] = None,
        custom_claims: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationSaasAppCustomClaims", typing.Dict[builtins.str, typing.Any]]]]] = None,
        default_relay_state: typing.Optional[builtins.str] = None,
        grant_types: typing.Optional[typing.Sequence[builtins.str]] = None,
        group_filter_regex: typing.Optional[builtins.str] = None,
        hybrid_and_implicit_options: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions", typing.Dict[builtins.str, typing.Any]]] = None,
        idp_entity_id: typing.Optional[builtins.str] = None,
        name_id_format: typing.Optional[builtins.str] = None,
        name_id_transform_jsonata: typing.Optional[builtins.str] = None,
        redirect_uris: typing.Optional[typing.Sequence[builtins.str]] = None,
        refresh_token_options: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasAppRefreshTokenOptions", typing.Dict[builtins.str, typing.Any]]] = None,
        saml_attribute_transform_jsonata: typing.Optional[builtins.str] = None,
        scopes: typing.Optional[typing.Sequence[builtins.str]] = None,
        sp_entity_id: typing.Optional[builtins.str] = None,
        sso_endpoint: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param access_token_lifetime: The lifetime of the OIDC Access Token after creation. Valid units are m,h. Must be greater than or equal to 1m and less than or equal to 24h. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#access_token_lifetime ZeroTrustAccessApplication#access_token_lifetime}
        :param allow_pkce_without_client_secret: If client secret should be required on the token endpoint when authorization_code_with_pkce grant is used. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_pkce_without_client_secret ZeroTrustAccessApplication#allow_pkce_without_client_secret}
        :param app_launcher_url: The URL where this applications tile redirects users. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_url ZeroTrustAccessApplication#app_launcher_url}
        :param auth_type: Optional identifier indicating the authentication protocol used for the saas app. Required for OIDC. Default if unset is "saml" Available values: "saml", "oidc". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_type ZeroTrustAccessApplication#auth_type}
        :param consumer_service_url: The service provider's endpoint that is responsible for receiving and parsing a SAML assertion. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#consumer_service_url ZeroTrustAccessApplication#consumer_service_url}
        :param custom_attributes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_attributes ZeroTrustAccessApplication#custom_attributes}.
        :param custom_claims: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_claims ZeroTrustAccessApplication#custom_claims}.
        :param default_relay_state: The URL that the user will be redirected to after a successful login for IDP initiated logins. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#default_relay_state ZeroTrustAccessApplication#default_relay_state}
        :param grant_types: The OIDC flows supported by this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#grant_types ZeroTrustAccessApplication#grant_types}
        :param group_filter_regex: A regex to filter Cloudflare groups returned in ID token and userinfo endpoint. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group_filter_regex ZeroTrustAccessApplication#group_filter_regex}
        :param hybrid_and_implicit_options: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#hybrid_and_implicit_options ZeroTrustAccessApplication#hybrid_and_implicit_options}.
        :param idp_entity_id: The unique identifier for your SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_entity_id ZeroTrustAccessApplication#idp_entity_id}
        :param name_id_format: The format of the name identifier sent to the SaaS application. Available values: "id", "email". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_id_format ZeroTrustAccessApplication#name_id_format}
        :param name_id_transform_jsonata: A `JSONata <https://jsonata.org/>`_ expression that transforms an application's user identities into a NameID value for its SAML assertion. This expression should evaluate to a singular string. The output of this expression can override the ``name_id_format`` setting. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_id_transform_jsonata ZeroTrustAccessApplication#name_id_transform_jsonata}
        :param redirect_uris: The permitted URL's for Cloudflare to return Authorization codes and Access/ID tokens. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#redirect_uris ZeroTrustAccessApplication#redirect_uris}
        :param refresh_token_options: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#refresh_token_options ZeroTrustAccessApplication#refresh_token_options}.
        :param saml_attribute_transform_jsonata: A [JSONata] (https://jsonata.org/) expression that transforms an application's user identities into attribute assertions in the SAML response. The expression can transform id, email, name, and groups values. It can also transform fields listed in the saml_attributes or oidc_fields of the identity provider used to authenticate. The output of this expression must be a JSON object. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml_attribute_transform_jsonata ZeroTrustAccessApplication#saml_attribute_transform_jsonata}
        :param scopes: Define the user information shared with access, "offline_access" scope will be automatically enabled if refresh tokens are enabled. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scopes ZeroTrustAccessApplication#scopes}
        :param sp_entity_id: A globally unique name for an identity or service provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#sp_entity_id ZeroTrustAccessApplication#sp_entity_id}
        :param sso_endpoint: The endpoint where your SaaS application will send login requests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#sso_endpoint ZeroTrustAccessApplication#sso_endpoint}
        '''
        value = ZeroTrustAccessApplicationSaasApp(
            access_token_lifetime=access_token_lifetime,
            allow_pkce_without_client_secret=allow_pkce_without_client_secret,
            app_launcher_url=app_launcher_url,
            auth_type=auth_type,
            consumer_service_url=consumer_service_url,
            custom_attributes=custom_attributes,
            custom_claims=custom_claims,
            default_relay_state=default_relay_state,
            grant_types=grant_types,
            group_filter_regex=group_filter_regex,
            hybrid_and_implicit_options=hybrid_and_implicit_options,
            idp_entity_id=idp_entity_id,
            name_id_format=name_id_format,
            name_id_transform_jsonata=name_id_transform_jsonata,
            redirect_uris=redirect_uris,
            refresh_token_options=refresh_token_options,
            saml_attribute_transform_jsonata=saml_attribute_transform_jsonata,
            scopes=scopes,
            sp_entity_id=sp_entity_id,
            sso_endpoint=sso_endpoint,
        )

        return typing.cast(None, jsii.invoke(self, "putSaasApp", [value]))

    @jsii.member(jsii_name="putScimConfig")
    def put_scim_config(
        self,
        *,
        idp_uid: builtins.str,
        remote_uri: builtins.str,
        authentication: typing.Optional[typing.Union["ZeroTrustAccessApplicationScimConfigAuthentication", typing.Dict[builtins.str, typing.Any]]] = None,
        deactivate_on_delete: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        mappings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationScimConfigMappings", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param idp_uid: The UID of the IdP to use as the source for SCIM resources to provision to this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_uid ZeroTrustAccessApplication#idp_uid}
        :param remote_uri: The base URI for the application's SCIM-compatible API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#remote_uri ZeroTrustAccessApplication#remote_uri}
        :param authentication: Attributes for configuring HTTP Basic authentication scheme for SCIM provisioning to an application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#authentication ZeroTrustAccessApplication#authentication}
        :param deactivate_on_delete: If false, propagates DELETE requests to the target application for SCIM resources. If true, sets 'active' to false on the SCIM resource. Note: Some targets do not support DELETE operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#deactivate_on_delete ZeroTrustAccessApplication#deactivate_on_delete}
        :param enabled: Whether SCIM provisioning is turned on for this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enabled ZeroTrustAccessApplication#enabled}
        :param mappings: A list of mappings to apply to SCIM resources before provisioning them in this application. These can transform or filter the resources to be provisioned. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#mappings ZeroTrustAccessApplication#mappings}
        '''
        value = ZeroTrustAccessApplicationScimConfig(
            idp_uid=idp_uid,
            remote_uri=remote_uri,
            authentication=authentication,
            deactivate_on_delete=deactivate_on_delete,
            enabled=enabled,
            mappings=mappings,
        )

        return typing.cast(None, jsii.invoke(self, "putScimConfig", [value]))

    @jsii.member(jsii_name="putTargetCriteria")
    def put_target_criteria(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationTargetCriteria", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29efcca397269d22b3a8f8f3a86f3abb19cd0dbf9186b3d59feb062d1fc06075)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTargetCriteria", [value]))

    @jsii.member(jsii_name="resetAccountId")
    def reset_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccountId", []))

    @jsii.member(jsii_name="resetAllowAuthenticateViaWarp")
    def reset_allow_authenticate_via_warp(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowAuthenticateViaWarp", []))

    @jsii.member(jsii_name="resetAllowedIdps")
    def reset_allowed_idps(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowedIdps", []))

    @jsii.member(jsii_name="resetAllowIframe")
    def reset_allow_iframe(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowIframe", []))

    @jsii.member(jsii_name="resetAppLauncherLogoUrl")
    def reset_app_launcher_logo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAppLauncherLogoUrl", []))

    @jsii.member(jsii_name="resetAppLauncherVisible")
    def reset_app_launcher_visible(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAppLauncherVisible", []))

    @jsii.member(jsii_name="resetAutoRedirectToIdentity")
    def reset_auto_redirect_to_identity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutoRedirectToIdentity", []))

    @jsii.member(jsii_name="resetBgColor")
    def reset_bg_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBgColor", []))

    @jsii.member(jsii_name="resetCorsHeaders")
    def reset_cors_headers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCorsHeaders", []))

    @jsii.member(jsii_name="resetCustomDenyMessage")
    def reset_custom_deny_message(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCustomDenyMessage", []))

    @jsii.member(jsii_name="resetCustomDenyUrl")
    def reset_custom_deny_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCustomDenyUrl", []))

    @jsii.member(jsii_name="resetCustomNonIdentityDenyUrl")
    def reset_custom_non_identity_deny_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCustomNonIdentityDenyUrl", []))

    @jsii.member(jsii_name="resetCustomPages")
    def reset_custom_pages(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCustomPages", []))

    @jsii.member(jsii_name="resetDestinations")
    def reset_destinations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestinations", []))

    @jsii.member(jsii_name="resetDomain")
    def reset_domain(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDomain", []))

    @jsii.member(jsii_name="resetEnableBindingCookie")
    def reset_enable_binding_cookie(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnableBindingCookie", []))

    @jsii.member(jsii_name="resetFooterLinks")
    def reset_footer_links(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFooterLinks", []))

    @jsii.member(jsii_name="resetHeaderBgColor")
    def reset_header_bg_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeaderBgColor", []))

    @jsii.member(jsii_name="resetHttpOnlyCookieAttribute")
    def reset_http_only_cookie_attribute(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHttpOnlyCookieAttribute", []))

    @jsii.member(jsii_name="resetLandingPageDesign")
    def reset_landing_page_design(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLandingPageDesign", []))

    @jsii.member(jsii_name="resetLogoUrl")
    def reset_logo_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLogoUrl", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetOptionsPreflightBypass")
    def reset_options_preflight_bypass(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOptionsPreflightBypass", []))

    @jsii.member(jsii_name="resetPathCookieAttribute")
    def reset_path_cookie_attribute(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPathCookieAttribute", []))

    @jsii.member(jsii_name="resetPolicies")
    def reset_policies(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPolicies", []))

    @jsii.member(jsii_name="resetReadServiceTokensFromHeader")
    def reset_read_service_tokens_from_header(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReadServiceTokensFromHeader", []))

    @jsii.member(jsii_name="resetSaasApp")
    def reset_saas_app(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSaasApp", []))

    @jsii.member(jsii_name="resetSameSiteCookieAttribute")
    def reset_same_site_cookie_attribute(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSameSiteCookieAttribute", []))

    @jsii.member(jsii_name="resetScimConfig")
    def reset_scim_config(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScimConfig", []))

    @jsii.member(jsii_name="resetSelfHostedDomains")
    def reset_self_hosted_domains(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelfHostedDomains", []))

    @jsii.member(jsii_name="resetServiceAuth401Redirect")
    def reset_service_auth401_redirect(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceAuth401Redirect", []))

    @jsii.member(jsii_name="resetSessionDuration")
    def reset_session_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSessionDuration", []))

    @jsii.member(jsii_name="resetSkipAppLauncherLoginPage")
    def reset_skip_app_launcher_login_page(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipAppLauncherLoginPage", []))

    @jsii.member(jsii_name="resetSkipInterstitial")
    def reset_skip_interstitial(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSkipInterstitial", []))

    @jsii.member(jsii_name="resetTags")
    def reset_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTags", []))

    @jsii.member(jsii_name="resetTargetCriteria")
    def reset_target_criteria(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetCriteria", []))

    @jsii.member(jsii_name="resetType")
    def reset_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetType", []))

    @jsii.member(jsii_name="resetZoneId")
    def reset_zone_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetZoneId", []))

    @jsii.member(jsii_name="synthesizeAttributes")
    def _synthesize_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeAttributes", []))

    @jsii.member(jsii_name="synthesizeHclAttributes")
    def _synthesize_hcl_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeHclAttributes", []))

    @jsii.python.classproperty
    @jsii.member(jsii_name="tfResourceType")
    def TF_RESOURCE_TYPE(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sget(cls, "tfResourceType"))

    @builtins.property
    @jsii.member(jsii_name="aud")
    def aud(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aud"))

    @builtins.property
    @jsii.member(jsii_name="corsHeaders")
    def cors_headers(self) -> "ZeroTrustAccessApplicationCorsHeadersOutputReference":
        return typing.cast("ZeroTrustAccessApplicationCorsHeadersOutputReference", jsii.get(self, "corsHeaders"))

    @builtins.property
    @jsii.member(jsii_name="destinations")
    def destinations(self) -> "ZeroTrustAccessApplicationDestinationsList":
        return typing.cast("ZeroTrustAccessApplicationDestinationsList", jsii.get(self, "destinations"))

    @builtins.property
    @jsii.member(jsii_name="footerLinks")
    def footer_links(self) -> "ZeroTrustAccessApplicationFooterLinksList":
        return typing.cast("ZeroTrustAccessApplicationFooterLinksList", jsii.get(self, "footerLinks"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @builtins.property
    @jsii.member(jsii_name="landingPageDesign")
    def landing_page_design(
        self,
    ) -> "ZeroTrustAccessApplicationLandingPageDesignOutputReference":
        return typing.cast("ZeroTrustAccessApplicationLandingPageDesignOutputReference", jsii.get(self, "landingPageDesign"))

    @builtins.property
    @jsii.member(jsii_name="policies")
    def policies(self) -> "ZeroTrustAccessApplicationPoliciesList":
        return typing.cast("ZeroTrustAccessApplicationPoliciesList", jsii.get(self, "policies"))

    @builtins.property
    @jsii.member(jsii_name="saasApp")
    def saas_app(self) -> "ZeroTrustAccessApplicationSaasAppOutputReference":
        return typing.cast("ZeroTrustAccessApplicationSaasAppOutputReference", jsii.get(self, "saasApp"))

    @builtins.property
    @jsii.member(jsii_name="scimConfig")
    def scim_config(self) -> "ZeroTrustAccessApplicationScimConfigOutputReference":
        return typing.cast("ZeroTrustAccessApplicationScimConfigOutputReference", jsii.get(self, "scimConfig"))

    @builtins.property
    @jsii.member(jsii_name="targetCriteria")
    def target_criteria(self) -> "ZeroTrustAccessApplicationTargetCriteriaList":
        return typing.cast("ZeroTrustAccessApplicationTargetCriteriaList", jsii.get(self, "targetCriteria"))

    @builtins.property
    @jsii.member(jsii_name="accountIdInput")
    def account_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="allowAuthenticateViaWarpInput")
    def allow_authenticate_via_warp_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowAuthenticateViaWarpInput"))

    @builtins.property
    @jsii.member(jsii_name="allowedIdpsInput")
    def allowed_idps_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "allowedIdpsInput"))

    @builtins.property
    @jsii.member(jsii_name="allowIframeInput")
    def allow_iframe_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowIframeInput"))

    @builtins.property
    @jsii.member(jsii_name="appLauncherLogoUrlInput")
    def app_launcher_logo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "appLauncherLogoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="appLauncherVisibleInput")
    def app_launcher_visible_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "appLauncherVisibleInput"))

    @builtins.property
    @jsii.member(jsii_name="autoRedirectToIdentityInput")
    def auto_redirect_to_identity_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "autoRedirectToIdentityInput"))

    @builtins.property
    @jsii.member(jsii_name="bgColorInput")
    def bg_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bgColorInput"))

    @builtins.property
    @jsii.member(jsii_name="corsHeadersInput")
    def cors_headers_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationCorsHeaders"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationCorsHeaders"]], jsii.get(self, "corsHeadersInput"))

    @builtins.property
    @jsii.member(jsii_name="customDenyMessageInput")
    def custom_deny_message_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "customDenyMessageInput"))

    @builtins.property
    @jsii.member(jsii_name="customDenyUrlInput")
    def custom_deny_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "customDenyUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="customNonIdentityDenyUrlInput")
    def custom_non_identity_deny_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "customNonIdentityDenyUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="customPagesInput")
    def custom_pages_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "customPagesInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationsInput")
    def destinations_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationDestinations"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationDestinations"]]], jsii.get(self, "destinationsInput"))

    @builtins.property
    @jsii.member(jsii_name="domainInput")
    def domain_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "domainInput"))

    @builtins.property
    @jsii.member(jsii_name="enableBindingCookieInput")
    def enable_binding_cookie_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "enableBindingCookieInput"))

    @builtins.property
    @jsii.member(jsii_name="footerLinksInput")
    def footer_links_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationFooterLinks"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationFooterLinks"]]], jsii.get(self, "footerLinksInput"))

    @builtins.property
    @jsii.member(jsii_name="headerBgColorInput")
    def header_bg_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "headerBgColorInput"))

    @builtins.property
    @jsii.member(jsii_name="httpOnlyCookieAttributeInput")
    def http_only_cookie_attribute_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "httpOnlyCookieAttributeInput"))

    @builtins.property
    @jsii.member(jsii_name="landingPageDesignInput")
    def landing_page_design_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationLandingPageDesign"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationLandingPageDesign"]], jsii.get(self, "landingPageDesignInput"))

    @builtins.property
    @jsii.member(jsii_name="logoUrlInput")
    def logo_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "logoUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="optionsPreflightBypassInput")
    def options_preflight_bypass_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "optionsPreflightBypassInput"))

    @builtins.property
    @jsii.member(jsii_name="pathCookieAttributeInput")
    def path_cookie_attribute_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "pathCookieAttributeInput"))

    @builtins.property
    @jsii.member(jsii_name="policiesInput")
    def policies_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPolicies"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPolicies"]]], jsii.get(self, "policiesInput"))

    @builtins.property
    @jsii.member(jsii_name="readServiceTokensFromHeaderInput")
    def read_service_tokens_from_header_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "readServiceTokensFromHeaderInput"))

    @builtins.property
    @jsii.member(jsii_name="saasAppInput")
    def saas_app_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasApp"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasApp"]], jsii.get(self, "saasAppInput"))

    @builtins.property
    @jsii.member(jsii_name="sameSiteCookieAttributeInput")
    def same_site_cookie_attribute_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sameSiteCookieAttributeInput"))

    @builtins.property
    @jsii.member(jsii_name="scimConfigInput")
    def scim_config_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationScimConfig"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationScimConfig"]], jsii.get(self, "scimConfigInput"))

    @builtins.property
    @jsii.member(jsii_name="selfHostedDomainsInput")
    def self_hosted_domains_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "selfHostedDomainsInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceAuth401RedirectInput")
    def service_auth401_redirect_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "serviceAuth401RedirectInput"))

    @builtins.property
    @jsii.member(jsii_name="sessionDurationInput")
    def session_duration_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sessionDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="skipAppLauncherLoginPageInput")
    def skip_app_launcher_login_page_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipAppLauncherLoginPageInput"))

    @builtins.property
    @jsii.member(jsii_name="skipInterstitialInput")
    def skip_interstitial_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "skipInterstitialInput"))

    @builtins.property
    @jsii.member(jsii_name="tagsInput")
    def tags_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "tagsInput"))

    @builtins.property
    @jsii.member(jsii_name="targetCriteriaInput")
    def target_criteria_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationTargetCriteria"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationTargetCriteria"]]], jsii.get(self, "targetCriteriaInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="zoneIdInput")
    def zone_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "zoneIdInput"))

    @builtins.property
    @jsii.member(jsii_name="accountId")
    def account_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accountId"))

    @account_id.setter
    def account_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fec731061956ee4a6f8bb3a95fbebdcd6aaf64c49f851492c2b536b1eddd1f98)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accountId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowAuthenticateViaWarp")
    def allow_authenticate_via_warp(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowAuthenticateViaWarp"))

    @allow_authenticate_via_warp.setter
    def allow_authenticate_via_warp(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f3c1cb91eeae56a8cf2cc59bdb6b2795ccad015bd24206d07e0951f56c89636)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowAuthenticateViaWarp", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowedIdps")
    def allowed_idps(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "allowedIdps"))

    @allowed_idps.setter
    def allowed_idps(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be64e8ac39fca2dd2500aa0b54d299e1bc29de142d2d4612f9e17af4b10799f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowedIdps", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowIframe")
    def allow_iframe(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowIframe"))

    @allow_iframe.setter
    def allow_iframe(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7334ecc025d6f77295c66eb2206bef9f447e4e2e7f625cf2449b600c010a4e62)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowIframe", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="appLauncherLogoUrl")
    def app_launcher_logo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "appLauncherLogoUrl"))

    @app_launcher_logo_url.setter
    def app_launcher_logo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1457a5e561e09d35265af36cf5ca06925dc1dce9801441f692b1fb3fd3b320ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appLauncherLogoUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="appLauncherVisible")
    def app_launcher_visible(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "appLauncherVisible"))

    @app_launcher_visible.setter
    def app_launcher_visible(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01d7c21a4a8c8ab0de0d7f1ecc46004dcf0662e0a2cc335f5267670f1f64525c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appLauncherVisible", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="autoRedirectToIdentity")
    def auto_redirect_to_identity(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "autoRedirectToIdentity"))

    @auto_redirect_to_identity.setter
    def auto_redirect_to_identity(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1b2c9f95fc566b2f077f059a82d95b631ad2429361b9dba2a2ed2694ebf6854)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "autoRedirectToIdentity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bgColor")
    def bg_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bgColor"))

    @bg_color.setter
    def bg_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eff301b82f24f646a2cb5ef99ea6a32ce4f9c04cdbb27a5d4ada20b67d4f5eaa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bgColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="customDenyMessage")
    def custom_deny_message(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "customDenyMessage"))

    @custom_deny_message.setter
    def custom_deny_message(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d47019a4be708eb71f0f058e0eede1241f8158b762556db853df184499ea6ff3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "customDenyMessage", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="customDenyUrl")
    def custom_deny_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "customDenyUrl"))

    @custom_deny_url.setter
    def custom_deny_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20e27c1cb8a4167f8e04ac0d6c18ada8a4b250b5de4ca6f3c845385a23be8379)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "customDenyUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="customNonIdentityDenyUrl")
    def custom_non_identity_deny_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "customNonIdentityDenyUrl"))

    @custom_non_identity_deny_url.setter
    def custom_non_identity_deny_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a3a3d032f0b868b35c26301c384de6a32873fbeb250a3f3294135e8f80a7f31)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "customNonIdentityDenyUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="customPages")
    def custom_pages(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "customPages"))

    @custom_pages.setter
    def custom_pages(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08aca6db6ca2d706006c7c12a3dc79270cee71da8486e494cb688f27442e4f73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "customPages", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="domain")
    def domain(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "domain"))

    @domain.setter
    def domain(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc8004de509defca4d78cf6a2555915db9666893c72c10c436cf77de1e893ba1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "domain", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="enableBindingCookie")
    def enable_binding_cookie(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "enableBindingCookie"))

    @enable_binding_cookie.setter
    def enable_binding_cookie(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a765eff579c85806c83ac9f1fa443520c9cfcb800a0081b0516ce1f5af65fe8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableBindingCookie", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="headerBgColor")
    def header_bg_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "headerBgColor"))

    @header_bg_color.setter
    def header_bg_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fee4e1351d0024499a383aab5b228a41a8b6d5c815456c021b3f24d0b3adf498)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "headerBgColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="httpOnlyCookieAttribute")
    def http_only_cookie_attribute(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "httpOnlyCookieAttribute"))

    @http_only_cookie_attribute.setter
    def http_only_cookie_attribute(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a234bcc12ea03ebba0a2fd2beb7c5da757daf1a34e5f0f7d655bad92a3ee2425)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpOnlyCookieAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="logoUrl")
    def logo_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "logoUrl"))

    @logo_url.setter
    def logo_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec0d042e7fb8029cf39fd64da67feaaaabb16a462aa84e0da680533bb09db1bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "logoUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27cb26c3ba6e995d5381c8693e2f4791dc952dcf01b159b9dd90e528177d7233)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="optionsPreflightBypass")
    def options_preflight_bypass(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "optionsPreflightBypass"))

    @options_preflight_bypass.setter
    def options_preflight_bypass(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0fb9aa9809673e3b121460e152319e7a1aabe343c83038d99e1a9389706fdd34)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "optionsPreflightBypass", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pathCookieAttribute")
    def path_cookie_attribute(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "pathCookieAttribute"))

    @path_cookie_attribute.setter
    def path_cookie_attribute(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f143cdb6f19430965d2794fd1a0dfac6b459844d30ba2637d0dc513f8c1eb0d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pathCookieAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="readServiceTokensFromHeader")
    def read_service_tokens_from_header(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "readServiceTokensFromHeader"))

    @read_service_tokens_from_header.setter
    def read_service_tokens_from_header(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b5d14b7a1fb10a993490e5fe443399904006abfcfc067e9c828867c4a24ed17)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "readServiceTokensFromHeader", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sameSiteCookieAttribute")
    def same_site_cookie_attribute(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sameSiteCookieAttribute"))

    @same_site_cookie_attribute.setter
    def same_site_cookie_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cead96487ecf56f324721527887db96515004eafe6e4934b0218556799b20014)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sameSiteCookieAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="selfHostedDomains")
    def self_hosted_domains(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "selfHostedDomains"))

    @self_hosted_domains.setter
    def self_hosted_domains(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7027add4c94ff5c6e1d9d981891a6e2d08756603689c68714f7ab199c29667f8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "selfHostedDomains", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="serviceAuth401Redirect")
    def service_auth401_redirect(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "serviceAuth401Redirect"))

    @service_auth401_redirect.setter
    def service_auth401_redirect(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__018e0e147bf616117e34644ac9fc785c3537999f64d5e9d3d0af55c0e91db961)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceAuth401Redirect", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sessionDuration")
    def session_duration(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sessionDuration"))

    @session_duration.setter
    def session_duration(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0735f107a1bad1083eaf92196f572661daa359b0ad1c704fef6dee2068d97a1c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sessionDuration", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="skipAppLauncherLoginPage")
    def skip_app_launcher_login_page(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipAppLauncherLoginPage"))

    @skip_app_launcher_login_page.setter
    def skip_app_launcher_login_page(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__895090706d57872884433315cbdbc3cc94643221d625c7ff51d8c73fa56f70db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipAppLauncherLoginPage", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="skipInterstitial")
    def skip_interstitial(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "skipInterstitial"))

    @skip_interstitial.setter
    def skip_interstitial(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d96622f0d48fee60151148031537f7ae6703fa09d88913fc82a3c8e50b291e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "skipInterstitial", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tags")
    def tags(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "tags"))

    @tags.setter
    def tags(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6871878039e238faffb7567ecb3ee909e5a3840597f72ad141e4abcf93aa1ce6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tags", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__195de0e3b7b7a39255d38a862a353bf9e4ae6f9519c29c520e71e02578a424ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="zoneId")
    def zone_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "zoneId"))

    @zone_id.setter
    def zone_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36279d7f822e7c4fc42a6f41cadc4da245c4c9c778ac045de3186657c462b46b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "zoneId", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationConfig",
    jsii_struct_bases=[_cdktf_9a9027ec.TerraformMetaArguments],
    name_mapping={
        "connection": "connection",
        "count": "count",
        "depends_on": "dependsOn",
        "for_each": "forEach",
        "lifecycle": "lifecycle",
        "provider": "provider",
        "provisioners": "provisioners",
        "account_id": "accountId",
        "allow_authenticate_via_warp": "allowAuthenticateViaWarp",
        "allowed_idps": "allowedIdps",
        "allow_iframe": "allowIframe",
        "app_launcher_logo_url": "appLauncherLogoUrl",
        "app_launcher_visible": "appLauncherVisible",
        "auto_redirect_to_identity": "autoRedirectToIdentity",
        "bg_color": "bgColor",
        "cors_headers": "corsHeaders",
        "custom_deny_message": "customDenyMessage",
        "custom_deny_url": "customDenyUrl",
        "custom_non_identity_deny_url": "customNonIdentityDenyUrl",
        "custom_pages": "customPages",
        "destinations": "destinations",
        "domain": "domain",
        "enable_binding_cookie": "enableBindingCookie",
        "footer_links": "footerLinks",
        "header_bg_color": "headerBgColor",
        "http_only_cookie_attribute": "httpOnlyCookieAttribute",
        "landing_page_design": "landingPageDesign",
        "logo_url": "logoUrl",
        "name": "name",
        "options_preflight_bypass": "optionsPreflightBypass",
        "path_cookie_attribute": "pathCookieAttribute",
        "policies": "policies",
        "read_service_tokens_from_header": "readServiceTokensFromHeader",
        "saas_app": "saasApp",
        "same_site_cookie_attribute": "sameSiteCookieAttribute",
        "scim_config": "scimConfig",
        "self_hosted_domains": "selfHostedDomains",
        "service_auth401_redirect": "serviceAuth401Redirect",
        "session_duration": "sessionDuration",
        "skip_app_launcher_login_page": "skipAppLauncherLoginPage",
        "skip_interstitial": "skipInterstitial",
        "tags": "tags",
        "target_criteria": "targetCriteria",
        "type": "type",
        "zone_id": "zoneId",
    },
)
class ZeroTrustAccessApplicationConfig(_cdktf_9a9027ec.TerraformMetaArguments):
    def __init__(
        self,
        *,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
        account_id: typing.Optional[builtins.str] = None,
        allow_authenticate_via_warp: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allowed_idps: typing.Optional[typing.Sequence[builtins.str]] = None,
        allow_iframe: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        app_launcher_logo_url: typing.Optional[builtins.str] = None,
        app_launcher_visible: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        auto_redirect_to_identity: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        bg_color: typing.Optional[builtins.str] = None,
        cors_headers: typing.Optional[typing.Union["ZeroTrustAccessApplicationCorsHeaders", typing.Dict[builtins.str, typing.Any]]] = None,
        custom_deny_message: typing.Optional[builtins.str] = None,
        custom_deny_url: typing.Optional[builtins.str] = None,
        custom_non_identity_deny_url: typing.Optional[builtins.str] = None,
        custom_pages: typing.Optional[typing.Sequence[builtins.str]] = None,
        destinations: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationDestinations", typing.Dict[builtins.str, typing.Any]]]]] = None,
        domain: typing.Optional[builtins.str] = None,
        enable_binding_cookie: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        footer_links: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationFooterLinks", typing.Dict[builtins.str, typing.Any]]]]] = None,
        header_bg_color: typing.Optional[builtins.str] = None,
        http_only_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        landing_page_design: typing.Optional[typing.Union["ZeroTrustAccessApplicationLandingPageDesign", typing.Dict[builtins.str, typing.Any]]] = None,
        logo_url: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        options_preflight_bypass: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        path_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        policies: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationPolicies", typing.Dict[builtins.str, typing.Any]]]]] = None,
        read_service_tokens_from_header: typing.Optional[builtins.str] = None,
        saas_app: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasApp", typing.Dict[builtins.str, typing.Any]]] = None,
        same_site_cookie_attribute: typing.Optional[builtins.str] = None,
        scim_config: typing.Optional[typing.Union["ZeroTrustAccessApplicationScimConfig", typing.Dict[builtins.str, typing.Any]]] = None,
        self_hosted_domains: typing.Optional[typing.Sequence[builtins.str]] = None,
        service_auth401_redirect: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        session_duration: typing.Optional[builtins.str] = None,
        skip_app_launcher_login_page: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        skip_interstitial: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        tags: typing.Optional[typing.Sequence[builtins.str]] = None,
        target_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationTargetCriteria", typing.Dict[builtins.str, typing.Any]]]]] = None,
        type: typing.Optional[builtins.str] = None,
        zone_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        :param account_id: The Account ID to use for this endpoint. Mutually exclusive with the Zone ID. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#account_id ZeroTrustAccessApplication#account_id}
        :param allow_authenticate_via_warp: When set to true, users can authenticate to this application using their WARP session. When set to false this application will always require direct IdP authentication. This setting always overrides the organization setting for WARP authentication. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_authenticate_via_warp ZeroTrustAccessApplication#allow_authenticate_via_warp}
        :param allowed_idps: The identity providers your users can select when connecting to this application. Defaults to all IdPs configured in your account. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_idps ZeroTrustAccessApplication#allowed_idps}
        :param allow_iframe: Enables loading application content in an iFrame. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_iframe ZeroTrustAccessApplication#allow_iframe}
        :param app_launcher_logo_url: The image URL of the logo shown in the App Launcher header. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_logo_url ZeroTrustAccessApplication#app_launcher_logo_url}
        :param app_launcher_visible: Displays the application in the App Launcher. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_visible ZeroTrustAccessApplication#app_launcher_visible}
        :param auto_redirect_to_identity: When set to ``true``, users skip the identity provider selection step during login. You must specify only one identity provider in allowed_idps. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auto_redirect_to_identity ZeroTrustAccessApplication#auto_redirect_to_identity}
        :param bg_color: The background color of the App Launcher page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#bg_color ZeroTrustAccessApplication#bg_color}
        :param cors_headers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#cors_headers ZeroTrustAccessApplication#cors_headers}.
        :param custom_deny_message: The custom error message shown to a user when they are denied access to the application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_deny_message ZeroTrustAccessApplication#custom_deny_message}
        :param custom_deny_url: The custom URL a user is redirected to when they are denied access to the application when failing identity-based rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_deny_url ZeroTrustAccessApplication#custom_deny_url}
        :param custom_non_identity_deny_url: The custom URL a user is redirected to when they are denied access to the application when failing non-identity rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_non_identity_deny_url ZeroTrustAccessApplication#custom_non_identity_deny_url}
        :param custom_pages: The custom pages that will be displayed when applicable for this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_pages ZeroTrustAccessApplication#custom_pages}
        :param destinations: List of destinations secured by Access. This supersedes ``self_hosted_domains`` to allow for more flexibility in defining different types of domains. If ``destinations`` are provided, then ``self_hosted_domains`` will be ignored. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#destinations ZeroTrustAccessApplication#destinations}
        :param domain: The primary hostname and path secured by Access. This domain will be displayed if the app is visible in the App Launcher. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        :param enable_binding_cookie: Enables the binding cookie, which increases security against compromised authorization tokens and CSRF attacks. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enable_binding_cookie ZeroTrustAccessApplication#enable_binding_cookie}
        :param footer_links: The links in the App Launcher footer. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#footer_links ZeroTrustAccessApplication#footer_links}
        :param header_bg_color: The background color of the App Launcher header. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#header_bg_color ZeroTrustAccessApplication#header_bg_color}
        :param http_only_cookie_attribute: Enables the HttpOnly cookie attribute, which increases security against XSS attacks. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#http_only_cookie_attribute ZeroTrustAccessApplication#http_only_cookie_attribute}
        :param landing_page_design: The design of the App Launcher landing page shown to users when they log in. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#landing_page_design ZeroTrustAccessApplication#landing_page_design}
        :param logo_url: The image URL for the logo shown in the App Launcher dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#logo_url ZeroTrustAccessApplication#logo_url}
        :param name: The name of the application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param options_preflight_bypass: Allows options preflight requests to bypass Access authentication and go directly to the origin. Cannot turn on if cors_headers is set. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#options_preflight_bypass ZeroTrustAccessApplication#options_preflight_bypass}
        :param path_cookie_attribute: Enables cookie paths to scope an application's JWT to the application path. If disabled, the JWT will scope to the hostname by default Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#path_cookie_attribute ZeroTrustAccessApplication#path_cookie_attribute}
        :param policies: The policies that Access applies to the application, in ascending order of precedence. Items can reference existing policies or create new policies exclusive to the application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#policies ZeroTrustAccessApplication#policies}
        :param read_service_tokens_from_header: Allows matching Access Service Tokens passed HTTP in a single header with this name. This works as an alternative to the (CF-Access-Client-Id, CF-Access-Client-Secret) pair of headers. The header value will be interpreted as a json object similar to: { "cf-access-client-id": "88bf3b6d86161464f6509f7219099e57.access.example.com", "cf-access-client-secret": "bdd31cbc4dec990953e39163fbbb194c93313ca9f0a6e420346af9d326b1d2a5" } Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#read_service_tokens_from_header ZeroTrustAccessApplication#read_service_tokens_from_header}
        :param saas_app: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saas_app ZeroTrustAccessApplication#saas_app}.
        :param same_site_cookie_attribute: Sets the SameSite cookie setting, which provides increased security against CSRF attacks. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#same_site_cookie_attribute ZeroTrustAccessApplication#same_site_cookie_attribute}
        :param scim_config: Configuration for provisioning to this application via SCIM. This is currently in closed beta. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scim_config ZeroTrustAccessApplication#scim_config}
        :param self_hosted_domains: List of public domains that Access will secure. This field is deprecated in favor of ``destinations`` and will be supported until **November 21, 2025.** If ``destinations`` are provided, then ``self_hosted_domains`` will be ignored. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#self_hosted_domains ZeroTrustAccessApplication#self_hosted_domains}
        :param service_auth401_redirect: Returns a 401 status code when the request is blocked by a Service Auth policy. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_auth_401_redirect ZeroTrustAccessApplication#service_auth_401_redirect}
        :param session_duration: The amount of time that tokens issued for this application will be valid. Must be in the format ``300ms`` or ``2h45m``. Valid time units are: ns, us (or µs), ms, s, m, h. Note: unsupported for infrastructure type applications. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#session_duration ZeroTrustAccessApplication#session_duration}
        :param skip_app_launcher_login_page: Determines when to skip the App Launcher landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#skip_app_launcher_login_page ZeroTrustAccessApplication#skip_app_launcher_login_page}
        :param skip_interstitial: Enables automatic authentication through cloudflared. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#skip_interstitial ZeroTrustAccessApplication#skip_interstitial}
        :param tags: The tags you want assigned to an application. Tags are used to filter applications in the App Launcher dashboard. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#tags ZeroTrustAccessApplication#tags}
        :param target_criteria: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#target_criteria ZeroTrustAccessApplication#target_criteria}.
        :param type: The application type. Available values: "self_hosted", "saas", "ssh", "vnc", "app_launcher", "warp", "biso", "bookmark", "dash_sso", "infrastructure", "rdp". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#type ZeroTrustAccessApplication#type}
        :param zone_id: The Zone ID to use for this endpoint. Mutually exclusive with the Account ID. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#zone_id ZeroTrustAccessApplication#zone_id}
        '''
        if isinstance(lifecycle, dict):
            lifecycle = _cdktf_9a9027ec.TerraformResourceLifecycle(**lifecycle)
        if isinstance(cors_headers, dict):
            cors_headers = ZeroTrustAccessApplicationCorsHeaders(**cors_headers)
        if isinstance(landing_page_design, dict):
            landing_page_design = ZeroTrustAccessApplicationLandingPageDesign(**landing_page_design)
        if isinstance(saas_app, dict):
            saas_app = ZeroTrustAccessApplicationSaasApp(**saas_app)
        if isinstance(scim_config, dict):
            scim_config = ZeroTrustAccessApplicationScimConfig(**scim_config)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e1279db324fed64f313ac2ca6fb2cb06c24a138a471a8e0566ec470159c6fbf)
            check_type(argname="argument connection", value=connection, expected_type=type_hints["connection"])
            check_type(argname="argument count", value=count, expected_type=type_hints["count"])
            check_type(argname="argument depends_on", value=depends_on, expected_type=type_hints["depends_on"])
            check_type(argname="argument for_each", value=for_each, expected_type=type_hints["for_each"])
            check_type(argname="argument lifecycle", value=lifecycle, expected_type=type_hints["lifecycle"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
            check_type(argname="argument provisioners", value=provisioners, expected_type=type_hints["provisioners"])
            check_type(argname="argument account_id", value=account_id, expected_type=type_hints["account_id"])
            check_type(argname="argument allow_authenticate_via_warp", value=allow_authenticate_via_warp, expected_type=type_hints["allow_authenticate_via_warp"])
            check_type(argname="argument allowed_idps", value=allowed_idps, expected_type=type_hints["allowed_idps"])
            check_type(argname="argument allow_iframe", value=allow_iframe, expected_type=type_hints["allow_iframe"])
            check_type(argname="argument app_launcher_logo_url", value=app_launcher_logo_url, expected_type=type_hints["app_launcher_logo_url"])
            check_type(argname="argument app_launcher_visible", value=app_launcher_visible, expected_type=type_hints["app_launcher_visible"])
            check_type(argname="argument auto_redirect_to_identity", value=auto_redirect_to_identity, expected_type=type_hints["auto_redirect_to_identity"])
            check_type(argname="argument bg_color", value=bg_color, expected_type=type_hints["bg_color"])
            check_type(argname="argument cors_headers", value=cors_headers, expected_type=type_hints["cors_headers"])
            check_type(argname="argument custom_deny_message", value=custom_deny_message, expected_type=type_hints["custom_deny_message"])
            check_type(argname="argument custom_deny_url", value=custom_deny_url, expected_type=type_hints["custom_deny_url"])
            check_type(argname="argument custom_non_identity_deny_url", value=custom_non_identity_deny_url, expected_type=type_hints["custom_non_identity_deny_url"])
            check_type(argname="argument custom_pages", value=custom_pages, expected_type=type_hints["custom_pages"])
            check_type(argname="argument destinations", value=destinations, expected_type=type_hints["destinations"])
            check_type(argname="argument domain", value=domain, expected_type=type_hints["domain"])
            check_type(argname="argument enable_binding_cookie", value=enable_binding_cookie, expected_type=type_hints["enable_binding_cookie"])
            check_type(argname="argument footer_links", value=footer_links, expected_type=type_hints["footer_links"])
            check_type(argname="argument header_bg_color", value=header_bg_color, expected_type=type_hints["header_bg_color"])
            check_type(argname="argument http_only_cookie_attribute", value=http_only_cookie_attribute, expected_type=type_hints["http_only_cookie_attribute"])
            check_type(argname="argument landing_page_design", value=landing_page_design, expected_type=type_hints["landing_page_design"])
            check_type(argname="argument logo_url", value=logo_url, expected_type=type_hints["logo_url"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument options_preflight_bypass", value=options_preflight_bypass, expected_type=type_hints["options_preflight_bypass"])
            check_type(argname="argument path_cookie_attribute", value=path_cookie_attribute, expected_type=type_hints["path_cookie_attribute"])
            check_type(argname="argument policies", value=policies, expected_type=type_hints["policies"])
            check_type(argname="argument read_service_tokens_from_header", value=read_service_tokens_from_header, expected_type=type_hints["read_service_tokens_from_header"])
            check_type(argname="argument saas_app", value=saas_app, expected_type=type_hints["saas_app"])
            check_type(argname="argument same_site_cookie_attribute", value=same_site_cookie_attribute, expected_type=type_hints["same_site_cookie_attribute"])
            check_type(argname="argument scim_config", value=scim_config, expected_type=type_hints["scim_config"])
            check_type(argname="argument self_hosted_domains", value=self_hosted_domains, expected_type=type_hints["self_hosted_domains"])
            check_type(argname="argument service_auth401_redirect", value=service_auth401_redirect, expected_type=type_hints["service_auth401_redirect"])
            check_type(argname="argument session_duration", value=session_duration, expected_type=type_hints["session_duration"])
            check_type(argname="argument skip_app_launcher_login_page", value=skip_app_launcher_login_page, expected_type=type_hints["skip_app_launcher_login_page"])
            check_type(argname="argument skip_interstitial", value=skip_interstitial, expected_type=type_hints["skip_interstitial"])
            check_type(argname="argument tags", value=tags, expected_type=type_hints["tags"])
            check_type(argname="argument target_criteria", value=target_criteria, expected_type=type_hints["target_criteria"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument zone_id", value=zone_id, expected_type=type_hints["zone_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if connection is not None:
            self._values["connection"] = connection
        if count is not None:
            self._values["count"] = count
        if depends_on is not None:
            self._values["depends_on"] = depends_on
        if for_each is not None:
            self._values["for_each"] = for_each
        if lifecycle is not None:
            self._values["lifecycle"] = lifecycle
        if provider is not None:
            self._values["provider"] = provider
        if provisioners is not None:
            self._values["provisioners"] = provisioners
        if account_id is not None:
            self._values["account_id"] = account_id
        if allow_authenticate_via_warp is not None:
            self._values["allow_authenticate_via_warp"] = allow_authenticate_via_warp
        if allowed_idps is not None:
            self._values["allowed_idps"] = allowed_idps
        if allow_iframe is not None:
            self._values["allow_iframe"] = allow_iframe
        if app_launcher_logo_url is not None:
            self._values["app_launcher_logo_url"] = app_launcher_logo_url
        if app_launcher_visible is not None:
            self._values["app_launcher_visible"] = app_launcher_visible
        if auto_redirect_to_identity is not None:
            self._values["auto_redirect_to_identity"] = auto_redirect_to_identity
        if bg_color is not None:
            self._values["bg_color"] = bg_color
        if cors_headers is not None:
            self._values["cors_headers"] = cors_headers
        if custom_deny_message is not None:
            self._values["custom_deny_message"] = custom_deny_message
        if custom_deny_url is not None:
            self._values["custom_deny_url"] = custom_deny_url
        if custom_non_identity_deny_url is not None:
            self._values["custom_non_identity_deny_url"] = custom_non_identity_deny_url
        if custom_pages is not None:
            self._values["custom_pages"] = custom_pages
        if destinations is not None:
            self._values["destinations"] = destinations
        if domain is not None:
            self._values["domain"] = domain
        if enable_binding_cookie is not None:
            self._values["enable_binding_cookie"] = enable_binding_cookie
        if footer_links is not None:
            self._values["footer_links"] = footer_links
        if header_bg_color is not None:
            self._values["header_bg_color"] = header_bg_color
        if http_only_cookie_attribute is not None:
            self._values["http_only_cookie_attribute"] = http_only_cookie_attribute
        if landing_page_design is not None:
            self._values["landing_page_design"] = landing_page_design
        if logo_url is not None:
            self._values["logo_url"] = logo_url
        if name is not None:
            self._values["name"] = name
        if options_preflight_bypass is not None:
            self._values["options_preflight_bypass"] = options_preflight_bypass
        if path_cookie_attribute is not None:
            self._values["path_cookie_attribute"] = path_cookie_attribute
        if policies is not None:
            self._values["policies"] = policies
        if read_service_tokens_from_header is not None:
            self._values["read_service_tokens_from_header"] = read_service_tokens_from_header
        if saas_app is not None:
            self._values["saas_app"] = saas_app
        if same_site_cookie_attribute is not None:
            self._values["same_site_cookie_attribute"] = same_site_cookie_attribute
        if scim_config is not None:
            self._values["scim_config"] = scim_config
        if self_hosted_domains is not None:
            self._values["self_hosted_domains"] = self_hosted_domains
        if service_auth401_redirect is not None:
            self._values["service_auth401_redirect"] = service_auth401_redirect
        if session_duration is not None:
            self._values["session_duration"] = session_duration
        if skip_app_launcher_login_page is not None:
            self._values["skip_app_launcher_login_page"] = skip_app_launcher_login_page
        if skip_interstitial is not None:
            self._values["skip_interstitial"] = skip_interstitial
        if tags is not None:
            self._values["tags"] = tags
        if target_criteria is not None:
            self._values["target_criteria"] = target_criteria
        if type is not None:
            self._values["type"] = type
        if zone_id is not None:
            self._values["zone_id"] = zone_id

    @builtins.property
    def connection(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("connection")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]], result)

    @builtins.property
    def count(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("count")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]], result)

    @builtins.property
    def depends_on(
        self,
    ) -> typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("depends_on")
        return typing.cast(typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]], result)

    @builtins.property
    def for_each(self) -> typing.Optional[_cdktf_9a9027ec.ITerraformIterator]:
        '''
        :stability: experimental
        '''
        result = self._values.get("for_each")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.ITerraformIterator], result)

    @builtins.property
    def lifecycle(self) -> typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle]:
        '''
        :stability: experimental
        '''
        result = self._values.get("lifecycle")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle], result)

    @builtins.property
    def provider(self) -> typing.Optional[_cdktf_9a9027ec.TerraformProvider]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provider")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformProvider], result)

    @builtins.property
    def provisioners(
        self,
    ) -> typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provisioners")
        return typing.cast(typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]], result)

    @builtins.property
    def account_id(self) -> typing.Optional[builtins.str]:
        '''The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#account_id ZeroTrustAccessApplication#account_id}
        '''
        result = self._values.get("account_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def allow_authenticate_via_warp(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''When set to true, users can authenticate to this application using their WARP session.

        When set to false this application will always require direct IdP authentication. This setting always overrides the organization setting for WARP authentication.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_authenticate_via_warp ZeroTrustAccessApplication#allow_authenticate_via_warp}
        '''
        result = self._values.get("allow_authenticate_via_warp")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def allowed_idps(self) -> typing.Optional[typing.List[builtins.str]]:
        '''The identity providers your users can select when connecting to this application.

        Defaults to all IdPs configured in your account.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_idps ZeroTrustAccessApplication#allowed_idps}
        '''
        result = self._values.get("allowed_idps")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def allow_iframe(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enables loading application content in an iFrame.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_iframe ZeroTrustAccessApplication#allow_iframe}
        '''
        result = self._values.get("allow_iframe")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def app_launcher_logo_url(self) -> typing.Optional[builtins.str]:
        '''The image URL of the logo shown in the App Launcher header.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_logo_url ZeroTrustAccessApplication#app_launcher_logo_url}
        '''
        result = self._values.get("app_launcher_logo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def app_launcher_visible(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Displays the application in the App Launcher.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_visible ZeroTrustAccessApplication#app_launcher_visible}
        '''
        result = self._values.get("app_launcher_visible")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def auto_redirect_to_identity(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''When set to ``true``, users skip the identity provider selection step during login.

        You must specify only one identity provider in allowed_idps.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auto_redirect_to_identity ZeroTrustAccessApplication#auto_redirect_to_identity}
        '''
        result = self._values.get("auto_redirect_to_identity")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def bg_color(self) -> typing.Optional[builtins.str]:
        '''The background color of the App Launcher page.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#bg_color ZeroTrustAccessApplication#bg_color}
        '''
        result = self._values.get("bg_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cors_headers(self) -> typing.Optional["ZeroTrustAccessApplicationCorsHeaders"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#cors_headers ZeroTrustAccessApplication#cors_headers}.'''
        result = self._values.get("cors_headers")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationCorsHeaders"], result)

    @builtins.property
    def custom_deny_message(self) -> typing.Optional[builtins.str]:
        '''The custom error message shown to a user when they are denied access to the application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_deny_message ZeroTrustAccessApplication#custom_deny_message}
        '''
        result = self._values.get("custom_deny_message")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def custom_deny_url(self) -> typing.Optional[builtins.str]:
        '''The custom URL a user is redirected to when they are denied access to the application when failing identity-based rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_deny_url ZeroTrustAccessApplication#custom_deny_url}
        '''
        result = self._values.get("custom_deny_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def custom_non_identity_deny_url(self) -> typing.Optional[builtins.str]:
        '''The custom URL a user is redirected to when they are denied access to the application when failing non-identity rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_non_identity_deny_url ZeroTrustAccessApplication#custom_non_identity_deny_url}
        '''
        result = self._values.get("custom_non_identity_deny_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def custom_pages(self) -> typing.Optional[typing.List[builtins.str]]:
        '''The custom pages that will be displayed when applicable for this application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_pages ZeroTrustAccessApplication#custom_pages}
        '''
        result = self._values.get("custom_pages")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def destinations(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationDestinations"]]]:
        '''List of destinations secured by Access.

        This supersedes ``self_hosted_domains`` to allow for more flexibility in defining different types of domains. If ``destinations`` are provided, then ``self_hosted_domains`` will be ignored.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#destinations ZeroTrustAccessApplication#destinations}
        '''
        result = self._values.get("destinations")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationDestinations"]]], result)

    @builtins.property
    def domain(self) -> typing.Optional[builtins.str]:
        '''The primary hostname and path secured by Access.

        This domain will be displayed if the app is visible in the App Launcher.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        result = self._values.get("domain")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def enable_binding_cookie(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enables the binding cookie, which increases security against compromised authorization tokens and CSRF attacks.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enable_binding_cookie ZeroTrustAccessApplication#enable_binding_cookie}
        '''
        result = self._values.get("enable_binding_cookie")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def footer_links(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationFooterLinks"]]]:
        '''The links in the App Launcher footer.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#footer_links ZeroTrustAccessApplication#footer_links}
        '''
        result = self._values.get("footer_links")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationFooterLinks"]]], result)

    @builtins.property
    def header_bg_color(self) -> typing.Optional[builtins.str]:
        '''The background color of the App Launcher header.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#header_bg_color ZeroTrustAccessApplication#header_bg_color}
        '''
        result = self._values.get("header_bg_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def http_only_cookie_attribute(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enables the HttpOnly cookie attribute, which increases security against XSS attacks.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#http_only_cookie_attribute ZeroTrustAccessApplication#http_only_cookie_attribute}
        '''
        result = self._values.get("http_only_cookie_attribute")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def landing_page_design(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationLandingPageDesign"]:
        '''The design of the App Launcher landing page shown to users when they log in.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#landing_page_design ZeroTrustAccessApplication#landing_page_design}
        '''
        result = self._values.get("landing_page_design")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationLandingPageDesign"], result)

    @builtins.property
    def logo_url(self) -> typing.Optional[builtins.str]:
        '''The image URL for the logo shown in the App Launcher dashboard.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#logo_url ZeroTrustAccessApplication#logo_url}
        '''
        result = self._values.get("logo_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The name of the application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def options_preflight_bypass(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows options preflight requests to bypass Access authentication and go directly to the origin.

        Cannot turn on if cors_headers is set.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#options_preflight_bypass ZeroTrustAccessApplication#options_preflight_bypass}
        '''
        result = self._values.get("options_preflight_bypass")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def path_cookie_attribute(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enables cookie paths to scope an application's JWT to the application path.

        If disabled, the JWT will scope to the hostname by default

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#path_cookie_attribute ZeroTrustAccessApplication#path_cookie_attribute}
        '''
        result = self._values.get("path_cookie_attribute")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def policies(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPolicies"]]]:
        '''The policies that Access applies to the application, in ascending order of precedence.

        Items can reference existing policies or create new policies exclusive to the application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#policies ZeroTrustAccessApplication#policies}
        '''
        result = self._values.get("policies")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPolicies"]]], result)

    @builtins.property
    def read_service_tokens_from_header(self) -> typing.Optional[builtins.str]:
        '''Allows matching Access Service Tokens passed HTTP in a single header with this name.

        This works as an alternative to the (CF-Access-Client-Id, CF-Access-Client-Secret) pair of headers.
        The header value will be interpreted as a json object similar to:
        {
        "cf-access-client-id": "88bf3b6d86161464f6509f7219099e57.access.example.com",
        "cf-access-client-secret": "bdd31cbc4dec990953e39163fbbb194c93313ca9f0a6e420346af9d326b1d2a5"
        }

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#read_service_tokens_from_header ZeroTrustAccessApplication#read_service_tokens_from_header}
        '''
        result = self._values.get("read_service_tokens_from_header")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def saas_app(self) -> typing.Optional["ZeroTrustAccessApplicationSaasApp"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saas_app ZeroTrustAccessApplication#saas_app}.'''
        result = self._values.get("saas_app")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationSaasApp"], result)

    @builtins.property
    def same_site_cookie_attribute(self) -> typing.Optional[builtins.str]:
        '''Sets the SameSite cookie setting, which provides increased security against CSRF attacks.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#same_site_cookie_attribute ZeroTrustAccessApplication#same_site_cookie_attribute}
        '''
        result = self._values.get("same_site_cookie_attribute")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scim_config(self) -> typing.Optional["ZeroTrustAccessApplicationScimConfig"]:
        '''Configuration for provisioning to this application via SCIM. This is currently in closed beta.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scim_config ZeroTrustAccessApplication#scim_config}
        '''
        result = self._values.get("scim_config")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationScimConfig"], result)

    @builtins.property
    def self_hosted_domains(self) -> typing.Optional[typing.List[builtins.str]]:
        '''List of public domains that Access will secure.

        This field is deprecated in favor of ``destinations`` and will be supported until **November 21, 2025.** If ``destinations`` are provided, then ``self_hosted_domains`` will be ignored.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#self_hosted_domains ZeroTrustAccessApplication#self_hosted_domains}
        '''
        result = self._values.get("self_hosted_domains")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def service_auth401_redirect(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Returns a 401 status code when the request is blocked by a Service Auth policy.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_auth_401_redirect ZeroTrustAccessApplication#service_auth_401_redirect}
        '''
        result = self._values.get("service_auth401_redirect")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def session_duration(self) -> typing.Optional[builtins.str]:
        '''The amount of time that tokens issued for this application will be valid.

        Must be in the format ``300ms`` or ``2h45m``. Valid time units are: ns, us (or µs), ms, s, m, h. Note: unsupported for infrastructure type applications.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#session_duration ZeroTrustAccessApplication#session_duration}
        '''
        result = self._values.get("session_duration")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def skip_app_launcher_login_page(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Determines when to skip the App Launcher landing page.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#skip_app_launcher_login_page ZeroTrustAccessApplication#skip_app_launcher_login_page}
        '''
        result = self._values.get("skip_app_launcher_login_page")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def skip_interstitial(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enables automatic authentication through cloudflared.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#skip_interstitial ZeroTrustAccessApplication#skip_interstitial}
        '''
        result = self._values.get("skip_interstitial")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def tags(self) -> typing.Optional[typing.List[builtins.str]]:
        '''The tags you want assigned to an application. Tags are used to filter applications in the App Launcher dashboard.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#tags ZeroTrustAccessApplication#tags}
        '''
        result = self._values.get("tags")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def target_criteria(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationTargetCriteria"]]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#target_criteria ZeroTrustAccessApplication#target_criteria}.'''
        result = self._values.get("target_criteria")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationTargetCriteria"]]], result)

    @builtins.property
    def type(self) -> typing.Optional[builtins.str]:
        '''The application type. Available values: "self_hosted", "saas", "ssh", "vnc", "app_launcher", "warp", "biso", "bookmark", "dash_sso", "infrastructure", "rdp".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#type ZeroTrustAccessApplication#type}
        '''
        result = self._values.get("type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def zone_id(self) -> typing.Optional[builtins.str]:
        '''The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#zone_id ZeroTrustAccessApplication#zone_id}
        '''
        result = self._values.get("zone_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationCorsHeaders",
    jsii_struct_bases=[],
    name_mapping={
        "allow_all_headers": "allowAllHeaders",
        "allow_all_methods": "allowAllMethods",
        "allow_all_origins": "allowAllOrigins",
        "allow_credentials": "allowCredentials",
        "allowed_headers": "allowedHeaders",
        "allowed_methods": "allowedMethods",
        "allowed_origins": "allowedOrigins",
        "max_age": "maxAge",
    },
)
class ZeroTrustAccessApplicationCorsHeaders:
    def __init__(
        self,
        *,
        allow_all_headers: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allow_all_methods: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allow_all_origins: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allow_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        allowed_headers: typing.Optional[typing.Sequence[builtins.str]] = None,
        allowed_methods: typing.Optional[typing.Sequence[builtins.str]] = None,
        allowed_origins: typing.Optional[typing.Sequence[builtins.str]] = None,
        max_age: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param allow_all_headers: Allows all HTTP request headers. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_headers ZeroTrustAccessApplication#allow_all_headers}
        :param allow_all_methods: Allows all HTTP request methods. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_methods ZeroTrustAccessApplication#allow_all_methods}
        :param allow_all_origins: Allows all origins. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_origins ZeroTrustAccessApplication#allow_all_origins}
        :param allow_credentials: When set to ``true``, includes credentials (cookies, authorization headers, or TLS client certificates) with requests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_credentials ZeroTrustAccessApplication#allow_credentials}
        :param allowed_headers: Allowed HTTP request headers. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_headers ZeroTrustAccessApplication#allowed_headers}
        :param allowed_methods: Allowed HTTP request methods. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_methods ZeroTrustAccessApplication#allowed_methods}
        :param allowed_origins: Allowed origins. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_origins ZeroTrustAccessApplication#allowed_origins}
        :param max_age: The maximum number of seconds the results of a preflight request can be cached. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#max_age ZeroTrustAccessApplication#max_age}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__570d0baa177c6afcf552d1711ba79b01b6b8b310579c5b73ce48b2f5f08ca83a)
            check_type(argname="argument allow_all_headers", value=allow_all_headers, expected_type=type_hints["allow_all_headers"])
            check_type(argname="argument allow_all_methods", value=allow_all_methods, expected_type=type_hints["allow_all_methods"])
            check_type(argname="argument allow_all_origins", value=allow_all_origins, expected_type=type_hints["allow_all_origins"])
            check_type(argname="argument allow_credentials", value=allow_credentials, expected_type=type_hints["allow_credentials"])
            check_type(argname="argument allowed_headers", value=allowed_headers, expected_type=type_hints["allowed_headers"])
            check_type(argname="argument allowed_methods", value=allowed_methods, expected_type=type_hints["allowed_methods"])
            check_type(argname="argument allowed_origins", value=allowed_origins, expected_type=type_hints["allowed_origins"])
            check_type(argname="argument max_age", value=max_age, expected_type=type_hints["max_age"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if allow_all_headers is not None:
            self._values["allow_all_headers"] = allow_all_headers
        if allow_all_methods is not None:
            self._values["allow_all_methods"] = allow_all_methods
        if allow_all_origins is not None:
            self._values["allow_all_origins"] = allow_all_origins
        if allow_credentials is not None:
            self._values["allow_credentials"] = allow_credentials
        if allowed_headers is not None:
            self._values["allowed_headers"] = allowed_headers
        if allowed_methods is not None:
            self._values["allowed_methods"] = allowed_methods
        if allowed_origins is not None:
            self._values["allowed_origins"] = allowed_origins
        if max_age is not None:
            self._values["max_age"] = max_age

    @builtins.property
    def allow_all_headers(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows all HTTP request headers.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_headers ZeroTrustAccessApplication#allow_all_headers}
        '''
        result = self._values.get("allow_all_headers")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def allow_all_methods(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows all HTTP request methods.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_methods ZeroTrustAccessApplication#allow_all_methods}
        '''
        result = self._values.get("allow_all_methods")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def allow_all_origins(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Allows all origins.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_all_origins ZeroTrustAccessApplication#allow_all_origins}
        '''
        result = self._values.get("allow_all_origins")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def allow_credentials(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''When set to ``true``, includes credentials (cookies, authorization headers, or TLS client certificates) with requests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_credentials ZeroTrustAccessApplication#allow_credentials}
        '''
        result = self._values.get("allow_credentials")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def allowed_headers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Allowed HTTP request headers.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_headers ZeroTrustAccessApplication#allowed_headers}
        '''
        result = self._values.get("allowed_headers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def allowed_methods(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Allowed HTTP request methods.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_methods ZeroTrustAccessApplication#allowed_methods}
        '''
        result = self._values.get("allowed_methods")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def allowed_origins(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Allowed origins.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allowed_origins ZeroTrustAccessApplication#allowed_origins}
        '''
        result = self._values.get("allowed_origins")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def max_age(self) -> typing.Optional[jsii.Number]:
        '''The maximum number of seconds the results of a preflight request can be cached.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#max_age ZeroTrustAccessApplication#max_age}
        '''
        result = self._values.get("max_age")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationCorsHeaders(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationCorsHeadersOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationCorsHeadersOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1fcf1fe95da2b6031991ead48569fbb9ff00b03afd00e3214e3d20386a992210)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowAllHeaders")
    def reset_allow_all_headers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowAllHeaders", []))

    @jsii.member(jsii_name="resetAllowAllMethods")
    def reset_allow_all_methods(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowAllMethods", []))

    @jsii.member(jsii_name="resetAllowAllOrigins")
    def reset_allow_all_origins(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowAllOrigins", []))

    @jsii.member(jsii_name="resetAllowCredentials")
    def reset_allow_credentials(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowCredentials", []))

    @jsii.member(jsii_name="resetAllowedHeaders")
    def reset_allowed_headers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowedHeaders", []))

    @jsii.member(jsii_name="resetAllowedMethods")
    def reset_allowed_methods(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowedMethods", []))

    @jsii.member(jsii_name="resetAllowedOrigins")
    def reset_allowed_origins(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowedOrigins", []))

    @jsii.member(jsii_name="resetMaxAge")
    def reset_max_age(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxAge", []))

    @builtins.property
    @jsii.member(jsii_name="allowAllHeadersInput")
    def allow_all_headers_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowAllHeadersInput"))

    @builtins.property
    @jsii.member(jsii_name="allowAllMethodsInput")
    def allow_all_methods_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowAllMethodsInput"))

    @builtins.property
    @jsii.member(jsii_name="allowAllOriginsInput")
    def allow_all_origins_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowAllOriginsInput"))

    @builtins.property
    @jsii.member(jsii_name="allowCredentialsInput")
    def allow_credentials_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowCredentialsInput"))

    @builtins.property
    @jsii.member(jsii_name="allowedHeadersInput")
    def allowed_headers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "allowedHeadersInput"))

    @builtins.property
    @jsii.member(jsii_name="allowedMethodsInput")
    def allowed_methods_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "allowedMethodsInput"))

    @builtins.property
    @jsii.member(jsii_name="allowedOriginsInput")
    def allowed_origins_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "allowedOriginsInput"))

    @builtins.property
    @jsii.member(jsii_name="maxAgeInput")
    def max_age_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "maxAgeInput"))

    @builtins.property
    @jsii.member(jsii_name="allowAllHeaders")
    def allow_all_headers(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowAllHeaders"))

    @allow_all_headers.setter
    def allow_all_headers(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34d0a09ee60d1b08c6963232e100c6ceaaede5c0ef39009732582d935fc1e905)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowAllHeaders", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowAllMethods")
    def allow_all_methods(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowAllMethods"))

    @allow_all_methods.setter
    def allow_all_methods(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d135a36b855dfbbbf40a911ff12cf0577ed83002a7a7cee84aa8c13c23cb8f8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowAllMethods", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowAllOrigins")
    def allow_all_origins(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowAllOrigins"))

    @allow_all_origins.setter
    def allow_all_origins(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c840a4753ace2f1e243c60b9916c5df15c9d7246abf3c6895676d0a316420c02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowAllOrigins", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowCredentials")
    def allow_credentials(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowCredentials"))

    @allow_credentials.setter
    def allow_credentials(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8009166033a2928de4ebc21edad17423ddc0e0deebedab0af8c4dfc5fb83381)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowCredentials", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowedHeaders")
    def allowed_headers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "allowedHeaders"))

    @allowed_headers.setter
    def allowed_headers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__082f53f30671b16288afc1a9ad26c542a9b393e4541acc8b87918982ce0310ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowedHeaders", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowedMethods")
    def allowed_methods(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "allowedMethods"))

    @allowed_methods.setter
    def allowed_methods(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef529e72178495b6c43ebe1f695b2cae1293867b0f0c9fff9215f1082c95435a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowedMethods", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowedOrigins")
    def allowed_origins(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "allowedOrigins"))

    @allowed_origins.setter
    def allowed_origins(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__933b2162a14fe720dc097500c299b6154310fffaa61cea5569bb901b681e85b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowedOrigins", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="maxAge")
    def max_age(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "maxAge"))

    @max_age.setter
    def max_age(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca16c2a986f7382e78a17fb496bd86538fd3ee1d9a8475ec1ff814259a785797)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxAge", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationCorsHeaders]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationCorsHeaders]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationCorsHeaders]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ad0e91b7680ac85eae84c174e10132dc780ef53bf867a5ccffdfc73790cd36e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationDestinations",
    jsii_struct_bases=[],
    name_mapping={
        "cidr": "cidr",
        "hostname": "hostname",
        "l4_protocol": "l4Protocol",
        "port_range": "portRange",
        "type": "type",
        "uri": "uri",
        "vnet_id": "vnetId",
    },
)
class ZeroTrustAccessApplicationDestinations:
    def __init__(
        self,
        *,
        cidr: typing.Optional[builtins.str] = None,
        hostname: typing.Optional[builtins.str] = None,
        l4_protocol: typing.Optional[builtins.str] = None,
        port_range: typing.Optional[builtins.str] = None,
        type: typing.Optional[builtins.str] = None,
        uri: typing.Optional[builtins.str] = None,
        vnet_id: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param cidr: The CIDR range of the destination. Single IPs will be computed as /32. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#cidr ZeroTrustAccessApplication#cidr}
        :param hostname: The hostname of the destination. Matches a valid SNI served by an HTTPS origin. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#hostname ZeroTrustAccessApplication#hostname}
        :param l4_protocol: The L4 protocol of the destination. When omitted, both UDP and TCP traffic will match. Available values: "tcp", "udp". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#l4_protocol ZeroTrustAccessApplication#l4_protocol}
        :param port_range: The port range of the destination. Can be a single port or a range of ports. When omitted, all ports will match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#port_range ZeroTrustAccessApplication#port_range}
        :param type: Available values: "public", "private". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#type ZeroTrustAccessApplication#type}
        :param uri: The URI of the destination. Public destinations' URIs can include a domain and path with `wildcards <https://developers.cloudflare.com/cloudflare-one/policies/access/app-paths/>`_. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#uri ZeroTrustAccessApplication#uri}
        :param vnet_id: The VNET ID to match the destination. When omitted, all VNETs will match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#vnet_id ZeroTrustAccessApplication#vnet_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb53f29245a8f4afef45363f780ecbc61eec9157bc84ce5d2838e235e17fc873)
            check_type(argname="argument cidr", value=cidr, expected_type=type_hints["cidr"])
            check_type(argname="argument hostname", value=hostname, expected_type=type_hints["hostname"])
            check_type(argname="argument l4_protocol", value=l4_protocol, expected_type=type_hints["l4_protocol"])
            check_type(argname="argument port_range", value=port_range, expected_type=type_hints["port_range"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument vnet_id", value=vnet_id, expected_type=type_hints["vnet_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if cidr is not None:
            self._values["cidr"] = cidr
        if hostname is not None:
            self._values["hostname"] = hostname
        if l4_protocol is not None:
            self._values["l4_protocol"] = l4_protocol
        if port_range is not None:
            self._values["port_range"] = port_range
        if type is not None:
            self._values["type"] = type
        if uri is not None:
            self._values["uri"] = uri
        if vnet_id is not None:
            self._values["vnet_id"] = vnet_id

    @builtins.property
    def cidr(self) -> typing.Optional[builtins.str]:
        '''The CIDR range of the destination. Single IPs will be computed as /32.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#cidr ZeroTrustAccessApplication#cidr}
        '''
        result = self._values.get("cidr")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def hostname(self) -> typing.Optional[builtins.str]:
        '''The hostname of the destination. Matches a valid SNI served by an HTTPS origin.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#hostname ZeroTrustAccessApplication#hostname}
        '''
        result = self._values.get("hostname")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def l4_protocol(self) -> typing.Optional[builtins.str]:
        '''The L4 protocol of the destination. When omitted, both UDP and TCP traffic will match. Available values: "tcp", "udp".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#l4_protocol ZeroTrustAccessApplication#l4_protocol}
        '''
        result = self._values.get("l4_protocol")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def port_range(self) -> typing.Optional[builtins.str]:
        '''The port range of the destination.

        Can be a single port or a range of ports. When omitted, all ports will match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#port_range ZeroTrustAccessApplication#port_range}
        '''
        result = self._values.get("port_range")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def type(self) -> typing.Optional[builtins.str]:
        '''Available values: "public", "private".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#type ZeroTrustAccessApplication#type}
        '''
        result = self._values.get("type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def uri(self) -> typing.Optional[builtins.str]:
        '''The URI of the destination. Public destinations' URIs can include a domain and path with `wildcards <https://developers.cloudflare.com/cloudflare-one/policies/access/app-paths/>`_.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#uri ZeroTrustAccessApplication#uri}
        '''
        result = self._values.get("uri")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def vnet_id(self) -> typing.Optional[builtins.str]:
        '''The VNET ID to match the destination. When omitted, all VNETs will match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#vnet_id ZeroTrustAccessApplication#vnet_id}
        '''
        result = self._values.get("vnet_id")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationDestinations(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationDestinationsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationDestinationsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8168d79a8693c9a4e11c3b5ac3ec9eba59f7a61ff41ef15d1510416071392301)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationDestinationsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9eb9842149a5ba31f0c7bb7a4bc2efc080e3f3c9bf4f718ec8bbd9987bf4badc)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationDestinationsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c416ede1a70be4b7cef8f1721172a05250854cca34377c9007f895313c8fbaa2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bbbb8d8255fcf87cb4069296b24e7fdb52c6606b44ac92d6c62f69fcca0ddb3c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23f4dd46e14736abe9c77407eda1be11e2e0e38d575e78aea951685bc2c365dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationDestinations]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationDestinations]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationDestinations]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a22c25c82c26ed7b257b2d03476a3fbd8bb5dd8bab445155b2691eb44afde5ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationDestinationsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationDestinationsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cad05bb67450b8cea2997f05d67e7950ddb7245da376758e1e76342421594589)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetCidr")
    def reset_cidr(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCidr", []))

    @jsii.member(jsii_name="resetHostname")
    def reset_hostname(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHostname", []))

    @jsii.member(jsii_name="resetL4Protocol")
    def reset_l4_protocol(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetL4Protocol", []))

    @jsii.member(jsii_name="resetPortRange")
    def reset_port_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPortRange", []))

    @jsii.member(jsii_name="resetType")
    def reset_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetType", []))

    @jsii.member(jsii_name="resetUri")
    def reset_uri(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUri", []))

    @jsii.member(jsii_name="resetVnetId")
    def reset_vnet_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVnetId", []))

    @builtins.property
    @jsii.member(jsii_name="cidrInput")
    def cidr_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cidrInput"))

    @builtins.property
    @jsii.member(jsii_name="hostnameInput")
    def hostname_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "hostnameInput"))

    @builtins.property
    @jsii.member(jsii_name="l4ProtocolInput")
    def l4_protocol_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "l4ProtocolInput"))

    @builtins.property
    @jsii.member(jsii_name="portRangeInput")
    def port_range_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "portRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="typeInput")
    def type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "typeInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="vnetIdInput")
    def vnet_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "vnetIdInput"))

    @builtins.property
    @jsii.member(jsii_name="cidr")
    def cidr(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cidr"))

    @cidr.setter
    def cidr(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30477d448728edc2c88ced84d5ce7a8731fd4e2fc97baa06ff1ff02b23efe0a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cidr", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="hostname")
    def hostname(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "hostname"))

    @hostname.setter
    def hostname(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__653b85ad251783a077dbe5b716d563e7082a7031a6f0e6a1630ca1898b9ec06c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hostname", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="l4Protocol")
    def l4_protocol(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "l4Protocol"))

    @l4_protocol.setter
    def l4_protocol(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69b7deb042d6c2cd280fdd761e9dc882cb05b4afbbf8e9cfbbbc736eb926cb14)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "l4Protocol", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="portRange")
    def port_range(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "portRange"))

    @port_range.setter
    def port_range(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01f9144aa9987f7b94a367816d754ed8462e51be81d6bdbbe06880f4745a2c70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "portRange", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "type"))

    @type.setter
    def type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d3f7e0e5261b28be35a0e20320948333c43ca52eec412f6d1ab534347d28b7e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__642515c81cebe22a173f73f35c34adb39b6ef57f7f0a66229da0ebaf09d59131)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="vnetId")
    def vnet_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "vnetId"))

    @vnet_id.setter
    def vnet_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__376a01733d244dd5341d6e082a4763bbdd0de1ed923f63c46fcdb8a751e0ea51)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "vnetId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationDestinations]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationDestinations]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationDestinations]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4905a20cb306991e008eaa738934cdef4f96e362a5886068f6f65d016dd335f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationFooterLinks",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "url": "url"},
)
class ZeroTrustAccessApplicationFooterLinks:
    def __init__(self, *, name: builtins.str, url: builtins.str) -> None:
        '''
        :param name: The hypertext in the footer link. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param url: the hyperlink in the footer link. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#url ZeroTrustAccessApplication#url}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c33de202b3d83c54564f055486a5738ad842797dede2aa86d887444a9647d0ff)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument url", value=url, expected_type=type_hints["url"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
            "url": url,
        }

    @builtins.property
    def name(self) -> builtins.str:
        '''The hypertext in the footer link.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def url(self) -> builtins.str:
        '''the hyperlink in the footer link.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#url ZeroTrustAccessApplication#url}
        '''
        result = self._values.get("url")
        assert result is not None, "Required property 'url' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationFooterLinks(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationFooterLinksList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationFooterLinksList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ce73644e02d48e6eb68a59282e83ae003bd1ced90461a5197c95a65e17da3d0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationFooterLinksOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abf2e1a33ba6a3d6ec819c36230d12610454e30c60a713b341411d823ba23192)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationFooterLinksOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5e51e2383e0ec4f8292d683b26b6b451e152ad08ddd5747991e2b6d0d4e4924)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c62edec9276ba061132ebfc6eb52acd5e6ab14a44cf072735b27a81bc4debbf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e4c4c388a572055d945d7eede9097569a3ea099aaaad53f249b82ede4ac509c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationFooterLinks]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationFooterLinks]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationFooterLinks]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0bc629578b246ab1a8885978399933d192377d2ba319a4f0ec7757ef9614f62)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationFooterLinksOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationFooterLinksOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46d21bc58a76579810293c6ae93bcda284e56e65f8c609faaeed6b3ca3b2aa86)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="urlInput")
    def url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "urlInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38a6aea00285b792ec70c175c5fae0a1a784246695e5eb80558a8a979b66d634)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="url")
    def url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "url"))

    @url.setter
    def url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9137cb5922c257b75cacc27a6774aad64820e641abcc311e7064f16d43af3060)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "url", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationFooterLinks]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationFooterLinks]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationFooterLinks]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e32afdbdbe0dee00528ada5be0b893b76024e13f0273e8adeff1fc2019313703)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationLandingPageDesign",
    jsii_struct_bases=[],
    name_mapping={
        "button_color": "buttonColor",
        "button_text_color": "buttonTextColor",
        "image_url": "imageUrl",
        "message": "message",
        "title": "title",
    },
)
class ZeroTrustAccessApplicationLandingPageDesign:
    def __init__(
        self,
        *,
        button_color: typing.Optional[builtins.str] = None,
        button_text_color: typing.Optional[builtins.str] = None,
        image_url: typing.Optional[builtins.str] = None,
        message: typing.Optional[builtins.str] = None,
        title: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param button_color: The background color of the log in button on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#button_color ZeroTrustAccessApplication#button_color}
        :param button_text_color: The color of the text in the log in button on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#button_text_color ZeroTrustAccessApplication#button_text_color}
        :param image_url: The URL of the image shown on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#image_url ZeroTrustAccessApplication#image_url}
        :param message: The message shown on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#message ZeroTrustAccessApplication#message}
        :param title: The title shown on the landing page. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#title ZeroTrustAccessApplication#title}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8926bc90faf274b6c685bf7e4c7c54a0f88e4ee4cf30cf581bdcd7feb90d772e)
            check_type(argname="argument button_color", value=button_color, expected_type=type_hints["button_color"])
            check_type(argname="argument button_text_color", value=button_text_color, expected_type=type_hints["button_text_color"])
            check_type(argname="argument image_url", value=image_url, expected_type=type_hints["image_url"])
            check_type(argname="argument message", value=message, expected_type=type_hints["message"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if button_color is not None:
            self._values["button_color"] = button_color
        if button_text_color is not None:
            self._values["button_text_color"] = button_text_color
        if image_url is not None:
            self._values["image_url"] = image_url
        if message is not None:
            self._values["message"] = message
        if title is not None:
            self._values["title"] = title

    @builtins.property
    def button_color(self) -> typing.Optional[builtins.str]:
        '''The background color of the log in button on the landing page.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#button_color ZeroTrustAccessApplication#button_color}
        '''
        result = self._values.get("button_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def button_text_color(self) -> typing.Optional[builtins.str]:
        '''The color of the text in the log in button on the landing page.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#button_text_color ZeroTrustAccessApplication#button_text_color}
        '''
        result = self._values.get("button_text_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def image_url(self) -> typing.Optional[builtins.str]:
        '''The URL of the image shown on the landing page.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#image_url ZeroTrustAccessApplication#image_url}
        '''
        result = self._values.get("image_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def message(self) -> typing.Optional[builtins.str]:
        '''The message shown on the landing page.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#message ZeroTrustAccessApplication#message}
        '''
        result = self._values.get("message")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def title(self) -> typing.Optional[builtins.str]:
        '''The title shown on the landing page.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#title ZeroTrustAccessApplication#title}
        '''
        result = self._values.get("title")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationLandingPageDesign(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationLandingPageDesignOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationLandingPageDesignOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__469f1fb2458e3a0a89654ebf80a766ab780607f746e831ffede7d84c08f114c8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetButtonColor")
    def reset_button_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetButtonColor", []))

    @jsii.member(jsii_name="resetButtonTextColor")
    def reset_button_text_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetButtonTextColor", []))

    @jsii.member(jsii_name="resetImageUrl")
    def reset_image_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetImageUrl", []))

    @jsii.member(jsii_name="resetMessage")
    def reset_message(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMessage", []))

    @jsii.member(jsii_name="resetTitle")
    def reset_title(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTitle", []))

    @builtins.property
    @jsii.member(jsii_name="buttonColorInput")
    def button_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "buttonColorInput"))

    @builtins.property
    @jsii.member(jsii_name="buttonTextColorInput")
    def button_text_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "buttonTextColorInput"))

    @builtins.property
    @jsii.member(jsii_name="imageUrlInput")
    def image_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "imageUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="messageInput")
    def message_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "messageInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="buttonColor")
    def button_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "buttonColor"))

    @button_color.setter
    def button_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1b6c4ec3f0d549f31041f7cffde66753d6dd27e2c8402c72ae14d81be888644)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "buttonColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="buttonTextColor")
    def button_text_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "buttonTextColor"))

    @button_text_color.setter
    def button_text_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcb3e7b45304465a72f40624ad5f08515f2fc0e3094853ae561807b34af88af7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "buttonTextColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="imageUrl")
    def image_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "imageUrl"))

    @image_url.setter
    def image_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db4a91aee042f486c785ac2b6ec48e8a41bb11997c1cc07c7e40daafea05495d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "imageUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="message")
    def message(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "message"))

    @message.setter
    def message(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b631466d7f511cd30ae0b7ee0fd957a686eb7d41596b8b527d6dfffc112b7994)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "message", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "title"))

    @title.setter
    def title(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5658ce331fa05e1720564dc64cad97c9859e052f5db692bd7949bb1bfda86ff6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "title", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationLandingPageDesign]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationLandingPageDesign]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationLandingPageDesign]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e44de85cfb941b73aa477ef6a25f8ff6ec66c03a22228165cede093b7715b5a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPolicies",
    jsii_struct_bases=[],
    name_mapping={
        "connection_rules": "connectionRules",
        "decision": "decision",
        "exclude": "exclude",
        "id": "id",
        "include": "include",
        "name": "name",
        "precedence": "precedence",
        "require": "require",
    },
)
class ZeroTrustAccessApplicationPolicies:
    def __init__(
        self,
        *,
        connection_rules: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesConnectionRules", typing.Dict[builtins.str, typing.Any]]] = None,
        decision: typing.Optional[builtins.str] = None,
        exclude: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationPoliciesExclude", typing.Dict[builtins.str, typing.Any]]]]] = None,
        id: typing.Optional[builtins.str] = None,
        include: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationPoliciesInclude", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[builtins.str] = None,
        precedence: typing.Optional[jsii.Number] = None,
        require: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationPoliciesRequire", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param connection_rules: The rules that define how users may connect to the targets secured by your application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#connection_rules ZeroTrustAccessApplication#connection_rules}
        :param decision: The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action. Available values: "allow", "deny", "non_identity", "bypass". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#decision ZeroTrustAccessApplication#decision}
        :param exclude: Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#exclude ZeroTrustAccessApplication#exclude}
        :param id: The UUID of the policy. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param include: Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#include ZeroTrustAccessApplication#include}
        :param name: The name of the Access policy. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param precedence: The order of execution for this policy. Must be unique for each policy within an app. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#precedence ZeroTrustAccessApplication#precedence}
        :param require: Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#require ZeroTrustAccessApplication#require}
        '''
        if isinstance(connection_rules, dict):
            connection_rules = ZeroTrustAccessApplicationPoliciesConnectionRules(**connection_rules)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5276b0f28ab5a6ee2a8b99704f49ff6ab4844f1fdd2533d77c601f1922025a3e)
            check_type(argname="argument connection_rules", value=connection_rules, expected_type=type_hints["connection_rules"])
            check_type(argname="argument decision", value=decision, expected_type=type_hints["decision"])
            check_type(argname="argument exclude", value=exclude, expected_type=type_hints["exclude"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument include", value=include, expected_type=type_hints["include"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument precedence", value=precedence, expected_type=type_hints["precedence"])
            check_type(argname="argument require", value=require, expected_type=type_hints["require"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if connection_rules is not None:
            self._values["connection_rules"] = connection_rules
        if decision is not None:
            self._values["decision"] = decision
        if exclude is not None:
            self._values["exclude"] = exclude
        if id is not None:
            self._values["id"] = id
        if include is not None:
            self._values["include"] = include
        if name is not None:
            self._values["name"] = name
        if precedence is not None:
            self._values["precedence"] = precedence
        if require is not None:
            self._values["require"] = require

    @builtins.property
    def connection_rules(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesConnectionRules"]:
        '''The rules that define how users may connect to the targets secured by your application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#connection_rules ZeroTrustAccessApplication#connection_rules}
        '''
        result = self._values.get("connection_rules")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesConnectionRules"], result)

    @builtins.property
    def decision(self) -> typing.Optional[builtins.str]:
        '''The action Access will take if a user matches this policy.

        Infrastructure application policies can only use the Allow action.
        Available values: "allow", "deny", "non_identity", "bypass".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#decision ZeroTrustAccessApplication#decision}
        '''
        result = self._values.get("decision")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def exclude(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesExclude"]]]:
        '''Rules evaluated with a NOT logical operator.

        To match the policy, a user cannot meet any of the Exclude rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#exclude ZeroTrustAccessApplication#exclude}
        '''
        result = self._values.get("exclude")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesExclude"]]], result)

    @builtins.property
    def id(self) -> typing.Optional[builtins.str]:
        '''The UUID of the policy.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def include(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesInclude"]]]:
        '''Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#include ZeroTrustAccessApplication#include}
        '''
        result = self._values.get("include")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesInclude"]]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The name of the Access policy.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def precedence(self) -> typing.Optional[jsii.Number]:
        '''The order of execution for this policy. Must be unique for each policy within an app.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#precedence ZeroTrustAccessApplication#precedence}
        '''
        result = self._values.get("precedence")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def require(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesRequire"]]]:
        '''Rules evaluated with an AND logical operator.

        To match the policy, a user must meet all of the Require rules.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#require ZeroTrustAccessApplication#require}
        '''
        result = self._values.get("require")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesRequire"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPolicies(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesConnectionRules",
    jsii_struct_bases=[],
    name_mapping={"ssh": "ssh"},
)
class ZeroTrustAccessApplicationPoliciesConnectionRules:
    def __init__(
        self,
        *,
        ssh: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesConnectionRulesSsh", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param ssh: The SSH-specific rules that define how users may connect to the targets secured by your application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ssh ZeroTrustAccessApplication#ssh}
        '''
        if isinstance(ssh, dict):
            ssh = ZeroTrustAccessApplicationPoliciesConnectionRulesSsh(**ssh)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4253de3b0ff9485e25a1b005290537c65349468493ed1a9c9f09a9ef85aa430e)
            check_type(argname="argument ssh", value=ssh, expected_type=type_hints["ssh"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ssh is not None:
            self._values["ssh"] = ssh

    @builtins.property
    def ssh(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesConnectionRulesSsh"]:
        '''The SSH-specific rules that define how users may connect to the targets secured by your application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ssh ZeroTrustAccessApplication#ssh}
        '''
        result = self._values.get("ssh")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesConnectionRulesSsh"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesConnectionRules(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesConnectionRulesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesConnectionRulesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5e7e6fcad5e55e48c92a541e0c8016014f113689a293b3b35a76670005e05cf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putSsh")
    def put_ssh(
        self,
        *,
        usernames: typing.Sequence[builtins.str],
        allow_email_alias: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param usernames: Contains the Unix usernames that may be used when connecting over SSH. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#usernames ZeroTrustAccessApplication#usernames}
        :param allow_email_alias: Enables using Identity Provider email alias as SSH username. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_email_alias ZeroTrustAccessApplication#allow_email_alias}
        '''
        value = ZeroTrustAccessApplicationPoliciesConnectionRulesSsh(
            usernames=usernames, allow_email_alias=allow_email_alias
        )

        return typing.cast(None, jsii.invoke(self, "putSsh", [value]))

    @jsii.member(jsii_name="resetSsh")
    def reset_ssh(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSsh", []))

    @builtins.property
    @jsii.member(jsii_name="ssh")
    def ssh(
        self,
    ) -> "ZeroTrustAccessApplicationPoliciesConnectionRulesSshOutputReference":
        return typing.cast("ZeroTrustAccessApplicationPoliciesConnectionRulesSshOutputReference", jsii.get(self, "ssh"))

    @builtins.property
    @jsii.member(jsii_name="sshInput")
    def ssh_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesConnectionRulesSsh"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesConnectionRulesSsh"]], jsii.get(self, "sshInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRules]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRules]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRules]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d8d2a29605df7d19f344f79ee0a738ea474f649d403a5e8167b47e5b157b9b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesConnectionRulesSsh",
    jsii_struct_bases=[],
    name_mapping={"usernames": "usernames", "allow_email_alias": "allowEmailAlias"},
)
class ZeroTrustAccessApplicationPoliciesConnectionRulesSsh:
    def __init__(
        self,
        *,
        usernames: typing.Sequence[builtins.str],
        allow_email_alias: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param usernames: Contains the Unix usernames that may be used when connecting over SSH. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#usernames ZeroTrustAccessApplication#usernames}
        :param allow_email_alias: Enables using Identity Provider email alias as SSH username. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_email_alias ZeroTrustAccessApplication#allow_email_alias}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c73696d46c589c6fd5b1d1a2682d61b18c06d25569d37f3e76233cf6cfb3c34)
            check_type(argname="argument usernames", value=usernames, expected_type=type_hints["usernames"])
            check_type(argname="argument allow_email_alias", value=allow_email_alias, expected_type=type_hints["allow_email_alias"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "usernames": usernames,
        }
        if allow_email_alias is not None:
            self._values["allow_email_alias"] = allow_email_alias

    @builtins.property
    def usernames(self) -> typing.List[builtins.str]:
        '''Contains the Unix usernames that may be used when connecting over SSH.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#usernames ZeroTrustAccessApplication#usernames}
        '''
        result = self._values.get("usernames")
        assert result is not None, "Required property 'usernames' is missing"
        return typing.cast(typing.List[builtins.str], result)

    @builtins.property
    def allow_email_alias(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Enables using Identity Provider email alias as SSH username.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_email_alias ZeroTrustAccessApplication#allow_email_alias}
        '''
        result = self._values.get("allow_email_alias")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesConnectionRulesSsh(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesConnectionRulesSshOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesConnectionRulesSshOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13b69ffa0447a7fd2135e32ab3086e3bf1d86ed6b0de6772e3f5b769defd2efc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAllowEmailAlias")
    def reset_allow_email_alias(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowEmailAlias", []))

    @builtins.property
    @jsii.member(jsii_name="allowEmailAliasInput")
    def allow_email_alias_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowEmailAliasInput"))

    @builtins.property
    @jsii.member(jsii_name="usernamesInput")
    def usernames_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "usernamesInput"))

    @builtins.property
    @jsii.member(jsii_name="allowEmailAlias")
    def allow_email_alias(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowEmailAlias"))

    @allow_email_alias.setter
    def allow_email_alias(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__088d894d1494d67c327e9409d3741c91ecaf9883010043d0f491946acebb53f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowEmailAlias", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="usernames")
    def usernames(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "usernames"))

    @usernames.setter
    def usernames(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c54f193166537adf45f1a1659ac85a928756b9b45c590ee5b688d7880640611)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "usernames", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRulesSsh]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRulesSsh]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRulesSsh]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__102491df16bcf12a3e18f6859b8696cbebd45e2098d5168fa54ffb505d684a3d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExclude",
    jsii_struct_bases=[],
    name_mapping={
        "any_valid_service_token": "anyValidServiceToken",
        "auth_context": "authContext",
        "auth_method": "authMethod",
        "azure_ad": "azureAd",
        "certificate": "certificate",
        "common_name": "commonName",
        "device_posture": "devicePosture",
        "email": "email",
        "email_domain": "emailDomain",
        "email_list": "emailList",
        "everyone": "everyone",
        "external_evaluation": "externalEvaluation",
        "geo": "geo",
        "github_organization": "githubOrganization",
        "group": "group",
        "gsuite": "gsuite",
        "ip": "ip",
        "ip_list": "ipList",
        "linked_app_token": "linkedAppToken",
        "login_method": "loginMethod",
        "oidc": "oidc",
        "okta": "okta",
        "saml": "saml",
        "service_token": "serviceToken",
    },
)
class ZeroTrustAccessApplicationPoliciesExclude:
    def __init__(
        self,
        *,
        any_valid_service_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken", typing.Dict[builtins.str, typing.Any]]] = None,
        auth_context: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeAuthContext", typing.Dict[builtins.str, typing.Any]]] = None,
        auth_method: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeAuthMethod", typing.Dict[builtins.str, typing.Any]]] = None,
        azure_ad: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeAzureAd", typing.Dict[builtins.str, typing.Any]]] = None,
        certificate: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeCertificate", typing.Dict[builtins.str, typing.Any]]] = None,
        common_name: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeCommonName", typing.Dict[builtins.str, typing.Any]]] = None,
        device_posture: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeDevicePosture", typing.Dict[builtins.str, typing.Any]]] = None,
        email: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeEmail", typing.Dict[builtins.str, typing.Any]]] = None,
        email_domain: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeEmailDomain", typing.Dict[builtins.str, typing.Any]]] = None,
        email_list: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct", typing.Dict[builtins.str, typing.Any]]] = None,
        everyone: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeEveryone", typing.Dict[builtins.str, typing.Any]]] = None,
        external_evaluation: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation", typing.Dict[builtins.str, typing.Any]]] = None,
        geo: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeGeo", typing.Dict[builtins.str, typing.Any]]] = None,
        github_organization: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization", typing.Dict[builtins.str, typing.Any]]] = None,
        group: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeGroup", typing.Dict[builtins.str, typing.Any]]] = None,
        gsuite: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeGsuite", typing.Dict[builtins.str, typing.Any]]] = None,
        ip: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeIp", typing.Dict[builtins.str, typing.Any]]] = None,
        ip_list: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeIpListStruct", typing.Dict[builtins.str, typing.Any]]] = None,
        linked_app_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken", typing.Dict[builtins.str, typing.Any]]] = None,
        login_method: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeLoginMethod", typing.Dict[builtins.str, typing.Any]]] = None,
        oidc: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeOidc", typing.Dict[builtins.str, typing.Any]]] = None,
        okta: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeOkta", typing.Dict[builtins.str, typing.Any]]] = None,
        saml: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeSaml", typing.Dict[builtins.str, typing.Any]]] = None,
        service_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesExcludeServiceToken", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param any_valid_service_token: An empty object which matches on all service tokens. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#any_valid_service_token ZeroTrustAccessApplication#any_valid_service_token}
        :param auth_context: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_context ZeroTrustAccessApplication#auth_context}.
        :param auth_method: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}.
        :param azure_ad: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#azure_ad ZeroTrustAccessApplication#azure_ad}.
        :param certificate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#certificate ZeroTrustAccessApplication#certificate}.
        :param common_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}.
        :param device_posture: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#device_posture ZeroTrustAccessApplication#device_posture}.
        :param email: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}.
        :param email_domain: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_domain ZeroTrustAccessApplication#email_domain}.
        :param email_list: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_list ZeroTrustAccessApplication#email_list}.
        :param everyone: An empty object which matches on all users. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#everyone ZeroTrustAccessApplication#everyone}
        :param external_evaluation: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#external_evaluation ZeroTrustAccessApplication#external_evaluation}.
        :param geo: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#geo ZeroTrustAccessApplication#geo}.
        :param github_organization: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#github_organization ZeroTrustAccessApplication#github_organization}.
        :param group: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group ZeroTrustAccessApplication#group}.
        :param gsuite: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#gsuite ZeroTrustAccessApplication#gsuite}.
        :param ip: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}.
        :param ip_list: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip_list ZeroTrustAccessApplication#ip_list}.
        :param linked_app_token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#linked_app_token ZeroTrustAccessApplication#linked_app_token}.
        :param login_method: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#login_method ZeroTrustAccessApplication#login_method}.
        :param oidc: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#oidc ZeroTrustAccessApplication#oidc}.
        :param okta: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#okta ZeroTrustAccessApplication#okta}.
        :param saml: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml ZeroTrustAccessApplication#saml}.
        :param service_token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_token ZeroTrustAccessApplication#service_token}.
        '''
        if isinstance(any_valid_service_token, dict):
            any_valid_service_token = ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken(**any_valid_service_token)
        if isinstance(auth_context, dict):
            auth_context = ZeroTrustAccessApplicationPoliciesExcludeAuthContext(**auth_context)
        if isinstance(auth_method, dict):
            auth_method = ZeroTrustAccessApplicationPoliciesExcludeAuthMethod(**auth_method)
        if isinstance(azure_ad, dict):
            azure_ad = ZeroTrustAccessApplicationPoliciesExcludeAzureAd(**azure_ad)
        if isinstance(certificate, dict):
            certificate = ZeroTrustAccessApplicationPoliciesExcludeCertificate(**certificate)
        if isinstance(common_name, dict):
            common_name = ZeroTrustAccessApplicationPoliciesExcludeCommonName(**common_name)
        if isinstance(device_posture, dict):
            device_posture = ZeroTrustAccessApplicationPoliciesExcludeDevicePosture(**device_posture)
        if isinstance(email, dict):
            email = ZeroTrustAccessApplicationPoliciesExcludeEmail(**email)
        if isinstance(email_domain, dict):
            email_domain = ZeroTrustAccessApplicationPoliciesExcludeEmailDomain(**email_domain)
        if isinstance(email_list, dict):
            email_list = ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct(**email_list)
        if isinstance(everyone, dict):
            everyone = ZeroTrustAccessApplicationPoliciesExcludeEveryone(**everyone)
        if isinstance(external_evaluation, dict):
            external_evaluation = ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation(**external_evaluation)
        if isinstance(geo, dict):
            geo = ZeroTrustAccessApplicationPoliciesExcludeGeo(**geo)
        if isinstance(github_organization, dict):
            github_organization = ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization(**github_organization)
        if isinstance(group, dict):
            group = ZeroTrustAccessApplicationPoliciesExcludeGroup(**group)
        if isinstance(gsuite, dict):
            gsuite = ZeroTrustAccessApplicationPoliciesExcludeGsuite(**gsuite)
        if isinstance(ip, dict):
            ip = ZeroTrustAccessApplicationPoliciesExcludeIp(**ip)
        if isinstance(ip_list, dict):
            ip_list = ZeroTrustAccessApplicationPoliciesExcludeIpListStruct(**ip_list)
        if isinstance(linked_app_token, dict):
            linked_app_token = ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken(**linked_app_token)
        if isinstance(login_method, dict):
            login_method = ZeroTrustAccessApplicationPoliciesExcludeLoginMethod(**login_method)
        if isinstance(oidc, dict):
            oidc = ZeroTrustAccessApplicationPoliciesExcludeOidc(**oidc)
        if isinstance(okta, dict):
            okta = ZeroTrustAccessApplicationPoliciesExcludeOkta(**okta)
        if isinstance(saml, dict):
            saml = ZeroTrustAccessApplicationPoliciesExcludeSaml(**saml)
        if isinstance(service_token, dict):
            service_token = ZeroTrustAccessApplicationPoliciesExcludeServiceToken(**service_token)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__793bde42e2ceeb4906d2deffda990f027c4aa038e8e5e7d1e48f2f4fe16f5e6e)
            check_type(argname="argument any_valid_service_token", value=any_valid_service_token, expected_type=type_hints["any_valid_service_token"])
            check_type(argname="argument auth_context", value=auth_context, expected_type=type_hints["auth_context"])
            check_type(argname="argument auth_method", value=auth_method, expected_type=type_hints["auth_method"])
            check_type(argname="argument azure_ad", value=azure_ad, expected_type=type_hints["azure_ad"])
            check_type(argname="argument certificate", value=certificate, expected_type=type_hints["certificate"])
            check_type(argname="argument common_name", value=common_name, expected_type=type_hints["common_name"])
            check_type(argname="argument device_posture", value=device_posture, expected_type=type_hints["device_posture"])
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
            check_type(argname="argument email_domain", value=email_domain, expected_type=type_hints["email_domain"])
            check_type(argname="argument email_list", value=email_list, expected_type=type_hints["email_list"])
            check_type(argname="argument everyone", value=everyone, expected_type=type_hints["everyone"])
            check_type(argname="argument external_evaluation", value=external_evaluation, expected_type=type_hints["external_evaluation"])
            check_type(argname="argument geo", value=geo, expected_type=type_hints["geo"])
            check_type(argname="argument github_organization", value=github_organization, expected_type=type_hints["github_organization"])
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument gsuite", value=gsuite, expected_type=type_hints["gsuite"])
            check_type(argname="argument ip", value=ip, expected_type=type_hints["ip"])
            check_type(argname="argument ip_list", value=ip_list, expected_type=type_hints["ip_list"])
            check_type(argname="argument linked_app_token", value=linked_app_token, expected_type=type_hints["linked_app_token"])
            check_type(argname="argument login_method", value=login_method, expected_type=type_hints["login_method"])
            check_type(argname="argument oidc", value=oidc, expected_type=type_hints["oidc"])
            check_type(argname="argument okta", value=okta, expected_type=type_hints["okta"])
            check_type(argname="argument saml", value=saml, expected_type=type_hints["saml"])
            check_type(argname="argument service_token", value=service_token, expected_type=type_hints["service_token"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if any_valid_service_token is not None:
            self._values["any_valid_service_token"] = any_valid_service_token
        if auth_context is not None:
            self._values["auth_context"] = auth_context
        if auth_method is not None:
            self._values["auth_method"] = auth_method
        if azure_ad is not None:
            self._values["azure_ad"] = azure_ad
        if certificate is not None:
            self._values["certificate"] = certificate
        if common_name is not None:
            self._values["common_name"] = common_name
        if device_posture is not None:
            self._values["device_posture"] = device_posture
        if email is not None:
            self._values["email"] = email
        if email_domain is not None:
            self._values["email_domain"] = email_domain
        if email_list is not None:
            self._values["email_list"] = email_list
        if everyone is not None:
            self._values["everyone"] = everyone
        if external_evaluation is not None:
            self._values["external_evaluation"] = external_evaluation
        if geo is not None:
            self._values["geo"] = geo
        if github_organization is not None:
            self._values["github_organization"] = github_organization
        if group is not None:
            self._values["group"] = group
        if gsuite is not None:
            self._values["gsuite"] = gsuite
        if ip is not None:
            self._values["ip"] = ip
        if ip_list is not None:
            self._values["ip_list"] = ip_list
        if linked_app_token is not None:
            self._values["linked_app_token"] = linked_app_token
        if login_method is not None:
            self._values["login_method"] = login_method
        if oidc is not None:
            self._values["oidc"] = oidc
        if okta is not None:
            self._values["okta"] = okta
        if saml is not None:
            self._values["saml"] = saml
        if service_token is not None:
            self._values["service_token"] = service_token

    @builtins.property
    def any_valid_service_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken"]:
        '''An empty object which matches on all service tokens.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#any_valid_service_token ZeroTrustAccessApplication#any_valid_service_token}
        '''
        result = self._values.get("any_valid_service_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken"], result)

    @builtins.property
    def auth_context(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAuthContext"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_context ZeroTrustAccessApplication#auth_context}.'''
        result = self._values.get("auth_context")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAuthContext"], result)

    @builtins.property
    def auth_method(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAuthMethod"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}.'''
        result = self._values.get("auth_method")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAuthMethod"], result)

    @builtins.property
    def azure_ad(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAzureAd"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#azure_ad ZeroTrustAccessApplication#azure_ad}.'''
        result = self._values.get("azure_ad")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeAzureAd"], result)

    @builtins.property
    def certificate(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeCertificate"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#certificate ZeroTrustAccessApplication#certificate}.'''
        result = self._values.get("certificate")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeCertificate"], result)

    @builtins.property
    def common_name(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeCommonName"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}.'''
        result = self._values.get("common_name")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeCommonName"], result)

    @builtins.property
    def device_posture(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeDevicePosture"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#device_posture ZeroTrustAccessApplication#device_posture}.'''
        result = self._values.get("device_posture")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeDevicePosture"], result)

    @builtins.property
    def email(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEmail"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}.'''
        result = self._values.get("email")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEmail"], result)

    @builtins.property
    def email_domain(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEmailDomain"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_domain ZeroTrustAccessApplication#email_domain}.'''
        result = self._values.get("email_domain")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEmailDomain"], result)

    @builtins.property
    def email_list(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_list ZeroTrustAccessApplication#email_list}.'''
        result = self._values.get("email_list")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct"], result)

    @builtins.property
    def everyone(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEveryone"]:
        '''An empty object which matches on all users.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#everyone ZeroTrustAccessApplication#everyone}
        '''
        result = self._values.get("everyone")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeEveryone"], result)

    @builtins.property
    def external_evaluation(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#external_evaluation ZeroTrustAccessApplication#external_evaluation}.'''
        result = self._values.get("external_evaluation")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation"], result)

    @builtins.property
    def geo(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGeo"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#geo ZeroTrustAccessApplication#geo}.'''
        result = self._values.get("geo")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGeo"], result)

    @builtins.property
    def github_organization(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#github_organization ZeroTrustAccessApplication#github_organization}.'''
        result = self._values.get("github_organization")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization"], result)

    @builtins.property
    def group(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGroup"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group ZeroTrustAccessApplication#group}.'''
        result = self._values.get("group")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGroup"], result)

    @builtins.property
    def gsuite(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGsuite"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#gsuite ZeroTrustAccessApplication#gsuite}.'''
        result = self._values.get("gsuite")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeGsuite"], result)

    @builtins.property
    def ip(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeIp"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}.'''
        result = self._values.get("ip")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeIp"], result)

    @builtins.property
    def ip_list(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeIpListStruct"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip_list ZeroTrustAccessApplication#ip_list}.'''
        result = self._values.get("ip_list")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeIpListStruct"], result)

    @builtins.property
    def linked_app_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#linked_app_token ZeroTrustAccessApplication#linked_app_token}.'''
        result = self._values.get("linked_app_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken"], result)

    @builtins.property
    def login_method(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeLoginMethod"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#login_method ZeroTrustAccessApplication#login_method}.'''
        result = self._values.get("login_method")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeLoginMethod"], result)

    @builtins.property
    def oidc(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeOidc"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#oidc ZeroTrustAccessApplication#oidc}.'''
        result = self._values.get("oidc")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeOidc"], result)

    @builtins.property
    def okta(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeOkta"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#okta ZeroTrustAccessApplication#okta}.'''
        result = self._values.get("okta")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeOkta"], result)

    @builtins.property
    def saml(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeSaml"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml ZeroTrustAccessApplication#saml}.'''
        result = self._values.get("saml")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeSaml"], result)

    @builtins.property
    def service_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeServiceToken"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_token ZeroTrustAccessApplication#service_token}.'''
        result = self._values.get("service_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesExcludeServiceToken"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExclude(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37f2023f7eede5092be5108c267eca4fdc12977975dd6c316572a07294d39a06)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e825c17c8c02c5f9b91fce07be4352568e2cde54e9b128b8d45396bf4377a1d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAuthContext",
    jsii_struct_bases=[],
    name_mapping={
        "ac_id": "acId",
        "id": "id",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesExcludeAuthContext:
    def __init__(
        self,
        *,
        ac_id: builtins.str,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param ac_id: The ACID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        :param id: The ID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4ad21cc6b73f9437c8daee4674f07177cb68ff8569f01f709081fbdd8c7280e)
            check_type(argname="argument ac_id", value=ac_id, expected_type=type_hints["ac_id"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "ac_id": ac_id,
            "id": id,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def ac_id(self) -> builtins.str:
        '''The ACID of an Authentication context.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        '''
        result = self._values.get("ac_id")
        assert result is not None, "Required property 'ac_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an Authentication context.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Azure identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeAuthContext(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeAuthContextOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAuthContextOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__310f6f6ad85b913807091aad3409116b097e1881088c4684e879629a6411971d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="acIdInput")
    def ac_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "acIdInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="acId")
    def ac_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "acId"))

    @ac_id.setter
    def ac_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d49944abd3f66f688b7037b44191afa7fe6e937073ab7ab2d7604c9b2bb6159a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "acId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0bfde0a35151add4768776f944c1a4255d4c7e2b5984c2c72cba37b8955ef858)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ccea4b14e064a8e7a31df730c3e3f7b27b5bdeb2d3cae842e1c020081ac4075)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthContext]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthContext]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthContext]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41f9e5c1458fd91a0a9fbc5d5c5eb865ba941d45b232d4e1981699c4bf393337)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAuthMethod",
    jsii_struct_bases=[],
    name_mapping={"auth_method": "authMethod"},
)
class ZeroTrustAccessApplicationPoliciesExcludeAuthMethod:
    def __init__(self, *, auth_method: builtins.str) -> None:
        '''
        :param auth_method: The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9825c8b349d37176e736548741d8b95c2e2d99ff3138c830085b3db6fb3940d)
            check_type(argname="argument auth_method", value=auth_method, expected_type=type_hints["auth_method"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "auth_method": auth_method,
        }

    @builtins.property
    def auth_method(self) -> builtins.str:
        '''The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        result = self._values.get("auth_method")
        assert result is not None, "Required property 'auth_method' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeAuthMethod(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeAuthMethodOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAuthMethodOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3fe0335045befb11ad71f6d89c9065293334fc5fe8d21e4cb430b058271ffda)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="authMethodInput")
    def auth_method_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "authMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="authMethod")
    def auth_method(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "authMethod"))

    @auth_method.setter
    def auth_method(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c136d0c334c4123cc0934dbbf62b5dd2dac95da2f90a8e62892851b9553649ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "authMethod", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthMethod]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthMethod]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdaf296678c6c41f2be71984a13c183ac585938546a66c886904b098d2a225f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAzureAd",
    jsii_struct_bases=[],
    name_mapping={"id": "id", "identity_provider_id": "identityProviderId"},
)
class ZeroTrustAccessApplicationPoliciesExcludeAzureAd:
    def __init__(self, *, id: builtins.str, identity_provider_id: builtins.str) -> None:
        '''
        :param id: The ID of an Azure group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__484a0d7c0e63c0557bca0cc137e2aa9a986df370a6df76ad677fa97190227669)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an Azure group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Azure identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeAzureAd(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeAzureAdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeAzureAdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__968e6633134ded924ef56415976fbcee5a064e785ccdc68db37c5691b331793e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48b8ab10ed3e98d53e881377095df2af2f2ff937428cd74d19a72c3482f1a76f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d02c863f58b23174bc12e8f5aad0c35a4bcc51545647fc20bca6f2422e37f212)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAzureAd]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAzureAd]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAzureAd]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1c9eba95fcbd18259edcc7acb0033792af4506a425579f5a3efc61ca8f445e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeCertificate",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesExcludeCertificate:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeCertificate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeCertificateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeCertificateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc0cd8c513c9060f37ce2832fe2a94a2c1d8bc7d7d24b423ae1c731dd30f5b99)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCertificate]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCertificate]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCertificate]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0933c46b5118f10446e15ca302985e330c1f657aafe9ca87ac9c2c88f68ee2ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeCommonName",
    jsii_struct_bases=[],
    name_mapping={"common_name": "commonName"},
)
class ZeroTrustAccessApplicationPoliciesExcludeCommonName:
    def __init__(self, *, common_name: builtins.str) -> None:
        '''
        :param common_name: The common name to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b2d4bfa7b132dc517e789f7b2fe97474d9a0da73d243cc6369eec7f7acff39a)
            check_type(argname="argument common_name", value=common_name, expected_type=type_hints["common_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "common_name": common_name,
        }

    @builtins.property
    def common_name(self) -> builtins.str:
        '''The common name to match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        result = self._values.get("common_name")
        assert result is not None, "Required property 'common_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeCommonName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeCommonNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeCommonNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17a6f5ff011f90927dafe4d15c975d4c6b0269763045c522140a9fd5c6697f02)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="commonNameInput")
    def common_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "commonNameInput"))

    @builtins.property
    @jsii.member(jsii_name="commonName")
    def common_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "commonName"))

    @common_name.setter
    def common_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba62d038e66ad3922d8c3fc8a39dc968458eb628a5d33ea3b5d2ded48c4f7718)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCommonName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCommonName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCommonName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea0c24f18070aef0c78f7c03242e9cc001653679b8653fcdc788b8953d76ddae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeDevicePosture",
    jsii_struct_bases=[],
    name_mapping={"integration_uid": "integrationUid"},
)
class ZeroTrustAccessApplicationPoliciesExcludeDevicePosture:
    def __init__(self, *, integration_uid: builtins.str) -> None:
        '''
        :param integration_uid: The ID of a device posture integration. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71d4e0e15b5d01ea062f3bbf3b3f4e2c91a96bb1e371231a3beabdca99490fd0)
            check_type(argname="argument integration_uid", value=integration_uid, expected_type=type_hints["integration_uid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "integration_uid": integration_uid,
        }

    @builtins.property
    def integration_uid(self) -> builtins.str:
        '''The ID of a device posture integration.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        result = self._values.get("integration_uid")
        assert result is not None, "Required property 'integration_uid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeDevicePosture(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeDevicePostureOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeDevicePostureOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74fb7007018dc2b4deddf2e15f3293baa4e438092872562d90020a348147b413)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="integrationUidInput")
    def integration_uid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "integrationUidInput"))

    @builtins.property
    @jsii.member(jsii_name="integrationUid")
    def integration_uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "integrationUid"))

    @integration_uid.setter
    def integration_uid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad88121c76bed378b5fdba3b49c721ae203111fe54f1d7d43fb04765b97a07a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "integrationUid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeDevicePosture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeDevicePosture]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeDevicePosture]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f6aa9d63333fa93d5e0b0e5ac904da72968cd9b00a85397abd891050a7a4d33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEmail",
    jsii_struct_bases=[],
    name_mapping={"email": "email"},
)
class ZeroTrustAccessApplicationPoliciesExcludeEmail:
    def __init__(self, *, email: builtins.str) -> None:
        '''
        :param email: The email of the user. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c75fec56b17077e5784368a4383e8508a99ef577363a6935eb190db03a121ebb)
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "email": email,
        }

    @builtins.property
    def email(self) -> builtins.str:
        '''The email of the user.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        result = self._values.get("email")
        assert result is not None, "Required property 'email' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeEmail(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEmailDomain",
    jsii_struct_bases=[],
    name_mapping={"domain": "domain"},
)
class ZeroTrustAccessApplicationPoliciesExcludeEmailDomain:
    def __init__(self, *, domain: builtins.str) -> None:
        '''
        :param domain: The email domain to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4e55a867a440a722e80d28c3562e5a4304fb8332f4c59245131ba43f79e74e6)
            check_type(argname="argument domain", value=domain, expected_type=type_hints["domain"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "domain": domain,
        }

    @builtins.property
    def domain(self) -> builtins.str:
        '''The email domain to match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        result = self._values.get("domain")
        assert result is not None, "Required property 'domain' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeEmailDomain(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeEmailDomainOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEmailDomainOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b008891aaa9e5852eb57d71a6f7f0a0d6cd20d75486de48cf7d05f1d82cbcd03)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="domainInput")
    def domain_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "domainInput"))

    @builtins.property
    @jsii.member(jsii_name="domain")
    def domain(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "domain"))

    @domain.setter
    def domain(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3aeddef75ccd040184da7a7e4fbd1cbeb7af4fe01fcf2f64380a3c52e7e35729)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "domain", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailDomain]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailDomain]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailDomain]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32d004ccce792ac3524cfd04a911213b8f54bbc7de4900a2058d8f774ecde8a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created email list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b681017ddc92f0b5edd4c066b75f60608b6a8d864c0df5fb02499aafc653a9a2)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created email list.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeEmailListStructOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEmailListStructOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb76efac052c47a72f332bd071addfc92badf47f3291d9b20081ea6e1dfd4587)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee5e81093e6e225746b314f9207e68b1078da2e7f1384f1fe6d992dfd117b843)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7efd886da598400dda9cdcf69ff6c25ecd5ae396b15fea5996bbb05a4ff8cfc3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesExcludeEmailOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEmailOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5a6d8786a62e062c14aa4c7be20e7211179da53cbe82aab3c3d7e32fdf33131)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "email"))

    @email.setter
    def email(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ec2e0184cf77db8931b2c2db175ceeadffc87f70be86dda9274edffba8efa12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "email", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmail]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmail]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmail]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56d6e87c2051c845356f4aba36a25477e4564de3a57d910a76407a9ba7afa618)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEveryone",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesExcludeEveryone:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeEveryone(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeEveryoneOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeEveryoneOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65b38133e312365538bd8a52e4730ea7a015cc64442d342bf4730fb313cdf30a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEveryone]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEveryone]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEveryone]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b5d4d8fe100c6c0bb52975da885818a22044ea27be8baf8e09cabba501efed2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation",
    jsii_struct_bases=[],
    name_mapping={"evaluate_url": "evaluateUrl", "keys_url": "keysUrl"},
)
class ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation:
    def __init__(self, *, evaluate_url: builtins.str, keys_url: builtins.str) -> None:
        '''
        :param evaluate_url: The API endpoint containing your business logic. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        :param keys_url: The API endpoint containing the key that Access uses to verify that the response came from your API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efea3044bbe1e6f260570077761dac06e5ce9c94771b8a80a6c9b5f9464f40d8)
            check_type(argname="argument evaluate_url", value=evaluate_url, expected_type=type_hints["evaluate_url"])
            check_type(argname="argument keys_url", value=keys_url, expected_type=type_hints["keys_url"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "evaluate_url": evaluate_url,
            "keys_url": keys_url,
        }

    @builtins.property
    def evaluate_url(self) -> builtins.str:
        '''The API endpoint containing your business logic.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        '''
        result = self._values.get("evaluate_url")
        assert result is not None, "Required property 'evaluate_url' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def keys_url(self) -> builtins.str:
        '''The API endpoint containing the key that Access uses to verify that the response came from your API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        result = self._values.get("keys_url")
        assert result is not None, "Required property 'keys_url' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d271f35daf91ba2ab8daad995318d98b97e377cb8fa189931b350062c824454f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="evaluateUrlInput")
    def evaluate_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "evaluateUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="keysUrlInput")
    def keys_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keysUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="evaluateUrl")
    def evaluate_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "evaluateUrl"))

    @evaluate_url.setter
    def evaluate_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ec486fe3e99c7838b05e1364b2ad7ace4cb160b33623d21aa6b98ed40cfa185)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "evaluateUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="keysUrl")
    def keys_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "keysUrl"))

    @keys_url.setter
    def keys_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6fd35b6fdb2085a3ed58e9637e42b4bf59c831c60eff1f31cdd8520114bcb1d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keysUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9942a9ec16927c67352ca8675e4e6974598a757e8e738939d77ea9169a7cfe66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGeo",
    jsii_struct_bases=[],
    name_mapping={"country_code": "countryCode"},
)
class ZeroTrustAccessApplicationPoliciesExcludeGeo:
    def __init__(self, *, country_code: builtins.str) -> None:
        '''
        :param country_code: The country code that should be matched. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c887c398fc6c5230ca766578a3d5ef8047106fe42b77de9996183356c3e51237)
            check_type(argname="argument country_code", value=country_code, expected_type=type_hints["country_code"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "country_code": country_code,
        }

    @builtins.property
    def country_code(self) -> builtins.str:
        '''The country code that should be matched.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        result = self._values.get("country_code")
        assert result is not None, "Required property 'country_code' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeGeo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeGeoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGeoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__029324be709db7d85b1a8b5c66e8e914d4c0cc2e9daabac21acf0003cc4b2d99)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="countryCodeInput")
    def country_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "countryCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="countryCode")
    def country_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "countryCode"))

    @country_code.setter
    def country_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c57370bc988ec14d38c8e91b95a33f0ad1ce7a8712ff62bccf07e927f8f33b71)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "countryCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGeo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGeo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGeo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__557ad644bbc6b9818a1726d299684f422ded4a9eb2eb1dcd6a039a947f65675e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization",
    jsii_struct_bases=[],
    name_mapping={
        "identity_provider_id": "identityProviderId",
        "name": "name",
        "team": "team",
    },
)
class ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization:
    def __init__(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
        team: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Github identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the organization. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param team: The name of the team. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec71792d894724f9ed1d089210feaf841551db78b156f0a723fa864e6be4fbf1)
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument team", value=team, expected_type=type_hints["team"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "identity_provider_id": identity_provider_id,
            "name": name,
        }
        if team is not None:
            self._values["team"] = team

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Github identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The name of the organization.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def team(self) -> typing.Optional[builtins.str]:
        '''The name of the team.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        result = self._values.get("team")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeGithubOrganizationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGithubOrganizationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2eb57e695911a337cf60fd57a05c4eb8b870b598455631ba9d9f2119f8f93c9a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetTeam")
    def reset_team(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTeam", []))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="teamInput")
    def team_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "teamInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d163d541487f195dc4f921649e93e7354d35ff208761ce7e336e6c5371152254)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__935bf4cd3ac5b1a4efccfd4585b4eec45c88e4123623f91568c12d403d5fe72a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="team")
    def team(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "team"))

    @team.setter
    def team(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3703078702eefc1ba0b1cb493bd6d68bea6ff3bb9eb3d8a8e6bfff7e0e1a6a20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "team", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4a6094c384976cbb26fcaa4d6e74c21f528ccd76a9557b8489496f5ad208ea1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGroup",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesExcludeGroup:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created Access group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__168023cc83d49dd75cdee24a69c22e9dd2fac3744c24bdb3d8b9c97f443dbf60)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created Access group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeGroup(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeGroupOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGroupOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__deb3d0f1fc7181f25de81c711d71e1ce84745702ee047facae08ef2a6d861d80)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2da60f8f6805d19ac6f0465a3c041151aad538ff7c173f58b5db6c7effe807db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGroup]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGroup]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGroup]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__15c958438ee208475ffe82a55706faa40a06c116da8e91f98b76b84f43dcc80d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGsuite",
    jsii_struct_bases=[],
    name_mapping={"email": "email", "identity_provider_id": "identityProviderId"},
)
class ZeroTrustAccessApplicationPoliciesExcludeGsuite:
    def __init__(
        self,
        *,
        email: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param email: The email of the Google Workspace group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        :param identity_provider_id: The ID of your Google Workspace identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22fe21ba5f932e399c8d1fea978dbd045860c74489967cdb5e905faa41dc8e36)
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "email": email,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def email(self) -> builtins.str:
        '''The email of the Google Workspace group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        result = self._values.get("email")
        assert result is not None, "Required property 'email' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Google Workspace identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeGsuite(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeGsuiteOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeGsuiteOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7883174211cc18261be8fb558418a7f43ed715f5c5b2e0f3bf3a8085f759071)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "email"))

    @email.setter
    def email(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aafaf87a63345d768667990215bffe052e6f726416e3c47dda3ff0cb96206145)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "email", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82da50f890dc1eaa5ab5d0d24b708feb7881159f0cb45b1e6823c261332c0132)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGsuite]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGsuite]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGsuite]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89e44faedbb29a434b3e1f6920bcf98f842888c6c080e20bb628e33aad05c1c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeIp",
    jsii_struct_bases=[],
    name_mapping={"ip": "ip"},
)
class ZeroTrustAccessApplicationPoliciesExcludeIp:
    def __init__(self, *, ip: builtins.str) -> None:
        '''
        :param ip: An IPv4 or IPv6 CIDR block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7182d1159a2921120b66ffbc945e9c7200d468a54c7b16d53198bedc1adb40ad)
            check_type(argname="argument ip", value=ip, expected_type=type_hints["ip"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "ip": ip,
        }

    @builtins.property
    def ip(self) -> builtins.str:
        '''An IPv4 or IPv6 CIDR block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        result = self._values.get("ip")
        assert result is not None, "Required property 'ip' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeIp(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeIpListStruct",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesExcludeIpListStruct:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created IP list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd4cd981b75147f0e0bd830272afc95cec1fc7aa96ed90827b1c4e4c707cf4d5)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created IP list.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeIpListStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeIpListStructOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeIpListStructOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8801f5cbc7768a677f38eec1714820b16ba80574840ae7afd0e0302dea1399de)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdb47caa85f74415c9c7d6295b098d04d6c3012bc080208b4d5283622959f0d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIpListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIpListStruct]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIpListStruct]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4401b4f31c6a6fc154ca1416894a6080d7d82880ca0249de574f00a4ffb89ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesExcludeIpOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeIpOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__356f9db130d168c8dd70c1790c46e525906067151abb9f4667f73b2bedae0f9a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="ipInput")
    def ip_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ipInput"))

    @builtins.property
    @jsii.member(jsii_name="ip")
    def ip(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ip"))

    @ip.setter
    def ip(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__799add2c9a008da35b96d754cf885594a2d4c51220915cc09703a8c5547895c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ip", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIp]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIp]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36a588614621e729321f496a9346dfa9fbbbc03c75e054f762a8191ff4f2a2ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken",
    jsii_struct_bases=[],
    name_mapping={"app_uid": "appUid"},
)
class ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken:
    def __init__(self, *, app_uid: builtins.str) -> None:
        '''
        :param app_uid: The ID of an Access OIDC SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fdf515aa0059ce846b37c564bb3e6fbb0f5364fc9f0f7045026827ea41d0e50)
            check_type(argname="argument app_uid", value=app_uid, expected_type=type_hints["app_uid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "app_uid": app_uid,
        }

    @builtins.property
    def app_uid(self) -> builtins.str:
        '''The ID of an Access OIDC SaaS application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        result = self._values.get("app_uid")
        assert result is not None, "Required property 'app_uid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeLinkedAppTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeLinkedAppTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__982dc252b65a74fffacc3e5ce3f4dfbb70e703ea6d5a863f078d53e5793f81bd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="appUidInput")
    def app_uid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "appUidInput"))

    @builtins.property
    @jsii.member(jsii_name="appUid")
    def app_uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "appUid"))

    @app_uid.setter
    def app_uid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e43e1f02bd83dcafce63c09e674ceb64715888c2161e137301ce2ba6ce1e36ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appUid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c235af7b4e7846b71b0ce70ba07d9688094d0534e99e37a2a142c2126be27ef3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesExcludeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c301d73f80298676e78139089938a808ac195124176c73813ba1c1d7c4ec712)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationPoliciesExcludeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98b96e6b1df9e9dd5ca233571d7a0fc4f4ed60aea6afdb47f98f864f40239b6f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationPoliciesExcludeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41246ddfe08b20d6310b0c9d8837d289dac95142f5b3c7344a75f46004c846f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96aecda19456636a0fb5b9196dab9c807ba64b3dabd7ce3dc0b698580095e90c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a614a4a464d9813b44be6ebf05197115508ad320d4195b209528c8f4d1673544)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesExclude]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesExclude]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesExclude]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2cd597bf19cb63ad83a83c19a719630549338b70aae3fb8b1f0eae0f242c90fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeLoginMethod",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesExcludeLoginMethod:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of an identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12bbac9c13de977e39de8fbfccf7b297bb19b3c84dcb7dd0a3838419389121d9)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeLoginMethod(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeLoginMethodOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeLoginMethodOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4cc78e11c1ee315f4debbf8992da64b3fa50de75b000bc5cc8c744624f917fb9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0bf6e5b2d315cb12784e5cf4136f9c5ded6aafcac6d898701b1f6c857f26b44e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLoginMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLoginMethod]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLoginMethod]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6256ae9edccff8a4a9268eb2eae36d2da03f200d189da1ed88491b87bdecffb1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeOidc",
    jsii_struct_bases=[],
    name_mapping={
        "claim_name": "claimName",
        "claim_value": "claimValue",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesExcludeOidc:
    def __init__(
        self,
        *,
        claim_name: builtins.str,
        claim_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param claim_name: The name of the OIDC claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        :param claim_value: The OIDC claim value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        :param identity_provider_id: The ID of your OIDC identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be236f9cecd96904b1458892fecd381aedb5271e906697f0bcaee1ecd3391675)
            check_type(argname="argument claim_name", value=claim_name, expected_type=type_hints["claim_name"])
            check_type(argname="argument claim_value", value=claim_value, expected_type=type_hints["claim_value"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "claim_name": claim_name,
            "claim_value": claim_value,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def claim_name(self) -> builtins.str:
        '''The name of the OIDC claim.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        '''
        result = self._values.get("claim_name")
        assert result is not None, "Required property 'claim_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def claim_value(self) -> builtins.str:
        '''The OIDC claim value to look for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        '''
        result = self._values.get("claim_value")
        assert result is not None, "Required property 'claim_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your OIDC identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeOidc(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeOidcOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeOidcOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4499fdb95306f2bb17cbd7125f54bf955364ec0521cf7ca1170eecaf0c41feec)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="claimNameInput")
    def claim_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "claimNameInput"))

    @builtins.property
    @jsii.member(jsii_name="claimValueInput")
    def claim_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "claimValueInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="claimName")
    def claim_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "claimName"))

    @claim_name.setter
    def claim_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4cffcb14db0ecace825faf74aab94ecb415557c25c6e0fc038feb408c56017b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "claimName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="claimValue")
    def claim_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "claimValue"))

    @claim_value.setter
    def claim_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ddb2d9adebf54420cf18a04fdd84e1aff6b515a0552690ab998f5d5937db9de9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "claimValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c54ec77c800eca71c8f0607d25b7549bf96f99829c479eb66268026c6157fe45)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOidc]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOidc]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOidc]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34fe7703d6f66ada66c06f9f4854c480ca50cd4ce52702a00a2488f9f24bd62f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeOkta",
    jsii_struct_bases=[],
    name_mapping={"identity_provider_id": "identityProviderId", "name": "name"},
)
class ZeroTrustAccessApplicationPoliciesExcludeOkta:
    def __init__(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Okta identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the Okta group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8be0af4127e4a199072802b7fdbc9c589cb9818a709715afdb508f0c4a4bc571)
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "identity_provider_id": identity_provider_id,
            "name": name,
        }

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Okta identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The name of the Okta group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeOkta(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeOktaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeOktaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d02ecf3a99f5db29f5c98b4fb72e933cc671af4ce601d433c014b9db998e34e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7c1e5e59be5c435e70da652e4b11816b74811b1a6229a70343006f9f68ff258)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93571ba25b9341b4c25b7f09a78e4dca021957c4e8eefc2cba7e543b1bd2f100)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOkta]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOkta]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOkta]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74a8aec2cbbc42c45056a7ba31ca31037a7d5ee6511b5550cd96ad09113cc24f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesExcludeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c9fe94147d2f6bf1cefdbf3e8e34c18dc4683aa3eda3336998213f491a9704ff)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAnyValidServiceToken")
    def put_any_valid_service_token(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken()

        return typing.cast(None, jsii.invoke(self, "putAnyValidServiceToken", [value]))

    @jsii.member(jsii_name="putAuthContext")
    def put_auth_context(
        self,
        *,
        ac_id: builtins.str,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param ac_id: The ACID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        :param id: The ID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeAuthContext(
            ac_id=ac_id, id=id, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putAuthContext", [value]))

    @jsii.member(jsii_name="putAuthMethod")
    def put_auth_method(self, *, auth_method: builtins.str) -> None:
        '''
        :param auth_method: The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeAuthMethod(
            auth_method=auth_method
        )

        return typing.cast(None, jsii.invoke(self, "putAuthMethod", [value]))

    @jsii.member(jsii_name="putAzureAd")
    def put_azure_ad(
        self,
        *,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param id: The ID of an Azure group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeAzureAd(
            id=id, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putAzureAd", [value]))

    @jsii.member(jsii_name="putCertificate")
    def put_certificate(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesExcludeCertificate()

        return typing.cast(None, jsii.invoke(self, "putCertificate", [value]))

    @jsii.member(jsii_name="putCommonName")
    def put_common_name(self, *, common_name: builtins.str) -> None:
        '''
        :param common_name: The common name to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeCommonName(
            common_name=common_name
        )

        return typing.cast(None, jsii.invoke(self, "putCommonName", [value]))

    @jsii.member(jsii_name="putDevicePosture")
    def put_device_posture(self, *, integration_uid: builtins.str) -> None:
        '''
        :param integration_uid: The ID of a device posture integration. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeDevicePosture(
            integration_uid=integration_uid
        )

        return typing.cast(None, jsii.invoke(self, "putDevicePosture", [value]))

    @jsii.member(jsii_name="putEmail")
    def put_email(self, *, email: builtins.str) -> None:
        '''
        :param email: The email of the user. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeEmail(email=email)

        return typing.cast(None, jsii.invoke(self, "putEmail", [value]))

    @jsii.member(jsii_name="putEmailDomain")
    def put_email_domain(self, *, domain: builtins.str) -> None:
        '''
        :param domain: The email domain to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeEmailDomain(domain=domain)

        return typing.cast(None, jsii.invoke(self, "putEmailDomain", [value]))

    @jsii.member(jsii_name="putEmailList")
    def put_email_list(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created email list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct(id=id)

        return typing.cast(None, jsii.invoke(self, "putEmailList", [value]))

    @jsii.member(jsii_name="putEveryone")
    def put_everyone(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesExcludeEveryone()

        return typing.cast(None, jsii.invoke(self, "putEveryone", [value]))

    @jsii.member(jsii_name="putExternalEvaluation")
    def put_external_evaluation(
        self,
        *,
        evaluate_url: builtins.str,
        keys_url: builtins.str,
    ) -> None:
        '''
        :param evaluate_url: The API endpoint containing your business logic. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        :param keys_url: The API endpoint containing the key that Access uses to verify that the response came from your API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation(
            evaluate_url=evaluate_url, keys_url=keys_url
        )

        return typing.cast(None, jsii.invoke(self, "putExternalEvaluation", [value]))

    @jsii.member(jsii_name="putGeo")
    def put_geo(self, *, country_code: builtins.str) -> None:
        '''
        :param country_code: The country code that should be matched. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeGeo(country_code=country_code)

        return typing.cast(None, jsii.invoke(self, "putGeo", [value]))

    @jsii.member(jsii_name="putGithubOrganization")
    def put_github_organization(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
        team: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Github identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the organization. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param team: The name of the team. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization(
            identity_provider_id=identity_provider_id, name=name, team=team
        )

        return typing.cast(None, jsii.invoke(self, "putGithubOrganization", [value]))

    @jsii.member(jsii_name="putGroup")
    def put_group(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created Access group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeGroup(id=id)

        return typing.cast(None, jsii.invoke(self, "putGroup", [value]))

    @jsii.member(jsii_name="putGsuite")
    def put_gsuite(
        self,
        *,
        email: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param email: The email of the Google Workspace group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        :param identity_provider_id: The ID of your Google Workspace identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeGsuite(
            email=email, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putGsuite", [value]))

    @jsii.member(jsii_name="putIp")
    def put_ip(self, *, ip: builtins.str) -> None:
        '''
        :param ip: An IPv4 or IPv6 CIDR block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeIp(ip=ip)

        return typing.cast(None, jsii.invoke(self, "putIp", [value]))

    @jsii.member(jsii_name="putIpList")
    def put_ip_list(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created IP list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeIpListStruct(id=id)

        return typing.cast(None, jsii.invoke(self, "putIpList", [value]))

    @jsii.member(jsii_name="putLinkedAppToken")
    def put_linked_app_token(self, *, app_uid: builtins.str) -> None:
        '''
        :param app_uid: The ID of an Access OIDC SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken(
            app_uid=app_uid
        )

        return typing.cast(None, jsii.invoke(self, "putLinkedAppToken", [value]))

    @jsii.member(jsii_name="putLoginMethod")
    def put_login_method(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of an identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeLoginMethod(id=id)

        return typing.cast(None, jsii.invoke(self, "putLoginMethod", [value]))

    @jsii.member(jsii_name="putOidc")
    def put_oidc(
        self,
        *,
        claim_name: builtins.str,
        claim_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param claim_name: The name of the OIDC claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        :param claim_value: The OIDC claim value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        :param identity_provider_id: The ID of your OIDC identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeOidc(
            claim_name=claim_name,
            claim_value=claim_value,
            identity_provider_id=identity_provider_id,
        )

        return typing.cast(None, jsii.invoke(self, "putOidc", [value]))

    @jsii.member(jsii_name="putOkta")
    def put_okta(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Okta identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the Okta group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeOkta(
            identity_provider_id=identity_provider_id, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putOkta", [value]))

    @jsii.member(jsii_name="putSaml")
    def put_saml(
        self,
        *,
        attribute_name: builtins.str,
        attribute_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param attribute_name: The name of the SAML attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        :param attribute_value: The SAML attribute value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        :param identity_provider_id: The ID of your SAML identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeSaml(
            attribute_name=attribute_name,
            attribute_value=attribute_value,
            identity_provider_id=identity_provider_id,
        )

        return typing.cast(None, jsii.invoke(self, "putSaml", [value]))

    @jsii.member(jsii_name="putServiceToken")
    def put_service_token(self, *, token_id: builtins.str) -> None:
        '''
        :param token_id: The ID of a Service Token. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesExcludeServiceToken(
            token_id=token_id
        )

        return typing.cast(None, jsii.invoke(self, "putServiceToken", [value]))

    @jsii.member(jsii_name="resetAnyValidServiceToken")
    def reset_any_valid_service_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnyValidServiceToken", []))

    @jsii.member(jsii_name="resetAuthContext")
    def reset_auth_context(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthContext", []))

    @jsii.member(jsii_name="resetAuthMethod")
    def reset_auth_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthMethod", []))

    @jsii.member(jsii_name="resetAzureAd")
    def reset_azure_ad(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAzureAd", []))

    @jsii.member(jsii_name="resetCertificate")
    def reset_certificate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCertificate", []))

    @jsii.member(jsii_name="resetCommonName")
    def reset_common_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonName", []))

    @jsii.member(jsii_name="resetDevicePosture")
    def reset_device_posture(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDevicePosture", []))

    @jsii.member(jsii_name="resetEmail")
    def reset_email(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmail", []))

    @jsii.member(jsii_name="resetEmailDomain")
    def reset_email_domain(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmailDomain", []))

    @jsii.member(jsii_name="resetEmailList")
    def reset_email_list(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmailList", []))

    @jsii.member(jsii_name="resetEveryone")
    def reset_everyone(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEveryone", []))

    @jsii.member(jsii_name="resetExternalEvaluation")
    def reset_external_evaluation(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExternalEvaluation", []))

    @jsii.member(jsii_name="resetGeo")
    def reset_geo(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGeo", []))

    @jsii.member(jsii_name="resetGithubOrganization")
    def reset_github_organization(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGithubOrganization", []))

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetGsuite")
    def reset_gsuite(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGsuite", []))

    @jsii.member(jsii_name="resetIp")
    def reset_ip(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIp", []))

    @jsii.member(jsii_name="resetIpList")
    def reset_ip_list(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIpList", []))

    @jsii.member(jsii_name="resetLinkedAppToken")
    def reset_linked_app_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLinkedAppToken", []))

    @jsii.member(jsii_name="resetLoginMethod")
    def reset_login_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLoginMethod", []))

    @jsii.member(jsii_name="resetOidc")
    def reset_oidc(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOidc", []))

    @jsii.member(jsii_name="resetOkta")
    def reset_okta(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOkta", []))

    @jsii.member(jsii_name="resetSaml")
    def reset_saml(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSaml", []))

    @jsii.member(jsii_name="resetServiceToken")
    def reset_service_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceToken", []))

    @builtins.property
    @jsii.member(jsii_name="anyValidServiceToken")
    def any_valid_service_token(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceTokenOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceTokenOutputReference, jsii.get(self, "anyValidServiceToken"))

    @builtins.property
    @jsii.member(jsii_name="authContext")
    def auth_context(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeAuthContextOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeAuthContextOutputReference, jsii.get(self, "authContext"))

    @builtins.property
    @jsii.member(jsii_name="authMethod")
    def auth_method(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeAuthMethodOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeAuthMethodOutputReference, jsii.get(self, "authMethod"))

    @builtins.property
    @jsii.member(jsii_name="azureAd")
    def azure_ad(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeAzureAdOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeAzureAdOutputReference, jsii.get(self, "azureAd"))

    @builtins.property
    @jsii.member(jsii_name="certificate")
    def certificate(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeCertificateOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeCertificateOutputReference, jsii.get(self, "certificate"))

    @builtins.property
    @jsii.member(jsii_name="commonName")
    def common_name(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeCommonNameOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeCommonNameOutputReference, jsii.get(self, "commonName"))

    @builtins.property
    @jsii.member(jsii_name="devicePosture")
    def device_posture(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeDevicePostureOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeDevicePostureOutputReference, jsii.get(self, "devicePosture"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> ZeroTrustAccessApplicationPoliciesExcludeEmailOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeEmailOutputReference, jsii.get(self, "email"))

    @builtins.property
    @jsii.member(jsii_name="emailDomain")
    def email_domain(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeEmailDomainOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeEmailDomainOutputReference, jsii.get(self, "emailDomain"))

    @builtins.property
    @jsii.member(jsii_name="emailList")
    def email_list(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeEmailListStructOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeEmailListStructOutputReference, jsii.get(self, "emailList"))

    @builtins.property
    @jsii.member(jsii_name="everyone")
    def everyone(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeEveryoneOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeEveryoneOutputReference, jsii.get(self, "everyone"))

    @builtins.property
    @jsii.member(jsii_name="externalEvaluation")
    def external_evaluation(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluationOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluationOutputReference, jsii.get(self, "externalEvaluation"))

    @builtins.property
    @jsii.member(jsii_name="geo")
    def geo(self) -> ZeroTrustAccessApplicationPoliciesExcludeGeoOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeGeoOutputReference, jsii.get(self, "geo"))

    @builtins.property
    @jsii.member(jsii_name="githubOrganization")
    def github_organization(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeGithubOrganizationOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeGithubOrganizationOutputReference, jsii.get(self, "githubOrganization"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> ZeroTrustAccessApplicationPoliciesExcludeGroupOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeGroupOutputReference, jsii.get(self, "group"))

    @builtins.property
    @jsii.member(jsii_name="gsuite")
    def gsuite(self) -> ZeroTrustAccessApplicationPoliciesExcludeGsuiteOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeGsuiteOutputReference, jsii.get(self, "gsuite"))

    @builtins.property
    @jsii.member(jsii_name="ip")
    def ip(self) -> ZeroTrustAccessApplicationPoliciesExcludeIpOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeIpOutputReference, jsii.get(self, "ip"))

    @builtins.property
    @jsii.member(jsii_name="ipList")
    def ip_list(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeIpListStructOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeIpListStructOutputReference, jsii.get(self, "ipList"))

    @builtins.property
    @jsii.member(jsii_name="linkedAppToken")
    def linked_app_token(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeLinkedAppTokenOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeLinkedAppTokenOutputReference, jsii.get(self, "linkedAppToken"))

    @builtins.property
    @jsii.member(jsii_name="loginMethod")
    def login_method(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesExcludeLoginMethodOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeLoginMethodOutputReference, jsii.get(self, "loginMethod"))

    @builtins.property
    @jsii.member(jsii_name="oidc")
    def oidc(self) -> ZeroTrustAccessApplicationPoliciesExcludeOidcOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeOidcOutputReference, jsii.get(self, "oidc"))

    @builtins.property
    @jsii.member(jsii_name="okta")
    def okta(self) -> ZeroTrustAccessApplicationPoliciesExcludeOktaOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeOktaOutputReference, jsii.get(self, "okta"))

    @builtins.property
    @jsii.member(jsii_name="saml")
    def saml(self) -> "ZeroTrustAccessApplicationPoliciesExcludeSamlOutputReference":
        return typing.cast("ZeroTrustAccessApplicationPoliciesExcludeSamlOutputReference", jsii.get(self, "saml"))

    @builtins.property
    @jsii.member(jsii_name="serviceToken")
    def service_token(
        self,
    ) -> "ZeroTrustAccessApplicationPoliciesExcludeServiceTokenOutputReference":
        return typing.cast("ZeroTrustAccessApplicationPoliciesExcludeServiceTokenOutputReference", jsii.get(self, "serviceToken"))

    @builtins.property
    @jsii.member(jsii_name="anyValidServiceTokenInput")
    def any_valid_service_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken]], jsii.get(self, "anyValidServiceTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="authContextInput")
    def auth_context_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthContext]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthContext]], jsii.get(self, "authContextInput"))

    @builtins.property
    @jsii.member(jsii_name="authMethodInput")
    def auth_method_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthMethod]], jsii.get(self, "authMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="azureAdInput")
    def azure_ad_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAzureAd]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAzureAd]], jsii.get(self, "azureAdInput"))

    @builtins.property
    @jsii.member(jsii_name="certificateInput")
    def certificate_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCertificate]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCertificate]], jsii.get(self, "certificateInput"))

    @builtins.property
    @jsii.member(jsii_name="commonNameInput")
    def common_name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCommonName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCommonName]], jsii.get(self, "commonNameInput"))

    @builtins.property
    @jsii.member(jsii_name="devicePostureInput")
    def device_posture_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeDevicePosture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeDevicePosture]], jsii.get(self, "devicePostureInput"))

    @builtins.property
    @jsii.member(jsii_name="emailDomainInput")
    def email_domain_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailDomain]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailDomain]], jsii.get(self, "emailDomainInput"))

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmail]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmail]], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="emailListInput")
    def email_list_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct]], jsii.get(self, "emailListInput"))

    @builtins.property
    @jsii.member(jsii_name="everyoneInput")
    def everyone_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEveryone]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEveryone]], jsii.get(self, "everyoneInput"))

    @builtins.property
    @jsii.member(jsii_name="externalEvaluationInput")
    def external_evaluation_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation]], jsii.get(self, "externalEvaluationInput"))

    @builtins.property
    @jsii.member(jsii_name="geoInput")
    def geo_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGeo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGeo]], jsii.get(self, "geoInput"))

    @builtins.property
    @jsii.member(jsii_name="githubOrganizationInput")
    def github_organization_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization]], jsii.get(self, "githubOrganizationInput"))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGroup]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGroup]], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="gsuiteInput")
    def gsuite_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGsuite]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGsuite]], jsii.get(self, "gsuiteInput"))

    @builtins.property
    @jsii.member(jsii_name="ipInput")
    def ip_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIp]], jsii.get(self, "ipInput"))

    @builtins.property
    @jsii.member(jsii_name="ipListInput")
    def ip_list_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIpListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIpListStruct]], jsii.get(self, "ipListInput"))

    @builtins.property
    @jsii.member(jsii_name="linkedAppTokenInput")
    def linked_app_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken]], jsii.get(self, "linkedAppTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="loginMethodInput")
    def login_method_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLoginMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLoginMethod]], jsii.get(self, "loginMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="oidcInput")
    def oidc_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOidc]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOidc]], jsii.get(self, "oidcInput"))

    @builtins.property
    @jsii.member(jsii_name="oktaInput")
    def okta_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOkta]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOkta]], jsii.get(self, "oktaInput"))

    @builtins.property
    @jsii.member(jsii_name="samlInput")
    def saml_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesExcludeSaml"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesExcludeSaml"]], jsii.get(self, "samlInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceTokenInput")
    def service_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesExcludeServiceToken"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesExcludeServiceToken"]], jsii.get(self, "serviceTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExclude]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExclude]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExclude]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7205b6c43b2080bda429266fc29d88122265c2307c20d51128607ab8cb3a325)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeSaml",
    jsii_struct_bases=[],
    name_mapping={
        "attribute_name": "attributeName",
        "attribute_value": "attributeValue",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesExcludeSaml:
    def __init__(
        self,
        *,
        attribute_name: builtins.str,
        attribute_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param attribute_name: The name of the SAML attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        :param attribute_value: The SAML attribute value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        :param identity_provider_id: The ID of your SAML identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0652e2629ea2d694a5cdaf17926b6eb218a85af358537bd1bbc8af104d110bf2)
            check_type(argname="argument attribute_name", value=attribute_name, expected_type=type_hints["attribute_name"])
            check_type(argname="argument attribute_value", value=attribute_value, expected_type=type_hints["attribute_value"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "attribute_name": attribute_name,
            "attribute_value": attribute_value,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def attribute_name(self) -> builtins.str:
        '''The name of the SAML attribute.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        '''
        result = self._values.get("attribute_name")
        assert result is not None, "Required property 'attribute_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def attribute_value(self) -> builtins.str:
        '''The SAML attribute value to look for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        '''
        result = self._values.get("attribute_value")
        assert result is not None, "Required property 'attribute_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your SAML identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeSaml(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeSamlOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeSamlOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f57a2b292b7027cc92d43fc69beb12fc017bd646a0b0f6a92ba00205a76abf5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="attributeNameInput")
    def attribute_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attributeNameInput"))

    @builtins.property
    @jsii.member(jsii_name="attributeValueInput")
    def attribute_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attributeValueInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="attributeName")
    def attribute_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attributeName"))

    @attribute_name.setter
    def attribute_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db26c9674c457f659fff69ccd0eb5097d01bf8bef1fac9459822978aa76babac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attributeName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="attributeValue")
    def attribute_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attributeValue"))

    @attribute_value.setter
    def attribute_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7442f48133123a7dfc7e324c7f654957433b78f89dcfa1ca901ebae82f18c871)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attributeValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c33f76fb62da33e95ef09ca1155810b3a2bca6c13955af3fb6c254fb427008a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeSaml]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeSaml]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeSaml]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7ddddc314825afcd669692c04deb92b185788f72654e2044bb678a1d3a354a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeServiceToken",
    jsii_struct_bases=[],
    name_mapping={"token_id": "tokenId"},
)
class ZeroTrustAccessApplicationPoliciesExcludeServiceToken:
    def __init__(self, *, token_id: builtins.str) -> None:
        '''
        :param token_id: The ID of a Service Token. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30e7a0712e80f5515b1577b8188a654bf3fae15546dfad8af2faa37fd602aa4c)
            check_type(argname="argument token_id", value=token_id, expected_type=type_hints["token_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "token_id": token_id,
        }

    @builtins.property
    def token_id(self) -> builtins.str:
        '''The ID of a Service Token.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        result = self._values.get("token_id")
        assert result is not None, "Required property 'token_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesExcludeServiceToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesExcludeServiceTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesExcludeServiceTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49edbfe0157d759f732bde435f25bf17529254935b25a27e06fc64c6804154db)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="tokenIdInput")
    def token_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tokenIdInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenId")
    def token_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tokenId"))

    @token_id.setter
    def token_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b919b87082298a3a5ab9f4698253159ec5ecaa9526a4a13930d9ac5421480b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tokenId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeServiceToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeServiceToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a11b089e29586aa8eb4ee1a195eee14699fa6a57cf01282be35a85374ff3555)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesInclude",
    jsii_struct_bases=[],
    name_mapping={
        "any_valid_service_token": "anyValidServiceToken",
        "auth_context": "authContext",
        "auth_method": "authMethod",
        "azure_ad": "azureAd",
        "certificate": "certificate",
        "common_name": "commonName",
        "device_posture": "devicePosture",
        "email": "email",
        "email_domain": "emailDomain",
        "email_list": "emailList",
        "everyone": "everyone",
        "external_evaluation": "externalEvaluation",
        "geo": "geo",
        "github_organization": "githubOrganization",
        "group": "group",
        "gsuite": "gsuite",
        "ip": "ip",
        "ip_list": "ipList",
        "linked_app_token": "linkedAppToken",
        "login_method": "loginMethod",
        "oidc": "oidc",
        "okta": "okta",
        "saml": "saml",
        "service_token": "serviceToken",
    },
)
class ZeroTrustAccessApplicationPoliciesInclude:
    def __init__(
        self,
        *,
        any_valid_service_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken", typing.Dict[builtins.str, typing.Any]]] = None,
        auth_context: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeAuthContext", typing.Dict[builtins.str, typing.Any]]] = None,
        auth_method: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeAuthMethod", typing.Dict[builtins.str, typing.Any]]] = None,
        azure_ad: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeAzureAd", typing.Dict[builtins.str, typing.Any]]] = None,
        certificate: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeCertificate", typing.Dict[builtins.str, typing.Any]]] = None,
        common_name: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeCommonName", typing.Dict[builtins.str, typing.Any]]] = None,
        device_posture: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeDevicePosture", typing.Dict[builtins.str, typing.Any]]] = None,
        email: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeEmail", typing.Dict[builtins.str, typing.Any]]] = None,
        email_domain: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeEmailDomain", typing.Dict[builtins.str, typing.Any]]] = None,
        email_list: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct", typing.Dict[builtins.str, typing.Any]]] = None,
        everyone: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeEveryone", typing.Dict[builtins.str, typing.Any]]] = None,
        external_evaluation: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation", typing.Dict[builtins.str, typing.Any]]] = None,
        geo: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeGeo", typing.Dict[builtins.str, typing.Any]]] = None,
        github_organization: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization", typing.Dict[builtins.str, typing.Any]]] = None,
        group: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeGroup", typing.Dict[builtins.str, typing.Any]]] = None,
        gsuite: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeGsuite", typing.Dict[builtins.str, typing.Any]]] = None,
        ip: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeIp", typing.Dict[builtins.str, typing.Any]]] = None,
        ip_list: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeIpListStruct", typing.Dict[builtins.str, typing.Any]]] = None,
        linked_app_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken", typing.Dict[builtins.str, typing.Any]]] = None,
        login_method: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeLoginMethod", typing.Dict[builtins.str, typing.Any]]] = None,
        oidc: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeOidc", typing.Dict[builtins.str, typing.Any]]] = None,
        okta: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeOkta", typing.Dict[builtins.str, typing.Any]]] = None,
        saml: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeSaml", typing.Dict[builtins.str, typing.Any]]] = None,
        service_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesIncludeServiceToken", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param any_valid_service_token: An empty object which matches on all service tokens. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#any_valid_service_token ZeroTrustAccessApplication#any_valid_service_token}
        :param auth_context: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_context ZeroTrustAccessApplication#auth_context}.
        :param auth_method: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}.
        :param azure_ad: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#azure_ad ZeroTrustAccessApplication#azure_ad}.
        :param certificate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#certificate ZeroTrustAccessApplication#certificate}.
        :param common_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}.
        :param device_posture: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#device_posture ZeroTrustAccessApplication#device_posture}.
        :param email: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}.
        :param email_domain: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_domain ZeroTrustAccessApplication#email_domain}.
        :param email_list: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_list ZeroTrustAccessApplication#email_list}.
        :param everyone: An empty object which matches on all users. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#everyone ZeroTrustAccessApplication#everyone}
        :param external_evaluation: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#external_evaluation ZeroTrustAccessApplication#external_evaluation}.
        :param geo: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#geo ZeroTrustAccessApplication#geo}.
        :param github_organization: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#github_organization ZeroTrustAccessApplication#github_organization}.
        :param group: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group ZeroTrustAccessApplication#group}.
        :param gsuite: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#gsuite ZeroTrustAccessApplication#gsuite}.
        :param ip: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}.
        :param ip_list: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip_list ZeroTrustAccessApplication#ip_list}.
        :param linked_app_token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#linked_app_token ZeroTrustAccessApplication#linked_app_token}.
        :param login_method: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#login_method ZeroTrustAccessApplication#login_method}.
        :param oidc: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#oidc ZeroTrustAccessApplication#oidc}.
        :param okta: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#okta ZeroTrustAccessApplication#okta}.
        :param saml: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml ZeroTrustAccessApplication#saml}.
        :param service_token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_token ZeroTrustAccessApplication#service_token}.
        '''
        if isinstance(any_valid_service_token, dict):
            any_valid_service_token = ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken(**any_valid_service_token)
        if isinstance(auth_context, dict):
            auth_context = ZeroTrustAccessApplicationPoliciesIncludeAuthContext(**auth_context)
        if isinstance(auth_method, dict):
            auth_method = ZeroTrustAccessApplicationPoliciesIncludeAuthMethod(**auth_method)
        if isinstance(azure_ad, dict):
            azure_ad = ZeroTrustAccessApplicationPoliciesIncludeAzureAd(**azure_ad)
        if isinstance(certificate, dict):
            certificate = ZeroTrustAccessApplicationPoliciesIncludeCertificate(**certificate)
        if isinstance(common_name, dict):
            common_name = ZeroTrustAccessApplicationPoliciesIncludeCommonName(**common_name)
        if isinstance(device_posture, dict):
            device_posture = ZeroTrustAccessApplicationPoliciesIncludeDevicePosture(**device_posture)
        if isinstance(email, dict):
            email = ZeroTrustAccessApplicationPoliciesIncludeEmail(**email)
        if isinstance(email_domain, dict):
            email_domain = ZeroTrustAccessApplicationPoliciesIncludeEmailDomain(**email_domain)
        if isinstance(email_list, dict):
            email_list = ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct(**email_list)
        if isinstance(everyone, dict):
            everyone = ZeroTrustAccessApplicationPoliciesIncludeEveryone(**everyone)
        if isinstance(external_evaluation, dict):
            external_evaluation = ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation(**external_evaluation)
        if isinstance(geo, dict):
            geo = ZeroTrustAccessApplicationPoliciesIncludeGeo(**geo)
        if isinstance(github_organization, dict):
            github_organization = ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization(**github_organization)
        if isinstance(group, dict):
            group = ZeroTrustAccessApplicationPoliciesIncludeGroup(**group)
        if isinstance(gsuite, dict):
            gsuite = ZeroTrustAccessApplicationPoliciesIncludeGsuite(**gsuite)
        if isinstance(ip, dict):
            ip = ZeroTrustAccessApplicationPoliciesIncludeIp(**ip)
        if isinstance(ip_list, dict):
            ip_list = ZeroTrustAccessApplicationPoliciesIncludeIpListStruct(**ip_list)
        if isinstance(linked_app_token, dict):
            linked_app_token = ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken(**linked_app_token)
        if isinstance(login_method, dict):
            login_method = ZeroTrustAccessApplicationPoliciesIncludeLoginMethod(**login_method)
        if isinstance(oidc, dict):
            oidc = ZeroTrustAccessApplicationPoliciesIncludeOidc(**oidc)
        if isinstance(okta, dict):
            okta = ZeroTrustAccessApplicationPoliciesIncludeOkta(**okta)
        if isinstance(saml, dict):
            saml = ZeroTrustAccessApplicationPoliciesIncludeSaml(**saml)
        if isinstance(service_token, dict):
            service_token = ZeroTrustAccessApplicationPoliciesIncludeServiceToken(**service_token)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__685bc7a8e643f70be621def4858a7ca49c342e5ec8b14ad21bebaca7ae51178e)
            check_type(argname="argument any_valid_service_token", value=any_valid_service_token, expected_type=type_hints["any_valid_service_token"])
            check_type(argname="argument auth_context", value=auth_context, expected_type=type_hints["auth_context"])
            check_type(argname="argument auth_method", value=auth_method, expected_type=type_hints["auth_method"])
            check_type(argname="argument azure_ad", value=azure_ad, expected_type=type_hints["azure_ad"])
            check_type(argname="argument certificate", value=certificate, expected_type=type_hints["certificate"])
            check_type(argname="argument common_name", value=common_name, expected_type=type_hints["common_name"])
            check_type(argname="argument device_posture", value=device_posture, expected_type=type_hints["device_posture"])
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
            check_type(argname="argument email_domain", value=email_domain, expected_type=type_hints["email_domain"])
            check_type(argname="argument email_list", value=email_list, expected_type=type_hints["email_list"])
            check_type(argname="argument everyone", value=everyone, expected_type=type_hints["everyone"])
            check_type(argname="argument external_evaluation", value=external_evaluation, expected_type=type_hints["external_evaluation"])
            check_type(argname="argument geo", value=geo, expected_type=type_hints["geo"])
            check_type(argname="argument github_organization", value=github_organization, expected_type=type_hints["github_organization"])
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument gsuite", value=gsuite, expected_type=type_hints["gsuite"])
            check_type(argname="argument ip", value=ip, expected_type=type_hints["ip"])
            check_type(argname="argument ip_list", value=ip_list, expected_type=type_hints["ip_list"])
            check_type(argname="argument linked_app_token", value=linked_app_token, expected_type=type_hints["linked_app_token"])
            check_type(argname="argument login_method", value=login_method, expected_type=type_hints["login_method"])
            check_type(argname="argument oidc", value=oidc, expected_type=type_hints["oidc"])
            check_type(argname="argument okta", value=okta, expected_type=type_hints["okta"])
            check_type(argname="argument saml", value=saml, expected_type=type_hints["saml"])
            check_type(argname="argument service_token", value=service_token, expected_type=type_hints["service_token"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if any_valid_service_token is not None:
            self._values["any_valid_service_token"] = any_valid_service_token
        if auth_context is not None:
            self._values["auth_context"] = auth_context
        if auth_method is not None:
            self._values["auth_method"] = auth_method
        if azure_ad is not None:
            self._values["azure_ad"] = azure_ad
        if certificate is not None:
            self._values["certificate"] = certificate
        if common_name is not None:
            self._values["common_name"] = common_name
        if device_posture is not None:
            self._values["device_posture"] = device_posture
        if email is not None:
            self._values["email"] = email
        if email_domain is not None:
            self._values["email_domain"] = email_domain
        if email_list is not None:
            self._values["email_list"] = email_list
        if everyone is not None:
            self._values["everyone"] = everyone
        if external_evaluation is not None:
            self._values["external_evaluation"] = external_evaluation
        if geo is not None:
            self._values["geo"] = geo
        if github_organization is not None:
            self._values["github_organization"] = github_organization
        if group is not None:
            self._values["group"] = group
        if gsuite is not None:
            self._values["gsuite"] = gsuite
        if ip is not None:
            self._values["ip"] = ip
        if ip_list is not None:
            self._values["ip_list"] = ip_list
        if linked_app_token is not None:
            self._values["linked_app_token"] = linked_app_token
        if login_method is not None:
            self._values["login_method"] = login_method
        if oidc is not None:
            self._values["oidc"] = oidc
        if okta is not None:
            self._values["okta"] = okta
        if saml is not None:
            self._values["saml"] = saml
        if service_token is not None:
            self._values["service_token"] = service_token

    @builtins.property
    def any_valid_service_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken"]:
        '''An empty object which matches on all service tokens.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#any_valid_service_token ZeroTrustAccessApplication#any_valid_service_token}
        '''
        result = self._values.get("any_valid_service_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken"], result)

    @builtins.property
    def auth_context(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAuthContext"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_context ZeroTrustAccessApplication#auth_context}.'''
        result = self._values.get("auth_context")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAuthContext"], result)

    @builtins.property
    def auth_method(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAuthMethod"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}.'''
        result = self._values.get("auth_method")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAuthMethod"], result)

    @builtins.property
    def azure_ad(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAzureAd"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#azure_ad ZeroTrustAccessApplication#azure_ad}.'''
        result = self._values.get("azure_ad")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeAzureAd"], result)

    @builtins.property
    def certificate(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeCertificate"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#certificate ZeroTrustAccessApplication#certificate}.'''
        result = self._values.get("certificate")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeCertificate"], result)

    @builtins.property
    def common_name(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeCommonName"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}.'''
        result = self._values.get("common_name")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeCommonName"], result)

    @builtins.property
    def device_posture(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeDevicePosture"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#device_posture ZeroTrustAccessApplication#device_posture}.'''
        result = self._values.get("device_posture")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeDevicePosture"], result)

    @builtins.property
    def email(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEmail"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}.'''
        result = self._values.get("email")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEmail"], result)

    @builtins.property
    def email_domain(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEmailDomain"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_domain ZeroTrustAccessApplication#email_domain}.'''
        result = self._values.get("email_domain")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEmailDomain"], result)

    @builtins.property
    def email_list(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_list ZeroTrustAccessApplication#email_list}.'''
        result = self._values.get("email_list")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct"], result)

    @builtins.property
    def everyone(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEveryone"]:
        '''An empty object which matches on all users.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#everyone ZeroTrustAccessApplication#everyone}
        '''
        result = self._values.get("everyone")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeEveryone"], result)

    @builtins.property
    def external_evaluation(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#external_evaluation ZeroTrustAccessApplication#external_evaluation}.'''
        result = self._values.get("external_evaluation")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation"], result)

    @builtins.property
    def geo(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGeo"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#geo ZeroTrustAccessApplication#geo}.'''
        result = self._values.get("geo")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGeo"], result)

    @builtins.property
    def github_organization(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#github_organization ZeroTrustAccessApplication#github_organization}.'''
        result = self._values.get("github_organization")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization"], result)

    @builtins.property
    def group(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGroup"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group ZeroTrustAccessApplication#group}.'''
        result = self._values.get("group")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGroup"], result)

    @builtins.property
    def gsuite(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGsuite"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#gsuite ZeroTrustAccessApplication#gsuite}.'''
        result = self._values.get("gsuite")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeGsuite"], result)

    @builtins.property
    def ip(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeIp"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}.'''
        result = self._values.get("ip")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeIp"], result)

    @builtins.property
    def ip_list(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeIpListStruct"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip_list ZeroTrustAccessApplication#ip_list}.'''
        result = self._values.get("ip_list")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeIpListStruct"], result)

    @builtins.property
    def linked_app_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#linked_app_token ZeroTrustAccessApplication#linked_app_token}.'''
        result = self._values.get("linked_app_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken"], result)

    @builtins.property
    def login_method(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeLoginMethod"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#login_method ZeroTrustAccessApplication#login_method}.'''
        result = self._values.get("login_method")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeLoginMethod"], result)

    @builtins.property
    def oidc(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeOidc"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#oidc ZeroTrustAccessApplication#oidc}.'''
        result = self._values.get("oidc")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeOidc"], result)

    @builtins.property
    def okta(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeOkta"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#okta ZeroTrustAccessApplication#okta}.'''
        result = self._values.get("okta")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeOkta"], result)

    @builtins.property
    def saml(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeSaml"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml ZeroTrustAccessApplication#saml}.'''
        result = self._values.get("saml")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeSaml"], result)

    @builtins.property
    def service_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeServiceToken"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_token ZeroTrustAccessApplication#service_token}.'''
        result = self._values.get("service_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesIncludeServiceToken"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesInclude(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__393b3d8d65c5fa90f1441a54a5cbb960408298da0d2f6f448461e465e680245a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1c4761cc4427c549978771ca56d3a401ff7de7c39dee8d3823c8844678a5951)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAuthContext",
    jsii_struct_bases=[],
    name_mapping={
        "ac_id": "acId",
        "id": "id",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesIncludeAuthContext:
    def __init__(
        self,
        *,
        ac_id: builtins.str,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param ac_id: The ACID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        :param id: The ID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70d79d8cb308441bc1dc0450845e1d0cb3189ed58a4412f56efe7dbf307c9d4a)
            check_type(argname="argument ac_id", value=ac_id, expected_type=type_hints["ac_id"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "ac_id": ac_id,
            "id": id,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def ac_id(self) -> builtins.str:
        '''The ACID of an Authentication context.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        '''
        result = self._values.get("ac_id")
        assert result is not None, "Required property 'ac_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an Authentication context.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Azure identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeAuthContext(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeAuthContextOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAuthContextOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26a16fd563ddaf50c63d65f249237c5d7e40f98d60f19d5198ea5591f8b73304)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="acIdInput")
    def ac_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "acIdInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="acId")
    def ac_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "acId"))

    @ac_id.setter
    def ac_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__daf3b397a098aab436c64f2cbd4cd1b176d0206f3b09ce2e458e3f5b82d11ee5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "acId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b197665d50737d6f62f86ca8d8c52f897113051360c0607440f4c820f40c9e0e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff056b8ebd822270313206b681e76e5326c32b858353a2fc4a442ddf7e5a820a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthContext]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthContext]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthContext]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad18753d6e3fc0607473d53483cc1df188be4d285eb4589762dfc46a9bf57dea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAuthMethod",
    jsii_struct_bases=[],
    name_mapping={"auth_method": "authMethod"},
)
class ZeroTrustAccessApplicationPoliciesIncludeAuthMethod:
    def __init__(self, *, auth_method: builtins.str) -> None:
        '''
        :param auth_method: The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f12144a47b584a9cbbef53f8f96db870583cd91d31973d7076a3ef7e9c624a8)
            check_type(argname="argument auth_method", value=auth_method, expected_type=type_hints["auth_method"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "auth_method": auth_method,
        }

    @builtins.property
    def auth_method(self) -> builtins.str:
        '''The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        result = self._values.get("auth_method")
        assert result is not None, "Required property 'auth_method' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeAuthMethod(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeAuthMethodOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAuthMethodOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6887d8750e7b9c02d2d7b002de828acb68837c6e34a9327b51224f370d7907ba)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="authMethodInput")
    def auth_method_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "authMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="authMethod")
    def auth_method(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "authMethod"))

    @auth_method.setter
    def auth_method(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e08158d2081eacfe57fcea7223733bbd7361bc1b1722e69338b60c61eefb8368)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "authMethod", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthMethod]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthMethod]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06ca9ad05a510b6a1704d7beaf5833eae21bca8859f7a228d7356b057c436005)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAzureAd",
    jsii_struct_bases=[],
    name_mapping={"id": "id", "identity_provider_id": "identityProviderId"},
)
class ZeroTrustAccessApplicationPoliciesIncludeAzureAd:
    def __init__(self, *, id: builtins.str, identity_provider_id: builtins.str) -> None:
        '''
        :param id: The ID of an Azure group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa6fb1eb82c83680e6fcbafbd1c647cdcfdbffa5102b936636015833afeb1da6)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an Azure group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Azure identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeAzureAd(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeAzureAdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeAzureAdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__572970fa0fd995f020a3c50890e870434b25442e9ea9da7dbed9788d541ff78f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53d746ad2b9d9fc8ddb4ca6ba12fc23ee4d4dc57ce215e9192e2500ac41b0412)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f065c3ef75025ea8e59836e13858ee45b2acffd7b77876883070116a76be4d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAzureAd]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAzureAd]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAzureAd]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35b8c7151fb30d26d584e7333770a96d718b0211427ae2c43d048686a5894d16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeCertificate",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesIncludeCertificate:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeCertificate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeCertificateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeCertificateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab6043fef748c2b307add7fd8655aed59d9adbf61ed2035b86ceba623fbbef20)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCertificate]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCertificate]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCertificate]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9939b162b2d01b7e0702d5689c4c15aa305db6e6870daa400eccd369c0b19567)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeCommonName",
    jsii_struct_bases=[],
    name_mapping={"common_name": "commonName"},
)
class ZeroTrustAccessApplicationPoliciesIncludeCommonName:
    def __init__(self, *, common_name: builtins.str) -> None:
        '''
        :param common_name: The common name to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21df10f3e00b950eb72b0e9d568c9aa3f1069aa868553ab77807ad666118f527)
            check_type(argname="argument common_name", value=common_name, expected_type=type_hints["common_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "common_name": common_name,
        }

    @builtins.property
    def common_name(self) -> builtins.str:
        '''The common name to match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        result = self._values.get("common_name")
        assert result is not None, "Required property 'common_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeCommonName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeCommonNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeCommonNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aec6a9271c9c887598a2235656a550b5160ce6e09959709179528031d6cb164d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="commonNameInput")
    def common_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "commonNameInput"))

    @builtins.property
    @jsii.member(jsii_name="commonName")
    def common_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "commonName"))

    @common_name.setter
    def common_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62f0deb16a99ab2188b65eee9b5b9fffac68812a2ae4a23cf9e0c379be842e8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCommonName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCommonName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCommonName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7067621dcf4f7a63d6dd1c5c4f9b232be3c3b6810fa9db589f1edb01e80c94b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeDevicePosture",
    jsii_struct_bases=[],
    name_mapping={"integration_uid": "integrationUid"},
)
class ZeroTrustAccessApplicationPoliciesIncludeDevicePosture:
    def __init__(self, *, integration_uid: builtins.str) -> None:
        '''
        :param integration_uid: The ID of a device posture integration. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb39215fcb304a4c71b61e00e996068cb380572550a9757d672aaf21c2b9f935)
            check_type(argname="argument integration_uid", value=integration_uid, expected_type=type_hints["integration_uid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "integration_uid": integration_uid,
        }

    @builtins.property
    def integration_uid(self) -> builtins.str:
        '''The ID of a device posture integration.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        result = self._values.get("integration_uid")
        assert result is not None, "Required property 'integration_uid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeDevicePosture(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeDevicePostureOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeDevicePostureOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4bc5b016227d1f10657ae3b84da1fd6c4600b8b22c3945cc14cb2cdb5d6710b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="integrationUidInput")
    def integration_uid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "integrationUidInput"))

    @builtins.property
    @jsii.member(jsii_name="integrationUid")
    def integration_uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "integrationUid"))

    @integration_uid.setter
    def integration_uid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d592ce1333b2b740121f4a3915429f2d6994459b3f3e164dc45f9f6b9f48bcc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "integrationUid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeDevicePosture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeDevicePosture]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeDevicePosture]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5fece5a5d00c52b3a87c0921c4ec36b7bf24c39d8e45bfb312007947619baa29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEmail",
    jsii_struct_bases=[],
    name_mapping={"email": "email"},
)
class ZeroTrustAccessApplicationPoliciesIncludeEmail:
    def __init__(self, *, email: builtins.str) -> None:
        '''
        :param email: The email of the user. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e167cb7b2b51414bb65b7d170904e30974bf3f87c030aa0d0a704addd9154e0)
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "email": email,
        }

    @builtins.property
    def email(self) -> builtins.str:
        '''The email of the user.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        result = self._values.get("email")
        assert result is not None, "Required property 'email' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeEmail(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEmailDomain",
    jsii_struct_bases=[],
    name_mapping={"domain": "domain"},
)
class ZeroTrustAccessApplicationPoliciesIncludeEmailDomain:
    def __init__(self, *, domain: builtins.str) -> None:
        '''
        :param domain: The email domain to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6cd740819f58652f5636d4d106463872e2e6f43ac9912422b4b67cd5e82907a)
            check_type(argname="argument domain", value=domain, expected_type=type_hints["domain"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "domain": domain,
        }

    @builtins.property
    def domain(self) -> builtins.str:
        '''The email domain to match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        result = self._values.get("domain")
        assert result is not None, "Required property 'domain' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeEmailDomain(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeEmailDomainOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEmailDomainOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a03b4c97a24dd384a05694179fe896b5a4ac0ac1cd382ffabb1546552a372a74)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="domainInput")
    def domain_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "domainInput"))

    @builtins.property
    @jsii.member(jsii_name="domain")
    def domain(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "domain"))

    @domain.setter
    def domain(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8b435e9f4b0e1fc816494776fba1e124c4263e9d39ca1d41c52d4fa17287d5f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "domain", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailDomain]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailDomain]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailDomain]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ef396410c78ddda84d7e740b7c960eab31675e82da6c689b306036c20707127)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created email list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a26e9d8a87ee269643f9ef2efbe6b38d4484f91da16a4ce6617cb714085f1b7)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created email list.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeEmailListStructOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEmailListStructOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e824dd1f1e4fc8e202ae0e42a71bfa0316a931f1516865ad5f730e0a7967718)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0c14a7910c8da6bd28e78e875686d7b613849d021b81c59d856748ebb09eb15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1bcc7445735bf972b490f79aabf976824eabee7e25a0b68a0fc5fabedd56968)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesIncludeEmailOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEmailOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cce291ad50ea6cbd6b2c87fa2f404d33e23ef744b0360a62b48b4507fc6776a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "email"))

    @email.setter
    def email(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2968b9dee2b9287c8a648d61b7eb1d5dc3f45a814b0d2be18ad29eda6649635e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "email", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmail]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmail]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmail]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b445611bbd2b765450ba7f55970c2599f16995d887963c9d963ecbc689a03aef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEveryone",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesIncludeEveryone:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeEveryone(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeEveryoneOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeEveryoneOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ea09fea485256b81c0c5fe0bc6a3cd8f5162e4b5f5ce2ea7fa628310de12085)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEveryone]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEveryone]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEveryone]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1537ff7a59fcb4dfbdd370369ca497528440443b4f58ec0f68689659a527a36e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation",
    jsii_struct_bases=[],
    name_mapping={"evaluate_url": "evaluateUrl", "keys_url": "keysUrl"},
)
class ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation:
    def __init__(self, *, evaluate_url: builtins.str, keys_url: builtins.str) -> None:
        '''
        :param evaluate_url: The API endpoint containing your business logic. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        :param keys_url: The API endpoint containing the key that Access uses to verify that the response came from your API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d290e1df762fd798441668b45a685f8bcd44e19079c3e995582a2e434e24e720)
            check_type(argname="argument evaluate_url", value=evaluate_url, expected_type=type_hints["evaluate_url"])
            check_type(argname="argument keys_url", value=keys_url, expected_type=type_hints["keys_url"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "evaluate_url": evaluate_url,
            "keys_url": keys_url,
        }

    @builtins.property
    def evaluate_url(self) -> builtins.str:
        '''The API endpoint containing your business logic.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        '''
        result = self._values.get("evaluate_url")
        assert result is not None, "Required property 'evaluate_url' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def keys_url(self) -> builtins.str:
        '''The API endpoint containing the key that Access uses to verify that the response came from your API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        result = self._values.get("keys_url")
        assert result is not None, "Required property 'keys_url' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f551f1ae4a9d6452beb1f1dc02aa812fc15f4f16463a7c3122cb8f7c2df0b48)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="evaluateUrlInput")
    def evaluate_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "evaluateUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="keysUrlInput")
    def keys_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keysUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="evaluateUrl")
    def evaluate_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "evaluateUrl"))

    @evaluate_url.setter
    def evaluate_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__590051c8705e3bc73f9d444798e521f97e71aacf1fe40495903d69dec936c0ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "evaluateUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="keysUrl")
    def keys_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "keysUrl"))

    @keys_url.setter
    def keys_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e64af5b1af230ca3209c4ba2d331052b6e944f2f2157a0c63aaf994ecee38341)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keysUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a07d3d946d049b1cfdc6183b484f398e17348183e119d95ccea71787458ce30)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGeo",
    jsii_struct_bases=[],
    name_mapping={"country_code": "countryCode"},
)
class ZeroTrustAccessApplicationPoliciesIncludeGeo:
    def __init__(self, *, country_code: builtins.str) -> None:
        '''
        :param country_code: The country code that should be matched. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac210db8fb8ca6314a9e84a44f7a2a6db65f7b66ac324b3ddeec845482e15f57)
            check_type(argname="argument country_code", value=country_code, expected_type=type_hints["country_code"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "country_code": country_code,
        }

    @builtins.property
    def country_code(self) -> builtins.str:
        '''The country code that should be matched.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        result = self._values.get("country_code")
        assert result is not None, "Required property 'country_code' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeGeo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeGeoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGeoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__350ce406710e03e2b22d5fc36ee6dc9fb7e919755b1270307829a11dcd584693)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="countryCodeInput")
    def country_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "countryCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="countryCode")
    def country_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "countryCode"))

    @country_code.setter
    def country_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9841e55e3987236f142f882029f78b229a245e4312aeea683c8de048f9ef6f43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "countryCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGeo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGeo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGeo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a585df249cb6ab0cc7ece82a629290f5c8b142227d8682c0c01d173998971869)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization",
    jsii_struct_bases=[],
    name_mapping={
        "identity_provider_id": "identityProviderId",
        "name": "name",
        "team": "team",
    },
)
class ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization:
    def __init__(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
        team: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Github identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the organization. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param team: The name of the team. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__162cc5ff50b8be39a362974dcb6ea24f327ce96af1dab1a74aa5d4934b5f58eb)
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument team", value=team, expected_type=type_hints["team"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "identity_provider_id": identity_provider_id,
            "name": name,
        }
        if team is not None:
            self._values["team"] = team

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Github identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The name of the organization.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def team(self) -> typing.Optional[builtins.str]:
        '''The name of the team.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        result = self._values.get("team")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeGithubOrganizationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGithubOrganizationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__547f4f6585e873b6c4425578e5c7c83eff677074040dd07d14616b8d232fc42b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetTeam")
    def reset_team(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTeam", []))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="teamInput")
    def team_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "teamInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6529b6c51b372a4327b0daa683838b9c20f46d260fffc117741eebdf12478f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f870efd4371c029a67d129b9c1108582177eda8aea2b8bfa3c6620b1895d34d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="team")
    def team(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "team"))

    @team.setter
    def team(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b9650ae1f73293bb47e19e5f1c91363a9b1cc5eb4f92ff734429223a7608b08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "team", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__413b6fcbf6fc81a6566776022961df374576ae9c9260cbe95f0cfb62a4cd8765)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGroup",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesIncludeGroup:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created Access group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__50aa74d8f0703b7166faa028884c385e0083123aefef1d39723696ab4899233c)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created Access group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeGroup(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeGroupOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGroupOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cd78f534464fd15c13325dba55791e84463fe405316b4894ea103c48fd1e20d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__baa240ebae0afaf41eabc0cd95ce7f4f62e0684109b157d9b6480c9299d5c766)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGroup]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGroup]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGroup]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a831ec536ca4c3ec57fdd7faf2795b73e7e86695cd4f3a36c8f5f866e02f92f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGsuite",
    jsii_struct_bases=[],
    name_mapping={"email": "email", "identity_provider_id": "identityProviderId"},
)
class ZeroTrustAccessApplicationPoliciesIncludeGsuite:
    def __init__(
        self,
        *,
        email: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param email: The email of the Google Workspace group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        :param identity_provider_id: The ID of your Google Workspace identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09a5da860f37e3abf22a4c16861ecf4505de7ce12d6eab2aed8804d0b0b7bdeb)
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "email": email,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def email(self) -> builtins.str:
        '''The email of the Google Workspace group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        result = self._values.get("email")
        assert result is not None, "Required property 'email' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Google Workspace identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeGsuite(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeGsuiteOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeGsuiteOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3da9205c798aef3592b8ce91a688b1231d96b48e87fbbb35c8f75db1c118b796)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "email"))

    @email.setter
    def email(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d1b71e13a917a94ddc9012617612c8c3c4e8efc68488d3da1b53956f6b00091)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "email", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9725a114b33e1537889da7501f0e3920597d7c7baea1d3d7c7de56621689a9f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGsuite]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGsuite]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGsuite]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08ae3886fe7bbf8f98e52226472d2c0ab953ea2e4e04d5db59e7768d1c5e5b7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeIp",
    jsii_struct_bases=[],
    name_mapping={"ip": "ip"},
)
class ZeroTrustAccessApplicationPoliciesIncludeIp:
    def __init__(self, *, ip: builtins.str) -> None:
        '''
        :param ip: An IPv4 or IPv6 CIDR block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32eaa86658361353872872fa529ff0f29b328bf9aea6bcce9320848ce7ab8f1e)
            check_type(argname="argument ip", value=ip, expected_type=type_hints["ip"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "ip": ip,
        }

    @builtins.property
    def ip(self) -> builtins.str:
        '''An IPv4 or IPv6 CIDR block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        result = self._values.get("ip")
        assert result is not None, "Required property 'ip' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeIp(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeIpListStruct",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesIncludeIpListStruct:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created IP list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__024474824652d6d113d08930fd670d55bc64112d0410c65e77e741365a64189c)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created IP list.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeIpListStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeIpListStructOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeIpListStructOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfb402944f36ba64ac526a0e9dc7fede1602051d2075b2e761e0c3248de0999f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__776c57e5b496bd8c7793676723432c3705b8595e5b35007c21bf5be8b3ed101f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIpListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIpListStruct]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIpListStruct]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2bf43c0eb61131bab160abf1471af39af82d5557a8b770a8895d4f519721bc8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesIncludeIpOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeIpOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca8c5a92bef24b3b6fa433d949224f045e8d8f1f2da7a8263057c1228c02ecf4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="ipInput")
    def ip_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ipInput"))

    @builtins.property
    @jsii.member(jsii_name="ip")
    def ip(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ip"))

    @ip.setter
    def ip(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d70c79c5bef6b7d4be7db98512b40f025cf61ed92c0c031d27d4bddbfff82099)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ip", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIp]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIp]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c253926f313cf7e00d4382dfc009cf9b9794e27907b0bce30a83156e0f955a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken",
    jsii_struct_bases=[],
    name_mapping={"app_uid": "appUid"},
)
class ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken:
    def __init__(self, *, app_uid: builtins.str) -> None:
        '''
        :param app_uid: The ID of an Access OIDC SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4dd375755e640f4ebcd2ca7269c05d6eb3b5317c9e5a5ab50dec60e028cd019)
            check_type(argname="argument app_uid", value=app_uid, expected_type=type_hints["app_uid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "app_uid": app_uid,
        }

    @builtins.property
    def app_uid(self) -> builtins.str:
        '''The ID of an Access OIDC SaaS application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        result = self._values.get("app_uid")
        assert result is not None, "Required property 'app_uid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeLinkedAppTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeLinkedAppTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2364025d1dcdcea11cab4053b0cee19c8b502dfb405b88ec5c44090548f7d36b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="appUidInput")
    def app_uid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "appUidInput"))

    @builtins.property
    @jsii.member(jsii_name="appUid")
    def app_uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "appUid"))

    @app_uid.setter
    def app_uid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9f8370c892ce28a11c28e368bae03d27fd92405f6231a3f8d3102bd4afb1656)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appUid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f9e28850cdfaff108254bed6575b4b17b7136625d4422b0527f5ef78eefd8bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesIncludeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3e5823dec1a2febafdc592915ba33fb4badc923e5e456ec253e2de253ffd6bc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationPoliciesIncludeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e47b8fb632616ef9eb394dc4331194e9aa02b40aefd56f61906078317d9f810e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationPoliciesIncludeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35a9c6cd21a08e264d85f3ce9f704005514a43e78e04fee80da31bc2623621ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c20cf3253a738db2a06411033c88b6e947d70194c7d4126f715fa142c5fdea91)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7bda02ec15e98fb110e406a4e4d3e75147a3dc60e3b381b8098ed6b60ded2d7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesInclude]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesInclude]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesInclude]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fff1442f4c9af01bf1c2ac254a03bdba7ca1ad9047072a4d0fc4cb1eda90e88)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeLoginMethod",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesIncludeLoginMethod:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of an identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc274ddf7d3c978e8462ea787dbb4eed9dc4bd850f8016c0001d8b5fff10428d)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeLoginMethod(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeLoginMethodOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeLoginMethodOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49a8dc2a4e713c8cee361a430748dea0208aa59709cbb89b3c6828831907992a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76e5ae67dfc396bea0a6bcffc09a1b15b18a5f3ce8f4da153d07658fad6df4ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLoginMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLoginMethod]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLoginMethod]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__003951d89c1b34e3ec4c1e1cda382c7fa471352476a9d7a494177d1a7f1f6950)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeOidc",
    jsii_struct_bases=[],
    name_mapping={
        "claim_name": "claimName",
        "claim_value": "claimValue",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesIncludeOidc:
    def __init__(
        self,
        *,
        claim_name: builtins.str,
        claim_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param claim_name: The name of the OIDC claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        :param claim_value: The OIDC claim value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        :param identity_provider_id: The ID of your OIDC identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82311ee94bbea62c75b7323bbd911fcbc75c7825355044b7aa8e04233f08a5af)
            check_type(argname="argument claim_name", value=claim_name, expected_type=type_hints["claim_name"])
            check_type(argname="argument claim_value", value=claim_value, expected_type=type_hints["claim_value"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "claim_name": claim_name,
            "claim_value": claim_value,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def claim_name(self) -> builtins.str:
        '''The name of the OIDC claim.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        '''
        result = self._values.get("claim_name")
        assert result is not None, "Required property 'claim_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def claim_value(self) -> builtins.str:
        '''The OIDC claim value to look for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        '''
        result = self._values.get("claim_value")
        assert result is not None, "Required property 'claim_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your OIDC identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeOidc(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeOidcOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeOidcOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fec854858d1f8a94bd4185f66b7900f060d0a6ac4454fdec8b97cb4e2bf9ad7a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="claimNameInput")
    def claim_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "claimNameInput"))

    @builtins.property
    @jsii.member(jsii_name="claimValueInput")
    def claim_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "claimValueInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="claimName")
    def claim_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "claimName"))

    @claim_name.setter
    def claim_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4dda9dde2f4dd8eca8608dc22dc3dbc0825bda091c302a52bdc8c76d0c2406a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "claimName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="claimValue")
    def claim_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "claimValue"))

    @claim_value.setter
    def claim_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a2c0764c84c4aa0d20402af758c12e25de664d9c8a69ab11964132a8e2005ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "claimValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2db26fea3ecefb6e597805412be526b84ac55bdb978b7efb75a69fcb2562b75)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOidc]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOidc]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOidc]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09f011b3c16915582183c021447d28dca3642201172d29e9a4cb17228213c853)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeOkta",
    jsii_struct_bases=[],
    name_mapping={"identity_provider_id": "identityProviderId", "name": "name"},
)
class ZeroTrustAccessApplicationPoliciesIncludeOkta:
    def __init__(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Okta identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the Okta group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25adb88621f34486e0256ab70636b4f3452bf8e71d05532cb9c7cad583b09ecc)
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "identity_provider_id": identity_provider_id,
            "name": name,
        }

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Okta identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The name of the Okta group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeOkta(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeOktaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeOktaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0eef65ebf04522e0a30b19ffb31609760f0b87db0c892d3562cb04184dd5b125)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91902a5aba405391158a1b5bfd0f05f5f5683f78d9411b469ce59ed5543a7293)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6c656f0c382e8f19d968ede7372b93b67e158045bfae4ddc6d8327960a2fde4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOkta]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOkta]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOkta]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcf9018f7c8e6e0c74ef74ce17b2b4a6573ff3de5a6a9e1823644640ea10f241)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesIncludeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc5aaa12544a89aa80cc1f933892d633c13cbbb095ebe532e7a5a10e584ea033)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAnyValidServiceToken")
    def put_any_valid_service_token(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken()

        return typing.cast(None, jsii.invoke(self, "putAnyValidServiceToken", [value]))

    @jsii.member(jsii_name="putAuthContext")
    def put_auth_context(
        self,
        *,
        ac_id: builtins.str,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param ac_id: The ACID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        :param id: The ID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeAuthContext(
            ac_id=ac_id, id=id, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putAuthContext", [value]))

    @jsii.member(jsii_name="putAuthMethod")
    def put_auth_method(self, *, auth_method: builtins.str) -> None:
        '''
        :param auth_method: The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeAuthMethod(
            auth_method=auth_method
        )

        return typing.cast(None, jsii.invoke(self, "putAuthMethod", [value]))

    @jsii.member(jsii_name="putAzureAd")
    def put_azure_ad(
        self,
        *,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param id: The ID of an Azure group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeAzureAd(
            id=id, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putAzureAd", [value]))

    @jsii.member(jsii_name="putCertificate")
    def put_certificate(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesIncludeCertificate()

        return typing.cast(None, jsii.invoke(self, "putCertificate", [value]))

    @jsii.member(jsii_name="putCommonName")
    def put_common_name(self, *, common_name: builtins.str) -> None:
        '''
        :param common_name: The common name to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeCommonName(
            common_name=common_name
        )

        return typing.cast(None, jsii.invoke(self, "putCommonName", [value]))

    @jsii.member(jsii_name="putDevicePosture")
    def put_device_posture(self, *, integration_uid: builtins.str) -> None:
        '''
        :param integration_uid: The ID of a device posture integration. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeDevicePosture(
            integration_uid=integration_uid
        )

        return typing.cast(None, jsii.invoke(self, "putDevicePosture", [value]))

    @jsii.member(jsii_name="putEmail")
    def put_email(self, *, email: builtins.str) -> None:
        '''
        :param email: The email of the user. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeEmail(email=email)

        return typing.cast(None, jsii.invoke(self, "putEmail", [value]))

    @jsii.member(jsii_name="putEmailDomain")
    def put_email_domain(self, *, domain: builtins.str) -> None:
        '''
        :param domain: The email domain to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeEmailDomain(domain=domain)

        return typing.cast(None, jsii.invoke(self, "putEmailDomain", [value]))

    @jsii.member(jsii_name="putEmailList")
    def put_email_list(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created email list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct(id=id)

        return typing.cast(None, jsii.invoke(self, "putEmailList", [value]))

    @jsii.member(jsii_name="putEveryone")
    def put_everyone(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesIncludeEveryone()

        return typing.cast(None, jsii.invoke(self, "putEveryone", [value]))

    @jsii.member(jsii_name="putExternalEvaluation")
    def put_external_evaluation(
        self,
        *,
        evaluate_url: builtins.str,
        keys_url: builtins.str,
    ) -> None:
        '''
        :param evaluate_url: The API endpoint containing your business logic. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        :param keys_url: The API endpoint containing the key that Access uses to verify that the response came from your API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation(
            evaluate_url=evaluate_url, keys_url=keys_url
        )

        return typing.cast(None, jsii.invoke(self, "putExternalEvaluation", [value]))

    @jsii.member(jsii_name="putGeo")
    def put_geo(self, *, country_code: builtins.str) -> None:
        '''
        :param country_code: The country code that should be matched. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeGeo(country_code=country_code)

        return typing.cast(None, jsii.invoke(self, "putGeo", [value]))

    @jsii.member(jsii_name="putGithubOrganization")
    def put_github_organization(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
        team: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Github identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the organization. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param team: The name of the team. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization(
            identity_provider_id=identity_provider_id, name=name, team=team
        )

        return typing.cast(None, jsii.invoke(self, "putGithubOrganization", [value]))

    @jsii.member(jsii_name="putGroup")
    def put_group(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created Access group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeGroup(id=id)

        return typing.cast(None, jsii.invoke(self, "putGroup", [value]))

    @jsii.member(jsii_name="putGsuite")
    def put_gsuite(
        self,
        *,
        email: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param email: The email of the Google Workspace group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        :param identity_provider_id: The ID of your Google Workspace identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeGsuite(
            email=email, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putGsuite", [value]))

    @jsii.member(jsii_name="putIp")
    def put_ip(self, *, ip: builtins.str) -> None:
        '''
        :param ip: An IPv4 or IPv6 CIDR block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeIp(ip=ip)

        return typing.cast(None, jsii.invoke(self, "putIp", [value]))

    @jsii.member(jsii_name="putIpList")
    def put_ip_list(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created IP list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeIpListStruct(id=id)

        return typing.cast(None, jsii.invoke(self, "putIpList", [value]))

    @jsii.member(jsii_name="putLinkedAppToken")
    def put_linked_app_token(self, *, app_uid: builtins.str) -> None:
        '''
        :param app_uid: The ID of an Access OIDC SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken(
            app_uid=app_uid
        )

        return typing.cast(None, jsii.invoke(self, "putLinkedAppToken", [value]))

    @jsii.member(jsii_name="putLoginMethod")
    def put_login_method(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of an identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeLoginMethod(id=id)

        return typing.cast(None, jsii.invoke(self, "putLoginMethod", [value]))

    @jsii.member(jsii_name="putOidc")
    def put_oidc(
        self,
        *,
        claim_name: builtins.str,
        claim_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param claim_name: The name of the OIDC claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        :param claim_value: The OIDC claim value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        :param identity_provider_id: The ID of your OIDC identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeOidc(
            claim_name=claim_name,
            claim_value=claim_value,
            identity_provider_id=identity_provider_id,
        )

        return typing.cast(None, jsii.invoke(self, "putOidc", [value]))

    @jsii.member(jsii_name="putOkta")
    def put_okta(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Okta identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the Okta group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeOkta(
            identity_provider_id=identity_provider_id, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putOkta", [value]))

    @jsii.member(jsii_name="putSaml")
    def put_saml(
        self,
        *,
        attribute_name: builtins.str,
        attribute_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param attribute_name: The name of the SAML attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        :param attribute_value: The SAML attribute value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        :param identity_provider_id: The ID of your SAML identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeSaml(
            attribute_name=attribute_name,
            attribute_value=attribute_value,
            identity_provider_id=identity_provider_id,
        )

        return typing.cast(None, jsii.invoke(self, "putSaml", [value]))

    @jsii.member(jsii_name="putServiceToken")
    def put_service_token(self, *, token_id: builtins.str) -> None:
        '''
        :param token_id: The ID of a Service Token. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesIncludeServiceToken(
            token_id=token_id
        )

        return typing.cast(None, jsii.invoke(self, "putServiceToken", [value]))

    @jsii.member(jsii_name="resetAnyValidServiceToken")
    def reset_any_valid_service_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnyValidServiceToken", []))

    @jsii.member(jsii_name="resetAuthContext")
    def reset_auth_context(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthContext", []))

    @jsii.member(jsii_name="resetAuthMethod")
    def reset_auth_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthMethod", []))

    @jsii.member(jsii_name="resetAzureAd")
    def reset_azure_ad(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAzureAd", []))

    @jsii.member(jsii_name="resetCertificate")
    def reset_certificate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCertificate", []))

    @jsii.member(jsii_name="resetCommonName")
    def reset_common_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonName", []))

    @jsii.member(jsii_name="resetDevicePosture")
    def reset_device_posture(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDevicePosture", []))

    @jsii.member(jsii_name="resetEmail")
    def reset_email(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmail", []))

    @jsii.member(jsii_name="resetEmailDomain")
    def reset_email_domain(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmailDomain", []))

    @jsii.member(jsii_name="resetEmailList")
    def reset_email_list(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmailList", []))

    @jsii.member(jsii_name="resetEveryone")
    def reset_everyone(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEveryone", []))

    @jsii.member(jsii_name="resetExternalEvaluation")
    def reset_external_evaluation(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExternalEvaluation", []))

    @jsii.member(jsii_name="resetGeo")
    def reset_geo(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGeo", []))

    @jsii.member(jsii_name="resetGithubOrganization")
    def reset_github_organization(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGithubOrganization", []))

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetGsuite")
    def reset_gsuite(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGsuite", []))

    @jsii.member(jsii_name="resetIp")
    def reset_ip(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIp", []))

    @jsii.member(jsii_name="resetIpList")
    def reset_ip_list(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIpList", []))

    @jsii.member(jsii_name="resetLinkedAppToken")
    def reset_linked_app_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLinkedAppToken", []))

    @jsii.member(jsii_name="resetLoginMethod")
    def reset_login_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLoginMethod", []))

    @jsii.member(jsii_name="resetOidc")
    def reset_oidc(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOidc", []))

    @jsii.member(jsii_name="resetOkta")
    def reset_okta(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOkta", []))

    @jsii.member(jsii_name="resetSaml")
    def reset_saml(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSaml", []))

    @jsii.member(jsii_name="resetServiceToken")
    def reset_service_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceToken", []))

    @builtins.property
    @jsii.member(jsii_name="anyValidServiceToken")
    def any_valid_service_token(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceTokenOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceTokenOutputReference, jsii.get(self, "anyValidServiceToken"))

    @builtins.property
    @jsii.member(jsii_name="authContext")
    def auth_context(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeAuthContextOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeAuthContextOutputReference, jsii.get(self, "authContext"))

    @builtins.property
    @jsii.member(jsii_name="authMethod")
    def auth_method(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeAuthMethodOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeAuthMethodOutputReference, jsii.get(self, "authMethod"))

    @builtins.property
    @jsii.member(jsii_name="azureAd")
    def azure_ad(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeAzureAdOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeAzureAdOutputReference, jsii.get(self, "azureAd"))

    @builtins.property
    @jsii.member(jsii_name="certificate")
    def certificate(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeCertificateOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeCertificateOutputReference, jsii.get(self, "certificate"))

    @builtins.property
    @jsii.member(jsii_name="commonName")
    def common_name(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeCommonNameOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeCommonNameOutputReference, jsii.get(self, "commonName"))

    @builtins.property
    @jsii.member(jsii_name="devicePosture")
    def device_posture(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeDevicePostureOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeDevicePostureOutputReference, jsii.get(self, "devicePosture"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> ZeroTrustAccessApplicationPoliciesIncludeEmailOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeEmailOutputReference, jsii.get(self, "email"))

    @builtins.property
    @jsii.member(jsii_name="emailDomain")
    def email_domain(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeEmailDomainOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeEmailDomainOutputReference, jsii.get(self, "emailDomain"))

    @builtins.property
    @jsii.member(jsii_name="emailList")
    def email_list(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeEmailListStructOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeEmailListStructOutputReference, jsii.get(self, "emailList"))

    @builtins.property
    @jsii.member(jsii_name="everyone")
    def everyone(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeEveryoneOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeEveryoneOutputReference, jsii.get(self, "everyone"))

    @builtins.property
    @jsii.member(jsii_name="externalEvaluation")
    def external_evaluation(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluationOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluationOutputReference, jsii.get(self, "externalEvaluation"))

    @builtins.property
    @jsii.member(jsii_name="geo")
    def geo(self) -> ZeroTrustAccessApplicationPoliciesIncludeGeoOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeGeoOutputReference, jsii.get(self, "geo"))

    @builtins.property
    @jsii.member(jsii_name="githubOrganization")
    def github_organization(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeGithubOrganizationOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeGithubOrganizationOutputReference, jsii.get(self, "githubOrganization"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> ZeroTrustAccessApplicationPoliciesIncludeGroupOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeGroupOutputReference, jsii.get(self, "group"))

    @builtins.property
    @jsii.member(jsii_name="gsuite")
    def gsuite(self) -> ZeroTrustAccessApplicationPoliciesIncludeGsuiteOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeGsuiteOutputReference, jsii.get(self, "gsuite"))

    @builtins.property
    @jsii.member(jsii_name="ip")
    def ip(self) -> ZeroTrustAccessApplicationPoliciesIncludeIpOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeIpOutputReference, jsii.get(self, "ip"))

    @builtins.property
    @jsii.member(jsii_name="ipList")
    def ip_list(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeIpListStructOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeIpListStructOutputReference, jsii.get(self, "ipList"))

    @builtins.property
    @jsii.member(jsii_name="linkedAppToken")
    def linked_app_token(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeLinkedAppTokenOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeLinkedAppTokenOutputReference, jsii.get(self, "linkedAppToken"))

    @builtins.property
    @jsii.member(jsii_name="loginMethod")
    def login_method(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesIncludeLoginMethodOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeLoginMethodOutputReference, jsii.get(self, "loginMethod"))

    @builtins.property
    @jsii.member(jsii_name="oidc")
    def oidc(self) -> ZeroTrustAccessApplicationPoliciesIncludeOidcOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeOidcOutputReference, jsii.get(self, "oidc"))

    @builtins.property
    @jsii.member(jsii_name="okta")
    def okta(self) -> ZeroTrustAccessApplicationPoliciesIncludeOktaOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeOktaOutputReference, jsii.get(self, "okta"))

    @builtins.property
    @jsii.member(jsii_name="saml")
    def saml(self) -> "ZeroTrustAccessApplicationPoliciesIncludeSamlOutputReference":
        return typing.cast("ZeroTrustAccessApplicationPoliciesIncludeSamlOutputReference", jsii.get(self, "saml"))

    @builtins.property
    @jsii.member(jsii_name="serviceToken")
    def service_token(
        self,
    ) -> "ZeroTrustAccessApplicationPoliciesIncludeServiceTokenOutputReference":
        return typing.cast("ZeroTrustAccessApplicationPoliciesIncludeServiceTokenOutputReference", jsii.get(self, "serviceToken"))

    @builtins.property
    @jsii.member(jsii_name="anyValidServiceTokenInput")
    def any_valid_service_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken]], jsii.get(self, "anyValidServiceTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="authContextInput")
    def auth_context_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthContext]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthContext]], jsii.get(self, "authContextInput"))

    @builtins.property
    @jsii.member(jsii_name="authMethodInput")
    def auth_method_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthMethod]], jsii.get(self, "authMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="azureAdInput")
    def azure_ad_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAzureAd]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAzureAd]], jsii.get(self, "azureAdInput"))

    @builtins.property
    @jsii.member(jsii_name="certificateInput")
    def certificate_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCertificate]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCertificate]], jsii.get(self, "certificateInput"))

    @builtins.property
    @jsii.member(jsii_name="commonNameInput")
    def common_name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCommonName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCommonName]], jsii.get(self, "commonNameInput"))

    @builtins.property
    @jsii.member(jsii_name="devicePostureInput")
    def device_posture_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeDevicePosture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeDevicePosture]], jsii.get(self, "devicePostureInput"))

    @builtins.property
    @jsii.member(jsii_name="emailDomainInput")
    def email_domain_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailDomain]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailDomain]], jsii.get(self, "emailDomainInput"))

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmail]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmail]], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="emailListInput")
    def email_list_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct]], jsii.get(self, "emailListInput"))

    @builtins.property
    @jsii.member(jsii_name="everyoneInput")
    def everyone_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEveryone]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEveryone]], jsii.get(self, "everyoneInput"))

    @builtins.property
    @jsii.member(jsii_name="externalEvaluationInput")
    def external_evaluation_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation]], jsii.get(self, "externalEvaluationInput"))

    @builtins.property
    @jsii.member(jsii_name="geoInput")
    def geo_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGeo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGeo]], jsii.get(self, "geoInput"))

    @builtins.property
    @jsii.member(jsii_name="githubOrganizationInput")
    def github_organization_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization]], jsii.get(self, "githubOrganizationInput"))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGroup]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGroup]], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="gsuiteInput")
    def gsuite_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGsuite]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGsuite]], jsii.get(self, "gsuiteInput"))

    @builtins.property
    @jsii.member(jsii_name="ipInput")
    def ip_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIp]], jsii.get(self, "ipInput"))

    @builtins.property
    @jsii.member(jsii_name="ipListInput")
    def ip_list_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIpListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIpListStruct]], jsii.get(self, "ipListInput"))

    @builtins.property
    @jsii.member(jsii_name="linkedAppTokenInput")
    def linked_app_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken]], jsii.get(self, "linkedAppTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="loginMethodInput")
    def login_method_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLoginMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLoginMethod]], jsii.get(self, "loginMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="oidcInput")
    def oidc_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOidc]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOidc]], jsii.get(self, "oidcInput"))

    @builtins.property
    @jsii.member(jsii_name="oktaInput")
    def okta_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOkta]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOkta]], jsii.get(self, "oktaInput"))

    @builtins.property
    @jsii.member(jsii_name="samlInput")
    def saml_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesIncludeSaml"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesIncludeSaml"]], jsii.get(self, "samlInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceTokenInput")
    def service_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesIncludeServiceToken"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesIncludeServiceToken"]], jsii.get(self, "serviceTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesInclude]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesInclude]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesInclude]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__661bb359a95e237b496eb76b03e56428d8766f87420ca8175f63b95a3d21e67f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeSaml",
    jsii_struct_bases=[],
    name_mapping={
        "attribute_name": "attributeName",
        "attribute_value": "attributeValue",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesIncludeSaml:
    def __init__(
        self,
        *,
        attribute_name: builtins.str,
        attribute_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param attribute_name: The name of the SAML attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        :param attribute_value: The SAML attribute value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        :param identity_provider_id: The ID of your SAML identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef85728ef8f71a57921a6eb66d43f552bb05f7377ec02d8bc6d4ba778f87da1d)
            check_type(argname="argument attribute_name", value=attribute_name, expected_type=type_hints["attribute_name"])
            check_type(argname="argument attribute_value", value=attribute_value, expected_type=type_hints["attribute_value"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "attribute_name": attribute_name,
            "attribute_value": attribute_value,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def attribute_name(self) -> builtins.str:
        '''The name of the SAML attribute.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        '''
        result = self._values.get("attribute_name")
        assert result is not None, "Required property 'attribute_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def attribute_value(self) -> builtins.str:
        '''The SAML attribute value to look for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        '''
        result = self._values.get("attribute_value")
        assert result is not None, "Required property 'attribute_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your SAML identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeSaml(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeSamlOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeSamlOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ccc6c29fdf2f19979aedcccbf3f74af2532c5e471355242deff686071b59640)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="attributeNameInput")
    def attribute_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attributeNameInput"))

    @builtins.property
    @jsii.member(jsii_name="attributeValueInput")
    def attribute_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attributeValueInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="attributeName")
    def attribute_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attributeName"))

    @attribute_name.setter
    def attribute_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4cc5bcb67142eb4430406c333ccab2defb20c59c127adfa597627167c7e7f41)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attributeName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="attributeValue")
    def attribute_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attributeValue"))

    @attribute_value.setter
    def attribute_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__612abd012325fec6abff83c9eeb0311c3b40b1ae336644e7d6574f450bebca21)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attributeValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dcc0788d278fc4128a63364d472abe70169246158416f51910ac3d08d88942d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeSaml]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeSaml]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeSaml]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1225c8aec5df61652b5220aa93c99f63e304e6c66d4ad4ec5ad6b91257aec16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeServiceToken",
    jsii_struct_bases=[],
    name_mapping={"token_id": "tokenId"},
)
class ZeroTrustAccessApplicationPoliciesIncludeServiceToken:
    def __init__(self, *, token_id: builtins.str) -> None:
        '''
        :param token_id: The ID of a Service Token. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c75e2399b9859394cd358f027e6008239bd00dc87cd2c7734dec776ea5b84ce3)
            check_type(argname="argument token_id", value=token_id, expected_type=type_hints["token_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "token_id": token_id,
        }

    @builtins.property
    def token_id(self) -> builtins.str:
        '''The ID of a Service Token.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        result = self._values.get("token_id")
        assert result is not None, "Required property 'token_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesIncludeServiceToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesIncludeServiceTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesIncludeServiceTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2060ddeb837ca1d30d51792b2d9d5a9044b8ee3a2fb2f97d2c5a0142dc7eed9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="tokenIdInput")
    def token_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tokenIdInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenId")
    def token_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tokenId"))

    @token_id.setter
    def token_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89d339c90d96415be7b59b618f5fe2107ef2bd6fc5aff1db761f8af72d2f742e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tokenId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeServiceToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeServiceToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a484804ccaba69356603150d523a2d17ca88c9b92d9ce096359d7b6813b13549)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__103b41a521555019a97484f2460f13fe1827e48e288d03dc9293886ec21c5f36)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationPoliciesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68be67814b4496a8d0f66aa8a5208664df24a4fbd41085a5474435f926de9c56)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationPoliciesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__920949dce444c09606e73f444ff008524787a12bdb80fb9f8e416ffe48432934)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9a99815a6c0ba614594e3971d611d765a315e84489d15f30a59703db6ece5b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8ec601548ee01757851be62b598a92e7d2b9fabca8e8c598f74ba22d7d2f2e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPolicies]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPolicies]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPolicies]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1328abddf40a82ff7c1b08c5dde61e11243ca91b4a9720326f677d07bdf2a80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e055febf0ca47a0e001ce74c6deb174c227f0b0a08f12fed3723b408f2241bf8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putConnectionRules")
    def put_connection_rules(
        self,
        *,
        ssh: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesConnectionRulesSsh, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param ssh: The SSH-specific rules that define how users may connect to the targets secured by your application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ssh ZeroTrustAccessApplication#ssh}
        '''
        value = ZeroTrustAccessApplicationPoliciesConnectionRules(ssh=ssh)

        return typing.cast(None, jsii.invoke(self, "putConnectionRules", [value]))

    @jsii.member(jsii_name="putExclude")
    def put_exclude(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesExclude, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6e502f3c2fc1ee951f45825358f1e4650ad53c266663c9fe9ad06714cf3a26d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExclude", [value]))

    @jsii.member(jsii_name="putInclude")
    def put_include(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesInclude, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e0962b4a6f20bd2ac33f811b7dc7b3e20b9ea8b4e1e654abf81afcaa69142e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInclude", [value]))

    @jsii.member(jsii_name="putRequire")
    def put_require(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationPoliciesRequire", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33f431bd0122dae81a5d245a1f9cdc736c5e89cb5100db739a27eed8b5dee857)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putRequire", [value]))

    @jsii.member(jsii_name="resetConnectionRules")
    def reset_connection_rules(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRules", []))

    @jsii.member(jsii_name="resetDecision")
    def reset_decision(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDecision", []))

    @jsii.member(jsii_name="resetExclude")
    def reset_exclude(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExclude", []))

    @jsii.member(jsii_name="resetId")
    def reset_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetId", []))

    @jsii.member(jsii_name="resetInclude")
    def reset_include(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInclude", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetPrecedence")
    def reset_precedence(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrecedence", []))

    @jsii.member(jsii_name="resetRequire")
    def reset_require(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRequire", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRules")
    def connection_rules(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesConnectionRulesOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesConnectionRulesOutputReference, jsii.get(self, "connectionRules"))

    @builtins.property
    @jsii.member(jsii_name="exclude")
    def exclude(self) -> ZeroTrustAccessApplicationPoliciesExcludeList:
        return typing.cast(ZeroTrustAccessApplicationPoliciesExcludeList, jsii.get(self, "exclude"))

    @builtins.property
    @jsii.member(jsii_name="include")
    def include(self) -> ZeroTrustAccessApplicationPoliciesIncludeList:
        return typing.cast(ZeroTrustAccessApplicationPoliciesIncludeList, jsii.get(self, "include"))

    @builtins.property
    @jsii.member(jsii_name="require")
    def require(self) -> "ZeroTrustAccessApplicationPoliciesRequireList":
        return typing.cast("ZeroTrustAccessApplicationPoliciesRequireList", jsii.get(self, "require"))

    @builtins.property
    @jsii.member(jsii_name="connectionRulesInput")
    def connection_rules_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRules]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRules]], jsii.get(self, "connectionRulesInput"))

    @builtins.property
    @jsii.member(jsii_name="decisionInput")
    def decision_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "decisionInput"))

    @builtins.property
    @jsii.member(jsii_name="excludeInput")
    def exclude_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesExclude]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesExclude]]], jsii.get(self, "excludeInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="includeInput")
    def include_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesInclude]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesInclude]]], jsii.get(self, "includeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="precedenceInput")
    def precedence_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "precedenceInput"))

    @builtins.property
    @jsii.member(jsii_name="requireInput")
    def require_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesRequire"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationPoliciesRequire"]]], jsii.get(self, "requireInput"))

    @builtins.property
    @jsii.member(jsii_name="decision")
    def decision(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "decision"))

    @decision.setter
    def decision(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b145140fc2bd1d63d39d8ec0485a310a9e99855971e6b49dcab5d8b2ef2703b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "decision", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__332925c809800364cfbd1c56867f8cf55f479068ca20e94274e65b771e5e4c39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2dcecc52f9305819322f3b1730d2edc91b0e80ddc06d5ad3ac01c88557593791)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="precedence")
    def precedence(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "precedence"))

    @precedence.setter
    def precedence(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a266b8f2abda181778173ab4c651742431d740ba56bf884ecf15b841ee0f71b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "precedence", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPolicies]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPolicies]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPolicies]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f3861c580757fd7bc4d24fe90d019e441f148e4c37a2acef6427e06cd1e00ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequire",
    jsii_struct_bases=[],
    name_mapping={
        "any_valid_service_token": "anyValidServiceToken",
        "auth_context": "authContext",
        "auth_method": "authMethod",
        "azure_ad": "azureAd",
        "certificate": "certificate",
        "common_name": "commonName",
        "device_posture": "devicePosture",
        "email": "email",
        "email_domain": "emailDomain",
        "email_list": "emailList",
        "everyone": "everyone",
        "external_evaluation": "externalEvaluation",
        "geo": "geo",
        "github_organization": "githubOrganization",
        "group": "group",
        "gsuite": "gsuite",
        "ip": "ip",
        "ip_list": "ipList",
        "linked_app_token": "linkedAppToken",
        "login_method": "loginMethod",
        "oidc": "oidc",
        "okta": "okta",
        "saml": "saml",
        "service_token": "serviceToken",
    },
)
class ZeroTrustAccessApplicationPoliciesRequire:
    def __init__(
        self,
        *,
        any_valid_service_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken", typing.Dict[builtins.str, typing.Any]]] = None,
        auth_context: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireAuthContext", typing.Dict[builtins.str, typing.Any]]] = None,
        auth_method: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireAuthMethod", typing.Dict[builtins.str, typing.Any]]] = None,
        azure_ad: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireAzureAd", typing.Dict[builtins.str, typing.Any]]] = None,
        certificate: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireCertificate", typing.Dict[builtins.str, typing.Any]]] = None,
        common_name: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireCommonName", typing.Dict[builtins.str, typing.Any]]] = None,
        device_posture: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireDevicePosture", typing.Dict[builtins.str, typing.Any]]] = None,
        email: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireEmail", typing.Dict[builtins.str, typing.Any]]] = None,
        email_domain: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireEmailDomain", typing.Dict[builtins.str, typing.Any]]] = None,
        email_list: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireEmailListStruct", typing.Dict[builtins.str, typing.Any]]] = None,
        everyone: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireEveryone", typing.Dict[builtins.str, typing.Any]]] = None,
        external_evaluation: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation", typing.Dict[builtins.str, typing.Any]]] = None,
        geo: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireGeo", typing.Dict[builtins.str, typing.Any]]] = None,
        github_organization: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireGithubOrganization", typing.Dict[builtins.str, typing.Any]]] = None,
        group: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireGroup", typing.Dict[builtins.str, typing.Any]]] = None,
        gsuite: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireGsuite", typing.Dict[builtins.str, typing.Any]]] = None,
        ip: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireIp", typing.Dict[builtins.str, typing.Any]]] = None,
        ip_list: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireIpListStruct", typing.Dict[builtins.str, typing.Any]]] = None,
        linked_app_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken", typing.Dict[builtins.str, typing.Any]]] = None,
        login_method: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireLoginMethod", typing.Dict[builtins.str, typing.Any]]] = None,
        oidc: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireOidc", typing.Dict[builtins.str, typing.Any]]] = None,
        okta: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireOkta", typing.Dict[builtins.str, typing.Any]]] = None,
        saml: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireSaml", typing.Dict[builtins.str, typing.Any]]] = None,
        service_token: typing.Optional[typing.Union["ZeroTrustAccessApplicationPoliciesRequireServiceToken", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param any_valid_service_token: An empty object which matches on all service tokens. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#any_valid_service_token ZeroTrustAccessApplication#any_valid_service_token}
        :param auth_context: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_context ZeroTrustAccessApplication#auth_context}.
        :param auth_method: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}.
        :param azure_ad: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#azure_ad ZeroTrustAccessApplication#azure_ad}.
        :param certificate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#certificate ZeroTrustAccessApplication#certificate}.
        :param common_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}.
        :param device_posture: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#device_posture ZeroTrustAccessApplication#device_posture}.
        :param email: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}.
        :param email_domain: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_domain ZeroTrustAccessApplication#email_domain}.
        :param email_list: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_list ZeroTrustAccessApplication#email_list}.
        :param everyone: An empty object which matches on all users. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#everyone ZeroTrustAccessApplication#everyone}
        :param external_evaluation: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#external_evaluation ZeroTrustAccessApplication#external_evaluation}.
        :param geo: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#geo ZeroTrustAccessApplication#geo}.
        :param github_organization: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#github_organization ZeroTrustAccessApplication#github_organization}.
        :param group: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group ZeroTrustAccessApplication#group}.
        :param gsuite: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#gsuite ZeroTrustAccessApplication#gsuite}.
        :param ip: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}.
        :param ip_list: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip_list ZeroTrustAccessApplication#ip_list}.
        :param linked_app_token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#linked_app_token ZeroTrustAccessApplication#linked_app_token}.
        :param login_method: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#login_method ZeroTrustAccessApplication#login_method}.
        :param oidc: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#oidc ZeroTrustAccessApplication#oidc}.
        :param okta: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#okta ZeroTrustAccessApplication#okta}.
        :param saml: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml ZeroTrustAccessApplication#saml}.
        :param service_token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_token ZeroTrustAccessApplication#service_token}.
        '''
        if isinstance(any_valid_service_token, dict):
            any_valid_service_token = ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken(**any_valid_service_token)
        if isinstance(auth_context, dict):
            auth_context = ZeroTrustAccessApplicationPoliciesRequireAuthContext(**auth_context)
        if isinstance(auth_method, dict):
            auth_method = ZeroTrustAccessApplicationPoliciesRequireAuthMethod(**auth_method)
        if isinstance(azure_ad, dict):
            azure_ad = ZeroTrustAccessApplicationPoliciesRequireAzureAd(**azure_ad)
        if isinstance(certificate, dict):
            certificate = ZeroTrustAccessApplicationPoliciesRequireCertificate(**certificate)
        if isinstance(common_name, dict):
            common_name = ZeroTrustAccessApplicationPoliciesRequireCommonName(**common_name)
        if isinstance(device_posture, dict):
            device_posture = ZeroTrustAccessApplicationPoliciesRequireDevicePosture(**device_posture)
        if isinstance(email, dict):
            email = ZeroTrustAccessApplicationPoliciesRequireEmail(**email)
        if isinstance(email_domain, dict):
            email_domain = ZeroTrustAccessApplicationPoliciesRequireEmailDomain(**email_domain)
        if isinstance(email_list, dict):
            email_list = ZeroTrustAccessApplicationPoliciesRequireEmailListStruct(**email_list)
        if isinstance(everyone, dict):
            everyone = ZeroTrustAccessApplicationPoliciesRequireEveryone(**everyone)
        if isinstance(external_evaluation, dict):
            external_evaluation = ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation(**external_evaluation)
        if isinstance(geo, dict):
            geo = ZeroTrustAccessApplicationPoliciesRequireGeo(**geo)
        if isinstance(github_organization, dict):
            github_organization = ZeroTrustAccessApplicationPoliciesRequireGithubOrganization(**github_organization)
        if isinstance(group, dict):
            group = ZeroTrustAccessApplicationPoliciesRequireGroup(**group)
        if isinstance(gsuite, dict):
            gsuite = ZeroTrustAccessApplicationPoliciesRequireGsuite(**gsuite)
        if isinstance(ip, dict):
            ip = ZeroTrustAccessApplicationPoliciesRequireIp(**ip)
        if isinstance(ip_list, dict):
            ip_list = ZeroTrustAccessApplicationPoliciesRequireIpListStruct(**ip_list)
        if isinstance(linked_app_token, dict):
            linked_app_token = ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken(**linked_app_token)
        if isinstance(login_method, dict):
            login_method = ZeroTrustAccessApplicationPoliciesRequireLoginMethod(**login_method)
        if isinstance(oidc, dict):
            oidc = ZeroTrustAccessApplicationPoliciesRequireOidc(**oidc)
        if isinstance(okta, dict):
            okta = ZeroTrustAccessApplicationPoliciesRequireOkta(**okta)
        if isinstance(saml, dict):
            saml = ZeroTrustAccessApplicationPoliciesRequireSaml(**saml)
        if isinstance(service_token, dict):
            service_token = ZeroTrustAccessApplicationPoliciesRequireServiceToken(**service_token)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb00ff04ac9e1cb3c0e2b2443ee85325eeb685bd4b05df282313192546c5ea6f)
            check_type(argname="argument any_valid_service_token", value=any_valid_service_token, expected_type=type_hints["any_valid_service_token"])
            check_type(argname="argument auth_context", value=auth_context, expected_type=type_hints["auth_context"])
            check_type(argname="argument auth_method", value=auth_method, expected_type=type_hints["auth_method"])
            check_type(argname="argument azure_ad", value=azure_ad, expected_type=type_hints["azure_ad"])
            check_type(argname="argument certificate", value=certificate, expected_type=type_hints["certificate"])
            check_type(argname="argument common_name", value=common_name, expected_type=type_hints["common_name"])
            check_type(argname="argument device_posture", value=device_posture, expected_type=type_hints["device_posture"])
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
            check_type(argname="argument email_domain", value=email_domain, expected_type=type_hints["email_domain"])
            check_type(argname="argument email_list", value=email_list, expected_type=type_hints["email_list"])
            check_type(argname="argument everyone", value=everyone, expected_type=type_hints["everyone"])
            check_type(argname="argument external_evaluation", value=external_evaluation, expected_type=type_hints["external_evaluation"])
            check_type(argname="argument geo", value=geo, expected_type=type_hints["geo"])
            check_type(argname="argument github_organization", value=github_organization, expected_type=type_hints["github_organization"])
            check_type(argname="argument group", value=group, expected_type=type_hints["group"])
            check_type(argname="argument gsuite", value=gsuite, expected_type=type_hints["gsuite"])
            check_type(argname="argument ip", value=ip, expected_type=type_hints["ip"])
            check_type(argname="argument ip_list", value=ip_list, expected_type=type_hints["ip_list"])
            check_type(argname="argument linked_app_token", value=linked_app_token, expected_type=type_hints["linked_app_token"])
            check_type(argname="argument login_method", value=login_method, expected_type=type_hints["login_method"])
            check_type(argname="argument oidc", value=oidc, expected_type=type_hints["oidc"])
            check_type(argname="argument okta", value=okta, expected_type=type_hints["okta"])
            check_type(argname="argument saml", value=saml, expected_type=type_hints["saml"])
            check_type(argname="argument service_token", value=service_token, expected_type=type_hints["service_token"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if any_valid_service_token is not None:
            self._values["any_valid_service_token"] = any_valid_service_token
        if auth_context is not None:
            self._values["auth_context"] = auth_context
        if auth_method is not None:
            self._values["auth_method"] = auth_method
        if azure_ad is not None:
            self._values["azure_ad"] = azure_ad
        if certificate is not None:
            self._values["certificate"] = certificate
        if common_name is not None:
            self._values["common_name"] = common_name
        if device_posture is not None:
            self._values["device_posture"] = device_posture
        if email is not None:
            self._values["email"] = email
        if email_domain is not None:
            self._values["email_domain"] = email_domain
        if email_list is not None:
            self._values["email_list"] = email_list
        if everyone is not None:
            self._values["everyone"] = everyone
        if external_evaluation is not None:
            self._values["external_evaluation"] = external_evaluation
        if geo is not None:
            self._values["geo"] = geo
        if github_organization is not None:
            self._values["github_organization"] = github_organization
        if group is not None:
            self._values["group"] = group
        if gsuite is not None:
            self._values["gsuite"] = gsuite
        if ip is not None:
            self._values["ip"] = ip
        if ip_list is not None:
            self._values["ip_list"] = ip_list
        if linked_app_token is not None:
            self._values["linked_app_token"] = linked_app_token
        if login_method is not None:
            self._values["login_method"] = login_method
        if oidc is not None:
            self._values["oidc"] = oidc
        if okta is not None:
            self._values["okta"] = okta
        if saml is not None:
            self._values["saml"] = saml
        if service_token is not None:
            self._values["service_token"] = service_token

    @builtins.property
    def any_valid_service_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken"]:
        '''An empty object which matches on all service tokens.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#any_valid_service_token ZeroTrustAccessApplication#any_valid_service_token}
        '''
        result = self._values.get("any_valid_service_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken"], result)

    @builtins.property
    def auth_context(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAuthContext"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_context ZeroTrustAccessApplication#auth_context}.'''
        result = self._values.get("auth_context")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAuthContext"], result)

    @builtins.property
    def auth_method(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAuthMethod"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}.'''
        result = self._values.get("auth_method")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAuthMethod"], result)

    @builtins.property
    def azure_ad(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAzureAd"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#azure_ad ZeroTrustAccessApplication#azure_ad}.'''
        result = self._values.get("azure_ad")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireAzureAd"], result)

    @builtins.property
    def certificate(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireCertificate"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#certificate ZeroTrustAccessApplication#certificate}.'''
        result = self._values.get("certificate")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireCertificate"], result)

    @builtins.property
    def common_name(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireCommonName"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}.'''
        result = self._values.get("common_name")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireCommonName"], result)

    @builtins.property
    def device_posture(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireDevicePosture"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#device_posture ZeroTrustAccessApplication#device_posture}.'''
        result = self._values.get("device_posture")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireDevicePosture"], result)

    @builtins.property
    def email(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEmail"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}.'''
        result = self._values.get("email")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEmail"], result)

    @builtins.property
    def email_domain(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEmailDomain"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_domain ZeroTrustAccessApplication#email_domain}.'''
        result = self._values.get("email_domain")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEmailDomain"], result)

    @builtins.property
    def email_list(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEmailListStruct"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email_list ZeroTrustAccessApplication#email_list}.'''
        result = self._values.get("email_list")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEmailListStruct"], result)

    @builtins.property
    def everyone(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEveryone"]:
        '''An empty object which matches on all users.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#everyone ZeroTrustAccessApplication#everyone}
        '''
        result = self._values.get("everyone")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireEveryone"], result)

    @builtins.property
    def external_evaluation(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#external_evaluation ZeroTrustAccessApplication#external_evaluation}.'''
        result = self._values.get("external_evaluation")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation"], result)

    @builtins.property
    def geo(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGeo"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#geo ZeroTrustAccessApplication#geo}.'''
        result = self._values.get("geo")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGeo"], result)

    @builtins.property
    def github_organization(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGithubOrganization"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#github_organization ZeroTrustAccessApplication#github_organization}.'''
        result = self._values.get("github_organization")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGithubOrganization"], result)

    @builtins.property
    def group(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGroup"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group ZeroTrustAccessApplication#group}.'''
        result = self._values.get("group")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGroup"], result)

    @builtins.property
    def gsuite(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGsuite"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#gsuite ZeroTrustAccessApplication#gsuite}.'''
        result = self._values.get("gsuite")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireGsuite"], result)

    @builtins.property
    def ip(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireIp"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}.'''
        result = self._values.get("ip")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireIp"], result)

    @builtins.property
    def ip_list(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireIpListStruct"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip_list ZeroTrustAccessApplication#ip_list}.'''
        result = self._values.get("ip_list")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireIpListStruct"], result)

    @builtins.property
    def linked_app_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#linked_app_token ZeroTrustAccessApplication#linked_app_token}.'''
        result = self._values.get("linked_app_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken"], result)

    @builtins.property
    def login_method(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireLoginMethod"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#login_method ZeroTrustAccessApplication#login_method}.'''
        result = self._values.get("login_method")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireLoginMethod"], result)

    @builtins.property
    def oidc(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireOidc"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#oidc ZeroTrustAccessApplication#oidc}.'''
        result = self._values.get("oidc")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireOidc"], result)

    @builtins.property
    def okta(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireOkta"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#okta ZeroTrustAccessApplication#okta}.'''
        result = self._values.get("okta")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireOkta"], result)

    @builtins.property
    def saml(self) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireSaml"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml ZeroTrustAccessApplication#saml}.'''
        result = self._values.get("saml")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireSaml"], result)

    @builtins.property
    def service_token(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationPoliciesRequireServiceToken"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#service_token ZeroTrustAccessApplication#service_token}.'''
        result = self._values.get("service_token")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationPoliciesRequireServiceToken"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequire(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b346c87d804a9889d7c1c851ad3ecc438351b0449ef7cf7b709407791849fb9d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eff577415f2705ac82d8cff09f67b9aeb847a3a7091f50088b38518beb994f5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAuthContext",
    jsii_struct_bases=[],
    name_mapping={
        "ac_id": "acId",
        "id": "id",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesRequireAuthContext:
    def __init__(
        self,
        *,
        ac_id: builtins.str,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param ac_id: The ACID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        :param id: The ID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e84ec2db24daf089d6abf7739fa314474b5625f0ff4deb84c60cd26373f4bab)
            check_type(argname="argument ac_id", value=ac_id, expected_type=type_hints["ac_id"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "ac_id": ac_id,
            "id": id,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def ac_id(self) -> builtins.str:
        '''The ACID of an Authentication context.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        '''
        result = self._values.get("ac_id")
        assert result is not None, "Required property 'ac_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an Authentication context.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Azure identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireAuthContext(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireAuthContextOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAuthContextOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c88c498d3a5110947ae8c4e3f4be81a16b1d4fa996c5f8322021d7f4de86b39)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="acIdInput")
    def ac_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "acIdInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="acId")
    def ac_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "acId"))

    @ac_id.setter
    def ac_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c35e7457f8a2b55222cd3878beebc36881e49f0dea42d01f0af3a465f10c6e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "acId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c595fe00746658e33170022b022a09e833cdf023c7a3da09a877ee8c16b1cf6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2f7b89cd0f4536240b24d2189d7e04807c9150755570056e63a6f33cdf23345)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthContext]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthContext]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthContext]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86b5e4fb5421942e775ba5d03eec9fc82629fdbacb9aded523620a5902a8d24a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAuthMethod",
    jsii_struct_bases=[],
    name_mapping={"auth_method": "authMethod"},
)
class ZeroTrustAccessApplicationPoliciesRequireAuthMethod:
    def __init__(self, *, auth_method: builtins.str) -> None:
        '''
        :param auth_method: The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a00005d015579e4a1181259e2165492c95262283c7f2cd20efa0140dc075a01e)
            check_type(argname="argument auth_method", value=auth_method, expected_type=type_hints["auth_method"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "auth_method": auth_method,
        }

    @builtins.property
    def auth_method(self) -> builtins.str:
        '''The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        result = self._values.get("auth_method")
        assert result is not None, "Required property 'auth_method' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireAuthMethod(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireAuthMethodOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAuthMethodOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef2f59fd3fa25c8a1f2db22de990cb87626b1a750f1ff558b88e92e5cdd0fd09)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="authMethodInput")
    def auth_method_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "authMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="authMethod")
    def auth_method(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "authMethod"))

    @auth_method.setter
    def auth_method(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9acdf5c102959577f6a09ab252746057cbe729260ef542bbe3d399a8b8554287)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "authMethod", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthMethod]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthMethod]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e663efce01a6780199262a86ec5498c400c7a358ae6409101dae12e523fd733)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAzureAd",
    jsii_struct_bases=[],
    name_mapping={"id": "id", "identity_provider_id": "identityProviderId"},
)
class ZeroTrustAccessApplicationPoliciesRequireAzureAd:
    def __init__(self, *, id: builtins.str, identity_provider_id: builtins.str) -> None:
        '''
        :param id: The ID of an Azure group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2ccd4813f868774480299a73dc7669b96289c76934ef266cca80322025a28f7)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an Azure group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Azure identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireAzureAd(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireAzureAdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireAzureAdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e3d66dbb72bb3ad5994b767f4d56bce081aba4a608d15565ca4599a5ef112e5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__611526eb58a218dadcb73e360be1e6e742679608d402ed24e106761b6a2f00bc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb9470707eb329d03c45b290a395957e556921ad1e97f6c6972d85a173c944f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAzureAd]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAzureAd]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAzureAd]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2ccb1c765dc538cc640754eb9d75d089ed537c8cc0f5b4677cf3de513f6916a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireCertificate",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesRequireCertificate:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireCertificate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireCertificateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireCertificateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85424399f45fa76d125380eb120c47ee39f5052208f624b4c98684f584deab43)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCertificate]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCertificate]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCertificate]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6b2ab4e730d3889af478dba871914a5bec48f8d8aa6919868461a42c8d30be4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireCommonName",
    jsii_struct_bases=[],
    name_mapping={"common_name": "commonName"},
)
class ZeroTrustAccessApplicationPoliciesRequireCommonName:
    def __init__(self, *, common_name: builtins.str) -> None:
        '''
        :param common_name: The common name to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9dc580c53d38f42dc8b689392b87d3003a6d7d862d23d4370f777b1f9611ae1f)
            check_type(argname="argument common_name", value=common_name, expected_type=type_hints["common_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "common_name": common_name,
        }

    @builtins.property
    def common_name(self) -> builtins.str:
        '''The common name to match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        result = self._values.get("common_name")
        assert result is not None, "Required property 'common_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireCommonName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireCommonNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireCommonNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a54230929e2fafcb397282d2b63dedf95b1f5b122b3898ace0d40c4cfed828a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="commonNameInput")
    def common_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "commonNameInput"))

    @builtins.property
    @jsii.member(jsii_name="commonName")
    def common_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "commonName"))

    @common_name.setter
    def common_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5418881bd49f7138a61ad9c8000a17818d4a546afe1d3ff2bba333967ed17b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "commonName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCommonName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCommonName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCommonName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89b5cc768f16864024a8fdddc0efa76e531d63d888823c23c3eac36c1686e912)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireDevicePosture",
    jsii_struct_bases=[],
    name_mapping={"integration_uid": "integrationUid"},
)
class ZeroTrustAccessApplicationPoliciesRequireDevicePosture:
    def __init__(self, *, integration_uid: builtins.str) -> None:
        '''
        :param integration_uid: The ID of a device posture integration. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ddc8afa28ca8e8ee400ce4aeedb85b43b57e4bd29c3c23a5f88748dcd1642b4)
            check_type(argname="argument integration_uid", value=integration_uid, expected_type=type_hints["integration_uid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "integration_uid": integration_uid,
        }

    @builtins.property
    def integration_uid(self) -> builtins.str:
        '''The ID of a device posture integration.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        result = self._values.get("integration_uid")
        assert result is not None, "Required property 'integration_uid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireDevicePosture(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireDevicePostureOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireDevicePostureOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0979be240fa06df501d808444ebfaaa258796f4cecc862407f98de49d7f271d7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="integrationUidInput")
    def integration_uid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "integrationUidInput"))

    @builtins.property
    @jsii.member(jsii_name="integrationUid")
    def integration_uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "integrationUid"))

    @integration_uid.setter
    def integration_uid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28aa8b3afc5eb116a79a8955017716d02e98f2902b81cf52de5ef91598629c23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "integrationUid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireDevicePosture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireDevicePosture]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireDevicePosture]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffe02693f62ab7419fccc842a96f8aaa97b3b4d7f980eb01c292a85d8b089a15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEmail",
    jsii_struct_bases=[],
    name_mapping={"email": "email"},
)
class ZeroTrustAccessApplicationPoliciesRequireEmail:
    def __init__(self, *, email: builtins.str) -> None:
        '''
        :param email: The email of the user. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2dc4e016fbd98ab554f40b8ccf925d45477d7e52823c859f800e4a126eef1eac)
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "email": email,
        }

    @builtins.property
    def email(self) -> builtins.str:
        '''The email of the user.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        result = self._values.get("email")
        assert result is not None, "Required property 'email' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireEmail(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEmailDomain",
    jsii_struct_bases=[],
    name_mapping={"domain": "domain"},
)
class ZeroTrustAccessApplicationPoliciesRequireEmailDomain:
    def __init__(self, *, domain: builtins.str) -> None:
        '''
        :param domain: The email domain to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aee88da4230371eaf9fde6f00842b7ea3cca5fdf9b5755157c58510aa68d37df)
            check_type(argname="argument domain", value=domain, expected_type=type_hints["domain"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "domain": domain,
        }

    @builtins.property
    def domain(self) -> builtins.str:
        '''The email domain to match.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        result = self._values.get("domain")
        assert result is not None, "Required property 'domain' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireEmailDomain(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireEmailDomainOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEmailDomainOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91f9cfaeda9fa4e43bac85fe7edbf351215d7077e02ec80642815a3c9deb1711)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="domainInput")
    def domain_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "domainInput"))

    @builtins.property
    @jsii.member(jsii_name="domain")
    def domain(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "domain"))

    @domain.setter
    def domain(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e07ee0398c285615cc70c0b9c5ed54f6712b70339d9198d1213a09904151e179)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "domain", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailDomain]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailDomain]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailDomain]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8157b4843fd5738bc1f2951a6fb80965a0de4f5eb2d788ac15f022c91ec100af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEmailListStruct",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesRequireEmailListStruct:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created email list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5949eb3475ddbad70cc1378e89e318aa1a2c67e8a4268b08f1ab8fadbdfdc1cd)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created email list.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireEmailListStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireEmailListStructOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEmailListStructOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06923c9869c68a4e711510ddfec9a7dd7e5e914e80596882805768f299d452a4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6fa9f707fd8577152c3e32b1e1eedc0548d95439df09bfa69a84e884ba598ce6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailListStruct]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailListStruct]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a11df4ade2723d91a317155b9a5db233ce93fa9c17faced55ead743f99e60b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesRequireEmailOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEmailOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d40d96483b947951b8344346d85cdfbdc54e4350307411a98b43263c3e7b327f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "email"))

    @email.setter
    def email(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f2875d88fd16101a479fdf17306f48d5a42b5e02e6e14ce04b962dac68623d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "email", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmail]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmail]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmail]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5098086cc0ac28eaf66aa88a72e75de99ebcb8b6914ac10d3da4914e948d8d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEveryone",
    jsii_struct_bases=[],
    name_mapping={},
)
class ZeroTrustAccessApplicationPoliciesRequireEveryone:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireEveryone(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireEveryoneOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireEveryoneOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe53f3e5e2c7d00fe3fbf2b899773743e35d1e3e495c0d3adbe090f10fb38c96)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEveryone]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEveryone]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEveryone]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3af8be5e974d5fbd15baa1043d0f6319c46a40f02d7ebd48f684adf262ed6d5f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation",
    jsii_struct_bases=[],
    name_mapping={"evaluate_url": "evaluateUrl", "keys_url": "keysUrl"},
)
class ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation:
    def __init__(self, *, evaluate_url: builtins.str, keys_url: builtins.str) -> None:
        '''
        :param evaluate_url: The API endpoint containing your business logic. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        :param keys_url: The API endpoint containing the key that Access uses to verify that the response came from your API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0190a585b45e7dc68036bb2137ad78573d824a1fb3c4717bc3be7b1b787d492f)
            check_type(argname="argument evaluate_url", value=evaluate_url, expected_type=type_hints["evaluate_url"])
            check_type(argname="argument keys_url", value=keys_url, expected_type=type_hints["keys_url"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "evaluate_url": evaluate_url,
            "keys_url": keys_url,
        }

    @builtins.property
    def evaluate_url(self) -> builtins.str:
        '''The API endpoint containing your business logic.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        '''
        result = self._values.get("evaluate_url")
        assert result is not None, "Required property 'evaluate_url' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def keys_url(self) -> builtins.str:
        '''The API endpoint containing the key that Access uses to verify that the response came from your API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        result = self._values.get("keys_url")
        assert result is not None, "Required property 'keys_url' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireExternalEvaluationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireExternalEvaluationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6624d2ae0d57b27ea844c74f7fa5e220161faa4913a442146106daaef2ac3f5f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="evaluateUrlInput")
    def evaluate_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "evaluateUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="keysUrlInput")
    def keys_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keysUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="evaluateUrl")
    def evaluate_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "evaluateUrl"))

    @evaluate_url.setter
    def evaluate_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c7b1b0017ebdcab3b0ce45a26b045d0d0add43ec99332c148addaa9dae501e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "evaluateUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="keysUrl")
    def keys_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "keysUrl"))

    @keys_url.setter
    def keys_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f20a5019c6342d71c06fb757d9dc4583a80ec133b27d91bfb0f16762843fd785)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keysUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d4d9df8c27e852264dc90306182c0b31553d1b9020102505233b03b1dc5febe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGeo",
    jsii_struct_bases=[],
    name_mapping={"country_code": "countryCode"},
)
class ZeroTrustAccessApplicationPoliciesRequireGeo:
    def __init__(self, *, country_code: builtins.str) -> None:
        '''
        :param country_code: The country code that should be matched. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4453852617237388fc8702ea2368cf6f6797d2f9de8141578a428fdcda248d64)
            check_type(argname="argument country_code", value=country_code, expected_type=type_hints["country_code"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "country_code": country_code,
        }

    @builtins.property
    def country_code(self) -> builtins.str:
        '''The country code that should be matched.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        result = self._values.get("country_code")
        assert result is not None, "Required property 'country_code' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireGeo(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireGeoOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGeoOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b5e05530c64e30cb5bb3d7a38d94e5008b0f39b2039899193a8f2dae18beb3f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="countryCodeInput")
    def country_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "countryCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="countryCode")
    def country_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "countryCode"))

    @country_code.setter
    def country_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81851385f68777c4c1dc5014132f28f61293c0c7ff7cf341c08fe7f96b4b6141)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "countryCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGeo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGeo]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGeo]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c77ce6795460f4c8e4ad7f4fda609afb70deeb34c6fe554182b11e7f92e5d73e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGithubOrganization",
    jsii_struct_bases=[],
    name_mapping={
        "identity_provider_id": "identityProviderId",
        "name": "name",
        "team": "team",
    },
)
class ZeroTrustAccessApplicationPoliciesRequireGithubOrganization:
    def __init__(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
        team: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Github identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the organization. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param team: The name of the team. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad81c8cd5b7b3802fca3ad3223b52bf1b2d14ce95d22deba9dd7ad70c84528a6)
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument team", value=team, expected_type=type_hints["team"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "identity_provider_id": identity_provider_id,
            "name": name,
        }
        if team is not None:
            self._values["team"] = team

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Github identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The name of the organization.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def team(self) -> typing.Optional[builtins.str]:
        '''The name of the team.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        result = self._values.get("team")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireGithubOrganization(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireGithubOrganizationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGithubOrganizationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8734ed5d10bc75705ec328ac7915f9acae2b94cc604c59c8b4ecbd84f5ffcb95)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetTeam")
    def reset_team(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTeam", []))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="teamInput")
    def team_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "teamInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c90b37e50361413151b76c83a928f9573bcd9b9e3eeedf49268d614067155f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c69b74a3206944b916fc5098f7e85fcfcd717f4f66943d128bc5c89cc9aa2c0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="team")
    def team(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "team"))

    @team.setter
    def team(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d9496c4e78f61b052be78b756b6c9f4143075914da382f5b1fd25f95318744f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "team", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGithubOrganization]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGithubOrganization]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGithubOrganization]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2eeaa995163935337a8a2403e147e49b2a1900b707368bb3a87c6ad7babddbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGroup",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesRequireGroup:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created Access group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5744c61b3cb2b0dee601cc9ab22d2c2cd05d94a9bdae1cf303257cb26c36ec2d)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created Access group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireGroup(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireGroupOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGroupOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b0db30abf86a513d1c933ac7fcf1d4d4f20c6882b3f3c4a974b7e66a99edea5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__597ac07e4a7efdb77ddb565f5c3b6507635592469eb76ce37a90b1473cec1313)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGroup]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGroup]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGroup]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3523329be81d485b2959747880a88dd0d6c6eefcf7e865f7da06e0c372c6b0d8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGsuite",
    jsii_struct_bases=[],
    name_mapping={"email": "email", "identity_provider_id": "identityProviderId"},
)
class ZeroTrustAccessApplicationPoliciesRequireGsuite:
    def __init__(
        self,
        *,
        email: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param email: The email of the Google Workspace group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        :param identity_provider_id: The ID of your Google Workspace identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00b0e7218b3a5793cd56703c66a4690b66ff61c6abf4cd71cfaf2b7de57c304d)
            check_type(argname="argument email", value=email, expected_type=type_hints["email"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "email": email,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def email(self) -> builtins.str:
        '''The email of the Google Workspace group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        result = self._values.get("email")
        assert result is not None, "Required property 'email' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Google Workspace identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireGsuite(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireGsuiteOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireGsuiteOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6363366c5c8a7bb1d61e4da33df23fb6d74d9fab991544380793d37a5b3e40d9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "email"))

    @email.setter
    def email(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4919530d40bdbdcb179bfebceeecf6aab64fc9cde89af71a96a474aa29d9766)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "email", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5992cfd3be253a1f98f15ec57df615f65579d30996622151f991ea179ad609cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGsuite]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGsuite]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGsuite]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35e2072f568947f6e5682ea9ed0853c6c6715e1f16b2e7816a692db73b422306)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireIp",
    jsii_struct_bases=[],
    name_mapping={"ip": "ip"},
)
class ZeroTrustAccessApplicationPoliciesRequireIp:
    def __init__(self, *, ip: builtins.str) -> None:
        '''
        :param ip: An IPv4 or IPv6 CIDR block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa64d91c9828fbeb47d74f56439ce5ae66c005eaeee7d8118f9ca25a2bd7b1fc)
            check_type(argname="argument ip", value=ip, expected_type=type_hints["ip"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "ip": ip,
        }

    @builtins.property
    def ip(self) -> builtins.str:
        '''An IPv4 or IPv6 CIDR block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        result = self._values.get("ip")
        assert result is not None, "Required property 'ip' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireIp(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireIpListStruct",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesRequireIpListStruct:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created IP list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5dd82a4dc51a43f47f994b814068c56ed151b192f970ef20ff00417a86fbaa9)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of a previously created IP list.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireIpListStruct(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireIpListStructOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireIpListStructOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40f97919de66f5749bd000a0ad36483c75ae48a22ba70654db592c9715fdeb26)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6f9eb560a5e988ca8f1b3ea2fbf52839761631bcffae14c0df2b6415e55fc95)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIpListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIpListStruct]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIpListStruct]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0cc2c91e7314fa624a4d71a50d9e325344868ee561959d6e77a8976485bd6b10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesRequireIpOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireIpOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f6c5a93d7be5e1688d5446092632bd0add8ee67d458be07002e303073f52ff9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="ipInput")
    def ip_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ipInput"))

    @builtins.property
    @jsii.member(jsii_name="ip")
    def ip(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ip"))

    @ip.setter
    def ip(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__948c295f2899f54add8185e91880f94abe16b58742835c4be7116dc8c71b398d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ip", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIp]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIp]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccc0135856d96addde6190bfadbcd37c19fce8f85d2faec882f80df5b72f727c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken",
    jsii_struct_bases=[],
    name_mapping={"app_uid": "appUid"},
)
class ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken:
    def __init__(self, *, app_uid: builtins.str) -> None:
        '''
        :param app_uid: The ID of an Access OIDC SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca22d689b6105c69523546f841b62a9c97fb19635928881cb884465d248a4522)
            check_type(argname="argument app_uid", value=app_uid, expected_type=type_hints["app_uid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "app_uid": app_uid,
        }

    @builtins.property
    def app_uid(self) -> builtins.str:
        '''The ID of an Access OIDC SaaS application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        result = self._values.get("app_uid")
        assert result is not None, "Required property 'app_uid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireLinkedAppTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireLinkedAppTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__083bdde64581c9c34798ca0fae398102171c6dc763b9e1406525ab68cb948dbb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="appUidInput")
    def app_uid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "appUidInput"))

    @builtins.property
    @jsii.member(jsii_name="appUid")
    def app_uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "appUid"))

    @app_uid.setter
    def app_uid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fee058d981dd88e0648e372c9b59584f942654f0d2ff1a2195abbc2ffb14dd73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appUid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7c7d5caaab85a76fbc2fd0dbf1a3f9357c5fdc89d4590e54a71d77bcaf981e3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesRequireList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69a246744b2d40943ed87bf33a1090bb7c8e9e03b47032b98aa791c50b89e7bf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationPoliciesRequireOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8ea9719a4acbe60cf4dc73515c124fe8a80acfda3f463a8c28d8042a42ccaa8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationPoliciesRequireOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2d561f37658b53b84658261df2a4099acedb569cd998687f43b02a31fcb57a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46eefe11116b96a453b84ef44f87d9402d628c484172d671d26c49790c64303f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a8b4de210a909887c9748b0cec4df66bd68eabc458bfc418d95b4eec6bd25fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesRequire]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesRequire]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesRequire]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1a2e791c7e4901a2988446705560c2e6209990dce159e3e47b9e012c2192e42)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireLoginMethod",
    jsii_struct_bases=[],
    name_mapping={"id": "id"},
)
class ZeroTrustAccessApplicationPoliciesRequireLoginMethod:
    def __init__(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of an identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1281898b383785cf1bf4954234d03cc5e2b24895db238048cd24ebacc84408f2)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }

    @builtins.property
    def id(self) -> builtins.str:
        '''The ID of an identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id}

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireLoginMethod(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireLoginMethodOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireLoginMethodOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b09b51f7cd17b53b3ed50c60e05eec499f7a51ae8a616be639a8718a09d6c8b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__217ba293e1e45c57c7d35bef80fd15039ec59b268d936f50bd97b1b7399e904c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLoginMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLoginMethod]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLoginMethod]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fddce1c453eebe85cdba5ed5eb176813585827ee218b63e61dae43a4ed96c23a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireOidc",
    jsii_struct_bases=[],
    name_mapping={
        "claim_name": "claimName",
        "claim_value": "claimValue",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesRequireOidc:
    def __init__(
        self,
        *,
        claim_name: builtins.str,
        claim_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param claim_name: The name of the OIDC claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        :param claim_value: The OIDC claim value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        :param identity_provider_id: The ID of your OIDC identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84266053049e841018f23d89c6190fe4c05793fd339ed2c5e7d13d6f897883dd)
            check_type(argname="argument claim_name", value=claim_name, expected_type=type_hints["claim_name"])
            check_type(argname="argument claim_value", value=claim_value, expected_type=type_hints["claim_value"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "claim_name": claim_name,
            "claim_value": claim_value,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def claim_name(self) -> builtins.str:
        '''The name of the OIDC claim.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        '''
        result = self._values.get("claim_name")
        assert result is not None, "Required property 'claim_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def claim_value(self) -> builtins.str:
        '''The OIDC claim value to look for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        '''
        result = self._values.get("claim_value")
        assert result is not None, "Required property 'claim_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your OIDC identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireOidc(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireOidcOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireOidcOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11a99d5cfdc109528f60bdd73cd836ba9e48cd5ee5c5f80cb79b7ae97f96a029)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="claimNameInput")
    def claim_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "claimNameInput"))

    @builtins.property
    @jsii.member(jsii_name="claimValueInput")
    def claim_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "claimValueInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="claimName")
    def claim_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "claimName"))

    @claim_name.setter
    def claim_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c131c3cbf2f540df918b4d86c706bf956788be1cc14848b6489e1e2083efd92c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "claimName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="claimValue")
    def claim_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "claimValue"))

    @claim_value.setter
    def claim_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc76b815a65458027c0f73e9ebcab5325273aeb12bcd8841eaedaea5115add08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "claimValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__adfb33c208035400adc4dfa96c6fa0cece8247ecdd3ffdd2584e34c79a25ade8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOidc]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOidc]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOidc]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84615b6cf978d0044c63c157a60359b558feb302c6259228e334ccf0ac7d5740)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireOkta",
    jsii_struct_bases=[],
    name_mapping={"identity_provider_id": "identityProviderId", "name": "name"},
)
class ZeroTrustAccessApplicationPoliciesRequireOkta:
    def __init__(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Okta identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the Okta group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5638e32a372a0474eb87a05d487c6624c6e429c83ca9da0d0e7514ba4d688d61)
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "identity_provider_id": identity_provider_id,
            "name": name,
        }

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your Okta identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''The name of the Okta group.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireOkta(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireOktaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireOktaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd40112cc97230b5add0518131ca24caae1d559c5480256a5dbe00c779ba70b0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f98a86ed95ebb5bb369ed31d2c6a67a2f77c9162d48f1a2b80d90826c4633d96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b4b5758a729a215bce4f8000bc2d44a47b975c59dfa2c8a9d3ed74f7c450abb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOkta]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOkta]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOkta]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c0501ab639b57bf0405e54482f5201e50675546c1442e43fba083ce5052847d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationPoliciesRequireOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ed8936bc7c700316900e89fca267e292c3e8bb5336a47d5fc770268b096fa84)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAnyValidServiceToken")
    def put_any_valid_service_token(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken()

        return typing.cast(None, jsii.invoke(self, "putAnyValidServiceToken", [value]))

    @jsii.member(jsii_name="putAuthContext")
    def put_auth_context(
        self,
        *,
        ac_id: builtins.str,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param ac_id: The ACID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ac_id ZeroTrustAccessApplication#ac_id}
        :param id: The ID of an Authentication context. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireAuthContext(
            ac_id=ac_id, id=id, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putAuthContext", [value]))

    @jsii.member(jsii_name="putAuthMethod")
    def put_auth_method(self, *, auth_method: builtins.str) -> None:
        '''
        :param auth_method: The type of authentication method https://datatracker.ietf.org/doc/html/rfc8176#section-2. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_method ZeroTrustAccessApplication#auth_method}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireAuthMethod(
            auth_method=auth_method
        )

        return typing.cast(None, jsii.invoke(self, "putAuthMethod", [value]))

    @jsii.member(jsii_name="putAzureAd")
    def put_azure_ad(
        self,
        *,
        id: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param id: The ID of an Azure group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param identity_provider_id: The ID of your Azure identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireAzureAd(
            id=id, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putAzureAd", [value]))

    @jsii.member(jsii_name="putCertificate")
    def put_certificate(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesRequireCertificate()

        return typing.cast(None, jsii.invoke(self, "putCertificate", [value]))

    @jsii.member(jsii_name="putCommonName")
    def put_common_name(self, *, common_name: builtins.str) -> None:
        '''
        :param common_name: The common name to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#common_name ZeroTrustAccessApplication#common_name}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireCommonName(
            common_name=common_name
        )

        return typing.cast(None, jsii.invoke(self, "putCommonName", [value]))

    @jsii.member(jsii_name="putDevicePosture")
    def put_device_posture(self, *, integration_uid: builtins.str) -> None:
        '''
        :param integration_uid: The ID of a device posture integration. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#integration_uid ZeroTrustAccessApplication#integration_uid}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireDevicePosture(
            integration_uid=integration_uid
        )

        return typing.cast(None, jsii.invoke(self, "putDevicePosture", [value]))

    @jsii.member(jsii_name="putEmail")
    def put_email(self, *, email: builtins.str) -> None:
        '''
        :param email: The email of the user. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireEmail(email=email)

        return typing.cast(None, jsii.invoke(self, "putEmail", [value]))

    @jsii.member(jsii_name="putEmailDomain")
    def put_email_domain(self, *, domain: builtins.str) -> None:
        '''
        :param domain: The email domain to match. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#domain ZeroTrustAccessApplication#domain}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireEmailDomain(domain=domain)

        return typing.cast(None, jsii.invoke(self, "putEmailDomain", [value]))

    @jsii.member(jsii_name="putEmailList")
    def put_email_list(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created email list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireEmailListStruct(id=id)

        return typing.cast(None, jsii.invoke(self, "putEmailList", [value]))

    @jsii.member(jsii_name="putEveryone")
    def put_everyone(self) -> None:
        value = ZeroTrustAccessApplicationPoliciesRequireEveryone()

        return typing.cast(None, jsii.invoke(self, "putEveryone", [value]))

    @jsii.member(jsii_name="putExternalEvaluation")
    def put_external_evaluation(
        self,
        *,
        evaluate_url: builtins.str,
        keys_url: builtins.str,
    ) -> None:
        '''
        :param evaluate_url: The API endpoint containing your business logic. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#evaluate_url ZeroTrustAccessApplication#evaluate_url}
        :param keys_url: The API endpoint containing the key that Access uses to verify that the response came from your API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#keys_url ZeroTrustAccessApplication#keys_url}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation(
            evaluate_url=evaluate_url, keys_url=keys_url
        )

        return typing.cast(None, jsii.invoke(self, "putExternalEvaluation", [value]))

    @jsii.member(jsii_name="putGeo")
    def put_geo(self, *, country_code: builtins.str) -> None:
        '''
        :param country_code: The country code that should be matched. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#country_code ZeroTrustAccessApplication#country_code}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireGeo(country_code=country_code)

        return typing.cast(None, jsii.invoke(self, "putGeo", [value]))

    @jsii.member(jsii_name="putGithubOrganization")
    def put_github_organization(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
        team: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Github identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the organization. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param team: The name of the team. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#team ZeroTrustAccessApplication#team}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireGithubOrganization(
            identity_provider_id=identity_provider_id, name=name, team=team
        )

        return typing.cast(None, jsii.invoke(self, "putGithubOrganization", [value]))

    @jsii.member(jsii_name="putGroup")
    def put_group(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created Access group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireGroup(id=id)

        return typing.cast(None, jsii.invoke(self, "putGroup", [value]))

    @jsii.member(jsii_name="putGsuite")
    def put_gsuite(
        self,
        *,
        email: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param email: The email of the Google Workspace group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#email ZeroTrustAccessApplication#email}
        :param identity_provider_id: The ID of your Google Workspace identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireGsuite(
            email=email, identity_provider_id=identity_provider_id
        )

        return typing.cast(None, jsii.invoke(self, "putGsuite", [value]))

    @jsii.member(jsii_name="putIp")
    def put_ip(self, *, ip: builtins.str) -> None:
        '''
        :param ip: An IPv4 or IPv6 CIDR block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#ip ZeroTrustAccessApplication#ip}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireIp(ip=ip)

        return typing.cast(None, jsii.invoke(self, "putIp", [value]))

    @jsii.member(jsii_name="putIpList")
    def put_ip_list(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of a previously created IP list. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireIpListStruct(id=id)

        return typing.cast(None, jsii.invoke(self, "putIpList", [value]))

    @jsii.member(jsii_name="putLinkedAppToken")
    def put_linked_app_token(self, *, app_uid: builtins.str) -> None:
        '''
        :param app_uid: The ID of an Access OIDC SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_uid ZeroTrustAccessApplication#app_uid}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken(
            app_uid=app_uid
        )

        return typing.cast(None, jsii.invoke(self, "putLinkedAppToken", [value]))

    @jsii.member(jsii_name="putLoginMethod")
    def put_login_method(self, *, id: builtins.str) -> None:
        '''
        :param id: The ID of an identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#id ZeroTrustAccessApplication#id} Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireLoginMethod(id=id)

        return typing.cast(None, jsii.invoke(self, "putLoginMethod", [value]))

    @jsii.member(jsii_name="putOidc")
    def put_oidc(
        self,
        *,
        claim_name: builtins.str,
        claim_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param claim_name: The name of the OIDC claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_name ZeroTrustAccessApplication#claim_name}
        :param claim_value: The OIDC claim value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#claim_value ZeroTrustAccessApplication#claim_value}
        :param identity_provider_id: The ID of your OIDC identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireOidc(
            claim_name=claim_name,
            claim_value=claim_value,
            identity_provider_id=identity_provider_id,
        )

        return typing.cast(None, jsii.invoke(self, "putOidc", [value]))

    @jsii.member(jsii_name="putOkta")
    def put_okta(
        self,
        *,
        identity_provider_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param identity_provider_id: The ID of your Okta identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        :param name: The name of the Okta group. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireOkta(
            identity_provider_id=identity_provider_id, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putOkta", [value]))

    @jsii.member(jsii_name="putSaml")
    def put_saml(
        self,
        *,
        attribute_name: builtins.str,
        attribute_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param attribute_name: The name of the SAML attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        :param attribute_value: The SAML attribute value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        :param identity_provider_id: The ID of your SAML identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireSaml(
            attribute_name=attribute_name,
            attribute_value=attribute_value,
            identity_provider_id=identity_provider_id,
        )

        return typing.cast(None, jsii.invoke(self, "putSaml", [value]))

    @jsii.member(jsii_name="putServiceToken")
    def put_service_token(self, *, token_id: builtins.str) -> None:
        '''
        :param token_id: The ID of a Service Token. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        value = ZeroTrustAccessApplicationPoliciesRequireServiceToken(
            token_id=token_id
        )

        return typing.cast(None, jsii.invoke(self, "putServiceToken", [value]))

    @jsii.member(jsii_name="resetAnyValidServiceToken")
    def reset_any_valid_service_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAnyValidServiceToken", []))

    @jsii.member(jsii_name="resetAuthContext")
    def reset_auth_context(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthContext", []))

    @jsii.member(jsii_name="resetAuthMethod")
    def reset_auth_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthMethod", []))

    @jsii.member(jsii_name="resetAzureAd")
    def reset_azure_ad(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAzureAd", []))

    @jsii.member(jsii_name="resetCertificate")
    def reset_certificate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCertificate", []))

    @jsii.member(jsii_name="resetCommonName")
    def reset_common_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCommonName", []))

    @jsii.member(jsii_name="resetDevicePosture")
    def reset_device_posture(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDevicePosture", []))

    @jsii.member(jsii_name="resetEmail")
    def reset_email(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmail", []))

    @jsii.member(jsii_name="resetEmailDomain")
    def reset_email_domain(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmailDomain", []))

    @jsii.member(jsii_name="resetEmailList")
    def reset_email_list(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmailList", []))

    @jsii.member(jsii_name="resetEveryone")
    def reset_everyone(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEveryone", []))

    @jsii.member(jsii_name="resetExternalEvaluation")
    def reset_external_evaluation(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExternalEvaluation", []))

    @jsii.member(jsii_name="resetGeo")
    def reset_geo(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGeo", []))

    @jsii.member(jsii_name="resetGithubOrganization")
    def reset_github_organization(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGithubOrganization", []))

    @jsii.member(jsii_name="resetGroup")
    def reset_group(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroup", []))

    @jsii.member(jsii_name="resetGsuite")
    def reset_gsuite(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGsuite", []))

    @jsii.member(jsii_name="resetIp")
    def reset_ip(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIp", []))

    @jsii.member(jsii_name="resetIpList")
    def reset_ip_list(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIpList", []))

    @jsii.member(jsii_name="resetLinkedAppToken")
    def reset_linked_app_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLinkedAppToken", []))

    @jsii.member(jsii_name="resetLoginMethod")
    def reset_login_method(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLoginMethod", []))

    @jsii.member(jsii_name="resetOidc")
    def reset_oidc(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOidc", []))

    @jsii.member(jsii_name="resetOkta")
    def reset_okta(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOkta", []))

    @jsii.member(jsii_name="resetSaml")
    def reset_saml(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSaml", []))

    @jsii.member(jsii_name="resetServiceToken")
    def reset_service_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceToken", []))

    @builtins.property
    @jsii.member(jsii_name="anyValidServiceToken")
    def any_valid_service_token(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceTokenOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceTokenOutputReference, jsii.get(self, "anyValidServiceToken"))

    @builtins.property
    @jsii.member(jsii_name="authContext")
    def auth_context(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireAuthContextOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireAuthContextOutputReference, jsii.get(self, "authContext"))

    @builtins.property
    @jsii.member(jsii_name="authMethod")
    def auth_method(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireAuthMethodOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireAuthMethodOutputReference, jsii.get(self, "authMethod"))

    @builtins.property
    @jsii.member(jsii_name="azureAd")
    def azure_ad(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireAzureAdOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireAzureAdOutputReference, jsii.get(self, "azureAd"))

    @builtins.property
    @jsii.member(jsii_name="certificate")
    def certificate(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireCertificateOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireCertificateOutputReference, jsii.get(self, "certificate"))

    @builtins.property
    @jsii.member(jsii_name="commonName")
    def common_name(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireCommonNameOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireCommonNameOutputReference, jsii.get(self, "commonName"))

    @builtins.property
    @jsii.member(jsii_name="devicePosture")
    def device_posture(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireDevicePostureOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireDevicePostureOutputReference, jsii.get(self, "devicePosture"))

    @builtins.property
    @jsii.member(jsii_name="email")
    def email(self) -> ZeroTrustAccessApplicationPoliciesRequireEmailOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireEmailOutputReference, jsii.get(self, "email"))

    @builtins.property
    @jsii.member(jsii_name="emailDomain")
    def email_domain(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireEmailDomainOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireEmailDomainOutputReference, jsii.get(self, "emailDomain"))

    @builtins.property
    @jsii.member(jsii_name="emailList")
    def email_list(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireEmailListStructOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireEmailListStructOutputReference, jsii.get(self, "emailList"))

    @builtins.property
    @jsii.member(jsii_name="everyone")
    def everyone(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireEveryoneOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireEveryoneOutputReference, jsii.get(self, "everyone"))

    @builtins.property
    @jsii.member(jsii_name="externalEvaluation")
    def external_evaluation(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireExternalEvaluationOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireExternalEvaluationOutputReference, jsii.get(self, "externalEvaluation"))

    @builtins.property
    @jsii.member(jsii_name="geo")
    def geo(self) -> ZeroTrustAccessApplicationPoliciesRequireGeoOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireGeoOutputReference, jsii.get(self, "geo"))

    @builtins.property
    @jsii.member(jsii_name="githubOrganization")
    def github_organization(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireGithubOrganizationOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireGithubOrganizationOutputReference, jsii.get(self, "githubOrganization"))

    @builtins.property
    @jsii.member(jsii_name="group")
    def group(self) -> ZeroTrustAccessApplicationPoliciesRequireGroupOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireGroupOutputReference, jsii.get(self, "group"))

    @builtins.property
    @jsii.member(jsii_name="gsuite")
    def gsuite(self) -> ZeroTrustAccessApplicationPoliciesRequireGsuiteOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireGsuiteOutputReference, jsii.get(self, "gsuite"))

    @builtins.property
    @jsii.member(jsii_name="ip")
    def ip(self) -> ZeroTrustAccessApplicationPoliciesRequireIpOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireIpOutputReference, jsii.get(self, "ip"))

    @builtins.property
    @jsii.member(jsii_name="ipList")
    def ip_list(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireIpListStructOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireIpListStructOutputReference, jsii.get(self, "ipList"))

    @builtins.property
    @jsii.member(jsii_name="linkedAppToken")
    def linked_app_token(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireLinkedAppTokenOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireLinkedAppTokenOutputReference, jsii.get(self, "linkedAppToken"))

    @builtins.property
    @jsii.member(jsii_name="loginMethod")
    def login_method(
        self,
    ) -> ZeroTrustAccessApplicationPoliciesRequireLoginMethodOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireLoginMethodOutputReference, jsii.get(self, "loginMethod"))

    @builtins.property
    @jsii.member(jsii_name="oidc")
    def oidc(self) -> ZeroTrustAccessApplicationPoliciesRequireOidcOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireOidcOutputReference, jsii.get(self, "oidc"))

    @builtins.property
    @jsii.member(jsii_name="okta")
    def okta(self) -> ZeroTrustAccessApplicationPoliciesRequireOktaOutputReference:
        return typing.cast(ZeroTrustAccessApplicationPoliciesRequireOktaOutputReference, jsii.get(self, "okta"))

    @builtins.property
    @jsii.member(jsii_name="saml")
    def saml(self) -> "ZeroTrustAccessApplicationPoliciesRequireSamlOutputReference":
        return typing.cast("ZeroTrustAccessApplicationPoliciesRequireSamlOutputReference", jsii.get(self, "saml"))

    @builtins.property
    @jsii.member(jsii_name="serviceToken")
    def service_token(
        self,
    ) -> "ZeroTrustAccessApplicationPoliciesRequireServiceTokenOutputReference":
        return typing.cast("ZeroTrustAccessApplicationPoliciesRequireServiceTokenOutputReference", jsii.get(self, "serviceToken"))

    @builtins.property
    @jsii.member(jsii_name="anyValidServiceTokenInput")
    def any_valid_service_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken]], jsii.get(self, "anyValidServiceTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="authContextInput")
    def auth_context_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthContext]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthContext]], jsii.get(self, "authContextInput"))

    @builtins.property
    @jsii.member(jsii_name="authMethodInput")
    def auth_method_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthMethod]], jsii.get(self, "authMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="azureAdInput")
    def azure_ad_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAzureAd]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAzureAd]], jsii.get(self, "azureAdInput"))

    @builtins.property
    @jsii.member(jsii_name="certificateInput")
    def certificate_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCertificate]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCertificate]], jsii.get(self, "certificateInput"))

    @builtins.property
    @jsii.member(jsii_name="commonNameInput")
    def common_name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCommonName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCommonName]], jsii.get(self, "commonNameInput"))

    @builtins.property
    @jsii.member(jsii_name="devicePostureInput")
    def device_posture_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireDevicePosture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireDevicePosture]], jsii.get(self, "devicePostureInput"))

    @builtins.property
    @jsii.member(jsii_name="emailDomainInput")
    def email_domain_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailDomain]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailDomain]], jsii.get(self, "emailDomainInput"))

    @builtins.property
    @jsii.member(jsii_name="emailInput")
    def email_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmail]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmail]], jsii.get(self, "emailInput"))

    @builtins.property
    @jsii.member(jsii_name="emailListInput")
    def email_list_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailListStruct]], jsii.get(self, "emailListInput"))

    @builtins.property
    @jsii.member(jsii_name="everyoneInput")
    def everyone_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEveryone]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEveryone]], jsii.get(self, "everyoneInput"))

    @builtins.property
    @jsii.member(jsii_name="externalEvaluationInput")
    def external_evaluation_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation]], jsii.get(self, "externalEvaluationInput"))

    @builtins.property
    @jsii.member(jsii_name="geoInput")
    def geo_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGeo]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGeo]], jsii.get(self, "geoInput"))

    @builtins.property
    @jsii.member(jsii_name="githubOrganizationInput")
    def github_organization_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGithubOrganization]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGithubOrganization]], jsii.get(self, "githubOrganizationInput"))

    @builtins.property
    @jsii.member(jsii_name="groupInput")
    def group_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGroup]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGroup]], jsii.get(self, "groupInput"))

    @builtins.property
    @jsii.member(jsii_name="gsuiteInput")
    def gsuite_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGsuite]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGsuite]], jsii.get(self, "gsuiteInput"))

    @builtins.property
    @jsii.member(jsii_name="ipInput")
    def ip_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIp]], jsii.get(self, "ipInput"))

    @builtins.property
    @jsii.member(jsii_name="ipListInput")
    def ip_list_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIpListStruct]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIpListStruct]], jsii.get(self, "ipListInput"))

    @builtins.property
    @jsii.member(jsii_name="linkedAppTokenInput")
    def linked_app_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken]], jsii.get(self, "linkedAppTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="loginMethodInput")
    def login_method_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLoginMethod]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLoginMethod]], jsii.get(self, "loginMethodInput"))

    @builtins.property
    @jsii.member(jsii_name="oidcInput")
    def oidc_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOidc]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOidc]], jsii.get(self, "oidcInput"))

    @builtins.property
    @jsii.member(jsii_name="oktaInput")
    def okta_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOkta]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOkta]], jsii.get(self, "oktaInput"))

    @builtins.property
    @jsii.member(jsii_name="samlInput")
    def saml_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesRequireSaml"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesRequireSaml"]], jsii.get(self, "samlInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceTokenInput")
    def service_token_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesRequireServiceToken"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationPoliciesRequireServiceToken"]], jsii.get(self, "serviceTokenInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequire]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequire]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequire]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bac5c3d840028d8bd67b5991f217af6a12f8cba8741a6878207dfd93159b0cd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireSaml",
    jsii_struct_bases=[],
    name_mapping={
        "attribute_name": "attributeName",
        "attribute_value": "attributeValue",
        "identity_provider_id": "identityProviderId",
    },
)
class ZeroTrustAccessApplicationPoliciesRequireSaml:
    def __init__(
        self,
        *,
        attribute_name: builtins.str,
        attribute_value: builtins.str,
        identity_provider_id: builtins.str,
    ) -> None:
        '''
        :param attribute_name: The name of the SAML attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        :param attribute_value: The SAML attribute value to look for. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        :param identity_provider_id: The ID of your SAML identity provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efeaf3c4e65749406002103487336914cf2ba116688eb67ad259cd46da19ddaa)
            check_type(argname="argument attribute_name", value=attribute_name, expected_type=type_hints["attribute_name"])
            check_type(argname="argument attribute_value", value=attribute_value, expected_type=type_hints["attribute_value"])
            check_type(argname="argument identity_provider_id", value=identity_provider_id, expected_type=type_hints["identity_provider_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "attribute_name": attribute_name,
            "attribute_value": attribute_value,
            "identity_provider_id": identity_provider_id,
        }

    @builtins.property
    def attribute_name(self) -> builtins.str:
        '''The name of the SAML attribute.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_name ZeroTrustAccessApplication#attribute_name}
        '''
        result = self._values.get("attribute_name")
        assert result is not None, "Required property 'attribute_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def attribute_value(self) -> builtins.str:
        '''The SAML attribute value to look for.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#attribute_value ZeroTrustAccessApplication#attribute_value}
        '''
        result = self._values.get("attribute_value")
        assert result is not None, "Required property 'attribute_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def identity_provider_id(self) -> builtins.str:
        '''The ID of your SAML identity provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#identity_provider_id ZeroTrustAccessApplication#identity_provider_id}
        '''
        result = self._values.get("identity_provider_id")
        assert result is not None, "Required property 'identity_provider_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireSaml(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireSamlOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireSamlOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da4b3da44cfc36af08d561fa43889fb6a891243122640ce63d5aa2ee88c4290f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="attributeNameInput")
    def attribute_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attributeNameInput"))

    @builtins.property
    @jsii.member(jsii_name="attributeValueInput")
    def attribute_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attributeValueInput"))

    @builtins.property
    @jsii.member(jsii_name="identityProviderIdInput")
    def identity_provider_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "identityProviderIdInput"))

    @builtins.property
    @jsii.member(jsii_name="attributeName")
    def attribute_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attributeName"))

    @attribute_name.setter
    def attribute_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0c0e6d2f2e8984699aa33337290aa0728fe56a1f7131a86428e16bf190fa80b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attributeName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="attributeValue")
    def attribute_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attributeValue"))

    @attribute_value.setter
    def attribute_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c96c27ee71e9784f37a17e9109f31a1bf5cadee63359edf97eb382b61c543ac0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attributeValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="identityProviderId")
    def identity_provider_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "identityProviderId"))

    @identity_provider_id.setter
    def identity_provider_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b7fd3ea89c1dc2e77a87412a9701afa2987c83b8610a997f6e093ce263292a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "identityProviderId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireSaml]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireSaml]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireSaml]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01aacd2e124c25bb5da8184fb3dd839ead46c3117d5add9976f2be023a4dbfee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireServiceToken",
    jsii_struct_bases=[],
    name_mapping={"token_id": "tokenId"},
)
class ZeroTrustAccessApplicationPoliciesRequireServiceToken:
    def __init__(self, *, token_id: builtins.str) -> None:
        '''
        :param token_id: The ID of a Service Token. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d55cd2557246b67f3756574914e549da77b583951051cb3b4ffe908701eae759)
            check_type(argname="argument token_id", value=token_id, expected_type=type_hints["token_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "token_id": token_id,
        }

    @builtins.property
    def token_id(self) -> builtins.str:
        '''The ID of a Service Token.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_id ZeroTrustAccessApplication#token_id}
        '''
        result = self._values.get("token_id")
        assert result is not None, "Required property 'token_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationPoliciesRequireServiceToken(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationPoliciesRequireServiceTokenOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationPoliciesRequireServiceTokenOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0758f1ebdbf7a8e2261daeef5e700bde34d0ae19a18631380bc812355b618b52)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="tokenIdInput")
    def token_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tokenIdInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenId")
    def token_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tokenId"))

    @token_id.setter
    def token_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3132cee6d0e5517482eb401532b1d55e65a792cf56cde0fb9b77e716b2920b2e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tokenId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireServiceToken]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireServiceToken]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireServiceToken]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d9950d8e26f37b2f3b29e8bab99fd6983e9d6d94b001970820b75e38a0776dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasApp",
    jsii_struct_bases=[],
    name_mapping={
        "access_token_lifetime": "accessTokenLifetime",
        "allow_pkce_without_client_secret": "allowPkceWithoutClientSecret",
        "app_launcher_url": "appLauncherUrl",
        "auth_type": "authType",
        "consumer_service_url": "consumerServiceUrl",
        "custom_attributes": "customAttributes",
        "custom_claims": "customClaims",
        "default_relay_state": "defaultRelayState",
        "grant_types": "grantTypes",
        "group_filter_regex": "groupFilterRegex",
        "hybrid_and_implicit_options": "hybridAndImplicitOptions",
        "idp_entity_id": "idpEntityId",
        "name_id_format": "nameIdFormat",
        "name_id_transform_jsonata": "nameIdTransformJsonata",
        "redirect_uris": "redirectUris",
        "refresh_token_options": "refreshTokenOptions",
        "saml_attribute_transform_jsonata": "samlAttributeTransformJsonata",
        "scopes": "scopes",
        "sp_entity_id": "spEntityId",
        "sso_endpoint": "ssoEndpoint",
    },
)
class ZeroTrustAccessApplicationSaasApp:
    def __init__(
        self,
        *,
        access_token_lifetime: typing.Optional[builtins.str] = None,
        allow_pkce_without_client_secret: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        app_launcher_url: typing.Optional[builtins.str] = None,
        auth_type: typing.Optional[builtins.str] = None,
        consumer_service_url: typing.Optional[builtins.str] = None,
        custom_attributes: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationSaasAppCustomAttributes", typing.Dict[builtins.str, typing.Any]]]]] = None,
        custom_claims: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationSaasAppCustomClaims", typing.Dict[builtins.str, typing.Any]]]]] = None,
        default_relay_state: typing.Optional[builtins.str] = None,
        grant_types: typing.Optional[typing.Sequence[builtins.str]] = None,
        group_filter_regex: typing.Optional[builtins.str] = None,
        hybrid_and_implicit_options: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions", typing.Dict[builtins.str, typing.Any]]] = None,
        idp_entity_id: typing.Optional[builtins.str] = None,
        name_id_format: typing.Optional[builtins.str] = None,
        name_id_transform_jsonata: typing.Optional[builtins.str] = None,
        redirect_uris: typing.Optional[typing.Sequence[builtins.str]] = None,
        refresh_token_options: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasAppRefreshTokenOptions", typing.Dict[builtins.str, typing.Any]]] = None,
        saml_attribute_transform_jsonata: typing.Optional[builtins.str] = None,
        scopes: typing.Optional[typing.Sequence[builtins.str]] = None,
        sp_entity_id: typing.Optional[builtins.str] = None,
        sso_endpoint: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param access_token_lifetime: The lifetime of the OIDC Access Token after creation. Valid units are m,h. Must be greater than or equal to 1m and less than or equal to 24h. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#access_token_lifetime ZeroTrustAccessApplication#access_token_lifetime}
        :param allow_pkce_without_client_secret: If client secret should be required on the token endpoint when authorization_code_with_pkce grant is used. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_pkce_without_client_secret ZeroTrustAccessApplication#allow_pkce_without_client_secret}
        :param app_launcher_url: The URL where this applications tile redirects users. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_url ZeroTrustAccessApplication#app_launcher_url}
        :param auth_type: Optional identifier indicating the authentication protocol used for the saas app. Required for OIDC. Default if unset is "saml" Available values: "saml", "oidc". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_type ZeroTrustAccessApplication#auth_type}
        :param consumer_service_url: The service provider's endpoint that is responsible for receiving and parsing a SAML assertion. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#consumer_service_url ZeroTrustAccessApplication#consumer_service_url}
        :param custom_attributes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_attributes ZeroTrustAccessApplication#custom_attributes}.
        :param custom_claims: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_claims ZeroTrustAccessApplication#custom_claims}.
        :param default_relay_state: The URL that the user will be redirected to after a successful login for IDP initiated logins. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#default_relay_state ZeroTrustAccessApplication#default_relay_state}
        :param grant_types: The OIDC flows supported by this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#grant_types ZeroTrustAccessApplication#grant_types}
        :param group_filter_regex: A regex to filter Cloudflare groups returned in ID token and userinfo endpoint. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group_filter_regex ZeroTrustAccessApplication#group_filter_regex}
        :param hybrid_and_implicit_options: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#hybrid_and_implicit_options ZeroTrustAccessApplication#hybrid_and_implicit_options}.
        :param idp_entity_id: The unique identifier for your SaaS application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_entity_id ZeroTrustAccessApplication#idp_entity_id}
        :param name_id_format: The format of the name identifier sent to the SaaS application. Available values: "id", "email". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_id_format ZeroTrustAccessApplication#name_id_format}
        :param name_id_transform_jsonata: A `JSONata <https://jsonata.org/>`_ expression that transforms an application's user identities into a NameID value for its SAML assertion. This expression should evaluate to a singular string. The output of this expression can override the ``name_id_format`` setting. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_id_transform_jsonata ZeroTrustAccessApplication#name_id_transform_jsonata}
        :param redirect_uris: The permitted URL's for Cloudflare to return Authorization codes and Access/ID tokens. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#redirect_uris ZeroTrustAccessApplication#redirect_uris}
        :param refresh_token_options: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#refresh_token_options ZeroTrustAccessApplication#refresh_token_options}.
        :param saml_attribute_transform_jsonata: A [JSONata] (https://jsonata.org/) expression that transforms an application's user identities into attribute assertions in the SAML response. The expression can transform id, email, name, and groups values. It can also transform fields listed in the saml_attributes or oidc_fields of the identity provider used to authenticate. The output of this expression must be a JSON object. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml_attribute_transform_jsonata ZeroTrustAccessApplication#saml_attribute_transform_jsonata}
        :param scopes: Define the user information shared with access, "offline_access" scope will be automatically enabled if refresh tokens are enabled. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scopes ZeroTrustAccessApplication#scopes}
        :param sp_entity_id: A globally unique name for an identity or service provider. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#sp_entity_id ZeroTrustAccessApplication#sp_entity_id}
        :param sso_endpoint: The endpoint where your SaaS application will send login requests. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#sso_endpoint ZeroTrustAccessApplication#sso_endpoint}
        '''
        if isinstance(hybrid_and_implicit_options, dict):
            hybrid_and_implicit_options = ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions(**hybrid_and_implicit_options)
        if isinstance(refresh_token_options, dict):
            refresh_token_options = ZeroTrustAccessApplicationSaasAppRefreshTokenOptions(**refresh_token_options)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba771b6654419f66e79dfb8d9609f915a6d90c1b92895f9d8bcbc1ad4e696d75)
            check_type(argname="argument access_token_lifetime", value=access_token_lifetime, expected_type=type_hints["access_token_lifetime"])
            check_type(argname="argument allow_pkce_without_client_secret", value=allow_pkce_without_client_secret, expected_type=type_hints["allow_pkce_without_client_secret"])
            check_type(argname="argument app_launcher_url", value=app_launcher_url, expected_type=type_hints["app_launcher_url"])
            check_type(argname="argument auth_type", value=auth_type, expected_type=type_hints["auth_type"])
            check_type(argname="argument consumer_service_url", value=consumer_service_url, expected_type=type_hints["consumer_service_url"])
            check_type(argname="argument custom_attributes", value=custom_attributes, expected_type=type_hints["custom_attributes"])
            check_type(argname="argument custom_claims", value=custom_claims, expected_type=type_hints["custom_claims"])
            check_type(argname="argument default_relay_state", value=default_relay_state, expected_type=type_hints["default_relay_state"])
            check_type(argname="argument grant_types", value=grant_types, expected_type=type_hints["grant_types"])
            check_type(argname="argument group_filter_regex", value=group_filter_regex, expected_type=type_hints["group_filter_regex"])
            check_type(argname="argument hybrid_and_implicit_options", value=hybrid_and_implicit_options, expected_type=type_hints["hybrid_and_implicit_options"])
            check_type(argname="argument idp_entity_id", value=idp_entity_id, expected_type=type_hints["idp_entity_id"])
            check_type(argname="argument name_id_format", value=name_id_format, expected_type=type_hints["name_id_format"])
            check_type(argname="argument name_id_transform_jsonata", value=name_id_transform_jsonata, expected_type=type_hints["name_id_transform_jsonata"])
            check_type(argname="argument redirect_uris", value=redirect_uris, expected_type=type_hints["redirect_uris"])
            check_type(argname="argument refresh_token_options", value=refresh_token_options, expected_type=type_hints["refresh_token_options"])
            check_type(argname="argument saml_attribute_transform_jsonata", value=saml_attribute_transform_jsonata, expected_type=type_hints["saml_attribute_transform_jsonata"])
            check_type(argname="argument scopes", value=scopes, expected_type=type_hints["scopes"])
            check_type(argname="argument sp_entity_id", value=sp_entity_id, expected_type=type_hints["sp_entity_id"])
            check_type(argname="argument sso_endpoint", value=sso_endpoint, expected_type=type_hints["sso_endpoint"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if access_token_lifetime is not None:
            self._values["access_token_lifetime"] = access_token_lifetime
        if allow_pkce_without_client_secret is not None:
            self._values["allow_pkce_without_client_secret"] = allow_pkce_without_client_secret
        if app_launcher_url is not None:
            self._values["app_launcher_url"] = app_launcher_url
        if auth_type is not None:
            self._values["auth_type"] = auth_type
        if consumer_service_url is not None:
            self._values["consumer_service_url"] = consumer_service_url
        if custom_attributes is not None:
            self._values["custom_attributes"] = custom_attributes
        if custom_claims is not None:
            self._values["custom_claims"] = custom_claims
        if default_relay_state is not None:
            self._values["default_relay_state"] = default_relay_state
        if grant_types is not None:
            self._values["grant_types"] = grant_types
        if group_filter_regex is not None:
            self._values["group_filter_regex"] = group_filter_regex
        if hybrid_and_implicit_options is not None:
            self._values["hybrid_and_implicit_options"] = hybrid_and_implicit_options
        if idp_entity_id is not None:
            self._values["idp_entity_id"] = idp_entity_id
        if name_id_format is not None:
            self._values["name_id_format"] = name_id_format
        if name_id_transform_jsonata is not None:
            self._values["name_id_transform_jsonata"] = name_id_transform_jsonata
        if redirect_uris is not None:
            self._values["redirect_uris"] = redirect_uris
        if refresh_token_options is not None:
            self._values["refresh_token_options"] = refresh_token_options
        if saml_attribute_transform_jsonata is not None:
            self._values["saml_attribute_transform_jsonata"] = saml_attribute_transform_jsonata
        if scopes is not None:
            self._values["scopes"] = scopes
        if sp_entity_id is not None:
            self._values["sp_entity_id"] = sp_entity_id
        if sso_endpoint is not None:
            self._values["sso_endpoint"] = sso_endpoint

    @builtins.property
    def access_token_lifetime(self) -> typing.Optional[builtins.str]:
        '''The lifetime of the OIDC Access Token after creation.

        Valid units are m,h. Must be greater than or equal to 1m and less than or equal to 24h.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#access_token_lifetime ZeroTrustAccessApplication#access_token_lifetime}
        '''
        result = self._values.get("access_token_lifetime")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def allow_pkce_without_client_secret(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If client secret should be required on the token endpoint when authorization_code_with_pkce grant is used.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#allow_pkce_without_client_secret ZeroTrustAccessApplication#allow_pkce_without_client_secret}
        '''
        result = self._values.get("allow_pkce_without_client_secret")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def app_launcher_url(self) -> typing.Optional[builtins.str]:
        '''The URL where this applications tile redirects users.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#app_launcher_url ZeroTrustAccessApplication#app_launcher_url}
        '''
        result = self._values.get("app_launcher_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def auth_type(self) -> typing.Optional[builtins.str]:
        '''Optional identifier indicating the authentication protocol used for the saas app.

        Required for OIDC. Default if unset is "saml"
        Available values: "saml", "oidc".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#auth_type ZeroTrustAccessApplication#auth_type}
        '''
        result = self._values.get("auth_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def consumer_service_url(self) -> typing.Optional[builtins.str]:
        '''The service provider's endpoint that is responsible for receiving and parsing a SAML assertion.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#consumer_service_url ZeroTrustAccessApplication#consumer_service_url}
        '''
        result = self._values.get("consumer_service_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def custom_attributes(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationSaasAppCustomAttributes"]]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_attributes ZeroTrustAccessApplication#custom_attributes}.'''
        result = self._values.get("custom_attributes")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationSaasAppCustomAttributes"]]], result)

    @builtins.property
    def custom_claims(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationSaasAppCustomClaims"]]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#custom_claims ZeroTrustAccessApplication#custom_claims}.'''
        result = self._values.get("custom_claims")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationSaasAppCustomClaims"]]], result)

    @builtins.property
    def default_relay_state(self) -> typing.Optional[builtins.str]:
        '''The URL that the user will be redirected to after a successful login for IDP initiated logins.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#default_relay_state ZeroTrustAccessApplication#default_relay_state}
        '''
        result = self._values.get("default_relay_state")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def grant_types(self) -> typing.Optional[typing.List[builtins.str]]:
        '''The OIDC flows supported by this application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#grant_types ZeroTrustAccessApplication#grant_types}
        '''
        result = self._values.get("grant_types")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def group_filter_regex(self) -> typing.Optional[builtins.str]:
        '''A regex to filter Cloudflare groups returned in ID token and userinfo endpoint.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#group_filter_regex ZeroTrustAccessApplication#group_filter_regex}
        '''
        result = self._values.get("group_filter_regex")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def hybrid_and_implicit_options(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#hybrid_and_implicit_options ZeroTrustAccessApplication#hybrid_and_implicit_options}.'''
        result = self._values.get("hybrid_and_implicit_options")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions"], result)

    @builtins.property
    def idp_entity_id(self) -> typing.Optional[builtins.str]:
        '''The unique identifier for your SaaS application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_entity_id ZeroTrustAccessApplication#idp_entity_id}
        '''
        result = self._values.get("idp_entity_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_id_format(self) -> typing.Optional[builtins.str]:
        '''The format of the name identifier sent to the SaaS application. Available values: "id", "email".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_id_format ZeroTrustAccessApplication#name_id_format}
        '''
        result = self._values.get("name_id_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_id_transform_jsonata(self) -> typing.Optional[builtins.str]:
        '''A `JSONata <https://jsonata.org/>`_ expression that transforms an application's user identities into a NameID value for its SAML assertion. This expression should evaluate to a singular string. The output of this expression can override the ``name_id_format`` setting.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_id_transform_jsonata ZeroTrustAccessApplication#name_id_transform_jsonata}
        '''
        result = self._values.get("name_id_transform_jsonata")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def redirect_uris(self) -> typing.Optional[typing.List[builtins.str]]:
        '''The permitted URL's for Cloudflare to return Authorization codes and Access/ID tokens.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#redirect_uris ZeroTrustAccessApplication#redirect_uris}
        '''
        result = self._values.get("redirect_uris")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def refresh_token_options(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationSaasAppRefreshTokenOptions"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#refresh_token_options ZeroTrustAccessApplication#refresh_token_options}.'''
        result = self._values.get("refresh_token_options")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationSaasAppRefreshTokenOptions"], result)

    @builtins.property
    def saml_attribute_transform_jsonata(self) -> typing.Optional[builtins.str]:
        '''A [JSONata] (https://jsonata.org/) expression that transforms an application's user identities into attribute assertions in the SAML response. The expression can transform id, email, name, and groups values. It can also transform fields listed in the saml_attributes or oidc_fields of the identity provider used to authenticate. The output of this expression must be a JSON object.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#saml_attribute_transform_jsonata ZeroTrustAccessApplication#saml_attribute_transform_jsonata}
        '''
        result = self._values.get("saml_attribute_transform_jsonata")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scopes(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Define the user information shared with access, "offline_access" scope will be automatically enabled if refresh tokens are enabled.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scopes ZeroTrustAccessApplication#scopes}
        '''
        result = self._values.get("scopes")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def sp_entity_id(self) -> typing.Optional[builtins.str]:
        '''A globally unique name for an identity or service provider.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#sp_entity_id ZeroTrustAccessApplication#sp_entity_id}
        '''
        result = self._values.get("sp_entity_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sso_endpoint(self) -> typing.Optional[builtins.str]:
        '''The endpoint where your SaaS application will send login requests.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#sso_endpoint ZeroTrustAccessApplication#sso_endpoint}
        '''
        result = self._values.get("sso_endpoint")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasApp(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributes",
    jsii_struct_bases=[],
    name_mapping={
        "friendly_name": "friendlyName",
        "name": "name",
        "name_format": "nameFormat",
        "required": "required",
        "source": "source",
    },
)
class ZeroTrustAccessApplicationSaasAppCustomAttributes:
    def __init__(
        self,
        *,
        friendly_name: typing.Optional[builtins.str] = None,
        name: typing.Optional[builtins.str] = None,
        name_format: typing.Optional[builtins.str] = None,
        required: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        source: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasAppCustomAttributesSource", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param friendly_name: The SAML FriendlyName of the attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#friendly_name ZeroTrustAccessApplication#friendly_name}
        :param name: The name of the attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param name_format: A globally unique name for an identity or service provider. Available values: "urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified", "urn:oasis:names:tc:SAML:2.0:attrname-format:basic", "urn:oasis:names:tc:SAML:2.0:attrname-format:uri". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_format ZeroTrustAccessApplication#name_format}
        :param required: If the attribute is required when building a SAML assertion. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#required ZeroTrustAccessApplication#required}
        :param source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#source ZeroTrustAccessApplication#source}.
        '''
        if isinstance(source, dict):
            source = ZeroTrustAccessApplicationSaasAppCustomAttributesSource(**source)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee795c927a151ab8c76d7ba569436019f9dd60cc040cbbfb62fe7c6ae7149c9b)
            check_type(argname="argument friendly_name", value=friendly_name, expected_type=type_hints["friendly_name"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument name_format", value=name_format, expected_type=type_hints["name_format"])
            check_type(argname="argument required", value=required, expected_type=type_hints["required"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if friendly_name is not None:
            self._values["friendly_name"] = friendly_name
        if name is not None:
            self._values["name"] = name
        if name_format is not None:
            self._values["name_format"] = name_format
        if required is not None:
            self._values["required"] = required
        if source is not None:
            self._values["source"] = source

    @builtins.property
    def friendly_name(self) -> typing.Optional[builtins.str]:
        '''The SAML FriendlyName of the attribute.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#friendly_name ZeroTrustAccessApplication#friendly_name}
        '''
        result = self._values.get("friendly_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The name of the attribute.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_format(self) -> typing.Optional[builtins.str]:
        '''A globally unique name for an identity or service provider. Available values: "urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified", "urn:oasis:names:tc:SAML:2.0:attrname-format:basic", "urn:oasis:names:tc:SAML:2.0:attrname-format:uri".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_format ZeroTrustAccessApplication#name_format}
        '''
        result = self._values.get("name_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def required(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If the attribute is required when building a SAML assertion.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#required ZeroTrustAccessApplication#required}
        '''
        result = self._values.get("required")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationSaasAppCustomAttributesSource"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#source ZeroTrustAccessApplication#source}.'''
        result = self._values.get("source")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationSaasAppCustomAttributesSource"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasAppCustomAttributes(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationSaasAppCustomAttributesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__448d9be4725c41c4dd79c15c0145b664f8ba65823499a60e49058526b1388a76)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationSaasAppCustomAttributesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6b4e415d14262027d306ca2b70e6496a7a85c1e4eb5636227584fd21365bbb8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationSaasAppCustomAttributesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47200686e6e4eba2af94e83d670cdd971a98a68080dc74ca36b954fd533d5e72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87f932f2c20ed01552e2789670cb1290e71a43979c3dd427056319736f8d9323)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be1e425fc0ad16c74424c7c554f6f006ddf9e3bbd50c0be5ea388ca1b5ccc304)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributes]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributes]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributes]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7cc350dd554cdd86461fa5a6b0d32beb09f323c12620ae2880a3575e96284a1b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationSaasAppCustomAttributesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8df7269362c7793cdc1729f4d81bd9e6077186fb2fea0ebe41e046995909ae8c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        name_by_idp: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param name: The name of the IdP attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param name_by_idp: A mapping from IdP ID to attribute name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_by_idp ZeroTrustAccessApplication#name_by_idp}
        '''
        value = ZeroTrustAccessApplicationSaasAppCustomAttributesSource(
            name=name, name_by_idp=name_by_idp
        )

        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="resetFriendlyName")
    def reset_friendly_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFriendlyName", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNameFormat")
    def reset_name_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameFormat", []))

    @jsii.member(jsii_name="resetRequired")
    def reset_required(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRequired", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(
        self,
    ) -> "ZeroTrustAccessApplicationSaasAppCustomAttributesSourceOutputReference":
        return typing.cast("ZeroTrustAccessApplicationSaasAppCustomAttributesSourceOutputReference", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="friendlyNameInput")
    def friendly_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "friendlyNameInput"))

    @builtins.property
    @jsii.member(jsii_name="nameFormatInput")
    def name_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="requiredInput")
    def required_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "requiredInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasAppCustomAttributesSource"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasAppCustomAttributesSource"]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="friendlyName")
    def friendly_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "friendlyName"))

    @friendly_name.setter
    def friendly_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__978970580c6bfa413cfc728148bd685b0f280495cdcbf9fd73840a3665f78c6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "friendlyName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df36d02b75f3397e062276727bacb5191aa638ee36c8b508c54799e0ba6fb428)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nameFormat")
    def name_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameFormat"))

    @name_format.setter
    def name_format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf897dcab12127dcb8c30e7b7e7af8e9ca34fa5ffc94e972169d349d65379544)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameFormat", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="required")
    def required(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "required"))

    @required.setter
    def required(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19d55fc4be287436a4b0e9e0ed02642bd32a4a72c3a7cd7c2ba0a45b94dfab38)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "required", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributes]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributes]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributes]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cda74df5c57ccf362a27653b1965bef37eeb984dcdb3d9b6034154e461a79e0c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributesSource",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "name_by_idp": "nameByIdp"},
)
class ZeroTrustAccessApplicationSaasAppCustomAttributesSource:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        name_by_idp: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param name: The name of the IdP attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param name_by_idp: A mapping from IdP ID to attribute name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_by_idp ZeroTrustAccessApplication#name_by_idp}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27f18df59707c7a0855a1850230e7af3279bc6745fe1623dbf541d4e492ac0f1)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument name_by_idp", value=name_by_idp, expected_type=type_hints["name_by_idp"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if name_by_idp is not None:
            self._values["name_by_idp"] = name_by_idp

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The name of the IdP attribute.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_by_idp(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp"]]]:
        '''A mapping from IdP ID to attribute name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_by_idp ZeroTrustAccessApplication#name_by_idp}
        '''
        result = self._values.get("name_by_idp")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasAppCustomAttributesSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp",
    jsii_struct_bases=[],
    name_mapping={"idp_id": "idpId", "source_name": "sourceName"},
)
class ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp:
    def __init__(
        self,
        *,
        idp_id: typing.Optional[builtins.str] = None,
        source_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param idp_id: The UID of the IdP. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_id ZeroTrustAccessApplication#idp_id}
        :param source_name: The name of the IdP provided attribute. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#source_name ZeroTrustAccessApplication#source_name}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fd773e2e884773599c9f0b613aabe3d4e96c0ee2586dbe06c5242fa47bfce7f)
            check_type(argname="argument idp_id", value=idp_id, expected_type=type_hints["idp_id"])
            check_type(argname="argument source_name", value=source_name, expected_type=type_hints["source_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if idp_id is not None:
            self._values["idp_id"] = idp_id
        if source_name is not None:
            self._values["source_name"] = source_name

    @builtins.property
    def idp_id(self) -> typing.Optional[builtins.str]:
        '''The UID of the IdP.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_id ZeroTrustAccessApplication#idp_id}
        '''
        result = self._values.get("idp_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source_name(self) -> typing.Optional[builtins.str]:
        '''The name of the IdP provided attribute.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#source_name ZeroTrustAccessApplication#source_name}
        '''
        result = self._values.get("source_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b383ba24dd5407d37f311582f2939e3da687143fa30ae7be8371b44e99daa9f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f20f5270a2f1c8fac64026ff0b876c91c6e27c9123aab8981ef9aa569021fe93)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4020420cfe72ff7c3eef90b0767c21597102d1f7d3dc4861711071485f2a3ed4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9555806b36e60cb1d2f1321fb0907d2b3b651396b5bd4291b29a438eb403d7f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__531de810e3fcad337c54b3808dce204db440ad6731f2cb6dd346c32c2658043f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55eda0e3fbd6445377265f58f3510f01a2eb82576f1518893da2b8dce8c235b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3c1a8a47a1a8f0a112745a7b95f33f9d982d5b4c2d2aae8c11bd8f2eba4a638)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetIdpId")
    def reset_idp_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIdpId", []))

    @jsii.member(jsii_name="resetSourceName")
    def reset_source_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSourceName", []))

    @builtins.property
    @jsii.member(jsii_name="idpIdInput")
    def idp_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idpIdInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceNameInput")
    def source_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sourceNameInput"))

    @builtins.property
    @jsii.member(jsii_name="idpId")
    def idp_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "idpId"))

    @idp_id.setter
    def idp_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ca4099e64a0669e0e81ff8c2605118bc411b3ebcf585b1d4cb2d500107e6f2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "idpId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sourceName")
    def source_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sourceName"))

    @source_name.setter
    def source_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d854351a392768438f8bac7d5afd91533e2e00cff219ca18fb3dff53a24d8b00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sourceName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fadcdfa22438f9cce3c1e93a7232e1e56e6e40f65a3b3abbe30e19c3f338bf03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationSaasAppCustomAttributesSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomAttributesSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09558887b25064e52c24d16137ad12f0d436e0d475f69d80a1867d5bf638736b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putNameByIdp")
    def put_name_by_idp(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9a99b8014f7a7e5369bd9c1411093c40d1e4d3f1006c6073099a3a0c6bb319e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNameByIdp", [value]))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNameByIdp")
    def reset_name_by_idp(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameByIdp", []))

    @builtins.property
    @jsii.member(jsii_name="nameByIdp")
    def name_by_idp(
        self,
    ) -> ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpList:
        return typing.cast(ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpList, jsii.get(self, "nameByIdp"))

    @builtins.property
    @jsii.member(jsii_name="nameByIdpInput")
    def name_by_idp_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]]], jsii.get(self, "nameByIdpInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91259ce89916e0094332989c19939f100a6486a811ce39b0c660405b1c1deecb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5f7e494a5109f0562b1eaf690a36acc3cbbe5a55d4af4123d9154175f57506b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomClaims",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "required": "required",
        "scope": "scope",
        "source": "source",
    },
)
class ZeroTrustAccessApplicationSaasAppCustomClaims:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        required: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        scope: typing.Optional[builtins.str] = None,
        source: typing.Optional[typing.Union["ZeroTrustAccessApplicationSaasAppCustomClaimsSource", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param name: The name of the claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param required: If the claim is required when building an OIDC token. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#required ZeroTrustAccessApplication#required}
        :param scope: The scope of the claim. Available values: "groups", "profile", "email", "openid". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scope ZeroTrustAccessApplication#scope}
        :param source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#source ZeroTrustAccessApplication#source}.
        '''
        if isinstance(source, dict):
            source = ZeroTrustAccessApplicationSaasAppCustomClaimsSource(**source)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27cf8476c28f3fe8eb3e9b9f53805413b0863b9bcdd0d3ed415ee55b9d59627f)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument required", value=required, expected_type=type_hints["required"])
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if required is not None:
            self._values["required"] = required
        if scope is not None:
            self._values["scope"] = scope
        if source is not None:
            self._values["source"] = source

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The name of the claim.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def required(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If the claim is required when building an OIDC token.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#required ZeroTrustAccessApplication#required}
        '''
        result = self._values.get("required")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def scope(self) -> typing.Optional[builtins.str]:
        '''The scope of the claim. Available values: "groups", "profile", "email", "openid".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scope ZeroTrustAccessApplication#scope}
        '''
        result = self._values.get("scope")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationSaasAppCustomClaimsSource"]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#source ZeroTrustAccessApplication#source}.'''
        result = self._values.get("source")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationSaasAppCustomClaimsSource"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasAppCustomClaims(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationSaasAppCustomClaimsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomClaimsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02f1ec94851169ee6308b1fa19deb274cacdd7bf6a062d7e4a79306aaf411c31)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationSaasAppCustomClaimsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6368030e2a001af3a411f25e6f49022e5474d4ca9d05268fe271dd1b1b331c8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationSaasAppCustomClaimsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98d5f6fe8f3c5a47675a135e9adb49497f612a1bc45579b13ee39d3af9648a36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abb1df3512c43d7d7195580d8447a94b66805d23046e9f19a21814c338841352)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dae0dd68fe9a17d3615f4618d107ab038f6e5e299beaebb1396af9027ef8722c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomClaims]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomClaims]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomClaims]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3802b56961723c35e1a9d9f06e5c09fbf13c00b1aae7dbb4418f95f877e46791)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationSaasAppCustomClaimsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomClaimsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14705de73d4d8a8c58c658fd37429aa87b6ac2ce7a89544080507303c9436ddb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSource")
    def put_source(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        name_by_idp: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param name: The name of the IdP claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param name_by_idp: A mapping from IdP ID to claim name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_by_idp ZeroTrustAccessApplication#name_by_idp}
        '''
        value = ZeroTrustAccessApplicationSaasAppCustomClaimsSource(
            name=name, name_by_idp=name_by_idp
        )

        return typing.cast(None, jsii.invoke(self, "putSource", [value]))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetRequired")
    def reset_required(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRequired", []))

    @jsii.member(jsii_name="resetScope")
    def reset_scope(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScope", []))

    @jsii.member(jsii_name="resetSource")
    def reset_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource", []))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(
        self,
    ) -> "ZeroTrustAccessApplicationSaasAppCustomClaimsSourceOutputReference":
        return typing.cast("ZeroTrustAccessApplicationSaasAppCustomClaimsSourceOutputReference", jsii.get(self, "source"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="requiredInput")
    def required_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "requiredInput"))

    @builtins.property
    @jsii.member(jsii_name="scopeInput")
    def scope_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scopeInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasAppCustomClaimsSource"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasAppCustomClaimsSource"]], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1cf278705ea5e5e251b60176091e6a87d9d7d55aaeb2aa78bd2f8632c44813f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="required")
    def required(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "required"))

    @required.setter
    def required(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce369be1cdbe1dc82da4c946a193c455199e120cfc12e05e7b05e1a48a7c6d20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "required", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scope")
    def scope(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scope"))

    @scope.setter
    def scope(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ef954d092f3e428b05408992ebc57bfbb5fdc75ed8d10598c2481d38c06256f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaims]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaims]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaims]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89b62ba4a3af0a070d0b88efcbe65fc6c90af49c593cd553fed4f9d6a6e1bf97)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomClaimsSource",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "name_by_idp": "nameByIdp"},
)
class ZeroTrustAccessApplicationSaasAppCustomClaimsSource:
    def __init__(
        self,
        *,
        name: typing.Optional[builtins.str] = None,
        name_by_idp: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param name: The name of the IdP claim. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        :param name_by_idp: A mapping from IdP ID to claim name. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_by_idp ZeroTrustAccessApplication#name_by_idp}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d029354d510f5ef2fdf20951f85881ae9708cbf6b6791f6095bc80cc61b41fa)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument name_by_idp", value=name_by_idp, expected_type=type_hints["name_by_idp"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name is not None:
            self._values["name"] = name
        if name_by_idp is not None:
            self._values["name_by_idp"] = name_by_idp

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''The name of the IdP claim.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name ZeroTrustAccessApplication#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_by_idp(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''A mapping from IdP ID to claim name.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#name_by_idp ZeroTrustAccessApplication#name_by_idp}
        '''
        result = self._values.get("name_by_idp")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasAppCustomClaimsSource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationSaasAppCustomClaimsSourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppCustomClaimsSourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e92b9dbe957a3cb105370bbb663d4bb30a2a57bf054886a79237444b7d5a399)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetNameByIdp")
    def reset_name_by_idp(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameByIdp", []))

    @builtins.property
    @jsii.member(jsii_name="nameByIdpInput")
    def name_by_idp_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "nameByIdpInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0137a856ca3380dd956907387e56b7c7cb962c63d96b11e5b350a8b765548a10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nameByIdp")
    def name_by_idp(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "nameByIdp"))

    @name_by_idp.setter
    def name_by_idp(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__292f32c04cb48eebce9dfe06ae6130e3ef7839cee490e0299a75b8edcba729a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameByIdp", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaimsSource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaimsSource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaimsSource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2a6c3e4e045f6ae8e7b9e7d283c86ca30b43c39f6a21b6843b2c97f39a2f3c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions",
    jsii_struct_bases=[],
    name_mapping={
        "return_access_token_from_authorization_endpoint": "returnAccessTokenFromAuthorizationEndpoint",
        "return_id_token_from_authorization_endpoint": "returnIdTokenFromAuthorizationEndpoint",
    },
)
class ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions:
    def __init__(
        self,
        *,
        return_access_token_from_authorization_endpoint: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        return_id_token_from_authorization_endpoint: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param return_access_token_from_authorization_endpoint: If an Access Token should be returned from the OIDC Authorization endpoint. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#return_access_token_from_authorization_endpoint ZeroTrustAccessApplication#return_access_token_from_authorization_endpoint}
        :param return_id_token_from_authorization_endpoint: If an ID Token should be returned from the OIDC Authorization endpoint. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#return_id_token_from_authorization_endpoint ZeroTrustAccessApplication#return_id_token_from_authorization_endpoint}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c47ae571f696461fa530e0b47d1efc7aaf34c0de513625409293c9d3e6bab9f3)
            check_type(argname="argument return_access_token_from_authorization_endpoint", value=return_access_token_from_authorization_endpoint, expected_type=type_hints["return_access_token_from_authorization_endpoint"])
            check_type(argname="argument return_id_token_from_authorization_endpoint", value=return_id_token_from_authorization_endpoint, expected_type=type_hints["return_id_token_from_authorization_endpoint"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if return_access_token_from_authorization_endpoint is not None:
            self._values["return_access_token_from_authorization_endpoint"] = return_access_token_from_authorization_endpoint
        if return_id_token_from_authorization_endpoint is not None:
            self._values["return_id_token_from_authorization_endpoint"] = return_id_token_from_authorization_endpoint

    @builtins.property
    def return_access_token_from_authorization_endpoint(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If an Access Token should be returned from the OIDC Authorization endpoint.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#return_access_token_from_authorization_endpoint ZeroTrustAccessApplication#return_access_token_from_authorization_endpoint}
        '''
        result = self._values.get("return_access_token_from_authorization_endpoint")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def return_id_token_from_authorization_endpoint(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If an ID Token should be returned from the OIDC Authorization endpoint.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#return_id_token_from_authorization_endpoint ZeroTrustAccessApplication#return_id_token_from_authorization_endpoint}
        '''
        result = self._values.get("return_id_token_from_authorization_endpoint")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a23c8631a7e3ced1913740badd25b182d8e96d450b36a5e36990ed6998cb39f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetReturnAccessTokenFromAuthorizationEndpoint")
    def reset_return_access_token_from_authorization_endpoint(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReturnAccessTokenFromAuthorizationEndpoint", []))

    @jsii.member(jsii_name="resetReturnIdTokenFromAuthorizationEndpoint")
    def reset_return_id_token_from_authorization_endpoint(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReturnIdTokenFromAuthorizationEndpoint", []))

    @builtins.property
    @jsii.member(jsii_name="returnAccessTokenFromAuthorizationEndpointInput")
    def return_access_token_from_authorization_endpoint_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "returnAccessTokenFromAuthorizationEndpointInput"))

    @builtins.property
    @jsii.member(jsii_name="returnIdTokenFromAuthorizationEndpointInput")
    def return_id_token_from_authorization_endpoint_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "returnIdTokenFromAuthorizationEndpointInput"))

    @builtins.property
    @jsii.member(jsii_name="returnAccessTokenFromAuthorizationEndpoint")
    def return_access_token_from_authorization_endpoint(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "returnAccessTokenFromAuthorizationEndpoint"))

    @return_access_token_from_authorization_endpoint.setter
    def return_access_token_from_authorization_endpoint(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef48dd0a1ce07f0e0b2c393cc41e88e4a85a50ad9de47aaaddfb48813152bd08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "returnAccessTokenFromAuthorizationEndpoint", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="returnIdTokenFromAuthorizationEndpoint")
    def return_id_token_from_authorization_endpoint(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "returnIdTokenFromAuthorizationEndpoint"))

    @return_id_token_from_authorization_endpoint.setter
    def return_id_token_from_authorization_endpoint(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__260a94b192ac278986ffa721cb0b4f3ff84c8bc3d6fdea12710e86b6eaaef709)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "returnIdTokenFromAuthorizationEndpoint", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56656c00569825803da3de6dcf7b591d4680f70dacf3bf0817373f6058bac6da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationSaasAppOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78a299894c97079b51266055689b9e4f413f7ec554eaa28304f60d4ad33f8534)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putCustomAttributes")
    def put_custom_attributes(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomAttributes, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__522133c03e20ff339141f0b16f2696f43c5b09adcd923ba53ec464ebd87450b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCustomAttributes", [value]))

    @jsii.member(jsii_name="putCustomClaims")
    def put_custom_claims(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomClaims, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38a5207cdcbf1398c854f441652ffdd024789d81ce89378256a1c35a5e65073b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCustomClaims", [value]))

    @jsii.member(jsii_name="putHybridAndImplicitOptions")
    def put_hybrid_and_implicit_options(
        self,
        *,
        return_access_token_from_authorization_endpoint: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        return_id_token_from_authorization_endpoint: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param return_access_token_from_authorization_endpoint: If an Access Token should be returned from the OIDC Authorization endpoint. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#return_access_token_from_authorization_endpoint ZeroTrustAccessApplication#return_access_token_from_authorization_endpoint}
        :param return_id_token_from_authorization_endpoint: If an ID Token should be returned from the OIDC Authorization endpoint. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#return_id_token_from_authorization_endpoint ZeroTrustAccessApplication#return_id_token_from_authorization_endpoint}
        '''
        value = ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions(
            return_access_token_from_authorization_endpoint=return_access_token_from_authorization_endpoint,
            return_id_token_from_authorization_endpoint=return_id_token_from_authorization_endpoint,
        )

        return typing.cast(None, jsii.invoke(self, "putHybridAndImplicitOptions", [value]))

    @jsii.member(jsii_name="putRefreshTokenOptions")
    def put_refresh_token_options(
        self,
        *,
        lifetime: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param lifetime: How long a refresh token will be valid for after creation. Valid units are m,h,d. Must be longer than 1m. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#lifetime ZeroTrustAccessApplication#lifetime}
        '''
        value = ZeroTrustAccessApplicationSaasAppRefreshTokenOptions(lifetime=lifetime)

        return typing.cast(None, jsii.invoke(self, "putRefreshTokenOptions", [value]))

    @jsii.member(jsii_name="resetAccessTokenLifetime")
    def reset_access_token_lifetime(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccessTokenLifetime", []))

    @jsii.member(jsii_name="resetAllowPkceWithoutClientSecret")
    def reset_allow_pkce_without_client_secret(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAllowPkceWithoutClientSecret", []))

    @jsii.member(jsii_name="resetAppLauncherUrl")
    def reset_app_launcher_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAppLauncherUrl", []))

    @jsii.member(jsii_name="resetAuthType")
    def reset_auth_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthType", []))

    @jsii.member(jsii_name="resetConsumerServiceUrl")
    def reset_consumer_service_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConsumerServiceUrl", []))

    @jsii.member(jsii_name="resetCustomAttributes")
    def reset_custom_attributes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCustomAttributes", []))

    @jsii.member(jsii_name="resetCustomClaims")
    def reset_custom_claims(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCustomClaims", []))

    @jsii.member(jsii_name="resetDefaultRelayState")
    def reset_default_relay_state(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDefaultRelayState", []))

    @jsii.member(jsii_name="resetGrantTypes")
    def reset_grant_types(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGrantTypes", []))

    @jsii.member(jsii_name="resetGroupFilterRegex")
    def reset_group_filter_regex(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGroupFilterRegex", []))

    @jsii.member(jsii_name="resetHybridAndImplicitOptions")
    def reset_hybrid_and_implicit_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHybridAndImplicitOptions", []))

    @jsii.member(jsii_name="resetIdpEntityId")
    def reset_idp_entity_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIdpEntityId", []))

    @jsii.member(jsii_name="resetNameIdFormat")
    def reset_name_id_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameIdFormat", []))

    @jsii.member(jsii_name="resetNameIdTransformJsonata")
    def reset_name_id_transform_jsonata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameIdTransformJsonata", []))

    @jsii.member(jsii_name="resetRedirectUris")
    def reset_redirect_uris(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRedirectUris", []))

    @jsii.member(jsii_name="resetRefreshTokenOptions")
    def reset_refresh_token_options(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRefreshTokenOptions", []))

    @jsii.member(jsii_name="resetSamlAttributeTransformJsonata")
    def reset_saml_attribute_transform_jsonata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSamlAttributeTransformJsonata", []))

    @jsii.member(jsii_name="resetScopes")
    def reset_scopes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScopes", []))

    @jsii.member(jsii_name="resetSpEntityId")
    def reset_sp_entity_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpEntityId", []))

    @jsii.member(jsii_name="resetSsoEndpoint")
    def reset_sso_endpoint(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSsoEndpoint", []))

    @builtins.property
    @jsii.member(jsii_name="clientId")
    def client_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "clientId"))

    @builtins.property
    @jsii.member(jsii_name="clientSecret")
    def client_secret(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "clientSecret"))

    @builtins.property
    @jsii.member(jsii_name="customAttributes")
    def custom_attributes(
        self,
    ) -> ZeroTrustAccessApplicationSaasAppCustomAttributesList:
        return typing.cast(ZeroTrustAccessApplicationSaasAppCustomAttributesList, jsii.get(self, "customAttributes"))

    @builtins.property
    @jsii.member(jsii_name="customClaims")
    def custom_claims(self) -> ZeroTrustAccessApplicationSaasAppCustomClaimsList:
        return typing.cast(ZeroTrustAccessApplicationSaasAppCustomClaimsList, jsii.get(self, "customClaims"))

    @builtins.property
    @jsii.member(jsii_name="hybridAndImplicitOptions")
    def hybrid_and_implicit_options(
        self,
    ) -> ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptionsOutputReference:
        return typing.cast(ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptionsOutputReference, jsii.get(self, "hybridAndImplicitOptions"))

    @builtins.property
    @jsii.member(jsii_name="publicKey")
    def public_key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "publicKey"))

    @builtins.property
    @jsii.member(jsii_name="refreshTokenOptions")
    def refresh_token_options(
        self,
    ) -> "ZeroTrustAccessApplicationSaasAppRefreshTokenOptionsOutputReference":
        return typing.cast("ZeroTrustAccessApplicationSaasAppRefreshTokenOptionsOutputReference", jsii.get(self, "refreshTokenOptions"))

    @builtins.property
    @jsii.member(jsii_name="accessTokenLifetimeInput")
    def access_token_lifetime_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accessTokenLifetimeInput"))

    @builtins.property
    @jsii.member(jsii_name="allowPkceWithoutClientSecretInput")
    def allow_pkce_without_client_secret_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "allowPkceWithoutClientSecretInput"))

    @builtins.property
    @jsii.member(jsii_name="appLauncherUrlInput")
    def app_launcher_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "appLauncherUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="authTypeInput")
    def auth_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "authTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="consumerServiceUrlInput")
    def consumer_service_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "consumerServiceUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="customAttributesInput")
    def custom_attributes_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributes]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributes]]], jsii.get(self, "customAttributesInput"))

    @builtins.property
    @jsii.member(jsii_name="customClaimsInput")
    def custom_claims_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomClaims]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomClaims]]], jsii.get(self, "customClaimsInput"))

    @builtins.property
    @jsii.member(jsii_name="defaultRelayStateInput")
    def default_relay_state_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "defaultRelayStateInput"))

    @builtins.property
    @jsii.member(jsii_name="grantTypesInput")
    def grant_types_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "grantTypesInput"))

    @builtins.property
    @jsii.member(jsii_name="groupFilterRegexInput")
    def group_filter_regex_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupFilterRegexInput"))

    @builtins.property
    @jsii.member(jsii_name="hybridAndImplicitOptionsInput")
    def hybrid_and_implicit_options_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions]], jsii.get(self, "hybridAndImplicitOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="idpEntityIdInput")
    def idp_entity_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idpEntityIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameIdFormatInput")
    def name_id_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameIdFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="nameIdTransformJsonataInput")
    def name_id_transform_jsonata_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameIdTransformJsonataInput"))

    @builtins.property
    @jsii.member(jsii_name="redirectUrisInput")
    def redirect_uris_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "redirectUrisInput"))

    @builtins.property
    @jsii.member(jsii_name="refreshTokenOptionsInput")
    def refresh_token_options_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasAppRefreshTokenOptions"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "ZeroTrustAccessApplicationSaasAppRefreshTokenOptions"]], jsii.get(self, "refreshTokenOptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="samlAttributeTransformJsonataInput")
    def saml_attribute_transform_jsonata_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "samlAttributeTransformJsonataInput"))

    @builtins.property
    @jsii.member(jsii_name="scopesInput")
    def scopes_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "scopesInput"))

    @builtins.property
    @jsii.member(jsii_name="spEntityIdInput")
    def sp_entity_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "spEntityIdInput"))

    @builtins.property
    @jsii.member(jsii_name="ssoEndpointInput")
    def sso_endpoint_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ssoEndpointInput"))

    @builtins.property
    @jsii.member(jsii_name="accessTokenLifetime")
    def access_token_lifetime(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accessTokenLifetime"))

    @access_token_lifetime.setter
    def access_token_lifetime(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61fb0dce2094353bf862ac6932bf9a358d1d4f375d33d16593dca55a165db522)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accessTokenLifetime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="allowPkceWithoutClientSecret")
    def allow_pkce_without_client_secret(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "allowPkceWithoutClientSecret"))

    @allow_pkce_without_client_secret.setter
    def allow_pkce_without_client_secret(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2640f51230ba19fce15c46e2ca579ade81a67ca68c266692d4174e69fd3ca5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "allowPkceWithoutClientSecret", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="appLauncherUrl")
    def app_launcher_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "appLauncherUrl"))

    @app_launcher_url.setter
    def app_launcher_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11875e0247acdfcedf65d6a888a32e27757d31f852c7c7c8214f36bd0b3b1d70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appLauncherUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="authType")
    def auth_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "authType"))

    @auth_type.setter
    def auth_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b350e2f52aebbe4c357cf90efd09abbb3dd37db61e4bf714fefe6c1e6dd7b6f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "authType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="consumerServiceUrl")
    def consumer_service_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "consumerServiceUrl"))

    @consumer_service_url.setter
    def consumer_service_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01c732105ba0603af66f74ca876094fdeb8c6ba86f3ced4e967288ff0173389d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "consumerServiceUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="defaultRelayState")
    def default_relay_state(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "defaultRelayState"))

    @default_relay_state.setter
    def default_relay_state(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc4129f222924b86431073e40812a1aa6aa8aee21ea5cbcf64df4d58c8579b40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "defaultRelayState", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="grantTypes")
    def grant_types(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "grantTypes"))

    @grant_types.setter
    def grant_types(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__655028a2de9e44243e176070fd158b5821b08b9798d15c1be60d5eeead641b9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "grantTypes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="groupFilterRegex")
    def group_filter_regex(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "groupFilterRegex"))

    @group_filter_regex.setter
    def group_filter_regex(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__131893fce395bbcbb766470e23b5d8bc39b238559b280a60d56ba0f2f838ca9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "groupFilterRegex", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="idpEntityId")
    def idp_entity_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "idpEntityId"))

    @idp_entity_id.setter
    def idp_entity_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b43b191dd5654f156e1b74799440c636239523cba06237c1a451994b6ddc389)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "idpEntityId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nameIdFormat")
    def name_id_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameIdFormat"))

    @name_id_format.setter
    def name_id_format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51cacd17173b2abbb9ff19c26687b485dbc7fe5681ef84dd6fbbcdd5e24337b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameIdFormat", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nameIdTransformJsonata")
    def name_id_transform_jsonata(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameIdTransformJsonata"))

    @name_id_transform_jsonata.setter
    def name_id_transform_jsonata(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27cd0c18ac4021f516a3a8ef427725b25c2b20992909b7dbc96d1a9a84c7770d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameIdTransformJsonata", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="redirectUris")
    def redirect_uris(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "redirectUris"))

    @redirect_uris.setter
    def redirect_uris(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1d7290629a442ba66a60c36f59f78fd19ce6a87637af9f6ce09210a8fb1648b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "redirectUris", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="samlAttributeTransformJsonata")
    def saml_attribute_transform_jsonata(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "samlAttributeTransformJsonata"))

    @saml_attribute_transform_jsonata.setter
    def saml_attribute_transform_jsonata(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7243c8f3682d4a920b5ea40cdb982e43b5bdb0b7306a016a9e093f32e5eda7f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "samlAttributeTransformJsonata", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scopes")
    def scopes(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "scopes"))

    @scopes.setter
    def scopes(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5464e78b786e5658452e709a73cf8396eed6793e0e379a633c781a840745fe88)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scopes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="spEntityId")
    def sp_entity_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "spEntityId"))

    @sp_entity_id.setter
    def sp_entity_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aae5ccdf2561788d69742c6f9acb2ec59053a3e73d1d5f1f80aef0b9b5183235)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "spEntityId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ssoEndpoint")
    def sso_endpoint(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ssoEndpoint"))

    @sso_endpoint.setter
    def sso_endpoint(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51dfe1c6d5d73c6ad176e06f2fd92e237e0e34b8ca937ecaf7534f38b0ae5256)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ssoEndpoint", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasApp]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasApp]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasApp]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__218a8e2563fb056ab19958056423e2a894b1bd20729be4fc196ff028d0b23a6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppRefreshTokenOptions",
    jsii_struct_bases=[],
    name_mapping={"lifetime": "lifetime"},
)
class ZeroTrustAccessApplicationSaasAppRefreshTokenOptions:
    def __init__(self, *, lifetime: typing.Optional[builtins.str] = None) -> None:
        '''
        :param lifetime: How long a refresh token will be valid for after creation. Valid units are m,h,d. Must be longer than 1m. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#lifetime ZeroTrustAccessApplication#lifetime}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6490a881c3f568cc7886ac54fafbddda6b2e5baa040de68f6b2849b00d2638b7)
            check_type(argname="argument lifetime", value=lifetime, expected_type=type_hints["lifetime"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if lifetime is not None:
            self._values["lifetime"] = lifetime

    @builtins.property
    def lifetime(self) -> typing.Optional[builtins.str]:
        '''How long a refresh token will be valid for after creation.

        Valid units are m,h,d. Must be longer than 1m.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#lifetime ZeroTrustAccessApplication#lifetime}
        '''
        result = self._values.get("lifetime")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationSaasAppRefreshTokenOptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationSaasAppRefreshTokenOptionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationSaasAppRefreshTokenOptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7da90fd8d48103370542ab0093d7e08de04f63811ee1483e9df37e008ecfc1f3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetLifetime")
    def reset_lifetime(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLifetime", []))

    @builtins.property
    @jsii.member(jsii_name="lifetimeInput")
    def lifetime_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lifetimeInput"))

    @builtins.property
    @jsii.member(jsii_name="lifetime")
    def lifetime(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lifetime"))

    @lifetime.setter
    def lifetime(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44f37139bb87b9b512af5ec8019e31e5d12c9e94b872d3d3f4ee05bea7116ac9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lifetime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppRefreshTokenOptions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppRefreshTokenOptions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppRefreshTokenOptions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78f4df5778942d62a1fbffda7cf06c517d0fdd87b610a22b8fa5a9b68f4568f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfig",
    jsii_struct_bases=[],
    name_mapping={
        "idp_uid": "idpUid",
        "remote_uri": "remoteUri",
        "authentication": "authentication",
        "deactivate_on_delete": "deactivateOnDelete",
        "enabled": "enabled",
        "mappings": "mappings",
    },
)
class ZeroTrustAccessApplicationScimConfig:
    def __init__(
        self,
        *,
        idp_uid: builtins.str,
        remote_uri: builtins.str,
        authentication: typing.Optional[typing.Union["ZeroTrustAccessApplicationScimConfigAuthentication", typing.Dict[builtins.str, typing.Any]]] = None,
        deactivate_on_delete: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        mappings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["ZeroTrustAccessApplicationScimConfigMappings", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param idp_uid: The UID of the IdP to use as the source for SCIM resources to provision to this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_uid ZeroTrustAccessApplication#idp_uid}
        :param remote_uri: The base URI for the application's SCIM-compatible API. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#remote_uri ZeroTrustAccessApplication#remote_uri}
        :param authentication: Attributes for configuring HTTP Basic authentication scheme for SCIM provisioning to an application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#authentication ZeroTrustAccessApplication#authentication}
        :param deactivate_on_delete: If false, propagates DELETE requests to the target application for SCIM resources. If true, sets 'active' to false on the SCIM resource. Note: Some targets do not support DELETE operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#deactivate_on_delete ZeroTrustAccessApplication#deactivate_on_delete}
        :param enabled: Whether SCIM provisioning is turned on for this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enabled ZeroTrustAccessApplication#enabled}
        :param mappings: A list of mappings to apply to SCIM resources before provisioning them in this application. These can transform or filter the resources to be provisioned. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#mappings ZeroTrustAccessApplication#mappings}
        '''
        if isinstance(authentication, dict):
            authentication = ZeroTrustAccessApplicationScimConfigAuthentication(**authentication)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bed24ef6d590cd8e473af78f8b33f160fbe048226d28429cb8e2814bfd91eb53)
            check_type(argname="argument idp_uid", value=idp_uid, expected_type=type_hints["idp_uid"])
            check_type(argname="argument remote_uri", value=remote_uri, expected_type=type_hints["remote_uri"])
            check_type(argname="argument authentication", value=authentication, expected_type=type_hints["authentication"])
            check_type(argname="argument deactivate_on_delete", value=deactivate_on_delete, expected_type=type_hints["deactivate_on_delete"])
            check_type(argname="argument enabled", value=enabled, expected_type=type_hints["enabled"])
            check_type(argname="argument mappings", value=mappings, expected_type=type_hints["mappings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "idp_uid": idp_uid,
            "remote_uri": remote_uri,
        }
        if authentication is not None:
            self._values["authentication"] = authentication
        if deactivate_on_delete is not None:
            self._values["deactivate_on_delete"] = deactivate_on_delete
        if enabled is not None:
            self._values["enabled"] = enabled
        if mappings is not None:
            self._values["mappings"] = mappings

    @builtins.property
    def idp_uid(self) -> builtins.str:
        '''The UID of the IdP to use as the source for SCIM resources to provision to this application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#idp_uid ZeroTrustAccessApplication#idp_uid}
        '''
        result = self._values.get("idp_uid")
        assert result is not None, "Required property 'idp_uid' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def remote_uri(self) -> builtins.str:
        '''The base URI for the application's SCIM-compatible API.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#remote_uri ZeroTrustAccessApplication#remote_uri}
        '''
        result = self._values.get("remote_uri")
        assert result is not None, "Required property 'remote_uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def authentication(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationScimConfigAuthentication"]:
        '''Attributes for configuring HTTP Basic authentication scheme for SCIM provisioning to an application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#authentication ZeroTrustAccessApplication#authentication}
        '''
        result = self._values.get("authentication")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationScimConfigAuthentication"], result)

    @builtins.property
    def deactivate_on_delete(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''If false, propagates DELETE requests to the target application for SCIM resources.

        If true, sets 'active' to false on the SCIM resource. Note: Some targets do not support DELETE operations.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#deactivate_on_delete ZeroTrustAccessApplication#deactivate_on_delete}
        '''
        result = self._values.get("deactivate_on_delete")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether SCIM provisioning is turned on for this application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enabled ZeroTrustAccessApplication#enabled}
        '''
        result = self._values.get("enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def mappings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationScimConfigMappings"]]]:
        '''A list of mappings to apply to SCIM resources before provisioning them in this application.

        These can transform or filter the resources to be provisioned.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#mappings ZeroTrustAccessApplication#mappings}
        '''
        result = self._values.get("mappings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["ZeroTrustAccessApplicationScimConfigMappings"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationScimConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigAuthentication",
    jsii_struct_bases=[],
    name_mapping={
        "scheme": "scheme",
        "authorization_url": "authorizationUrl",
        "client_id": "clientId",
        "client_secret": "clientSecret",
        "password": "password",
        "scopes": "scopes",
        "token": "token",
        "token_url": "tokenUrl",
        "user": "user",
    },
)
class ZeroTrustAccessApplicationScimConfigAuthentication:
    def __init__(
        self,
        *,
        scheme: builtins.str,
        authorization_url: typing.Optional[builtins.str] = None,
        client_id: typing.Optional[builtins.str] = None,
        client_secret: typing.Optional[builtins.str] = None,
        password: typing.Optional[builtins.str] = None,
        scopes: typing.Optional[typing.Sequence[builtins.str]] = None,
        token: typing.Optional[builtins.str] = None,
        token_url: typing.Optional[builtins.str] = None,
        user: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param scheme: The authentication scheme to use when making SCIM requests to this application. Available values: "httpbasic", "oauthbearertoken", "oauth2", "access_service_token". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scheme ZeroTrustAccessApplication#scheme}
        :param authorization_url: URL used to generate the auth code used during token generation. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#authorization_url ZeroTrustAccessApplication#authorization_url}
        :param client_id: Client ID used to authenticate when generating a token for authenticating with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#client_id ZeroTrustAccessApplication#client_id}
        :param client_secret: Secret used to authenticate when generating a token for authenticating with the remove SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#client_secret ZeroTrustAccessApplication#client_secret}
        :param password: Password used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#password ZeroTrustAccessApplication#password}
        :param scopes: The authorization scopes to request when generating the token used to authenticate with the remove SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scopes ZeroTrustAccessApplication#scopes}
        :param token: Token used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token ZeroTrustAccessApplication#token}
        :param token_url: URL used to generate the token used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_url ZeroTrustAccessApplication#token_url}
        :param user: User name used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#user ZeroTrustAccessApplication#user}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59ecb6b1233c4fce4b268366016c523f851dd300b1747ce2599833d502464b7d)
            check_type(argname="argument scheme", value=scheme, expected_type=type_hints["scheme"])
            check_type(argname="argument authorization_url", value=authorization_url, expected_type=type_hints["authorization_url"])
            check_type(argname="argument client_id", value=client_id, expected_type=type_hints["client_id"])
            check_type(argname="argument client_secret", value=client_secret, expected_type=type_hints["client_secret"])
            check_type(argname="argument password", value=password, expected_type=type_hints["password"])
            check_type(argname="argument scopes", value=scopes, expected_type=type_hints["scopes"])
            check_type(argname="argument token", value=token, expected_type=type_hints["token"])
            check_type(argname="argument token_url", value=token_url, expected_type=type_hints["token_url"])
            check_type(argname="argument user", value=user, expected_type=type_hints["user"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "scheme": scheme,
        }
        if authorization_url is not None:
            self._values["authorization_url"] = authorization_url
        if client_id is not None:
            self._values["client_id"] = client_id
        if client_secret is not None:
            self._values["client_secret"] = client_secret
        if password is not None:
            self._values["password"] = password
        if scopes is not None:
            self._values["scopes"] = scopes
        if token is not None:
            self._values["token"] = token
        if token_url is not None:
            self._values["token_url"] = token_url
        if user is not None:
            self._values["user"] = user

    @builtins.property
    def scheme(self) -> builtins.str:
        '''The authentication scheme to use when making SCIM requests to this application. Available values: "httpbasic", "oauthbearertoken", "oauth2", "access_service_token".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scheme ZeroTrustAccessApplication#scheme}
        '''
        result = self._values.get("scheme")
        assert result is not None, "Required property 'scheme' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def authorization_url(self) -> typing.Optional[builtins.str]:
        '''URL used to generate the auth code used during token generation.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#authorization_url ZeroTrustAccessApplication#authorization_url}
        '''
        result = self._values.get("authorization_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def client_id(self) -> typing.Optional[builtins.str]:
        '''Client ID used to authenticate when generating a token for authenticating with the remote SCIM service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#client_id ZeroTrustAccessApplication#client_id}
        '''
        result = self._values.get("client_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def client_secret(self) -> typing.Optional[builtins.str]:
        '''Secret used to authenticate when generating a token for authenticating with the remove SCIM service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#client_secret ZeroTrustAccessApplication#client_secret}
        '''
        result = self._values.get("client_secret")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def password(self) -> typing.Optional[builtins.str]:
        '''Password used to authenticate with the remote SCIM service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#password ZeroTrustAccessApplication#password}
        '''
        result = self._values.get("password")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scopes(self) -> typing.Optional[typing.List[builtins.str]]:
        '''The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scopes ZeroTrustAccessApplication#scopes}
        '''
        result = self._values.get("scopes")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def token(self) -> typing.Optional[builtins.str]:
        '''Token used to authenticate with the remote SCIM service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token ZeroTrustAccessApplication#token}
        '''
        result = self._values.get("token")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def token_url(self) -> typing.Optional[builtins.str]:
        '''URL used to generate the token used to authenticate with the remote SCIM service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_url ZeroTrustAccessApplication#token_url}
        '''
        result = self._values.get("token_url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def user(self) -> typing.Optional[builtins.str]:
        '''User name used to authenticate with the remote SCIM service.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#user ZeroTrustAccessApplication#user}
        '''
        result = self._values.get("user")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationScimConfigAuthentication(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationScimConfigAuthenticationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigAuthenticationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2092e0de164ec969f7e9ddec8407a11451c0e89c4116013fc145501728612a58)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAuthorizationUrl")
    def reset_authorization_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthorizationUrl", []))

    @jsii.member(jsii_name="resetClientId")
    def reset_client_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetClientId", []))

    @jsii.member(jsii_name="resetClientSecret")
    def reset_client_secret(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetClientSecret", []))

    @jsii.member(jsii_name="resetPassword")
    def reset_password(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassword", []))

    @jsii.member(jsii_name="resetScopes")
    def reset_scopes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScopes", []))

    @jsii.member(jsii_name="resetToken")
    def reset_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetToken", []))

    @jsii.member(jsii_name="resetTokenUrl")
    def reset_token_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTokenUrl", []))

    @jsii.member(jsii_name="resetUser")
    def reset_user(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUser", []))

    @builtins.property
    @jsii.member(jsii_name="authorizationUrlInput")
    def authorization_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "authorizationUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="clientIdInput")
    def client_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "clientIdInput"))

    @builtins.property
    @jsii.member(jsii_name="clientSecretInput")
    def client_secret_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "clientSecretInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordInput")
    def password_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordInput"))

    @builtins.property
    @jsii.member(jsii_name="schemeInput")
    def scheme_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "schemeInput"))

    @builtins.property
    @jsii.member(jsii_name="scopesInput")
    def scopes_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "scopesInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenInput")
    def token_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tokenInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenUrlInput")
    def token_url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tokenUrlInput"))

    @builtins.property
    @jsii.member(jsii_name="userInput")
    def user_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "userInput"))

    @builtins.property
    @jsii.member(jsii_name="authorizationUrl")
    def authorization_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "authorizationUrl"))

    @authorization_url.setter
    def authorization_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__049351fa1f185a569f1e81166b431f043268cd038a8cc145170d821c864835db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "authorizationUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="clientId")
    def client_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "clientId"))

    @client_id.setter
    def client_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__750b8d1c095c9856fe85bbedee0b3499bad2b4291e9097dc8abe54902ef2c15e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "clientId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="clientSecret")
    def client_secret(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "clientSecret"))

    @client_secret.setter
    def client_secret(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc26828b8e083a8a2595bd485dbff30f965d4c5a0b0f07bb87106c8b960b99c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "clientSecret", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="password")
    def password(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "password"))

    @password.setter
    def password(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63ad05a822425dfb66907635ff1d89c311bfe6f43e728bd0a34d5b3a86d1cc7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "password", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scheme")
    def scheme(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scheme"))

    @scheme.setter
    def scheme(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cd5e83f101be05ab311d697646530558ceacc68e0724e87a80e690e1c537a0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scheme", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scopes")
    def scopes(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "scopes"))

    @scopes.setter
    def scopes(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1570f66ad7030069d7e29f3ff32d5adf89b72076ccbd99c7d721f7e395413db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scopes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="token")
    def token(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "token"))

    @token.setter
    def token(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__244f3f0a66f77d883bd43bb55d85fd3f7fde7079a5563a43b16600e49e9a3f07)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "token", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tokenUrl")
    def token_url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tokenUrl"))

    @token_url.setter
    def token_url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f34107877bdcc9ac6d4df827ffb6e8dfca11942720d52e60589eaa7af7d37da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tokenUrl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="user")
    def user(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "user"))

    @user.setter
    def user(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f7c7e20bcb9a12ecd78d646245a861c85aab173a15f94db57bf8c6520257bf3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "user", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigAuthentication]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigAuthentication]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigAuthentication]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f5e0f6b8dca149d03908fbbc7aada492af864e2312467a9a037556aaa339bff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigMappings",
    jsii_struct_bases=[],
    name_mapping={
        "schema": "schema",
        "enabled": "enabled",
        "filter": "filter",
        "operations": "operations",
        "strictness": "strictness",
        "transform_jsonata": "transformJsonata",
    },
)
class ZeroTrustAccessApplicationScimConfigMappings:
    def __init__(
        self,
        *,
        schema: builtins.str,
        enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        filter: typing.Optional[builtins.str] = None,
        operations: typing.Optional[typing.Union["ZeroTrustAccessApplicationScimConfigMappingsOperations", typing.Dict[builtins.str, typing.Any]]] = None,
        strictness: typing.Optional[builtins.str] = None,
        transform_jsonata: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param schema: Which SCIM resource type this mapping applies to. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#schema ZeroTrustAccessApplication#schema}
        :param enabled: Whether or not this mapping is enabled. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enabled ZeroTrustAccessApplication#enabled}
        :param filter: A `SCIM filter expression <https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.2>`_ that matches resources that should be provisioned to this application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#filter ZeroTrustAccessApplication#filter}
        :param operations: Whether or not this mapping applies to creates, updates, or deletes. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#operations ZeroTrustAccessApplication#operations}
        :param strictness: The level of adherence to outbound resource schemas when provisioning to this mapping. ‘Strict’ removes unknown values, while ‘passthrough’ passes unknown values to the target. Available values: "strict", "passthrough". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#strictness ZeroTrustAccessApplication#strictness}
        :param transform_jsonata: A `JSONata <https://jsonata.org/>`_ expression that transforms the resource before provisioning it in the application. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#transform_jsonata ZeroTrustAccessApplication#transform_jsonata}
        '''
        if isinstance(operations, dict):
            operations = ZeroTrustAccessApplicationScimConfigMappingsOperations(**operations)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02e429138f79298c45e0a4a980b4a1bc857a8c361b3b91254b9c314a97e8081a)
            check_type(argname="argument schema", value=schema, expected_type=type_hints["schema"])
            check_type(argname="argument enabled", value=enabled, expected_type=type_hints["enabled"])
            check_type(argname="argument filter", value=filter, expected_type=type_hints["filter"])
            check_type(argname="argument operations", value=operations, expected_type=type_hints["operations"])
            check_type(argname="argument strictness", value=strictness, expected_type=type_hints["strictness"])
            check_type(argname="argument transform_jsonata", value=transform_jsonata, expected_type=type_hints["transform_jsonata"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "schema": schema,
        }
        if enabled is not None:
            self._values["enabled"] = enabled
        if filter is not None:
            self._values["filter"] = filter
        if operations is not None:
            self._values["operations"] = operations
        if strictness is not None:
            self._values["strictness"] = strictness
        if transform_jsonata is not None:
            self._values["transform_jsonata"] = transform_jsonata

    @builtins.property
    def schema(self) -> builtins.str:
        '''Which SCIM resource type this mapping applies to.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#schema ZeroTrustAccessApplication#schema}
        '''
        result = self._values.get("schema")
        assert result is not None, "Required property 'schema' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether or not this mapping is enabled.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#enabled ZeroTrustAccessApplication#enabled}
        '''
        result = self._values.get("enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def filter(self) -> typing.Optional[builtins.str]:
        '''A `SCIM filter expression <https://datatracker.ietf.org/doc/html/rfc7644#section-3.4.2.2>`_ that matches resources that should be provisioned to this application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#filter ZeroTrustAccessApplication#filter}
        '''
        result = self._values.get("filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def operations(
        self,
    ) -> typing.Optional["ZeroTrustAccessApplicationScimConfigMappingsOperations"]:
        '''Whether or not this mapping applies to creates, updates, or deletes.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#operations ZeroTrustAccessApplication#operations}
        '''
        result = self._values.get("operations")
        return typing.cast(typing.Optional["ZeroTrustAccessApplicationScimConfigMappingsOperations"], result)

    @builtins.property
    def strictness(self) -> typing.Optional[builtins.str]:
        '''The level of adherence to outbound resource schemas when provisioning to this mapping.

        ‘Strict’ removes unknown values, while ‘passthrough’ passes unknown values to the target.
        Available values: "strict", "passthrough".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#strictness ZeroTrustAccessApplication#strictness}
        '''
        result = self._values.get("strictness")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def transform_jsonata(self) -> typing.Optional[builtins.str]:
        '''A `JSONata <https://jsonata.org/>`_ expression that transforms the resource before provisioning it in the application.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#transform_jsonata ZeroTrustAccessApplication#transform_jsonata}
        '''
        result = self._values.get("transform_jsonata")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationScimConfigMappings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationScimConfigMappingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigMappingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4982d85328e485577e71db6ca0ff28bd4d11ed103fe4e751b6865c29edf27b91)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationScimConfigMappingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c12d7ca795066c59b692ad4f51ed06da9a4bbfb1671bcfb9058abce1dbf166d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationScimConfigMappingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11722f82c822bd7d3852c62774d61090e29ff5c91dffd7de692dc798a6a6df8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6cda44f403d31af0b43b47ab683ca8fe0a9e2252e5b592cd2fdea6ba3c13297b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__282cc7e4bc2718f13142a71dc8796a2e16a73d45e66b1f4b5a4978083c5d69d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationScimConfigMappings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationScimConfigMappings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationScimConfigMappings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efd5e8b7a787876d92c35a2d24bc410013f73b0c55e8fc95ebd31c3eae5cbaf4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigMappingsOperations",
    jsii_struct_bases=[],
    name_mapping={"create": "create", "delete": "delete", "update": "update"},
)
class ZeroTrustAccessApplicationScimConfigMappingsOperations:
    def __init__(
        self,
        *,
        create: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        delete: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        update: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param create: Whether or not this mapping applies to create (POST) operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#create ZeroTrustAccessApplication#create}
        :param delete: Whether or not this mapping applies to DELETE operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#delete ZeroTrustAccessApplication#delete}
        :param update: Whether or not this mapping applies to update (PATCH/PUT) operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#update ZeroTrustAccessApplication#update}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a09fa54b88dde85f9223922abb1ad6ae627c2f2547b57da96c41a7bd6afac9a)
            check_type(argname="argument create", value=create, expected_type=type_hints["create"])
            check_type(argname="argument delete", value=delete, expected_type=type_hints["delete"])
            check_type(argname="argument update", value=update, expected_type=type_hints["update"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if create is not None:
            self._values["create"] = create
        if delete is not None:
            self._values["delete"] = delete
        if update is not None:
            self._values["update"] = update

    @builtins.property
    def create(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether or not this mapping applies to create (POST) operations.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#create ZeroTrustAccessApplication#create}
        '''
        result = self._values.get("create")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def delete(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether or not this mapping applies to DELETE operations.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#delete ZeroTrustAccessApplication#delete}
        '''
        result = self._values.get("delete")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def update(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Whether or not this mapping applies to update (PATCH/PUT) operations.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#update ZeroTrustAccessApplication#update}
        '''
        result = self._values.get("update")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationScimConfigMappingsOperations(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationScimConfigMappingsOperationsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigMappingsOperationsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ebe6e3c8fc9d4e2f3170ae5c2ceb74951b2955571764b4c82a0f6bb0ce4272f2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCreate")
    def reset_create(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCreate", []))

    @jsii.member(jsii_name="resetDelete")
    def reset_delete(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDelete", []))

    @jsii.member(jsii_name="resetUpdate")
    def reset_update(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUpdate", []))

    @builtins.property
    @jsii.member(jsii_name="createInput")
    def create_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "createInput"))

    @builtins.property
    @jsii.member(jsii_name="deleteInput")
    def delete_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "deleteInput"))

    @builtins.property
    @jsii.member(jsii_name="updateInput")
    def update_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "updateInput"))

    @builtins.property
    @jsii.member(jsii_name="create")
    def create(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "create"))

    @create.setter
    def create(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7d292edfba0d7e3b7a55cc8ace4108ac256e7b720216108aea5114f658c3273)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "create", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="delete")
    def delete(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "delete"))

    @delete.setter
    def delete(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__777ec6d891e7721b04e14edf7fa10e9f357be6ae8bb41f7940fadfc1ce53f997)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "delete", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="update")
    def update(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "update"))

    @update.setter
    def update(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7791b72a4522df28341aaf05fb9e6aedfb520b7fb2772b593fa73fcbeb257460)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "update", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappingsOperations]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappingsOperations]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappingsOperations]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa06f143a4b3a50d8cd11ef17f7e5fdd9d896da7bb6e6065b6233907d8a6cd4a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationScimConfigMappingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigMappingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b0cfbf2de00e251c5d618219bf8ae1c16eb631d3bcb73bdd800083e125a428f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putOperations")
    def put_operations(
        self,
        *,
        create: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        delete: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        update: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    ) -> None:
        '''
        :param create: Whether or not this mapping applies to create (POST) operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#create ZeroTrustAccessApplication#create}
        :param delete: Whether or not this mapping applies to DELETE operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#delete ZeroTrustAccessApplication#delete}
        :param update: Whether or not this mapping applies to update (PATCH/PUT) operations. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#update ZeroTrustAccessApplication#update}
        '''
        value = ZeroTrustAccessApplicationScimConfigMappingsOperations(
            create=create, delete=delete, update=update
        )

        return typing.cast(None, jsii.invoke(self, "putOperations", [value]))

    @jsii.member(jsii_name="resetEnabled")
    def reset_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnabled", []))

    @jsii.member(jsii_name="resetFilter")
    def reset_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilter", []))

    @jsii.member(jsii_name="resetOperations")
    def reset_operations(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOperations", []))

    @jsii.member(jsii_name="resetStrictness")
    def reset_strictness(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStrictness", []))

    @jsii.member(jsii_name="resetTransformJsonata")
    def reset_transform_jsonata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTransformJsonata", []))

    @builtins.property
    @jsii.member(jsii_name="operations")
    def operations(
        self,
    ) -> ZeroTrustAccessApplicationScimConfigMappingsOperationsOutputReference:
        return typing.cast(ZeroTrustAccessApplicationScimConfigMappingsOperationsOutputReference, jsii.get(self, "operations"))

    @builtins.property
    @jsii.member(jsii_name="enabledInput")
    def enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "enabledInput"))

    @builtins.property
    @jsii.member(jsii_name="filterInput")
    def filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "filterInput"))

    @builtins.property
    @jsii.member(jsii_name="operationsInput")
    def operations_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappingsOperations]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappingsOperations]], jsii.get(self, "operationsInput"))

    @builtins.property
    @jsii.member(jsii_name="schemaInput")
    def schema_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "schemaInput"))

    @builtins.property
    @jsii.member(jsii_name="strictnessInput")
    def strictness_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "strictnessInput"))

    @builtins.property
    @jsii.member(jsii_name="transformJsonataInput")
    def transform_jsonata_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "transformJsonataInput"))

    @builtins.property
    @jsii.member(jsii_name="enabled")
    def enabled(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "enabled"))

    @enabled.setter
    def enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4b72c81a9e5cff5cc95e524a0ca8dd864548c4e8e3eda50e28ff65f6724a3aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filter")
    def filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "filter"))

    @filter.setter
    def filter(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2230b039da2ffe3bcd776feb5c3f409fa81b60bfe83e319d38372684dff96b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filter", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="schema")
    def schema(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "schema"))

    @schema.setter
    def schema(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5215af50fc75a0e73ad843e3d866e7405d6025619b93538a5fc263322a27dc8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "schema", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="strictness")
    def strictness(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "strictness"))

    @strictness.setter
    def strictness(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17fbfb35f18e42455dcd9897ac76fe0a3795ed2ce09a0d173aee5c89c2302d04)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "strictness", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="transformJsonata")
    def transform_jsonata(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "transformJsonata"))

    @transform_jsonata.setter
    def transform_jsonata(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14b5dd75241fc8639d24bfc70cba7f606f40751b4614d1808cde1347beac7a94)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "transformJsonata", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57f597ea09f19a498bc840b2423b24294d1e2b77d4259d154703c170544b4578)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationScimConfigOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationScimConfigOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bd13586a1dd626fd8881187550aa6b978f5254d1731ed2e496df78824dc7bb3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAuthentication")
    def put_authentication(
        self,
        *,
        scheme: builtins.str,
        authorization_url: typing.Optional[builtins.str] = None,
        client_id: typing.Optional[builtins.str] = None,
        client_secret: typing.Optional[builtins.str] = None,
        password: typing.Optional[builtins.str] = None,
        scopes: typing.Optional[typing.Sequence[builtins.str]] = None,
        token: typing.Optional[builtins.str] = None,
        token_url: typing.Optional[builtins.str] = None,
        user: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param scheme: The authentication scheme to use when making SCIM requests to this application. Available values: "httpbasic", "oauthbearertoken", "oauth2", "access_service_token". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scheme ZeroTrustAccessApplication#scheme}
        :param authorization_url: URL used to generate the auth code used during token generation. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#authorization_url ZeroTrustAccessApplication#authorization_url}
        :param client_id: Client ID used to authenticate when generating a token for authenticating with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#client_id ZeroTrustAccessApplication#client_id}
        :param client_secret: Secret used to authenticate when generating a token for authenticating with the remove SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#client_secret ZeroTrustAccessApplication#client_secret}
        :param password: Password used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#password ZeroTrustAccessApplication#password}
        :param scopes: The authorization scopes to request when generating the token used to authenticate with the remove SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#scopes ZeroTrustAccessApplication#scopes}
        :param token: Token used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token ZeroTrustAccessApplication#token}
        :param token_url: URL used to generate the token used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#token_url ZeroTrustAccessApplication#token_url}
        :param user: User name used to authenticate with the remote SCIM service. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#user ZeroTrustAccessApplication#user}
        '''
        value = ZeroTrustAccessApplicationScimConfigAuthentication(
            scheme=scheme,
            authorization_url=authorization_url,
            client_id=client_id,
            client_secret=client_secret,
            password=password,
            scopes=scopes,
            token=token,
            token_url=token_url,
            user=user,
        )

        return typing.cast(None, jsii.invoke(self, "putAuthentication", [value]))

    @jsii.member(jsii_name="putMappings")
    def put_mappings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationScimConfigMappings, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac25c5d91f207d1d973db6b446851bef6fca92aad259cb2078316a20ee88afae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMappings", [value]))

    @jsii.member(jsii_name="resetAuthentication")
    def reset_authentication(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthentication", []))

    @jsii.member(jsii_name="resetDeactivateOnDelete")
    def reset_deactivate_on_delete(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDeactivateOnDelete", []))

    @jsii.member(jsii_name="resetEnabled")
    def reset_enabled(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEnabled", []))

    @jsii.member(jsii_name="resetMappings")
    def reset_mappings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMappings", []))

    @builtins.property
    @jsii.member(jsii_name="authentication")
    def authentication(
        self,
    ) -> ZeroTrustAccessApplicationScimConfigAuthenticationOutputReference:
        return typing.cast(ZeroTrustAccessApplicationScimConfigAuthenticationOutputReference, jsii.get(self, "authentication"))

    @builtins.property
    @jsii.member(jsii_name="mappings")
    def mappings(self) -> ZeroTrustAccessApplicationScimConfigMappingsList:
        return typing.cast(ZeroTrustAccessApplicationScimConfigMappingsList, jsii.get(self, "mappings"))

    @builtins.property
    @jsii.member(jsii_name="authenticationInput")
    def authentication_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigAuthentication]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigAuthentication]], jsii.get(self, "authenticationInput"))

    @builtins.property
    @jsii.member(jsii_name="deactivateOnDeleteInput")
    def deactivate_on_delete_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "deactivateOnDeleteInput"))

    @builtins.property
    @jsii.member(jsii_name="enabledInput")
    def enabled_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "enabledInput"))

    @builtins.property
    @jsii.member(jsii_name="idpUidInput")
    def idp_uid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idpUidInput"))

    @builtins.property
    @jsii.member(jsii_name="mappingsInput")
    def mappings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationScimConfigMappings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationScimConfigMappings]]], jsii.get(self, "mappingsInput"))

    @builtins.property
    @jsii.member(jsii_name="remoteUriInput")
    def remote_uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "remoteUriInput"))

    @builtins.property
    @jsii.member(jsii_name="deactivateOnDelete")
    def deactivate_on_delete(
        self,
    ) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "deactivateOnDelete"))

    @deactivate_on_delete.setter
    def deactivate_on_delete(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3775745e8c089fcfccac709b3db0b6f61040c230a03b3bc79d4ea941048a425f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "deactivateOnDelete", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="enabled")
    def enabled(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "enabled"))

    @enabled.setter
    def enabled(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e2aa79d0def243d84c4d4d28f66f98ec868452092917d912ff50c30f8d2a1e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enabled", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="idpUid")
    def idp_uid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "idpUid"))

    @idp_uid.setter
    def idp_uid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__574933f80f7d7da91678a2b3008b5465fe3e6e53188344329efa68ecfdc57ab2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "idpUid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="remoteUri")
    def remote_uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "remoteUri"))

    @remote_uri.setter
    def remote_uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5406d8f276e75d039963d97f7874f104345d19f82c913154fed37bd7d26b09f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "remoteUri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfig]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfig]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfig]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae2bc60a07a514931792b4078fe0dd4797301c6149d73dec0fd7e224ca0851a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationTargetCriteria",
    jsii_struct_bases=[],
    name_mapping={
        "port": "port",
        "protocol": "protocol",
        "target_attributes": "targetAttributes",
    },
)
class ZeroTrustAccessApplicationTargetCriteria:
    def __init__(
        self,
        *,
        port: jsii.Number,
        protocol: builtins.str,
        target_attributes: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.Sequence[builtins.str]]],
    ) -> None:
        '''
        :param port: The port that the targets use for the chosen communication protocol. A port cannot be assigned to multiple protocols. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#port ZeroTrustAccessApplication#port}
        :param protocol: The communication protocol your application secures. Available values: "SSH", "RDP". Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#protocol ZeroTrustAccessApplication#protocol}
        :param target_attributes: Contains a map of target attribute keys to target attribute values. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#target_attributes ZeroTrustAccessApplication#target_attributes}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86c5f95cc6144bb0d1e2e5b734e8baca1534d63b2e34e895e1b853b7e917b04f)
            check_type(argname="argument port", value=port, expected_type=type_hints["port"])
            check_type(argname="argument protocol", value=protocol, expected_type=type_hints["protocol"])
            check_type(argname="argument target_attributes", value=target_attributes, expected_type=type_hints["target_attributes"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "port": port,
            "protocol": protocol,
            "target_attributes": target_attributes,
        }

    @builtins.property
    def port(self) -> jsii.Number:
        '''The port that the targets use for the chosen communication protocol. A port cannot be assigned to multiple protocols.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#port ZeroTrustAccessApplication#port}
        '''
        result = self._values.get("port")
        assert result is not None, "Required property 'port' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def protocol(self) -> builtins.str:
        '''The communication protocol your application secures. Available values: "SSH", "RDP".

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#protocol ZeroTrustAccessApplication#protocol}
        '''
        result = self._values.get("protocol")
        assert result is not None, "Required property 'protocol' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def target_attributes(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]]:
        '''Contains a map of target attribute keys to target attribute values.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/cloudflare/cloudflare/5.11.0/docs/resources/zero_trust_access_application#target_attributes ZeroTrustAccessApplication#target_attributes}
        '''
        result = self._values.get("target_attributes")
        assert result is not None, "Required property 'target_attributes' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ZeroTrustAccessApplicationTargetCriteria(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class ZeroTrustAccessApplicationTargetCriteriaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationTargetCriteriaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62177dab3ece260cddeb67aecb9a95abbf1b75a041c89f358a177e6696e730bd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "ZeroTrustAccessApplicationTargetCriteriaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f548a3db067bc87929f0721b50f128734ba832335114838cd7e3cea9bdbdfa4a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("ZeroTrustAccessApplicationTargetCriteriaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5879327f1788ee3832554f02937a5491bec1fed9f83fab1be99628106ad6b2c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb5fc42c8ea5dbd0629bc52fc476332348ff87a76d5ef05168a623869698e127)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41a1af0605f409c28c193e0882c13cb4394d21bf12f82d78104e2de87cd83196)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationTargetCriteria]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationTargetCriteria]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationTargetCriteria]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ed3e2bfa0c87cd1fc44be7629b1f403fcee25c6adf7403c3d4119fb2b9703c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class ZeroTrustAccessApplicationTargetCriteriaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-cloudflare.zeroTrustAccessApplication.ZeroTrustAccessApplicationTargetCriteriaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c70c7a7d4564a84da124d02399b8a0c3ba64b0f1871bea49f2db0b2a41279567)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="portInput")
    def port_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "portInput"))

    @builtins.property
    @jsii.member(jsii_name="protocolInput")
    def protocol_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "protocolInput"))

    @builtins.property
    @jsii.member(jsii_name="targetAttributesInput")
    def target_attributes_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]]], jsii.get(self, "targetAttributesInput"))

    @builtins.property
    @jsii.member(jsii_name="port")
    def port(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "port"))

    @port.setter
    def port(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1641fb9b0840e77fea2869966a62fe0826f07b642ad3a16cf31cc6276e522a46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "port", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="protocol")
    def protocol(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "protocol"))

    @protocol.setter
    def protocol(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__958c0c954dc8468a737ed4baa12f7c419e2f09db7b3e152cce47471e08571229)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "protocol", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="targetAttributes")
    def target_attributes(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]]:
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]], jsii.get(self, "targetAttributes"))

    @target_attributes.setter
    def target_attributes(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18c7989bf132c9c7fb447ad343bbaeab36e8f2b89046fb8b08a4a2d412dcdadb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetAttributes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationTargetCriteria]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationTargetCriteria]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationTargetCriteria]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78a185ff462507fd4d2cbf7fac7c32d3e0537ff5260ae4069f0e9d867896d2b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


__all__ = [
    "ZeroTrustAccessApplication",
    "ZeroTrustAccessApplicationConfig",
    "ZeroTrustAccessApplicationCorsHeaders",
    "ZeroTrustAccessApplicationCorsHeadersOutputReference",
    "ZeroTrustAccessApplicationDestinations",
    "ZeroTrustAccessApplicationDestinationsList",
    "ZeroTrustAccessApplicationDestinationsOutputReference",
    "ZeroTrustAccessApplicationFooterLinks",
    "ZeroTrustAccessApplicationFooterLinksList",
    "ZeroTrustAccessApplicationFooterLinksOutputReference",
    "ZeroTrustAccessApplicationLandingPageDesign",
    "ZeroTrustAccessApplicationLandingPageDesignOutputReference",
    "ZeroTrustAccessApplicationPolicies",
    "ZeroTrustAccessApplicationPoliciesConnectionRules",
    "ZeroTrustAccessApplicationPoliciesConnectionRulesOutputReference",
    "ZeroTrustAccessApplicationPoliciesConnectionRulesSsh",
    "ZeroTrustAccessApplicationPoliciesConnectionRulesSshOutputReference",
    "ZeroTrustAccessApplicationPoliciesExclude",
    "ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken",
    "ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeAuthContext",
    "ZeroTrustAccessApplicationPoliciesExcludeAuthContextOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeAuthMethod",
    "ZeroTrustAccessApplicationPoliciesExcludeAuthMethodOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeAzureAd",
    "ZeroTrustAccessApplicationPoliciesExcludeAzureAdOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeCertificate",
    "ZeroTrustAccessApplicationPoliciesExcludeCertificateOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeCommonName",
    "ZeroTrustAccessApplicationPoliciesExcludeCommonNameOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeDevicePosture",
    "ZeroTrustAccessApplicationPoliciesExcludeDevicePostureOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeEmail",
    "ZeroTrustAccessApplicationPoliciesExcludeEmailDomain",
    "ZeroTrustAccessApplicationPoliciesExcludeEmailDomainOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct",
    "ZeroTrustAccessApplicationPoliciesExcludeEmailListStructOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeEmailOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeEveryone",
    "ZeroTrustAccessApplicationPoliciesExcludeEveryoneOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation",
    "ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluationOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeGeo",
    "ZeroTrustAccessApplicationPoliciesExcludeGeoOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization",
    "ZeroTrustAccessApplicationPoliciesExcludeGithubOrganizationOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeGroup",
    "ZeroTrustAccessApplicationPoliciesExcludeGroupOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeGsuite",
    "ZeroTrustAccessApplicationPoliciesExcludeGsuiteOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeIp",
    "ZeroTrustAccessApplicationPoliciesExcludeIpListStruct",
    "ZeroTrustAccessApplicationPoliciesExcludeIpListStructOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeIpOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken",
    "ZeroTrustAccessApplicationPoliciesExcludeLinkedAppTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeList",
    "ZeroTrustAccessApplicationPoliciesExcludeLoginMethod",
    "ZeroTrustAccessApplicationPoliciesExcludeLoginMethodOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeOidc",
    "ZeroTrustAccessApplicationPoliciesExcludeOidcOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeOkta",
    "ZeroTrustAccessApplicationPoliciesExcludeOktaOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeSaml",
    "ZeroTrustAccessApplicationPoliciesExcludeSamlOutputReference",
    "ZeroTrustAccessApplicationPoliciesExcludeServiceToken",
    "ZeroTrustAccessApplicationPoliciesExcludeServiceTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesInclude",
    "ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken",
    "ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeAuthContext",
    "ZeroTrustAccessApplicationPoliciesIncludeAuthContextOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeAuthMethod",
    "ZeroTrustAccessApplicationPoliciesIncludeAuthMethodOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeAzureAd",
    "ZeroTrustAccessApplicationPoliciesIncludeAzureAdOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeCertificate",
    "ZeroTrustAccessApplicationPoliciesIncludeCertificateOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeCommonName",
    "ZeroTrustAccessApplicationPoliciesIncludeCommonNameOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeDevicePosture",
    "ZeroTrustAccessApplicationPoliciesIncludeDevicePostureOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeEmail",
    "ZeroTrustAccessApplicationPoliciesIncludeEmailDomain",
    "ZeroTrustAccessApplicationPoliciesIncludeEmailDomainOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct",
    "ZeroTrustAccessApplicationPoliciesIncludeEmailListStructOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeEmailOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeEveryone",
    "ZeroTrustAccessApplicationPoliciesIncludeEveryoneOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation",
    "ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluationOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeGeo",
    "ZeroTrustAccessApplicationPoliciesIncludeGeoOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization",
    "ZeroTrustAccessApplicationPoliciesIncludeGithubOrganizationOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeGroup",
    "ZeroTrustAccessApplicationPoliciesIncludeGroupOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeGsuite",
    "ZeroTrustAccessApplicationPoliciesIncludeGsuiteOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeIp",
    "ZeroTrustAccessApplicationPoliciesIncludeIpListStruct",
    "ZeroTrustAccessApplicationPoliciesIncludeIpListStructOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeIpOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken",
    "ZeroTrustAccessApplicationPoliciesIncludeLinkedAppTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeList",
    "ZeroTrustAccessApplicationPoliciesIncludeLoginMethod",
    "ZeroTrustAccessApplicationPoliciesIncludeLoginMethodOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeOidc",
    "ZeroTrustAccessApplicationPoliciesIncludeOidcOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeOkta",
    "ZeroTrustAccessApplicationPoliciesIncludeOktaOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeSaml",
    "ZeroTrustAccessApplicationPoliciesIncludeSamlOutputReference",
    "ZeroTrustAccessApplicationPoliciesIncludeServiceToken",
    "ZeroTrustAccessApplicationPoliciesIncludeServiceTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesList",
    "ZeroTrustAccessApplicationPoliciesOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequire",
    "ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken",
    "ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireAuthContext",
    "ZeroTrustAccessApplicationPoliciesRequireAuthContextOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireAuthMethod",
    "ZeroTrustAccessApplicationPoliciesRequireAuthMethodOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireAzureAd",
    "ZeroTrustAccessApplicationPoliciesRequireAzureAdOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireCertificate",
    "ZeroTrustAccessApplicationPoliciesRequireCertificateOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireCommonName",
    "ZeroTrustAccessApplicationPoliciesRequireCommonNameOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireDevicePosture",
    "ZeroTrustAccessApplicationPoliciesRequireDevicePostureOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireEmail",
    "ZeroTrustAccessApplicationPoliciesRequireEmailDomain",
    "ZeroTrustAccessApplicationPoliciesRequireEmailDomainOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireEmailListStruct",
    "ZeroTrustAccessApplicationPoliciesRequireEmailListStructOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireEmailOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireEveryone",
    "ZeroTrustAccessApplicationPoliciesRequireEveryoneOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation",
    "ZeroTrustAccessApplicationPoliciesRequireExternalEvaluationOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireGeo",
    "ZeroTrustAccessApplicationPoliciesRequireGeoOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireGithubOrganization",
    "ZeroTrustAccessApplicationPoliciesRequireGithubOrganizationOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireGroup",
    "ZeroTrustAccessApplicationPoliciesRequireGroupOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireGsuite",
    "ZeroTrustAccessApplicationPoliciesRequireGsuiteOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireIp",
    "ZeroTrustAccessApplicationPoliciesRequireIpListStruct",
    "ZeroTrustAccessApplicationPoliciesRequireIpListStructOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireIpOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken",
    "ZeroTrustAccessApplicationPoliciesRequireLinkedAppTokenOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireList",
    "ZeroTrustAccessApplicationPoliciesRequireLoginMethod",
    "ZeroTrustAccessApplicationPoliciesRequireLoginMethodOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireOidc",
    "ZeroTrustAccessApplicationPoliciesRequireOidcOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireOkta",
    "ZeroTrustAccessApplicationPoliciesRequireOktaOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireSaml",
    "ZeroTrustAccessApplicationPoliciesRequireSamlOutputReference",
    "ZeroTrustAccessApplicationPoliciesRequireServiceToken",
    "ZeroTrustAccessApplicationPoliciesRequireServiceTokenOutputReference",
    "ZeroTrustAccessApplicationSaasApp",
    "ZeroTrustAccessApplicationSaasAppCustomAttributes",
    "ZeroTrustAccessApplicationSaasAppCustomAttributesList",
    "ZeroTrustAccessApplicationSaasAppCustomAttributesOutputReference",
    "ZeroTrustAccessApplicationSaasAppCustomAttributesSource",
    "ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp",
    "ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpList",
    "ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdpOutputReference",
    "ZeroTrustAccessApplicationSaasAppCustomAttributesSourceOutputReference",
    "ZeroTrustAccessApplicationSaasAppCustomClaims",
    "ZeroTrustAccessApplicationSaasAppCustomClaimsList",
    "ZeroTrustAccessApplicationSaasAppCustomClaimsOutputReference",
    "ZeroTrustAccessApplicationSaasAppCustomClaimsSource",
    "ZeroTrustAccessApplicationSaasAppCustomClaimsSourceOutputReference",
    "ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions",
    "ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptionsOutputReference",
    "ZeroTrustAccessApplicationSaasAppOutputReference",
    "ZeroTrustAccessApplicationSaasAppRefreshTokenOptions",
    "ZeroTrustAccessApplicationSaasAppRefreshTokenOptionsOutputReference",
    "ZeroTrustAccessApplicationScimConfig",
    "ZeroTrustAccessApplicationScimConfigAuthentication",
    "ZeroTrustAccessApplicationScimConfigAuthenticationOutputReference",
    "ZeroTrustAccessApplicationScimConfigMappings",
    "ZeroTrustAccessApplicationScimConfigMappingsList",
    "ZeroTrustAccessApplicationScimConfigMappingsOperations",
    "ZeroTrustAccessApplicationScimConfigMappingsOperationsOutputReference",
    "ZeroTrustAccessApplicationScimConfigMappingsOutputReference",
    "ZeroTrustAccessApplicationScimConfigOutputReference",
    "ZeroTrustAccessApplicationTargetCriteria",
    "ZeroTrustAccessApplicationTargetCriteriaList",
    "ZeroTrustAccessApplicationTargetCriteriaOutputReference",
]

publication.publish()

def _typecheckingstub__27338aeeecd2e31c5778c77e6b90d648344d66ce330b5d2a91fa9403173c8b94(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    account_id: typing.Optional[builtins.str] = None,
    allow_authenticate_via_warp: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    allowed_idps: typing.Optional[typing.Sequence[builtins.str]] = None,
    allow_iframe: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    app_launcher_logo_url: typing.Optional[builtins.str] = None,
    app_launcher_visible: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    auto_redirect_to_identity: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    bg_color: typing.Optional[builtins.str] = None,
    cors_headers: typing.Optional[typing.Union[ZeroTrustAccessApplicationCorsHeaders, typing.Dict[builtins.str, typing.Any]]] = None,
    custom_deny_message: typing.Optional[builtins.str] = None,
    custom_deny_url: typing.Optional[builtins.str] = None,
    custom_non_identity_deny_url: typing.Optional[builtins.str] = None,
    custom_pages: typing.Optional[typing.Sequence[builtins.str]] = None,
    destinations: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationDestinations, typing.Dict[builtins.str, typing.Any]]]]] = None,
    domain: typing.Optional[builtins.str] = None,
    enable_binding_cookie: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    footer_links: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationFooterLinks, typing.Dict[builtins.str, typing.Any]]]]] = None,
    header_bg_color: typing.Optional[builtins.str] = None,
    http_only_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    landing_page_design: typing.Optional[typing.Union[ZeroTrustAccessApplicationLandingPageDesign, typing.Dict[builtins.str, typing.Any]]] = None,
    logo_url: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    options_preflight_bypass: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    path_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    policies: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPolicies, typing.Dict[builtins.str, typing.Any]]]]] = None,
    read_service_tokens_from_header: typing.Optional[builtins.str] = None,
    saas_app: typing.Optional[typing.Union[ZeroTrustAccessApplicationSaasApp, typing.Dict[builtins.str, typing.Any]]] = None,
    same_site_cookie_attribute: typing.Optional[builtins.str] = None,
    scim_config: typing.Optional[typing.Union[ZeroTrustAccessApplicationScimConfig, typing.Dict[builtins.str, typing.Any]]] = None,
    self_hosted_domains: typing.Optional[typing.Sequence[builtins.str]] = None,
    service_auth401_redirect: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    session_duration: typing.Optional[builtins.str] = None,
    skip_app_launcher_login_page: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    skip_interstitial: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    tags: typing.Optional[typing.Sequence[builtins.str]] = None,
    target_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationTargetCriteria, typing.Dict[builtins.str, typing.Any]]]]] = None,
    type: typing.Optional[builtins.str] = None,
    zone_id: typing.Optional[builtins.str] = None,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28aed9d1c8ee78428e088d71f6579e3d02e4f30fb17461e201068a0829c6d553(
    scope: _constructs_77d1e7e8.Construct,
    import_to_id: builtins.str,
    import_from_id: builtins.str,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a01e38fa3f74cc489795b06ff4df8da8c34523777fc462714c8fd0a21c8e3e4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationDestinations, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e69b01b6350443f6fa14a95caa04e5b39c3826cfbbbc0be0bb475a2a02a6225e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationFooterLinks, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__194677b21ed4e92b3e7408e1a7875869dec0206458f602f448d925daee04060e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPolicies, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29efcca397269d22b3a8f8f3a86f3abb19cd0dbf9186b3d59feb062d1fc06075(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationTargetCriteria, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fec731061956ee4a6f8bb3a95fbebdcd6aaf64c49f851492c2b536b1eddd1f98(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f3c1cb91eeae56a8cf2cc59bdb6b2795ccad015bd24206d07e0951f56c89636(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be64e8ac39fca2dd2500aa0b54d299e1bc29de142d2d4612f9e17af4b10799f2(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7334ecc025d6f77295c66eb2206bef9f447e4e2e7f625cf2449b600c010a4e62(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1457a5e561e09d35265af36cf5ca06925dc1dce9801441f692b1fb3fd3b320ef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01d7c21a4a8c8ab0de0d7f1ecc46004dcf0662e0a2cc335f5267670f1f64525c(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1b2c9f95fc566b2f077f059a82d95b631ad2429361b9dba2a2ed2694ebf6854(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eff301b82f24f646a2cb5ef99ea6a32ce4f9c04cdbb27a5d4ada20b67d4f5eaa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d47019a4be708eb71f0f058e0eede1241f8158b762556db853df184499ea6ff3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20e27c1cb8a4167f8e04ac0d6c18ada8a4b250b5de4ca6f3c845385a23be8379(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a3a3d032f0b868b35c26301c384de6a32873fbeb250a3f3294135e8f80a7f31(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08aca6db6ca2d706006c7c12a3dc79270cee71da8486e494cb688f27442e4f73(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc8004de509defca4d78cf6a2555915db9666893c72c10c436cf77de1e893ba1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a765eff579c85806c83ac9f1fa443520c9cfcb800a0081b0516ce1f5af65fe8e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fee4e1351d0024499a383aab5b228a41a8b6d5c815456c021b3f24d0b3adf498(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a234bcc12ea03ebba0a2fd2beb7c5da757daf1a34e5f0f7d655bad92a3ee2425(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec0d042e7fb8029cf39fd64da67feaaaabb16a462aa84e0da680533bb09db1bb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27cb26c3ba6e995d5381c8693e2f4791dc952dcf01b159b9dd90e528177d7233(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0fb9aa9809673e3b121460e152319e7a1aabe343c83038d99e1a9389706fdd34(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f143cdb6f19430965d2794fd1a0dfac6b459844d30ba2637d0dc513f8c1eb0d(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b5d14b7a1fb10a993490e5fe443399904006abfcfc067e9c828867c4a24ed17(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cead96487ecf56f324721527887db96515004eafe6e4934b0218556799b20014(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7027add4c94ff5c6e1d9d981891a6e2d08756603689c68714f7ab199c29667f8(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__018e0e147bf616117e34644ac9fc785c3537999f64d5e9d3d0af55c0e91db961(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0735f107a1bad1083eaf92196f572661daa359b0ad1c704fef6dee2068d97a1c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__895090706d57872884433315cbdbc3cc94643221d625c7ff51d8c73fa56f70db(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d96622f0d48fee60151148031537f7ae6703fa09d88913fc82a3c8e50b291e7(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6871878039e238faffb7567ecb3ee909e5a3840597f72ad141e4abcf93aa1ce6(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__195de0e3b7b7a39255d38a862a353bf9e4ae6f9519c29c520e71e02578a424ce(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36279d7f822e7c4fc42a6f41cadc4da245c4c9c778ac045de3186657c462b46b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e1279db324fed64f313ac2ca6fb2cb06c24a138a471a8e0566ec470159c6fbf(
    *,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    account_id: typing.Optional[builtins.str] = None,
    allow_authenticate_via_warp: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    allowed_idps: typing.Optional[typing.Sequence[builtins.str]] = None,
    allow_iframe: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    app_launcher_logo_url: typing.Optional[builtins.str] = None,
    app_launcher_visible: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    auto_redirect_to_identity: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    bg_color: typing.Optional[builtins.str] = None,
    cors_headers: typing.Optional[typing.Union[ZeroTrustAccessApplicationCorsHeaders, typing.Dict[builtins.str, typing.Any]]] = None,
    custom_deny_message: typing.Optional[builtins.str] = None,
    custom_deny_url: typing.Optional[builtins.str] = None,
    custom_non_identity_deny_url: typing.Optional[builtins.str] = None,
    custom_pages: typing.Optional[typing.Sequence[builtins.str]] = None,
    destinations: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationDestinations, typing.Dict[builtins.str, typing.Any]]]]] = None,
    domain: typing.Optional[builtins.str] = None,
    enable_binding_cookie: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    footer_links: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationFooterLinks, typing.Dict[builtins.str, typing.Any]]]]] = None,
    header_bg_color: typing.Optional[builtins.str] = None,
    http_only_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    landing_page_design: typing.Optional[typing.Union[ZeroTrustAccessApplicationLandingPageDesign, typing.Dict[builtins.str, typing.Any]]] = None,
    logo_url: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    options_preflight_bypass: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    path_cookie_attribute: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    policies: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPolicies, typing.Dict[builtins.str, typing.Any]]]]] = None,
    read_service_tokens_from_header: typing.Optional[builtins.str] = None,
    saas_app: typing.Optional[typing.Union[ZeroTrustAccessApplicationSaasApp, typing.Dict[builtins.str, typing.Any]]] = None,
    same_site_cookie_attribute: typing.Optional[builtins.str] = None,
    scim_config: typing.Optional[typing.Union[ZeroTrustAccessApplicationScimConfig, typing.Dict[builtins.str, typing.Any]]] = None,
    self_hosted_domains: typing.Optional[typing.Sequence[builtins.str]] = None,
    service_auth401_redirect: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    session_duration: typing.Optional[builtins.str] = None,
    skip_app_launcher_login_page: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    skip_interstitial: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    tags: typing.Optional[typing.Sequence[builtins.str]] = None,
    target_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationTargetCriteria, typing.Dict[builtins.str, typing.Any]]]]] = None,
    type: typing.Optional[builtins.str] = None,
    zone_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__570d0baa177c6afcf552d1711ba79b01b6b8b310579c5b73ce48b2f5f08ca83a(
    *,
    allow_all_headers: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    allow_all_methods: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    allow_all_origins: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    allow_credentials: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    allowed_headers: typing.Optional[typing.Sequence[builtins.str]] = None,
    allowed_methods: typing.Optional[typing.Sequence[builtins.str]] = None,
    allowed_origins: typing.Optional[typing.Sequence[builtins.str]] = None,
    max_age: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fcf1fe95da2b6031991ead48569fbb9ff00b03afd00e3214e3d20386a992210(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34d0a09ee60d1b08c6963232e100c6ceaaede5c0ef39009732582d935fc1e905(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d135a36b855dfbbbf40a911ff12cf0577ed83002a7a7cee84aa8c13c23cb8f8e(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c840a4753ace2f1e243c60b9916c5df15c9d7246abf3c6895676d0a316420c02(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8009166033a2928de4ebc21edad17423ddc0e0deebedab0af8c4dfc5fb83381(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__082f53f30671b16288afc1a9ad26c542a9b393e4541acc8b87918982ce0310ed(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef529e72178495b6c43ebe1f695b2cae1293867b0f0c9fff9215f1082c95435a(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__933b2162a14fe720dc097500c299b6154310fffaa61cea5569bb901b681e85b8(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca16c2a986f7382e78a17fb496bd86538fd3ee1d9a8475ec1ff814259a785797(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ad0e91b7680ac85eae84c174e10132dc780ef53bf867a5ccffdfc73790cd36e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationCorsHeaders]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb53f29245a8f4afef45363f780ecbc61eec9157bc84ce5d2838e235e17fc873(
    *,
    cidr: typing.Optional[builtins.str] = None,
    hostname: typing.Optional[builtins.str] = None,
    l4_protocol: typing.Optional[builtins.str] = None,
    port_range: typing.Optional[builtins.str] = None,
    type: typing.Optional[builtins.str] = None,
    uri: typing.Optional[builtins.str] = None,
    vnet_id: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8168d79a8693c9a4e11c3b5ac3ec9eba59f7a61ff41ef15d1510416071392301(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9eb9842149a5ba31f0c7bb7a4bc2efc080e3f3c9bf4f718ec8bbd9987bf4badc(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c416ede1a70be4b7cef8f1721172a05250854cca34377c9007f895313c8fbaa2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bbbb8d8255fcf87cb4069296b24e7fdb52c6606b44ac92d6c62f69fcca0ddb3c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23f4dd46e14736abe9c77407eda1be11e2e0e38d575e78aea951685bc2c365dc(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a22c25c82c26ed7b257b2d03476a3fbd8bb5dd8bab445155b2691eb44afde5ea(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationDestinations]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cad05bb67450b8cea2997f05d67e7950ddb7245da376758e1e76342421594589(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30477d448728edc2c88ced84d5ce7a8731fd4e2fc97baa06ff1ff02b23efe0a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__653b85ad251783a077dbe5b716d563e7082a7031a6f0e6a1630ca1898b9ec06c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69b7deb042d6c2cd280fdd761e9dc882cb05b4afbbf8e9cfbbbc736eb926cb14(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01f9144aa9987f7b94a367816d754ed8462e51be81d6bdbbe06880f4745a2c70(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d3f7e0e5261b28be35a0e20320948333c43ca52eec412f6d1ab534347d28b7e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__642515c81cebe22a173f73f35c34adb39b6ef57f7f0a66229da0ebaf09d59131(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__376a01733d244dd5341d6e082a4763bbdd0de1ed923f63c46fcdb8a751e0ea51(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4905a20cb306991e008eaa738934cdef4f96e362a5886068f6f65d016dd335f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationDestinations]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c33de202b3d83c54564f055486a5738ad842797dede2aa86d887444a9647d0ff(
    *,
    name: builtins.str,
    url: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ce73644e02d48e6eb68a59282e83ae003bd1ced90461a5197c95a65e17da3d0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abf2e1a33ba6a3d6ec819c36230d12610454e30c60a713b341411d823ba23192(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5e51e2383e0ec4f8292d683b26b6b451e152ad08ddd5747991e2b6d0d4e4924(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c62edec9276ba061132ebfc6eb52acd5e6ab14a44cf072735b27a81bc4debbf(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e4c4c388a572055d945d7eede9097569a3ea099aaaad53f249b82ede4ac509c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0bc629578b246ab1a8885978399933d192377d2ba319a4f0ec7757ef9614f62(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationFooterLinks]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46d21bc58a76579810293c6ae93bcda284e56e65f8c609faaeed6b3ca3b2aa86(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38a6aea00285b792ec70c175c5fae0a1a784246695e5eb80558a8a979b66d634(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9137cb5922c257b75cacc27a6774aad64820e641abcc311e7064f16d43af3060(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e32afdbdbe0dee00528ada5be0b893b76024e13f0273e8adeff1fc2019313703(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationFooterLinks]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8926bc90faf274b6c685bf7e4c7c54a0f88e4ee4cf30cf581bdcd7feb90d772e(
    *,
    button_color: typing.Optional[builtins.str] = None,
    button_text_color: typing.Optional[builtins.str] = None,
    image_url: typing.Optional[builtins.str] = None,
    message: typing.Optional[builtins.str] = None,
    title: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__469f1fb2458e3a0a89654ebf80a766ab780607f746e831ffede7d84c08f114c8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1b6c4ec3f0d549f31041f7cffde66753d6dd27e2c8402c72ae14d81be888644(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcb3e7b45304465a72f40624ad5f08515f2fc0e3094853ae561807b34af88af7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db4a91aee042f486c785ac2b6ec48e8a41bb11997c1cc07c7e40daafea05495d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b631466d7f511cd30ae0b7ee0fd957a686eb7d41596b8b527d6dfffc112b7994(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5658ce331fa05e1720564dc64cad97c9859e052f5db692bd7949bb1bfda86ff6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e44de85cfb941b73aa477ef6a25f8ff6ec66c03a22228165cede093b7715b5a3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationLandingPageDesign]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5276b0f28ab5a6ee2a8b99704f49ff6ab4844f1fdd2533d77c601f1922025a3e(
    *,
    connection_rules: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesConnectionRules, typing.Dict[builtins.str, typing.Any]]] = None,
    decision: typing.Optional[builtins.str] = None,
    exclude: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesExclude, typing.Dict[builtins.str, typing.Any]]]]] = None,
    id: typing.Optional[builtins.str] = None,
    include: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesInclude, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[builtins.str] = None,
    precedence: typing.Optional[jsii.Number] = None,
    require: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesRequire, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4253de3b0ff9485e25a1b005290537c65349468493ed1a9c9f09a9ef85aa430e(
    *,
    ssh: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesConnectionRulesSsh, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5e7e6fcad5e55e48c92a541e0c8016014f113689a293b3b35a76670005e05cf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d8d2a29605df7d19f344f79ee0a738ea474f649d403a5e8167b47e5b157b9b4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRules]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c73696d46c589c6fd5b1d1a2682d61b18c06d25569d37f3e76233cf6cfb3c34(
    *,
    usernames: typing.Sequence[builtins.str],
    allow_email_alias: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13b69ffa0447a7fd2135e32ab3086e3bf1d86ed6b0de6772e3f5b769defd2efc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__088d894d1494d67c327e9409d3741c91ecaf9883010043d0f491946acebb53f6(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c54f193166537adf45f1a1659ac85a928756b9b45c590ee5b688d7880640611(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__102491df16bcf12a3e18f6859b8696cbebd45e2098d5168fa54ffb505d684a3d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesConnectionRulesSsh]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__793bde42e2ceeb4906d2deffda990f027c4aa038e8e5e7d1e48f2f4fe16f5e6e(
    *,
    any_valid_service_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken, typing.Dict[builtins.str, typing.Any]]] = None,
    auth_context: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeAuthContext, typing.Dict[builtins.str, typing.Any]]] = None,
    auth_method: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeAuthMethod, typing.Dict[builtins.str, typing.Any]]] = None,
    azure_ad: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeAzureAd, typing.Dict[builtins.str, typing.Any]]] = None,
    certificate: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeCertificate, typing.Dict[builtins.str, typing.Any]]] = None,
    common_name: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeCommonName, typing.Dict[builtins.str, typing.Any]]] = None,
    device_posture: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeDevicePosture, typing.Dict[builtins.str, typing.Any]]] = None,
    email: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeEmail, typing.Dict[builtins.str, typing.Any]]] = None,
    email_domain: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeEmailDomain, typing.Dict[builtins.str, typing.Any]]] = None,
    email_list: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct, typing.Dict[builtins.str, typing.Any]]] = None,
    everyone: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeEveryone, typing.Dict[builtins.str, typing.Any]]] = None,
    external_evaluation: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation, typing.Dict[builtins.str, typing.Any]]] = None,
    geo: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeGeo, typing.Dict[builtins.str, typing.Any]]] = None,
    github_organization: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization, typing.Dict[builtins.str, typing.Any]]] = None,
    group: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeGroup, typing.Dict[builtins.str, typing.Any]]] = None,
    gsuite: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeGsuite, typing.Dict[builtins.str, typing.Any]]] = None,
    ip: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeIp, typing.Dict[builtins.str, typing.Any]]] = None,
    ip_list: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeIpListStruct, typing.Dict[builtins.str, typing.Any]]] = None,
    linked_app_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken, typing.Dict[builtins.str, typing.Any]]] = None,
    login_method: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeLoginMethod, typing.Dict[builtins.str, typing.Any]]] = None,
    oidc: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeOidc, typing.Dict[builtins.str, typing.Any]]] = None,
    okta: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeOkta, typing.Dict[builtins.str, typing.Any]]] = None,
    saml: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeSaml, typing.Dict[builtins.str, typing.Any]]] = None,
    service_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesExcludeServiceToken, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37f2023f7eede5092be5108c267eca4fdc12977975dd6c316572a07294d39a06(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e825c17c8c02c5f9b91fce07be4352568e2cde54e9b128b8d45396bf4377a1d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAnyValidServiceToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4ad21cc6b73f9437c8daee4674f07177cb68ff8569f01f709081fbdd8c7280e(
    *,
    ac_id: builtins.str,
    id: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__310f6f6ad85b913807091aad3409116b097e1881088c4684e879629a6411971d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d49944abd3f66f688b7037b44191afa7fe6e937073ab7ab2d7604c9b2bb6159a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0bfde0a35151add4768776f944c1a4255d4c7e2b5984c2c72cba37b8955ef858(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ccea4b14e064a8e7a31df730c3e3f7b27b5bdeb2d3cae842e1c020081ac4075(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41f9e5c1458fd91a0a9fbc5d5c5eb865ba941d45b232d4e1981699c4bf393337(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthContext]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9825c8b349d37176e736548741d8b95c2e2d99ff3138c830085b3db6fb3940d(
    *,
    auth_method: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3fe0335045befb11ad71f6d89c9065293334fc5fe8d21e4cb430b058271ffda(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c136d0c334c4123cc0934dbbf62b5dd2dac95da2f90a8e62892851b9553649ba(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdaf296678c6c41f2be71984a13c183ac585938546a66c886904b098d2a225f6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAuthMethod]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__484a0d7c0e63c0557bca0cc137e2aa9a986df370a6df76ad677fa97190227669(
    *,
    id: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__968e6633134ded924ef56415976fbcee5a064e785ccdc68db37c5691b331793e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48b8ab10ed3e98d53e881377095df2af2f2ff937428cd74d19a72c3482f1a76f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d02c863f58b23174bc12e8f5aad0c35a4bcc51545647fc20bca6f2422e37f212(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1c9eba95fcbd18259edcc7acb0033792af4506a425579f5a3efc61ca8f445e2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeAzureAd]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc0cd8c513c9060f37ce2832fe2a94a2c1d8bc7d7d24b423ae1c731dd30f5b99(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0933c46b5118f10446e15ca302985e330c1f657aafe9ca87ac9c2c88f68ee2ab(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCertificate]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b2d4bfa7b132dc517e789f7b2fe97474d9a0da73d243cc6369eec7f7acff39a(
    *,
    common_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17a6f5ff011f90927dafe4d15c975d4c6b0269763045c522140a9fd5c6697f02(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba62d038e66ad3922d8c3fc8a39dc968458eb628a5d33ea3b5d2ded48c4f7718(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea0c24f18070aef0c78f7c03242e9cc001653679b8653fcdc788b8953d76ddae(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeCommonName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71d4e0e15b5d01ea062f3bbf3b3f4e2c91a96bb1e371231a3beabdca99490fd0(
    *,
    integration_uid: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74fb7007018dc2b4deddf2e15f3293baa4e438092872562d90020a348147b413(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad88121c76bed378b5fdba3b49c721ae203111fe54f1d7d43fb04765b97a07a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f6aa9d63333fa93d5e0b0e5ac904da72968cd9b00a85397abd891050a7a4d33(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeDevicePosture]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c75fec56b17077e5784368a4383e8508a99ef577363a6935eb190db03a121ebb(
    *,
    email: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4e55a867a440a722e80d28c3562e5a4304fb8332f4c59245131ba43f79e74e6(
    *,
    domain: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b008891aaa9e5852eb57d71a6f7f0a0d6cd20d75486de48cf7d05f1d82cbcd03(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3aeddef75ccd040184da7a7e4fbd1cbeb7af4fe01fcf2f64380a3c52e7e35729(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32d004ccce792ac3524cfd04a911213b8f54bbc7de4900a2058d8f774ecde8a3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailDomain]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b681017ddc92f0b5edd4c066b75f60608b6a8d864c0df5fb02499aafc653a9a2(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb76efac052c47a72f332bd071addfc92badf47f3291d9b20081ea6e1dfd4587(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee5e81093e6e225746b314f9207e68b1078da2e7f1384f1fe6d992dfd117b843(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7efd886da598400dda9cdcf69ff6c25ecd5ae396b15fea5996bbb05a4ff8cfc3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmailListStruct]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5a6d8786a62e062c14aa4c7be20e7211179da53cbe82aab3c3d7e32fdf33131(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ec2e0184cf77db8931b2c2db175ceeadffc87f70be86dda9274edffba8efa12(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56d6e87c2051c845356f4aba36a25477e4564de3a57d910a76407a9ba7afa618(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEmail]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65b38133e312365538bd8a52e4730ea7a015cc64442d342bf4730fb313cdf30a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b5d4d8fe100c6c0bb52975da885818a22044ea27be8baf8e09cabba501efed2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeEveryone]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efea3044bbe1e6f260570077761dac06e5ce9c94771b8a80a6c9b5f9464f40d8(
    *,
    evaluate_url: builtins.str,
    keys_url: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d271f35daf91ba2ab8daad995318d98b97e377cb8fa189931b350062c824454f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ec486fe3e99c7838b05e1364b2ad7ace4cb160b33623d21aa6b98ed40cfa185(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6fd35b6fdb2085a3ed58e9637e42b4bf59c831c60eff1f31cdd8520114bcb1d9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9942a9ec16927c67352ca8675e4e6974598a757e8e738939d77ea9169a7cfe66(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeExternalEvaluation]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c887c398fc6c5230ca766578a3d5ef8047106fe42b77de9996183356c3e51237(
    *,
    country_code: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__029324be709db7d85b1a8b5c66e8e914d4c0cc2e9daabac21acf0003cc4b2d99(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c57370bc988ec14d38c8e91b95a33f0ad1ce7a8712ff62bccf07e927f8f33b71(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__557ad644bbc6b9818a1726d299684f422ded4a9eb2eb1dcd6a039a947f65675e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGeo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec71792d894724f9ed1d089210feaf841551db78b156f0a723fa864e6be4fbf1(
    *,
    identity_provider_id: builtins.str,
    name: builtins.str,
    team: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2eb57e695911a337cf60fd57a05c4eb8b870b598455631ba9d9f2119f8f93c9a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d163d541487f195dc4f921649e93e7354d35ff208761ce7e336e6c5371152254(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__935bf4cd3ac5b1a4efccfd4585b4eec45c88e4123623f91568c12d403d5fe72a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3703078702eefc1ba0b1cb493bd6d68bea6ff3bb9eb3d8a8e6bfff7e0e1a6a20(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4a6094c384976cbb26fcaa4d6e74c21f528ccd76a9557b8489496f5ad208ea1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGithubOrganization]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__168023cc83d49dd75cdee24a69c22e9dd2fac3744c24bdb3d8b9c97f443dbf60(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__deb3d0f1fc7181f25de81c711d71e1ce84745702ee047facae08ef2a6d861d80(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2da60f8f6805d19ac6f0465a3c041151aad538ff7c173f58b5db6c7effe807db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__15c958438ee208475ffe82a55706faa40a06c116da8e91f98b76b84f43dcc80d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGroup]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22fe21ba5f932e399c8d1fea978dbd045860c74489967cdb5e905faa41dc8e36(
    *,
    email: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7883174211cc18261be8fb558418a7f43ed715f5c5b2e0f3bf3a8085f759071(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aafaf87a63345d768667990215bffe052e6f726416e3c47dda3ff0cb96206145(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82da50f890dc1eaa5ab5d0d24b708feb7881159f0cb45b1e6823c261332c0132(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89e44faedbb29a434b3e1f6920bcf98f842888c6c080e20bb628e33aad05c1c2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeGsuite]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7182d1159a2921120b66ffbc945e9c7200d468a54c7b16d53198bedc1adb40ad(
    *,
    ip: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd4cd981b75147f0e0bd830272afc95cec1fc7aa96ed90827b1c4e4c707cf4d5(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8801f5cbc7768a677f38eec1714820b16ba80574840ae7afd0e0302dea1399de(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdb47caa85f74415c9c7d6295b098d04d6c3012bc080208b4d5283622959f0d1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4401b4f31c6a6fc154ca1416894a6080d7d82880ca0249de574f00a4ffb89ea(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIpListStruct]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__356f9db130d168c8dd70c1790c46e525906067151abb9f4667f73b2bedae0f9a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__799add2c9a008da35b96d754cf885594a2d4c51220915cc09703a8c5547895c9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36a588614621e729321f496a9346dfa9fbbbc03c75e054f762a8191ff4f2a2ec(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeIp]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fdf515aa0059ce846b37c564bb3e6fbb0f5364fc9f0f7045026827ea41d0e50(
    *,
    app_uid: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__982dc252b65a74fffacc3e5ce3f4dfbb70e703ea6d5a863f078d53e5793f81bd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e43e1f02bd83dcafce63c09e674ceb64715888c2161e137301ce2ba6ce1e36ce(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c235af7b4e7846b71b0ce70ba07d9688094d0534e99e37a2a142c2126be27ef3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLinkedAppToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c301d73f80298676e78139089938a808ac195124176c73813ba1c1d7c4ec712(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98b96e6b1df9e9dd5ca233571d7a0fc4f4ed60aea6afdb47f98f864f40239b6f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41246ddfe08b20d6310b0c9d8837d289dac95142f5b3c7344a75f46004c846f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96aecda19456636a0fb5b9196dab9c807ba64b3dabd7ce3dc0b698580095e90c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a614a4a464d9813b44be6ebf05197115508ad320d4195b209528c8f4d1673544(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2cd597bf19cb63ad83a83c19a719630549338b70aae3fb8b1f0eae0f242c90fb(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesExclude]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12bbac9c13de977e39de8fbfccf7b297bb19b3c84dcb7dd0a3838419389121d9(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4cc78e11c1ee315f4debbf8992da64b3fa50de75b000bc5cc8c744624f917fb9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0bf6e5b2d315cb12784e5cf4136f9c5ded6aafcac6d898701b1f6c857f26b44e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6256ae9edccff8a4a9268eb2eae36d2da03f200d189da1ed88491b87bdecffb1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeLoginMethod]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be236f9cecd96904b1458892fecd381aedb5271e906697f0bcaee1ecd3391675(
    *,
    claim_name: builtins.str,
    claim_value: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4499fdb95306f2bb17cbd7125f54bf955364ec0521cf7ca1170eecaf0c41feec(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4cffcb14db0ecace825faf74aab94ecb415557c25c6e0fc038feb408c56017b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ddb2d9adebf54420cf18a04fdd84e1aff6b515a0552690ab998f5d5937db9de9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c54ec77c800eca71c8f0607d25b7549bf96f99829c479eb66268026c6157fe45(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34fe7703d6f66ada66c06f9f4854c480ca50cd4ce52702a00a2488f9f24bd62f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOidc]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8be0af4127e4a199072802b7fdbc9c589cb9818a709715afdb508f0c4a4bc571(
    *,
    identity_provider_id: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d02ecf3a99f5db29f5c98b4fb72e933cc671af4ce601d433c014b9db998e34e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7c1e5e59be5c435e70da652e4b11816b74811b1a6229a70343006f9f68ff258(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93571ba25b9341b4c25b7f09a78e4dca021957c4e8eefc2cba7e543b1bd2f100(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74a8aec2cbbc42c45056a7ba31ca31037a7d5ee6511b5550cd96ad09113cc24f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeOkta]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c9fe94147d2f6bf1cefdbf3e8e34c18dc4683aa3eda3336998213f491a9704ff(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7205b6c43b2080bda429266fc29d88122265c2307c20d51128607ab8cb3a325(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExclude]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0652e2629ea2d694a5cdaf17926b6eb218a85af358537bd1bbc8af104d110bf2(
    *,
    attribute_name: builtins.str,
    attribute_value: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f57a2b292b7027cc92d43fc69beb12fc017bd646a0b0f6a92ba00205a76abf5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db26c9674c457f659fff69ccd0eb5097d01bf8bef1fac9459822978aa76babac(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7442f48133123a7dfc7e324c7f654957433b78f89dcfa1ca901ebae82f18c871(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c33f76fb62da33e95ef09ca1155810b3a2bca6c13955af3fb6c254fb427008a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7ddddc314825afcd669692c04deb92b185788f72654e2044bb678a1d3a354a8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeSaml]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30e7a0712e80f5515b1577b8188a654bf3fae15546dfad8af2faa37fd602aa4c(
    *,
    token_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49edbfe0157d759f732bde435f25bf17529254935b25a27e06fc64c6804154db(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b919b87082298a3a5ab9f4698253159ec5ecaa9526a4a13930d9ac5421480b4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a11b089e29586aa8eb4ee1a195eee14699fa6a57cf01282be35a85374ff3555(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesExcludeServiceToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__685bc7a8e643f70be621def4858a7ca49c342e5ec8b14ad21bebaca7ae51178e(
    *,
    any_valid_service_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken, typing.Dict[builtins.str, typing.Any]]] = None,
    auth_context: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeAuthContext, typing.Dict[builtins.str, typing.Any]]] = None,
    auth_method: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeAuthMethod, typing.Dict[builtins.str, typing.Any]]] = None,
    azure_ad: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeAzureAd, typing.Dict[builtins.str, typing.Any]]] = None,
    certificate: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeCertificate, typing.Dict[builtins.str, typing.Any]]] = None,
    common_name: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeCommonName, typing.Dict[builtins.str, typing.Any]]] = None,
    device_posture: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeDevicePosture, typing.Dict[builtins.str, typing.Any]]] = None,
    email: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeEmail, typing.Dict[builtins.str, typing.Any]]] = None,
    email_domain: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeEmailDomain, typing.Dict[builtins.str, typing.Any]]] = None,
    email_list: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct, typing.Dict[builtins.str, typing.Any]]] = None,
    everyone: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeEveryone, typing.Dict[builtins.str, typing.Any]]] = None,
    external_evaluation: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation, typing.Dict[builtins.str, typing.Any]]] = None,
    geo: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeGeo, typing.Dict[builtins.str, typing.Any]]] = None,
    github_organization: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization, typing.Dict[builtins.str, typing.Any]]] = None,
    group: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeGroup, typing.Dict[builtins.str, typing.Any]]] = None,
    gsuite: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeGsuite, typing.Dict[builtins.str, typing.Any]]] = None,
    ip: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeIp, typing.Dict[builtins.str, typing.Any]]] = None,
    ip_list: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeIpListStruct, typing.Dict[builtins.str, typing.Any]]] = None,
    linked_app_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken, typing.Dict[builtins.str, typing.Any]]] = None,
    login_method: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeLoginMethod, typing.Dict[builtins.str, typing.Any]]] = None,
    oidc: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeOidc, typing.Dict[builtins.str, typing.Any]]] = None,
    okta: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeOkta, typing.Dict[builtins.str, typing.Any]]] = None,
    saml: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeSaml, typing.Dict[builtins.str, typing.Any]]] = None,
    service_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesIncludeServiceToken, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__393b3d8d65c5fa90f1441a54a5cbb960408298da0d2f6f448461e465e680245a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1c4761cc4427c549978771ca56d3a401ff7de7c39dee8d3823c8844678a5951(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAnyValidServiceToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70d79d8cb308441bc1dc0450845e1d0cb3189ed58a4412f56efe7dbf307c9d4a(
    *,
    ac_id: builtins.str,
    id: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26a16fd563ddaf50c63d65f249237c5d7e40f98d60f19d5198ea5591f8b73304(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__daf3b397a098aab436c64f2cbd4cd1b176d0206f3b09ce2e458e3f5b82d11ee5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b197665d50737d6f62f86ca8d8c52f897113051360c0607440f4c820f40c9e0e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff056b8ebd822270313206b681e76e5326c32b858353a2fc4a442ddf7e5a820a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad18753d6e3fc0607473d53483cc1df188be4d285eb4589762dfc46a9bf57dea(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthContext]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f12144a47b584a9cbbef53f8f96db870583cd91d31973d7076a3ef7e9c624a8(
    *,
    auth_method: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6887d8750e7b9c02d2d7b002de828acb68837c6e34a9327b51224f370d7907ba(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e08158d2081eacfe57fcea7223733bbd7361bc1b1722e69338b60c61eefb8368(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06ca9ad05a510b6a1704d7beaf5833eae21bca8859f7a228d7356b057c436005(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAuthMethod]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa6fb1eb82c83680e6fcbafbd1c647cdcfdbffa5102b936636015833afeb1da6(
    *,
    id: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__572970fa0fd995f020a3c50890e870434b25442e9ea9da7dbed9788d541ff78f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53d746ad2b9d9fc8ddb4ca6ba12fc23ee4d4dc57ce215e9192e2500ac41b0412(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f065c3ef75025ea8e59836e13858ee45b2acffd7b77876883070116a76be4d4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35b8c7151fb30d26d584e7333770a96d718b0211427ae2c43d048686a5894d16(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeAzureAd]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab6043fef748c2b307add7fd8655aed59d9adbf61ed2035b86ceba623fbbef20(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9939b162b2d01b7e0702d5689c4c15aa305db6e6870daa400eccd369c0b19567(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCertificate]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21df10f3e00b950eb72b0e9d568c9aa3f1069aa868553ab77807ad666118f527(
    *,
    common_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aec6a9271c9c887598a2235656a550b5160ce6e09959709179528031d6cb164d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62f0deb16a99ab2188b65eee9b5b9fffac68812a2ae4a23cf9e0c379be842e8d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7067621dcf4f7a63d6dd1c5c4f9b232be3c3b6810fa9db589f1edb01e80c94b3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeCommonName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb39215fcb304a4c71b61e00e996068cb380572550a9757d672aaf21c2b9f935(
    *,
    integration_uid: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4bc5b016227d1f10657ae3b84da1fd6c4600b8b22c3945cc14cb2cdb5d6710b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d592ce1333b2b740121f4a3915429f2d6994459b3f3e164dc45f9f6b9f48bcc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5fece5a5d00c52b3a87c0921c4ec36b7bf24c39d8e45bfb312007947619baa29(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeDevicePosture]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e167cb7b2b51414bb65b7d170904e30974bf3f87c030aa0d0a704addd9154e0(
    *,
    email: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6cd740819f58652f5636d4d106463872e2e6f43ac9912422b4b67cd5e82907a(
    *,
    domain: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a03b4c97a24dd384a05694179fe896b5a4ac0ac1cd382ffabb1546552a372a74(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8b435e9f4b0e1fc816494776fba1e124c4263e9d39ca1d41c52d4fa17287d5f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ef396410c78ddda84d7e740b7c960eab31675e82da6c689b306036c20707127(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailDomain]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a26e9d8a87ee269643f9ef2efbe6b38d4484f91da16a4ce6617cb714085f1b7(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e824dd1f1e4fc8e202ae0e42a71bfa0316a931f1516865ad5f730e0a7967718(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0c14a7910c8da6bd28e78e875686d7b613849d021b81c59d856748ebb09eb15(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1bcc7445735bf972b490f79aabf976824eabee7e25a0b68a0fc5fabedd56968(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmailListStruct]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cce291ad50ea6cbd6b2c87fa2f404d33e23ef744b0360a62b48b4507fc6776a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2968b9dee2b9287c8a648d61b7eb1d5dc3f45a814b0d2be18ad29eda6649635e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b445611bbd2b765450ba7f55970c2599f16995d887963c9d963ecbc689a03aef(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEmail]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ea09fea485256b81c0c5fe0bc6a3cd8f5162e4b5f5ce2ea7fa628310de12085(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1537ff7a59fcb4dfbdd370369ca497528440443b4f58ec0f68689659a527a36e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeEveryone]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d290e1df762fd798441668b45a685f8bcd44e19079c3e995582a2e434e24e720(
    *,
    evaluate_url: builtins.str,
    keys_url: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f551f1ae4a9d6452beb1f1dc02aa812fc15f4f16463a7c3122cb8f7c2df0b48(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__590051c8705e3bc73f9d444798e521f97e71aacf1fe40495903d69dec936c0ba(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e64af5b1af230ca3209c4ba2d331052b6e944f2f2157a0c63aaf994ecee38341(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a07d3d946d049b1cfdc6183b484f398e17348183e119d95ccea71787458ce30(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeExternalEvaluation]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac210db8fb8ca6314a9e84a44f7a2a6db65f7b66ac324b3ddeec845482e15f57(
    *,
    country_code: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__350ce406710e03e2b22d5fc36ee6dc9fb7e919755b1270307829a11dcd584693(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9841e55e3987236f142f882029f78b229a245e4312aeea683c8de048f9ef6f43(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a585df249cb6ab0cc7ece82a629290f5c8b142227d8682c0c01d173998971869(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGeo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__162cc5ff50b8be39a362974dcb6ea24f327ce96af1dab1a74aa5d4934b5f58eb(
    *,
    identity_provider_id: builtins.str,
    name: builtins.str,
    team: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__547f4f6585e873b6c4425578e5c7c83eff677074040dd07d14616b8d232fc42b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6529b6c51b372a4327b0daa683838b9c20f46d260fffc117741eebdf12478f2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f870efd4371c029a67d129b9c1108582177eda8aea2b8bfa3c6620b1895d34d3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b9650ae1f73293bb47e19e5f1c91363a9b1cc5eb4f92ff734429223a7608b08(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__413b6fcbf6fc81a6566776022961df374576ae9c9260cbe95f0cfb62a4cd8765(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGithubOrganization]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__50aa74d8f0703b7166faa028884c385e0083123aefef1d39723696ab4899233c(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cd78f534464fd15c13325dba55791e84463fe405316b4894ea103c48fd1e20d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__baa240ebae0afaf41eabc0cd95ce7f4f62e0684109b157d9b6480c9299d5c766(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a831ec536ca4c3ec57fdd7faf2795b73e7e86695cd4f3a36c8f5f866e02f92f0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGroup]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09a5da860f37e3abf22a4c16861ecf4505de7ce12d6eab2aed8804d0b0b7bdeb(
    *,
    email: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3da9205c798aef3592b8ce91a688b1231d96b48e87fbbb35c8f75db1c118b796(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d1b71e13a917a94ddc9012617612c8c3c4e8efc68488d3da1b53956f6b00091(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9725a114b33e1537889da7501f0e3920597d7c7baea1d3d7c7de56621689a9f6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08ae3886fe7bbf8f98e52226472d2c0ab953ea2e4e04d5db59e7768d1c5e5b7a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeGsuite]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32eaa86658361353872872fa529ff0f29b328bf9aea6bcce9320848ce7ab8f1e(
    *,
    ip: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__024474824652d6d113d08930fd670d55bc64112d0410c65e77e741365a64189c(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfb402944f36ba64ac526a0e9dc7fede1602051d2075b2e761e0c3248de0999f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__776c57e5b496bd8c7793676723432c3705b8595e5b35007c21bf5be8b3ed101f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2bf43c0eb61131bab160abf1471af39af82d5557a8b770a8895d4f519721bc8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIpListStruct]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca8c5a92bef24b3b6fa433d949224f045e8d8f1f2da7a8263057c1228c02ecf4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d70c79c5bef6b7d4be7db98512b40f025cf61ed92c0c031d27d4bddbfff82099(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c253926f313cf7e00d4382dfc009cf9b9794e27907b0bce30a83156e0f955a4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeIp]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4dd375755e640f4ebcd2ca7269c05d6eb3b5317c9e5a5ab50dec60e028cd019(
    *,
    app_uid: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2364025d1dcdcea11cab4053b0cee19c8b502dfb405b88ec5c44090548f7d36b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9f8370c892ce28a11c28e368bae03d27fd92405f6231a3f8d3102bd4afb1656(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f9e28850cdfaff108254bed6575b4b17b7136625d4422b0527f5ef78eefd8bf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLinkedAppToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3e5823dec1a2febafdc592915ba33fb4badc923e5e456ec253e2de253ffd6bc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e47b8fb632616ef9eb394dc4331194e9aa02b40aefd56f61906078317d9f810e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35a9c6cd21a08e264d85f3ce9f704005514a43e78e04fee80da31bc2623621ac(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c20cf3253a738db2a06411033c88b6e947d70194c7d4126f715fa142c5fdea91(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7bda02ec15e98fb110e406a4e4d3e75147a3dc60e3b381b8098ed6b60ded2d7f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fff1442f4c9af01bf1c2ac254a03bdba7ca1ad9047072a4d0fc4cb1eda90e88(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesInclude]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc274ddf7d3c978e8462ea787dbb4eed9dc4bd850f8016c0001d8b5fff10428d(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49a8dc2a4e713c8cee361a430748dea0208aa59709cbb89b3c6828831907992a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76e5ae67dfc396bea0a6bcffc09a1b15b18a5f3ce8f4da153d07658fad6df4ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__003951d89c1b34e3ec4c1e1cda382c7fa471352476a9d7a494177d1a7f1f6950(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeLoginMethod]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82311ee94bbea62c75b7323bbd911fcbc75c7825355044b7aa8e04233f08a5af(
    *,
    claim_name: builtins.str,
    claim_value: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fec854858d1f8a94bd4185f66b7900f060d0a6ac4454fdec8b97cb4e2bf9ad7a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4dda9dde2f4dd8eca8608dc22dc3dbc0825bda091c302a52bdc8c76d0c2406a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a2c0764c84c4aa0d20402af758c12e25de664d9c8a69ab11964132a8e2005ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2db26fea3ecefb6e597805412be526b84ac55bdb978b7efb75a69fcb2562b75(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09f011b3c16915582183c021447d28dca3642201172d29e9a4cb17228213c853(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOidc]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25adb88621f34486e0256ab70636b4f3452bf8e71d05532cb9c7cad583b09ecc(
    *,
    identity_provider_id: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0eef65ebf04522e0a30b19ffb31609760f0b87db0c892d3562cb04184dd5b125(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91902a5aba405391158a1b5bfd0f05f5f5683f78d9411b469ce59ed5543a7293(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6c656f0c382e8f19d968ede7372b93b67e158045bfae4ddc6d8327960a2fde4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcf9018f7c8e6e0c74ef74ce17b2b4a6573ff3de5a6a9e1823644640ea10f241(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeOkta]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc5aaa12544a89aa80cc1f933892d633c13cbbb095ebe532e7a5a10e584ea033(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__661bb359a95e237b496eb76b03e56428d8766f87420ca8175f63b95a3d21e67f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesInclude]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef85728ef8f71a57921a6eb66d43f552bb05f7377ec02d8bc6d4ba778f87da1d(
    *,
    attribute_name: builtins.str,
    attribute_value: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ccc6c29fdf2f19979aedcccbf3f74af2532c5e471355242deff686071b59640(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4cc5bcb67142eb4430406c333ccab2defb20c59c127adfa597627167c7e7f41(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__612abd012325fec6abff83c9eeb0311c3b40b1ae336644e7d6574f450bebca21(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dcc0788d278fc4128a63364d472abe70169246158416f51910ac3d08d88942d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1225c8aec5df61652b5220aa93c99f63e304e6c66d4ad4ec5ad6b91257aec16(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeSaml]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c75e2399b9859394cd358f027e6008239bd00dc87cd2c7734dec776ea5b84ce3(
    *,
    token_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2060ddeb837ca1d30d51792b2d9d5a9044b8ee3a2fb2f97d2c5a0142dc7eed9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89d339c90d96415be7b59b618f5fe2107ef2bd6fc5aff1db761f8af72d2f742e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a484804ccaba69356603150d523a2d17ca88c9b92d9ce096359d7b6813b13549(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesIncludeServiceToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__103b41a521555019a97484f2460f13fe1827e48e288d03dc9293886ec21c5f36(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68be67814b4496a8d0f66aa8a5208664df24a4fbd41085a5474435f926de9c56(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__920949dce444c09606e73f444ff008524787a12bdb80fb9f8e416ffe48432934(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9a99815a6c0ba614594e3971d611d765a315e84489d15f30a59703db6ece5b4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8ec601548ee01757851be62b598a92e7d2b9fabca8e8c598f74ba22d7d2f2e7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1328abddf40a82ff7c1b08c5dde61e11243ca91b4a9720326f677d07bdf2a80(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPolicies]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e055febf0ca47a0e001ce74c6deb174c227f0b0a08f12fed3723b408f2241bf8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6e502f3c2fc1ee951f45825358f1e4650ad53c266663c9fe9ad06714cf3a26d(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesExclude, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e0962b4a6f20bd2ac33f811b7dc7b3e20b9ea8b4e1e654abf81afcaa69142e1(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesInclude, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33f431bd0122dae81a5d245a1f9cdc736c5e89cb5100db739a27eed8b5dee857(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationPoliciesRequire, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b145140fc2bd1d63d39d8ec0485a310a9e99855971e6b49dcab5d8b2ef2703b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__332925c809800364cfbd1c56867f8cf55f479068ca20e94274e65b771e5e4c39(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2dcecc52f9305819322f3b1730d2edc91b0e80ddc06d5ad3ac01c88557593791(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a266b8f2abda181778173ab4c651742431d740ba56bf884ecf15b841ee0f71b9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f3861c580757fd7bc4d24fe90d019e441f148e4c37a2acef6427e06cd1e00ef(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPolicies]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb00ff04ac9e1cb3c0e2b2443ee85325eeb685bd4b05df282313192546c5ea6f(
    *,
    any_valid_service_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken, typing.Dict[builtins.str, typing.Any]]] = None,
    auth_context: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireAuthContext, typing.Dict[builtins.str, typing.Any]]] = None,
    auth_method: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireAuthMethod, typing.Dict[builtins.str, typing.Any]]] = None,
    azure_ad: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireAzureAd, typing.Dict[builtins.str, typing.Any]]] = None,
    certificate: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireCertificate, typing.Dict[builtins.str, typing.Any]]] = None,
    common_name: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireCommonName, typing.Dict[builtins.str, typing.Any]]] = None,
    device_posture: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireDevicePosture, typing.Dict[builtins.str, typing.Any]]] = None,
    email: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireEmail, typing.Dict[builtins.str, typing.Any]]] = None,
    email_domain: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireEmailDomain, typing.Dict[builtins.str, typing.Any]]] = None,
    email_list: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireEmailListStruct, typing.Dict[builtins.str, typing.Any]]] = None,
    everyone: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireEveryone, typing.Dict[builtins.str, typing.Any]]] = None,
    external_evaluation: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation, typing.Dict[builtins.str, typing.Any]]] = None,
    geo: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireGeo, typing.Dict[builtins.str, typing.Any]]] = None,
    github_organization: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireGithubOrganization, typing.Dict[builtins.str, typing.Any]]] = None,
    group: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireGroup, typing.Dict[builtins.str, typing.Any]]] = None,
    gsuite: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireGsuite, typing.Dict[builtins.str, typing.Any]]] = None,
    ip: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireIp, typing.Dict[builtins.str, typing.Any]]] = None,
    ip_list: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireIpListStruct, typing.Dict[builtins.str, typing.Any]]] = None,
    linked_app_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken, typing.Dict[builtins.str, typing.Any]]] = None,
    login_method: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireLoginMethod, typing.Dict[builtins.str, typing.Any]]] = None,
    oidc: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireOidc, typing.Dict[builtins.str, typing.Any]]] = None,
    okta: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireOkta, typing.Dict[builtins.str, typing.Any]]] = None,
    saml: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireSaml, typing.Dict[builtins.str, typing.Any]]] = None,
    service_token: typing.Optional[typing.Union[ZeroTrustAccessApplicationPoliciesRequireServiceToken, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b346c87d804a9889d7c1c851ad3ecc438351b0449ef7cf7b709407791849fb9d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eff577415f2705ac82d8cff09f67b9aeb847a3a7091f50088b38518beb994f5a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAnyValidServiceToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e84ec2db24daf089d6abf7739fa314474b5625f0ff4deb84c60cd26373f4bab(
    *,
    ac_id: builtins.str,
    id: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c88c498d3a5110947ae8c4e3f4be81a16b1d4fa996c5f8322021d7f4de86b39(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c35e7457f8a2b55222cd3878beebc36881e49f0dea42d01f0af3a465f10c6e5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c595fe00746658e33170022b022a09e833cdf023c7a3da09a877ee8c16b1cf6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2f7b89cd0f4536240b24d2189d7e04807c9150755570056e63a6f33cdf23345(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86b5e4fb5421942e775ba5d03eec9fc82629fdbacb9aded523620a5902a8d24a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthContext]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a00005d015579e4a1181259e2165492c95262283c7f2cd20efa0140dc075a01e(
    *,
    auth_method: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef2f59fd3fa25c8a1f2db22de990cb87626b1a750f1ff558b88e92e5cdd0fd09(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9acdf5c102959577f6a09ab252746057cbe729260ef542bbe3d399a8b8554287(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e663efce01a6780199262a86ec5498c400c7a358ae6409101dae12e523fd733(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAuthMethod]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2ccd4813f868774480299a73dc7669b96289c76934ef266cca80322025a28f7(
    *,
    id: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e3d66dbb72bb3ad5994b767f4d56bce081aba4a608d15565ca4599a5ef112e5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__611526eb58a218dadcb73e360be1e6e742679608d402ed24e106761b6a2f00bc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb9470707eb329d03c45b290a395957e556921ad1e97f6c6972d85a173c944f9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2ccb1c765dc538cc640754eb9d75d089ed537c8cc0f5b4677cf3de513f6916a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireAzureAd]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85424399f45fa76d125380eb120c47ee39f5052208f624b4c98684f584deab43(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6b2ab4e730d3889af478dba871914a5bec48f8d8aa6919868461a42c8d30be4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCertificate]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9dc580c53d38f42dc8b689392b87d3003a6d7d862d23d4370f777b1f9611ae1f(
    *,
    common_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a54230929e2fafcb397282d2b63dedf95b1f5b122b3898ace0d40c4cfed828a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5418881bd49f7138a61ad9c8000a17818d4a546afe1d3ff2bba333967ed17b1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89b5cc768f16864024a8fdddc0efa76e531d63d888823c23c3eac36c1686e912(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireCommonName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ddc8afa28ca8e8ee400ce4aeedb85b43b57e4bd29c3c23a5f88748dcd1642b4(
    *,
    integration_uid: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0979be240fa06df501d808444ebfaaa258796f4cecc862407f98de49d7f271d7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28aa8b3afc5eb116a79a8955017716d02e98f2902b81cf52de5ef91598629c23(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffe02693f62ab7419fccc842a96f8aaa97b3b4d7f980eb01c292a85d8b089a15(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireDevicePosture]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2dc4e016fbd98ab554f40b8ccf925d45477d7e52823c859f800e4a126eef1eac(
    *,
    email: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aee88da4230371eaf9fde6f00842b7ea3cca5fdf9b5755157c58510aa68d37df(
    *,
    domain: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91f9cfaeda9fa4e43bac85fe7edbf351215d7077e02ec80642815a3c9deb1711(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e07ee0398c285615cc70c0b9c5ed54f6712b70339d9198d1213a09904151e179(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8157b4843fd5738bc1f2951a6fb80965a0de4f5eb2d788ac15f022c91ec100af(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailDomain]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5949eb3475ddbad70cc1378e89e318aa1a2c67e8a4268b08f1ab8fadbdfdc1cd(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06923c9869c68a4e711510ddfec9a7dd7e5e914e80596882805768f299d452a4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6fa9f707fd8577152c3e32b1e1eedc0548d95439df09bfa69a84e884ba598ce6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a11df4ade2723d91a317155b9a5db233ce93fa9c17faced55ead743f99e60b1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmailListStruct]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d40d96483b947951b8344346d85cdfbdc54e4350307411a98b43263c3e7b327f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f2875d88fd16101a479fdf17306f48d5a42b5e02e6e14ce04b962dac68623d4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5098086cc0ac28eaf66aa88a72e75de99ebcb8b6914ac10d3da4914e948d8d2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEmail]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe53f3e5e2c7d00fe3fbf2b899773743e35d1e3e495c0d3adbe090f10fb38c96(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3af8be5e974d5fbd15baa1043d0f6319c46a40f02d7ebd48f684adf262ed6d5f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireEveryone]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0190a585b45e7dc68036bb2137ad78573d824a1fb3c4717bc3be7b1b787d492f(
    *,
    evaluate_url: builtins.str,
    keys_url: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6624d2ae0d57b27ea844c74f7fa5e220161faa4913a442146106daaef2ac3f5f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c7b1b0017ebdcab3b0ce45a26b045d0d0add43ec99332c148addaa9dae501e2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f20a5019c6342d71c06fb757d9dc4583a80ec133b27d91bfb0f16762843fd785(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d4d9df8c27e852264dc90306182c0b31553d1b9020102505233b03b1dc5febe(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireExternalEvaluation]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4453852617237388fc8702ea2368cf6f6797d2f9de8141578a428fdcda248d64(
    *,
    country_code: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b5e05530c64e30cb5bb3d7a38d94e5008b0f39b2039899193a8f2dae18beb3f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81851385f68777c4c1dc5014132f28f61293c0c7ff7cf341c08fe7f96b4b6141(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c77ce6795460f4c8e4ad7f4fda609afb70deeb34c6fe554182b11e7f92e5d73e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGeo]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad81c8cd5b7b3802fca3ad3223b52bf1b2d14ce95d22deba9dd7ad70c84528a6(
    *,
    identity_provider_id: builtins.str,
    name: builtins.str,
    team: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8734ed5d10bc75705ec328ac7915f9acae2b94cc604c59c8b4ecbd84f5ffcb95(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c90b37e50361413151b76c83a928f9573bcd9b9e3eeedf49268d614067155f9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c69b74a3206944b916fc5098f7e85fcfcd717f4f66943d128bc5c89cc9aa2c0b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d9496c4e78f61b052be78b756b6c9f4143075914da382f5b1fd25f95318744f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2eeaa995163935337a8a2403e147e49b2a1900b707368bb3a87c6ad7babddbd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGithubOrganization]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5744c61b3cb2b0dee601cc9ab22d2c2cd05d94a9bdae1cf303257cb26c36ec2d(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b0db30abf86a513d1c933ac7fcf1d4d4f20c6882b3f3c4a974b7e66a99edea5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__597ac07e4a7efdb77ddb565f5c3b6507635592469eb76ce37a90b1473cec1313(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3523329be81d485b2959747880a88dd0d6c6eefcf7e865f7da06e0c372c6b0d8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGroup]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00b0e7218b3a5793cd56703c66a4690b66ff61c6abf4cd71cfaf2b7de57c304d(
    *,
    email: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6363366c5c8a7bb1d61e4da33df23fb6d74d9fab991544380793d37a5b3e40d9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4919530d40bdbdcb179bfebceeecf6aab64fc9cde89af71a96a474aa29d9766(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5992cfd3be253a1f98f15ec57df615f65579d30996622151f991ea179ad609cb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35e2072f568947f6e5682ea9ed0853c6c6715e1f16b2e7816a692db73b422306(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireGsuite]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa64d91c9828fbeb47d74f56439ce5ae66c005eaeee7d8118f9ca25a2bd7b1fc(
    *,
    ip: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5dd82a4dc51a43f47f994b814068c56ed151b192f970ef20ff00417a86fbaa9(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40f97919de66f5749bd000a0ad36483c75ae48a22ba70654db592c9715fdeb26(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6f9eb560a5e988ca8f1b3ea2fbf52839761631bcffae14c0df2b6415e55fc95(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0cc2c91e7314fa624a4d71a50d9e325344868ee561959d6e77a8976485bd6b10(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIpListStruct]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f6c5a93d7be5e1688d5446092632bd0add8ee67d458be07002e303073f52ff9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__948c295f2899f54add8185e91880f94abe16b58742835c4be7116dc8c71b398d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccc0135856d96addde6190bfadbcd37c19fce8f85d2faec882f80df5b72f727c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireIp]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca22d689b6105c69523546f841b62a9c97fb19635928881cb884465d248a4522(
    *,
    app_uid: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__083bdde64581c9c34798ca0fae398102171c6dc763b9e1406525ab68cb948dbb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fee058d981dd88e0648e372c9b59584f942654f0d2ff1a2195abbc2ffb14dd73(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7c7d5caaab85a76fbc2fd0dbf1a3f9357c5fdc89d4590e54a71d77bcaf981e3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLinkedAppToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69a246744b2d40943ed87bf33a1090bb7c8e9e03b47032b98aa791c50b89e7bf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8ea9719a4acbe60cf4dc73515c124fe8a80acfda3f463a8c28d8042a42ccaa8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2d561f37658b53b84658261df2a4099acedb569cd998687f43b02a31fcb57a9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46eefe11116b96a453b84ef44f87d9402d628c484172d671d26c49790c64303f(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a8b4de210a909887c9748b0cec4df66bd68eabc458bfc418d95b4eec6bd25fa(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1a2e791c7e4901a2988446705560c2e6209990dce159e3e47b9e012c2192e42(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationPoliciesRequire]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1281898b383785cf1bf4954234d03cc5e2b24895db238048cd24ebacc84408f2(
    *,
    id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b09b51f7cd17b53b3ed50c60e05eec499f7a51ae8a616be639a8718a09d6c8b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__217ba293e1e45c57c7d35bef80fd15039ec59b268d936f50bd97b1b7399e904c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fddce1c453eebe85cdba5ed5eb176813585827ee218b63e61dae43a4ed96c23a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireLoginMethod]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84266053049e841018f23d89c6190fe4c05793fd339ed2c5e7d13d6f897883dd(
    *,
    claim_name: builtins.str,
    claim_value: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11a99d5cfdc109528f60bdd73cd836ba9e48cd5ee5c5f80cb79b7ae97f96a029(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c131c3cbf2f540df918b4d86c706bf956788be1cc14848b6489e1e2083efd92c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc76b815a65458027c0f73e9ebcab5325273aeb12bcd8841eaedaea5115add08(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__adfb33c208035400adc4dfa96c6fa0cece8247ecdd3ffdd2584e34c79a25ade8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84615b6cf978d0044c63c157a60359b558feb302c6259228e334ccf0ac7d5740(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOidc]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5638e32a372a0474eb87a05d487c6624c6e429c83ca9da0d0e7514ba4d688d61(
    *,
    identity_provider_id: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd40112cc97230b5add0518131ca24caae1d559c5480256a5dbe00c779ba70b0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f98a86ed95ebb5bb369ed31d2c6a67a2f77c9162d48f1a2b80d90826c4633d96(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b4b5758a729a215bce4f8000bc2d44a47b975c59dfa2c8a9d3ed74f7c450abb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c0501ab639b57bf0405e54482f5201e50675546c1442e43fba083ce5052847d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireOkta]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ed8936bc7c700316900e89fca267e292c3e8bb5336a47d5fc770268b096fa84(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bac5c3d840028d8bd67b5991f217af6a12f8cba8741a6878207dfd93159b0cd8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequire]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efeaf3c4e65749406002103487336914cf2ba116688eb67ad259cd46da19ddaa(
    *,
    attribute_name: builtins.str,
    attribute_value: builtins.str,
    identity_provider_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da4b3da44cfc36af08d561fa43889fb6a891243122640ce63d5aa2ee88c4290f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0c0e6d2f2e8984699aa33337290aa0728fe56a1f7131a86428e16bf190fa80b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c96c27ee71e9784f37a17e9109f31a1bf5cadee63359edf97eb382b61c543ac0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b7fd3ea89c1dc2e77a87412a9701afa2987c83b8610a997f6e093ce263292a2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01aacd2e124c25bb5da8184fb3dd839ead46c3117d5add9976f2be023a4dbfee(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireSaml]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d55cd2557246b67f3756574914e549da77b583951051cb3b4ffe908701eae759(
    *,
    token_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0758f1ebdbf7a8e2261daeef5e700bde34d0ae19a18631380bc812355b618b52(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3132cee6d0e5517482eb401532b1d55e65a792cf56cde0fb9b77e716b2920b2e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d9950d8e26f37b2f3b29e8bab99fd6983e9d6d94b001970820b75e38a0776dc(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationPoliciesRequireServiceToken]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba771b6654419f66e79dfb8d9609f915a6d90c1b92895f9d8bcbc1ad4e696d75(
    *,
    access_token_lifetime: typing.Optional[builtins.str] = None,
    allow_pkce_without_client_secret: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    app_launcher_url: typing.Optional[builtins.str] = None,
    auth_type: typing.Optional[builtins.str] = None,
    consumer_service_url: typing.Optional[builtins.str] = None,
    custom_attributes: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomAttributes, typing.Dict[builtins.str, typing.Any]]]]] = None,
    custom_claims: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomClaims, typing.Dict[builtins.str, typing.Any]]]]] = None,
    default_relay_state: typing.Optional[builtins.str] = None,
    grant_types: typing.Optional[typing.Sequence[builtins.str]] = None,
    group_filter_regex: typing.Optional[builtins.str] = None,
    hybrid_and_implicit_options: typing.Optional[typing.Union[ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions, typing.Dict[builtins.str, typing.Any]]] = None,
    idp_entity_id: typing.Optional[builtins.str] = None,
    name_id_format: typing.Optional[builtins.str] = None,
    name_id_transform_jsonata: typing.Optional[builtins.str] = None,
    redirect_uris: typing.Optional[typing.Sequence[builtins.str]] = None,
    refresh_token_options: typing.Optional[typing.Union[ZeroTrustAccessApplicationSaasAppRefreshTokenOptions, typing.Dict[builtins.str, typing.Any]]] = None,
    saml_attribute_transform_jsonata: typing.Optional[builtins.str] = None,
    scopes: typing.Optional[typing.Sequence[builtins.str]] = None,
    sp_entity_id: typing.Optional[builtins.str] = None,
    sso_endpoint: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee795c927a151ab8c76d7ba569436019f9dd60cc040cbbfb62fe7c6ae7149c9b(
    *,
    friendly_name: typing.Optional[builtins.str] = None,
    name: typing.Optional[builtins.str] = None,
    name_format: typing.Optional[builtins.str] = None,
    required: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    source: typing.Optional[typing.Union[ZeroTrustAccessApplicationSaasAppCustomAttributesSource, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__448d9be4725c41c4dd79c15c0145b664f8ba65823499a60e49058526b1388a76(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6b4e415d14262027d306ca2b70e6496a7a85c1e4eb5636227584fd21365bbb8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47200686e6e4eba2af94e83d670cdd971a98a68080dc74ca36b954fd533d5e72(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87f932f2c20ed01552e2789670cb1290e71a43979c3dd427056319736f8d9323(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be1e425fc0ad16c74424c7c554f6f006ddf9e3bbd50c0be5ea388ca1b5ccc304(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7cc350dd554cdd86461fa5a6b0d32beb09f323c12620ae2880a3575e96284a1b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributes]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8df7269362c7793cdc1729f4d81bd9e6077186fb2fea0ebe41e046995909ae8c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__978970580c6bfa413cfc728148bd685b0f280495cdcbf9fd73840a3665f78c6f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df36d02b75f3397e062276727bacb5191aa638ee36c8b508c54799e0ba6fb428(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf897dcab12127dcb8c30e7b7e7af8e9ca34fa5ffc94e972169d349d65379544(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19d55fc4be287436a4b0e9e0ed02642bd32a4a72c3a7cd7c2ba0a45b94dfab38(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cda74df5c57ccf362a27653b1965bef37eeb984dcdb3d9b6034154e461a79e0c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributes]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27f18df59707c7a0855a1850230e7af3279bc6745fe1623dbf541d4e492ac0f1(
    *,
    name: typing.Optional[builtins.str] = None,
    name_by_idp: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fd773e2e884773599c9f0b613aabe3d4e96c0ee2586dbe06c5242fa47bfce7f(
    *,
    idp_id: typing.Optional[builtins.str] = None,
    source_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b383ba24dd5407d37f311582f2939e3da687143fa30ae7be8371b44e99daa9f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f20f5270a2f1c8fac64026ff0b876c91c6e27c9123aab8981ef9aa569021fe93(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4020420cfe72ff7c3eef90b0767c21597102d1f7d3dc4861711071485f2a3ed4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9555806b36e60cb1d2f1321fb0907d2b3b651396b5bd4291b29a438eb403d7f1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__531de810e3fcad337c54b3808dce204db440ad6731f2cb6dd346c32c2658043f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55eda0e3fbd6445377265f58f3510f01a2eb82576f1518893da2b8dce8c235b9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3c1a8a47a1a8f0a112745a7b95f33f9d982d5b4c2d2aae8c11bd8f2eba4a638(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ca4099e64a0669e0e81ff8c2605118bc411b3ebcf585b1d4cb2d500107e6f2d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d854351a392768438f8bac7d5afd91533e2e00cff219ca18fb3dff53a24d8b00(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fadcdfa22438f9cce3c1e93a7232e1e56e6e40f65a3b3abbe30e19c3f338bf03(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09558887b25064e52c24d16137ad12f0d436e0d475f69d80a1867d5bf638736b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9a99b8014f7a7e5369bd9c1411093c40d1e4d3f1006c6073099a3a0c6bb319e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomAttributesSourceNameByIdp, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91259ce89916e0094332989c19939f100a6486a811ce39b0c660405b1c1deecb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5f7e494a5109f0562b1eaf690a36acc3cbbe5a55d4af4123d9154175f57506b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomAttributesSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27cf8476c28f3fe8eb3e9b9f53805413b0863b9bcdd0d3ed415ee55b9d59627f(
    *,
    name: typing.Optional[builtins.str] = None,
    required: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    scope: typing.Optional[builtins.str] = None,
    source: typing.Optional[typing.Union[ZeroTrustAccessApplicationSaasAppCustomClaimsSource, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02f1ec94851169ee6308b1fa19deb274cacdd7bf6a062d7e4a79306aaf411c31(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6368030e2a001af3a411f25e6f49022e5474d4ca9d05268fe271dd1b1b331c8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98d5f6fe8f3c5a47675a135e9adb49497f612a1bc45579b13ee39d3af9648a36(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abb1df3512c43d7d7195580d8447a94b66805d23046e9f19a21814c338841352(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dae0dd68fe9a17d3615f4618d107ab038f6e5e299beaebb1396af9027ef8722c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3802b56961723c35e1a9d9f06e5c09fbf13c00b1aae7dbb4418f95f877e46791(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationSaasAppCustomClaims]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14705de73d4d8a8c58c658fd37429aa87b6ac2ce7a89544080507303c9436ddb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1cf278705ea5e5e251b60176091e6a87d9d7d55aaeb2aa78bd2f8632c44813f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce369be1cdbe1dc82da4c946a193c455199e120cfc12e05e7b05e1a48a7c6d20(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ef954d092f3e428b05408992ebc57bfbb5fdc75ed8d10598c2481d38c06256f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89b62ba4a3af0a070d0b88efcbe65fc6c90af49c593cd553fed4f9d6a6e1bf97(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaims]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d029354d510f5ef2fdf20951f85881ae9708cbf6b6791f6095bc80cc61b41fa(
    *,
    name: typing.Optional[builtins.str] = None,
    name_by_idp: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e92b9dbe957a3cb105370bbb663d4bb30a2a57bf054886a79237444b7d5a399(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0137a856ca3380dd956907387e56b7c7cb962c63d96b11e5b350a8b765548a10(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__292f32c04cb48eebce9dfe06ae6130e3ef7839cee490e0299a75b8edcba729a6(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2a6c3e4e045f6ae8e7b9e7d283c86ca30b43c39f6a21b6843b2c97f39a2f3c6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppCustomClaimsSource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c47ae571f696461fa530e0b47d1efc7aaf34c0de513625409293c9d3e6bab9f3(
    *,
    return_access_token_from_authorization_endpoint: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    return_id_token_from_authorization_endpoint: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a23c8631a7e3ced1913740badd25b182d8e96d450b36a5e36990ed6998cb39f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef48dd0a1ce07f0e0b2c393cc41e88e4a85a50ad9de47aaaddfb48813152bd08(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__260a94b192ac278986ffa721cb0b4f3ff84c8bc3d6fdea12710e86b6eaaef709(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56656c00569825803da3de6dcf7b591d4680f70dacf3bf0817373f6058bac6da(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppHybridAndImplicitOptions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78a299894c97079b51266055689b9e4f413f7ec554eaa28304f60d4ad33f8534(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__522133c03e20ff339141f0b16f2696f43c5b09adcd923ba53ec464ebd87450b5(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomAttributes, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38a5207cdcbf1398c854f441652ffdd024789d81ce89378256a1c35a5e65073b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationSaasAppCustomClaims, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61fb0dce2094353bf862ac6932bf9a358d1d4f375d33d16593dca55a165db522(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2640f51230ba19fce15c46e2ca579ade81a67ca68c266692d4174e69fd3ca5a(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11875e0247acdfcedf65d6a888a32e27757d31f852c7c7c8214f36bd0b3b1d70(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b350e2f52aebbe4c357cf90efd09abbb3dd37db61e4bf714fefe6c1e6dd7b6f9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01c732105ba0603af66f74ca876094fdeb8c6ba86f3ced4e967288ff0173389d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc4129f222924b86431073e40812a1aa6aa8aee21ea5cbcf64df4d58c8579b40(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__655028a2de9e44243e176070fd158b5821b08b9798d15c1be60d5eeead641b9f(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__131893fce395bbcbb766470e23b5d8bc39b238559b280a60d56ba0f2f838ca9d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b43b191dd5654f156e1b74799440c636239523cba06237c1a451994b6ddc389(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51cacd17173b2abbb9ff19c26687b485dbc7fe5681ef84dd6fbbcdd5e24337b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27cd0c18ac4021f516a3a8ef427725b25c2b20992909b7dbc96d1a9a84c7770d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1d7290629a442ba66a60c36f59f78fd19ce6a87637af9f6ce09210a8fb1648b(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7243c8f3682d4a920b5ea40cdb982e43b5bdb0b7306a016a9e093f32e5eda7f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5464e78b786e5658452e709a73cf8396eed6793e0e379a633c781a840745fe88(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aae5ccdf2561788d69742c6f9acb2ec59053a3e73d1d5f1f80aef0b9b5183235(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51dfe1c6d5d73c6ad176e06f2fd92e237e0e34b8ca937ecaf7534f38b0ae5256(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__218a8e2563fb056ab19958056423e2a894b1bd20729be4fc196ff028d0b23a6f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasApp]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6490a881c3f568cc7886ac54fafbddda6b2e5baa040de68f6b2849b00d2638b7(
    *,
    lifetime: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7da90fd8d48103370542ab0093d7e08de04f63811ee1483e9df37e008ecfc1f3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44f37139bb87b9b512af5ec8019e31e5d12c9e94b872d3d3f4ee05bea7116ac9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78f4df5778942d62a1fbffda7cf06c517d0fdd87b610a22b8fa5a9b68f4568f7(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationSaasAppRefreshTokenOptions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bed24ef6d590cd8e473af78f8b33f160fbe048226d28429cb8e2814bfd91eb53(
    *,
    idp_uid: builtins.str,
    remote_uri: builtins.str,
    authentication: typing.Optional[typing.Union[ZeroTrustAccessApplicationScimConfigAuthentication, typing.Dict[builtins.str, typing.Any]]] = None,
    deactivate_on_delete: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    mappings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationScimConfigMappings, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59ecb6b1233c4fce4b268366016c523f851dd300b1747ce2599833d502464b7d(
    *,
    scheme: builtins.str,
    authorization_url: typing.Optional[builtins.str] = None,
    client_id: typing.Optional[builtins.str] = None,
    client_secret: typing.Optional[builtins.str] = None,
    password: typing.Optional[builtins.str] = None,
    scopes: typing.Optional[typing.Sequence[builtins.str]] = None,
    token: typing.Optional[builtins.str] = None,
    token_url: typing.Optional[builtins.str] = None,
    user: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2092e0de164ec969f7e9ddec8407a11451c0e89c4116013fc145501728612a58(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__049351fa1f185a569f1e81166b431f043268cd038a8cc145170d821c864835db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__750b8d1c095c9856fe85bbedee0b3499bad2b4291e9097dc8abe54902ef2c15e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc26828b8e083a8a2595bd485dbff30f965d4c5a0b0f07bb87106c8b960b99c9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63ad05a822425dfb66907635ff1d89c311bfe6f43e728bd0a34d5b3a86d1cc7f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cd5e83f101be05ab311d697646530558ceacc68e0724e87a80e690e1c537a0b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1570f66ad7030069d7e29f3ff32d5adf89b72076ccbd99c7d721f7e395413db(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__244f3f0a66f77d883bd43bb55d85fd3f7fde7079a5563a43b16600e49e9a3f07(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f34107877bdcc9ac6d4df827ffb6e8dfca11942720d52e60589eaa7af7d37da(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f7c7e20bcb9a12ecd78d646245a861c85aab173a15f94db57bf8c6520257bf3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f5e0f6b8dca149d03908fbbc7aada492af864e2312467a9a037556aaa339bff(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigAuthentication]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02e429138f79298c45e0a4a980b4a1bc857a8c361b3b91254b9c314a97e8081a(
    *,
    schema: builtins.str,
    enabled: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    filter: typing.Optional[builtins.str] = None,
    operations: typing.Optional[typing.Union[ZeroTrustAccessApplicationScimConfigMappingsOperations, typing.Dict[builtins.str, typing.Any]]] = None,
    strictness: typing.Optional[builtins.str] = None,
    transform_jsonata: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4982d85328e485577e71db6ca0ff28bd4d11ed103fe4e751b6865c29edf27b91(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c12d7ca795066c59b692ad4f51ed06da9a4bbfb1671bcfb9058abce1dbf166d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11722f82c822bd7d3852c62774d61090e29ff5c91dffd7de692dc798a6a6df8e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6cda44f403d31af0b43b47ab683ca8fe0a9e2252e5b592cd2fdea6ba3c13297b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__282cc7e4bc2718f13142a71dc8796a2e16a73d45e66b1f4b5a4978083c5d69d9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efd5e8b7a787876d92c35a2d24bc410013f73b0c55e8fc95ebd31c3eae5cbaf4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationScimConfigMappings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a09fa54b88dde85f9223922abb1ad6ae627c2f2547b57da96c41a7bd6afac9a(
    *,
    create: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    delete: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    update: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ebe6e3c8fc9d4e2f3170ae5c2ceb74951b2955571764b4c82a0f6bb0ce4272f2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7d292edfba0d7e3b7a55cc8ace4108ac256e7b720216108aea5114f658c3273(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__777ec6d891e7721b04e14edf7fa10e9f357be6ae8bb41f7940fadfc1ce53f997(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7791b72a4522df28341aaf05fb9e6aedfb520b7fb2772b593fa73fcbeb257460(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa06f143a4b3a50d8cd11ef17f7e5fdd9d896da7bb6e6065b6233907d8a6cd4a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappingsOperations]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b0cfbf2de00e251c5d618219bf8ae1c16eb631d3bcb73bdd800083e125a428f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4b72c81a9e5cff5cc95e524a0ca8dd864548c4e8e3eda50e28ff65f6724a3aa(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2230b039da2ffe3bcd776feb5c3f409fa81b60bfe83e319d38372684dff96b9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5215af50fc75a0e73ad843e3d866e7405d6025619b93538a5fc263322a27dc8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17fbfb35f18e42455dcd9897ac76fe0a3795ed2ce09a0d173aee5c89c2302d04(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14b5dd75241fc8639d24bfc70cba7f606f40751b4614d1808cde1347beac7a94(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57f597ea09f19a498bc840b2423b24294d1e2b77d4259d154703c170544b4578(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfigMappings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bd13586a1dd626fd8881187550aa6b978f5254d1731ed2e496df78824dc7bb3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac25c5d91f207d1d973db6b446851bef6fca92aad259cb2078316a20ee88afae(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[ZeroTrustAccessApplicationScimConfigMappings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3775745e8c089fcfccac709b3db0b6f61040c230a03b3bc79d4ea941048a425f(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e2aa79d0def243d84c4d4d28f66f98ec868452092917d912ff50c30f8d2a1e0(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__574933f80f7d7da91678a2b3008b5465fe3e6e53188344329efa68ecfdc57ab2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5406d8f276e75d039963d97f7874f104345d19f82c913154fed37bd7d26b09f9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae2bc60a07a514931792b4078fe0dd4797301c6149d73dec0fd7e224ca0851a0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationScimConfig]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86c5f95cc6144bb0d1e2e5b734e8baca1534d63b2e34e895e1b853b7e917b04f(
    *,
    port: jsii.Number,
    protocol: builtins.str,
    target_attributes: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.Sequence[builtins.str]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62177dab3ece260cddeb67aecb9a95abbf1b75a041c89f358a177e6696e730bd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f548a3db067bc87929f0721b50f128734ba832335114838cd7e3cea9bdbdfa4a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5879327f1788ee3832554f02937a5491bec1fed9f83fab1be99628106ad6b2c9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb5fc42c8ea5dbd0629bc52fc476332348ff87a76d5ef05168a623869698e127(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41a1af0605f409c28c193e0882c13cb4394d21bf12f82d78104e2de87cd83196(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ed3e2bfa0c87cd1fc44be7629b1f403fcee25c6adf7403c3d4119fb2b9703c4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[ZeroTrustAccessApplicationTargetCriteria]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c70c7a7d4564a84da124d02399b8a0c3ba64b0f1871bea49f2db0b2a41279567(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1641fb9b0840e77fea2869966a62fe0826f07b642ad3a16cf31cc6276e522a46(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__958c0c954dc8468a737ed4baa12f7c419e2f09db7b3e152cce47471e08571229(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18c7989bf132c9c7fb447ad343bbaeab36e8f2b89046fb8b08a4a2d412dcdadb(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Mapping[builtins.str, typing.List[builtins.str]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78a185ff462507fd4d2cbf7fac7c32d3e0537ff5260ae4069f0e9d867896d2b1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, ZeroTrustAccessApplicationTargetCriteria]],
) -> None:
    """Type checking stubs"""
    pass
