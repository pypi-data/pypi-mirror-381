# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartPlusAdCreateBodyAdConfigurationTrackingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'click_tracking_url': 'str',
        'impression_tracking_url': 'str',
        'tracking_app_id': 'str',
        'tracking_message_event_set_id': 'str'
    }

    attribute_map = {
        'click_tracking_url': 'click_tracking_url',
        'impression_tracking_url': 'impression_tracking_url',
        'tracking_app_id': 'tracking_app_id',
        'tracking_message_event_set_id': 'tracking_message_event_set_id'
    }

    def __init__(self, click_tracking_url=None, impression_tracking_url=None, tracking_app_id=None, tracking_message_event_set_id=None):  # noqa: E501
        """SmartPlusAdCreateBodyAdConfigurationTrackingInfo - a model defined in Swagger"""  # noqa: E501
        self._click_tracking_url = None
        self._impression_tracking_url = None
        self._tracking_app_id = None
        self._tracking_message_event_set_id = None
        self.discriminator = None
        if click_tracking_url is not None:
            self.click_tracking_url = click_tracking_url
        if impression_tracking_url is not None:
            self.impression_tracking_url = impression_tracking_url
        if tracking_app_id is not None:
            self.tracking_app_id = tracking_app_id
        if tracking_message_event_set_id is not None:
            self.tracking_message_event_set_id = tracking_message_event_set_id

    @property
    def click_tracking_url(self):
        """Gets the click_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501


        :return: The click_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._click_tracking_url

    @click_tracking_url.setter
    def click_tracking_url(self, click_tracking_url):
        """Sets the click_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.


        :param click_tracking_url: The click_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :type: str
        """

        self._click_tracking_url = click_tracking_url

    @property
    def impression_tracking_url(self):
        """Gets the impression_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501


        :return: The impression_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._impression_tracking_url

    @impression_tracking_url.setter
    def impression_tracking_url(self, impression_tracking_url):
        """Sets the impression_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.


        :param impression_tracking_url: The impression_tracking_url of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :type: str
        """

        self._impression_tracking_url = impression_tracking_url

    @property
    def tracking_app_id(self):
        """Gets the tracking_app_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501


        :return: The tracking_app_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._tracking_app_id

    @tracking_app_id.setter
    def tracking_app_id(self, tracking_app_id):
        """Sets the tracking_app_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.


        :param tracking_app_id: The tracking_app_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :type: str
        """

        self._tracking_app_id = tracking_app_id

    @property
    def tracking_message_event_set_id(self):
        """Gets the tracking_message_event_set_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501


        :return: The tracking_message_event_set_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :rtype: str
        """
        return self._tracking_message_event_set_id

    @tracking_message_event_set_id.setter
    def tracking_message_event_set_id(self, tracking_message_event_set_id):
        """Sets the tracking_message_event_set_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.


        :param tracking_message_event_set_id: The tracking_message_event_set_id of this SmartPlusAdCreateBodyAdConfigurationTrackingInfo.  # noqa: E501
        :type: str
        """

        self._tracking_message_event_set_id = tracking_message_event_set_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlusAdCreateBodyAdConfigurationTrackingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlusAdCreateBodyAdConfigurationTrackingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
