# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartPlusAdCreateBodyCreativeInfoVideoInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'video_id': 'str'
    }

    attribute_map = {
        'file_name': 'file_name',
        'video_id': 'video_id'
    }

    def __init__(self, file_name=None, video_id=None):  # noqa: E501
        """SmartPlusAdCreateBodyCreativeInfoVideoInfo - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._video_id = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        self.video_id = video_id

    @property
    def file_name(self):
        """Gets the file_name of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.  # noqa: E501


        :return: The file_name of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.


        :param file_name: The file_name of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def video_id(self):
        """Gets the video_id of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.  # noqa: E501


        :return: The video_id of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.  # noqa: E501
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.


        :param video_id: The video_id of this SmartPlusAdCreateBodyCreativeInfoVideoInfo.  # noqa: E501
        :type: str
        """
        if video_id is None:
            raise ValueError("Invalid value for `video_id`, must not be `None`")  # noqa: E501

        self._video_id = video_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlusAdCreateBodyCreativeInfoVideoInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlusAdCreateBodyCreativeInfoVideoInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
