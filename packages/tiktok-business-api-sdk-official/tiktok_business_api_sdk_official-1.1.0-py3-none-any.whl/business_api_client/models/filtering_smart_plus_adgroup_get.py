# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringSmartPlusAdgroupGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adgroup_ids': 'list[str]',
        'adgroup_name': 'str',
        'campaign_ids': 'list[str]',
        'creation_filter_end_time': 'str',
        'creation_filter_start_time': 'str',
        'objective_type': 'str',
        'optimization_goal': 'str',
        'primary_status': 'str',
        'promotion_type': 'str',
        'secondary_status': 'str'
    }

    attribute_map = {
        'adgroup_ids': 'adgroup_ids',
        'adgroup_name': 'adgroup_name',
        'campaign_ids': 'campaign_ids',
        'creation_filter_end_time': 'creation_filter_end_time',
        'creation_filter_start_time': 'creation_filter_start_time',
        'objective_type': 'objective_type',
        'optimization_goal': 'optimization_goal',
        'primary_status': 'primary_status',
        'promotion_type': 'promotion_type',
        'secondary_status': 'secondary_status'
    }

    def __init__(self, adgroup_ids=None, adgroup_name=None, campaign_ids=None, creation_filter_end_time=None, creation_filter_start_time=None, objective_type=None, optimization_goal=None, primary_status=None, promotion_type=None, secondary_status=None):  # noqa: E501
        """FilteringSmartPlusAdgroupGet - a model defined in Swagger"""  # noqa: E501
        self._adgroup_ids = None
        self._adgroup_name = None
        self._campaign_ids = None
        self._creation_filter_end_time = None
        self._creation_filter_start_time = None
        self._objective_type = None
        self._optimization_goal = None
        self._primary_status = None
        self._promotion_type = None
        self._secondary_status = None
        self.discriminator = None
        if adgroup_ids is not None:
            self.adgroup_ids = adgroup_ids
        if adgroup_name is not None:
            self.adgroup_name = adgroup_name
        if campaign_ids is not None:
            self.campaign_ids = campaign_ids
        if creation_filter_end_time is not None:
            self.creation_filter_end_time = creation_filter_end_time
        if creation_filter_start_time is not None:
            self.creation_filter_start_time = creation_filter_start_time
        if objective_type is not None:
            self.objective_type = objective_type
        if optimization_goal is not None:
            self.optimization_goal = optimization_goal
        if primary_status is not None:
            self.primary_status = primary_status
        if promotion_type is not None:
            self.promotion_type = promotion_type
        if secondary_status is not None:
            self.secondary_status = secondary_status

    @property
    def adgroup_ids(self):
        """Gets the adgroup_ids of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The adgroup_ids of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: list[str]
        """
        return self._adgroup_ids

    @adgroup_ids.setter
    def adgroup_ids(self, adgroup_ids):
        """Sets the adgroup_ids of this FilteringSmartPlusAdgroupGet.


        :param adgroup_ids: The adgroup_ids of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: list[str]
        """

        self._adgroup_ids = adgroup_ids

    @property
    def adgroup_name(self):
        """Gets the adgroup_name of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The adgroup_name of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._adgroup_name

    @adgroup_name.setter
    def adgroup_name(self, adgroup_name):
        """Sets the adgroup_name of this FilteringSmartPlusAdgroupGet.


        :param adgroup_name: The adgroup_name of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._adgroup_name = adgroup_name

    @property
    def campaign_ids(self):
        """Gets the campaign_ids of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The campaign_ids of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: list[str]
        """
        return self._campaign_ids

    @campaign_ids.setter
    def campaign_ids(self, campaign_ids):
        """Sets the campaign_ids of this FilteringSmartPlusAdgroupGet.


        :param campaign_ids: The campaign_ids of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: list[str]
        """

        self._campaign_ids = campaign_ids

    @property
    def creation_filter_end_time(self):
        """Gets the creation_filter_end_time of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The creation_filter_end_time of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._creation_filter_end_time

    @creation_filter_end_time.setter
    def creation_filter_end_time(self, creation_filter_end_time):
        """Sets the creation_filter_end_time of this FilteringSmartPlusAdgroupGet.


        :param creation_filter_end_time: The creation_filter_end_time of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._creation_filter_end_time = creation_filter_end_time

    @property
    def creation_filter_start_time(self):
        """Gets the creation_filter_start_time of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The creation_filter_start_time of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._creation_filter_start_time

    @creation_filter_start_time.setter
    def creation_filter_start_time(self, creation_filter_start_time):
        """Sets the creation_filter_start_time of this FilteringSmartPlusAdgroupGet.


        :param creation_filter_start_time: The creation_filter_start_time of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._creation_filter_start_time = creation_filter_start_time

    @property
    def objective_type(self):
        """Gets the objective_type of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The objective_type of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._objective_type

    @objective_type.setter
    def objective_type(self, objective_type):
        """Sets the objective_type of this FilteringSmartPlusAdgroupGet.


        :param objective_type: The objective_type of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._objective_type = objective_type

    @property
    def optimization_goal(self):
        """Gets the optimization_goal of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The optimization_goal of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._optimization_goal

    @optimization_goal.setter
    def optimization_goal(self, optimization_goal):
        """Sets the optimization_goal of this FilteringSmartPlusAdgroupGet.


        :param optimization_goal: The optimization_goal of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._optimization_goal = optimization_goal

    @property
    def primary_status(self):
        """Gets the primary_status of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The primary_status of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._primary_status

    @primary_status.setter
    def primary_status(self, primary_status):
        """Sets the primary_status of this FilteringSmartPlusAdgroupGet.


        :param primary_status: The primary_status of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._primary_status = primary_status

    @property
    def promotion_type(self):
        """Gets the promotion_type of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The promotion_type of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._promotion_type

    @promotion_type.setter
    def promotion_type(self, promotion_type):
        """Sets the promotion_type of this FilteringSmartPlusAdgroupGet.


        :param promotion_type: The promotion_type of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._promotion_type = promotion_type

    @property
    def secondary_status(self):
        """Gets the secondary_status of this FilteringSmartPlusAdgroupGet.  # noqa: E501


        :return: The secondary_status of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :rtype: str
        """
        return self._secondary_status

    @secondary_status.setter
    def secondary_status(self, secondary_status):
        """Sets the secondary_status of this FilteringSmartPlusAdgroupGet.


        :param secondary_status: The secondary_status of this FilteringSmartPlusAdgroupGet.  # noqa: E501
        :type: str
        """

        self._secondary_status = secondary_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringSmartPlusAdgroupGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringSmartPlusAdgroupGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
