# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartPlusCampaignUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'budget': 'float',
        'campaign_id': 'str',
        'campaign_name': 'str',
        'po_number': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'budget': 'budget',
        'campaign_id': 'campaign_id',
        'campaign_name': 'campaign_name',
        'po_number': 'po_number'
    }

    def __init__(self, advertiser_id=None, budget=None, campaign_id=None, campaign_name=None, po_number=None):  # noqa: E501
        """SmartPlusCampaignUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._budget = None
        self._campaign_id = None
        self._campaign_name = None
        self._po_number = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if budget is not None:
            self.budget = budget
        self.campaign_id = campaign_id
        if campaign_name is not None:
            self.campaign_name = campaign_name
        if po_number is not None:
            self.po_number = po_number

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this SmartPlusCampaignUpdateBody.  # noqa: E501


        :return: The advertiser_id of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this SmartPlusCampaignUpdateBody.


        :param advertiser_id: The advertiser_id of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def budget(self):
        """Gets the budget of this SmartPlusCampaignUpdateBody.  # noqa: E501


        :return: The budget of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this SmartPlusCampaignUpdateBody.


        :param budget: The budget of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :type: float
        """

        self._budget = budget

    @property
    def campaign_id(self):
        """Gets the campaign_id of this SmartPlusCampaignUpdateBody.  # noqa: E501


        :return: The campaign_id of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this SmartPlusCampaignUpdateBody.


        :param campaign_id: The campaign_id of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :type: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def campaign_name(self):
        """Gets the campaign_name of this SmartPlusCampaignUpdateBody.  # noqa: E501


        :return: The campaign_name of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this SmartPlusCampaignUpdateBody.


        :param campaign_name: The campaign_name of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :type: str
        """

        self._campaign_name = campaign_name

    @property
    def po_number(self):
        """Gets the po_number of this SmartPlusCampaignUpdateBody.  # noqa: E501


        :return: The po_number of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this SmartPlusCampaignUpdateBody.


        :param po_number: The po_number of this SmartPlusCampaignUpdateBody.  # noqa: E501
        :type: str
        """

        self._po_number = po_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlusCampaignUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlusCampaignUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
