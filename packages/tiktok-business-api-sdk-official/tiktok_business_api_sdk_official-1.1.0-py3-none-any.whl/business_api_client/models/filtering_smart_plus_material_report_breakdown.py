# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class FilteringSmartPlusMaterialReportBreakdown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_text_entity_ids': 'list[str]',
        'adgroup_ids': 'list[str]',
        'call_to_action_entity_ids': 'list[str]',
        'campaign_ids': 'list[str]',
        'interactive_add_on_entity_ids': 'list[str]',
        'main_material_ids': 'list[str]',
        'main_material_types': 'list[str]',
        'smart_plus_ad_ids': 'list[str]'
    }

    attribute_map = {
        'ad_text_entity_ids': 'ad_text_entity_ids',
        'adgroup_ids': 'adgroup_ids',
        'call_to_action_entity_ids': 'call_to_action_entity_ids',
        'campaign_ids': 'campaign_ids',
        'interactive_add_on_entity_ids': 'interactive_add_on_entity_ids',
        'main_material_ids': 'main_material_ids',
        'main_material_types': 'main_material_types',
        'smart_plus_ad_ids': 'smart_plus_ad_ids'
    }

    def __init__(self, ad_text_entity_ids=None, adgroup_ids=None, call_to_action_entity_ids=None, campaign_ids=None, interactive_add_on_entity_ids=None, main_material_ids=None, main_material_types=None, smart_plus_ad_ids=None):  # noqa: E501
        """FilteringSmartPlusMaterialReportBreakdown - a model defined in Swagger"""  # noqa: E501
        self._ad_text_entity_ids = None
        self._adgroup_ids = None
        self._call_to_action_entity_ids = None
        self._campaign_ids = None
        self._interactive_add_on_entity_ids = None
        self._main_material_ids = None
        self._main_material_types = None
        self._smart_plus_ad_ids = None
        self.discriminator = None
        if ad_text_entity_ids is not None:
            self.ad_text_entity_ids = ad_text_entity_ids
        if adgroup_ids is not None:
            self.adgroup_ids = adgroup_ids
        if call_to_action_entity_ids is not None:
            self.call_to_action_entity_ids = call_to_action_entity_ids
        if campaign_ids is not None:
            self.campaign_ids = campaign_ids
        if interactive_add_on_entity_ids is not None:
            self.interactive_add_on_entity_ids = interactive_add_on_entity_ids
        if main_material_ids is not None:
            self.main_material_ids = main_material_ids
        if main_material_types is not None:
            self.main_material_types = main_material_types
        if smart_plus_ad_ids is not None:
            self.smart_plus_ad_ids = smart_plus_ad_ids

    @property
    def ad_text_entity_ids(self):
        """Gets the ad_text_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The ad_text_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._ad_text_entity_ids

    @ad_text_entity_ids.setter
    def ad_text_entity_ids(self, ad_text_entity_ids):
        """Sets the ad_text_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.


        :param ad_text_entity_ids: The ad_text_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._ad_text_entity_ids = ad_text_entity_ids

    @property
    def adgroup_ids(self):
        """Gets the adgroup_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The adgroup_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._adgroup_ids

    @adgroup_ids.setter
    def adgroup_ids(self, adgroup_ids):
        """Sets the adgroup_ids of this FilteringSmartPlusMaterialReportBreakdown.


        :param adgroup_ids: The adgroup_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._adgroup_ids = adgroup_ids

    @property
    def call_to_action_entity_ids(self):
        """Gets the call_to_action_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The call_to_action_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._call_to_action_entity_ids

    @call_to_action_entity_ids.setter
    def call_to_action_entity_ids(self, call_to_action_entity_ids):
        """Sets the call_to_action_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.


        :param call_to_action_entity_ids: The call_to_action_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._call_to_action_entity_ids = call_to_action_entity_ids

    @property
    def campaign_ids(self):
        """Gets the campaign_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The campaign_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._campaign_ids

    @campaign_ids.setter
    def campaign_ids(self, campaign_ids):
        """Sets the campaign_ids of this FilteringSmartPlusMaterialReportBreakdown.


        :param campaign_ids: The campaign_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._campaign_ids = campaign_ids

    @property
    def interactive_add_on_entity_ids(self):
        """Gets the interactive_add_on_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The interactive_add_on_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._interactive_add_on_entity_ids

    @interactive_add_on_entity_ids.setter
    def interactive_add_on_entity_ids(self, interactive_add_on_entity_ids):
        """Sets the interactive_add_on_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.


        :param interactive_add_on_entity_ids: The interactive_add_on_entity_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._interactive_add_on_entity_ids = interactive_add_on_entity_ids

    @property
    def main_material_ids(self):
        """Gets the main_material_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The main_material_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._main_material_ids

    @main_material_ids.setter
    def main_material_ids(self, main_material_ids):
        """Sets the main_material_ids of this FilteringSmartPlusMaterialReportBreakdown.


        :param main_material_ids: The main_material_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._main_material_ids = main_material_ids

    @property
    def main_material_types(self):
        """Gets the main_material_types of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The main_material_types of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._main_material_types

    @main_material_types.setter
    def main_material_types(self, main_material_types):
        """Sets the main_material_types of this FilteringSmartPlusMaterialReportBreakdown.


        :param main_material_types: The main_material_types of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._main_material_types = main_material_types

    @property
    def smart_plus_ad_ids(self):
        """Gets the smart_plus_ad_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501


        :return: The smart_plus_ad_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :rtype: list[str]
        """
        return self._smart_plus_ad_ids

    @smart_plus_ad_ids.setter
    def smart_plus_ad_ids(self, smart_plus_ad_ids):
        """Sets the smart_plus_ad_ids of this FilteringSmartPlusMaterialReportBreakdown.


        :param smart_plus_ad_ids: The smart_plus_ad_ids of this FilteringSmartPlusMaterialReportBreakdown.  # noqa: E501
        :type: list[str]
        """

        self._smart_plus_ad_ids = smart_plus_ad_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilteringSmartPlusMaterialReportBreakdown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilteringSmartPlusMaterialReportBreakdown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
