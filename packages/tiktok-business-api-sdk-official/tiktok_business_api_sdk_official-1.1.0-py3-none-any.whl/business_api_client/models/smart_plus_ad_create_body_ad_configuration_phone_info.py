# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartPlusAdCreateBodyAdConfigurationPhoneInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_number': 'str',
        'phone_region_calling_code': 'str',
        'phone_region_code': 'str'
    }

    attribute_map = {
        'phone_number': 'phone_number',
        'phone_region_calling_code': 'phone_region_calling_code',
        'phone_region_code': 'phone_region_code'
    }

    def __init__(self, phone_number=None, phone_region_calling_code=None, phone_region_code=None):  # noqa: E501
        """SmartPlusAdCreateBodyAdConfigurationPhoneInfo - a model defined in Swagger"""  # noqa: E501
        self._phone_number = None
        self._phone_region_calling_code = None
        self._phone_region_code = None
        self.discriminator = None
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_region_calling_code is not None:
            self.phone_region_calling_code = phone_region_calling_code
        if phone_region_code is not None:
            self.phone_region_code = phone_region_code

    @property
    def phone_number(self):
        """Gets the phone_number of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501


        :return: The phone_number of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.


        :param phone_number: The phone_number of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_region_calling_code(self):
        """Gets the phone_region_calling_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501


        :return: The phone_region_calling_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone_region_calling_code

    @phone_region_calling_code.setter
    def phone_region_calling_code(self, phone_region_calling_code):
        """Sets the phone_region_calling_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.


        :param phone_region_calling_code: The phone_region_calling_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501
        :type: str
        """

        self._phone_region_calling_code = phone_region_calling_code

    @property
    def phone_region_code(self):
        """Gets the phone_region_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501


        :return: The phone_region_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone_region_code

    @phone_region_code.setter
    def phone_region_code(self, phone_region_code):
        """Sets the phone_region_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.


        :param phone_region_code: The phone_region_code of this SmartPlusAdCreateBodyAdConfigurationPhoneInfo.  # noqa: E501
        :type: str
        """

        self._phone_region_code = phone_region_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlusAdCreateBodyAdConfigurationPhoneInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlusAdCreateBodyAdConfigurationPhoneInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
