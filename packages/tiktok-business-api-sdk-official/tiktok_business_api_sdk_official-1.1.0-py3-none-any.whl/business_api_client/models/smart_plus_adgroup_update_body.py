# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartPlusAdgroupUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adgroup_id': 'str',
        'adgroup_name': 'str',
        'advertiser_id': 'str',
        'bid_price': 'float',
        'budget': 'float',
        'comment_disabled': 'bool',
        'conversion_bid_price': 'float',
        'dayparting': 'str',
        'min_budget': 'float',
        'movie_premiere_date': 'str',
        'pacing': 'str',
        'roas_bid': 'float',
        'schedule_end_time': 'str',
        'schedule_start_time': 'str',
        'schedule_type': 'str',
        'share_disabled': 'bool',
        'suggestion_audience_enabled': 'bool',
        'targeting_optimization_mode': 'str',
        'targeting_spec': 'SmartPlusAdgroupCreateBodyTargetingSpec'
    }

    attribute_map = {
        'adgroup_id': 'adgroup_id',
        'adgroup_name': 'adgroup_name',
        'advertiser_id': 'advertiser_id',
        'bid_price': 'bid_price',
        'budget': 'budget',
        'comment_disabled': 'comment_disabled',
        'conversion_bid_price': 'conversion_bid_price',
        'dayparting': 'dayparting',
        'min_budget': 'min_budget',
        'movie_premiere_date': 'movie_premiere_date',
        'pacing': 'pacing',
        'roas_bid': 'roas_bid',
        'schedule_end_time': 'schedule_end_time',
        'schedule_start_time': 'schedule_start_time',
        'schedule_type': 'schedule_type',
        'share_disabled': 'share_disabled',
        'suggestion_audience_enabled': 'suggestion_audience_enabled',
        'targeting_optimization_mode': 'targeting_optimization_mode',
        'targeting_spec': 'targeting_spec'
    }

    def __init__(self, adgroup_id=None, adgroup_name=None, advertiser_id=None, bid_price=None, budget=None, comment_disabled=None, conversion_bid_price=None, dayparting=None, min_budget=None, movie_premiere_date=None, pacing=None, roas_bid=None, schedule_end_time=None, schedule_start_time=None, schedule_type=None, share_disabled=None, suggestion_audience_enabled=None, targeting_optimization_mode=None, targeting_spec=None):  # noqa: E501
        """SmartPlusAdgroupUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._adgroup_id = None
        self._adgroup_name = None
        self._advertiser_id = None
        self._bid_price = None
        self._budget = None
        self._comment_disabled = None
        self._conversion_bid_price = None
        self._dayparting = None
        self._min_budget = None
        self._movie_premiere_date = None
        self._pacing = None
        self._roas_bid = None
        self._schedule_end_time = None
        self._schedule_start_time = None
        self._schedule_type = None
        self._share_disabled = None
        self._suggestion_audience_enabled = None
        self._targeting_optimization_mode = None
        self._targeting_spec = None
        self.discriminator = None
        self.adgroup_id = adgroup_id
        if adgroup_name is not None:
            self.adgroup_name = adgroup_name
        self.advertiser_id = advertiser_id
        if bid_price is not None:
            self.bid_price = bid_price
        if budget is not None:
            self.budget = budget
        if comment_disabled is not None:
            self.comment_disabled = comment_disabled
        if conversion_bid_price is not None:
            self.conversion_bid_price = conversion_bid_price
        if dayparting is not None:
            self.dayparting = dayparting
        if min_budget is not None:
            self.min_budget = min_budget
        if movie_premiere_date is not None:
            self.movie_premiere_date = movie_premiere_date
        if pacing is not None:
            self.pacing = pacing
        if roas_bid is not None:
            self.roas_bid = roas_bid
        if schedule_end_time is not None:
            self.schedule_end_time = schedule_end_time
        if schedule_start_time is not None:
            self.schedule_start_time = schedule_start_time
        if schedule_type is not None:
            self.schedule_type = schedule_type
        if share_disabled is not None:
            self.share_disabled = share_disabled
        if suggestion_audience_enabled is not None:
            self.suggestion_audience_enabled = suggestion_audience_enabled
        if targeting_optimization_mode is not None:
            self.targeting_optimization_mode = targeting_optimization_mode
        if targeting_spec is not None:
            self.targeting_spec = targeting_spec

    @property
    def adgroup_id(self):
        """Gets the adgroup_id of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The adgroup_id of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._adgroup_id

    @adgroup_id.setter
    def adgroup_id(self, adgroup_id):
        """Sets the adgroup_id of this SmartPlusAdgroupUpdateBody.


        :param adgroup_id: The adgroup_id of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """
        if adgroup_id is None:
            raise ValueError("Invalid value for `adgroup_id`, must not be `None`")  # noqa: E501

        self._adgroup_id = adgroup_id

    @property
    def adgroup_name(self):
        """Gets the adgroup_name of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The adgroup_name of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._adgroup_name

    @adgroup_name.setter
    def adgroup_name(self, adgroup_name):
        """Sets the adgroup_name of this SmartPlusAdgroupUpdateBody.


        :param adgroup_name: The adgroup_name of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._adgroup_name = adgroup_name

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The advertiser_id of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this SmartPlusAdgroupUpdateBody.


        :param advertiser_id: The advertiser_id of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def bid_price(self):
        """Gets the bid_price of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The bid_price of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: float
        """
        return self._bid_price

    @bid_price.setter
    def bid_price(self, bid_price):
        """Sets the bid_price of this SmartPlusAdgroupUpdateBody.


        :param bid_price: The bid_price of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: float
        """

        self._bid_price = bid_price

    @property
    def budget(self):
        """Gets the budget of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The budget of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this SmartPlusAdgroupUpdateBody.


        :param budget: The budget of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: float
        """

        self._budget = budget

    @property
    def comment_disabled(self):
        """Gets the comment_disabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The comment_disabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: bool
        """
        return self._comment_disabled

    @comment_disabled.setter
    def comment_disabled(self, comment_disabled):
        """Sets the comment_disabled of this SmartPlusAdgroupUpdateBody.


        :param comment_disabled: The comment_disabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: bool
        """

        self._comment_disabled = comment_disabled

    @property
    def conversion_bid_price(self):
        """Gets the conversion_bid_price of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The conversion_bid_price of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: float
        """
        return self._conversion_bid_price

    @conversion_bid_price.setter
    def conversion_bid_price(self, conversion_bid_price):
        """Sets the conversion_bid_price of this SmartPlusAdgroupUpdateBody.


        :param conversion_bid_price: The conversion_bid_price of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: float
        """

        self._conversion_bid_price = conversion_bid_price

    @property
    def dayparting(self):
        """Gets the dayparting of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The dayparting of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._dayparting

    @dayparting.setter
    def dayparting(self, dayparting):
        """Sets the dayparting of this SmartPlusAdgroupUpdateBody.


        :param dayparting: The dayparting of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._dayparting = dayparting

    @property
    def min_budget(self):
        """Gets the min_budget of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The min_budget of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: float
        """
        return self._min_budget

    @min_budget.setter
    def min_budget(self, min_budget):
        """Sets the min_budget of this SmartPlusAdgroupUpdateBody.


        :param min_budget: The min_budget of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: float
        """

        self._min_budget = min_budget

    @property
    def movie_premiere_date(self):
        """Gets the movie_premiere_date of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The movie_premiere_date of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._movie_premiere_date

    @movie_premiere_date.setter
    def movie_premiere_date(self, movie_premiere_date):
        """Sets the movie_premiere_date of this SmartPlusAdgroupUpdateBody.


        :param movie_premiere_date: The movie_premiere_date of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._movie_premiere_date = movie_premiere_date

    @property
    def pacing(self):
        """Gets the pacing of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The pacing of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._pacing

    @pacing.setter
    def pacing(self, pacing):
        """Sets the pacing of this SmartPlusAdgroupUpdateBody.


        :param pacing: The pacing of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._pacing = pacing

    @property
    def roas_bid(self):
        """Gets the roas_bid of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The roas_bid of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: float
        """
        return self._roas_bid

    @roas_bid.setter
    def roas_bid(self, roas_bid):
        """Sets the roas_bid of this SmartPlusAdgroupUpdateBody.


        :param roas_bid: The roas_bid of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: float
        """

        self._roas_bid = roas_bid

    @property
    def schedule_end_time(self):
        """Gets the schedule_end_time of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The schedule_end_time of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._schedule_end_time

    @schedule_end_time.setter
    def schedule_end_time(self, schedule_end_time):
        """Sets the schedule_end_time of this SmartPlusAdgroupUpdateBody.


        :param schedule_end_time: The schedule_end_time of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._schedule_end_time = schedule_end_time

    @property
    def schedule_start_time(self):
        """Gets the schedule_start_time of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The schedule_start_time of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._schedule_start_time

    @schedule_start_time.setter
    def schedule_start_time(self, schedule_start_time):
        """Sets the schedule_start_time of this SmartPlusAdgroupUpdateBody.


        :param schedule_start_time: The schedule_start_time of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._schedule_start_time = schedule_start_time

    @property
    def schedule_type(self):
        """Gets the schedule_type of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The schedule_type of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this SmartPlusAdgroupUpdateBody.


        :param schedule_type: The schedule_type of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._schedule_type = schedule_type

    @property
    def share_disabled(self):
        """Gets the share_disabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The share_disabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: bool
        """
        return self._share_disabled

    @share_disabled.setter
    def share_disabled(self, share_disabled):
        """Sets the share_disabled of this SmartPlusAdgroupUpdateBody.


        :param share_disabled: The share_disabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: bool
        """

        self._share_disabled = share_disabled

    @property
    def suggestion_audience_enabled(self):
        """Gets the suggestion_audience_enabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The suggestion_audience_enabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: bool
        """
        return self._suggestion_audience_enabled

    @suggestion_audience_enabled.setter
    def suggestion_audience_enabled(self, suggestion_audience_enabled):
        """Sets the suggestion_audience_enabled of this SmartPlusAdgroupUpdateBody.


        :param suggestion_audience_enabled: The suggestion_audience_enabled of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: bool
        """

        self._suggestion_audience_enabled = suggestion_audience_enabled

    @property
    def targeting_optimization_mode(self):
        """Gets the targeting_optimization_mode of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The targeting_optimization_mode of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: str
        """
        return self._targeting_optimization_mode

    @targeting_optimization_mode.setter
    def targeting_optimization_mode(self, targeting_optimization_mode):
        """Sets the targeting_optimization_mode of this SmartPlusAdgroupUpdateBody.


        :param targeting_optimization_mode: The targeting_optimization_mode of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: str
        """

        self._targeting_optimization_mode = targeting_optimization_mode

    @property
    def targeting_spec(self):
        """Gets the targeting_spec of this SmartPlusAdgroupUpdateBody.  # noqa: E501


        :return: The targeting_spec of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :rtype: SmartPlusAdgroupCreateBodyTargetingSpec
        """
        return self._targeting_spec

    @targeting_spec.setter
    def targeting_spec(self, targeting_spec):
        """Sets the targeting_spec of this SmartPlusAdgroupUpdateBody.


        :param targeting_spec: The targeting_spec of this SmartPlusAdgroupUpdateBody.  # noqa: E501
        :type: SmartPlusAdgroupCreateBodyTargetingSpec
        """

        self._targeting_spec = targeting_spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlusAdgroupUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlusAdgroupUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
