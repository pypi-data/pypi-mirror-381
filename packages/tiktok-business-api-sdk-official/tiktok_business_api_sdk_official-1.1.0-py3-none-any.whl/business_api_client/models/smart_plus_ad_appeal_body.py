# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartPlusAdAppealBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertiser_id': 'str',
        'appeal_reason': 'str',
        'attachment_list': 'list[str]',
        'smart_plus_ad_id': 'str'
    }

    attribute_map = {
        'advertiser_id': 'advertiser_id',
        'appeal_reason': 'appeal_reason',
        'attachment_list': 'attachment_list',
        'smart_plus_ad_id': 'smart_plus_ad_id'
    }

    def __init__(self, advertiser_id=None, appeal_reason=None, attachment_list=None, smart_plus_ad_id=None):  # noqa: E501
        """SmartPlusAdAppealBody - a model defined in Swagger"""  # noqa: E501
        self._advertiser_id = None
        self._appeal_reason = None
        self._attachment_list = None
        self._smart_plus_ad_id = None
        self.discriminator = None
        self.advertiser_id = advertiser_id
        if appeal_reason is not None:
            self.appeal_reason = appeal_reason
        if attachment_list is not None:
            self.attachment_list = attachment_list
        self.smart_plus_ad_id = smart_plus_ad_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this SmartPlusAdAppealBody.  # noqa: E501


        :return: The advertiser_id of this SmartPlusAdAppealBody.  # noqa: E501
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this SmartPlusAdAppealBody.


        :param advertiser_id: The advertiser_id of this SmartPlusAdAppealBody.  # noqa: E501
        :type: str
        """
        if advertiser_id is None:
            raise ValueError("Invalid value for `advertiser_id`, must not be `None`")  # noqa: E501

        self._advertiser_id = advertiser_id

    @property
    def appeal_reason(self):
        """Gets the appeal_reason of this SmartPlusAdAppealBody.  # noqa: E501


        :return: The appeal_reason of this SmartPlusAdAppealBody.  # noqa: E501
        :rtype: str
        """
        return self._appeal_reason

    @appeal_reason.setter
    def appeal_reason(self, appeal_reason):
        """Sets the appeal_reason of this SmartPlusAdAppealBody.


        :param appeal_reason: The appeal_reason of this SmartPlusAdAppealBody.  # noqa: E501
        :type: str
        """

        self._appeal_reason = appeal_reason

    @property
    def attachment_list(self):
        """Gets the attachment_list of this SmartPlusAdAppealBody.  # noqa: E501


        :return: The attachment_list of this SmartPlusAdAppealBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_list

    @attachment_list.setter
    def attachment_list(self, attachment_list):
        """Sets the attachment_list of this SmartPlusAdAppealBody.


        :param attachment_list: The attachment_list of this SmartPlusAdAppealBody.  # noqa: E501
        :type: list[str]
        """

        self._attachment_list = attachment_list

    @property
    def smart_plus_ad_id(self):
        """Gets the smart_plus_ad_id of this SmartPlusAdAppealBody.  # noqa: E501


        :return: The smart_plus_ad_id of this SmartPlusAdAppealBody.  # noqa: E501
        :rtype: str
        """
        return self._smart_plus_ad_id

    @smart_plus_ad_id.setter
    def smart_plus_ad_id(self, smart_plus_ad_id):
        """Sets the smart_plus_ad_id of this SmartPlusAdAppealBody.


        :param smart_plus_ad_id: The smart_plus_ad_id of this SmartPlusAdAppealBody.  # noqa: E501
        :type: str
        """
        if smart_plus_ad_id is None:
            raise ValueError("Invalid value for `smart_plus_ad_id`, must not be `None`")  # noqa: E501

        self._smart_plus_ad_id = smart_plus_ad_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlusAdAppealBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlusAdAppealBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
