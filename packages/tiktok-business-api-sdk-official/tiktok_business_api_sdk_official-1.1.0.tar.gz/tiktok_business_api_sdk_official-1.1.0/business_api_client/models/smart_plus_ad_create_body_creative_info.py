# coding: utf-8

"""
 Copyright 2023 TikTok Pte. Ltd.

 This source code is licensed under the MIT license found in
 the LICENSE file in the root directory of this source tree.
"""
import pprint
import re  # noqa: F401

import six

class SmartPlusAdCreateBodyCreativeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_format': 'str',
        'aigc_disclosure_type': 'str',
        'identity_authorized_bc_id': 'str',
        'identity_id': 'str',
        'identity_type': 'str',
        'image_info': 'list[SmartPlusAdCreateBodyCreativeInfoImageInfo]',
        'music_info': 'SmartPlusAdCreateBodyCreativeInfoMusicInfo',
        'tiktok_item_id': 'str',
        'video_info': 'SmartPlusAdCreateBodyCreativeInfoVideoInfo'
    }

    attribute_map = {
        'ad_format': 'ad_format',
        'aigc_disclosure_type': 'aigc_disclosure_type',
        'identity_authorized_bc_id': 'identity_authorized_bc_id',
        'identity_id': 'identity_id',
        'identity_type': 'identity_type',
        'image_info': 'image_info',
        'music_info': 'music_info',
        'tiktok_item_id': 'tiktok_item_id',
        'video_info': 'video_info'
    }

    def __init__(self, ad_format=None, aigc_disclosure_type=None, identity_authorized_bc_id=None, identity_id=None, identity_type=None, image_info=None, music_info=None, tiktok_item_id=None, video_info=None):  # noqa: E501
        """SmartPlusAdCreateBodyCreativeInfo - a model defined in Swagger"""  # noqa: E501
        self._ad_format = None
        self._aigc_disclosure_type = None
        self._identity_authorized_bc_id = None
        self._identity_id = None
        self._identity_type = None
        self._image_info = None
        self._music_info = None
        self._tiktok_item_id = None
        self._video_info = None
        self.discriminator = None
        self.ad_format = ad_format
        if aigc_disclosure_type is not None:
            self.aigc_disclosure_type = aigc_disclosure_type
        if identity_authorized_bc_id is not None:
            self.identity_authorized_bc_id = identity_authorized_bc_id
        if identity_id is not None:
            self.identity_id = identity_id
        if identity_type is not None:
            self.identity_type = identity_type
        if image_info is not None:
            self.image_info = image_info
        if music_info is not None:
            self.music_info = music_info
        if tiktok_item_id is not None:
            self.tiktok_item_id = tiktok_item_id
        if video_info is not None:
            self.video_info = video_info

    @property
    def ad_format(self):
        """Gets the ad_format of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The ad_format of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: str
        """
        return self._ad_format

    @ad_format.setter
    def ad_format(self, ad_format):
        """Sets the ad_format of this SmartPlusAdCreateBodyCreativeInfo.


        :param ad_format: The ad_format of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: str
        """
        if ad_format is None:
            raise ValueError("Invalid value for `ad_format`, must not be `None`")  # noqa: E501

        self._ad_format = ad_format

    @property
    def aigc_disclosure_type(self):
        """Gets the aigc_disclosure_type of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The aigc_disclosure_type of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: str
        """
        return self._aigc_disclosure_type

    @aigc_disclosure_type.setter
    def aigc_disclosure_type(self, aigc_disclosure_type):
        """Sets the aigc_disclosure_type of this SmartPlusAdCreateBodyCreativeInfo.


        :param aigc_disclosure_type: The aigc_disclosure_type of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: str
        """

        self._aigc_disclosure_type = aigc_disclosure_type

    @property
    def identity_authorized_bc_id(self):
        """Gets the identity_authorized_bc_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The identity_authorized_bc_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: str
        """
        return self._identity_authorized_bc_id

    @identity_authorized_bc_id.setter
    def identity_authorized_bc_id(self, identity_authorized_bc_id):
        """Sets the identity_authorized_bc_id of this SmartPlusAdCreateBodyCreativeInfo.


        :param identity_authorized_bc_id: The identity_authorized_bc_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: str
        """

        self._identity_authorized_bc_id = identity_authorized_bc_id

    @property
    def identity_id(self):
        """Gets the identity_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The identity_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this SmartPlusAdCreateBodyCreativeInfo.


        :param identity_id: The identity_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: str
        """

        self._identity_id = identity_id

    @property
    def identity_type(self):
        """Gets the identity_type of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The identity_type of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this SmartPlusAdCreateBodyCreativeInfo.


        :param identity_type: The identity_type of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: str
        """

        self._identity_type = identity_type

    @property
    def image_info(self):
        """Gets the image_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The image_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: list[SmartPlusAdCreateBodyCreativeInfoImageInfo]
        """
        return self._image_info

    @image_info.setter
    def image_info(self, image_info):
        """Sets the image_info of this SmartPlusAdCreateBodyCreativeInfo.


        :param image_info: The image_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: list[SmartPlusAdCreateBodyCreativeInfoImageInfo]
        """

        self._image_info = image_info

    @property
    def music_info(self):
        """Gets the music_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The music_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: SmartPlusAdCreateBodyCreativeInfoMusicInfo
        """
        return self._music_info

    @music_info.setter
    def music_info(self, music_info):
        """Sets the music_info of this SmartPlusAdCreateBodyCreativeInfo.


        :param music_info: The music_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: SmartPlusAdCreateBodyCreativeInfoMusicInfo
        """

        self._music_info = music_info

    @property
    def tiktok_item_id(self):
        """Gets the tiktok_item_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The tiktok_item_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: str
        """
        return self._tiktok_item_id

    @tiktok_item_id.setter
    def tiktok_item_id(self, tiktok_item_id):
        """Sets the tiktok_item_id of this SmartPlusAdCreateBodyCreativeInfo.


        :param tiktok_item_id: The tiktok_item_id of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: str
        """

        self._tiktok_item_id = tiktok_item_id

    @property
    def video_info(self):
        """Gets the video_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501


        :return: The video_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :rtype: SmartPlusAdCreateBodyCreativeInfoVideoInfo
        """
        return self._video_info

    @video_info.setter
    def video_info(self, video_info):
        """Sets the video_info of this SmartPlusAdCreateBodyCreativeInfo.


        :param video_info: The video_info of this SmartPlusAdCreateBodyCreativeInfo.  # noqa: E501
        :type: SmartPlusAdCreateBodyCreativeInfoVideoInfo
        """

        self._video_info = video_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlusAdCreateBodyCreativeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlusAdCreateBodyCreativeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
