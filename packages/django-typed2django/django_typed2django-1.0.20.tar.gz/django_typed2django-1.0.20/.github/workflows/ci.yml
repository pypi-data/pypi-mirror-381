name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        django-version: ["3.2", "4.0", "4.1", "4.2", "5.0"]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          # Exclude incompatible combinations
          - django-version: "5.0"
            python-version: "3.8"
          - django-version: "5.0"
            python-version: "3.9"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.django-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ matrix.django-version }}-

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install "django==${{ matrix.django-version }}"
          uv pip install -e ".[dev]"

      - name: Run tests
        run: |
          uv run pytest --cov=src/django_admin_magic --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"

      - name: Run linting
        run: |
          uv run ruff check .
          uv run ruff format --check .

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"

      - name: Run security checks
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json || true
          uv run bandit -r src/ -f txt -o bandit-report.txt

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.*

  update-badges:
    uses: ./.github/workflows/update-badges.yml
    if: github.ref == 'refs/heads/main'
    needs: [test, lint, security]
    permissions:
      contents: write
      pull-requests: write
    with:
      skip_ci: "true"
