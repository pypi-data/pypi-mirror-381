@mdc.mdc

# Git Checkin Standards for Pydantic2django

## Commit Message Format
Follow the conventional commit format for all commits:

```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Types
- **feat**: New feature implementation
- **fix**: Bug fix
- **docs**: Documentation changes
- **style**: Code style changes (formatting, etc.)
- **refactor**: Code refactoring
- **test**: Adding or updating tests
- **chore**: Maintenance tasks, dependencies, etc.

### Scopes
- **core**: Core functionality changes
- **django**: Django-specific changes
- **pydantic**: Pydantic-specific changes
- **dataclass**: Dataclass functionality
- **typedclass**: TypedClass functionality
- **xmlschema**: XML Schema functionality
- **tests**: Test-related changes
- **docs**: Documentation changes

### Examples
```
feat(core): add bidirectional type mapping for optional fields
fix(django): resolve field requirement validation in Pydantic generation
docs(changenotes): add comprehensive fix summary for validation issue
test(dj2pyd): add tests for field requirement fix
```

## Branch Naming
Use descriptive branch names that reflect the work being done:

- **feature/**: New features (e.g., `feature/optional-field-fix`)
- **fix/**: Bug fixes (e.g., `fix/pydantic-validation-error`)
- **docs/**: Documentation updates (e.g., `docs/changenotes-standards`)
- **refactor/**: Code refactoring (e.g., `refactor/bidirectional-mapper`)
- **test/**: Test improvements (e.g., `test/field-requirement-coverage`)

## Integration with Changenotes
When creating significant changes:

1. **Create changenote first**: Write the changenote in `[changenotes/](mdc:changenotes/)` before making changes
2. **Branch naming**: Use the changenote name to inform branch naming
3. **Commit references**: Include changenote filename in commit messages when applicable
4. **Final update**: Update changenote with final implementation details before merge

### Example Workflow
```bash
# 1. Create changenote
echo "# Pydantic Validation Fix Summary" > changenotes/PYDANTIC_VALIDATION_FIX_SUMMARY.md

# 2. Create feature branch
git checkout -b fix/pydantic-field-requirement

# 3. Make changes with descriptive commits
git commit -m "fix(core): set default=None for optional fields in BidirectionalTypeMapper"
git commit -m "fix(django): update fallback logic to check dj_field.null"
git commit -m "test(dj2pyd): add comprehensive tests for field requirement fix"

# 4. Update changenote with final details
# Edit changenotes/PYDANTIC_VALIDATION_FIX_SUMMARY.md

# 5. Final commit
git commit -m "docs(changenotes): finalize Pydantic validation fix summary"
```

## Pull Request Standards
When creating pull requests:

1. **Title**: Use conventional commit format
2. **Description**: Include:
   - Summary of changes
   - Reference to changenote if applicable
   - Testing performed
   - Impact on existing functionality
3. **Changenote**: Link to or include changenote content
4. **Tests**: Ensure all tests pass and new tests are added

### PR Description Template
```markdown
## Summary
Brief description of the changes made.

## Changes
- [ ] Change 1
- [ ] Change 2
- [ ] Change 3

## Testing
- [ ] All existing tests pass
- [ ] New tests added for functionality
- [ ] Demo scripts run successfully
- [ ] No regressions introduced

## Changenote
See: [changenotes/CHANGENOTE_NAME.md](mdc:changenotes/CHANGENOTE_NAME.md)

## Impact
- Before: ❌ What didn't work
- After: ✅ What now works
```

## Quality Gates
Before merging any PR:

- [ ] All tests pass
- [ ] Code follows project style guidelines
- [ ] Documentation is updated
- [ ] Changenote is complete and accurate
- [ ] No breaking changes without proper documentation
- [ ] Performance impact assessed (if applicable)

## Release Integration
For release-related changes:

1. **Version bump**: Update version in `pyproject.toml`
2. **Changelog**: Update `CHANGELOG.md` with release notes
3. **Tagging**: Create git tag with version number
4. **Changenotes**: Ensure all relevant changenotes are included in release notes

### Release Commit Example
```
chore(release): bump version to 1.2.0

- Add Pydantic field requirement fix
- Include comprehensive changenotes
- Update documentation
```

- Document all significant changes in changenotes
- Ensure code quality standards are maintained
</rule>
