# Changenotes Standards for Pydantic2django

## Overview
Changenotes should be created for significant changes, bug fixes, and feature implementations. They provide a clear record of what was changed, why it was changed, and how it impacts users.

## File Location and Naming
- **Directory**: All changenotes should be stored in `[changenotes/](mdc:changenotes/)`
- **Naming Convention**: Use descriptive names with underscores: `FEATURE_NAME_SUMMARY.md` or `BUG_FIX_SUMMARY.md`
- **Branch Tagging**: Include the branch name in the filename or as a prefix: `BRANCH_NAME_FEATURE_SUMMARY.md`

## Changenote Structure
Follow this template for all changenotes:

```markdown
# [Feature/Bug Fix] Title

## Summary
Brief description of what was implemented or fixed.

## Problem Description
Detailed explanation of the issue or requirement.

### Root Cause (for bug fixes)
Technical explanation of why the problem occurred.

## Solution Implemented
Step-by-step breakdown of the changes made.

### Files Modified
List of files that were changed with brief descriptions.

## Testing
Description of tests added or modified.

### Test Cases Added
- Test name and purpose
- Test name and purpose

### Demo Scripts (if applicable)
Description of any demonstration scripts created.

## Impact
### Before the Fix/Implementation
- ❌ What didn't work
- ❌ Problems users faced

### After the Fix/Implementation
- ✅ What now works
- ✅ Benefits to users

## Technical Details
### Key Changes
1. **Component Name**: What was changed
2. **Component Name**: What was changed

### Verification
- ✅ All existing tests pass
- ✅ New tests specifically for the change pass
- ✅ Demo scripts run successfully
- ✅ No regressions introduced

## Usage
How to use the new feature or how the fix affects existing usage.

### Example (if applicable)
```python
# Code example showing the new functionality
```

## Conclusion
Summary of the overall impact and benefits.
```

## When to Create Changenotes
Create changenotes for:
- **Bug Fixes**: When resolving issues that affect functionality
- **Feature Implementations**: When adding new capabilities
- **Breaking Changes**: When API changes require user updates
- **Performance Improvements**: When significant optimizations are made
- **Security Fixes**: When addressing security vulnerabilities

## Branch Integration
- **Branch Name**: Include the Git branch name in the changenote filename
- **Version Tagging**: Consider adding version numbers for release-related changes
- **Cross-Reference**: Link to related issues, pull requests, or discussions

## Examples
Reference existing changenotes like [PYDANTIC_VALIDATION_FIX_SUMMARY.md](mdc:changenotes/PYDANTIC_VALIDATION_FIX_SUMMARY.md) for examples of well-structured changenotes.

## Quality Checklist
Before finalizing a changenote:
- [ ] All sections are complete and accurate
- [ ] Technical details are clear and precise
- [ ] Impact is clearly explained
- [ ] Examples are provided where helpful
- [ ] File is properly named and located in changenotes directory
- [ ] Branch name is included in filename or content

- Reference related issues or PRs
- Update if changes are made after initial creation
</rule>
