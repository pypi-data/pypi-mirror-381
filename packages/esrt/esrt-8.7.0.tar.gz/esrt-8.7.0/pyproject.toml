[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "esrt"
version = "8.7.0"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "certifi>=2025.8.3",
  "elasticsearch==6.8.2",
  "ipython>=8.18.1",
  "pydantic>=2.10.6",
  "pydantic-settings>=2.8.1",
  "rich>=13.9.4",
  "typing-extensions>=4.12.2",
  # uvicorn.importer.import_from_string
  "uvicorn>=0.2.14",
]

scripts.esrt = "esrt.__main__:main"

[tool.ruff]
# https://docs.astral.sh/ruff/settings/
line-length = 120
fix = true
show-fixes = true
output-format = "full"

format.quote-style = "single"
# https://docs.astral.sh/ruff/rules/
lint.extend-select = [
  "A",      # flake8-builtins
  "AIR",    # Airflow
  "ANN",    # flake8-annotations
  "ANN001", # missing-type-function-argument
  "ANN401", # any-type
  "ARG",    # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "C90",    # mccabe
  "COM",    # flake8-commas
  # "CPY",    # flake8-copyright
  # "D",  # pydocstyle
  "DJ", # flake8-django
  # "DOC",    # pydoclint
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle Error
  "EM",   # flake8-errmsg
  "ERA",  # eradicate
  "EXE",  # flake8-executable
  "F",    # Pyflakes
  "FA",   # flake8-future-annotations
  "FAST", # FastAPI
  "FBT",  # flake8-boolean-trap
  "FIX",  # flake8-fixme
  "FLY",  # flynt
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "NPY",  # NumPy-specific rules
  "PD",   # pandas-vet
  "PERF", # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # Pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TC",   # flake8-type-checking
  "TD",   # flake8-todos
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle Warning
  "YTT",  # flake8-2020
]
lint.extend-ignore = [
  "COM812",
  "ERA001",
  "FA100",
  "FA102",
  "FIX002",
  "G004",
  "INP001",
  "ISC001",
  "PLR2044",
  "Q000",
  "Q003",
  "RET504",
  "RUF002",
  "S101",
  "T201",
  "TC006",
  "TD002",
  "TD003",
]
lint.flake8-import-conventions.aliases.typing = "t"
lint.flake8-import-conventions.banned-from = [ "typing" ]
lint.isort.force-single-line = true
lint.isort.force-sort-within-sections = true
lint.isort.known-local-folder = [  ]
# https://beta.ruff.rs/docs/settings/#isort
lint.isort.lines-after-imports = 2

[tool.pytest.ini_options]
# https://docs.pytest.org/en/stable/reference/reference.html
# https://docs.pytest.org/en/stable/explanation/goodpractices.html
# https://docs.pytest.org/en/stable/example/pythoncollection.html
addopts = "--import-mode=importlib -r fEsxX --disable-warnings --showlocals --tb=short"
# --cov --cov-report=term --cov-report=html
# --exitfirst
# --failed-first
# pytest-xdist

testpaths = [
  #
  "libs/logging_config",
]

[tool.mypy]
ignore_missing_imports = true

[tool.semantic_release]
# https://python-semantic-release.readthedocs.io/en/latest/configuration.html
version_toml = [ "pyproject.toml:project.version" ]
version_variables = [ "src/esrt/__version__.py:VERSION" ]
# build_command = "pip install pdm && pdm build"
