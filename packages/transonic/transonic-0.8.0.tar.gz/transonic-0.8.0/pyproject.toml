[build-system]
requires = [
    "pdm-backend>=2.4.0",
]
build-backend = "pdm.backend"

[project]
name = "transonic"
version = "0.8.0"
description = "Make your Python code fly at transonic speeds!"
authors = [
    { name = "Pierre Augier", email = "pierre.augier@univ-grenoble-alpes.fr" },
]
dependencies = [
    "autopep8",
    "beniget ~=0.4.2",
    "gast ~=0.6.0",
    "numpy",
]
requires-python = ">= 3.11"
readme = "README.md"
license = "BSD-3-Clause"
license-files = [
    "LICENSE.txt",
]
keywords = [
    "pythran",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]

[project.urls]
Source = "https://foss.heptapod.net/fluiddyn/transonic"
Documentation = "https://transonic.readthedocs.io"
"Git Mirror" = "https://github.com/fluiddyn/transonic"

[project.optional-dependencies]
mpi = [
    "mpi4py",
]

[project.scripts]
transonic = "transonic.run:run"
transonic-get-include = "transonic_cl.get_includes:main"
transonic-init-meson = "transonic_cl.init_meson:main"
transonic-clean-dir = "transonic_cl.clean_dir:main"

[tool.pdm]
distribution = true
package-dir = "src"
ignore_package_warnings = [
    "ipython",
]

[tool.pdm.scripts]
black = "black src _transonic_testing data_tests tests doc noxfile.py"
isort = "isort --atomic --tc src _transonic_testing tests doc noxfile.py"
black_check = "black --check src _transonic_testing data_tests tests doc noxfile.py"

[tool.pdm.scripts.lint]
shell = "pylint -rn --rcfile=pylintrc --jobs=$(nproc) src --exit-zero"

[tool.pdm.scripts.validate_code]
composite = [
    "black_check",
    "lint",
]

[tool.pdm.scripts.format]
composite = [
    "black",
    "isort",
]

[tool.pytest]
addopts = "--doctest-modules"

[tool.pytest.ini_options]
addopts = "--pdbcls=IPython.terminal.debugger:TerminalPdb"

[tool.black]
line-length = 82
target-version = [
    "py311",
]

[tool.isort]
profile = "black"
line_length = 82
src_paths = [
    "src",
    "_transonic_testing",
    "tests",
    "doc",
    "noxfile.py",
]
known_first_party = [
    "pythran",
]

[tool.coverage.run]
branch = true
source = [
    "./src/transonic",
    "./src/transonic_cl",
    "./tests",
]
data_file = ".coverage/coverage"
omit = [
    "*/try_*.py",
    "*/_old_*.py",
    "transonic/__pythran__/for_test_init.py",
    "transonic/__cython__/for_test_init.py",
    "transonic/__numba__/for_test_init.py",
]
parallel = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
ignore_errors = true

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.xml]
output = ".coverage/coverage.xml"

[dependency-groups]
base-test = [
    "black",
    "coverage[toml]",
    "mpi4py",
    "nbval ~=0.9.6",
    "pytest",
    "pytest-cov",
    "pytest-venv",
    "scipy",
    "setuptools",
    "-e transonic_testing @ file:///${PROJECT_ROOT}/_transonic_testing",
]
test = [
    "cython",
    "mpi4py",
    "pythran",
    "numba",
    "jax>=0.4.25",
    "jaxlib>=0.4.25",
]
doc = [
    "jupyterlab",
    "myst-nb",
    "numpydoc",
    "recommonmark",
    "sphinx-autobuild",
    "sphinx<7",
    "sphinx_rtd_theme",
    "setuptools",
    "sphinx-copybutton",
]
dev = [
    "pip",
    "build",
    "pylint",
    "twine",
    "ipdb",
]
