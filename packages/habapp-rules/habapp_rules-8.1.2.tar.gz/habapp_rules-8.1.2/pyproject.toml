[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "habapp_rules"
description = "Basic rules for HABApp"
long_description = "Basic rules for HABApp"
authors = [{ name = "Seuling N." }]
license = "Apache-2.0"
dynamic = ["dependencies", "optional-dependencies", "version"]
requires-python = ">=3.10"


[tool.coverage]
branch = true
concurrency = "thread"
context = "(empty)"
disable_warnings = ["module-not-imported"]
dynamic_context = "test_function"
source = ["habapp_rules", "tests"]
omit = ["*oh_item.py", "*rule_runner.py", "*run_unittest.py", "*__version__.py"]


[tool.coverage.exclude_lines]
pragma = "no cover"
if_main = "if __name__ == \"__main__\":"
if_typing = "if typing.TYPE_CHECKING:"
typing_overload = "@(typing.)?overload"

[tool.coverage.report]
fail_under = 100
skip_covered = true
omit = ["*/helper/graph_machines.py", "*oh_item.py", "*rule_runner.py", "tests/helper/async_helper.py"]


[tool.hatch.build.targets.wheel]
include = ["habapp_rules"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["pre-commit"]
[tool.hatch.envs.lint.scripts]
check = "pre-commit run --all-files"

[tool.hatch.envs.publish]
detached = true

[tool.hatch.envs.tests]
dependencies = ["coverage", "pytest", "graphviz"]


[tool.hatch.envs.tests.scripts]
local = "coverage run tests/run_unittest.py && coverage html --skip-covered --fail-under=100"



[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]

[tool.hatch.metadata] # remove when HABApp dev is released
allow-direct-references = true

[tool.hatch.version]
path = "habapp_rules/__init__.py"

#[tool.mypy]
#python_version = 3.12
#files = "habapp_rules"
#plugins = "pydantic.mypy"
#exclude = "tests"
#check_untyped_defs = true
#disallow_any_generics = true
#disallow_incomplete_defs = true
#disallow_untyped_calls = true
#extra_checks = true
#follow_imports = "silent"
#local_partial_types = true
#no_implicit_reexport = true
#show_error_codes = true
#strict_equality = true
#warn_redundant_casts = true
#warn_return_any = true
#warn_unused_configs = true
#warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["pydantic.*"]
ignore_missing_imports = true
no_implicit_reexport = false

[tool.ruff]
indent-width = 4
line-length = 250
preview = true
exclude=["*rule_runner.py"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812", # Missing trailing commas
    "CPY", # Missing copyright notice
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "DOC502", # Raised exception is not explicitly raised
    "DTZ001", # datetime.datetime() called without a tzinfo argument
    "DTZ005", # datetime.datetime.now() called without a tz argument
    "DTZ006", # datetime.datetime.fromtimestamp() called without a tz argument
    "DTZ901", # Use of datetime.datetime.{min_max} without timezone information
    "E501", # Line too long
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "G004", # Logging statement uses f-string
    "ISC001", # Implicitly concatenated string literals on one line
    "PD", # Pandas
    "PLR0911", # Too many return statements
    "PLR0913", # Too many arguments in function definition
    "PLR0917", # Too many positional arguments
]

[tool.ruff.lint.isort]
split-on-trailing-comma = true

[tool.ruff.lint.per-file-ignores]
# Ignore certain rules in the 'tests/' directory
"tests/*" = [
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "DTZ001", # datetime.datetime() called without a tzinfo argument
    "DTZ002", # datetime.datetime.today() used
    "DTZ005", # datetime.datetime.now() called without a tz argument
    "FBT003", # Boolean-typed keyword argument in function call
    "PLC2701", # Private name import
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR0904", # Too many public methods
    "PLR6301", # Method could be a function, class method, or static method
    "PT", # pytest style -> this pkg is using unittest
    "PYI024", # Use typing.NamedTuple instead of collections.namedtuple
    "S101", # Use of assert detected
    "SLF001", # Private member accessed
]

[tool.ruff.lint.pydocstyle]
convention = "google"
