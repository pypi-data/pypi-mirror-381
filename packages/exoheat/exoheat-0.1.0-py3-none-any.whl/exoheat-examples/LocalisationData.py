class Localisation:
    '''
    Город Рязань
    '''

    def __doc__(self):
        return 'Класс для расчета ...'
    
    def __init__(self):
        '''
        Выбираем температуры воздуха и продолжительность отопительного периода из минимальных значений 
        t_в, °С - расчетная температура внутреннего воздуха здания [20-22];
        t_от, °С - средняя температура наружного воздуха отопительного периода;
        z_от, сут/год - продолжительность отопительного периода   
        '''
        self.φ = 38#62.0257#°, широта
        self.ψ = 23.8#129.73#°, долгота
        self.t_вр = 25.7#, °С - температура воздуха в рабочей зоне помещения (!!! расчитвается);
        self.t_от = -2#, °С - средняя температура наружного воздуха отопительного периода;
        self.z_от = 203#, сут/год - продолжительность отопительного периода

        #https://www.minstroyrf.gov.ru/upload/iblock/82b/SP-131.pdf
        self.t_б5_хн = -28#, ℃ - температура воздуха наиболее холодной пятидневки обеспеченностью 0.98
        self.t_б1_хн = -32#, ℃ - температура воздуха наиболее холодных суток обеспеченностью 0.98

        self.W_нр = 1.8#, м*с⁻¹ - максимальная из средних скоростей ветра по румбам за январь
        self.W_dir = "С"#, б/р - Преобладающее направление ветра за декабрь - февраль. Допустимые значения "С", "СВ", "В", "ЮВ", "Ю", "ЮЗ", "З", "СЗ"
        self.t_g3500 = -15#, ℃ - температура грунта на глубине 3500 мм ниже зоны промерзания

        self.c_в = 1.005#кДж * кг⁻¹ * ℃⁻¹ - теплоемкость воздуха, используется для расчета walls-WallInfiltration, удельная теплоемоксть воздуха при атмосферном давлении и t=0.5*(t_вр+t_н)°С
        self.ρ_в0 = 1.225#кг * м⁻³, плотность воздуха при нормальных условиях
        
        self.g = 9.8066#м * с⁻², ускорение свободного падения
        self.t_0 = 20#℃ - температура при нормальных условиях
        self.p_0 = 101325#Па - давление при нормальных условиях
        

#Пишите как отдельную главу и каждое значение должно иметь ссылку на источник

##        def φ(self):
##            return self.φ
##        
##
##        def t_в(self):
##            return self.t_вр
##        def t_от(self):
##            return self.t_от
##        def z_от(self):
##            return self.z_от


##loc = Localisation()
