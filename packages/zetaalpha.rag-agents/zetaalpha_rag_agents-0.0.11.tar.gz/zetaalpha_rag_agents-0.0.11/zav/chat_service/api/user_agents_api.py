"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from zav.chat_service.api_client import ApiClient, Endpoint as _Endpoint
from zav.chat_service.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from zav.chat_service.model.http_validation_error import HTTPValidationError
from zav.chat_service.model.paginated_response_user_agent_item import PaginatedResponseUserAgentItem
from zav.chat_service.model.user_agent_form import UserAgentForm
from zav.chat_service.model.user_agent_item import UserAgentItem
from zav.chat_service.model.user_agent_patch import UserAgentPatch


class UserAgentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_user_agent_endpoint = _Endpoint(
            settings={
                'response_type': (UserAgentItem,),
                'auth': [],
                'endpoint_path': '/user-agents',
                'operation_id': 'create_user_agent',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                    'user_agent_form',
                ],
                'required': [
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                    'user_agent_form',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant':
                        (str,),
                    'user_tenants':
                        (str,),
                    'requester_uuid':
                        (str,),
                    'user_roles':
                        (str,),
                    'user_agent_form':
                        (UserAgentForm,),
                },
                'attribute_map': {
                    'tenant': 'tenant',
                    'user_tenants': 'user-tenants',
                    'requester_uuid': 'requester-uuid',
                    'user_roles': 'user-roles',
                },
                'location_map': {
                    'tenant': 'query',
                    'user_tenants': 'header',
                    'requester_uuid': 'header',
                    'user_roles': 'header',
                    'user_agent_form': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_user_agent_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/user-agents/{id}',
                'operation_id': 'delete_user_agent',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                ],
                'required': [
                    'id',
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'tenant':
                        (str,),
                    'user_tenants':
                        (str,),
                    'requester_uuid':
                        (str,),
                    'user_roles':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'tenant': 'tenant',
                    'user_tenants': 'user-tenants',
                    'requester_uuid': 'requester-uuid',
                    'user_roles': 'user-roles',
                },
                'location_map': {
                    'id': 'path',
                    'tenant': 'query',
                    'user_tenants': 'header',
                    'requester_uuid': 'header',
                    'user_roles': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.filter_user_agents_endpoint = _Endpoint(
            settings={
                'response_type': (PaginatedResponseUserAgentItem,),
                'auth': [],
                'endpoint_path': '/user-agents',
                'operation_id': 'filter_user_agents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                    'page',
                    'page_size',
                ],
                'required': [
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant':
                        (str,),
                    'user_tenants':
                        (str,),
                    'requester_uuid':
                        (str,),
                    'user_roles':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'tenant': 'tenant',
                    'user_tenants': 'user-tenants',
                    'requester_uuid': 'requester-uuid',
                    'user_roles': 'user-roles',
                    'page': 'page',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'tenant': 'query',
                    'user_tenants': 'header',
                    'requester_uuid': 'header',
                    'user_roles': 'header',
                    'page': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.retrieve_user_agent_endpoint = _Endpoint(
            settings={
                'response_type': (UserAgentItem,),
                'auth': [],
                'endpoint_path': '/user-agents/{id}',
                'operation_id': 'retrieve_user_agent',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                ],
                'required': [
                    'id',
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'tenant':
                        (str,),
                    'user_tenants':
                        (str,),
                    'requester_uuid':
                        (str,),
                    'user_roles':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'tenant': 'tenant',
                    'user_tenants': 'user-tenants',
                    'requester_uuid': 'requester-uuid',
                    'user_roles': 'user-roles',
                },
                'location_map': {
                    'id': 'path',
                    'tenant': 'query',
                    'user_tenants': 'header',
                    'requester_uuid': 'header',
                    'user_roles': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_user_agent_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/user-agents/{id}',
                'operation_id': 'update_user_agent',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                    'user_agent_patch',
                ],
                'required': [
                    'id',
                    'tenant',
                    'user_tenants',
                    'requester_uuid',
                    'user_roles',
                    'user_agent_patch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'tenant':
                        (str,),
                    'user_tenants':
                        (str,),
                    'requester_uuid':
                        (str,),
                    'user_roles':
                        (str,),
                    'user_agent_patch':
                        (UserAgentPatch,),
                },
                'attribute_map': {
                    'id': 'id',
                    'tenant': 'tenant',
                    'user_tenants': 'user-tenants',
                    'requester_uuid': 'requester-uuid',
                    'user_roles': 'user-roles',
                },
                'location_map': {
                    'id': 'path',
                    'tenant': 'query',
                    'user_tenants': 'header',
                    'requester_uuid': 'header',
                    'user_roles': 'header',
                    'user_agent_patch': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_user_agent(
        self,
        tenant,
        user_tenants,
        requester_uuid,
        user_roles,
        user_agent_form,
        **kwargs
    ):
        """Create User Agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_user_agent(tenant, user_tenants, requester_uuid, user_roles, user_agent_form, async_req=True)
        >>> result = thread.get()

        Args:
            tenant (str):
            user_tenants (str):
            requester_uuid (str):
            user_roles (str):
            user_agent_form (UserAgentForm):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserAgentItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant'] = \
            tenant
        kwargs['user_tenants'] = \
            user_tenants
        kwargs['requester_uuid'] = \
            requester_uuid
        kwargs['user_roles'] = \
            user_roles
        kwargs['user_agent_form'] = \
            user_agent_form
        return self.create_user_agent_endpoint.call_with_http_info(**kwargs)

    def delete_user_agent(
        self,
        id,
        tenant,
        user_tenants,
        requester_uuid,
        user_roles,
        **kwargs
    ):
        """Delete User Agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user_agent(id, tenant, user_tenants, requester_uuid, user_roles, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            tenant (str):
            user_tenants (str):
            requester_uuid (str):
            user_roles (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['tenant'] = \
            tenant
        kwargs['user_tenants'] = \
            user_tenants
        kwargs['requester_uuid'] = \
            requester_uuid
        kwargs['user_roles'] = \
            user_roles
        return self.delete_user_agent_endpoint.call_with_http_info(**kwargs)

    def filter_user_agents(
        self,
        tenant,
        user_tenants,
        requester_uuid,
        user_roles,
        **kwargs
    ):
        """Filter User Agents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.filter_user_agents(tenant, user_tenants, requester_uuid, user_roles, async_req=True)
        >>> result = thread.get()

        Args:
            tenant (str):
            user_tenants (str):
            requester_uuid (str):
            user_roles (str):

        Keyword Args:
            page (int): [optional] if omitted the server will use the default value of 1
            page_size (int): [optional] if omitted the server will use the default value of 100
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PaginatedResponseUserAgentItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant'] = \
            tenant
        kwargs['user_tenants'] = \
            user_tenants
        kwargs['requester_uuid'] = \
            requester_uuid
        kwargs['user_roles'] = \
            user_roles
        return self.filter_user_agents_endpoint.call_with_http_info(**kwargs)

    def retrieve_user_agent(
        self,
        id,
        tenant,
        user_tenants,
        requester_uuid,
        user_roles,
        **kwargs
    ):
        """Retrieve User Agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_user_agent(id, tenant, user_tenants, requester_uuid, user_roles, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            tenant (str):
            user_tenants (str):
            requester_uuid (str):
            user_roles (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserAgentItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['tenant'] = \
            tenant
        kwargs['user_tenants'] = \
            user_tenants
        kwargs['requester_uuid'] = \
            requester_uuid
        kwargs['user_roles'] = \
            user_roles
        return self.retrieve_user_agent_endpoint.call_with_http_info(**kwargs)

    def update_user_agent(
        self,
        id,
        tenant,
        user_tenants,
        requester_uuid,
        user_roles,
        user_agent_patch,
        **kwargs
    ):
        """Update User Agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_user_agent(id, tenant, user_tenants, requester_uuid, user_roles, user_agent_patch, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            tenant (str):
            user_tenants (str):
            requester_uuid (str):
            user_roles (str):
            user_agent_patch (UserAgentPatch):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['tenant'] = \
            tenant
        kwargs['user_tenants'] = \
            user_tenants
        kwargs['requester_uuid'] = \
            requester_uuid
        kwargs['user_roles'] = \
            user_roles
        kwargs['user_agent_patch'] = \
            user_agent_patch
        return self.update_user_agent_endpoint.call_with_http_info(**kwargs)

