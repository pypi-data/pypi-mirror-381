Your task is to analyze pending changes and create logical commits.

You are working in the `repository` directory.

If there are no pending changes, exit immediately without performing any actions.

Analyze all pending changes in the current repository and create logical commits by grouping related changes together.

# Follow these guidelines:

1. Group changes by functional context:
   - Feature additions or modifications
   - Bug fixes
   - Refactoring without behavior changes
   - Documentation updates
   - Configuration changes
   - Test additions or modifications
   - Dependency updates

2. Within each functional group, further organize by:
   - Related files or modules
   - Logical components or subsystems
   - Interdependent changes that should stay together

3. For each commit:
   - Include only changes that logically belong together
   - Ensure each commit represents a complete, coherent unit of work

4. Prioritize commits in this order:
   - Critical bug fixes first
   - Core functionality changes
   - Supporting changes (tests, docs, config)
   - Cleanup and refactoring

# COMMIT EXECUTION PROCESS:

Step 1: For each logical group of changes, create a shell script at {{ working_directory }}/do-commit.sh with this content:

```bash
#!/bin/bash
set -e

# Stage the files
git add {file1} {file2} ...

# Create commit message file
cat > {{ working_directory }}/commit_msg.txt << 'EOF'
imbi-automations: {{ workflow_name }} - {{ action_name }}

{Detailed description of what changed}
- Bullet points for multiple changes if needed

ðŸ¤– Generated with [Imbi Automations](https://github.com/AWeber-Imbi/)
EOF

# Perform the commit with trailers
GIT_AUTHOR_NAME="{{ commit_author_name }}" \
GIT_AUTHOR_EMAIL="{{ commit_author_address }}" \
GIT_COMMITTER_NAME="{{ commit_author_name }}" \
GIT_COMMITTER_EMAIL="{{ commit_author_address }}" \
git commit -F /tmp/commit_msg.txt \
  --trailer "Authored-By: {{ commit_author }}" \
  --trailer "Co-Authored-By: Claude <noreply@anthropic.com>"

# Cleanup
rm {{ working_directory }}/commit_msg.txt
```

Step 2: Make the script executable and run it:

```bash
chmod +x {{ working_directory }}/do-commit.sh
{{ working_directory }}/do-commit.sh
rm {{ working_directory }}/do-commit.sh
```

# CRITICAL RULES
- NEVER use 'git commit' directly in your bash commands
- ALWAYS create and execute the shell script
- The subject line MUST be exactly "imbi-automations: {{ workflow_name }} - {{ action_name }}" with NO other text
- NEVER use "Claude Code" in the attribution line
- Set GIT_AUTHOR_* and GIT_COMMITTER_* environment variables to ensure proper attribution

# RESPONSE FORMAT

You should response with the following if do-commit succeeds:

```json
{"result": "success", "message": "<do-commit.sh response output>"}
```

And the following if it fails

```json
{"result": "failure", "message": "Commit failed", "errors": ["<do-commit.sh response output>"]}
```
