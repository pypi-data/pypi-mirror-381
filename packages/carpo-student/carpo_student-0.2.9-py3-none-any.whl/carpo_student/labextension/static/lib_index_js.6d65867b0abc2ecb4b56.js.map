{"version":3,"file":"lib_index_js.6d65867b0abc2ecb4b56.js","mappings":";;;;;;;;;;;;;;;;;;AAAwD;AACmC;AACpD;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,mEAAmE,OAAO;AAC1E,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;ACxC+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCyD;AACd;AACoB;AACxB;AACiB;AACmC;AAC5C;AACK;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,+CAA+C,oDAAe;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,2DAA2D,wDAAe;AAC1E;AACA,2DAA2D,6DAAiB;AAC5E;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,sEAAsE,OAAO;AAC7E,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,kEAAkE,OAAO;AACzE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,oEAAoE,OAAO;AAC3E,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,4EAA4E,OAAO;AACnF,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,iEAAiE,OAAO;AACxE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;ACjRkC;AACmC;AACpD;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB,oDAAU;AAC9B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,4BAA4B,gEAAU;AACtC;AACA;AACA,0CAA0C,iEAAe,GAAG,aAAa;AACzE,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA,wBAAwB,sEAAgB;AACxC,4EAA4E,OAAO;AACnF,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,kEAAkE,OAAO;AACzE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;ACnGmD;AACiB;AAC1C;AACa;AACqC;AAC5E,uBAAuB,eAAe,MAAM,0DAAmB,aAAa,mEAAmE;AAC/I,IAAI,0DAAmB,CAAC,2EAAoB,IAAI,sFAAsF;AACtI,mCAAmC,aAAa;AAChD;AACA;AACA,YAAY,sEAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,iEAAe,GAAG,aAAa;AACzD,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,oDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,wBAAwB,gEAAU;AAClC;AACA;AACA,sCAAsC,iEAAe,GAAG,aAAa;AACrE,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,oBAAoB,sEAAgB;AACpC,wEAAwE,OAAO;AAC/E,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA,YAAY,sEAAgB;AAC5B,8DAA8D,OAAO;AACrE,SAAS;AACT;AACA,YAAY,0DAAmB;AAC/B,QAAQ,0DAAmB,gBAAgB,MAAM,qEAAc,gCAAgC;AAC/F;AACO,8BAA8B,6DAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAmB,4BAA4B,kCAAkC;AAChG;AACA","sources":["webpack://carpo-student/./lib/get-solutions.js","webpack://carpo-student/./lib/handler.js","webpack://carpo-student/./lib/index.js","webpack://carpo-student/./lib/share-code.js","webpack://carpo-student/./lib/widget.js"],"sourcesContent":["import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler';\nexport class GetSolutionButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const getSolutions = () => {\n            requestAPI('solution', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: '',\n                    body: data.msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Get Solution Error', reason);\n                console.error(`Failed to get problem solutions.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-solution-button',\n            label: 'GetSolutions',\n            onClick: getSolutions,\n            tooltip: 'Download solutions to problems.',\n        });\n        panel.toolbar.insertItem(14, 'getSolutions', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'carpo-student', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { INotebookTracker, } from '@jupyterlab/notebook';\nimport { CellCheckButton } from './widget';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { requestAPI } from './handler';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { ShareCodeButton } from './share-code';\nimport { GetSolutionButton } from './get-solutions';\n/**\n * Initialization data for the carpo-student extension.\n */\nconst plugin = {\n    id: 'carpo-student:plugin',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ISettingRegistry],\n    activate: (app, nbTrack, settingRegistry) => {\n        console.log('JupyterLab extension carpo-student is activated!');\n        nbTrack.currentChanged.connect(() => {\n            const notebookPanel = nbTrack.currentWidget;\n            const notebook = nbTrack.currentWidget.content;\n            const filename = notebookPanel.context.path;\n            // Disable Code Share functionality if inside Feedback directory\n            if (filename.includes(\"Feedback\")) {\n                return;\n            }\n            // Disable if not inside Carpo directory\n            if (!filename.includes(\"Carpo\")) {\n                return;\n            }\n            notebookPanel.context.ready.then(async () => {\n                let currentCell = null;\n                let currentCellCheckButton = null;\n                nbTrack.activeCellChanged.connect(() => {\n                    var question;\n                    if (currentCell) {\n                        notebook.widgets.map((c) => {\n                            if (c.model.type == 'code' || c.model.type == 'markdown') {\n                                const currentLayout = c.layout;\n                                currentLayout.widgets.map(w => {\n                                    if (w === currentCellCheckButton) {\n                                        currentLayout.removeWidget(w);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    const cell = notebook.activeCell;\n                    const activeIndex = notebook.activeCellIndex;\n                    var info = {\n                        problem_id: parseInt((filename.split(\"/\").pop()).replace(\"p\", \"\").replace(\".ipynb\", \"\"))\n                    };\n                    // Get the message block referencing the active cell.\n                    notebook.widgets.map((c, index) => {\n                        if (c.model.value.text.startsWith(\"## Message to instructor:\")) {\n                            info.message = c.model.value.text;\n                        }\n                        if (index == activeIndex) {\n                            question = c.model.value.text;\n                        }\n                    });\n                    const newCheckButton = new CellCheckButton(cell, info);\n                    if (question.includes(\"## PID \")) {\n                        cell.layout.addWidget(newCheckButton);\n                        currentCellCheckButton = newCheckButton;\n                    }\n                    // Set the current cell and button for future\n                    // reference\n                    currentCell = cell;\n                });\n            });\n        });\n        //  tell the document registry about your widget extension:\n        app.docRegistry.addWidgetExtension('Notebook', new RegisterButton());\n        app.docRegistry.addWidgetExtension('Notebook', new GetQuestionButton());\n        app.docRegistry.addWidgetExtension('Notebook', new ShareCodeButton());\n        app.docRegistry.addWidgetExtension('Notebook', new GetFeedbackButton());\n        app.docRegistry.addWidgetExtension('Notebook', new GetSolutionButton());\n        app.docRegistry.addWidgetExtension('Notebook', new ViewSubmissionStatusButton());\n        // app.docRegistry.addWidgetExtension('Notebook', new viewProblemStatusExtension());\n    }\n};\nexport class RegisterButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const register = () => {\n            // NotebookActions.clearAllOutputs(panel.content);\n            // const notebook = panel.content;\n            requestAPI('register', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: '',\n                    body: \"Student \" + data.name + \" has been registered.\",\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Registration Error', reason);\n                console.error(`Failed to register user as Student.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'register-button',\n            label: 'Register',\n            onClick: register,\n            tooltip: 'Register as a Student',\n        });\n        panel.toolbar.insertItem(10, 'register', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class GetQuestionButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const getQuestion = () => {\n            // NotebookActions.clearAllOutputs(panel.content);\n            // const notebook = panel.content;\n            requestAPI('question', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: '',\n                    body: data.msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Get Problem Error', reason);\n                console.error(`Failed to get active questions.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-question-button',\n            label: 'GetProblem',\n            onClick: getQuestion,\n            tooltip: 'Get Latest Problem From Server',\n        });\n        panel.toolbar.insertItem(11, 'getQuestion', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class GetFeedbackButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const getFeedback = () => {\n            requestAPI('feedback', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: '',\n                    body: data.msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                }).then(result => {\n                    if (result.button.accept && data['hard-reload'] == 1) {\n                        window.location.reload();\n                    }\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Get Feedback Error', reason);\n                console.error(`Failed to fetch recent feedbacks.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-feedback-button',\n            label: 'GetFeedback',\n            onClick: getFeedback,\n            tooltip: 'Get Feedback to your Submission',\n        });\n        panel.toolbar.insertItem(13, 'getFeedback', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class ViewSubmissionStatusButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const viewStatus = () => {\n            requestAPI('view_student_status', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                window.open(data.url, \"_blank\");\n            })\n                .catch(reason => {\n                showErrorMessage('View Status Error', reason);\n                console.error(`Failed to view student submission status.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-status-button',\n            label: 'Status',\n            onClick: viewStatus,\n            tooltip: 'View your submissions status',\n        });\n        panel.toolbar.insertItem(15, 'viewStatus', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n// Currently disabled\nexport class viewProblemStatusExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const viewProblemStatus = () => {\n            requestAPI('view_problem_list', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                window.open(data.url, \"_blank\");\n            })\n                .catch(reason => {\n                showErrorMessage('View Problem Status Error', reason);\n                console.error(`Failed to view problem status.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-status-button',\n            label: 'Problems',\n            onClick: viewProblemStatus,\n            tooltip: 'View all problem status',\n        });\n        panel.toolbar.insertItem(15, 'viewProblemStatus', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport default plugin;\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler';\nexport class ShareCodeButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const shareCode = () => {\n            const notebook = panel.content;\n            const filename = panel.context.path;\n            const activeIndex = notebook.activeCellIndex;\n            var codeBlock;\n            var info = {\n                problem_id: parseInt((filename.split(\"/\").pop()).replace(\"p\", \"\").replace(\".ipynb\", \"\"))\n            };\n            notebook.widgets.map((c, index) => {\n                if (c.model.value.text.startsWith(\"## Message to instructor:\")) {\n                    info.message = c.model.value.text;\n                }\n                if (index == activeIndex) {\n                    codeBlock = c.model.value.text;\n                }\n            });\n            if (!codeBlock.startsWith(\"## PID \")) {\n                showErrorMessage('Code Share Error', \"Invalid cell selected. Use a specific problem cell block.\");\n                return;\n            }\n            let postBody = {\n                \"message\": info.message,\n                \"code\": codeBlock,\n                \"problem_id\": info.problem_id\n            };\n            console.log(\"Req body: \", postBody);\n            requestAPI('submissions', {\n                method: 'POST',\n                body: JSON.stringify(postBody)\n            })\n                .then(data => {\n                if (data.msg === \"Submission saved successfully.\") {\n                    if (info.message.length > 27) {\n                        data.msg = 'Code & message is sent to the instructor.';\n                    }\n                    else {\n                        data.msg = 'Code is sent to the instructor.';\n                    }\n                }\n                showDialog({\n                    title: '',\n                    body: data.msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n                // Keep checking for new feedback.\n                // This setInterval will be cleared once the feedback is downloaded (after reload())\n                setInterval(function () {\n                    // console.log(\"Checking for feedback...\")\n                    requestAPI('feedback', {\n                        method: 'GET'\n                    })\n                        .then(data => {\n                        // console.log(data);\n                        if (data['hard-reload'] != -1) {\n                            showDialog({\n                                title: '',\n                                body: data.msg,\n                                buttons: [Dialog.okButton({ label: 'Ok' })]\n                            }).then(result => {\n                                if (result.button.accept) {\n                                    window.location.reload();\n                                }\n                            });\n                        }\n                    })\n                        .catch(reason => {\n                        showErrorMessage('Get Feedback Error', reason);\n                        console.error(`Failed to fetch recent feedbacks.\\n${reason}`);\n                    });\n                }, 60000);\n            })\n                .catch(reason => {\n                showErrorMessage('Code Share Error', reason);\n                console.error(`Failed to share code to server.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'share-code-button',\n            label: 'ShareCode',\n            onClick: shareCode,\n            tooltip: 'Share your code to the instructor.',\n        });\n        panel.toolbar.insertItem(12, 'shareCode', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport { fileUploadIcon, LabIcon } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { requestAPI } from './handler';\nimport { Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nconst ShareButton = ({ icon, onClick }) => (React.createElement(\"button\", { type: \"button\", onClick: () => onClick(), className: \"cellButton\" },\n    React.createElement(LabIcon.resolveReact, { icon: icon, className: \"cellButton-icon\", tag: \"span\", width: \"15px\", height: \"15px\" })));\nconst CodeCellButtonComponent = ({ cell, info, }) => {\n    const shareCode = async () => {\n        if (isNaN(info.problem_id)) {\n            showErrorMessage('Code Share Error', \"Invalid code block. Use specific problem notebook.\");\n            return;\n        }\n        let postBody = {\n            \"message\": info.message,\n            \"code\": cell.model.value.text,\n            \"problem_id\": info.problem_id\n        };\n        // console.log(\"From widget: \", postBody)\n        requestAPI('submissions', {\n            method: 'POST',\n            body: JSON.stringify(postBody)\n        })\n            .then(data => {\n            if (data.msg === \"Submission saved successfully.\") {\n                if (info.message.length > 27) {\n                    data.msg = 'Code & message is sent to the instructor.';\n                }\n                else {\n                    data.msg = 'Code is sent to the instructor.';\n                }\n            }\n            showDialog({\n                title: '',\n                body: data.msg,\n                buttons: [Dialog.okButton({ label: 'Ok' })]\n            });\n            // Keep checking for new feedback.\n            // This setInterval will be cleared once the feedback is downloaded (after reload())\n            setInterval(function () {\n                // console.log(\"Checking for feedback...\")\n                requestAPI('feedback', {\n                    method: 'GET'\n                })\n                    .then(data => {\n                    // console.log(data);\n                    if (data['hard-reload'] != -1) {\n                        showDialog({\n                            title: '',\n                            body: data.msg,\n                            buttons: [Dialog.okButton({ label: 'Ok' })]\n                        }).then(result => {\n                            if (result.button.accept) {\n                                window.location.reload();\n                            }\n                        });\n                    }\n                })\n                    .catch(reason => {\n                    showErrorMessage('Get Feedback Error', reason);\n                    console.error(`Failed to fetch recent feedbacks.\\n${reason}`);\n                });\n            }, 60000);\n        })\n            .catch(reason => {\n            showErrorMessage('Code Share Error', reason);\n            console.error(`Failed to share code to server.\\n${reason}`);\n        });\n    };\n    return (React.createElement(\"div\", null,\n        React.createElement(ShareButton, { icon: fileUploadIcon, onClick: () => (shareCode)() })));\n};\nexport class CellCheckButton extends ReactWidget {\n    constructor(cell, info) {\n        super();\n        this.cell = null;\n        this.info = null;\n        this.cell = cell;\n        this.info = info;\n        this.addClass('jp-CellButton');\n    }\n    render() {\n        return React.createElement(CodeCellButtonComponent, { cell: this.cell, info: this.info });\n    }\n}\n"],"names":[],"sourceRoot":""}