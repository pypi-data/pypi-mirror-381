"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from attio.errors import SDKError
from attio.models import (
    patch_v2_lists_list_entries_entry_id_op as models_patch_v2_lists_list_entries_entry_id_op,
)
from attio.types import BaseModel
from dataclasses import dataclass, field
import httpx
from typing import Optional


class PatchV2ListsListEntriesEntryIDNotFoundErrorData(BaseModel):
    status_code: float

    type: models_patch_v2_lists_list_entries_entry_id_op.PatchV2ListsListEntriesEntryIDNotFoundType

    code: models_patch_v2_lists_list_entries_entry_id_op.PatchV2ListsListEntriesEntryIDNotFoundCode

    message: str


@dataclass(frozen=True)
class PatchV2ListsListEntriesEntryIDNotFoundError(SDKError):
    r"""Not Found"""

    data: PatchV2ListsListEntriesEntryIDNotFoundErrorData = field(hash=False)

    def __init__(
        self,
        data: PatchV2ListsListEntriesEntryIDNotFoundErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)


class PatchV2ListsListEntriesEntryIDImmutableValueErrorData(BaseModel):
    status_code: float

    type: models_patch_v2_lists_list_entries_entry_id_op.PatchV2ListsListEntriesEntryIDBadRequestType

    code: models_patch_v2_lists_list_entries_entry_id_op.PatchV2ListsListEntriesEntryIDCodeImmutableValue

    message: str


@dataclass(frozen=True)
class PatchV2ListsListEntriesEntryIDImmutableValueError(SDKError):
    r"""Bad Request"""

    data: PatchV2ListsListEntriesEntryIDImmutableValueErrorData = field(hash=False)

    def __init__(
        self,
        data: PatchV2ListsListEntriesEntryIDImmutableValueErrorData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        fallback = body or raw_response.text
        message = str(data.message) or fallback
        super().__init__(message, raw_response, body)
        object.__setattr__(self, "data", data)
