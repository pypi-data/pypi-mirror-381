{"version":3,"file":"lib_index_js.63bb1f0b3e113fb2d1b6.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCuC;AACkC;AACd;AACG;AAC9D,YAAY,OAAO;AACqC;AACmC;AACrC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B,eAAe,wEAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mDAAmD,oDAAe;AAClE;AACA;AACA;AACA;AACA;AACA,sDAAsD,mDAAc;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,+DAAiB;AAC5E;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,sEAAsE,OAAO;AAC7E,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iFAA+B;AAC3C,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,8GAA8G,OAAO;AACrH,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iFAA+B;AAC3C,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,8GAA8G,OAAO;AACrH,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iFAA+B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,4EAA4E,OAAO;AACnF,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iFAA+B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,gEAAgE,OAAO;AACvE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,iEAAiE,OAAO;AACxE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;AChZkC;AACmC;AACpD;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,iEAAe,GAAG,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,wEAAwE,OAAO;AAC/E,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1DmD;AAC2C;AACpE;AACa;AACqC;AAC5E,uBAAuB,eAAe,MAAM,0DAAmB,aAAa,mEAAmE;AAC/I,IAAI,0DAAmB,CAAC,2EAAoB,IAAI,sFAAsF;AACtI,uBAAuB,eAAe,MAAM,0DAAmB,aAAa,mEAAmE;AAC/I,IAAI,0DAAmB,CAAC,2EAAoB,IAAI,sFAAsF;AACtI,sBAAsB,eAAe,MAAM,0DAAmB,aAAa,mEAAmE;AAC9I,IAAI,0DAAmB,CAAC,2EAAoB,IAAI,sFAAsF;AACtI,mCAAmC,yBAAyB;AAC5D;AACA;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,iEAAe,GAAG,aAAa;AACzD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,iEAAe,GAAG,aAAa;AACzD,aAAa;AACb;AACA,SAAS;AACT;AACA,YAAY,sEAAgB;AAC5B,+DAA+D,OAAO;AACtE,SAAS;AACT;AACA;AACA;AACA,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,iEAAe,GAAG,aAAa;AACzD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,iEAAe,GAAG,aAAa;AACzD,aAAa;AACb;AACA,SAAS;AACT;AACA,YAAY,sEAAgB;AAC5B,wDAAwD,OAAO;AAC/D,SAAS;AACT;AACA,YAAY,0DAAmB,UAAU,kBAAkB;AAC3D,QAAQ,0DAAmB,gBAAgB,MAAM,gEAAS,sCAAsC;AAChG,QAAQ,0DAAmB,gBAAgB,MAAM,gEAAS,uCAAuC;AACjG,QAAQ,0DAAmB,gBAAgB,MAAM,+DAAQ,mCAAmC;AAC5F;AACA,uCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT,YAAY,gEAAU;AACtB;AACA;AACA,0BAA0B,iEAAe,GAAG,aAAa;AACzD,aAAa;AACb,SAAS;AACT;AACA,YAAY,sEAAgB;AAC5B,wDAAwD,OAAO;AAC/D,SAAS;AACT;AACA,YAAY,0DAAmB,eAAe,MAAM,+DAAQ,mCAAmC;AAC/F;AACO,8BAA8B,6DAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAmB,4BAA4B,+DAA+D;AAC7H;AACA;AACO,6BAA6B,6DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAmB,gCAAgC,yDAAyD;AAC3H;AACA","sources":["webpack://carpo-teacher/./lib/handler.js","webpack://carpo-teacher/./lib/index.js","webpack://carpo-teacher/./lib/upload-solution.js","webpack://carpo-teacher/./lib/widget.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'carpo-teacher', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { requestAPI } from './handler';\nimport { NotebookActions, INotebookTracker } from '@jupyterlab/notebook';\nimport { CellCheckButton, FeedbackButton } from './widget';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\n// import { Cell } from '@jupyterlab/cells';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { GetSolutionButton } from './upload-solution';\n/**\n * Initialization data for the carpo-teacher extension.\n */\nconst plugin = {\n    id: 'carpo-teacher:plugin',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [IFileBrowserFactory],\n    activate: (app, nbTrack, browserFactory, docManager) => {\n        console.log('JupyterLab extension carpo-teacher is activated!');\n        nbTrack.currentChanged.connect(() => {\n            const notebookPanel = nbTrack.currentWidget;\n            const notebook = nbTrack.currentWidget.content;\n            // If current Notebook is not inside Exercises/problem_ directory, disable all functionality.\n            if (!nbTrack.currentWidget.context.path.includes(\"problem_\")) {\n                return;\n            }\n            notebookPanel.context.ready.then(async () => {\n                let currentCell = null;\n                let currentCellCheckButton = null;\n                nbTrack.activeCellChanged.connect(() => {\n                    if (currentCell) {\n                        notebook.widgets.map((c) => {\n                            if (c.model.type == 'code' || c.model.type == 'markdown') {\n                                const currentLayout = c.layout;\n                                currentLayout.widgets.map(w => {\n                                    if (w === currentCellCheckButton) {\n                                        currentLayout.removeWidget(w);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    const cell = notebook.activeCell;\n                    var sCell;\n                    const activeIndex = notebook.activeCellIndex;\n                    console.log(\"Active cell index: \", activeIndex);\n                    // const heading = cell.model.value.text.split(\"\\n\")[0].split(\" \")\n                    const submission_id = function (text) {\n                        return Number(text.split(\"\\n\")[0].split(\" \")[2]);\n                    };\n                    const problem_id = function (text) {\n                        return Number(text.split(\"\\n\")[0].split(\" \")[1]);\n                    };\n                    const student_id = function (text) {\n                        return Number((text.split(\"\\n\")[0].split(\" \")[0]).replace(\"#\", \"\"));\n                    };\n                    var info = {\n                        id: submission_id(cell.model.value.text),\n                        problem_id: problem_id(cell.model.value.text),\n                        student_id: student_id(cell.model.value.text),\n                        code: cell.model.value.text\n                    };\n                    var header;\n                    // For feedback case: cell is markdown so loop over the notebook widgets to get code cell before the active cell index\n                    // if (cell.model.type == 'markdown' ){\n                    //   notebook.widgets.map((c,index) =>{\n                    //     // activeIndex-1 could be the top cell (when the question type is markdown)\n                    //     if(index == activeIndex-1 && !c.model.value.text.startsWith(\"## Submission\")) {\n                    //       const code = c.model.value.text\n                    //       info.code = code  \n                    //       info.id = submission_id(code)\n                    //       info.student_id = student_id(code)\n                    //       info.problem_id = problem_id(code)\n                    //     }\n                    //   })\n                    // }\n                    // Get the status cell:\n                    notebook.widgets.map((c, index) => {\n                        if (index == activeIndex + 1) {\n                            sCell = c;\n                        }\n                    });\n                    header = cell.model.value.text.split(\"\\n\")[0];\n                    if (header.match(/^#[0-9]+ [0-9]+ [0-9]+$/)) {\n                        console.log(\"Submission Grading block.........\");\n                        const newCheckButton = new CellCheckButton(cell, sCell, info);\n                        cell.layout.addWidget(newCheckButton);\n                        currentCell = cell;\n                        currentCellCheckButton = newCheckButton;\n                    }\n                    else {\n                        const newFeedbackButton = new FeedbackButton(cell, info);\n                        cell.layout.addWidget(newFeedbackButton);\n                        currentCell = cell;\n                        currentCellCheckButton = newFeedbackButton;\n                    }\n                    // if (question.includes(\"## PID \")){\n                    //   (cell.layout as PanelLayout).addWidget(newCheckButton);\n                    //   currentCellCheckButton = newCheckButton;\n                    // }\n                    // Set the current cell and button for future\n                    // reference\n                });\n            });\n        });\n        //  tell the document registry about your widget extension:\n        app.docRegistry.addWidgetExtension('Notebook', new RegisterButton());\n        app.docRegistry.addWidgetExtension('Notebook', new NewSubmissionButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new AllSubmissionButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new PublishProblemButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new ArchiveProblemButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new GetSolutionButton());\n        app.docRegistry.addWidgetExtension('Notebook', new viewProblemStatusExtension());\n    }\n};\nexport class RegisterButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const register = () => {\n            requestAPI('register', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: '',\n                    body: \"Teacher \" + data.name + \" has been registered.\",\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Registration Error', reason);\n                console.error(`Failed to register user as Teacher.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'register-button',\n            label: 'Register',\n            onClick: register,\n            tooltip: 'Register as a Teacher',\n        });\n        panel.toolbar.insertItem(10, 'register', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class NewSubmissionButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const getSubmissions = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            requestAPI('submissions', {\n                method: 'GET'\n            })\n                .then(data => {\n                if (data.Remaining != 0) {\n                    var msg = \"Notebook \" + data.sub_file + \" is placed in folder Problem_\" + data.question + \". There are \" + data.remaining + \" submissions in the queue.\";\n                }\n                else {\n                    var msg = \"You have got 0 submissions. Please check again later.\\n\";\n                }\n                showDialog({\n                    title: 'Submission Status',\n                    body: msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n                console.log(data);\n            })\n                .catch(reason => {\n                showErrorMessage('Get Student Code Error', reason);\n                console.error(`Failed to get student's code from the server. Please check your connection.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'sync-code-button',\n            label: 'GetSubs',\n            onClick: getSubmissions,\n            tooltip: 'Download new submissions from students.',\n        });\n        panel.toolbar.insertItem(11, 'getStudentsCode', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class AllSubmissionButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const getGradedSubmissions = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            requestAPI('graded_submissions', {\n                method: 'GET'\n            })\n                .then(data => {\n                showDialog({\n                    title: '',\n                    body: data.msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n                console.log(data);\n            })\n                .catch(reason => {\n                showErrorMessage('Get Graded Submissions Error', reason);\n                console.error(`Failed to get student's code from the server. Please check your connection.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'sync-code-button',\n            label: 'Graded',\n            onClick: getGradedSubmissions,\n            tooltip: 'Get all graded submissions.',\n        });\n        panel.toolbar.insertItem(12, 'getAllGradedSubmissions', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class PublishProblemButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const publishProblem = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var problem;\n            var format;\n            var header;\n            var time_limit;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    problem = c.model.value.text;\n                    format = c.model.type;\n                }\n            });\n            if (problem.includes(\"#PID:\")) {\n                showErrorMessage('Publish Question Error', \"Problem already published.\");\n                return;\n            }\n            if (!problem) {\n                showErrorMessage('Publish Question Error', \"Problem is empty.\");\n                return;\n            }\n            header = problem.split('\\n')[0];\n            if (header.match(/[0-9]+[a-zA-Z]/)) {\n                time_limit = header.match(/[0-9]+[a-zA-Z]/)[0];\n            }\n            let postBody = {\n                \"question\": problem,\n                \"format\": format,\n                \"time_limit\": time_limit\n            };\n            requestAPI('problem', {\n                method: 'POST',\n                body: JSON.stringify(postBody)\n            })\n                .then(data => {\n                console.log(data);\n                notebook.widgets.map((c, index) => {\n                    if (index === activeIndex) {\n                        c.model.value.text = \"#PID:\" + data.id + \"\\n\" + problem;\n                    }\n                });\n                showDialog({\n                    title: 'New Questions Published',\n                    body: 'Problem ' + data.id + \" is published.\",\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Publish Question Error', reason);\n                console.error(`Failed to publish question to the server.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'publish-problem-button',\n            label: 'Publish',\n            onClick: publishProblem,\n            tooltip: 'Publish New Problem.',\n        });\n        panel.toolbar.insertItem(13, 'publishNewProblem', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class ArchiveProblemButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const archiveProblem = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var problem;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    problem = c.model.value.text;\n                }\n            });\n            if (!problem.includes(\"#PID:\")) {\n                showErrorMessage('Unpublish Question Error', \"Active problem not found.\");\n                return;\n            }\n            var problem_id = parseInt((problem.split(\"\\n\")[0]).split(\"#PID:\")[1]);\n            let body = {\n                \"problem_id\": problem_id\n            };\n            requestAPI('problem', {\n                method: 'DELETE',\n                body: JSON.stringify(body)\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: 'Question Unpublished',\n                    body: 'Problem id ' + problem_id + ' is  unpublished.',\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Unpublish Question Error', reason);\n                console.error(`Failed to unpublish question.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'archive-problem-button',\n            label: 'Unpublish',\n            onClick: archiveProblem,\n            tooltip: 'Unpublish the problem.',\n        });\n        panel.toolbar.insertItem(14, 'archivesProblem', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class viewProblemStatusExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const viewProblemStatus = () => {\n            requestAPI('view_problem_list', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                window.open(data.url, \"_blank\");\n            })\n                .catch(reason => {\n                showErrorMessage('View Problem Status Error', reason);\n                console.error(`Failed to view problem status.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-status-button',\n            label: 'Problems',\n            onClick: viewProblemStatus,\n            tooltip: 'View all problem status',\n        });\n        panel.toolbar.insertItem(16, 'viewProblemStatus', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport default plugin;\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler';\nexport class GetSolutionButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const uploadSolution = () => {\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var code_block;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    code_block = c.model.value.text;\n                }\n            });\n            if (!code_block.includes(\"#PID:\")) {\n                showErrorMessage('Upload Solution Error', \"Active problem not found.\");\n                return;\n            }\n            var problem_id = parseInt((code_block.split(\"\\n\")[0]).split(\"#PID:\")[1]);\n            let body = {\n                \"problem_id\": problem_id,\n                \"code\": code_block\n            };\n            requestAPI('solution', {\n                method: 'POST',\n                body: JSON.stringify(body)\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: 'Solution Uploaded',\n                    body: 'Solution uploaded for ProblemID ' + problem_id + '.',\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Upload Solution Error', reason);\n                console.error(`Failed to upload solution to problem.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'upload-solution-button',\n            label: 'UploadSolution',\n            onClick: uploadSolution,\n            tooltip: 'Upload solutions to the problem.',\n        });\n        panel.toolbar.insertItem(15, 'getSolutions', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport { checkIcon, closeIcon, LabIcon, saveIcon, redoIcon } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { requestAPI } from './handler';\nimport { Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nconst GradeButton = ({ icon, onClick }) => (React.createElement(\"button\", { type: \"button\", onClick: () => onClick(), className: \"cellButton\" },\n    React.createElement(LabIcon.resolveReact, { icon: icon, className: \"cellButton-icon\", tag: \"span\", width: \"15px\", height: \"15px\" })));\nconst ResetButton = ({ icon, onClick }) => (React.createElement(\"button\", { type: \"button\", onClick: () => onClick(), className: \"cellButton\" },\n    React.createElement(LabIcon.resolveReact, { icon: icon, className: \"cellButton-icon\", tag: \"span\", width: \"15px\", height: \"15px\" })));\nconst SendButton = ({ icon, onClick }) => (React.createElement(\"button\", { type: \"button\", onClick: () => onClick(), className: \"cellButton\" },\n    React.createElement(LabIcon.resolveReact, { icon: icon, className: \"cellButton-icon\", tag: \"span\", width: \"15px\", height: \"15px\" })));\nconst CodeCellButtonComponent = ({ cell, statusCell, info, }) => {\n    const submitGrade = async (val) => {\n        if (info.id == NaN) {\n            showDialog({\n                title: 'Grading Error',\n                body: \"Invalid Cell for grading.\",\n                buttons: [Dialog.okButton({ label: 'Ok' })]\n            });\n            return;\n        }\n        let postBody = {\n            \"student_id\": info.student_id,\n            \"submission_id\": info.id,\n            \"problem_id\": info.problem_id,\n            \"score\": val ? 1 : 2,\n            \"code\": cell.model.value.text\n        };\n        var status = val ? \"Correct.\" : \"Incorrect.\";\n        // console.log(\"Grade: \", postBody)\n        requestAPI('submissions/grade', {\n            method: 'POST',\n            body: JSON.stringify(postBody)\n        }).then(data => {\n            var msg = \"This submission is now graded as \" + status;\n            showDialog({\n                title: 'Grading Status',\n                body: msg,\n                buttons: [Dialog.okButton({ label: 'Ok' })]\n            });\n            statusCell.model.value.text = \"### Status: \" + status;\n        })\n            .catch(reason => {\n            showErrorMessage('Submission Grade Error', reason);\n            console.error(`Failed to grade the submission. \\n${reason}`);\n        });\n    };\n    const sendFeedback = async () => {\n        if (info.id == NaN) {\n            showDialog({\n                title: 'Feedback Error',\n                body: \"Invalid Cell for feedback.\",\n                buttons: [Dialog.okButton({ label: 'Ok' })]\n            });\n            return;\n        }\n        let postBody = {\n            \"student_id\": info.student_id,\n            \"submission_id\": info.id,\n            \"problem_id\": info.problem_id,\n            \"code\": cell.model.value.text\n        };\n        requestAPI('submissions/feedbacks', {\n            method: 'POST',\n            body: JSON.stringify(postBody)\n        }).then(data => {\n            showDialog({\n                title: 'Feedback Status',\n                body: data.msg,\n                buttons: [Dialog.okButton({ label: 'Ok' })]\n            });\n            statusCell.model.value.text = \"### Status: Try Again\";\n        })\n            .catch(reason => {\n            showErrorMessage('Feedback Send Error', reason);\n            console.error(`Failed to save feedback. \\n${reason}`);\n        });\n    };\n    return (React.createElement(\"div\", { className: 'grp' },\n        React.createElement(GradeButton, { icon: checkIcon, onClick: () => (submitGrade)(true) }),\n        React.createElement(GradeButton, { icon: closeIcon, onClick: () => (submitGrade)(false) }),\n        React.createElement(ResetButton, { icon: redoIcon, onClick: () => (sendFeedback)() })));\n};\nconst MarkdownCellButtonComponent = ({ cell, statusCell, info, }) => {\n    const sendFeedback = async () => {\n        let postBody = {\n            \"student_id\": info.student_id,\n            \"submission_id\": info.id,\n            \"problem_id\": info.problem_id,\n            \"code\": info.code,\n            \"message\": info.message,\n            \"comment\": cell.model.value.text\n        };\n        // console.log(\"Feedback: \", postBody)\n        requestAPI('submissions/feedbacks', {\n            method: 'POST',\n            body: JSON.stringify(postBody)\n        }).then(data => {\n            showDialog({\n                title: 'Feedback Status',\n                body: \"Feedback is sent to the student.\",\n                buttons: [Dialog.okButton({ label: 'Ok' })]\n            });\n        })\n            .catch(reason => {\n            showErrorMessage('Feedback Send Error', reason);\n            console.error(`Failed to save feedback. \\n${reason}`);\n        });\n    };\n    return (React.createElement(SendButton, { icon: saveIcon, onClick: () => (sendFeedback)() }));\n};\nexport class CellCheckButton extends ReactWidget {\n    constructor(cell, statusCell, info) {\n        super();\n        this.cell = null;\n        this.statusCell = null;\n        this.info = null;\n        this.cell = cell;\n        this.statusCell = statusCell;\n        this.info = info;\n        this.addClass('jp-grpCellButton');\n    }\n    render() {\n        return React.createElement(CodeCellButtonComponent, { cell: this.cell, statusCell: this.statusCell, info: this.info });\n    }\n}\nexport class FeedbackButton extends ReactWidget {\n    constructor(cell, info) {\n        super();\n        this.cell = null;\n        this.statusCell = null;\n        this.info = null;\n        this.cell = cell;\n        this.info = info;\n        this.addClass('jp-CellButton');\n    }\n    render() {\n        return React.createElement(MarkdownCellButtonComponent, { cell: this.cell, statusCell: this.cell, info: this.info });\n    }\n}\n"],"names":[],"sourceRoot":""}