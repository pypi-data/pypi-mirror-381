{"version":3,"file":"lib_index_js.f7d1294a5b7123ce3525.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCuC;AACkC;AACrB;AACU;AACN;AACmC;AAClD;AACa;AACC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mDAAM;AACvC;AACA;AACA;AACA,iCAAiC,sCAAsC;AACvE,wCAAwC;AACxC,wCAAwC,oBAAoB,iBAAiB;AAC7E,iEAAiE,cAAc,2CAA2C,oBAAoB,gBAAgB;AAC9J;AACA,wCAAwC;AACxC,wCAAwC,oBAAoB,iBAAiB;AAC7E,0GAA0G,cAAc,2CAA2C,oBAAoB,gBAAgB;AACvM;AACA,wCAAwC;AACxC,wCAAwC,oBAAoB,iBAAiB;AAC7E,uGAAuG,cAAc,2CAA2C,oBAAoB,gBAAgB;AACpM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oBAAoB,8DAAO;AAClC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,iEAAe;AAChD,eAAe,wEAAmB;AAClC;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gEAAU;AACnD;AACA;AACA,kCAAkC,wDAAM,iBAAiB,wDAAM,YAAY,mBAAmB;AAC9F,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sEAAgB;AACxC;AACA;AACA;AACA,oBAAoB,oDAAU;AAC9B;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wBAAwB,gEAAU;AAClC;AACA,0CAA0C,eAAe;AACzD,sCAAsC,wDAAM,YAAY,aAAa;AACrE,yBAAyB;AACzB,qBAAqB;AACrB;AACA,wBAAwB,sEAAgB;AACxC,mEAAmE,OAAO;AAC1E,qBAAqB;AACrB;AACA;AACA;AACA,oBAAoB,sEAAgB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oBAAoB,sEAAgB;AACpC,iEAAiE,OAAO;AACxE,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2DAA2D,+DAAiB;AAC5E;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,yEAAyE,OAAO;AAChF,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,6DAA6D,OAAO;AACpE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,4EAA4E,OAAO;AACnF,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,gEAAgE,OAAO;AACvE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;AC5XkC;AACmC;AACpD;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,wEAAwE,OAAO;AAC/E,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA","sources":["webpack://carpo-teacher/./lib/handler.js","webpack://carpo-teacher/./lib/index.js","webpack://carpo-teacher/./lib/upload-solution.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'carpo-teacher', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { requestAPI } from './handler';\nimport { NotebookActions, INotebookTracker } from '@jupyterlab/notebook';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nimport { GetSolutionButton } from './upload-solution';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nconst CommandIds = {\n    /**\n     * Command to run a code cell.\n     */\n    mainMenuRegister: 'jlab-carpo:main-register',\n    mainMenuGotoApp: 'jlab-carpo:main-goto-app',\n    mainMenuAbout: 'jlab-carpo:main-about',\n};\nclass RegistrationWidget extends Widget {\n    constructor() {\n        super();\n        this.node.innerHTML = `\n      <div style=\"padding: 20px; font-family: var(--jp-ui-font-family);\">\n        <div style=\"margin-bottom: 15px;\">\n          <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Name:</label>\n          <input type=\"text\" id=\"name-input\" style=\"width: 100%; padding: 8px; border: 1px solid var(--jp-border-color1); border-radius: 3px; font-size: 13px;\" placeholder=\"Enter your name\" />\n        </div>\n        <div style=\"margin-bottom: 15px;\">\n          <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Server URL:</label>\n          <input type=\"url\" id=\"server-url-input\" placeholder=\"http://127.0.0.1:8081\" style=\"width: 100%; padding: 8px; border: 1px solid var(--jp-border-color1); border-radius: 3px; font-size: 13px;\" placeholder=\"Enter server URL\" />\n        </div>\n        <div style=\"margin-bottom: 15px;\">\n          <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">App URL:</label>\n          <input type=\"url\" id=\"app-url-input\" placeholder=\"http://127.0.0.1:8080\" style=\"width: 100%; padding: 8px; border: 1px solid var(--jp-border-color1); border-radius: 3px; font-size: 13px;\" placeholder=\"Enter app URL\" />\n        </div>\n      </div>\n    `;\n        this.nameInput = this.node.querySelector('#name-input');\n        this.serverUrlInput = this.node.querySelector('#server-url-input');\n        this.appUrlInput = this.node.querySelector('#app-url-input');\n    }\n    getValue() {\n        return {\n            name: this.nameInput.value,\n            serverUrl: this.serverUrlInput.value,\n            appUrl: this.appUrlInput.value\n        };\n    }\n}\nexport const fooIcon = new LabIcon({\n    name: 'barpkg:foo',\n    svgstr: `<svg fill=\"#000000\" height=\"200px\" width=\"200px\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 488.9 488.9\" xml:space=\"preserve\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g id=\"SVGRepo_iconCarrier\"> <g> <path d=\"M411.448,100.9l-94.7-94.7c-4.2-4.2-9.4-6.2-14.6-6.2h-210.1c-11.4,0-20.8,9.4-20.8,20.8v330.8c0,11.4,9.4,20.8,20.8,20.8 h132.1v95.7c0,11.4,9.4,20.8,20.8,20.8s20.8-9.4,20.8-19.8v-96.6h132.1c11.4,0,19.8-9.4,19.8-19.8V115.5 C417.748,110.3,415.648,105.1,411.448,100.9z M324.048,70.4l39.3,38.9h-39.3V70.4z M378.148,331.9h-112.3v-82.8l17.7,16.3 c10,10,25,3.1,28.1-1c7.3-8.3,7.3-21.8-1-29.1l-52-47.9c-8.3-7.3-20.8-7.3-28.1,0l-52,47.9c-8.3,8.3-8.3,20.8-1,29.1 c8.3,8.3,20.8,8.3,29.1,1l17.7-16.3v82.8h-111.4V41.6h169.6v86.3c0,11.4,9.4,20.8,20.8,20.8h74.9v183.2H378.148z\"></path> </g> </g></svg>`\n});\n/**\n * Initialization data for the carpo-teacher extension.\n */\nconst plugin = {\n    id: 'carpo-teacher:plugin',\n    autoStart: true,\n    requires: [INotebookTracker, ICommandPalette],\n    optional: [IFileBrowserFactory],\n    activate: (app, nbTrack, palette, browserFactory, docManager) => {\n        console.log('JupyterLab extension carpo-teacher is activated!');\n        const { commands } = app;\n        const RegisterMenu = CommandIds.mainMenuRegister;\n        commands.addCommand(RegisterMenu, {\n            label: 'Register',\n            caption: 'Register user to server.',\n            execute: async (args) => {\n                try {\n                    const registrationWidget = new RegistrationWidget();\n                    const result = await showDialog({\n                        title: 'Registration Information',\n                        body: registrationWidget,\n                        buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'Register' })]\n                    });\n                    if (!result.button.accept) {\n                        return;\n                    }\n                    const formData = registrationWidget.getValue();\n                    // Validate that all fields are filled\n                    if (!formData.name || !formData.serverUrl || !formData.appUrl) {\n                        showErrorMessage('Registration Error', 'Please fill in all required fields.');\n                        return;\n                    }\n                    // Send POST request with collected information\n                    requestAPI('register', {\n                        method: 'POST',\n                        body: JSON.stringify(formData)\n                    })\n                        .then(data => {\n                        console.log('Registration successful:', data);\n                        showDialog({\n                            title: 'Registration Successful',\n                            body: `User ${formData.name} has been registered successfully.`,\n                            buttons: [Dialog.okButton({ label: 'Ok' })]\n                        });\n                    })\n                        .catch(reason => {\n                        showErrorMessage('Registration Error', reason);\n                        console.error(`Failed to register user.\\n${reason}`);\n                    });\n                }\n                catch (error) {\n                    console.error('Registration dialog error:', error);\n                    showErrorMessage('Registration Error', 'Failed to collect registration information.');\n                }\n            }\n        });\n        // Add the command to the command palette\n        const category = 'Extension Examples';\n        palette.addItem({\n            command: RegisterMenu,\n            category: category,\n            args: { origin: 'from the palette' }\n        });\n        const GotoAppMenu = CommandIds.mainMenuGotoApp;\n        commands.addCommand(GotoAppMenu, {\n            label: 'Go to App',\n            caption: 'Open the web app.',\n            execute: (args) => {\n                console.log(\"Args: \", args);\n                requestAPI('view_app', {\n                    method: 'GET'\n                })\n                    .then(data => {\n                    console.log(data);\n                    window.open(data.url, \"_blank\");\n                })\n                    .catch(reason => {\n                    showErrorMessage('View App Status Error', reason);\n                    console.error(`Failed to view app status.\\n${reason}`);\n                });\n            }\n        });\n        // Add the command to the command palette\n        palette.addItem({\n            command: GotoAppMenu,\n            category: category,\n            args: { origin: 'from the palette' }\n        });\n        const AboutMenu = CommandIds.mainMenuAbout;\n        commands.addCommand(AboutMenu, {\n            label: 'About Carpo',\n            caption: 'Carpo Information',\n            execute: (args) => {\n                const content = new Widget();\n                content.node.innerHTML = `\n          <h3>How to use carpo:</h3>\n          <ol>\n            <li><strong>To Register </strong>: Input name, ServerUrl and AppUrl </li>\n            <li><strong>Publish</strong>: To publish active cell as an exercise.</li>\n            <li><strong>Unpublish</strong>: To publish an exercise.</li>\n            <li><strong>UploadSolution</strong>: To upload exercise solution.</li>\n          </ol>\n        `;\n                showDialog({\n                    title: 'About Carpo',\n                    body: content,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            }\n        });\n        // Add the command to the command palette\n        palette.addItem({\n            command: AboutMenu,\n            category: category,\n            args: { origin: 'from the palette' }\n        });\n        // Depreciated\n        nbTrack.currentChanged.connect(() => {\n            // const notebookPanel = nbTrack.currentWidget;\n            // const notebook = nbTrack.currentWidget.content;\n            // / If current Notebook is not inside Exercises/problem_ directory, disable all functionality.\n            if (!nbTrack.currentWidget.context.path.includes(\"problem_\")) {\n                return;\n            }\n        });\n        //  tell the document registry about your widget extension:\n        // app.docRegistry.addWidgetExtension('Notebook', new RegisterButton());\n        // app.docRegistry.addWidgetExtension('Notebook', new GoToApp());\n        app.docRegistry.addWidgetExtension('Notebook', new PublishProblemButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new ArchiveProblemButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new GetSolutionButton());\n    }\n};\nexport class RegisterButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const register = () => {\n            requestAPI('register', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: '',\n                    body: \"Instructor \" + data.name + \" has been registered.\",\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Registration Error', reason);\n                console.error(`Failed to register user as Instructor.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'register-button',\n            label: 'Register',\n            onClick: register,\n            tooltip: 'Register as a Teacher',\n        });\n        panel.toolbar.insertItem(10, 'register', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class GoToApp {\n    createNew(panel, context) {\n        const viewWebApp = () => {\n            requestAPI('view_app', {\n                method: 'GET'\n            })\n                .then(data => {\n                // console.log(data);\n                window.open(data.url, \"_blank\");\n            })\n                .catch(reason => {\n                showErrorMessage('View App Status Error', reason);\n                console.error(`Failed to view app status.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-app-button',\n            label: 'App',\n            onClick: viewWebApp,\n            tooltip: 'Go to the web app',\n        });\n        panel.toolbar.insertItem(11, 'viewWebApp', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class PublishProblemButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const publishProblem = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var problem;\n            var format;\n            var header;\n            var time_limit;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    problem = c.model.sharedModel.getSource();\n                    format = c.model.type;\n                }\n            });\n            if (problem.includes(\"#PID:\")) {\n                showErrorMessage('Publish Question Error', \"Problem already published.\");\n                return;\n            }\n            if (!problem) {\n                showErrorMessage('Publish Question Error', \"Problem is empty.\");\n                return;\n            }\n            header = problem.split('\\n')[0];\n            if (header.match(/[0-9]+[a-zA-Z]/)) {\n                time_limit = header.match(/[0-9]+[a-zA-Z]/)[0];\n            }\n            let postBody = {\n                \"question\": problem,\n                \"format\": format,\n                \"time_limit\": time_limit\n            };\n            requestAPI('problem', {\n                method: 'POST',\n                body: JSON.stringify(postBody)\n            })\n                .then(data => {\n                // console.log(data)\n                notebook.widgets.map((c, index) => {\n                    if (index === activeIndex) {\n                        c.model.sharedModel.setSource(\"#PID:\" + data.id + \"\\n\" + problem);\n                    }\n                });\n                showDialog({\n                    title: 'New Questions Published',\n                    body: 'Problem ' + data.id + \" is published.\",\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Publish Question Error', reason);\n                console.error(`Failed to publish question to the server.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'publish-problem-button',\n            label: 'Publish',\n            onClick: publishProblem,\n            tooltip: 'Publish New Problem.',\n        });\n        panel.toolbar.insertItem(10, 'publishNewProblem', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class ArchiveProblemButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const archiveProblem = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var problem;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    problem = c.model.sharedModel.getSource();\n                }\n            });\n            if (!problem.includes(\"#PID:\")) {\n                showErrorMessage('Unpublish Question Error', \"Active problem not found.\");\n                return;\n            }\n            var problem_id = parseInt((problem.split(\"\\n\")[0]).split(\"#PID:\")[1]);\n            let body = {\n                \"problem_id\": problem_id\n            };\n            requestAPI('problem', {\n                method: 'DELETE',\n                body: JSON.stringify(body)\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: 'Question Unpublished',\n                    body: 'Problem id ' + problem_id + ' is  unpublished.',\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Unpublish Question Error', reason);\n                console.error(`Failed to unpublish question.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'archive-problem-button',\n            label: 'Unpublish',\n            onClick: archiveProblem,\n            tooltip: 'Unpublish the problem.',\n        });\n        panel.toolbar.insertItem(11, 'archivesProblem', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport default plugin;\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler';\nexport class GetSolutionButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const uploadSolution = () => {\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var code_block;\n            var solution;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    code_block = c.model.sharedModel.getSource();\n                }\n            });\n            if (!code_block.includes(\"#PID:\")) {\n                showErrorMessage('Upload Solution Error', \"Active problem not found.\");\n                return;\n            }\n            var problem_id = parseInt((code_block.split(\"\\n\")[0]).split(\"#PID:\")[1]);\n            solution = code_block.split('\\n').slice(1).join('\\n').trim();\n            let body = {\n                \"problem_id\": problem_id,\n                \"code\": solution\n            };\n            requestAPI('solution', {\n                method: 'POST',\n                body: JSON.stringify(body)\n            })\n                .then(data => {\n                showDialog({\n                    title: 'Solution Uploaded',\n                    body: 'Solution uploaded for ProblemID ' + problem_id + '.',\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Upload Solution Error', reason);\n                console.error(`Failed to upload solution to problem.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'upload-solution-button',\n            label: 'UploadSolution',\n            onClick: uploadSolution,\n            tooltip: 'Upload solutions to the problem.',\n        });\n        panel.toolbar.insertItem(12, 'getSolutions', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n"],"names":[],"sourceRoot":""}