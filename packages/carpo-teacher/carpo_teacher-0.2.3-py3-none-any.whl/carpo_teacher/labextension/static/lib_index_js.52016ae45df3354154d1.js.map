{"version":3,"file":"lib_index_js.52016ae45df3354154d1.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCuC;AACkC;AACX;AACN;AACmC;AACrC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B,eAAe,wEAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2DAA2D,+DAAiB;AAC5E;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,yEAAyE,OAAO;AAChF,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,6DAA6D,OAAO;AACpE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAe;AAC3B,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,8GAA8G,OAAO;AACrH,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAe;AAC3B,YAAY,oDAAU;AACtB;AACA,aAAa;AACb;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,8GAA8G,OAAO;AACrH,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,4EAA4E,OAAO;AACnF,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,gEAAgE,OAAO;AACvE,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;ACvTkC;AACmC;AACpD;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,gEAAU;AAC1B;AACA;AACA,8BAA8B,wDAAM,YAAY,aAAa;AAC7D,iBAAiB;AACjB,aAAa;AACb;AACA,gBAAgB,sEAAgB;AAChC,wEAAwE,OAAO;AAC/E,aAAa;AACb;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA","sources":["webpack://carpo-teacher/./lib/handler.js","webpack://carpo-teacher/./lib/index.js","webpack://carpo-teacher/./lib/upload-solution.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'carpo-teacher', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { requestAPI } from './handler';\nimport { NotebookActions, INotebookTracker } from '@jupyterlab/notebook';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { GetSolutionButton } from './upload-solution';\n/**\n * Initialization data for the carpo-teacher extension.\n */\nconst plugin = {\n    id: 'carpo-teacher:plugin',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [IFileBrowserFactory],\n    activate: (app, nbTrack, browserFactory, docManager) => {\n        console.log('JupyterLab extension carpo-teacher is activated!');\n        nbTrack.currentChanged.connect(() => {\n            // const notebookPanel = nbTrack.currentWidget;\n            // const notebook = nbTrack.currentWidget.content;\n            // If current Notebook is not inside Exercises/problem_ directory, disable all functionality.\n            if (!nbTrack.currentWidget.context.path.includes(\"problem_\")) {\n                return;\n            }\n        });\n        //  tell the document registry about your widget extension:\n        app.docRegistry.addWidgetExtension('Notebook', new RegisterButton());\n        app.docRegistry.addWidgetExtension('Notebook', new GoToApp());\n        app.docRegistry.addWidgetExtension('Notebook', new PublishProblemButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new ArchiveProblemButtonExtension());\n        app.docRegistry.addWidgetExtension('Notebook', new GetSolutionButton());\n    }\n};\nexport class RegisterButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const register = () => {\n            requestAPI('register', {\n                method: 'GET'\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: '',\n                    body: \"Instructor \" + data.name + \" has been registered.\",\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Registration Error', reason);\n                console.error(`Failed to register user as Instructor.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'register-button',\n            label: 'Register',\n            onClick: register,\n            tooltip: 'Register as a Teacher',\n        });\n        panel.toolbar.insertItem(10, 'register', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class GoToApp {\n    createNew(panel, context) {\n        const viewWebApp = () => {\n            requestAPI('view_app', {\n                method: 'GET'\n            })\n                .then(data => {\n                // console.log(data);\n                window.open(data.url, \"_blank\");\n            })\n                .catch(reason => {\n                showErrorMessage('View App Status Error', reason);\n                console.error(`Failed to view app status.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'get-app-button',\n            label: 'App',\n            onClick: viewWebApp,\n            tooltip: 'Go to the web app',\n        });\n        panel.toolbar.insertItem(11, 'viewWebApp', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class NewSubmissionButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const getSubmissions = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            requestAPI('submissions', {\n                method: 'GET'\n            })\n                .then(data => {\n                if (data.Remaining != 0) {\n                    var msg = \"Notebook \" + data.sub_file + \" is placed in folder Problem_\" + data.question + \". There are \" + data.remaining + \" submissions in the queue.\";\n                }\n                else {\n                    var msg = \"You have got 0 submissions. Please check again later.\\n\";\n                }\n                showDialog({\n                    title: 'Submission Status',\n                    body: msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n                console.log(data);\n            })\n                .catch(reason => {\n                showErrorMessage('Get Student Code Error', reason);\n                console.error(`Failed to get student's code from the server. Please check your connection.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'sync-code-button',\n            label: 'GetSubs',\n            onClick: getSubmissions,\n            tooltip: 'Download new submissions from students.',\n        });\n        panel.toolbar.insertItem(11, 'getStudentsCode', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class AllSubmissionButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const getGradedSubmissions = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            requestAPI('graded_submissions', {\n                method: 'GET'\n            })\n                .then(data => {\n                showDialog({\n                    title: '',\n                    body: data.msg,\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n                console.log(data);\n            })\n                .catch(reason => {\n                showErrorMessage('Get Graded Submissions Error', reason);\n                console.error(`Failed to get student's code from the server. Please check your connection.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'sync-code-button',\n            label: 'Graded',\n            onClick: getGradedSubmissions,\n            tooltip: 'Get all graded submissions.',\n        });\n        panel.toolbar.insertItem(12, 'getAllGradedSubmissions', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class PublishProblemButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const publishProblem = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var problem;\n            var format;\n            var header;\n            var time_limit;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    problem = c.model.sharedModel.getSource();\n                    format = c.model.type;\n                }\n            });\n            if (problem.includes(\"#PID:\")) {\n                showErrorMessage('Publish Question Error', \"Problem already published.\");\n                return;\n            }\n            if (!problem) {\n                showErrorMessage('Publish Question Error', \"Problem is empty.\");\n                return;\n            }\n            header = problem.split('\\n')[0];\n            if (header.match(/[0-9]+[a-zA-Z]/)) {\n                time_limit = header.match(/[0-9]+[a-zA-Z]/)[0];\n            }\n            let postBody = {\n                \"question\": problem,\n                \"format\": format,\n                \"time_limit\": time_limit\n            };\n            requestAPI('problem', {\n                method: 'POST',\n                body: JSON.stringify(postBody)\n            })\n                .then(data => {\n                console.log(data);\n                notebook.widgets.map((c, index) => {\n                    if (index === activeIndex) {\n                        c.model.sharedModel.setSource(\"#PID:\" + data.id + \"\\n\" + problem);\n                        console.log(\"Add Problem ID to the cell content\");\n                    }\n                });\n                showDialog({\n                    title: 'New Questions Published',\n                    body: 'Problem ' + data.id + \" is published.\",\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Publish Question Error', reason);\n                console.error(`Failed to publish question to the server.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'publish-problem-button',\n            label: 'Publish',\n            onClick: publishProblem,\n            tooltip: 'Publish New Problem.',\n        });\n        panel.toolbar.insertItem(12, 'publishNewProblem', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport class ArchiveProblemButtonExtension {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const archiveProblem = () => {\n            NotebookActions.clearAllOutputs(panel.content);\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var problem;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    problem = c.model.sharedModel.getSource();\n                }\n            });\n            if (!problem.includes(\"#PID:\")) {\n                showErrorMessage('Unpublish Question Error', \"Active problem not found.\");\n                return;\n            }\n            var problem_id = parseInt((problem.split(\"\\n\")[0]).split(\"#PID:\")[1]);\n            let body = {\n                \"problem_id\": problem_id\n            };\n            requestAPI('problem', {\n                method: 'DELETE',\n                body: JSON.stringify(body)\n            })\n                .then(data => {\n                showDialog({\n                    title: 'Question Unpublished',\n                    body: 'Problem id ' + problem_id + ' is  unpublished.',\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Unpublish Question Error', reason);\n                console.error(`Failed to unpublish question.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'archive-problem-button',\n            label: 'Unpublish',\n            onClick: archiveProblem,\n            tooltip: 'Unpublish the problem.',\n        });\n        panel.toolbar.insertItem(13, 'archivesProblem', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\nexport default plugin;\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton, Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler';\nexport class GetSolutionButton {\n    /**\n     * Create a new extension for the notebook panel widget.\n     *\n     * @param panel Notebook panel\n     * @param context Notebook context\n     * @returns Disposable on the added button\n     */\n    createNew(panel, context) {\n        const uploadSolution = () => {\n            const notebook = panel.content;\n            const activeIndex = notebook.activeCellIndex;\n            var code_block;\n            var solution;\n            notebook.widgets.map((c, index) => {\n                if (index === activeIndex) {\n                    code_block = c.model.sharedModel.getSource();\n                }\n            });\n            if (!code_block.includes(\"#PID:\")) {\n                showErrorMessage('Upload Solution Error', \"Active problem not found.\");\n                return;\n            }\n            var problem_id = parseInt((code_block.split(\"\\n\")[0]).split(\"#PID:\")[1]);\n            solution = code_block.split('\\n').slice(1).join('\\n').trim();\n            let body = {\n                \"problem_id\": problem_id,\n                \"code\": solution\n            };\n            requestAPI('solution', {\n                method: 'POST',\n                body: JSON.stringify(body)\n            })\n                .then(data => {\n                console.log(data);\n                showDialog({\n                    title: 'Solution Uploaded',\n                    body: 'Solution uploaded for ProblemID ' + problem_id + '.',\n                    buttons: [Dialog.okButton({ label: 'Ok' })]\n                });\n            })\n                .catch(reason => {\n                showErrorMessage('Upload Solution Error', reason);\n                console.error(`Failed to upload solution to problem.\\n${reason}`);\n            });\n        };\n        const button = new ToolbarButton({\n            className: 'upload-solution-button',\n            label: 'UploadSolution',\n            onClick: uploadSolution,\n            tooltip: 'Upload solutions to the problem.',\n        });\n        panel.toolbar.insertItem(14, 'getSolutions', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n}\n"],"names":[],"sourceRoot":""}