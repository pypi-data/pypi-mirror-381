"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_api_ts";
exports.ids = ["_ssr_src_lib_api_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: () => (/* binding */ apiClient),\n/* harmony export */   checkBackendAvailability: () => (/* binding */ checkBackendAvailability)\n/* harmony export */ });\n/**\n * API client for RAGents backend\n */ const API_BASE_URL = \"http://localhost:8000\" || 0;\nclass ApiClient {\n    constructor(baseUrl = API_BASE_URL){\n        this.baseUrl = baseUrl;\n    }\n    async sendChatMessage(request) {\n        // Create an AbortController for manual timeout control\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 120000); // 2 minutes timeout\n        try {\n            const response = await fetch(`${this.baseUrl}/chat`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(request),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                throw new Error(`Chat API error: ${response.statusText}`);\n            }\n            return response.json();\n        } catch (error) {\n            clearTimeout(timeoutId);\n            if (error instanceof Error && error.name === \"AbortError\") {\n                throw new Error(\"Request timed out - agent response took too long\");\n            }\n            throw error;\n        }\n    }\n    async uploadDocument(file, userId) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"user_id\", userId);\n        const response = await fetch(`${this.baseUrl}/upload`, {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            throw new Error(`Upload API error: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async getDocuments(userId) {\n        const response = await fetch(`${this.baseUrl}/documents?user_id=${userId}`);\n        if (!response.ok) {\n            throw new Error(`Documents API error: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async deleteDocument(documentId) {\n        const response = await fetch(`${this.baseUrl}/documents/${documentId}`, {\n            method: \"DELETE\"\n        });\n        if (!response.ok) {\n            throw new Error(`Delete API error: ${response.statusText}`);\n        }\n    }\n    async healthCheck() {\n        try {\n            const response = await fetch(`${this.baseUrl}/health`);\n            return response.json();\n        } catch (error) {\n            throw new Error(\"Backend is not available\");\n        }\n    }\n}\nconst apiClient = new ApiClient();\n// Helper function to check if backend is available\nasync function checkBackendAvailability() {\n    try {\n        await apiClient.healthCheck();\n        return true;\n    } catch  {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LG1EQUFtRDtBQUM1QyxlQUFlb0M7SUFDcEIsSUFBSTtRQUNGLE1BQU1ELFVBQVVELFdBQVc7UUFDM0IsT0FBTztJQUNULEVBQUUsT0FBTTtRQUNOLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFnZW50cy1mcm9udGVuZC8uL3NyYy9saWIvYXBpLnRzPzJmYWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBUEkgY2xpZW50IGZvciBSQUdlbnRzIGJhY2tlbmRcbiAqL1xuXG5pbXBvcnQgeyBDaGF0TWVzc2FnZSwgRG9jdW1lbnQsIEFnZW50Q29uZmlnIH0gZnJvbSAnQC90eXBlcyc7XG5cbmNvbnN0IEFQSV9CQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdFJlcXVlc3Qge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGFnZW50X3R5cGU6IHN0cmluZztcbiAgc2Vzc2lvbl9pZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0UmVzcG9uc2Uge1xuICByZXNwb25zZTogc3RyaW5nO1xuICBzZXNzaW9uX2lkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRVcGxvYWRSZXNwb25zZSB7XG4gIGlkOiBzdHJpbmc7XG4gIGZpbGVuYW1lOiBzdHJpbmc7XG4gIHN0YXR1czogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmNsYXNzIEFwaUNsaWVudCB7XG4gIHByaXZhdGUgYmFzZVVybDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGJhc2VVcmw6IHN0cmluZyA9IEFQSV9CQVNFX1VSTCkge1xuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gIH1cblxuICBhc3luYyBzZW5kQ2hhdE1lc3NhZ2UocmVxdWVzdDogQ2hhdFJlcXVlc3QpOiBQcm9taXNlPENoYXRSZXNwb25zZT4ge1xuICAgIC8vIENyZWF0ZSBhbiBBYm9ydENvbnRyb2xsZXIgZm9yIG1hbnVhbCB0aW1lb3V0IGNvbnRyb2xcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCAxMjAwMDApOyAvLyAyIG1pbnV0ZXMgdGltZW91dFxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9jaGF0YCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxuICAgICAgICBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgfSk7XG5cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhdCBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1ZXN0IHRpbWVkIG91dCAtIGFnZW50IHJlc3BvbnNlIHRvb2sgdG9vIGxvbmcnKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVwbG9hZERvY3VtZW50KGZpbGU6IEZpbGUsIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxEb2N1bWVudFVwbG9hZFJlc3BvbnNlPiB7XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3VzZXJfaWQnLCB1c2VySWQpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L3VwbG9hZGAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVwbG9hZCBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICB9XG5cbiAgYXN5bmMgZ2V0RG9jdW1lbnRzKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxEb2N1bWVudFtdPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2RvY3VtZW50cz91c2VyX2lkPSR7dXNlcklkfWApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEb2N1bWVudHMgQVBJIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZURvY3VtZW50KGRvY3VtZW50SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9kb2N1bWVudHMvJHtkb2N1bWVudElkfWAsIHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYERlbGV0ZSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoZWFsdGhDaGVjaygpOiBQcm9taXNlPHsgc3RhdHVzOiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0vaGVhbHRoYCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhY2tlbmQgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXBpQ2xpZW50ID0gbmV3IEFwaUNsaWVudCgpO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgYmFja2VuZCBpcyBhdmFpbGFibGVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0JhY2tlbmRBdmFpbGFiaWxpdHkoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgYXBpQ2xpZW50LmhlYWx0aENoZWNrKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSJdLCJuYW1lcyI6WyJBUElfQkFTRV9VUkwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfQVBJX1VSTCIsIkFwaUNsaWVudCIsImNvbnN0cnVjdG9yIiwiYmFzZVVybCIsInNlbmRDaGF0TWVzc2FnZSIsInJlcXVlc3QiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwidGltZW91dElkIiwic2V0VGltZW91dCIsImFib3J0IiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInNpZ25hbCIsImNsZWFyVGltZW91dCIsIm9rIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwianNvbiIsImVycm9yIiwibmFtZSIsInVwbG9hZERvY3VtZW50IiwiZmlsZSIsInVzZXJJZCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJnZXREb2N1bWVudHMiLCJkZWxldGVEb2N1bWVudCIsImRvY3VtZW50SWQiLCJoZWFsdGhDaGVjayIsImFwaUNsaWVudCIsImNoZWNrQmFja2VuZEF2YWlsYWJpbGl0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/api.ts\n");

/***/ })

};
;