[build-system]
requires = [
    "scikit-build-core>=0.3.0",
]
build-backend = "build_backend.dp_backend"
backend-path = ["."]

[project]
name = "deepmd-gnn"
dynamic = ["version"]
description = "DeePMD-kit plugin for graph neural network models."
authors = [
    { name = "Jinzhe Zeng", email = "jinzhe.zeng@ustc.edu.cn"},
]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
]
dependencies = [
    "torch",
    "deepmd-kit[torch]>=3.0.0",
    "mace-torch>=0.3.5",
    "nequip",
    "e3nn",
    "dargs",
]
requires-python = ">=3.9"
readme = "README.md"
keywords = [
]

[project.scripts]

[project.entry-points."deepmd.pt"]
mace = "deepmd_gnn.mace:MaceModel"
nequip = "deepmd_gnn.nequip:NequipModel"

[project.urls]
repository = "https://gitlab.com/RutgersLBSR/deepmd-gnn"

[project.optional-dependencies]
test = [
    'pytest',
    'pytest-cov',
    "dargs>=0.4.8",
]
docs = [
    "sphinx",
    "sphinx-autoapi",
    "myst-parser",
    "deepmodeling-sphinx>=0.3.0",
    "sphinx-book-theme",
    "dargs",
]

[tool.scikit-build]
wheel.py-api = "py2.py3"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = [
    "/deepmd_gnn/_version.py",
]

[tool.scikit-build.cmake.define]
BUILD_PY_IF = true
BUILD_CPP_IF = false

[tool.setuptools_scm]
version_file = "deepmd_gnn/_version.py"

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "PLR0912",
    "PLR0913", # Too many arguments in function definition
    "PLR0915",
    "PLR2004",
    "FBT001",
    "FBT002",
    "N803",
    "FA100",
    "S603",
    "ANN101",
    "ANN102",
    "C901",
    "E501",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ANN",
    "D101",
    "D102",
]
"docs/conf.py" = [
    "ERA001",
    "INP001",
]

[tool.coverage.report]
include = ["deepmd_gnn/*"]


[tool.cibuildwheel]
test-command = [
    """python -c "import deepmd_gnn.op" """,
]
build = ["cp312-*"]
skip = ["*-win32", "*-manylinux_i686", "*-musllinux*"]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"

[tool.cibuildwheel.macos]
repair-wheel-command = """delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"""

[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair --exclude libc10.so --exclude libtorch.so --exclude libtorch_cpu.so -w {dest_dir} {wheel}"
environment-pass = [
    "CIBW_BUILD",
]
[tool.cibuildwheel.linux.environment]
# use CPU version of torch for building, which should also work for GPU
# note: uv has different behavior from pip on extra index url
# https://github.com/astral-sh/uv/blob/main/PIP_COMPATIBILITY.md#packages-that-exist-on-multiple-indexes
UV_EXTRA_INDEX_URL = "https://download.pytorch.org/whl/cpu"
