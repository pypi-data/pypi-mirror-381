import json
import logging
from pathlib import Path

from modelica_builder.modelica_mos_file import ModelicaMOS

logger = logging.getLogger(__name__)


def load_loop_order(system_parameters_file: Path) -> list:
    """Loads the loop order from a JSON file

    loop_order file is always saved next to the system parameters file

    :param system_parameters_file: Path to the system parameters file
    :return: list of building & ghe ids in loop order
    """
    loop_order_path = Path(system_parameters_file).parent / "_loop_order.json"
    if not loop_order_path.is_file():
        raise FileNotFoundError(f"Loop order file not found at {loop_order_path}")
    return json.loads(loop_order_path.read_text())


def set_loop_order_data_in_template_params(
    template_params: dict, feature_properties: list[dict], loop_order: list
) -> dict:
    """
    Set the loop order data in the template parameters dictionary.

    :param template_params: Dictionary of template parameters
    :param feature_properties: List of feature property dicts from the GeoJSON
    :param loop_order: List of loop order dicts generated by ThermalNetwork
    :return: Updated template parameters dictionary with loop order data
    """
    # determine total number of sources and GHEs
    number_of_sources = 0
    for group in loop_order:
        sources = group.get("list_source_ids_in_group", [])
        ghes = group.get("list_ghe_ids_in_group", [])
        number_of_sources += len(sources) + len(ghes)

    template_params["loop_order"] = {
        "number_of_loops": len(loop_order),
        "data": loop_order,
        "number_of_sources": number_of_sources,
    }

    dict_of_pipe_lengths = {
        feature_prop.get("startFeatureId"): feature_prop["total_length"]
        for feature_prop in feature_properties
        if feature_prop["type"] == "ThermalConnector"
    }
    ordered_feature_list = []
    ordered_pipe_list = []
    for loop in loop_order:
        ordered_feature_list.extend(loop["list_bldg_ids_in_group"])
        if "list_ghe_ids_in_group" in loop:
            ordered_feature_list.extend(loop["list_ghe_ids_in_group"])
        if "list_source_ids_in_group" in loop:
            ordered_feature_list.extend(loop["list_source_ids_in_group"])

    for feature in ordered_feature_list:
        for dict_feature, pipe_length in dict_of_pipe_lengths.items():
            if dict_feature == feature:
                ordered_pipe_list.append(pipe_length)

    template_params["globals"]["lDis"] = str(ordered_pipe_list[:-1]).replace("[", "{").replace("]", "}")
    template_params["globals"]["lEnd"] = ordered_pipe_list[-1]
    return template_params


def set_minimum_dhw_load(data_dir) -> None:
    """
    If peak water heating load is 0, set it to 5kW or 10% of peak space heating load, whichever is greater.

    :param data_dir: Path to the Modelica data directory
    :return: None
    """
    if data_dir.is_dir():
        for bldg_dir in data_dir.iterdir():
            mo_load_file = data_dir / bldg_dir / "modelica.mos"
            # In case the modelica loads file isn't named modelica.mos:
            if not mo_load_file.is_file():
                modelica_loads = list((data_dir / bldg_dir).rglob("*"))
                if len(modelica_loads) == 1:
                    mo_load_file = modelica_loads[0]
            if mo_load_file.is_file():
                mos_file = ModelicaMOS(mo_load_file)
                # Force peak water heating load to be at least 5000W
                peak_water = mos_file.retrieve_header_variable_value("Peak water heating load", cast_type=float)
                if peak_water == 0:
                    peak_heat = mos_file.retrieve_header_variable_value("Peak space heating load", cast_type=float)
                    peak_swh = max(peak_heat / 10, 5000)

                    mos_file.replace_header_variable_value("Peak water heating load", peak_swh)
                    mos_file.save()
    else:
        # The scaffold didn't get built properly or there are no loads in the Modelica package.
        logger.warning(
            f"Could not find Modelica data directory {data_dir}. Perhaps there are no loads in the model,"
            " and perhaps that is intentional."
        )
