# vim: ts=2

stages:
  - testing
  - release

run-tests:
  stage: testing
  script:
    - rm -rf .venv uv.lock
    - uv sync --all-extras --no-progress
    - source .venv/bin/activate
    - ./run-tests.sh
    - deactivate
  coverage: /TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG =~ /^v\d+/

sonarqube-check:
  stage: testing
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - master
    - merge_requests

pypi-release:
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+/'
  script:
    - rm -f dist/*
    - uvx check-manifest
    - uv build
    - uvx twine check dist/*
    - TWINE_USERNAME=${PYPI_USER} TWINE_PASSWORD=${PYPI_PASSWORD} uvx twine upload --skip-existing --non-interactive dist/*
