# coding: utf-8

"""
    Trinsic API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from trinsic_api.models.external_mdl_field_data import ExternalMdlFieldData
from trinsic_api.models.mdl_certificate_data import MdlCertificateData
from typing import Optional, Set
from typing_extensions import Self

class MdlIdentityData(BaseModel):
    """
    MdlIdentityData
    """ # noqa: E501
    iaca_root_certificate: MdlCertificateData = Field(description="Information about the IACA Root Certificate which signed the Issuer Certificate for this mDL.", alias="iacaRootCertificate")
    document_signer_certificate: MdlCertificateData = Field(description="Information about the Document Signer Certificate which signed the mDL presented by the user.", alias="documentSignerCertificate")
    name_spaces: Dict[str, Dict[str, ExternalMdlFieldData]] = Field(description="The namespaces, and fields within those namespaces, which were present in the processed mDL.", alias="nameSpaces")
    __properties: ClassVar[List[str]] = ["iacaRootCertificate", "documentSignerCertificate", "nameSpaces"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MdlIdentityData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of iaca_root_certificate
        if self.iaca_root_certificate:
            _dict['iacaRootCertificate'] = self.iaca_root_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_signer_certificate
        if self.document_signer_certificate:
            _dict['documentSignerCertificate'] = self.document_signer_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in name_spaces (dict)
        _field_dict = {}
        if self.name_spaces:
            for _key_name_spaces in self.name_spaces:
                if self.name_spaces[_key_name_spaces]:
                    _field_dict[_key_name_spaces] = self.name_spaces[_key_name_spaces].to_dict()
            _dict['nameSpaces'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MdlIdentityData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iacaRootCertificate": MdlCertificateData.from_dict(obj["iacaRootCertificate"]) if obj.get("iacaRootCertificate") is not None else None,
            "documentSignerCertificate": MdlCertificateData.from_dict(obj["documentSignerCertificate"]) if obj.get("documentSignerCertificate") is not None else None,
            "nameSpaces": dict(
                (_k, dict(
                    (_ik, ExternalMdlFieldData.from_dict(_iv))
                        for _ik, _iv in _v.items()
                    )
                    if _v is not None
                    else None
                )
                for _k, _v in obj.get("nameSpaces").items()
            )
            if obj.get("nameSpaces") is not None
            else None
        })
        return _obj


