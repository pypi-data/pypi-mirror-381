# coding: utf-8

"""
    Trinsic API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trinsic_api.models.document_type import DocumentType
from typing import Optional, Set
from typing_extensions import Self

class DocumentData(BaseModel):
    """
    DocumentData
    """ # noqa: E501
    type: Optional[DocumentType] = None
    number: Optional[StrictStr] = None
    issue_date: Optional[date] = Field(default=None, alias="issueDate")
    expiration_date: Optional[date] = Field(default=None, alias="expirationDate")
    issuing_country: Optional[StrictStr] = Field(default=None, alias="issuingCountry")
    issuing_authority: Optional[StrictStr] = Field(default=None, alias="issuingAuthority")
    __properties: ClassVar[List[str]] = ["type", "number", "issueDate", "expirationDate", "issuingCountry", "issuingAuthority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if issue_date (nullable) is None
        # and model_fields_set contains the field
        if self.issue_date is None and "issue_date" in self.model_fields_set:
            _dict['issueDate'] = None

        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['expirationDate'] = None

        # set to None if issuing_country (nullable) is None
        # and model_fields_set contains the field
        if self.issuing_country is None and "issuing_country" in self.model_fields_set:
            _dict['issuingCountry'] = None

        # set to None if issuing_authority (nullable) is None
        # and model_fields_set contains the field
        if self.issuing_authority is None and "issuing_authority" in self.model_fields_set:
            _dict['issuingAuthority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "number": obj.get("number"),
            "issueDate": obj.get("issueDate"),
            "expirationDate": obj.get("expirationDate"),
            "issuingCountry": obj.get("issuingCountry"),
            "issuingAuthority": obj.get("issuingAuthority")
        })
        return _obj


