# coding: utf-8

"""
    Trinsic API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trinsic_api.models.mdl_exchange_mechanism import MdlExchangeMechanism
from typing import Optional, Set
from typing_extensions import Self

class CreateMdlExchangeRequest(BaseModel):
    """
    Request to create an mDL Exchange.
    """ # noqa: E501
    verification_profile_id: StrictStr = Field(description="The ID of the VerificationProfile to use for this mDL exchange.", alias="verificationProfileId")
    provider: StrictStr = Field(description="The ID of the provider to use for this mDL exchange.")
    exchange_mechanism: MdlExchangeMechanism = Field(description="The mechanism by which the mDL exchange will occur (web, native SDK, etc.)", alias="exchangeMechanism")
    document_type: StrictStr = Field(description="The document type to request from the wallet.              Typically, this is one of the following values:              - `org.iso.18013.5.1.mDL` (Mobile Driver's License) - `com.google.wallet.idcard.1` (Google Wallet ID Pass)", alias="documentType")
    name_spaces: Dict[str, Dict[str, StrictBool]] = Field(description="The namespaces and fields to request from the mDL.              This is a nested map / dictionary. The outer dictionary's keys are namespaces (e.g. \"org.iso.18013.5.1\"). The inner dictionary's keys are field names within each namespace, with boolean values indicating whether the specified field will be retained post-verification.", alias="nameSpaces")
    digital_credentials_api_host: Optional[StrictStr] = Field(default=None, description="If using the `DigitalCredentialsApi` exchange mechanism, this is the hostname on which the Digital Credentials API will be called.              For example, if the user is on the page `https://foo.example.com/verify-mdl`, the proper value to use is `foo.example.com`.              Present for ease of testing only. May be removed as this API is stabilized.", alias="digitalCredentialsApiHost")
    android_native_app_package_name: Optional[StrictStr] = Field(default=None, description="If using the `NativeApp` exchange mechanism with the `google-wallet` provider, this is the package name of the Android App which will execute the mDL exchange.              This should be set to the package name of your app.              Present for ease of testing only. May be removed as this API is stabilized.", alias="androidNativeAppPackageName")
    android_native_app_signing_certificate_fingerprint: Optional[StrictStr] = Field(default=None, description="If using the `NativeApp` exchange mechanism with the `google-wallet` provider, this is the SHA-256 fingerprint of the signing certificate used to sign the Android App which will execute the mDL exchange.              Present for ease of testing only. May be removed as this API is stabilized.", alias="androidNativeAppSigningCertificateFingerprint")
    __properties: ClassVar[List[str]] = ["verificationProfileId", "provider", "exchangeMechanism", "documentType", "nameSpaces", "digitalCredentialsApiHost", "androidNativeAppPackageName", "androidNativeAppSigningCertificateFingerprint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateMdlExchangeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if digital_credentials_api_host (nullable) is None
        # and model_fields_set contains the field
        if self.digital_credentials_api_host is None and "digital_credentials_api_host" in self.model_fields_set:
            _dict['digitalCredentialsApiHost'] = None

        # set to None if android_native_app_package_name (nullable) is None
        # and model_fields_set contains the field
        if self.android_native_app_package_name is None and "android_native_app_package_name" in self.model_fields_set:
            _dict['androidNativeAppPackageName'] = None

        # set to None if android_native_app_signing_certificate_fingerprint (nullable) is None
        # and model_fields_set contains the field
        if self.android_native_app_signing_certificate_fingerprint is None and "android_native_app_signing_certificate_fingerprint" in self.model_fields_set:
            _dict['androidNativeAppSigningCertificateFingerprint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateMdlExchangeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "verificationProfileId": obj.get("verificationProfileId"),
            "provider": obj.get("provider"),
            "exchangeMechanism": obj.get("exchangeMechanism"),
            "documentType": obj.get("documentType"),
            "nameSpaces": obj.get("nameSpaces"),
            "digitalCredentialsApiHost": obj.get("digitalCredentialsApiHost"),
            "androidNativeAppPackageName": obj.get("androidNativeAppPackageName"),
            "androidNativeAppSigningCertificateFingerprint": obj.get("androidNativeAppSigningCertificateFingerprint")
        })
        return _obj


