# coding: utf-8

"""
    Trinsic API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from trinsic_api.models.match import Match
from typing import Optional, Set
from typing_extensions import Self

class MatchData(BaseModel):
    """
    MatchData
    """ # noqa: E501
    national_id_number: Optional[Match] = Field(default=None, alias="nationalIdNumber")
    full_name: Optional[Match] = Field(default=None, alias="fullName")
    given_name: Optional[Match] = Field(default=None, alias="givenName")
    middle_name: Optional[Match] = Field(default=None, alias="middleName")
    family_name: Optional[Match] = Field(default=None, alias="familyName")
    sex: Optional[Match] = None
    date_of_birth: Optional[Match] = Field(default=None, alias="dateOfBirth")
    face_match: Optional[Match] = Field(default=None, alias="faceMatch")
    liveness: Optional[Match] = None
    image_authenticity: Optional[Match] = Field(default=None, alias="imageAuthenticity")
    __properties: ClassVar[List[str]] = ["nationalIdNumber", "fullName", "givenName", "middleName", "familyName", "sex", "dateOfBirth", "faceMatch", "liveness", "imageAuthenticity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of national_id_number
        if self.national_id_number:
            _dict['nationalIdNumber'] = self.national_id_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of full_name
        if self.full_name:
            _dict['fullName'] = self.full_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of given_name
        if self.given_name:
            _dict['givenName'] = self.given_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of middle_name
        if self.middle_name:
            _dict['middleName'] = self.middle_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of family_name
        if self.family_name:
            _dict['familyName'] = self.family_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sex
        if self.sex:
            _dict['sex'] = self.sex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_of_birth
        if self.date_of_birth:
            _dict['dateOfBirth'] = self.date_of_birth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_match
        if self.face_match:
            _dict['faceMatch'] = self.face_match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liveness
        if self.liveness:
            _dict['liveness'] = self.liveness.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_authenticity
        if self.image_authenticity:
            _dict['imageAuthenticity'] = self.image_authenticity.to_dict()
        # set to None if national_id_number (nullable) is None
        # and model_fields_set contains the field
        if self.national_id_number is None and "national_id_number" in self.model_fields_set:
            _dict['nationalIdNumber'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['fullName'] = None

        # set to None if given_name (nullable) is None
        # and model_fields_set contains the field
        if self.given_name is None and "given_name" in self.model_fields_set:
            _dict['givenName'] = None

        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['middleName'] = None

        # set to None if family_name (nullable) is None
        # and model_fields_set contains the field
        if self.family_name is None and "family_name" in self.model_fields_set:
            _dict['familyName'] = None

        # set to None if sex (nullable) is None
        # and model_fields_set contains the field
        if self.sex is None and "sex" in self.model_fields_set:
            _dict['sex'] = None

        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['dateOfBirth'] = None

        # set to None if face_match (nullable) is None
        # and model_fields_set contains the field
        if self.face_match is None and "face_match" in self.model_fields_set:
            _dict['faceMatch'] = None

        # set to None if liveness (nullable) is None
        # and model_fields_set contains the field
        if self.liveness is None and "liveness" in self.model_fields_set:
            _dict['liveness'] = None

        # set to None if image_authenticity (nullable) is None
        # and model_fields_set contains the field
        if self.image_authenticity is None and "image_authenticity" in self.model_fields_set:
            _dict['imageAuthenticity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nationalIdNumber": Match.from_dict(obj["nationalIdNumber"]) if obj.get("nationalIdNumber") is not None else None,
            "fullName": Match.from_dict(obj["fullName"]) if obj.get("fullName") is not None else None,
            "givenName": Match.from_dict(obj["givenName"]) if obj.get("givenName") is not None else None,
            "middleName": Match.from_dict(obj["middleName"]) if obj.get("middleName") is not None else None,
            "familyName": Match.from_dict(obj["familyName"]) if obj.get("familyName") is not None else None,
            "sex": Match.from_dict(obj["sex"]) if obj.get("sex") is not None else None,
            "dateOfBirth": Match.from_dict(obj["dateOfBirth"]) if obj.get("dateOfBirth") is not None else None,
            "faceMatch": Match.from_dict(obj["faceMatch"]) if obj.get("faceMatch") is not None else None,
            "liveness": Match.from_dict(obj["liveness"]) if obj.get("liveness") is not None else None,
            "imageAuthenticity": Match.from_dict(obj["imageAuthenticity"]) if obj.get("imageAuthenticity") is not None else None
        })
        return _obj


