# coding: utf-8

"""
    Trinsic API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IndonesiaDukcapilMatchInput(BaseModel):
    """
    IndonesiaDukcapilMatchInput
    """ # noqa: E501
    full_name: Optional[StrictStr] = Field(default=None, description="The user's full name", alias="fullName")
    date_of_birth: Optional[date] = Field(default=None, description="The user's date of birth, in `YYYY-MM-DD` format", alias="dateOfBirth")
    nik_id_number: Optional[StrictStr] = Field(default=None, description="The user's Indonesia NIK ID number", alias="nikIdNumber")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the individual.              Either email or phone number must be provided.")
    phone_number: Optional[StrictStr] = Field(default=None, description="The phone number of the individual.              Either email or phone number must be provided.", alias="phoneNumber")
    selfie_image: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The raw bytes of the selfie image of the individual.              Must be JPEG or PNG format; 10MB maximum.", alias="selfieImage")
    document_image: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The raw bytes of the image of the individual's KTP government ID.              Must be JPEG format; 1MB maximum.              Optional.", alias="documentImage")
    consent_given_at: Optional[datetime] = Field(default=None, description="The timestamp when consent was given by the user for the verification.", alias="consentGivenAt")
    __properties: ClassVar[List[str]] = ["fullName", "dateOfBirth", "nikIdNumber", "email", "phoneNumber", "selfieImage", "documentImage", "consentGivenAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndonesiaDukcapilMatchInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['fullName'] = None

        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['dateOfBirth'] = None

        # set to None if nik_id_number (nullable) is None
        # and model_fields_set contains the field
        if self.nik_id_number is None and "nik_id_number" in self.model_fields_set:
            _dict['nikIdNumber'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phoneNumber'] = None

        # set to None if selfie_image (nullable) is None
        # and model_fields_set contains the field
        if self.selfie_image is None and "selfie_image" in self.model_fields_set:
            _dict['selfieImage'] = None

        # set to None if document_image (nullable) is None
        # and model_fields_set contains the field
        if self.document_image is None and "document_image" in self.model_fields_set:
            _dict['documentImage'] = None

        # set to None if consent_given_at (nullable) is None
        # and model_fields_set contains the field
        if self.consent_given_at is None and "consent_given_at" in self.model_fields_set:
            _dict['consentGivenAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndonesiaDukcapilMatchInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullName": obj.get("fullName"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "nikIdNumber": obj.get("nikIdNumber"),
            "email": obj.get("email"),
            "phoneNumber": obj.get("phoneNumber"),
            "selfieImage": obj.get("selfieImage"),
            "documentImage": obj.get("documentImage"),
            "consentGivenAt": obj.get("consentGivenAt")
        })
        return _obj


