[build-system]
requires = ["setuptools>=61.0,<70", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-server-things"
version = "1.3.0"
description = "Model Context Protocol server for Things 3 task management integration"
readme = "README.md"
authors = [
    {name = "MCP Developer", email = "developer@example.com"}
]
keywords = ["mcp", "things3", "applescript", "task-management", "productivity"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
requires-python = ">=3.8"
dependencies = [
    "fastmcp>=2.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "asyncio-mqtt>=0.11.0",
    "things.py>=0.0.15",
    "dateparser>=1.1.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
config = [
    "python-dotenv>=0.19.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "python-dotenv>=0.19.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=1.0.0",
]

[project.urls]
"Homepage" = "https://github.com/ebowman/mcp-server-things"
"Bug Reports" = "https://github.com/ebowman/mcp-server-things/issues"  
"Source" = "https://github.com/ebowman/mcp-server-things"

[project.scripts]
things-mcp = "src.things_mcp.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["things_mcp*"]

[tool.setuptools.package-data]
things_mcp = ["*.json"]

# Testing Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--color=yes",
    "--durations=10",
    "-ra"
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests requiring multiple components",
    "server: Server-level tests",
    "applescript: Tests involving AppleScript operations", 
    "tools: Tests for MCP tools",
    "models: Tests for data models",
    "error: Error handling tests",
    "slow: Slow tests that may take longer to execute",
    "skip_ci: Tests to skip in CI environment",
]
asyncio_mode = "auto"
minversion = "7.0"
timeout = 300
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src/things_mcp"]
branch = true
omit = [
    "tests/*",
    "src/things_mcp/__main__.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
precision = 2
show_missing = true
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Code Formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

# Import Sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["*/__pycache__", "*/.*", "*/venv", "*/.venv"]

# Type Checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Flake8 Configuration
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
]
per-file-ignores = [
    "tests/*:F401,F811,F841",  # Allow unused imports in tests
    "__init__.py:F401",       # Allow unused imports in __init__.py
]

# Bandit Security Linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Pre-commit Configuration (removed - not valid in pyproject.toml)