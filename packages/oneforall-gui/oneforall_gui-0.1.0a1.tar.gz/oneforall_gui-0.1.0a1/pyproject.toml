[project]
name = "oneforall-gui"
version = "0.1.0a1"
description = "OneForAll â€” lightweight Python GUI toolkit using pywebview and Python-only components."
readme = "README.md"
license = { file = "LICENSE" }
authors = [{name = "Rohit Ahirwal", email = "lucifer@codewithlucifer.com"}]
maintainers = [{name = "Rohit Ahirwal", email = "lucifer@codewithlucifer.com"}]
requires-python = ">=3.9"
keywords = ["python", "gui", "pywebview", "tailwind", "desktop-app", "framework", "components", "reactive"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Desktop Environment",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
]
dependencies = [
    "pywebview>=4.0.0",
    "typer>=0.9.0",
    "watchdog>=3.0.0",
    "pyinstaller>=5.0.0",
    "jinja2>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/Rohit-Ahirwal/oneforall"
Documentation = "https://oneforall-docs.vercel.app"
Repository = "https://github.com/Rohit-Ahirwal/oneforall"
"Bug Tracker" = "https://github.com/Rohit-Ahirwal/oneforall/issues"
Changelog = "https://github.com/Rohit-Ahirwal/oneforall/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/Rohit-Ahirwal"

[project.optional-dependencies]
dev = [
    "black>=24.0.0",      # code formatter
    "isort>=5.13.0",      # import sorter
    "flake8>=7.0.0",      # linter
    "mypy>=1.11.0",       # static type checker
    "pytest>=8.0.0",      # test runner
    "pytest-cov>=5.0.0",  # coverage reports
    "pre-commit>=4.0.0",  # auto run checks before git commit
    "build>=0.10.0",      # build tool
    "twine>=4.0.0",       # upload to PyPI
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",   # mocking utilities
    "pytest-asyncio>=0.24.0" # async tests support
]

[project.scripts]
oneforall = "oneforall.cli:cli"

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["oneforall*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
oneforall = ["templates/*.tpl", "static/*", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["oneforall"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["oneforall"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]