[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "langlint"
version = "0.0.2"
description = "A scalable, domain-agnostic platform for automated translation and standardization of structured text in scientific collaboration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "LangLint Team", email = "langlint@example.com"}
]
maintainers = [
    {name = "LangLint Team", email = "langlint@example.com"}
]
keywords = ["translation", "internationalization", "scientific-collaboration", "parsing", "i18n"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Internationalization",
    "Topic :: Text Processing :: Linguistic",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "mistune>=3.0.0",
    "nbformat>=5.7.0",
    "openai>=1.0.0",
    "deepl>=1.12.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "pyyaml>=6.0",
    "toml>=0.10.2",
    "click>=8.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "regex>=2023.0.0",
    "deep-translator>=1.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "pip-audit>=2.6.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/HzaCode/Langlint"
Documentation = "https://github.com/HzaCode/Langlint"
Repository = "https://github.com/HzaCode/Langlint.git"
Issues = "https://github.com/HzaCode/Langlint/issues"
Changelog = "https://github.com/HzaCode/Langlint/blob/main/CHANGELOG.md"

[project.scripts]
langlint = "langlint.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["langlint*"]

[tool.setuptools.package-data]
langlint = ["py.typed", "*.pyi"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mistune.*",
    "nbformat.*",
    "openai.*",
    "deepl.*",
    "aiohttp.*",
    "aiofiles.*",
    "yaml.*",
    "toml.*",
    "click.*",
    "rich.*",
    "tqdm.*",
    "regex.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["langlint"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]

# LangLint configuration
[tool.langlint]
# Global settings
translator = "openai"
target_lang = "EN-US"
source_lang = ["zh", "ja", "ko"]

# Path/pattern-specific overrides
[tool.langlint."docs/**/*.md"]
translator = "deepl"

[tool.langlint."notebooks/experimental/**/*.ipynb"]
target_lang = "EN-GB"

# Global exclusions
exclude = ["**/data/", "**/secrets.yml", "**/node_modules/", "**/__pycache__/"]
